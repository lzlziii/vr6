using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Il2CppDummyDll;
using UniRx.Async;
using UniRx.Async.CompilerServices;
using UniRx.Async.Internal;
using UniRx.InternalUtil;
using UniRx.Operators;
using UniRx.Triggers;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.LowLevel;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.UI;

[assembly: AssemblyVersion("3.7.1.6")]
namespace Microsoft.CodeAnalysis
{
	[Token(Token = "0x2000002")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFD48", Offset = "0x8AFD48")]
	[AttributeAttribute(Name = "EmbeddedAttribute", RVA = "0x8AFD48", Offset = "0x8AFD48")]
	internal sealed class EmbeddedAttribute : Attribute
	{
		[Token(Token = "0x6000001")]
		[Address(RVA = "0x1691F5C", Offset = "0x1691F5C", VA = "0x1691F5C")]
		public EmbeddedAttribute()
		{
		}
	}
}
namespace System.Runtime.CompilerServices
{
	[Token(Token = "0x2000003")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFD80", Offset = "0x8AFD80")]
	[AttributeAttribute(Name = "EmbeddedAttribute", RVA = "0x8AFD80", Offset = "0x8AFD80")]
	internal sealed class IsReadOnlyAttribute : Attribute
	{
		[Token(Token = "0x6000002")]
		[Address(RVA = "0x169699C", Offset = "0x169699C", VA = "0x169699C")]
		public IsReadOnlyAttribute()
		{
		}
	}
}
[Token(Token = "0x2000004")]
public class Basics : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cubeA;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cubeB;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x118BD2C", Offset = "0x118BD2C", VA = "0x118BD2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x118BF9C", Offset = "0x118BF9C", VA = "0x118BF9C")]
	public Basics()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x118BFA4", Offset = "0x118BFA4", VA = "0x118BFA4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B513C", Offset = "0x8B513C")]
	private Vector3 <Start>b__2_0()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x118BFC0", Offset = "0x118BFC0", VA = "0x118BFC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B514C", Offset = "0x8B514C")]
	private void <Start>b__2_1(Vector3 x)
	{
	}
}
[Token(Token = "0x2000005")]
public class Sequences : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x12CB9FC", Offset = "0x12CB9FC", VA = "0x12CB9FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x12CBB78", Offset = "0x12CBB78", VA = "0x12CBB78")]
	public Sequences()
	{
	}
}
namespace System.Runtime.CompilerServices
{
	[Token(Token = "0x2000006")]
	public sealed class AsyncMethodBuilderAttribute : Attribute
	{
		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2610", Offset = "0x8B2610")]
		private readonly Type <BuilderType>k__BackingField;

		[Token(Token = "0x17000001")]
		public Type BuilderType
		{
			[Token(Token = "0x6000009")]
			[Address(RVA = "0x118042C", Offset = "0x118042C", VA = "0x118042C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B515C", Offset = "0x8B515C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0x1180434", Offset = "0x1180434", VA = "0x1180434")]
		public AsyncMethodBuilderAttribute(Type builderType)
		{
		}
	}
}
namespace UniRx
{
	[Token(Token = "0x2000007")]
	public static class UnityEqualityComparer
	{
		[Token(Token = "0x2000008")]
		private static class Cache<T>
		{
			[Token(Token = "0x400001F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly IEqualityComparer<T> Comparer;

			[Token(Token = "0x600000E")]
			static Cache()
			{
			}
		}

		[Token(Token = "0x2000009")]
		private sealed class Vector2EqualityComparer : IEqualityComparer<Vector2>
		{
			[Token(Token = "0x600000F")]
			[Address(RVA = "0x107B968", Offset = "0x107B968", VA = "0x107B968", Slot = "4")]
			public bool Equals(Vector2 self, Vector2 vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000010")]
			[Address(RVA = "0x107B9CC", Offset = "0x107B9CC", VA = "0x107B9CC", Slot = "5")]
			public int GetHashCode(Vector2 obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000011")]
			[Address(RVA = "0x107BA18", Offset = "0x107BA18", VA = "0x107BA18")]
			public Vector2EqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000A")]
		private sealed class Vector3EqualityComparer : IEqualityComparer<Vector3>
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0x107BAD8", Offset = "0x107BAD8", VA = "0x107BAD8", Slot = "4")]
			public bool Equals(Vector3 self, Vector3 vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000013")]
			[Address(RVA = "0x107BB58", Offset = "0x107BB58", VA = "0x107BB58", Slot = "5")]
			public int GetHashCode(Vector3 obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000014")]
			[Address(RVA = "0x107BBC8", Offset = "0x107BBC8", VA = "0x107BBC8")]
			public Vector3EqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000B")]
		private sealed class Vector4EqualityComparer : IEqualityComparer<Vector4>
		{
			[Token(Token = "0x6000015")]
			[Address(RVA = "0x107BC38", Offset = "0x107BC38", VA = "0x107BC38", Slot = "4")]
			public bool Equals(Vector4 self, Vector4 vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000016")]
			[Address(RVA = "0x107BCD8", Offset = "0x107BCD8", VA = "0x107BCD8", Slot = "5")]
			public int GetHashCode(Vector4 obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000017")]
			[Address(RVA = "0x107BD60", Offset = "0x107BD60", VA = "0x107BD60")]
			public Vector4EqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000C")]
		private sealed class ColorEqualityComparer : IEqualityComparer<Color>
		{
			[Token(Token = "0x6000018")]
			[Address(RVA = "0x107B318", Offset = "0x107B318", VA = "0x107B318", Slot = "4")]
			public bool Equals(Color self, Color other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000019")]
			[Address(RVA = "0x107B3B8", Offset = "0x107B3B8", VA = "0x107B3B8", Slot = "5")]
			public int GetHashCode(Color obj)
			{
				return default(int);
			}

			[Token(Token = "0x600001A")]
			[Address(RVA = "0x107B440", Offset = "0x107B440", VA = "0x107B440")]
			public ColorEqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000D")]
		private sealed class RectEqualityComparer : IEqualityComparer<Rect>
		{
			[Token(Token = "0x600001B")]
			[Address(RVA = "0x107B624", Offset = "0x107B624", VA = "0x107B624", Slot = "4")]
			public bool Equals(Rect self, Rect other)
			{
				return default(bool);
			}

			[Token(Token = "0x600001C")]
			[Address(RVA = "0x107B704", Offset = "0x107B704", VA = "0x107B704", Slot = "5")]
			public int GetHashCode(Rect obj)
			{
				return default(int);
			}

			[Token(Token = "0x600001D")]
			[Address(RVA = "0x107B7BC", Offset = "0x107B7BC", VA = "0x107B7BC")]
			public RectEqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000E")]
		private sealed class BoundsEqualityComparer : IEqualityComparer<Bounds>
		{
			[Token(Token = "0x600001E")]
			[Address(RVA = "0x107ADC8", Offset = "0x107ADC8", VA = "0x107ADC8", Slot = "4")]
			public bool Equals(Bounds self, Bounds vector)
			{
				return default(bool);
			}

			[Token(Token = "0x600001F")]
			[Address(RVA = "0x107AE58", Offset = "0x107AE58", VA = "0x107AE58", Slot = "5")]
			public int GetHashCode(Bounds obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000020")]
			[Address(RVA = "0x107AEC4", Offset = "0x107AEC4", VA = "0x107AEC4")]
			public BoundsEqualityComparer()
			{
			}
		}

		[Token(Token = "0x200000F")]
		private sealed class QuaternionEqualityComparer : IEqualityComparer<Quaternion>
		{
			[Token(Token = "0x6000021")]
			[Address(RVA = "0x107B448", Offset = "0x107B448", VA = "0x107B448", Slot = "4")]
			public bool Equals(Quaternion self, Quaternion vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000022")]
			[Address(RVA = "0x107B4E8", Offset = "0x107B4E8", VA = "0x107B4E8", Slot = "5")]
			public int GetHashCode(Quaternion obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000023")]
			[Address(RVA = "0x107B570", Offset = "0x107B570", VA = "0x107B570")]
			public QuaternionEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000010")]
		private sealed class Color32EqualityComparer : IEqualityComparer<Color32>
		{
			[Token(Token = "0x6000024")]
			[Address(RVA = "0x107B20C", Offset = "0x107B20C", VA = "0x107B20C", Slot = "4")]
			public bool Equals(Color32 self, Color32 vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000025")]
			[Address(RVA = "0x107B298", Offset = "0x107B298", VA = "0x107B298", Slot = "5")]
			public int GetHashCode(Color32 obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000026")]
			[Address(RVA = "0x107B310", Offset = "0x107B310", VA = "0x107B310")]
			public Color32EqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000011")]
		private sealed class Vector2IntEqualityComparer : IEqualityComparer<Vector2Int>
		{
			[Token(Token = "0x6000027")]
			[Address(RVA = "0x107BA20", Offset = "0x107BA20", VA = "0x107BA20", Slot = "4")]
			public bool Equals(Vector2Int self, Vector2Int vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000028")]
			[Address(RVA = "0x107BA84", Offset = "0x107BA84", VA = "0x107BA84", Slot = "5")]
			public int GetHashCode(Vector2Int obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000029")]
			[Address(RVA = "0x107BAD0", Offset = "0x107BAD0", VA = "0x107BAD0")]
			public Vector2IntEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000012")]
		private sealed class Vector3IntEqualityComparer : IEqualityComparer<Vector3Int>
		{
			[Token(Token = "0x4000020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Vector3IntEqualityComparer Default;

			[Token(Token = "0x600002A")]
			[Address(RVA = "0x107AFF8", Offset = "0x107AFF8", VA = "0x107AFF8", Slot = "4")]
			public bool Equals(Vector3Int self, Vector3Int vector)
			{
				return default(bool);
			}

			[Token(Token = "0x600002B")]
			[Address(RVA = "0x107B178", Offset = "0x107B178", VA = "0x107B178", Slot = "5")]
			public int GetHashCode(Vector3Int obj)
			{
				return default(int);
			}

			[Token(Token = "0x600002C")]
			[Address(RVA = "0x107BBD0", Offset = "0x107BBD0", VA = "0x107BBD0")]
			public Vector3IntEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000013")]
		private sealed class RangeIntEqualityComparer : IEqualityComparer<RangeInt>
		{
			[Token(Token = "0x600002E")]
			[Address(RVA = "0x107B578", Offset = "0x107B578", VA = "0x107B578", Slot = "4")]
			public bool Equals(RangeInt self, RangeInt vector)
			{
				return default(bool);
			}

			[Token(Token = "0x600002F")]
			[Address(RVA = "0x107B5D4", Offset = "0x107B5D4", VA = "0x107B5D4", Slot = "5")]
			public int GetHashCode(RangeInt obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000030")]
			[Address(RVA = "0x107B61C", Offset = "0x107B61C", VA = "0x107B61C")]
			public RangeIntEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000014")]
		private sealed class RectIntEqualityComparer : IEqualityComparer<RectInt>
		{
			[Token(Token = "0x6000031")]
			[Address(RVA = "0x107B7C4", Offset = "0x107B7C4", VA = "0x107B7C4", Slot = "4")]
			public bool Equals(RectInt self, RectInt other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000032")]
			[Address(RVA = "0x107B8AC", Offset = "0x107B8AC", VA = "0x107B8AC", Slot = "5")]
			public int GetHashCode(RectInt obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000033")]
			[Address(RVA = "0x107B960", Offset = "0x107B960", VA = "0x107B960")]
			public RectIntEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000015")]
		private sealed class BoundsIntEqualityComparer : IEqualityComparer<BoundsInt>
		{
			[Token(Token = "0x6000034")]
			[Address(RVA = "0x107AECC", Offset = "0x107AECC", VA = "0x107AECC", Slot = "4")]
			public bool Equals(BoundsInt self, BoundsInt vector)
			{
				return default(bool);
			}

			[Token(Token = "0x6000035")]
			[Address(RVA = "0x107B0B8", Offset = "0x107B0B8", VA = "0x107B0B8", Slot = "5")]
			public int GetHashCode(BoundsInt obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000036")]
			[Address(RVA = "0x107B204", Offset = "0x107B204", VA = "0x107B204")]
			public BoundsIntEqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IEqualityComparer<Vector2> Vector2;

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly IEqualityComparer<Vector3> Vector3;

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly IEqualityComparer<Vector4> Vector4;

		[Token(Token = "0x4000008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly IEqualityComparer<Color> Color;

		[Token(Token = "0x4000009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly IEqualityComparer<Color32> Color32;

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly IEqualityComparer<Rect> Rect;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly IEqualityComparer<Bounds> Bounds;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly IEqualityComparer<Quaternion> Quaternion;

		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly RuntimeTypeHandle vector2Type;

		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly RuntimeTypeHandle vector3Type;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly RuntimeTypeHandle vector4Type;

		[Token(Token = "0x4000010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly RuntimeTypeHandle colorType;

		[Token(Token = "0x4000011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly RuntimeTypeHandle color32Type;

		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly RuntimeTypeHandle rectType;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static readonly RuntimeTypeHandle boundsType;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly RuntimeTypeHandle quaternionType;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly IEqualityComparer<Vector2Int> Vector2Int;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly IEqualityComparer<Vector3Int> Vector3Int;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly IEqualityComparer<RangeInt> RangeInt;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly IEqualityComparer<RectInt> RectInt;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly IEqualityComparer<BoundsInt> BoundsInt;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static readonly RuntimeTypeHandle vector2IntType;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static readonly RuntimeTypeHandle vector3IntType;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private static readonly RuntimeTypeHandle rangeIntType;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static readonly RuntimeTypeHandle rectIntType;

		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static readonly RuntimeTypeHandle boundsIntType;

		[Token(Token = "0x600000B")]
		public static IEqualityComparer<T> GetDefault<T>()
		{
			return null;
		}

		[Token(Token = "0x600000C")]
		[Address(RVA = "0x10B4988", Offset = "0x10B4988", VA = "0x10B4988")]
		private static object GetDefaultHelper(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000016")]
	public static class WebRequestExtensions
	{
		[Token(Token = "0x2000017")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFDC8", Offset = "0x8AFDC8")]
		private sealed class <>c__DisplayClass0_0<TResult>
		{
			[Token(Token = "0x4000021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<AsyncCallback, object, IAsyncResult> begin;

			[Token(Token = "0x4000022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IAsyncResult, TResult> end;

			[Token(Token = "0x4000023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WebRequest request;

			[Token(Token = "0x600003B")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x600003C")]
			internal IDisposable <AbortableDeferredAsyncRequest>b__0(IObserver<TResult> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x2000018")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFDD8", Offset = "0x8AFDD8")]
		private sealed class <>c__DisplayClass0_1<TResult>
		{
			[Token(Token = "0x4000024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int isCompleted;

			[Token(Token = "0x4000025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IDisposable subscription;

			[Token(Token = "0x4000026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass0_0<TResult> CS$<>8__locals1;

			[Token(Token = "0x600003D")]
			public <>c__DisplayClass0_1()
			{
			}

			[Token(Token = "0x600003E")]
			internal TResult <AbortableDeferredAsyncRequest>b__1(IAsyncResult ar)
			{
				return (TResult)null;
			}

			[Token(Token = "0x600003F")]
			internal void <AbortableDeferredAsyncRequest>b__2()
			{
			}
		}

		[Token(Token = "0x2000019")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFDE8", Offset = "0x8AFDE8")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HttpWebRequest request;

			[Token(Token = "0x6000040")]
			[Address(RVA = "0x1FCE788", Offset = "0x1FCE788", VA = "0x1FCE788")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6000041")]
			[Address(RVA = "0x1FCE790", Offset = "0x1FCE790", VA = "0x1FCE790")]
			internal HttpWebResponse <GetResponseAsObservable>b__0(IAsyncResult ar)
			{
				return null;
			}
		}

		[Token(Token = "0x6000037")]
		private static IObservable<TResult> AbortableDeferredAsyncRequest<TResult>(Func<AsyncCallback, object, IAsyncResult> begin, Func<IAsyncResult, TResult> end, WebRequest request)
		{
			return null;
		}

		[Token(Token = "0x6000038")]
		[Address(RVA = "0x10B8270", Offset = "0x10B8270", VA = "0x10B8270")]
		public static IObservable<WebResponse> GetResponseAsObservable(this WebRequest request)
		{
			return null;
		}

		[Token(Token = "0x6000039")]
		[Address(RVA = "0x10B8364", Offset = "0x10B8364", VA = "0x10B8364")]
		public static IObservable<HttpWebResponse> GetResponseAsObservable(this HttpWebRequest request)
		{
			return null;
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0x10B8498", Offset = "0x10B8498", VA = "0x10B8498")]
		public static IObservable<Stream> GetRequestStreamAsObservable(this WebRequest request)
		{
			return null;
		}
	}
	[Token(Token = "0x200001A")]
	public sealed class BooleanDisposable : IDisposable, ICancelable
	{
		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2620", Offset = "0x8B2620")]
		private bool <IsDisposed>k__BackingField;

		[Token(Token = "0x17000002")]
		public bool IsDisposed
		{
			[Token(Token = "0x6000042")]
			[Address(RVA = "0x1689C88", Offset = "0x1689C88", VA = "0x1689C88", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B519C", Offset = "0x8B519C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000043")]
			[Address(RVA = "0x1689C90", Offset = "0x1689C90", VA = "0x1689C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B51AC", Offset = "0x8B51AC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000044")]
		[Address(RVA = "0x1689C9C", Offset = "0x1689C9C", VA = "0x1689C9C")]
		public BooleanDisposable()
		{
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0x1689CA4", Offset = "0x1689CA4", VA = "0x1689CA4")]
		internal BooleanDisposable(bool isDisposed)
		{
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x1689CD4", Offset = "0x1689CD4", VA = "0x1689CD4", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200001B")]
	public sealed class CancellationDisposable : ICancelable, IDisposable
	{
		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CancellationTokenSource _cts;

		[Token(Token = "0x17000003")]
		public CancellationToken Token
		{
			[Token(Token = "0x6000049")]
			[Address(RVA = "0x168B400", Offset = "0x168B400", VA = "0x168B400")]
			get
			{
				return default(CancellationToken);
			}
		}

		[Token(Token = "0x17000004")]
		public bool IsDisposed
		{
			[Token(Token = "0x600004B")]
			[Address(RVA = "0x168B438", Offset = "0x168B438", VA = "0x168B438", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000047")]
		[Address(RVA = "0x168B328", Offset = "0x168B328", VA = "0x168B328")]
		public CancellationDisposable(CancellationTokenSource cts)
		{
		}

		[Token(Token = "0x6000048")]
		[Address(RVA = "0x168B3A0", Offset = "0x168B3A0", VA = "0x168B3A0")]
		public CancellationDisposable()
		{
		}

		[Token(Token = "0x600004A")]
		[Address(RVA = "0x168B41C", Offset = "0x168B41C", VA = "0x168B41C", Slot = "5")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200001C")]
	public sealed class CompositeDisposable : ICollection<IDisposable>, IEnumerable<IDisposable>, IEnumerable, IDisposable, ICancelable
	{
		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object _gate;

		[Token(Token = "0x400002B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _disposed;

		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<IDisposable> _disposables;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _count;

		[Token(Token = "0x400002E")]
		private const int SHRINK_THRESHOLD = 64;

		[Token(Token = "0x17000005")]
		public int Count
		{
			[Token(Token = "0x6000050")]
			[Address(RVA = "0x168CE84", Offset = "0x168CE84", VA = "0x168CE84", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000006")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000057")]
			[Address(RVA = "0x168DDC0", Offset = "0x168DDC0", VA = "0x168DDC0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000007")]
		public bool IsDisposed
		{
			[Token(Token = "0x600005A")]
			[Address(RVA = "0x168E03C", Offset = "0x168E03C", VA = "0x168E03C", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600004C")]
		[Address(RVA = "0x168CA98", Offset = "0x168CA98", VA = "0x168CA98")]
		public CompositeDisposable()
		{
		}

		[Token(Token = "0x600004D")]
		[Address(RVA = "0x168CB40", Offset = "0x168CB40", VA = "0x168CB40")]
		public CompositeDisposable(int capacity)
		{
		}

		[Token(Token = "0x600004E")]
		[Address(RVA = "0x168CC44", Offset = "0x168CC44", VA = "0x168CC44")]
		public CompositeDisposable(params IDisposable[] disposables)
		{
		}

		[Token(Token = "0x600004F")]
		[Address(RVA = "0x168CD64", Offset = "0x168CD64", VA = "0x168CD64")]
		public CompositeDisposable(IEnumerable<IDisposable> disposables)
		{
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0x168CE8C", Offset = "0x168CE8C", VA = "0x168CE8C", Slot = "6")]
		public void Add(IDisposable item)
		{
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0x168D080", Offset = "0x168D080", VA = "0x168D080", Slot = "10")]
		public bool Remove(IDisposable item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000053")]
		[Address(RVA = "0x168D4F8", Offset = "0x168D4F8", VA = "0x168D4F8", Slot = "13")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0x168D704", Offset = "0x168D704", VA = "0x168D704", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x168D8FC", Offset = "0x168D8FC", VA = "0x168D8FC", Slot = "8")]
		public bool Contains(IDisposable item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x168DA60", Offset = "0x168DA60", VA = "0x168DA60", Slot = "9")]
		public void CopyTo(IDisposable[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0x168DDC8", Offset = "0x168DDC8", VA = "0x168DDC8", Slot = "11")]
		public IEnumerator<IDisposable> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x168E038", Offset = "0x168E038", VA = "0x168E038", Slot = "12")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200001D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x8AFDF8", Offset = "0x8AFDF8")]
	public sealed class DictionaryDisposable<TKey, TValue> : IDisposable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TValue : IDisposable
	{
		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<TKey, TValue> inner;

		[Token(Token = "0x17000008")]
		public TValue Item
		{
			[Token(Token = "0x600005D")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x600005E")]
			set
			{
			}
		}

		[Token(Token = "0x17000009")]
		public int Count
		{
			[Token(Token = "0x600005F")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700000A")]
		public Dictionary<TKey, TValue>.KeyCollection Keys
		{
			[Token(Token = "0x6000060")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000B")]
		public Dictionary<TKey, TValue>.ValueCollection Values
		{
			[Token(Token = "0x6000061")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
		{
			[Token(Token = "0x6000068")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700000D")]
		private ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys
		{
			[Token(Token = "0x6000069")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values
		{
			[Token(Token = "0x600006A")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600005B")]
		public DictionaryDisposable()
		{
		}

		[Token(Token = "0x600005C")]
		public DictionaryDisposable(IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000062")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000063")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000064")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000065")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000066")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000067")]
		public Dictionary<TKey, TValue>.Enumerator GetEnumerator()
		{
			return default(Dictionary<TKey, TValue>.Enumerator);
		}

		[Token(Token = "0x600006B")]
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
		}

		[Token(Token = "0x600006C")]
		public void OnDeserialization(object sender)
		{
		}

		[Token(Token = "0x600006D")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x600006E")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x600006F")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000070")]
		private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000071")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000072")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000073")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200001E")]
	public static class Disposable
	{
		[Token(Token = "0x200001F")]
		private class EmptyDisposable : IDisposable
		{
			[Token(Token = "0x4000032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static EmptyDisposable Singleton;

			[Token(Token = "0x6000077")]
			[Address(RVA = "0x10BEC6C", Offset = "0x10BEC6C", VA = "0x10BEC6C")]
			private EmptyDisposable()
			{
			}

			[Token(Token = "0x6000078")]
			[Address(RVA = "0x10BEC74", Offset = "0x10BEC74", VA = "0x10BEC74", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000020")]
		private class AnonymousDisposable : IDisposable
		{
			[Token(Token = "0x4000033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool isDisposed;

			[Token(Token = "0x4000034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly Action dispose;

			[Token(Token = "0x600007A")]
			[Address(RVA = "0x10BEC0C", Offset = "0x10BEC0C", VA = "0x10BEC0C")]
			public AnonymousDisposable(Action dispose)
			{
			}

			[Token(Token = "0x600007B")]
			[Address(RVA = "0x10BEC38", Offset = "0x10BEC38", VA = "0x10BEC38", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000021")]
		private class AnonymousDisposable<T> : IDisposable
		{
			[Token(Token = "0x4000035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x4000036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly T state;

			[Token(Token = "0x4000037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> dispose;

			[Token(Token = "0x600007C")]
			public AnonymousDisposable(T state, Action<T> dispose)
			{
			}

			[Token(Token = "0x600007D")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IDisposable Empty;

		[Token(Token = "0x6000074")]
		[Address(RVA = "0x168E9E8", Offset = "0x168E9E8", VA = "0x168E9E8")]
		public static IDisposable Create(Action disposeAction)
		{
			return null;
		}

		[Token(Token = "0x6000075")]
		public static IDisposable CreateWithState<TState>(TState state, Action<TState> disposeAction)
		{
			return null;
		}
	}
	[Token(Token = "0x2000022")]
	public static class DisposableExtensions
	{
		[Token(Token = "0x2000023")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFE40", Offset = "0x8AFE40")]
		private sealed class <MonitorTriggerHealth>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400003A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObservableDestroyTrigger trigger;

			[Token(Token = "0x400003B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject targetGameObject;

			[Token(Token = "0x1700000F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000087")]
				[Address(RVA = "0x10BEDD4", Offset = "0x10BEDD4", VA = "0x10BEDD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000010")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000089")]
				[Address(RVA = "0x10BEE1C", Offset = "0x10BEE1C", VA = "0x10BEE1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000084")]
			[Address(RVA = "0x10BECD8", Offset = "0x10BECD8", VA = "0x10BECD8")]
			[DebuggerHidden]
			public <MonitorTriggerHealth>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000085")]
			[Address(RVA = "0x10BED04", Offset = "0x10BED04", VA = "0x10BED04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000086")]
			[Address(RVA = "0x10BED08", Offset = "0x10BED08", VA = "0x10BED08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000088")]
			[Address(RVA = "0x10BEDDC", Offset = "0x10BEDDC", VA = "0x10BEDDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600007E")]
		public static T AddTo<T>(this T disposable, ICollection<IDisposable> container) where T : IDisposable
		{
			return (T)null;
		}

		[Token(Token = "0x600007F")]
		public static T AddTo<T>(this T disposable, GameObject gameObject) where T : IDisposable
		{
			return (T)null;
		}

		[Token(Token = "0x6000080")]
		[Address(RVA = "0x1691AE0", Offset = "0x1691AE0", VA = "0x1691AE0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B51DC", Offset = "0x8B51DC")]
		private static IEnumerator MonitorTriggerHealth(ObservableDestroyTrigger trigger, GameObject targetGameObject)
		{
			return null;
		}

		[Token(Token = "0x6000081")]
		public static T AddTo<T>(this T disposable, Component gameObjectComponent) where T : IDisposable
		{
			return (T)null;
		}

		[Token(Token = "0x6000082")]
		public static T AddTo<T>(this T disposable, ICollection<IDisposable> container, GameObject gameObject) where T : IDisposable
		{
			return (T)null;
		}

		[Token(Token = "0x6000083")]
		public static T AddTo<T>(this T disposable, ICollection<IDisposable> container, Component gameObjectComponent) where T : IDisposable
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000024")]
	public interface ICancelable : IDisposable
	{
		[Token(Token = "0x17000011")]
		bool IsDisposed
		{
			[Token(Token = "0x600008A")]
			get;
		}
	}
	[Token(Token = "0x2000025")]
	public sealed class MultipleAssignmentDisposable : IDisposable, ICancelable
	{
		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly BooleanDisposable True;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object gate;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDisposable current;

		[Token(Token = "0x17000012")]
		public bool IsDisposed
		{
			[Token(Token = "0x600008B")]
			[Address(RVA = "0x175716C", Offset = "0x175716C", VA = "0x175716C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000013")]
		public IDisposable Disposable
		{
			[Token(Token = "0x600008C")]
			[Address(RVA = "0x175728C", Offset = "0x175728C", VA = "0x175728C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600008D")]
			[Address(RVA = "0x17573E8", Offset = "0x17573E8", VA = "0x17573E8")]
			set
			{
			}
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0x17575A0", Offset = "0x17575A0", VA = "0x17575A0", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0x1757768", Offset = "0x1757768", VA = "0x1757768")]
		public MultipleAssignmentDisposable()
		{
		}
	}
	[Token(Token = "0x2000026")]
	public sealed class RefCountDisposable : ICancelable, IDisposable
	{
		[Token(Token = "0x2000027")]
		private sealed class InnerDisposable : IDisposable
		{
			[Token(Token = "0x4000043")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private RefCountDisposable _parent;

			[Token(Token = "0x4000044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object parentLock;

			[Token(Token = "0x6000096")]
			[Address(RVA = "0x106D04C", Offset = "0x106D04C", VA = "0x106D04C")]
			public InnerDisposable(RefCountDisposable parent)
			{
			}

			[Token(Token = "0x6000097")]
			[Address(RVA = "0x106D0C4", Offset = "0x106D0C4", VA = "0x106D0C4", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object _gate;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDisposable _disposable;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _isPrimaryDisposed;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _count;

		[Token(Token = "0x17000014")]
		public bool IsDisposed
		{
			[Token(Token = "0x6000092")]
			[Address(RVA = "0x12C831C", Offset = "0x12C831C", VA = "0x12C831C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x12C8250", Offset = "0x12C8250", VA = "0x12C8250")]
		public RefCountDisposable(IDisposable disposable)
		{
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x12C832C", Offset = "0x12C832C", VA = "0x12C832C")]
		public IDisposable GetDisposable()
		{
			return null;
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0x12C8494", Offset = "0x12C8494", VA = "0x12C8494", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x12C860C", Offset = "0x12C860C", VA = "0x12C860C")]
		private void Release()
		{
		}
	}
	[Token(Token = "0x2000028")]
	public static class Observable
	{
		[Token(Token = "0x2000029")]
		private class ConnectableObservable<T> : IConnectableObservable<T>, IObservable<T>
		{
			[Token(Token = "0x200002A")]
			private class Connection : IDisposable
			{
				[Token(Token = "0x400004B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ConnectableObservable<T> parent;

				[Token(Token = "0x400004C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private IDisposable subscription;

				[Token(Token = "0x6000202")]
				public Connection(ConnectableObservable<T> parent, IDisposable subscription)
				{
				}

				[Token(Token = "0x6000203")]
				public void Dispose()
				{
				}
			}

			[Token(Token = "0x4000047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObservable<T> source;

			[Token(Token = "0x4000048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ISubject<T> subject;

			[Token(Token = "0x4000049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400004A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Connection connection;

			[Token(Token = "0x60001FF")]
			public ConnectableObservable(IObservable<T> source, ISubject<T> subject)
			{
			}

			[Token(Token = "0x6000200")]
			public IDisposable Connect()
			{
				return null;
			}

			[Token(Token = "0x6000201")]
			public IDisposable Subscribe(IObserver<T> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x200002B")]
		private class EveryAfterUpdateInvoker : IEnumerator
		{
			[Token(Token = "0x400004D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private long count;

			[Token(Token = "0x400004E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly IObserver<long> observer;

			[Token(Token = "0x400004F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly CancellationToken cancellationToken;

			[Token(Token = "0x17000015")]
			public object Current
			{
				[Token(Token = "0x6000206")]
				[Address(RVA = "0x1069374", Offset = "0x1069374", VA = "0x1069374", Slot = "5")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000204")]
			[Address(RVA = "0x1067308", Offset = "0x1067308", VA = "0x1067308")]
			public EveryAfterUpdateInvoker(IObserver<long> observer, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000205")]
			[Address(RVA = "0x1069278", Offset = "0x1069278", VA = "0x1069278", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000207")]
			[Address(RVA = "0x106937C", Offset = "0x106937C", VA = "0x106937C", Slot = "6")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200002C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFE60", Offset = "0x8AFE60")]
		private sealed class <>c__DisplayClass0_0<T>
		{
			[Token(Token = "0x4000050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public RefCountDisposable r;

			[Token(Token = "0x4000051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<T> xs;

			[Token(Token = "0x6000208")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6000209")]
			internal IDisposable <AddRef>b__0(IObserver<T> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x200002D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFE70", Offset = "0x8AFE70")]
		private sealed class <>c__DisplayClass13_0<T>
		{
			[Token(Token = "0x4000052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IDisposable subscription;

			[Token(Token = "0x4000053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<T> subject;

			[Token(Token = "0x4000054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken token;

			[Token(Token = "0x4000055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationTokenRegistration ctr;

			[Token(Token = "0x600020A")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x600020B")]
			internal void <RegisterCancelation>b__0()
			{
			}

			[Token(Token = "0x600020C")]
			internal void <RegisterCancelation>b__1(Exception _)
			{
			}
		}

		[Token(Token = "0x200002E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFE80", Offset = "0x8AFE80")]
		private sealed class <CombineSources>d__29<T> : IEnumerable<IObservable<T>>, IEnumerable, IEnumerator<IObservable<T>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T> <>2__current;

			[Token(Token = "0x4000058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T> first;

			[Token(Token = "0x400005A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<T> <>3__first;

			[Token(Token = "0x400005B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T>[] seconds;

			[Token(Token = "0x400005C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<T>[] <>3__seconds;

			[Token(Token = "0x400005D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x17000016")]
			private IObservable<T> System.Collections.Generic.IEnumerator<System.IObservable<T>>.Current
			{
				[Token(Token = "0x6000210")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000017")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000212")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600020D")]
			[DebuggerHidden]
			public <CombineSources>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600020E")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600020F")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000211")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000213")]
			[DebuggerHidden]
			private IEnumerator<IObservable<T>> System.Collections.Generic.IEnumerable<System.IObservable<T>>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000214")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200002F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFE90", Offset = "0x8AFE90")]
		private sealed class <RepeatInfinite>d__130<T> : IEnumerable<IObservable<T>>, IEnumerable, IEnumerator<IObservable<T>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400005E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400005F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T> <>2__current;

			[Token(Token = "0x4000060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T> source;

			[Token(Token = "0x4000062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<T> <>3__source;

			[Token(Token = "0x17000018")]
			private IObservable<T> System.Collections.Generic.IEnumerator<System.IObservable<T>>.Current
			{
				[Token(Token = "0x6000218")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000019")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600021A")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000215")]
			[DebuggerHidden]
			public <RepeatInfinite>d__130(int <>1__state)
			{
			}

			[Token(Token = "0x6000216")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000217")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000219")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600021B")]
			[DebuggerHidden]
			private IEnumerator<IObservable<T>> System.Collections.Generic.IEnumerable<System.IObservable<T>>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600021C")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000030")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFEA0", Offset = "0x8AFEA0")]
		private sealed class <>c__DisplayClass142_0<T>
		{
			[Token(Token = "0x4000063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IScheduler scheduler;

			[Token(Token = "0x4000064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T> function;

			[Token(Token = "0x600021D")]
			public <>c__DisplayClass142_0()
			{
			}

			[Token(Token = "0x600021E")]
			internal IObservable<T> <ToAsync>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000031")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFEB0", Offset = "0x8AFEB0")]
		private sealed class <>c__DisplayClass142_1<T>
		{
			[Token(Token = "0x4000065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<T> subject;

			[Token(Token = "0x4000066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass142_0<T> CS$<>8__locals1;

			[Token(Token = "0x600021F")]
			public <>c__DisplayClass142_1()
			{
			}

			[Token(Token = "0x6000220")]
			internal void <ToAsync>b__1()
			{
			}
		}

		[Token(Token = "0x2000032")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFEC0", Offset = "0x8AFEC0")]
		private sealed class <>c__DisplayClass144_0
		{
			[Token(Token = "0x4000067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IScheduler scheduler;

			[Token(Token = "0x4000068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x6000221")]
			[Address(RVA = "0x10673BC", Offset = "0x10673BC", VA = "0x10673BC")]
			public <>c__DisplayClass144_0()
			{
			}

			[Token(Token = "0x6000222")]
			[Address(RVA = "0x10673C4", Offset = "0x10673C4", VA = "0x10673C4")]
			internal IObservable<Unit> <ToAsync>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000033")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFED0", Offset = "0x8AFED0")]
		private sealed class <>c__DisplayClass144_1
		{
			[Token(Token = "0x4000069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AsyncSubject<Unit> subject;

			[Token(Token = "0x400006A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass144_0 CS$<>8__locals1;

			[Token(Token = "0x6000223")]
			[Address(RVA = "0x1067584", Offset = "0x1067584", VA = "0x1067584")]
			public <>c__DisplayClass144_1()
			{
			}

			[Token(Token = "0x6000224")]
			[Address(RVA = "0x106758C", Offset = "0x106758C", VA = "0x106758C")]
			internal void <ToAsync>b__1()
			{
			}
		}

		[Token(Token = "0x2000034")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFEE0", Offset = "0x8AFEE0")]
		private sealed class <>c__DisplayClass149_0<TSource, TException> where TException : Exception
		{
			[Token(Token = "0x400006B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<TException> errorAction;

			[Token(Token = "0x6000225")]
			public <>c__DisplayClass149_0()
			{
			}

			[Token(Token = "0x6000226")]
			internal IObservable<TSource> <CatchIgnore>b__0(TException ex)
			{
				return null;
			}
		}

		[Token(Token = "0x2000035")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFEF0", Offset = "0x8AFEF0")]
		private sealed class <>c__DisplayClass157_0<TSource, TException> where TException : Exception
		{
			[Token(Token = "0x400006C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TimeSpan delay;

			[Token(Token = "0x400006D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<TSource> source;

			[Token(Token = "0x400006E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<TException> onError;

			[Token(Token = "0x400006F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int retryCount;

			[Token(Token = "0x4000070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IScheduler delayScheduler;

			[Token(Token = "0x6000227")]
			public <>c__DisplayClass157_0()
			{
			}

			[Token(Token = "0x6000228")]
			internal IObservable<TSource> <OnErrorRetry>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000036")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF00", Offset = "0x8AFF00")]
		private sealed class <>c__DisplayClass157_1<TSource, TException> where TException : Exception
		{
			[Token(Token = "0x4000071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int count;

			[Token(Token = "0x4000072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TimeSpan dueTime;

			[Token(Token = "0x4000073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<TSource> self;

			[Token(Token = "0x4000074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass157_0<TSource, TException> CS$<>8__locals1;

			[Token(Token = "0x6000229")]
			public <>c__DisplayClass157_1()
			{
			}

			[Token(Token = "0x600022A")]
			internal IObservable<TSource> <OnErrorRetry>b__1(TException ex)
			{
				return null;
			}
		}

		[Token(Token = "0x2000037")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF10", Offset = "0x8AFF10")]
		private sealed class <>c__DisplayClass163_0<TResult>
		{
			[Token(Token = "0x4000075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<AsyncCallback, object, IAsyncResult> begin;

			[Token(Token = "0x4000076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IAsyncResult, TResult> end;

			[Token(Token = "0x600022B")]
			public <>c__DisplayClass163_0()
			{
			}

			[Token(Token = "0x600022C")]
			internal IObservable<TResult> <FromAsyncPattern>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000038")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF20", Offset = "0x8AFF20")]
		private sealed class <>c__DisplayClass163_1<TResult>
		{
			[Token(Token = "0x4000077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<TResult> subject;

			[Token(Token = "0x4000078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass163_0<TResult> CS$<>8__locals1;

			[Token(Token = "0x600022D")]
			public <>c__DisplayClass163_1()
			{
			}

			[Token(Token = "0x600022E")]
			internal void <FromAsyncPattern>b__1(IAsyncResult iar)
			{
			}
		}

		[Token(Token = "0x2000039")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF30", Offset = "0x8AFF30")]
		private sealed class <>c__DisplayClass164_0<T1, TResult>
		{
			[Token(Token = "0x4000079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T1, AsyncCallback, object, IAsyncResult> begin;

			[Token(Token = "0x400007A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IAsyncResult, TResult> end;

			[Token(Token = "0x600022F")]
			public <>c__DisplayClass164_0()
			{
			}

			[Token(Token = "0x6000230")]
			internal IObservable<TResult> <FromAsyncPattern>b__0(T1 x)
			{
				return null;
			}
		}

		[Token(Token = "0x200003A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF40", Offset = "0x8AFF40")]
		private sealed class <>c__DisplayClass164_1<T1, TResult>
		{
			[Token(Token = "0x400007B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<TResult> subject;

			[Token(Token = "0x400007C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass164_0<T1, TResult> CS$<>8__locals1;

			[Token(Token = "0x6000231")]
			public <>c__DisplayClass164_1()
			{
			}

			[Token(Token = "0x6000232")]
			internal void <FromAsyncPattern>b__1(IAsyncResult iar)
			{
			}
		}

		[Token(Token = "0x200003B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF50", Offset = "0x8AFF50")]
		private sealed class <>c__DisplayClass165_0<T1, T2, TResult>
		{
			[Token(Token = "0x400007D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T1, T2, AsyncCallback, object, IAsyncResult> begin;

			[Token(Token = "0x400007E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IAsyncResult, TResult> end;

			[Token(Token = "0x6000233")]
			public <>c__DisplayClass165_0()
			{
			}

			[Token(Token = "0x6000234")]
			internal IObservable<TResult> <FromAsyncPattern>b__0(T1 x, T2 y)
			{
				return null;
			}
		}

		[Token(Token = "0x200003C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF60", Offset = "0x8AFF60")]
		private sealed class <>c__DisplayClass165_1<T1, T2, TResult>
		{
			[Token(Token = "0x400007F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<TResult> subject;

			[Token(Token = "0x4000080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass165_0<T1, T2, TResult> CS$<>8__locals1;

			[Token(Token = "0x6000235")]
			public <>c__DisplayClass165_1()
			{
			}

			[Token(Token = "0x6000236")]
			internal void <FromAsyncPattern>b__1(IAsyncResult iar)
			{
			}
		}

		[Token(Token = "0x200003D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF70", Offset = "0x8AFF70")]
		private sealed class <>c__DisplayClass166_0
		{
			[Token(Token = "0x4000081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<IAsyncResult> end;

			[Token(Token = "0x6000237")]
			[Address(RVA = "0x1067744", Offset = "0x1067744", VA = "0x1067744")]
			public <>c__DisplayClass166_0()
			{
			}

			[Token(Token = "0x6000238")]
			[Address(RVA = "0x106774C", Offset = "0x106774C", VA = "0x106774C")]
			internal Unit <FromAsyncPattern>b__0(IAsyncResult iar)
			{
				return default(Unit);
			}
		}

		[Token(Token = "0x200003E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF80", Offset = "0x8AFF80")]
		private sealed class <>c__DisplayClass167_0<T1>
		{
			[Token(Token = "0x4000082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<IAsyncResult> end;

			[Token(Token = "0x6000239")]
			public <>c__DisplayClass167_0()
			{
			}

			[Token(Token = "0x600023A")]
			internal Unit <FromAsyncPattern>b__0(IAsyncResult iar)
			{
				return default(Unit);
			}
		}

		[Token(Token = "0x200003F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFF90", Offset = "0x8AFF90")]
		private sealed class <>c__DisplayClass168_0<T1, T2>
		{
			[Token(Token = "0x4000083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<IAsyncResult> end;

			[Token(Token = "0x600023B")]
			public <>c__DisplayClass168_0()
			{
			}

			[Token(Token = "0x600023C")]
			internal Unit <FromAsyncPattern>b__0(IAsyncResult iar)
			{
				return default(Unit);
			}
		}

		[Token(Token = "0x2000040")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFA0", Offset = "0x8AFFA0")]
		private sealed class <>c__DisplayClass246_0<T, TR>
		{
			[Token(Token = "0x4000084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<TR> other;

			[Token(Token = "0x600023D")]
			public <>c__DisplayClass246_0()
			{
			}

			[Token(Token = "0x600023E")]
			internal IObservable<TR> <ContinueWith>b__0(T _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000041")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFB0", Offset = "0x8AFFB0")]
		private sealed class <>c__DisplayClass248_0<T, TR>
		{
			[Token(Token = "0x4000085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<TR> other;

			[Token(Token = "0x600023F")]
			public <>c__DisplayClass248_0()
			{
			}

			[Token(Token = "0x6000240")]
			internal IObservable<TR> <SelectMany>b__0(T _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000042")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFC0", Offset = "0x8AFFC0")]
		private sealed class <>c__DisplayClass287_0
		{
			[Token(Token = "0x4000086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<IEnumerator> coroutine;

			[Token(Token = "0x4000087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool publishEveryYield;

			[Token(Token = "0x6000241")]
			[Address(RVA = "0x1067824", Offset = "0x1067824", VA = "0x1067824")]
			public <>c__DisplayClass287_0()
			{
			}

			[Token(Token = "0x6000242")]
			[Address(RVA = "0x106782C", Offset = "0x106782C", VA = "0x106782C")]
			internal IEnumerator <FromCoroutine>b__0(IObserver<Unit> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000043")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFD0", Offset = "0x8AFFD0")]
		private sealed class <>c__DisplayClass288_0
		{
			[Token(Token = "0x4000088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<CancellationToken, IEnumerator> coroutine;

			[Token(Token = "0x4000089")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool publishEveryYield;

			[Token(Token = "0x6000243")]
			[Address(RVA = "0x10678E4", Offset = "0x10678E4", VA = "0x10678E4")]
			public <>c__DisplayClass288_0()
			{
			}

			[Token(Token = "0x6000244")]
			[Address(RVA = "0x10678EC", Offset = "0x10678EC", VA = "0x10678EC")]
			internal IEnumerator <FromCoroutine>b__0(IObserver<Unit> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFE0", Offset = "0x8AFFE0")]
		private sealed class <>c__DisplayClass289_0
		{
			[Token(Token = "0x400008A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<IEnumerator> coroutine;

			[Token(Token = "0x400008B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool publishEveryYield;

			[Token(Token = "0x6000245")]
			[Address(RVA = "0x10679A8", Offset = "0x10679A8", VA = "0x10679A8")]
			public <>c__DisplayClass289_0()
			{
			}

			[Token(Token = "0x6000246")]
			[Address(RVA = "0x10679B0", Offset = "0x10679B0", VA = "0x10679B0")]
			internal IEnumerator <FromMicroCoroutine>b__0(IObserver<Unit> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000045")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8AFFF0", Offset = "0x8AFFF0")]
		private sealed class <>c__DisplayClass290_0
		{
			[Token(Token = "0x400008C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<CancellationToken, IEnumerator> coroutine;

			[Token(Token = "0x400008D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool publishEveryYield;

			[Token(Token = "0x6000247")]
			[Address(RVA = "0x1067A68", Offset = "0x1067A68", VA = "0x1067A68")]
			public <>c__DisplayClass290_0()
			{
			}

			[Token(Token = "0x6000248")]
			[Address(RVA = "0x1067A70", Offset = "0x1067A70", VA = "0x1067A70")]
			internal IEnumerator <FromMicroCoroutine>b__0(IObserver<Unit> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000046")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0000", Offset = "0x8B0000")]
		private sealed class <WrapEnumerator>d__291 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400008E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400008F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator enumerator;

			[Token(Token = "0x4000091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IObserver<Unit> observer;

			[Token(Token = "0x4000092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool publishEveryYield;

			[Token(Token = "0x4000093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x4000094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool <hasNext>5__2;

			[Token(Token = "0x4000095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			private bool <raisedError>5__3;

			[Token(Token = "0x4000096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ICustomYieldInstructionErrorHandler <customHandler>5__4;

			[Token(Token = "0x1700001A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600024C")]
				[Address(RVA = "0x1069228", Offset = "0x1069228", VA = "0x1069228", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600024E")]
				[Address(RVA = "0x1069270", Offset = "0x1069270", VA = "0x1069270", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000249")]
			[Address(RVA = "0x106859C", Offset = "0x106859C", VA = "0x106859C")]
			[DebuggerHidden]
			public <WrapEnumerator>d__291(int <>1__state)
			{
			}

			[Token(Token = "0x600024A")]
			[Address(RVA = "0x10685C8", Offset = "0x10685C8", VA = "0x10685C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600024B")]
			[Address(RVA = "0x10685CC", Offset = "0x10685CC", VA = "0x10685CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600024D")]
			[Address(RVA = "0x1069230", Offset = "0x1069230", VA = "0x1069230", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000047")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0010", Offset = "0x8B0010")]
		private sealed class <>c__DisplayClass292_0<T>
		{
			[Token(Token = "0x4000097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IEnumerator> coroutine;

			[Token(Token = "0x4000098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool nullAsNextUpdate;

			[Token(Token = "0x600024F")]
			public <>c__DisplayClass292_0()
			{
			}

			[Token(Token = "0x6000250")]
			internal IEnumerator <FromCoroutineValue>b__0(IObserver<T> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000048")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0020", Offset = "0x8B0020")]
		private sealed class <>c__DisplayClass293_0<T>
		{
			[Token(Token = "0x4000099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<CancellationToken, IEnumerator> coroutine;

			[Token(Token = "0x400009A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool nullAsNextUpdate;

			[Token(Token = "0x6000251")]
			public <>c__DisplayClass293_0()
			{
			}

			[Token(Token = "0x6000252")]
			internal IEnumerator <FromCoroutineValue>b__0(IObserver<T> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x2000049")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0030", Offset = "0x8B0030")]
		private sealed class <WrapEnumeratorYieldValue>d__294<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400009B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400009C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400009D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerator enumerator;

			[Token(Token = "0x400009E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x400009F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool nullAsNextUpdate;

			[Token(Token = "0x40000A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40000A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool <hasNext>5__2;

			[Token(Token = "0x40000A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <current>5__3;

			[Token(Token = "0x40000A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool <raisedError>5__4;

			[Token(Token = "0x40000A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ICustomYieldInstructionErrorHandler <customHandler>5__5;

			[Token(Token = "0x1700001C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000256")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000258")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000253")]
			[DebuggerHidden]
			public <WrapEnumeratorYieldValue>d__294(int <>1__state)
			{
			}

			[Token(Token = "0x6000254")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000255")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000257")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200004A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0040", Offset = "0x8B0040")]
		private sealed class <>c__DisplayClass295_0<T>
		{
			[Token(Token = "0x40000A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IObserver<T>, IEnumerator> coroutine;

			[Token(Token = "0x6000259")]
			public <>c__DisplayClass295_0()
			{
			}

			[Token(Token = "0x600025A")]
			internal IEnumerator <FromCoroutine>b__0(IObserver<T> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x200004B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0050", Offset = "0x8B0050")]
		private sealed class <>c__DisplayClass296_0<T>
		{
			[Token(Token = "0x40000A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IObserver<T>, IEnumerator> coroutine;

			[Token(Token = "0x600025B")]
			public <>c__DisplayClass296_0()
			{
			}

			[Token(Token = "0x600025C")]
			internal IEnumerator <FromMicroCoroutine>b__0(IObserver<T> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x200004C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0060", Offset = "0x8B0060")]
		private sealed class <WrapToCancellableEnumerator>d__297<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40000A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40000A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerator enumerator;

			[Token(Token = "0x40000AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x40000AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40000AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool <hasNext>5__2;

			[Token(Token = "0x1700001E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000260")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000262")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600025D")]
			[DebuggerHidden]
			public <WrapToCancellableEnumerator>d__297(int <>1__state)
			{
			}

			[Token(Token = "0x600025E")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600025F")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000261")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200004D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0070", Offset = "0x8B0070")]
		private sealed class <>c__DisplayClass300_0<T>
		{
			[Token(Token = "0x40000AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerator coroutine;

			[Token(Token = "0x6000263")]
			public <>c__DisplayClass300_0()
			{
			}

			[Token(Token = "0x6000264")]
			internal IEnumerator <SelectMany>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x200004E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0080", Offset = "0x8B0080")]
		private sealed class <>c__DisplayClass301_0<T>
		{
			[Token(Token = "0x40000AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IEnumerator> selector;

			[Token(Token = "0x6000265")]
			public <>c__DisplayClass301_0()
			{
			}

			[Token(Token = "0x6000266")]
			internal IEnumerator <SelectMany>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x200004F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0090", Offset = "0x8B0090")]
		private sealed class <>c__DisplayClass302_0<T>
		{
			[Token(Token = "0x40000AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T, IEnumerator> selector;

			[Token(Token = "0x6000267")]
			public <>c__DisplayClass302_0()
			{
			}

			[Token(Token = "0x6000268")]
			internal IObservable<Unit> <SelectMany>b__0(T x)
			{
				return null;
			}
		}

		[Token(Token = "0x2000050")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00A0", Offset = "0x8B00A0")]
		private sealed class <>c__DisplayClass302_1<T>
		{
			[Token(Token = "0x40000B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T x;

			[Token(Token = "0x40000B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass302_0<T> CS$<>8__locals1;

			[Token(Token = "0x6000269")]
			public <>c__DisplayClass302_1()
			{
			}

			[Token(Token = "0x600026A")]
			internal IEnumerator <SelectMany>b__1()
			{
				return null;
			}
		}

		[Token(Token = "0x2000051")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00B0", Offset = "0x8B00B0")]
		private sealed class <>c__DisplayClass303_0
		{
			[Token(Token = "0x40000B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IEnumerator coroutine;

			[Token(Token = "0x40000B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool publishEveryYield;

			[Token(Token = "0x600026B")]
			[Address(RVA = "0x1067B2C", Offset = "0x1067B2C", VA = "0x1067B2C")]
			public <>c__DisplayClass303_0()
			{
			}

			[Token(Token = "0x600026C")]
			[Address(RVA = "0x1067B34", Offset = "0x1067B34", VA = "0x1067B34")]
			internal IEnumerator <ToObservable>b__0(IObserver<Unit> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000052")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00C0", Offset = "0x8B00C0")]
		private sealed class <>c
		{
			[Token(Token = "0x40000B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40000B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IObserver<long>, CancellationToken, IEnumerator> <>9__308_0;

			[Token(Token = "0x40000B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IObserver<long>, CancellationToken, IEnumerator> <>9__309_0;

			[Token(Token = "0x40000B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IObserver<long>, CancellationToken, IEnumerator> <>9__310_0;

			[Token(Token = "0x40000B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<long, Unit, long> <>9__312_0;

			[Token(Token = "0x40000B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<long, Unit, long> <>9__313_0;

			[Token(Token = "0x40000BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<IObserver<long>, CancellationToken, IEnumerator> <>9__314_0;

			[Token(Token = "0x40000BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<IObserver<Unit>, CancellationToken, IEnumerator> <>9__315_0;

			[Token(Token = "0x600026E")]
			[Address(RVA = "0x1067120", Offset = "0x1067120", VA = "0x1067120")]
			public <>c()
			{
			}

			[Token(Token = "0x600026F")]
			[Address(RVA = "0x1067128", Offset = "0x1067128", VA = "0x1067128")]
			internal IEnumerator <EveryUpdate>b__308_0(IObserver<long> observer, CancellationToken cancellationToken)
			{
				return null;
			}

			[Token(Token = "0x6000270")]
			[Address(RVA = "0x106719C", Offset = "0x106719C", VA = "0x106719C")]
			internal IEnumerator <EveryFixedUpdate>b__309_0(IObserver<long> observer, CancellationToken cancellationToken)
			{
				return null;
			}

			[Token(Token = "0x6000271")]
			[Address(RVA = "0x1067210", Offset = "0x1067210", VA = "0x1067210")]
			internal IEnumerator <EveryEndOfFrame>b__310_0(IObserver<long> observer, CancellationToken cancellationToken)
			{
				return null;
			}

			[Token(Token = "0x6000272")]
			[Address(RVA = "0x1067284", Offset = "0x1067284", VA = "0x1067284")]
			internal long <EveryGameObjectUpdate>b__312_0(long x, Unit y)
			{
				return default(long);
			}

			[Token(Token = "0x6000273")]
			[Address(RVA = "0x106728C", Offset = "0x106728C", VA = "0x106728C")]
			internal long <EveryLateUpdate>b__313_0(long x, Unit y)
			{
				return default(long);
			}

			[Token(Token = "0x6000274")]
			[Address(RVA = "0x1067294", Offset = "0x1067294", VA = "0x1067294")]
			internal IEnumerator <EveryAfterUpdate>b__314_0(IObserver<long> observer, CancellationToken cancellationToken)
			{
				return null;
			}

			[Token(Token = "0x6000275")]
			[Address(RVA = "0x1067348", Offset = "0x1067348", VA = "0x1067348")]
			internal IEnumerator <NextFrame>b__315_0(IObserver<Unit> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000053")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00D0", Offset = "0x8B00D0")]
		private sealed class <EveryCycleCore>d__311 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40000BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40000BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IObserver<long> observer;

			[Token(Token = "0x40000C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private long <count>5__2;

			[Token(Token = "0x17000020")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000279")]
				[Address(RVA = "0x1067E24", Offset = "0x1067E24", VA = "0x1067E24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000021")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600027B")]
				[Address(RVA = "0x1067E6C", Offset = "0x1067E6C", VA = "0x1067E6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000276")]
			[Address(RVA = "0x1067CD4", Offset = "0x1067CD4", VA = "0x1067CD4")]
			[DebuggerHidden]
			public <EveryCycleCore>d__311(int <>1__state)
			{
			}

			[Token(Token = "0x6000277")]
			[Address(RVA = "0x1067D00", Offset = "0x1067D00", VA = "0x1067D00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000278")]
			[Address(RVA = "0x1067D04", Offset = "0x1067D04", VA = "0x1067D04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600027A")]
			[Address(RVA = "0x1067E2C", Offset = "0x1067E2C", VA = "0x1067E2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000054")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00E0", Offset = "0x8B00E0")]
		private sealed class <NextFrameCore>d__316 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40000C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CancellationToken cancellation;

			[Token(Token = "0x40000C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IObserver<Unit> observer;

			[Token(Token = "0x17000022")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600027F")]
				[Address(RVA = "0x1068078", Offset = "0x1068078", VA = "0x1068078", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000023")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000281")]
				[Address(RVA = "0x10680C0", Offset = "0x10680C0", VA = "0x10680C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600027C")]
			[Address(RVA = "0x1067E74", Offset = "0x1067E74", VA = "0x1067E74")]
			[DebuggerHidden]
			public <NextFrameCore>d__316(int <>1__state)
			{
			}

			[Token(Token = "0x600027D")]
			[Address(RVA = "0x1067EA0", Offset = "0x1067EA0", VA = "0x1067EA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600027E")]
			[Address(RVA = "0x1067EA4", Offset = "0x1067EA4", VA = "0x1067EA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000280")]
			[Address(RVA = "0x1068080", Offset = "0x1068080", VA = "0x1068080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000055")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B00F0", Offset = "0x8B00F0")]
		private sealed class <>c__DisplayClass318_0
		{
			[Token(Token = "0x40000C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int dueTimeFrameCount;

			[Token(Token = "0x6000282")]
			[Address(RVA = "0x1067BC0", Offset = "0x1067BC0", VA = "0x1067BC0")]
			public <>c__DisplayClass318_0()
			{
			}

			[Token(Token = "0x6000283")]
			[Address(RVA = "0x1067BC8", Offset = "0x1067BC8", VA = "0x1067BC8")]
			internal IEnumerator <TimerFrame>b__0(IObserver<long> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000056")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0100", Offset = "0x8B0100")]
		private sealed class <>c__DisplayClass319_0
		{
			[Token(Token = "0x40000C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int dueTimeFrameCount;

			[Token(Token = "0x40000C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int periodFrameCount;

			[Token(Token = "0x6000284")]
			[Address(RVA = "0x1067C48", Offset = "0x1067C48", VA = "0x1067C48")]
			public <>c__DisplayClass319_0()
			{
			}

			[Token(Token = "0x6000285")]
			[Address(RVA = "0x1067C50", Offset = "0x1067C50", VA = "0x1067C50")]
			internal IEnumerator <TimerFrame>b__0(IObserver<long> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000057")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0110", Offset = "0x8B0110")]
		private sealed class <TimerFrameCore>d__320 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40000CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int dueTimeFrameCount;

			[Token(Token = "0x40000CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IObserver<long> observer;

			[Token(Token = "0x40000CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CancellationToken cancel;

			[Token(Token = "0x40000CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <currentFrame>5__2;

			[Token(Token = "0x17000024")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000289")]
				[Address(RVA = "0x1068294", Offset = "0x1068294", VA = "0x1068294", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000025")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600028B")]
				[Address(RVA = "0x10682DC", Offset = "0x10682DC", VA = "0x10682DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000286")]
			[Address(RVA = "0x10680C8", Offset = "0x10680C8", VA = "0x10680C8")]
			[DebuggerHidden]
			public <TimerFrameCore>d__320(int <>1__state)
			{
			}

			[Token(Token = "0x6000287")]
			[Address(RVA = "0x10680F4", Offset = "0x10680F4", VA = "0x10680F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000288")]
			[Address(RVA = "0x10680F8", Offset = "0x10680F8", VA = "0x10680F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600028A")]
			[Address(RVA = "0x106829C", Offset = "0x106829C", VA = "0x106829C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000058")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0120", Offset = "0x8B0120")]
		private sealed class <TimerFrameCore>d__321 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40000D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int dueTimeFrameCount;

			[Token(Token = "0x40000D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int periodFrameCount;

			[Token(Token = "0x40000D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IObserver<long> observer;

			[Token(Token = "0x40000D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CancellationToken cancel;

			[Token(Token = "0x40000D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private long <sendCount>5__2;

			[Token(Token = "0x40000D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <currentFrame>5__3;

			[Token(Token = "0x17000026")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600028F")]
				[Address(RVA = "0x106854C", Offset = "0x106854C", VA = "0x106854C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000027")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000291")]
				[Address(RVA = "0x1068594", Offset = "0x1068594", VA = "0x1068594", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600028C")]
			[Address(RVA = "0x10682E4", Offset = "0x10682E4", VA = "0x10682E4")]
			[DebuggerHidden]
			public <TimerFrameCore>d__321(int <>1__state)
			{
			}

			[Token(Token = "0x600028D")]
			[Address(RVA = "0x1068310", Offset = "0x1068310", VA = "0x1068310", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600028E")]
			[Address(RVA = "0x1068314", Offset = "0x1068314", VA = "0x1068314", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000290")]
			[Address(RVA = "0x1068554", Offset = "0x1068554", VA = "0x1068554", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000059")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0130", Offset = "0x8B0130")]
		private sealed class <ToAwaitableEnumerator>d__336<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40000D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40000D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObservable<T> source;

			[Token(Token = "0x40000D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancel;

			[Token(Token = "0x40000DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> onResult;

			[Token(Token = "0x40000DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<Exception> onError;

			[Token(Token = "0x40000DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ObservableYieldInstruction<T> <enumerator>5__2;

			[Token(Token = "0x40000DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <e>5__3;

			[Token(Token = "0x17000028")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000295")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000029")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000297")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000292")]
			[DebuggerHidden]
			public <ToAwaitableEnumerator>d__336(int <>1__state)
			{
			}

			[Token(Token = "0x6000293")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000294")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000296")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200005A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0140", Offset = "0x8B0140")]
		private sealed class <>c__342<T>
		{
			[Token(Token = "0x40000DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__342<T> <>9;

			[Token(Token = "0x40000DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IObservable<long>> <>9__342_0;

			[Token(Token = "0x40000E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, long, T> <>9__342_1;

			[Token(Token = "0x40000E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IObservable<long>> <>9__342_2;

			[Token(Token = "0x40000E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, long, T> <>9__342_3;

			[Token(Token = "0x40000E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IObservable<Unit>> <>9__342_4;

			[Token(Token = "0x40000E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, Unit, T> <>9__342_5;

			[Token(Token = "0x40000E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IObservable<Unit>> <>9__342_6;

			[Token(Token = "0x40000E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, Unit, T> <>9__342_7;

			[Token(Token = "0x6000299")]
			public <>c__342()
			{
			}

			[Token(Token = "0x600029A")]
			internal IObservable<long> <ObserveOnMainThread>b__342_0(T _)
			{
				return null;
			}

			[Token(Token = "0x600029B")]
			internal T <ObserveOnMainThread>b__342_1(T x, long _)
			{
				return (T)null;
			}

			[Token(Token = "0x600029C")]
			internal IObservable<long> <ObserveOnMainThread>b__342_2(T _)
			{
				return null;
			}

			[Token(Token = "0x600029D")]
			internal T <ObserveOnMainThread>b__342_3(T x, long _)
			{
				return (T)null;
			}

			[Token(Token = "0x600029E")]
			internal IObservable<Unit> <ObserveOnMainThread>b__342_4(T _)
			{
				return null;
			}

			[Token(Token = "0x600029F")]
			internal T <ObserveOnMainThread>b__342_5(T x, Unit _)
			{
				return (T)null;
			}

			[Token(Token = "0x60002A0")]
			internal IObservable<Unit> <ObserveOnMainThread>b__342_6(T _)
			{
				return null;
			}

			[Token(Token = "0x60002A1")]
			internal T <ObserveOnMainThread>b__342_7(T x, Unit _)
			{
				return (T)null;
			}
		}

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly TimeSpan InfiniteTimeSpan;

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly HashSet<Type> YieldInstructionTypes;

		[Token(Token = "0x6000098")]
		private static IObservable<T> AddRef<T>(IObservable<T> xs, RefCountDisposable r)
		{
			return null;
		}

		[Token(Token = "0x6000099")]
		public static IObservable<TSource> Scan<TSource>(this IObservable<TSource> source, Func<TSource, TSource, TSource> accumulator)
		{
			return null;
		}

		[Token(Token = "0x600009A")]
		public static IObservable<TAccumulate> Scan<TSource, TAccumulate>(this IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator)
		{
			return null;
		}

		[Token(Token = "0x600009B")]
		public static IObservable<TSource> Aggregate<TSource>(this IObservable<TSource> source, Func<TSource, TSource, TSource> accumulator)
		{
			return null;
		}

		[Token(Token = "0x600009C")]
		public static IObservable<TAccumulate> Aggregate<TSource, TAccumulate>(this IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator)
		{
			return null;
		}

		[Token(Token = "0x600009D")]
		public static IObservable<TResult> Aggregate<TSource, TAccumulate, TResult>(this IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator, Func<TAccumulate, TResult> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x600009E")]
		public static AsyncSubject<TSource> GetAwaiter<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x600009F")]
		public static AsyncSubject<TSource> GetAwaiter<TSource>(this IConnectableObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x60000A0")]
		public static AsyncSubject<TSource> GetAwaiter<TSource>(this IObservable<TSource> source, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60000A1")]
		public static AsyncSubject<TSource> GetAwaiter<TSource>(this IConnectableObservable<TSource> source, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60000A2")]
		private static AsyncSubject<TSource> RunAsync<TSource>(IObservable<TSource> source, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60000A3")]
		private static AsyncSubject<TSource> RunAsync<TSource>(IConnectableObservable<TSource> source, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60000A4")]
		private static AsyncSubject<T> Cancel<T>(AsyncSubject<T> subject, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60000A5")]
		private static void RegisterCancelation<T>(AsyncSubject<T> subject, IDisposable subscription, CancellationToken token)
		{
		}

		[Token(Token = "0x60000A6")]
		public static IConnectableObservable<T> Multicast<T>(this IObservable<T> source, ISubject<T> subject)
		{
			return null;
		}

		[Token(Token = "0x60000A7")]
		public static IConnectableObservable<T> Publish<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000A8")]
		public static IConnectableObservable<T> Publish<T>(this IObservable<T> source, T initialValue)
		{
			return null;
		}

		[Token(Token = "0x60000A9")]
		public static IConnectableObservable<T> PublishLast<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000AA")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000AB")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000AC")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x60000AD")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000AE")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, TimeSpan window)
		{
			return null;
		}

		[Token(Token = "0x60000AF")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, TimeSpan window, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000B0")]
		public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize, TimeSpan window, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000B1")]
		public static IObservable<T> RefCount<T>(this IConnectableObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000B2")]
		public static IObservable<T> Share<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000B3")]
		public static T Wait<T>(this IObservable<T> source)
		{
			return (T)null;
		}

		[Token(Token = "0x60000B4")]
		public static T Wait<T>(this IObservable<T> source, TimeSpan timeout)
		{
			return (T)null;
		}

		[Token(Token = "0x60000B5")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B543C", Offset = "0x8B543C")]
		private static IEnumerable<IObservable<T>> CombineSources<T>(IObservable<T> first, IObservable<T>[] seconds)
		{
			return null;
		}

		[Token(Token = "0x60000B6")]
		public static IObservable<TSource> Concat<TSource>(params IObservable<TSource>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000B7")]
		public static IObservable<TSource> Concat<TSource>(this IEnumerable<IObservable<TSource>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000B8")]
		public static IObservable<TSource> Concat<TSource>(this IObservable<IObservable<TSource>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000B9")]
		public static IObservable<TSource> Concat<TSource>(this IObservable<TSource> first, params IObservable<TSource>[] seconds)
		{
			return null;
		}

		[Token(Token = "0x60000BA")]
		public static IObservable<TSource> Merge<TSource>(this IEnumerable<IObservable<TSource>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000BB")]
		public static IObservable<TSource> Merge<TSource>(this IEnumerable<IObservable<TSource>> sources, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000BC")]
		public static IObservable<TSource> Merge<TSource>(this IEnumerable<IObservable<TSource>> sources, int maxConcurrent)
		{
			return null;
		}

		[Token(Token = "0x60000BD")]
		public static IObservable<TSource> Merge<TSource>(this IEnumerable<IObservable<TSource>> sources, int maxConcurrent, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000BE")]
		public static IObservable<TSource> Merge<TSource>(params IObservable<TSource>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000BF")]
		public static IObservable<TSource> Merge<TSource>(IScheduler scheduler, params IObservable<TSource>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000C0")]
		public static IObservable<T> Merge<T>(this IObservable<T> first, params IObservable<T>[] seconds)
		{
			return null;
		}

		[Token(Token = "0x60000C1")]
		public static IObservable<T> Merge<T>(this IObservable<T> first, IObservable<T> second, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000C2")]
		public static IObservable<T> Merge<T>(this IObservable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000C3")]
		public static IObservable<T> Merge<T>(this IObservable<IObservable<T>> sources, int maxConcurrent)
		{
			return null;
		}

		[Token(Token = "0x60000C4")]
		public static IObservable<TResult> Zip<TLeft, TRight, TResult>(this IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60000C5")]
		public static IObservable<IList<T>> Zip<T>(this IEnumerable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000C6")]
		public static IObservable<IList<T>> Zip<T>(params IObservable<T>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000C7")]
		public static IObservable<TR> Zip<T1, T2, T3, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, ZipFunc<T1, T2, T3, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000C8")]
		public static IObservable<TR> Zip<T1, T2, T3, T4, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, ZipFunc<T1, T2, T3, T4, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000C9")]
		public static IObservable<TR> Zip<T1, T2, T3, T4, T5, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000CA")]
		public static IObservable<TR> Zip<T1, T2, T3, T4, T5, T6, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000CB")]
		public static IObservable<TR> Zip<T1, T2, T3, T4, T5, T6, T7, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000CC")]
		public static IObservable<TResult> CombineLatest<TLeft, TRight, TResult>(this IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60000CD")]
		public static IObservable<IList<T>> CombineLatest<T>(this IEnumerable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000CE")]
		public static IObservable<IList<TSource>> CombineLatest<TSource>(params IObservable<TSource>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000CF")]
		public static IObservable<TR> CombineLatest<T1, T2, T3, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, CombineLatestFunc<T1, T2, T3, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D0")]
		public static IObservable<TR> CombineLatest<T1, T2, T3, T4, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, CombineLatestFunc<T1, T2, T3, T4, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D1")]
		public static IObservable<TR> CombineLatest<T1, T2, T3, T4, T5, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, CombineLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D2")]
		public static IObservable<TR> CombineLatest<T1, T2, T3, T4, T5, T6, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, CombineLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D3")]
		public static IObservable<TR> CombineLatest<T1, T2, T3, T4, T5, T6, T7, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, CombineLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D4")]
		public static IObservable<TResult> ZipLatest<TLeft, TRight, TResult>(this IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60000D5")]
		public static IObservable<IList<T>> ZipLatest<T>(this IEnumerable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000D6")]
		public static IObservable<IList<TSource>> ZipLatest<TSource>(params IObservable<TSource>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000D7")]
		public static IObservable<TR> ZipLatest<T1, T2, T3, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, ZipLatestFunc<T1, T2, T3, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D8")]
		public static IObservable<TR> ZipLatest<T1, T2, T3, T4, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, ZipLatestFunc<T1, T2, T3, T4, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000D9")]
		public static IObservable<TR> ZipLatest<T1, T2, T3, T4, T5, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, ZipLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000DA")]
		public static IObservable<TR> ZipLatest<T1, T2, T3, T4, T5, T6, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, ZipLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000DB")]
		public static IObservable<TR> ZipLatest<T1, T2, T3, T4, T5, T6, T7, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, ZipLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x60000DC")]
		public static IObservable<T> Switch<T>(this IObservable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000DD")]
		public static IObservable<TResult> WithLatestFrom<TLeft, TRight, TResult>(this IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60000DE")]
		public static IObservable<T[]> WhenAll<T>(params IObservable<T>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x1757844", Offset = "0x1757844", VA = "0x1757844")]
		public static IObservable<Unit> WhenAll(params IObservable<Unit>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000E0")]
		public static IObservable<T[]> WhenAll<T>(this IEnumerable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x1757930", Offset = "0x1757930", VA = "0x1757930")]
		public static IObservable<Unit> WhenAll(this IEnumerable<IObservable<Unit>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000E2")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, T value)
		{
			return null;
		}

		[Token(Token = "0x60000E3")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, Func<T> valueFactory)
		{
			return null;
		}

		[Token(Token = "0x60000E4")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, params T[] values)
		{
			return null;
		}

		[Token(Token = "0x60000E5")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, IEnumerable<T> values)
		{
			return null;
		}

		[Token(Token = "0x60000E6")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, IScheduler scheduler, T value)
		{
			return null;
		}

		[Token(Token = "0x60000E7")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, IScheduler scheduler, IEnumerable<T> values)
		{
			return null;
		}

		[Token(Token = "0x60000E8")]
		public static IObservable<T> StartWith<T>(this IObservable<T> source, IScheduler scheduler, params T[] values)
		{
			return null;
		}

		[Token(Token = "0x60000E9")]
		public static IObservable<T> Synchronize<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000EA")]
		public static IObservable<T> Synchronize<T>(this IObservable<T> source, object gate)
		{
			return null;
		}

		[Token(Token = "0x60000EB")]
		public static IObservable<T> ObserveOn<T>(this IObservable<T> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000EC")]
		public static IObservable<T> SubscribeOn<T>(this IObservable<T> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000ED")]
		public static IObservable<T> DelaySubscription<T>(this IObservable<T> source, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x60000EE")]
		public static IObservable<T> DelaySubscription<T>(this IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000EF")]
		public static IObservable<T> DelaySubscription<T>(this IObservable<T> source, DateTimeOffset dueTime)
		{
			return null;
		}

		[Token(Token = "0x60000F0")]
		public static IObservable<T> DelaySubscription<T>(this IObservable<T> source, DateTimeOffset dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000F1")]
		public static IObservable<T> Amb<T>(params IObservable<T>[] sources)
		{
			return null;
		}

		[Token(Token = "0x60000F2")]
		public static IObservable<T> Amb<T>(IEnumerable<IObservable<T>> sources)
		{
			return null;
		}

		[Token(Token = "0x60000F3")]
		public static IObservable<T> Amb<T>(this IObservable<T> source, IObservable<T> second)
		{
			return null;
		}

		[Token(Token = "0x60000F4")]
		public static IObservable<T> AsObservable<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000F5")]
		public static IObservable<T> ToObservable<T>(this IEnumerable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000F6")]
		public static IObservable<T> ToObservable<T>(this IEnumerable<T> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60000F7")]
		public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x60000F8")]
		public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source, TResult witness)
		{
			return null;
		}

		[Token(Token = "0x60000F9")]
		public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x60000FA")]
		public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source, TResult witness)
		{
			return null;
		}

		[Token(Token = "0x60000FB")]
		public static IObservable<Unit> AsUnitObservable<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000FC")]
		public static IObservable<Unit> AsSingleUnitObservable<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60000FD")]
		public static IObservable<T> Create<T>(Func<IObserver<T>, IDisposable> subscribe)
		{
			return null;
		}

		[Token(Token = "0x60000FE")]
		public static IObservable<T> Create<T>(Func<IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
			return null;
		}

		[Token(Token = "0x60000FF")]
		public static IObservable<T> CreateWithState<T, TState>(TState state, Func<TState, IObserver<T>, IDisposable> subscribe)
		{
			return null;
		}

		[Token(Token = "0x6000100")]
		public static IObservable<T> CreateWithState<T, TState>(TState state, Func<TState, IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
			return null;
		}

		[Token(Token = "0x6000101")]
		public static IObservable<T> CreateSafe<T>(Func<IObserver<T>, IDisposable> subscribe)
		{
			return null;
		}

		[Token(Token = "0x6000102")]
		public static IObservable<T> CreateSafe<T>(Func<IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
			return null;
		}

		[Token(Token = "0x6000103")]
		public static IObservable<T> Empty<T>()
		{
			return null;
		}

		[Token(Token = "0x6000104")]
		public static IObservable<T> Empty<T>(IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000105")]
		public static IObservable<T> Empty<T>(T witness)
		{
			return null;
		}

		[Token(Token = "0x6000106")]
		public static IObservable<T> Empty<T>(IScheduler scheduler, T witness)
		{
			return null;
		}

		[Token(Token = "0x6000107")]
		public static IObservable<T> Never<T>()
		{
			return null;
		}

		[Token(Token = "0x6000108")]
		public static IObservable<T> Never<T>(T witness)
		{
			return null;
		}

		[Token(Token = "0x6000109")]
		public static IObservable<T> Return<T>(T value)
		{
			return null;
		}

		[Token(Token = "0x600010A")]
		public static IObservable<T> Return<T>(T value, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0x17579F4", Offset = "0x17579F4", VA = "0x17579F4")]
		public static IObservable<Unit> Return(Unit value)
		{
			return null;
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x1757A58", Offset = "0x1757A58", VA = "0x1757A58")]
		public static IObservable<bool> Return(bool value)
		{
			return null;
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0x1757ADC", Offset = "0x1757ADC", VA = "0x1757ADC")]
		public static IObservable<int> Return(int value)
		{
			return null;
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0x1757B40", Offset = "0x1757B40", VA = "0x1757B40")]
		public static IObservable<Unit> ReturnUnit()
		{
			return null;
		}

		[Token(Token = "0x600010F")]
		public static IObservable<T> Throw<T>(Exception error)
		{
			return null;
		}

		[Token(Token = "0x6000110")]
		public static IObservable<T> Throw<T>(Exception error, T witness)
		{
			return null;
		}

		[Token(Token = "0x6000111")]
		public static IObservable<T> Throw<T>(Exception error, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000112")]
		public static IObservable<T> Throw<T>(Exception error, IScheduler scheduler, T witness)
		{
			return null;
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x1757BA4", Offset = "0x1757BA4", VA = "0x1757BA4")]
		public static IObservable<int> Range(int start, int count)
		{
			return null;
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0x1757C28", Offset = "0x1757C28", VA = "0x1757C28")]
		public static IObservable<int> Range(int start, int count, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000115")]
		public static IObservable<T> Repeat<T>(T value)
		{
			return null;
		}

		[Token(Token = "0x6000116")]
		public static IObservable<T> Repeat<T>(T value, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000117")]
		public static IObservable<T> Repeat<T>(T value, int repeatCount)
		{
			return null;
		}

		[Token(Token = "0x6000118")]
		public static IObservable<T> Repeat<T>(T value, int repeatCount, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000119")]
		public static IObservable<T> Repeat<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600011A")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B587C", Offset = "0x8B587C")]
		private static IEnumerable<IObservable<T>> RepeatInfinite<T>(IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600011B")]
		public static IObservable<T> RepeatSafe<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600011C")]
		public static IObservable<T> Defer<T>(Func<IObservable<T>> observableFactory)
		{
			return null;
		}

		[Token(Token = "0x600011D")]
		public static IObservable<T> Start<T>(Func<T> function)
		{
			return null;
		}

		[Token(Token = "0x600011E")]
		public static IObservable<T> Start<T>(Func<T> function, TimeSpan timeSpan)
		{
			return null;
		}

		[Token(Token = "0x600011F")]
		public static IObservable<T> Start<T>(Func<T> function, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000120")]
		public static IObservable<T> Start<T>(Func<T> function, TimeSpan timeSpan, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x1757CA0", Offset = "0x1757CA0", VA = "0x1757CA0")]
		public static IObservable<Unit> Start(Action action)
		{
			return null;
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x1757D38", Offset = "0x1757D38", VA = "0x1757D38")]
		public static IObservable<Unit> Start(Action action, TimeSpan timeSpan)
		{
			return null;
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x1757E00", Offset = "0x1757E00", VA = "0x1757E00")]
		public static IObservable<Unit> Start(Action action, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x1757E8C", Offset = "0x1757E8C", VA = "0x1757E8C")]
		public static IObservable<Unit> Start(Action action, TimeSpan timeSpan, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000125")]
		public static Func<IObservable<T>> ToAsync<T>(Func<T> function)
		{
			return null;
		}

		[Token(Token = "0x6000126")]
		public static Func<IObservable<T>> ToAsync<T>(Func<T> function, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x1757F48", Offset = "0x1757F48", VA = "0x1757F48")]
		public static Func<IObservable<Unit>> ToAsync(Action action)
		{
			return null;
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x1757FBC", Offset = "0x1757FBC", VA = "0x1757FBC")]
		public static Func<IObservable<Unit>> ToAsync(Action action, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000129")]
		public static IObservable<T> Finally<T>(this IObservable<T> source, Action finallyAction)
		{
			return null;
		}

		[Token(Token = "0x600012A")]
		public static IObservable<T> Catch<T, TException>(this IObservable<T> source, Func<TException, IObservable<T>> errorHandler) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x600012B")]
		public static IObservable<TSource> Catch<TSource>(this IEnumerable<IObservable<TSource>> sources)
		{
			return null;
		}

		[Token(Token = "0x600012C")]
		public static IObservable<TSource> CatchIgnore<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x600012D")]
		public static IObservable<TSource> CatchIgnore<TSource, TException>(this IObservable<TSource> source, Action<TException> errorAction) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x600012E")]
		public static IObservable<TSource> Retry<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x600012F")]
		public static IObservable<TSource> Retry<TSource>(this IObservable<TSource> source, int retryCount)
		{
			return null;
		}

		[Token(Token = "0x6000130")]
		public static IObservable<TSource> OnErrorRetry<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x6000131")]
		public static IObservable<TSource> OnErrorRetry<TSource, TException>(this IObservable<TSource> source, Action<TException> onError) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x6000132")]
		public static IObservable<TSource> OnErrorRetry<TSource, TException>(this IObservable<TSource> source, Action<TException> onError, TimeSpan delay) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x6000133")]
		public static IObservable<TSource> OnErrorRetry<TSource, TException>(this IObservable<TSource> source, Action<TException> onError, int retryCount) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x6000134")]
		public static IObservable<TSource> OnErrorRetry<TSource, TException>(this IObservable<TSource> source, Action<TException> onError, int retryCount, TimeSpan delay) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x6000135")]
		public static IObservable<TSource> OnErrorRetry<TSource, TException>(this IObservable<TSource> source, Action<TException> onError, int retryCount, TimeSpan delay, IScheduler delayScheduler) where TException : Exception
		{
			return null;
		}

		[Token(Token = "0x6000136")]
		public static IObservable<EventPattern<TEventArgs>> FromEventPattern<TDelegate, TEventArgs>(Func<EventHandler<TEventArgs>, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler) where TEventArgs : EventArgs
		{
			return null;
		}

		[Token(Token = "0x6000137")]
		public static IObservable<Unit> FromEvent<TDelegate>(Func<Action, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler)
		{
			return null;
		}

		[Token(Token = "0x6000138")]
		public static IObservable<TEventArgs> FromEvent<TDelegate, TEventArgs>(Func<Action<TEventArgs>, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler)
		{
			return null;
		}

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x1758088", Offset = "0x1758088", VA = "0x1758088")]
		public static IObservable<Unit> FromEvent(Action<Action> addHandler, Action<Action> removeHandler)
		{
			return null;
		}

		[Token(Token = "0x600013A")]
		public static IObservable<T> FromEvent<T>(Action<Action<T>> addHandler, Action<Action<T>> removeHandler)
		{
			return null;
		}

		[Token(Token = "0x600013B")]
		public static Func<IObservable<TResult>> FromAsyncPattern<TResult>(Func<AsyncCallback, object, IAsyncResult> begin, Func<IAsyncResult, TResult> end)
		{
			return null;
		}

		[Token(Token = "0x600013C")]
		public static Func<T1, IObservable<TResult>> FromAsyncPattern<T1, TResult>(Func<T1, AsyncCallback, object, IAsyncResult> begin, Func<IAsyncResult, TResult> end)
		{
			return null;
		}

		[Token(Token = "0x600013D")]
		public static Func<T1, T2, IObservable<TResult>> FromAsyncPattern<T1, T2, TResult>(Func<T1, T2, AsyncCallback, object, IAsyncResult> begin, Func<IAsyncResult, TResult> end)
		{
			return null;
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0x17580F8", Offset = "0x17580F8", VA = "0x17580F8")]
		public static Func<IObservable<Unit>> FromAsyncPattern(Func<AsyncCallback, object, IAsyncResult> begin, Action<IAsyncResult> end)
		{
			return null;
		}

		[Token(Token = "0x600013F")]
		public static Func<T1, IObservable<Unit>> FromAsyncPattern<T1>(Func<T1, AsyncCallback, object, IAsyncResult> begin, Action<IAsyncResult> end)
		{
			return null;
		}

		[Token(Token = "0x6000140")]
		public static Func<T1, T2, IObservable<Unit>> FromAsyncPattern<T1, T2>(Func<T1, T2, AsyncCallback, object, IAsyncResult> begin, Action<IAsyncResult> end)
		{
			return null;
		}

		[Token(Token = "0x6000141")]
		public static IObservable<T> Take<T>(this IObservable<T> source, int count)
		{
			return null;
		}

		[Token(Token = "0x6000142")]
		public static IObservable<T> Take<T>(this IObservable<T> source, TimeSpan duration)
		{
			return null;
		}

		[Token(Token = "0x6000143")]
		public static IObservable<T> Take<T>(this IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000144")]
		public static IObservable<T> TakeWhile<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000145")]
		public static IObservable<T> TakeWhile<T>(this IObservable<T> source, Func<T, int, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000146")]
		public static IObservable<T> TakeUntil<T, TOther>(this IObservable<T> source, IObservable<TOther> other)
		{
			return null;
		}

		[Token(Token = "0x6000147")]
		public static IObservable<T> TakeLast<T>(this IObservable<T> source, int count)
		{
			return null;
		}

		[Token(Token = "0x6000148")]
		public static IObservable<T> TakeLast<T>(this IObservable<T> source, TimeSpan duration)
		{
			return null;
		}

		[Token(Token = "0x6000149")]
		public static IObservable<T> TakeLast<T>(this IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600014A")]
		public static IObservable<T> Skip<T>(this IObservable<T> source, int count)
		{
			return null;
		}

		[Token(Token = "0x600014B")]
		public static IObservable<T> Skip<T>(this IObservable<T> source, TimeSpan duration)
		{
			return null;
		}

		[Token(Token = "0x600014C")]
		public static IObservable<T> Skip<T>(this IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600014D")]
		public static IObservable<T> SkipWhile<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600014E")]
		public static IObservable<T> SkipWhile<T>(this IObservable<T> source, Func<T, int, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600014F")]
		public static IObservable<T> SkipUntil<T, TOther>(this IObservable<T> source, IObservable<TOther> other)
		{
			return null;
		}

		[Token(Token = "0x6000150")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, int count)
		{
			return null;
		}

		[Token(Token = "0x6000151")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, int count, int skip)
		{
			return null;
		}

		[Token(Token = "0x6000152")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan)
		{
			return null;
		}

		[Token(Token = "0x6000153")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000154")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan, int count)
		{
			return null;
		}

		[Token(Token = "0x6000155")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan, int count, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000156")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan, TimeSpan timeShift)
		{
			return null;
		}

		[Token(Token = "0x6000157")]
		public static IObservable<IList<T>> Buffer<T>(this IObservable<T> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000158")]
		public static IObservable<IList<TSource>> Buffer<TSource, TWindowBoundary>(this IObservable<TSource> source, IObservable<TWindowBoundary> windowBoundaries)
		{
			return null;
		}

		[Token(Token = "0x6000159")]
		public static IObservable<Pair<T>> Pairwise<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600015A")]
		public static IObservable<TR> Pairwise<T, TR>(this IObservable<T> source, Func<T, T, TR> selector)
		{
			return null;
		}

		[Token(Token = "0x600015B")]
		public static IObservable<T> Last<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600015C")]
		public static IObservable<T> Last<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600015D")]
		public static IObservable<T> LastOrDefault<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600015E")]
		public static IObservable<T> LastOrDefault<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600015F")]
		public static IObservable<T> First<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000160")]
		public static IObservable<T> First<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000161")]
		public static IObservable<T> FirstOrDefault<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000162")]
		public static IObservable<T> FirstOrDefault<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000163")]
		public static IObservable<T> Single<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000164")]
		public static IObservable<T> Single<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000165")]
		public static IObservable<T> SingleOrDefault<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000166")]
		public static IObservable<T> SingleOrDefault<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000167")]
		public static IObservable<IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector)
		{
			return null;
		}

		[Token(Token = "0x6000168")]
		public static IObservable<IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000169")]
		public static IObservable<IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
		{
			return null;
		}

		[Token(Token = "0x600016A")]
		public static IObservable<IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x600016B")]
		public static IObservable<IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, int capacity)
		{
			return null;
		}

		[Token(Token = "0x600016C")]
		public static IObservable<IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, int capacity, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x600016D")]
		public static IObservable<IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, int capacity)
		{
			return null;
		}

		[Token(Token = "0x600016E")]
		public static IObservable<IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, int capacity, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x175820C", Offset = "0x175820C", VA = "0x175820C")]
		public static IObservable<long> Interval(TimeSpan period)
		{
			return null;
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x17582BC", Offset = "0x17582BC", VA = "0x17582BC")]
		public static IObservable<long> Interval(TimeSpan period, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1758360", Offset = "0x1758360", VA = "0x1758360")]
		public static IObservable<long> Timer(TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x17583E4", Offset = "0x17583E4", VA = "0x17583E4")]
		public static IObservable<long> Timer(DateTimeOffset dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1758470", Offset = "0x1758470", VA = "0x1758470")]
		public static IObservable<long> Timer(TimeSpan dueTime, TimeSpan period)
		{
			return null;
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1758524", Offset = "0x1758524", VA = "0x1758524")]
		public static IObservable<long> Timer(DateTimeOffset dueTime, TimeSpan period)
		{
			return null;
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x17585E0", Offset = "0x17585E0", VA = "0x17585E0")]
		public static IObservable<long> Timer(TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x1758658", Offset = "0x1758658", VA = "0x1758658")]
		public static IObservable<long> Timer(DateTimeOffset dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x17586D8", Offset = "0x17586D8", VA = "0x17586D8")]
		public static IObservable<long> Timer(TimeSpan dueTime, TimeSpan period, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x1758780", Offset = "0x1758780", VA = "0x1758780")]
		public static IObservable<long> Timer(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000179")]
		public static IObservable<Timestamped<TSource>> Timestamp<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x600017A")]
		public static IObservable<Timestamped<TSource>> Timestamp<TSource>(this IObservable<TSource> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600017B")]
		public static IObservable<TimeInterval<TSource>> TimeInterval<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x600017C")]
		public static IObservable<TimeInterval<TSource>> TimeInterval<TSource>(this IObservable<TSource> source, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600017D")]
		public static IObservable<T> Delay<T>(this IObservable<T> source, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x600017E")]
		public static IObservable<TSource> Delay<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x600017F")]
		public static IObservable<T> Sample<T>(this IObservable<T> source, TimeSpan interval)
		{
			return null;
		}

		[Token(Token = "0x6000180")]
		public static IObservable<T> Sample<T>(this IObservable<T> source, TimeSpan interval, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000181")]
		public static IObservable<TSource> Throttle<TSource>(this IObservable<TSource> source, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000182")]
		public static IObservable<TSource> Throttle<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000183")]
		public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000184")]
		public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000185")]
		public static IObservable<T> Timeout<T>(this IObservable<T> source, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000186")]
		public static IObservable<T> Timeout<T>(this IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000187")]
		public static IObservable<T> Timeout<T>(this IObservable<T> source, DateTimeOffset dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000188")]
		public static IObservable<T> Timeout<T>(this IObservable<T> source, DateTimeOffset dueTime, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x6000189")]
		public static IObservable<TR> Select<T, TR>(this IObservable<T> source, Func<T, TR> selector)
		{
			return null;
		}

		[Token(Token = "0x600018A")]
		public static IObservable<TR> Select<T, TR>(this IObservable<T> source, Func<T, int, TR> selector)
		{
			return null;
		}

		[Token(Token = "0x600018B")]
		public static IObservable<T> Where<T>(this IObservable<T> source, Func<T, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600018C")]
		public static IObservable<T> Where<T>(this IObservable<T> source, Func<T, int, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x600018D")]
		public static IObservable<TR> ContinueWith<T, TR>(this IObservable<T> source, IObservable<TR> other)
		{
			return null;
		}

		[Token(Token = "0x600018E")]
		public static IObservable<TR> ContinueWith<T, TR>(this IObservable<T> source, Func<T, IObservable<TR>> selector)
		{
			return null;
		}

		[Token(Token = "0x600018F")]
		public static IObservable<TR> SelectMany<T, TR>(this IObservable<T> source, IObservable<TR> other)
		{
			return null;
		}

		[Token(Token = "0x6000190")]
		public static IObservable<TR> SelectMany<T, TR>(this IObservable<T> source, Func<T, IObservable<TR>> selector)
		{
			return null;
		}

		[Token(Token = "0x6000191")]
		public static IObservable<TResult> SelectMany<TSource, TResult>(this IObservable<TSource> source, Func<TSource, int, IObservable<TResult>> selector)
		{
			return null;
		}

		[Token(Token = "0x6000192")]
		public static IObservable<TR> SelectMany<T, TC, TR>(this IObservable<T> source, Func<T, IObservable<TC>> collectionSelector, Func<T, TC, TR> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x6000193")]
		public static IObservable<TResult> SelectMany<TSource, TCollection, TResult>(this IObservable<TSource> source, Func<TSource, int, IObservable<TCollection>> collectionSelector, Func<TSource, int, TCollection, int, TResult> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x6000194")]
		public static IObservable<TResult> SelectMany<TSource, TResult>(this IObservable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
		{
			return null;
		}

		[Token(Token = "0x6000195")]
		public static IObservable<TResult> SelectMany<TSource, TResult>(this IObservable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
		{
			return null;
		}

		[Token(Token = "0x6000196")]
		public static IObservable<TResult> SelectMany<TSource, TCollection, TResult>(this IObservable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x6000197")]
		public static IObservable<TResult> SelectMany<TSource, TCollection, TResult>(this IObservable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, int, TCollection, int, TResult> resultSelector)
		{
			return null;
		}

		[Token(Token = "0x6000198")]
		public static IObservable<T[]> ToArray<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000199")]
		public static IObservable<IList<T>> ToList<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600019A")]
		public static IObservable<T> Do<T>(this IObservable<T> source, IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x600019B")]
		public static IObservable<T> Do<T>(this IObservable<T> source, Action<T> onNext)
		{
			return null;
		}

		[Token(Token = "0x600019C")]
		public static IObservable<T> Do<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError)
		{
			return null;
		}

		[Token(Token = "0x600019D")]
		public static IObservable<T> Do<T>(this IObservable<T> source, Action<T> onNext, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x600019E")]
		public static IObservable<T> Do<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x600019F")]
		public static IObservable<T> DoOnError<T>(this IObservable<T> source, Action<Exception> onError)
		{
			return null;
		}

		[Token(Token = "0x60001A0")]
		public static IObservable<T> DoOnCompleted<T>(this IObservable<T> source, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x60001A1")]
		public static IObservable<T> DoOnTerminate<T>(this IObservable<T> source, Action onTerminate)
		{
			return null;
		}

		[Token(Token = "0x60001A2")]
		public static IObservable<T> DoOnSubscribe<T>(this IObservable<T> source, Action onSubscribe)
		{
			return null;
		}

		[Token(Token = "0x60001A3")]
		public static IObservable<T> DoOnCancel<T>(this IObservable<T> source, Action onCancel)
		{
			return null;
		}

		[Token(Token = "0x60001A4")]
		public static IObservable<Notification<T>> Materialize<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001A5")]
		public static IObservable<T> Dematerialize<T>(this IObservable<Notification<T>> source)
		{
			return null;
		}

		[Token(Token = "0x60001A6")]
		public static IObservable<T> DefaultIfEmpty<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001A7")]
		public static IObservable<T> DefaultIfEmpty<T>(this IObservable<T> source, T defaultValue)
		{
			return null;
		}

		[Token(Token = "0x60001A8")]
		public static IObservable<TSource> Distinct<TSource>(this IObservable<TSource> source)
		{
			return null;
		}

		[Token(Token = "0x60001A9")]
		public static IObservable<TSource> Distinct<TSource>(this IObservable<TSource> source, IEqualityComparer<TSource> comparer)
		{
			return null;
		}

		[Token(Token = "0x60001AA")]
		public static IObservable<TSource> Distinct<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector)
		{
			return null;
		}

		[Token(Token = "0x60001AB")]
		public static IObservable<TSource> Distinct<TSource, TKey>(this IObservable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x60001AC")]
		public static IObservable<T> DistinctUntilChanged<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001AD")]
		public static IObservable<T> DistinctUntilChanged<T>(this IObservable<T> source, IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x60001AE")]
		public static IObservable<T> DistinctUntilChanged<T, TKey>(this IObservable<T> source, Func<T, TKey> keySelector)
		{
			return null;
		}

		[Token(Token = "0x60001AF")]
		public static IObservable<T> DistinctUntilChanged<T, TKey>(this IObservable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
		{
			return null;
		}

		[Token(Token = "0x60001B0")]
		public static IObservable<T> IgnoreElements<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001B1")]
		public static IObservable<Unit> ForEachAsync<T>(this IObservable<T> source, Action<T> onNext)
		{
			return null;
		}

		[Token(Token = "0x60001B2")]
		public static IObservable<Unit> ForEachAsync<T>(this IObservable<T> source, Action<T, int> onNext)
		{
			return null;
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x1758838", Offset = "0x1758838", VA = "0x1758838")]
		public static IObservable<Unit> FromCoroutine(Func<IEnumerator> coroutine, bool publishEveryYield = false)
		{
			return null;
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x1758950", Offset = "0x1758950", VA = "0x1758950")]
		public static IObservable<Unit> FromCoroutine(Func<CancellationToken, IEnumerator> coroutine, bool publishEveryYield = false)
		{
			return null;
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x1758A68", Offset = "0x1758A68", VA = "0x1758A68")]
		public static IObservable<Unit> FromMicroCoroutine(Func<IEnumerator> coroutine, bool publishEveryYield = false, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x1758B88", Offset = "0x1758B88", VA = "0x1758B88")]
		public static IObservable<Unit> FromMicroCoroutine(Func<CancellationToken, IEnumerator> coroutine, bool publishEveryYield = false, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x1758CA8", Offset = "0x1758CA8", VA = "0x1758CA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B603C", Offset = "0x8B603C")]
		private static IEnumerator WrapEnumerator(IEnumerator enumerator, IObserver<Unit> observer, CancellationToken cancellationToken, bool publishEveryYield)
		{
			return null;
		}

		[Token(Token = "0x60001B8")]
		public static IObservable<T> FromCoroutineValue<T>(Func<IEnumerator> coroutine, bool nullAsNextUpdate = true)
		{
			return null;
		}

		[Token(Token = "0x60001B9")]
		public static IObservable<T> FromCoroutineValue<T>(Func<CancellationToken, IEnumerator> coroutine, bool nullAsNextUpdate = true)
		{
			return null;
		}

		[Token(Token = "0x60001BA")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B609C", Offset = "0x8B609C")]
		private static IEnumerator WrapEnumeratorYieldValue<T>(IEnumerator enumerator, IObserver<T> observer, CancellationToken cancellationToken, bool nullAsNextUpdate)
		{
			return null;
		}

		[Token(Token = "0x60001BB")]
		public static IObservable<T> FromCoroutine<T>(Func<IObserver<T>, IEnumerator> coroutine)
		{
			return null;
		}

		[Token(Token = "0x60001BC")]
		public static IObservable<T> FromMicroCoroutine<T>(Func<IObserver<T>, IEnumerator> coroutine, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001BD")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B60FC", Offset = "0x8B60FC")]
		private static IEnumerator WrapToCancellableEnumerator<T>(IEnumerator enumerator, IObserver<T> observer, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60001BE")]
		public static IObservable<T> FromCoroutine<T>(Func<IObserver<T>, CancellationToken, IEnumerator> coroutine)
		{
			return null;
		}

		[Token(Token = "0x60001BF")]
		public static IObservable<T> FromMicroCoroutine<T>(Func<IObserver<T>, CancellationToken, IEnumerator> coroutine, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001C0")]
		public static IObservable<Unit> SelectMany<T>(this IObservable<T> source, IEnumerator coroutine, bool publishEveryYield = false)
		{
			return null;
		}

		[Token(Token = "0x60001C1")]
		public static IObservable<Unit> SelectMany<T>(this IObservable<T> source, Func<IEnumerator> selector, bool publishEveryYield = false)
		{
			return null;
		}

		[Token(Token = "0x60001C2")]
		public static IObservable<Unit> SelectMany<T>(this IObservable<T> source, Func<T, IEnumerator> selector)
		{
			return null;
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x1758D3C", Offset = "0x1758D3C", VA = "0x1758D3C")]
		public static IObservable<Unit> ToObservable(this IEnumerator coroutine, bool publishEveryYield = false)
		{
			return null;
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x1758E54", Offset = "0x1758E54", VA = "0x1758E54")]
		public static ObservableYieldInstruction<Unit> ToYieldInstruction(this IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1758ED4", Offset = "0x1758ED4", VA = "0x1758ED4")]
		public static ObservableYieldInstruction<Unit> ToYieldInstruction(this IEnumerator coroutine, bool throwOnError)
		{
			return null;
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1758F64", Offset = "0x1758F64", VA = "0x1758F64")]
		public static ObservableYieldInstruction<Unit> ToYieldInstruction(this IEnumerator coroutine, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x1758FF4", Offset = "0x1758FF4", VA = "0x1758FF4")]
		public static ObservableYieldInstruction<Unit> ToYieldInstruction(this IEnumerator coroutine, bool throwOnError, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x175908C", Offset = "0x175908C", VA = "0x175908C")]
		public static IObservable<long> EveryUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x17591CC", Offset = "0x17591CC", VA = "0x17591CC")]
		public static IObservable<long> EveryFixedUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x175930C", Offset = "0x175930C", VA = "0x175930C")]
		public static IObservable<long> EveryEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x175944C", Offset = "0x175944C", VA = "0x175944C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B61DC", Offset = "0x8B61DC")]
		private static IEnumerator EveryCycleCore(IObserver<long> observer, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x17594C4", Offset = "0x17594C4", VA = "0x17594C4")]
		public static IObservable<long> EveryGameObjectUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x1759648", Offset = "0x1759648", VA = "0x1759648")]
		public static IObservable<long> EveryLateUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x17597CC", Offset = "0x17597CC", VA = "0x17597CC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8B623C", Offset = "0x8B623C")]
		public static IObservable<long> EveryAfterUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x1759908", Offset = "0x1759908", VA = "0x1759908")]
		public static IObservable<Unit> NextFrame(FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x1759A4C", Offset = "0x1759A4C", VA = "0x1759A4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B624C", Offset = "0x8B624C")]
		private static IEnumerator NextFrameCore(IObserver<Unit> observer, CancellationToken cancellation)
		{
			return null;
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x1759AC4", Offset = "0x1759AC4", VA = "0x1759AC4")]
		public static IObservable<long> IntervalFrame(int intervalFrameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x1759C50", Offset = "0x1759C50", VA = "0x1759C50")]
		public static IObservable<long> TimerFrame(int dueTimeFrameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x1759B38", Offset = "0x1759B38", VA = "0x1759B38")]
		public static IObservable<long> TimerFrame(int dueTimeFrameCount, int periodFrameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x1759D64", Offset = "0x1759D64", VA = "0x1759D64")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B62AC", Offset = "0x8B62AC")]
		private static IEnumerator TimerFrameCore(IObserver<long> observer, int dueTimeFrameCount, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x1759DE4", Offset = "0x1759DE4", VA = "0x1759DE4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B630C", Offset = "0x8B630C")]
		private static IEnumerator TimerFrameCore(IObserver<long> observer, int dueTimeFrameCount, int periodFrameCount, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001D6")]
		public static IObservable<T> DelayFrame<T>(this IObservable<T> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D7")]
		public static IObservable<T> Sample<T, T2>(this IObservable<T> source, IObservable<T2> sampler)
		{
			return null;
		}

		[Token(Token = "0x60001D8")]
		public static IObservable<T> SampleFrame<T>(this IObservable<T> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001D9")]
		public static IObservable<TSource> ThrottleFrame<TSource>(this IObservable<TSource> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001DA")]
		public static IObservable<TSource> ThrottleFirstFrame<TSource>(this IObservable<TSource> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001DB")]
		public static IObservable<T> TimeoutFrame<T>(this IObservable<T> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001DC")]
		public static IObservable<T> DelayFrameSubscription<T>(this IObservable<T> source, int frameCount, FrameCountType frameCountType = FrameCountType.Update)
		{
			return null;
		}

		[Token(Token = "0x60001DD")]
		public static ObservableYieldInstruction<T> ToYieldInstruction<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001DE")]
		public static ObservableYieldInstruction<T> ToYieldInstruction<T>(this IObservable<T> source, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001DF")]
		public static ObservableYieldInstruction<T> ToYieldInstruction<T>(this IObservable<T> source, bool throwOnError)
		{
			return null;
		}

		[Token(Token = "0x60001E0")]
		public static ObservableYieldInstruction<T> ToYieldInstruction<T>(this IObservable<T> source, bool throwOnError, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E1")]
		public static IEnumerator ToAwaitableEnumerator<T>(this IObservable<T> source, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E2")]
		public static IEnumerator ToAwaitableEnumerator<T>(this IObservable<T> source, Action<T> onResult, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E3")]
		public static IEnumerator ToAwaitableEnumerator<T>(this IObservable<T> source, Action<Exception> onError, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B644C", Offset = "0x8B644C")]
		public static IEnumerator ToAwaitableEnumerator<T>(this IObservable<T> source, Action<T> onResult, Action<Exception> onError, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E5")]
		public static Coroutine StartAsCoroutine<T>(this IObservable<T> source, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E6")]
		public static Coroutine StartAsCoroutine<T>(this IObservable<T> source, Action<T> onResult, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E7")]
		public static Coroutine StartAsCoroutine<T>(this IObservable<T> source, Action<Exception> onError, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E8")]
		public static Coroutine StartAsCoroutine<T>(this IObservable<T> source, Action<T> onResult, Action<Exception> onError, [Optional] CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60001E9")]
		public static IObservable<T> ObserveOnMainThread<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001EA")]
		public static IObservable<T> ObserveOnMainThread<T>(this IObservable<T> source, MainThreadDispatchType dispatchType)
		{
			return null;
		}

		[Token(Token = "0x60001EB")]
		public static IObservable<T> SubscribeOnMainThread<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1759E70", Offset = "0x1759E70", VA = "0x1759E70")]
		public static IObservable<bool> EveryApplicationPause()
		{
			return null;
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1759F20", Offset = "0x1759F20", VA = "0x1759F20")]
		public static IObservable<bool> EveryApplicationFocus()
		{
			return null;
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x1759FD0", Offset = "0x1759FD0", VA = "0x1759FD0")]
		public static IObservable<Unit> OnceApplicationQuit()
		{
			return null;
		}

		[Token(Token = "0x60001EF")]
		public static IObservable<T> TakeUntilDestroy<T>(this IObservable<T> source, Component target)
		{
			return null;
		}

		[Token(Token = "0x60001F0")]
		public static IObservable<T> TakeUntilDestroy<T>(this IObservable<T> source, GameObject target)
		{
			return null;
		}

		[Token(Token = "0x60001F1")]
		public static IObservable<T> TakeUntilDisable<T>(this IObservable<T> source, Component target)
		{
			return null;
		}

		[Token(Token = "0x60001F2")]
		public static IObservable<T> TakeUntilDisable<T>(this IObservable<T> source, GameObject target)
		{
			return null;
		}

		[Token(Token = "0x60001F3")]
		public static IObservable<T> RepeatUntilDestroy<T>(this IObservable<T> source, GameObject target)
		{
			return null;
		}

		[Token(Token = "0x60001F4")]
		public static IObservable<T> RepeatUntilDestroy<T>(this IObservable<T> source, Component target)
		{
			return null;
		}

		[Token(Token = "0x60001F5")]
		public static IObservable<T> RepeatUntilDisable<T>(this IObservable<T> source, GameObject target)
		{
			return null;
		}

		[Token(Token = "0x60001F6")]
		public static IObservable<T> RepeatUntilDisable<T>(this IObservable<T> source, Component target)
		{
			return null;
		}

		[Token(Token = "0x60001F7")]
		private static IObservable<T> RepeatUntilCore<T>(this IEnumerable<IObservable<T>> sources, IObservable<Unit> trigger, GameObject lifeTimeChecker)
		{
			return null;
		}

		[Token(Token = "0x60001F8")]
		public static IObservable<FrameInterval<T>> FrameInterval<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001F9")]
		public static IObservable<TimeInterval<T>> FrameTimeInterval<T>(this IObservable<T> source, bool ignoreTimeScale = false)
		{
			return null;
		}

		[Token(Token = "0x60001FA")]
		public static IObservable<IList<T>> BatchFrame<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x60001FB")]
		public static IObservable<IList<T>> BatchFrame<T>(this IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
			return null;
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x175A084", Offset = "0x175A084", VA = "0x175A084")]
		public static IObservable<Unit> BatchFrame(this IObservable<Unit> source)
		{
			return null;
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x175A0EC", Offset = "0x175A0EC", VA = "0x175A0EC")]
		public static IObservable<Unit> BatchFrame(this IObservable<Unit> source, int frameCount, FrameCountType frameCountType)
		{
			return null;
		}
	}
	[Token(Token = "0x200005B")]
	public sealed class ScheduledDisposable : ICancelable, IDisposable
	{
		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDisposable disposable;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int isDisposed;

		[Token(Token = "0x1700002A")]
		public IScheduler Scheduler
		{
			[Token(Token = "0x60002A3")]
			[Address(RVA = "0x12CA7B4", Offset = "0x12CA7B4", VA = "0x12CA7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		public IDisposable Disposable
		{
			[Token(Token = "0x60002A4")]
			[Address(RVA = "0x12CA7BC", Offset = "0x12CA7BC", VA = "0x12CA7BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		public bool IsDisposed
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0x12CA7E0", Offset = "0x12CA7E0", VA = "0x12CA7E0", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x12CA774", Offset = "0x12CA774", VA = "0x12CA774")]
		public ScheduledDisposable(IScheduler scheduler, IDisposable disposable)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x12CA7F0", Offset = "0x12CA7F0", VA = "0x12CA7F0", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x12CA8F0", Offset = "0x12CA8F0", VA = "0x12CA8F0")]
		private void DisposeInner()
		{
		}
	}
	[Token(Token = "0x200005C")]
	public sealed class SerialDisposable : IDisposable, ICancelable
	{
		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object gate;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDisposable current;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool disposed;

		[Token(Token = "0x1700002D")]
		public bool IsDisposed
		{
			[Token(Token = "0x60002A8")]
			[Address(RVA = "0x12CBB80", Offset = "0x12CBB80", VA = "0x12CBB80", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700002E")]
		public IDisposable Disposable
		{
			[Token(Token = "0x60002A9")]
			[Address(RVA = "0x12CBC50", Offset = "0x12CBC50", VA = "0x12CBC50")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002AA")]
			[Address(RVA = "0x12CBC58", Offset = "0x12CBC58", VA = "0x12CBC58")]
			set
			{
			}
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x12CBE54", Offset = "0x12CBE54", VA = "0x12CBE54", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x12CBFC8", Offset = "0x12CBFC8", VA = "0x12CBFC8")]
		public SerialDisposable()
		{
		}
	}
	[Token(Token = "0x200005D")]
	public sealed class SingleAssignmentDisposable : IDisposable, ICancelable
	{
		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object gate;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDisposable current;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool disposed;

		[Token(Token = "0x1700002F")]
		public bool IsDisposed
		{
			[Token(Token = "0x60002AD")]
			[Address(RVA = "0x12CC318", Offset = "0x12CC318", VA = "0x12CC318", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000030")]
		public IDisposable Disposable
		{
			[Token(Token = "0x60002AE")]
			[Address(RVA = "0x12CC3E8", Offset = "0x12CC3E8", VA = "0x12CC3E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0x12CC3F0", Offset = "0x12CC3F0", VA = "0x12CC3F0")]
			set
			{
			}
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x12CC5E8", Offset = "0x12CC5E8", VA = "0x12CC5E8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x12CC75C", Offset = "0x12CC75C", VA = "0x12CC75C")]
		public SingleAssignmentDisposable()
		{
		}
	}
	[Token(Token = "0x200005E")]
	public abstract class StableCompositeDisposable : ICancelable, IDisposable
	{
		[Token(Token = "0x200005F")]
		private class Binary : StableCompositeDisposable
		{
			[Token(Token = "0x40000F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int disposedCallCount;

			[Token(Token = "0x40000F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IDisposable _disposable1;

			[Token(Token = "0x40000F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IDisposable _disposable2;

			[Token(Token = "0x17000032")]
			public override bool IsDisposed
			{
				[Token(Token = "0x60002BC")]
				[Address(RVA = "0x1074044", Offset = "0x1074044", VA = "0x1074044", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002BB")]
			[Address(RVA = "0x1073FF8", Offset = "0x1073FF8", VA = "0x1073FF8")]
			public Binary(IDisposable disposable1, IDisposable disposable2)
			{
			}

			[Token(Token = "0x60002BD")]
			[Address(RVA = "0x1074054", Offset = "0x1074054", VA = "0x1074054", Slot = "6")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x2000060")]
		private class Trinary : StableCompositeDisposable
		{
			[Token(Token = "0x40000F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int disposedCallCount;

			[Token(Token = "0x40000F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IDisposable _disposable1;

			[Token(Token = "0x40000F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IDisposable _disposable2;

			[Token(Token = "0x40000F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IDisposable _disposable3;

			[Token(Token = "0x17000033")]
			public override bool IsDisposed
			{
				[Token(Token = "0x60002BF")]
				[Address(RVA = "0x10748D0", Offset = "0x10748D0", VA = "0x10748D0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002BE")]
			[Address(RVA = "0x1074878", Offset = "0x1074878", VA = "0x1074878")]
			public Trinary(IDisposable disposable1, IDisposable disposable2, IDisposable disposable3)
			{
			}

			[Token(Token = "0x60002C0")]
			[Address(RVA = "0x10748E0", Offset = "0x10748E0", VA = "0x10748E0", Slot = "6")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x2000061")]
		private class Quaternary : StableCompositeDisposable
		{
			[Token(Token = "0x40000F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int disposedCallCount;

			[Token(Token = "0x40000F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IDisposable _disposable1;

			[Token(Token = "0x40000F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IDisposable _disposable2;

			[Token(Token = "0x40000FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IDisposable _disposable3;

			[Token(Token = "0x40000FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IDisposable _disposable4;

			[Token(Token = "0x17000034")]
			public override bool IsDisposed
			{
				[Token(Token = "0x60002C2")]
				[Address(RVA = "0x107464C", Offset = "0x107464C", VA = "0x107464C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002C1")]
			[Address(RVA = "0x10745E0", Offset = "0x10745E0", VA = "0x10745E0")]
			public Quaternary(IDisposable disposable1, IDisposable disposable2, IDisposable disposable3, IDisposable disposable4)
			{
			}

			[Token(Token = "0x60002C3")]
			[Address(RVA = "0x107465C", Offset = "0x107465C", VA = "0x107465C", Slot = "6")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x2000062")]
		private class NAry : StableCompositeDisposable
		{
			[Token(Token = "0x40000FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int disposedCallCount;

			[Token(Token = "0x40000FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<IDisposable> _disposables;

			[Token(Token = "0x17000035")]
			public override bool IsDisposed
			{
				[Token(Token = "0x60002C6")]
				[Address(RVA = "0x10742C4", Offset = "0x10742C4", VA = "0x10742C4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002C4")]
			[Address(RVA = "0x1074198", Offset = "0x1074198", VA = "0x1074198")]
			public NAry(IDisposable[] disposables)
			{
			}

			[Token(Token = "0x60002C5")]
			[Address(RVA = "0x107419C", Offset = "0x107419C", VA = "0x107419C")]
			public NAry(IEnumerable<IDisposable> disposables)
			{
			}

			[Token(Token = "0x60002C7")]
			[Address(RVA = "0x10742D4", Offset = "0x10742D4", VA = "0x10742D4", Slot = "6")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x2000063")]
		private class NAryUnsafe : StableCompositeDisposable
		{
			[Token(Token = "0x40000FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int disposedCallCount;

			[Token(Token = "0x40000FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IDisposable[] _disposables;

			[Token(Token = "0x17000036")]
			public override bool IsDisposed
			{
				[Token(Token = "0x60002C9")]
				[Address(RVA = "0x10744B0", Offset = "0x10744B0", VA = "0x10744B0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60002C8")]
			[Address(RVA = "0x1074478", Offset = "0x1074478", VA = "0x1074478")]
			public NAryUnsafe(IDisposable[] disposables)
			{
			}

			[Token(Token = "0x60002CA")]
			[Address(RVA = "0x10744C0", Offset = "0x10744C0", VA = "0x10744C0", Slot = "6")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x17000031")]
		public abstract bool IsDisposed
		{
			[Token(Token = "0x60002B9")]
			get;
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x14DB644", Offset = "0x14DB644", VA = "0x14DB644")]
		public static ICancelable Create(IDisposable disposable1, IDisposable disposable2)
		{
			return null;
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x14DB724", Offset = "0x14DB724", VA = "0x14DB724")]
		public static ICancelable Create(IDisposable disposable1, IDisposable disposable2, IDisposable disposable3)
		{
			return null;
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x14DB830", Offset = "0x14DB830", VA = "0x14DB830")]
		public static ICancelable Create(IDisposable disposable1, IDisposable disposable2, IDisposable disposable3, IDisposable disposable4)
		{
			return null;
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x14DB970", Offset = "0x14DB970", VA = "0x14DB970")]
		public static ICancelable Create(params IDisposable[] disposables)
		{
			return null;
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x14DBA1C", Offset = "0x14DBA1C", VA = "0x14DBA1C")]
		public static ICancelable CreateUnsafe(IDisposable[] disposables)
		{
			return null;
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x14DBA7C", Offset = "0x14DBA7C", VA = "0x14DBA7C")]
		public static ICancelable Create(IEnumerable<IDisposable> disposables)
		{
			return null;
		}

		[Token(Token = "0x60002B8")]
		public abstract void Dispose();

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x14DBB28", Offset = "0x14DBB28", VA = "0x14DBB28")]
		protected StableCompositeDisposable()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public interface IEventPattern<TSender, TEventArgs>
	{
		[Token(Token = "0x17000037")]
		TSender Sender
		{
			[Token(Token = "0x60002CB")]
			get;
		}

		[Token(Token = "0x17000038")]
		TEventArgs EventArgs
		{
			[Token(Token = "0x60002CC")]
			get;
		}
	}
	[Token(Token = "0x2000065")]
	public class EventPattern<TEventArgs> : EventPattern<object, TEventArgs>
	{
		[Token(Token = "0x60002CD")]
		public EventPattern(object sender, TEventArgs e)
		{
		}
	}
	[Token(Token = "0x2000066")]
	public class EventPattern<TSender, TEventArgs> : IEquatable<EventPattern<TSender, TEventArgs>>, IEventPattern<TSender, TEventArgs>
	{
		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2630", Offset = "0x8B2630")]
		private TSender <Sender>k__BackingField;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2640", Offset = "0x8B2640")]
		private TEventArgs <EventArgs>k__BackingField;

		[Token(Token = "0x17000039")]
		public TSender Sender
		{
			[Token(Token = "0x60002CF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B697C", Offset = "0x8B697C")]
			get
			{
				return (TSender)null;
			}
			[Token(Token = "0x60002D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B698C", Offset = "0x8B698C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public TEventArgs EventArgs
		{
			[Token(Token = "0x60002D1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B699C", Offset = "0x8B699C")]
			get
			{
				return (TEventArgs)null;
			}
			[Token(Token = "0x60002D2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B69AC", Offset = "0x8B69AC")]
			private set
			{
			}
		}

		[Token(Token = "0x60002CE")]
		public EventPattern(TSender sender, TEventArgs e)
		{
		}

		[Token(Token = "0x60002D3")]
		public bool Equals(EventPattern<TSender, TEventArgs> other)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D4")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D5")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60002D6")]
		public static bool operator ==(EventPattern<TSender, TEventArgs> first, EventPattern<TSender, TEventArgs> second)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D7")]
		public static bool operator !=(EventPattern<TSender, TEventArgs> first, EventPattern<TSender, TEventArgs> second)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000067")]
	public interface IObserver<TValue, TResult>
	{
		[Token(Token = "0x60002D8")]
		TResult OnNext(TValue value);

		[Token(Token = "0x60002D9")]
		TResult OnError(Exception exception);

		[Token(Token = "0x60002DA")]
		TResult OnCompleted();
	}
	[Token(Token = "0x2000068")]
	public enum NotificationKind
	{
		[Token(Token = "0x4000103")]
		OnNext,
		[Token(Token = "0x4000104")]
		OnError,
		[Token(Token = "0x4000105")]
		OnCompleted
	}
	[Serializable]
	[Token(Token = "0x2000069")]
	public abstract class Notification<T> : IEquatable<Notification<T>>
	{
		[Serializable]
		[Token(Token = "0x200006A")]
		[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0x8B0150", Offset = "0x8B0150")]
		internal sealed class OnNextNotification : Notification<T>
		{
			[Token(Token = "0x4000106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T value;

			[Token(Token = "0x1700003F")]
			public override T Value
			{
				[Token(Token = "0x60002EB")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000040")]
			public override Exception Exception
			{
				[Token(Token = "0x60002EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000041")]
			public override bool HasValue
			{
				[Token(Token = "0x60002ED")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000042")]
			public override NotificationKind Kind
			{
				[Token(Token = "0x60002EE")]
				get
				{
					return default(NotificationKind);
				}
			}

			[Token(Token = "0x60002EA")]
			public OnNextNotification(T value)
			{
			}

			[Token(Token = "0x60002EF")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60002F0")]
			public override bool Equals(Notification<T> other)
			{
				return default(bool);
			}

			[Token(Token = "0x60002F1")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x60002F2")]
			public override void Accept(IObserver<T> observer)
			{
			}

			[Token(Token = "0x60002F3")]
			public override TResult Accept<TResult>(IObserver<T, TResult> observer)
			{
				return (TResult)null;
			}

			[Token(Token = "0x60002F4")]
			public override void Accept(Action<T> onNext, Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x60002F5")]
			public override TResult Accept<TResult>(Func<T, TResult> onNext, Func<Exception, TResult> onError, Func<TResult> onCompleted)
			{
				return (TResult)null;
			}
		}

		[Serializable]
		[Token(Token = "0x200006B")]
		[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0x8B0188", Offset = "0x8B0188")]
		internal sealed class OnErrorNotification : Notification<T>
		{
			[Token(Token = "0x4000107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Exception exception;

			[Token(Token = "0x17000043")]
			public override T Value
			{
				[Token(Token = "0x60002F7")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000044")]
			public override Exception Exception
			{
				[Token(Token = "0x60002F8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000045")]
			public override bool HasValue
			{
				[Token(Token = "0x60002F9")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000046")]
			public override NotificationKind Kind
			{
				[Token(Token = "0x60002FA")]
				get
				{
					return default(NotificationKind);
				}
			}

			[Token(Token = "0x60002F6")]
			public OnErrorNotification(Exception exception)
			{
			}

			[Token(Token = "0x60002FB")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60002FC")]
			public override bool Equals(Notification<T> other)
			{
				return default(bool);
			}

			[Token(Token = "0x60002FD")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x60002FE")]
			public override void Accept(IObserver<T> observer)
			{
			}

			[Token(Token = "0x60002FF")]
			public override TResult Accept<TResult>(IObserver<T, TResult> observer)
			{
				return (TResult)null;
			}

			[Token(Token = "0x6000300")]
			public override void Accept(Action<T> onNext, Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x6000301")]
			public override TResult Accept<TResult>(Func<T, TResult> onNext, Func<Exception, TResult> onError, Func<TResult> onCompleted)
			{
				return (TResult)null;
			}
		}

		[Serializable]
		[Token(Token = "0x200006C")]
		[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0x8B01C0", Offset = "0x8B01C0")]
		internal sealed class OnCompletedNotification : Notification<T>
		{
			[Token(Token = "0x17000047")]
			public override T Value
			{
				[Token(Token = "0x6000303")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000048")]
			public override Exception Exception
			{
				[Token(Token = "0x6000304")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000049")]
			public override bool HasValue
			{
				[Token(Token = "0x6000305")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700004A")]
			public override NotificationKind Kind
			{
				[Token(Token = "0x6000306")]
				get
				{
					return default(NotificationKind);
				}
			}

			[Token(Token = "0x6000302")]
			public OnCompletedNotification()
			{
			}

			[Token(Token = "0x6000307")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000308")]
			public override bool Equals(Notification<T> other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000309")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x600030A")]
			public override void Accept(IObserver<T> observer)
			{
			}

			[Token(Token = "0x600030B")]
			public override TResult Accept<TResult>(IObserver<T, TResult> observer)
			{
				return (TResult)null;
			}

			[Token(Token = "0x600030C")]
			public override void Accept(Action<T> onNext, Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x600030D")]
			public override TResult Accept<TResult>(Func<T, TResult> onNext, Func<Exception, TResult> onError, Func<TResult> onCompleted)
			{
				return (TResult)null;
			}
		}

		[Token(Token = "0x200006D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B01F8", Offset = "0x8B01F8")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4000108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IScheduler scheduler;

			[Token(Token = "0x4000109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Notification<T> <>4__this;

			[Token(Token = "0x600030E")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x600030F")]
			internal IDisposable <ToObservable>b__0(IObserver<T> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x200006E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0208", Offset = "0x8B0208")]
		private sealed class <>c__DisplayClass21_1
		{
			[Token(Token = "0x400010A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x400010B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass21_0 CS$<>8__locals1;

			[Token(Token = "0x6000310")]
			public <>c__DisplayClass21_1()
			{
			}

			[Token(Token = "0x6000311")]
			internal void <ToObservable>b__1()
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public abstract T Value
		{
			[Token(Token = "0x60002DC")]
			get;
		}

		[Token(Token = "0x1700003C")]
		public abstract bool HasValue
		{
			[Token(Token = "0x60002DD")]
			get;
		}

		[Token(Token = "0x1700003D")]
		public abstract Exception Exception
		{
			[Token(Token = "0x60002DE")]
			get;
		}

		[Token(Token = "0x1700003E")]
		public abstract NotificationKind Kind
		{
			[Token(Token = "0x60002DF")]
			get;
		}

		[Token(Token = "0x60002DB")]
		protected internal Notification()
		{
		}

		[Token(Token = "0x60002E0")]
		public abstract bool Equals(Notification<T> other);

		[Token(Token = "0x60002E1")]
		public static bool operator ==(Notification<T> left, Notification<T> right)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E2")]
		public static bool operator !=(Notification<T> left, Notification<T> right)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E3")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E4")]
		public abstract void Accept(IObserver<T> observer);

		[Token(Token = "0x60002E5")]
		public abstract TResult Accept<TResult>(IObserver<T, TResult> observer);

		[Token(Token = "0x60002E6")]
		public abstract void Accept(Action<T> onNext, Action<Exception> onError, Action onCompleted);

		[Token(Token = "0x60002E7")]
		public abstract TResult Accept<TResult>(Func<T, TResult> onNext, Func<Exception, TResult> onError, Func<TResult> onCompleted);

		[Token(Token = "0x60002E8")]
		public IObservable<T> ToObservable()
		{
			return null;
		}

		[Token(Token = "0x60002E9")]
		public IObservable<T> ToObservable(IScheduler scheduler)
		{
			return null;
		}
	}
	[Token(Token = "0x200006F")]
	public static class Notification
	{
		[Token(Token = "0x6000312")]
		public static Notification<T> CreateOnNext<T>(T value)
		{
			return null;
		}

		[Token(Token = "0x6000313")]
		public static Notification<T> CreateOnError<T>(Exception error)
		{
			return null;
		}

		[Token(Token = "0x6000314")]
		public static Notification<T> CreateOnCompleted<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x2000070")]
	public class BooleanNotifier : IObservable<bool>
	{
		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Subject<bool> boolTrigger;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool boolValue;

		[Token(Token = "0x1700004B")]
		public bool Value
		{
			[Token(Token = "0x6000315")]
			[Address(RVA = "0x1689CEC", Offset = "0x1689CEC", VA = "0x1689CEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000316")]
			[Address(RVA = "0x1689CF4", Offset = "0x1689CF4", VA = "0x1689CF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x1689D5C", Offset = "0x1689D5C", VA = "0x1689D5C")]
		public BooleanNotifier(bool initialValue = false)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x1689DEC", Offset = "0x1689DEC", VA = "0x1689DEC")]
		public void TurnOn()
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x1689E00", Offset = "0x1689E00", VA = "0x1689E00")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x1689E14", Offset = "0x1689E14", VA = "0x1689E14")]
		public void SwitchValue()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x1689E24", Offset = "0x1689E24", VA = "0x1689E24", Slot = "4")]
		public IDisposable Subscribe(IObserver<bool> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000071")]
	public enum CountChangedStatus
	{
		[Token(Token = "0x400010F")]
		Increment,
		[Token(Token = "0x4000110")]
		Decrement,
		[Token(Token = "0x4000111")]
		Empty,
		[Token(Token = "0x4000112")]
		Max
	}
	[Token(Token = "0x2000072")]
	public class CountNotifier : IObservable<CountChangedStatus>
	{
		[Token(Token = "0x2000073")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0218", Offset = "0x8B0218")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4000117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CountNotifier <>4__this;

			[Token(Token = "0x4000118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int incrementCount;

			[Token(Token = "0x6000323")]
			[Address(RVA = "0x10BE9E4", Offset = "0x10BE9E4", VA = "0x10BE9E4")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6000324")]
			[Address(RVA = "0x10BE9EC", Offset = "0x10BE9EC", VA = "0x10BE9EC")]
			internal void <Increment>b__0()
			{
			}
		}

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object lockObject;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Subject<CountChangedStatus> statusChanged;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int max;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2650", Offset = "0x8B2650")]
		private int <Count>k__BackingField;

		[Token(Token = "0x1700004C")]
		public int Max
		{
			[Token(Token = "0x600031C")]
			[Address(RVA = "0x168E628", Offset = "0x168E628", VA = "0x168E628")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004D")]
		public int Count
		{
			[Token(Token = "0x600031D")]
			[Address(RVA = "0x168E630", Offset = "0x168E630", VA = "0x168E630")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B69BC", Offset = "0x8B69BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600031E")]
			[Address(RVA = "0x168E638", Offset = "0x168E638", VA = "0x168E638")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B69CC", Offset = "0x8B69CC")]
			private set
			{
			}
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x168E640", Offset = "0x168E640", VA = "0x168E640")]
		public CountNotifier(int max = int.MaxValue)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x168E748", Offset = "0x168E748", VA = "0x168E748")]
		public IDisposable Increment(int incrementCount = 1)
		{
			return null;
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x168EA48", Offset = "0x168EA48", VA = "0x168EA48")]
		public void Decrement(int decrementCount = 1)
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x168EBD4", Offset = "0x168EBD4", VA = "0x168EBD4", Slot = "4")]
		public IDisposable Subscribe(IObserver<CountChangedStatus> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000074")]
	public interface IMessagePublisher
	{
		[Token(Token = "0x6000325")]
		void Publish<T>(T message);
	}
	[Token(Token = "0x2000075")]
	public interface IMessageReceiver
	{
		[Token(Token = "0x6000326")]
		IObservable<T> Receive<T>();
	}
	[Token(Token = "0x2000076")]
	public interface IMessageBroker : IMessagePublisher, IMessageReceiver
	{
	}
	[Token(Token = "0x2000077")]
	public interface IAsyncMessagePublisher
	{
		[Token(Token = "0x6000327")]
		IObservable<Unit> PublishAsync<T>(T message);
	}
	[Token(Token = "0x2000078")]
	public interface IAsyncMessageReceiver
	{
		[Token(Token = "0x6000328")]
		IDisposable Subscribe<T>(Func<T, IObservable<Unit>> asyncMessageReceiver);
	}
	[Token(Token = "0x2000079")]
	public interface IAsyncMessageBroker : IAsyncMessagePublisher, IAsyncMessageReceiver
	{
	}
	[Token(Token = "0x200007A")]
	public class MessageBroker : IMessageBroker, IMessagePublisher, IMessageReceiver, IDisposable
	{
		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IMessageBroker Default;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isDisposed;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<Type, object> notifiers;

		[Token(Token = "0x6000329")]
		public void Publish<T>(T message)
		{
		}

		[Token(Token = "0x600032A")]
		public IObservable<T> Receive<T>()
		{
			return null;
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x17561C4", Offset = "0x17561C4", VA = "0x17561C4", Slot = "6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x17562D0", Offset = "0x17562D0", VA = "0x17562D0")]
		public MessageBroker()
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class AsyncMessageBroker : IAsyncMessageBroker, IAsyncMessagePublisher, IAsyncMessageReceiver, IDisposable
	{
		[Token(Token = "0x200007C")]
		private class Subscription<T> : IDisposable
		{
			[Token(Token = "0x400011F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AsyncMessageBroker parent;

			[Token(Token = "0x4000120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, IObservable<Unit>> asyncMessageReceiver;

			[Token(Token = "0x6000333")]
			public Subscription(AsyncMessageBroker parent, Func<T, IObservable<Unit>> asyncMessageReceiver)
			{
			}

			[Token(Token = "0x6000334")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IAsyncMessageBroker Default;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isDisposed;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<Type, object> notifiers;

		[Token(Token = "0x600032E")]
		public IObservable<Unit> PublishAsync<T>(T message)
		{
			return null;
		}

		[Token(Token = "0x600032F")]
		public IDisposable Subscribe<T>(Func<T, IObservable<Unit>> asyncMessageReceiver)
		{
			return null;
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x118024C", Offset = "0x118024C", VA = "0x118024C", Slot = "6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1180358", Offset = "0x1180358", VA = "0x1180358")]
		public AsyncMessageBroker()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public class ScheduledNotifier<T> : IObservable<T>, IProgress<T>
	{
		[Token(Token = "0x200007E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0228", Offset = "0x8B0228")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4000123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ScheduledNotifier<T> <>4__this;

			[Token(Token = "0x4000124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T value;

			[Token(Token = "0x600033B")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x600033C")]
			internal void <Report>b__0()
			{
			}
		}

		[Token(Token = "0x200007F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0238", Offset = "0x8B0238")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4000125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ScheduledNotifier<T> <>4__this;

			[Token(Token = "0x4000126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T value;

			[Token(Token = "0x600033D")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x600033E")]
			internal void <Report>b__0()
			{
			}
		}

		[Token(Token = "0x2000080")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0248", Offset = "0x8B0248")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4000127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ScheduledNotifier<T> <>4__this;

			[Token(Token = "0x4000128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T value;

			[Token(Token = "0x600033F")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000340")]
			internal void <Report>b__0()
			{
			}
		}

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Subject<T> trigger;

		[Token(Token = "0x6000335")]
		public ScheduledNotifier()
		{
		}

		[Token(Token = "0x6000336")]
		public ScheduledNotifier(IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000337")]
		public void Report(T value)
		{
		}

		[Token(Token = "0x6000338")]
		public IDisposable Report(T value, TimeSpan dueTime)
		{
			return null;
		}

		[Token(Token = "0x6000339")]
		public IDisposable Report(T value, DateTimeOffset dueTime)
		{
			return null;
		}

		[Token(Token = "0x600033A")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000081")]
	public static class Observer
	{
		[Token(Token = "0x2000082")]
		private class AnonymousObserver<T> : IObserver<T>
		{
			[Token(Token = "0x4000129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> onNext;

			[Token(Token = "0x400012A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception> onError;

			[Token(Token = "0x400012B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action onCompleted;

			[Token(Token = "0x400012C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x600034A")]
			public AnonymousObserver(Action<T> onNext, Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x600034B")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x600034C")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x600034D")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000083")]
		private class EmptyOnNextAnonymousObserver<T> : IObserver<T>
		{
			[Token(Token = "0x400012D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception> onError;

			[Token(Token = "0x400012E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action onCompleted;

			[Token(Token = "0x400012F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x600034E")]
			public EmptyOnNextAnonymousObserver(Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x600034F")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000350")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000351")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000084")]
		private class Subscribe<T> : IObserver<T>
		{
			[Token(Token = "0x4000130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> onNext;

			[Token(Token = "0x4000131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception> onError;

			[Token(Token = "0x4000132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action onCompleted;

			[Token(Token = "0x4000133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x6000352")]
			public Subscribe(Action<T> onNext, Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x6000353")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000354")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000355")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000085")]
		private class Subscribe_<T> : IObserver<T>
		{
			[Token(Token = "0x4000134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception> onError;

			[Token(Token = "0x4000135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action onCompleted;

			[Token(Token = "0x4000136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x6000356")]
			public Subscribe_(Action<Exception> onError, Action onCompleted)
			{
			}

			[Token(Token = "0x6000357")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000358")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000359")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000086")]
		private class Subscribe<T, TState> : IObserver<T>
		{
			[Token(Token = "0x4000137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState state;

			[Token(Token = "0x4000138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T, TState> onNext;

			[Token(Token = "0x4000139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception, TState> onError;

			[Token(Token = "0x400013A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<TState> onCompleted;

			[Token(Token = "0x400013B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x600035A")]
			public Subscribe(TState state, Action<T, TState> onNext, Action<Exception, TState> onError, Action<TState> onCompleted)
			{
			}

			[Token(Token = "0x600035B")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x600035C")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x600035D")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000087")]
		private class Subscribe<T, TState1, TState2> : IObserver<T>
		{
			[Token(Token = "0x400013C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState1 state1;

			[Token(Token = "0x400013D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState2 state2;

			[Token(Token = "0x400013E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T, TState1, TState2> onNext;

			[Token(Token = "0x400013F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception, TState1, TState2> onError;

			[Token(Token = "0x4000140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<TState1, TState2> onCompleted;

			[Token(Token = "0x4000141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x600035E")]
			public Subscribe(TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext, Action<Exception, TState1, TState2> onError, Action<TState1, TState2> onCompleted)
			{
			}

			[Token(Token = "0x600035F")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000360")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000361")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000088")]
		private class Subscribe<T, TState1, TState2, TState3> : IObserver<T>
		{
			[Token(Token = "0x4000142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState1 state1;

			[Token(Token = "0x4000143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState2 state2;

			[Token(Token = "0x4000144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TState3 state3;

			[Token(Token = "0x4000145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T, TState1, TState2, TState3> onNext;

			[Token(Token = "0x4000146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<Exception, TState1, TState2, TState3> onError;

			[Token(Token = "0x4000147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<TState1, TState2, TState3> onCompleted;

			[Token(Token = "0x4000148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int isStopped;

			[Token(Token = "0x6000362")]
			public Subscribe(TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext, Action<Exception, TState1, TState2, TState3> onError, Action<TState1, TState2, TState3> onCompleted)
			{
			}

			[Token(Token = "0x6000363")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000364")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000365")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000089")]
		private class AutoDetachObserver<T> : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000366")]
			public AutoDetachObserver(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000367")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000368")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000369")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x6000341")]
		internal static IObserver<T> CreateSubscribeObserver<T>(Action<T> onNext, Action<Exception> onError, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000342")]
		internal static IObserver<T> CreateSubscribeWithStateObserver<T, TState>(TState state, Action<T, TState> onNext, Action<Exception, TState> onError, Action<TState> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000343")]
		internal static IObserver<T> CreateSubscribeWithState2Observer<T, TState1, TState2>(TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext, Action<Exception, TState1, TState2> onError, Action<TState1, TState2> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000344")]
		internal static IObserver<T> CreateSubscribeWithState3Observer<T, TState1, TState2, TState3>(TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext, Action<Exception, TState1, TState2, TState3> onError, Action<TState1, TState2, TState3> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000345")]
		public static IObserver<T> Create<T>(Action<T> onNext)
		{
			return null;
		}

		[Token(Token = "0x6000346")]
		public static IObserver<T> Create<T>(Action<T> onNext, Action<Exception> onError)
		{
			return null;
		}

		[Token(Token = "0x6000347")]
		public static IObserver<T> Create<T>(Action<T> onNext, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000348")]
		public static IObserver<T> Create<T>(Action<T> onNext, Action<Exception> onError, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000349")]
		public static IObserver<T> CreateAutoDetachObserver<T>(IObserver<T> observer, IDisposable disposable)
		{
			return null;
		}
	}
	[Token(Token = "0x200008A")]
	public static class ObserverExtensions
	{
		[Token(Token = "0x600036A")]
		public static IObserver<T> Synchronize<T>(this IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x600036B")]
		public static IObserver<T> Synchronize<T>(this IObserver<T> observer, object gate)
		{
			return null;
		}
	}
	[Token(Token = "0x200008B")]
	public static class ObservableExtensions
	{
		[Token(Token = "0x600036C")]
		public static IDisposable Subscribe<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600036D")]
		public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext)
		{
			return null;
		}

		[Token(Token = "0x600036E")]
		public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError)
		{
			return null;
		}

		[Token(Token = "0x600036F")]
		public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000370")]
		public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, Action onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000371")]
		public static IDisposable SubscribeWithState<T, TState>(this IObservable<T> source, TState state, Action<T, TState> onNext)
		{
			return null;
		}

		[Token(Token = "0x6000372")]
		public static IDisposable SubscribeWithState<T, TState>(this IObservable<T> source, TState state, Action<T, TState> onNext, Action<Exception, TState> onError)
		{
			return null;
		}

		[Token(Token = "0x6000373")]
		public static IDisposable SubscribeWithState<T, TState>(this IObservable<T> source, TState state, Action<T, TState> onNext, Action<TState> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000374")]
		public static IDisposable SubscribeWithState<T, TState>(this IObservable<T> source, TState state, Action<T, TState> onNext, Action<Exception, TState> onError, Action<TState> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000375")]
		public static IDisposable SubscribeWithState2<T, TState1, TState2>(this IObservable<T> source, TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext)
		{
			return null;
		}

		[Token(Token = "0x6000376")]
		public static IDisposable SubscribeWithState2<T, TState1, TState2>(this IObservable<T> source, TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext, Action<Exception, TState1, TState2> onError)
		{
			return null;
		}

		[Token(Token = "0x6000377")]
		public static IDisposable SubscribeWithState2<T, TState1, TState2>(this IObservable<T> source, TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext, Action<TState1, TState2> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000378")]
		public static IDisposable SubscribeWithState2<T, TState1, TState2>(this IObservable<T> source, TState1 state1, TState2 state2, Action<T, TState1, TState2> onNext, Action<Exception, TState1, TState2> onError, Action<TState1, TState2> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x6000379")]
		public static IDisposable SubscribeWithState3<T, TState1, TState2, TState3>(this IObservable<T> source, TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext)
		{
			return null;
		}

		[Token(Token = "0x600037A")]
		public static IDisposable SubscribeWithState3<T, TState1, TState2, TState3>(this IObservable<T> source, TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext, Action<Exception, TState1, TState2, TState3> onError)
		{
			return null;
		}

		[Token(Token = "0x600037B")]
		public static IDisposable SubscribeWithState3<T, TState1, TState2, TState3>(this IObservable<T> source, TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext, Action<TState1, TState2, TState3> onCompleted)
		{
			return null;
		}

		[Token(Token = "0x600037C")]
		public static IDisposable SubscribeWithState3<T, TState1, TState2, TState3>(this IObservable<T> source, TState1 state1, TState2 state2, TState3 state3, Action<T, TState1, TState2, TState3> onNext, Action<Exception, TState1, TState2, TState3> onError, Action<TState1, TState2, TState3> onCompleted)
		{
			return null;
		}
	}
	[Token(Token = "0x200008C")]
	internal static class Stubs
	{
		[Serializable]
		[Token(Token = "0x200008D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0278", Offset = "0x8B0278")]
		private sealed class <>c
		{
			[Token(Token = "0x400014B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6000380")]
			[Address(RVA = "0x1074AF0", Offset = "0x1074AF0", VA = "0x1074AF0")]
			public <>c()
			{
			}

			[Token(Token = "0x6000381")]
			[Address(RVA = "0x1074AF8", Offset = "0x1074AF8", VA = "0x1074AF8")]
			internal void <.cctor>b__3_0()
			{
			}

			[Token(Token = "0x6000382")]
			[Address(RVA = "0x1074AFC", Offset = "0x1074AFC", VA = "0x1074AFC")]
			internal void <.cctor>b__3_1(Exception ex)
			{
			}
		}

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action Nop;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Action<Exception> Throw;

		[Token(Token = "0x600037D")]
		public static IObservable<TSource> CatchIgnore<TSource>(Exception ex)
		{
			return null;
		}
	}
	[Token(Token = "0x200008E")]
	internal static class Stubs<T>
	{
		[Serializable]
		[Token(Token = "0x200008F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0288", Offset = "0x8B0288")]
		private sealed class <>c
		{
			[Token(Token = "0x400014F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6000385")]
			public <>c()
			{
			}

			[Token(Token = "0x6000386")]
			internal void <.cctor>b__3_0(T t)
			{
			}

			[Token(Token = "0x6000387")]
			internal T <.cctor>b__3_1(T t)
			{
				return (T)null;
			}

			[Token(Token = "0x6000388")]
			internal void <.cctor>b__3_2(Exception ex, T _)
			{
			}
		}

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<T> Ignore;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Func<T, T> Identity;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<Exception, T> Throw;
	}
	[Token(Token = "0x2000090")]
	internal static class Stubs<T1, T2>
	{
		[Serializable]
		[Token(Token = "0x2000091")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0298", Offset = "0x8B0298")]
		private sealed class <>c
		{
			[Token(Token = "0x4000152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x600038B")]
			public <>c()
			{
			}

			[Token(Token = "0x600038C")]
			internal void <.cctor>b__2_0(T1 x, T2 y)
			{
			}

			[Token(Token = "0x600038D")]
			internal void <.cctor>b__2_1(Exception ex, T1 _, T2 __)
			{
			}
		}

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<T1, T2> Ignore;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<Exception, T1, T2> Throw;
	}
	[Token(Token = "0x2000092")]
	internal static class Stubs<T1, T2, T3>
	{
		[Serializable]
		[Token(Token = "0x2000093")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B02A8", Offset = "0x8B02A8")]
		private sealed class <>c
		{
			[Token(Token = "0x4000155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6000390")]
			public <>c()
			{
			}

			[Token(Token = "0x6000391")]
			internal void <.cctor>b__2_0(T1 x, T2 y, T3 z)
			{
			}

			[Token(Token = "0x6000392")]
			internal void <.cctor>b__2_1(Exception ex, T1 _, T2 __, T3 ___)
			{
			}
		}

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<T1, T2, T3> Ignore;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Action<Exception, T1, T2, T3> Throw;
	}
	[Serializable]
	[Token(Token = "0x2000094")]
	public struct Pair<T> : IEquatable<Pair<T>>
	{
		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T previous;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T current;

		[Token(Token = "0x1700004E")]
		public T Previous
		{
			[Token(Token = "0x6000393")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700004F")]
		public T Current
		{
			[Token(Token = "0x6000394")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000395")]
		public Pair(T previous, T current)
		{
		}

		[Token(Token = "0x6000396")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000397")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000398")]
		public bool Equals(Pair<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000399")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000095")]
	public static class Scheduler
	{
		[Token(Token = "0x2000096")]
		private class CurrentThreadScheduler : IScheduler
		{
			[Token(Token = "0x2000097")]
			private static class Trampoline
			{
				[Token(Token = "0x60003AF")]
				[Address(RVA = "0x1FD0854", Offset = "0x1FD0854", VA = "0x1FD0854")]
				public static void Run(SchedulerQueue queue)
				{
				}
			}

			[Token(Token = "0x400015F")]
			[AttributeAttribute(Name = "ThreadStaticAttribute", RVA = "0x8B2660", Offset = "0x8B2660")]
			private static SchedulerQueue s_threadLocalQueue;

			[Token(Token = "0x4000160")]
			[AttributeAttribute(Name = "ThreadStaticAttribute", RVA = "0x8B2670", Offset = "0x8B2670")]
			private static Stopwatch s_clock;

			[Token(Token = "0x17000056")]
			private static TimeSpan Time
			{
				[Token(Token = "0x60003A9")]
				[Address(RVA = "0x106DE4C", Offset = "0x106DE4C", VA = "0x106DE4C")]
				get
				{
					return default(TimeSpan);
				}
			}

			[Token(Token = "0x17000057")]
			[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x8BFC70", Offset = "0x8BFC70")]
			public static bool IsScheduleRequired
			{
				[Token(Token = "0x60003AA")]
				[Address(RVA = "0x106DEFC", Offset = "0x106DEFC", VA = "0x106DEFC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000058")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x60003AD")]
				[Address(RVA = "0x106E270", Offset = "0x106E270", VA = "0x106E270", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x60003A7")]
			[Address(RVA = "0x106DDB0", Offset = "0x106DDB0", VA = "0x106DDB0")]
			private static SchedulerQueue GetQueue()
			{
				return null;
			}

			[Token(Token = "0x60003A8")]
			[Address(RVA = "0x106DDFC", Offset = "0x106DDFC", VA = "0x106DDFC")]
			private static void SetQueue(SchedulerQueue newQueue)
			{
			}

			[Token(Token = "0x60003AB")]
			[Address(RVA = "0x106DF50", Offset = "0x106DF50", VA = "0x106DF50", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x60003AC")]
			[Address(RVA = "0x106DFBC", Offset = "0x106DFBC", VA = "0x106DFBC", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003AE")]
			[Address(RVA = "0x106E2CC", Offset = "0x106E2CC", VA = "0x106E2CC")]
			public CurrentThreadScheduler()
			{
			}
		}

		[Token(Token = "0x2000098")]
		private class ImmediateScheduler : IScheduler
		{
			[Token(Token = "0x17000059")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x60003B1")]
				[Address(RVA = "0x106F888", Offset = "0x106F888", VA = "0x106F888", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x60003B0")]
			[Address(RVA = "0x106F880", Offset = "0x106F880", VA = "0x106F880")]
			public ImmediateScheduler()
			{
			}

			[Token(Token = "0x60003B2")]
			[Address(RVA = "0x106F8E4", Offset = "0x106F8E4", VA = "0x106F8E4", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x106F960", Offset = "0x106F960", VA = "0x106F960", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}
		}

		[Token(Token = "0x2000099")]
		public static class DefaultSchedulers
		{
			[Token(Token = "0x4000161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static IScheduler constantTime;

			[Token(Token = "0x4000162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static IScheduler tailRecursion;

			[Token(Token = "0x4000163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static IScheduler iteration;

			[Token(Token = "0x4000164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private static IScheduler timeBasedOperations;

			[Token(Token = "0x4000165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private static IScheduler asyncConversions;

			[Token(Token = "0x1700005A")]
			public static IScheduler ConstantTimeOperations
			{
				[Token(Token = "0x60003B4")]
				[Address(RVA = "0x106E2D4", Offset = "0x106E2D4", VA = "0x106E2D4")]
				get
				{
					return null;
				}
				[Token(Token = "0x60003B5")]
				[Address(RVA = "0x106E368", Offset = "0x106E368", VA = "0x106E368")]
				set
				{
				}
			}

			[Token(Token = "0x1700005B")]
			public static IScheduler TailRecursion
			{
				[Token(Token = "0x60003B6")]
				[Address(RVA = "0x106E3B8", Offset = "0x106E3B8", VA = "0x106E3B8")]
				get
				{
					return null;
				}
				[Token(Token = "0x60003B7")]
				[Address(RVA = "0x106E450", Offset = "0x106E450", VA = "0x106E450")]
				set
				{
				}
			}

			[Token(Token = "0x1700005C")]
			public static IScheduler Iteration
			{
				[Token(Token = "0x60003B8")]
				[Address(RVA = "0x106E4A0", Offset = "0x106E4A0", VA = "0x106E4A0")]
				get
				{
					return null;
				}
				[Token(Token = "0x60003B9")]
				[Address(RVA = "0x106E538", Offset = "0x106E538", VA = "0x106E538")]
				set
				{
				}
			}

			[Token(Token = "0x1700005D")]
			public static IScheduler TimeBasedOperations
			{
				[Token(Token = "0x60003BA")]
				[Address(RVA = "0x106E588", Offset = "0x106E588", VA = "0x106E588")]
				get
				{
					return null;
				}
				[Token(Token = "0x60003BB")]
				[Address(RVA = "0x106E618", Offset = "0x106E618", VA = "0x106E618")]
				set
				{
				}
			}

			[Token(Token = "0x1700005E")]
			public static IScheduler AsyncConversions
			{
				[Token(Token = "0x60003BC")]
				[Address(RVA = "0x106E668", Offset = "0x106E668", VA = "0x106E668")]
				get
				{
					return null;
				}
				[Token(Token = "0x60003BD")]
				[Address(RVA = "0x106E700", Offset = "0x106E700", VA = "0x106E700")]
				set
				{
				}
			}

			[Token(Token = "0x60003BE")]
			[Address(RVA = "0x106E750", Offset = "0x106E750", VA = "0x106E750")]
			public static void SetDotNetCompatible()
			{
			}
		}

		[Token(Token = "0x200009A")]
		private class ThreadPoolScheduler : IScheduler, ISchedulerPeriodic
		{
			[Token(Token = "0x200009B")]
			private sealed class Timer : IDisposable
			{
				[Token(Token = "0x4000166")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private static readonly HashSet<System.Threading.Timer> s_timers;

				[Token(Token = "0x4000167")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly SingleAssignmentDisposable _disposable;

				[Token(Token = "0x4000168")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Action _action;

				[Token(Token = "0x4000169")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private System.Threading.Timer _timer;

				[Token(Token = "0x400016A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private bool _hasAdded;

				[Token(Token = "0x400016B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
				private bool _hasRemoved;

				[Token(Token = "0x60003C6")]
				[Address(RVA = "0x1FD25C8", Offset = "0x1FD25C8", VA = "0x1FD25C8")]
				public Timer(TimeSpan dueTime, Action action)
				{
				}

				[Token(Token = "0x60003C7")]
				[Address(RVA = "0x1FD28D8", Offset = "0x1FD28D8", VA = "0x1FD28D8")]
				private void Tick(object state)
				{
				}

				[Token(Token = "0x60003C8")]
				[Address(RVA = "0x1FD2968", Offset = "0x1FD2968", VA = "0x1FD2968")]
				private void Unroot()
				{
				}

				[Token(Token = "0x60003C9")]
				[Address(RVA = "0x1FD2B44", Offset = "0x1FD2B44", VA = "0x1FD2B44", Slot = "4")]
				public void Dispose()
				{
				}
			}

			[Token(Token = "0x200009C")]
			private sealed class PeriodicTimer : IDisposable
			{
				[Token(Token = "0x400016C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private static readonly HashSet<System.Threading.Timer> s_timers;

				[Token(Token = "0x400016D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private Action _action;

				[Token(Token = "0x400016E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private System.Threading.Timer _timer;

				[Token(Token = "0x400016F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private readonly AsyncLock _gate;

				[Token(Token = "0x60003CB")]
				[Address(RVA = "0x1FD20AC", Offset = "0x1FD20AC", VA = "0x1FD20AC")]
				public PeriodicTimer(TimeSpan period, Action action)
				{
				}

				[Token(Token = "0x60003CC")]
				[Address(RVA = "0x1FD22CC", Offset = "0x1FD22CC", VA = "0x1FD22CC")]
				private void Tick(object state)
				{
				}

				[Token(Token = "0x60003CD")]
				[Address(RVA = "0x1FD2360", Offset = "0x1FD2360", VA = "0x1FD2360", Slot = "4")]
				public void Dispose()
				{
				}

				[Token(Token = "0x60003CF")]
				[Address(RVA = "0x1FD25AC", Offset = "0x1FD25AC", VA = "0x1FD25AC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B6B4C", Offset = "0x8B6B4C")]
				private void <Tick>b__5_0()
				{
				}
			}

			[Token(Token = "0x200009D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B02C8", Offset = "0x8B02C8")]
			private sealed class <>c__DisplayClass3_0
			{
				[Token(Token = "0x4000170")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public BooleanDisposable d;

				[Token(Token = "0x4000171")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public Action action;

				[Token(Token = "0x60003D0")]
				[Address(RVA = "0x1FD206C", Offset = "0x1FD206C", VA = "0x1FD206C")]
				public <>c__DisplayClass3_0()
				{
				}

				[Token(Token = "0x60003D1")]
				[Address(RVA = "0x1FD2074", Offset = "0x1FD2074", VA = "0x1FD2074")]
				internal void <Schedule>b__0(object _)
				{
				}
			}

			[Token(Token = "0x200009E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B02D8", Offset = "0x8B02D8")]
			private sealed class <>c__DisplayClass7_0<T>
			{
				[Token(Token = "0x4000172")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ICancelable cancel;

				[Token(Token = "0x4000173")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Action<T> action;

				[Token(Token = "0x60003D2")]
				public <>c__DisplayClass7_0()
				{
				}

				[Token(Token = "0x60003D3")]
				internal void <ScheduleQueueing>b__0(object callBackState)
				{
				}
			}

			[Token(Token = "0x1700005F")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x60003C0")]
				[Address(RVA = "0x1070074", Offset = "0x1070074", VA = "0x1070074", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x60003BF")]
			[Address(RVA = "0x107006C", Offset = "0x107006C", VA = "0x107006C")]
			public ThreadPoolScheduler()
			{
			}

			[Token(Token = "0x60003C1")]
			[Address(RVA = "0x10700D0", Offset = "0x10700D0", VA = "0x10700D0", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x60003C2")]
			[Address(RVA = "0x10701B4", Offset = "0x10701B4", VA = "0x10701B4")]
			public IDisposable Schedule(DateTimeOffset dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003C3")]
			[Address(RVA = "0x1070254", Offset = "0x1070254", VA = "0x1070254", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003C4")]
			[Address(RVA = "0x10702C4", Offset = "0x10702C4", VA = "0x10702C4", Slot = "7")]
			public IDisposable SchedulePeriodic(TimeSpan period, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003C5")]
			public void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action)
			{
			}
		}

		[Token(Token = "0x200009F")]
		private class MainThreadScheduler : IScheduler, ISchedulerPeriodic, ISchedulerQueueing
		{
			[Token(Token = "0x20000A0")]
			private static class QueuedAction<T>
			{
				[Token(Token = "0x4000175")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly Action<object> Instance;

				[Token(Token = "0x60003DF")]
				public static void Invoke(object state)
				{
				}
			}

			[Token(Token = "0x20000A1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B02E8", Offset = "0x8B02E8")]
			private sealed class <DelayAction>d__2 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4000176")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x4000177")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x4000178")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan dueTime;

				[Token(Token = "0x4000179")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x400017A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x17000061")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x60003E4")]
					[Address(RVA = "0x1FD1D00", Offset = "0x1FD1D00", VA = "0x1FD1D00", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000062")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x60003E6")]
					[Address(RVA = "0x1FD1D48", Offset = "0x1FD1D48", VA = "0x1FD1D48", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x60003E1")]
				[Address(RVA = "0x1FD1AFC", Offset = "0x1FD1AFC", VA = "0x1FD1AFC")]
				[DebuggerHidden]
				public <DelayAction>d__2(int <>1__state)
				{
				}

				[Token(Token = "0x60003E2")]
				[Address(RVA = "0x1FD1B28", Offset = "0x1FD1B28", VA = "0x1FD1B28", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x60003E3")]
				[Address(RVA = "0x1FD1B2C", Offset = "0x1FD1B2C", VA = "0x1FD1B2C", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x60003E5")]
				[Address(RVA = "0x1FD1D08", Offset = "0x1FD1D08", VA = "0x1FD1D08", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000A2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B02F8", Offset = "0x8B02F8")]
			private sealed class <PeriodicAction>d__3 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x400017B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x400017C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x400017D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan period;

				[Token(Token = "0x400017E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x400017F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x4000180")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private WaitForSeconds <yieldInstruction>5__2;

				[Token(Token = "0x17000063")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x60003EA")]
					[Address(RVA = "0x1FD201C", Offset = "0x1FD201C", VA = "0x1FD201C", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000064")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x60003EC")]
					[Address(RVA = "0x1FD2064", Offset = "0x1FD2064", VA = "0x1FD2064", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x60003E7")]
				[Address(RVA = "0x1FD1D50", Offset = "0x1FD1D50", VA = "0x1FD1D50")]
				[DebuggerHidden]
				public <PeriodicAction>d__3(int <>1__state)
				{
				}

				[Token(Token = "0x60003E8")]
				[Address(RVA = "0x1FD1D7C", Offset = "0x1FD1D7C", VA = "0x1FD1D7C", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x60003E9")]
				[Address(RVA = "0x1FD1D80", Offset = "0x1FD1D80", VA = "0x1FD1D80", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x60003EB")]
				[Address(RVA = "0x1FD2024", Offset = "0x1FD2024", VA = "0x1FD2024", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x4000174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Action<object> scheduleAction;

			[Token(Token = "0x17000060")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x60003D7")]
				[Address(RVA = "0x106FBFC", Offset = "0x106FBFC", VA = "0x106FBFC", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x60003D4")]
			[Address(RVA = "0x106FA30", Offset = "0x106FA30", VA = "0x106FA30")]
			public MainThreadScheduler()
			{
			}

			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x106FAFC", Offset = "0x106FAFC", VA = "0x106FAFC")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6B5C", Offset = "0x8B6B5C")]
			private IEnumerator DelayAction(TimeSpan dueTime, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x60003D6")]
			[Address(RVA = "0x106FB7C", Offset = "0x106FB7C", VA = "0x106FB7C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6BBC", Offset = "0x8B6BBC")]
			private IEnumerator PeriodicAction(TimeSpan period, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x60003D8")]
			[Address(RVA = "0x106FC58", Offset = "0x106FC58", VA = "0x106FC58")]
			private void Schedule(object state)
			{
			}

			[Token(Token = "0x60003D9")]
			[Address(RVA = "0x106FD18", Offset = "0x106FD18", VA = "0x106FD18", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x60003DA")]
			[Address(RVA = "0x106FDEC", Offset = "0x106FDEC", VA = "0x106FDEC")]
			public IDisposable Schedule(DateTimeOffset dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003DB")]
			[Address(RVA = "0x106FE8C", Offset = "0x106FE8C", VA = "0x106FE8C", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003DC")]
			[Address(RVA = "0x106FF7C", Offset = "0x106FF7C", VA = "0x106FF7C", Slot = "7")]
			public IDisposable SchedulePeriodic(TimeSpan period, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003DD")]
			private void ScheduleQueueing<T>(object state)
			{
			}

			[Token(Token = "0x60003DE")]
			public void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action)
			{
			}
		}

		[Token(Token = "0x20000A3")]
		private class IgnoreTimeScaleMainThreadScheduler : IScheduler, ISchedulerPeriodic, ISchedulerQueueing
		{
			[Token(Token = "0x20000A4")]
			private static class QueuedAction<T>
			{
				[Token(Token = "0x4000182")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly Action<object> Instance;

				[Token(Token = "0x60003F7")]
				public static void Invoke(object state)
				{
				}
			}

			[Token(Token = "0x20000A5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0308", Offset = "0x8B0308")]
			private sealed class <DelayAction>d__2 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4000183")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x4000184")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x4000185")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan dueTime;

				[Token(Token = "0x4000186")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x4000187")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x4000188")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <elapsed>5__2;

				[Token(Token = "0x4000189")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x17000066")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x60003FC")]
					[Address(RVA = "0x1FD17A4", Offset = "0x1FD17A4", VA = "0x1FD17A4", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000067")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x60003FE")]
					[Address(RVA = "0x1FD17EC", Offset = "0x1FD17EC", VA = "0x1FD17EC", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x60003F9")]
				[Address(RVA = "0x1FD151C", Offset = "0x1FD151C", VA = "0x1FD151C")]
				[DebuggerHidden]
				public <DelayAction>d__2(int <>1__state)
				{
				}

				[Token(Token = "0x60003FA")]
				[Address(RVA = "0x1FD1548", Offset = "0x1FD1548", VA = "0x1FD1548", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x60003FB")]
				[Address(RVA = "0x1FD154C", Offset = "0x1FD154C", VA = "0x1FD154C", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x60003FD")]
				[Address(RVA = "0x1FD17AC", Offset = "0x1FD17AC", VA = "0x1FD17AC", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000A6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0318", Offset = "0x8B0318")]
			private sealed class <PeriodicAction>d__3 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x400018A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x400018B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x400018C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan period;

				[Token(Token = "0x400018D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x400018E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x400018F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <elapsed>5__2;

				[Token(Token = "0x4000190")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x17000068")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000402")]
					[Address(RVA = "0x1FD1AAC", Offset = "0x1FD1AAC", VA = "0x1FD1AAC", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000069")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000404")]
					[Address(RVA = "0x1FD1AF4", Offset = "0x1FD1AF4", VA = "0x1FD1AF4", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x60003FF")]
				[Address(RVA = "0x1FD17F4", Offset = "0x1FD17F4", VA = "0x1FD17F4")]
				[DebuggerHidden]
				public <PeriodicAction>d__3(int <>1__state)
				{
				}

				[Token(Token = "0x6000400")]
				[Address(RVA = "0x1FD1820", Offset = "0x1FD1820", VA = "0x1FD1820", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000401")]
				[Address(RVA = "0x1FD1824", Offset = "0x1FD1824", VA = "0x1FD1824", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000403")]
				[Address(RVA = "0x1FD1AB4", Offset = "0x1FD1AB4", VA = "0x1FD1AB4", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x4000181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Action<object> scheduleAction;

			[Token(Token = "0x17000065")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x60003F0")]
				[Address(RVA = "0x106F410", Offset = "0x106F410", VA = "0x106F410", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x60003ED")]
			[Address(RVA = "0x106F244", Offset = "0x106F244", VA = "0x106F244")]
			public IgnoreTimeScaleMainThreadScheduler()
			{
			}

			[Token(Token = "0x60003EE")]
			[Address(RVA = "0x106F310", Offset = "0x106F310", VA = "0x106F310")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6CBC", Offset = "0x8B6CBC")]
			private IEnumerator DelayAction(TimeSpan dueTime, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x60003EF")]
			[Address(RVA = "0x106F390", Offset = "0x106F390", VA = "0x106F390")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6D1C", Offset = "0x8B6D1C")]
			private IEnumerator PeriodicAction(TimeSpan period, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x60003F1")]
			[Address(RVA = "0x106F46C", Offset = "0x106F46C", VA = "0x106F46C")]
			private void Schedule(object state)
			{
			}

			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x106F52C", Offset = "0x106F52C", VA = "0x106F52C", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x60003F3")]
			[Address(RVA = "0x106F600", Offset = "0x106F600", VA = "0x106F600")]
			public IDisposable Schedule(DateTimeOffset dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003F4")]
			[Address(RVA = "0x106F6A0", Offset = "0x106F6A0", VA = "0x106F6A0", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003F5")]
			[Address(RVA = "0x106F790", Offset = "0x106F790", VA = "0x106F790", Slot = "7")]
			public IDisposable SchedulePeriodic(TimeSpan period, Action action)
			{
				return null;
			}

			[Token(Token = "0x60003F6")]
			public void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action)
			{
			}
		}

		[Token(Token = "0x20000A7")]
		private class FixedUpdateMainThreadScheduler : IScheduler, ISchedulerPeriodic, ISchedulerQueueing
		{
			[Token(Token = "0x20000A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0328", Offset = "0x8B0328")]
			private sealed class <ImmediateAction>d__1<T> : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4000191")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int <>1__state;

				[Token(Token = "0x4000192")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private object <>2__current;

				[Token(Token = "0x4000193")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ICancelable cancellation;

				[Token(Token = "0x4000194")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Action<T> action;

				[Token(Token = "0x4000195")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public T state;

				[Token(Token = "0x1700006B")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000412")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700006C")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000414")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x600040F")]
				[DebuggerHidden]
				public <ImmediateAction>d__1(int <>1__state)
				{
				}

				[Token(Token = "0x6000410")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000411")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000413")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000A9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0338", Offset = "0x8B0338")]
			private sealed class <DelayAction>d__2 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4000196")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x4000197")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x4000198")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan dueTime;

				[Token(Token = "0x4000199")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x400019A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x400019B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <startTime>5__2;

				[Token(Token = "0x400019C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x1700006D")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000418")]
					[Address(RVA = "0x1FD11C0", Offset = "0x1FD11C0", VA = "0x1FD11C0", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700006E")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x600041A")]
					[Address(RVA = "0x1FD1208", Offset = "0x1FD1208", VA = "0x1FD1208", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000415")]
				[Address(RVA = "0x1FD0F40", Offset = "0x1FD0F40", VA = "0x1FD0F40")]
				[DebuggerHidden]
				public <DelayAction>d__2(int <>1__state)
				{
				}

				[Token(Token = "0x6000416")]
				[Address(RVA = "0x1FD0F6C", Offset = "0x1FD0F6C", VA = "0x1FD0F6C", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000417")]
				[Address(RVA = "0x1FD0F70", Offset = "0x1FD0F70", VA = "0x1FD0F70", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000419")]
				[Address(RVA = "0x1FD11C8", Offset = "0x1FD11C8", VA = "0x1FD11C8", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000AA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0348", Offset = "0x8B0348")]
			private sealed class <PeriodicAction>d__3 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x400019D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x400019E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x400019F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan period;

				[Token(Token = "0x40001A0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x40001A1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x40001A2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <startTime>5__2;

				[Token(Token = "0x40001A3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x1700006F")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600041E")]
					[Address(RVA = "0x1FD14CC", Offset = "0x1FD14CC", VA = "0x1FD14CC", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000070")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000420")]
					[Address(RVA = "0x1FD1514", Offset = "0x1FD1514", VA = "0x1FD1514", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x600041B")]
				[Address(RVA = "0x1FD1210", Offset = "0x1FD1210", VA = "0x1FD1210")]
				[DebuggerHidden]
				public <PeriodicAction>d__3(int <>1__state)
				{
				}

				[Token(Token = "0x600041C")]
				[Address(RVA = "0x1FD123C", Offset = "0x1FD123C", VA = "0x1FD123C", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x600041D")]
				[Address(RVA = "0x1FD1240", Offset = "0x1FD1240", VA = "0x1FD1240", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600041F")]
				[Address(RVA = "0x1FD14D4", Offset = "0x1FD14D4", VA = "0x1FD14D4", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x1700006A")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x6000409")]
				[Address(RVA = "0x106EEFC", Offset = "0x106EEFC", VA = "0x106EEFC", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x6000405")]
			[Address(RVA = "0x106ED90", Offset = "0x106ED90", VA = "0x106ED90")]
			public FixedUpdateMainThreadScheduler()
			{
			}

			[Token(Token = "0x6000406")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6E1C", Offset = "0x8B6E1C")]
			private IEnumerator ImmediateAction<T>(T state, Action<T> action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x6000407")]
			[Address(RVA = "0x106EDFC", Offset = "0x106EDFC", VA = "0x106EDFC")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6E7C", Offset = "0x8B6E7C")]
			private IEnumerator DelayAction(TimeSpan dueTime, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x6000408")]
			[Address(RVA = "0x106EE7C", Offset = "0x106EE7C", VA = "0x106EE7C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B6EDC", Offset = "0x8B6EDC")]
			private IEnumerator PeriodicAction(TimeSpan period, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x600040A")]
			[Address(RVA = "0x106EF58", Offset = "0x106EF58", VA = "0x106EF58", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x600040B")]
			[Address(RVA = "0x106F0B4", Offset = "0x106F0B4", VA = "0x106F0B4")]
			public IDisposable Schedule(DateTimeOffset dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x600040C")]
			[Address(RVA = "0x106EFC4", Offset = "0x106EFC4", VA = "0x106EFC4", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x600040D")]
			[Address(RVA = "0x106F154", Offset = "0x106F154", VA = "0x106F154", Slot = "7")]
			public IDisposable SchedulePeriodic(TimeSpan period, Action action)
			{
				return null;
			}

			[Token(Token = "0x600040E")]
			public void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action)
			{
			}
		}

		[Token(Token = "0x20000AB")]
		private class EndOfFrameMainThreadScheduler : IScheduler, ISchedulerPeriodic, ISchedulerQueueing
		{
			[Token(Token = "0x20000AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0358", Offset = "0x8B0358")]
			private sealed class <ImmediateAction>d__1<T> : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40001A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int <>1__state;

				[Token(Token = "0x40001A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private object <>2__current;

				[Token(Token = "0x40001A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ICancelable cancellation;

				[Token(Token = "0x40001A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Action<T> action;

				[Token(Token = "0x40001A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public T state;

				[Token(Token = "0x17000072")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600042E")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000073")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000430")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x600042B")]
				[DebuggerHidden]
				public <ImmediateAction>d__1(int <>1__state)
				{
				}

				[Token(Token = "0x600042C")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x600042D")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600042F")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000AD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0368", Offset = "0x8B0368")]
			private sealed class <DelayAction>d__2 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40001A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x40001AA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x40001AB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan dueTime;

				[Token(Token = "0x40001AC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x40001AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x40001AE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <elapsed>5__2;

				[Token(Token = "0x40001AF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x17000074")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000434")]
					[Address(RVA = "0x1FD0BE8", Offset = "0x1FD0BE8", VA = "0x1FD0BE8", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000075")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000436")]
					[Address(RVA = "0x1FD0C30", Offset = "0x1FD0C30", VA = "0x1FD0C30", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000431")]
				[Address(RVA = "0x1FD0960", Offset = "0x1FD0960", VA = "0x1FD0960")]
				[DebuggerHidden]
				public <DelayAction>d__2(int <>1__state)
				{
				}

				[Token(Token = "0x6000432")]
				[Address(RVA = "0x1FD098C", Offset = "0x1FD098C", VA = "0x1FD098C", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000433")]
				[Address(RVA = "0x1FD0990", Offset = "0x1FD0990", VA = "0x1FD0990", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000435")]
				[Address(RVA = "0x1FD0BF0", Offset = "0x1FD0BF0", VA = "0x1FD0BF0", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x20000AE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0378", Offset = "0x8B0378")]
			private sealed class <PeriodicAction>d__3 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40001B0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x40001B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x40001B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public TimeSpan period;

				[Token(Token = "0x40001B3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ICancelable cancellation;

				[Token(Token = "0x40001B4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action action;

				[Token(Token = "0x40001B5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				private float <elapsed>5__2;

				[Token(Token = "0x40001B6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				private float <dt>5__3;

				[Token(Token = "0x17000076")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600043A")]
					[Address(RVA = "0x1FD0EF0", Offset = "0x1FD0EF0", VA = "0x1FD0EF0", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000077")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x600043C")]
					[Address(RVA = "0x1FD0F38", Offset = "0x1FD0F38", VA = "0x1FD0F38", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000437")]
				[Address(RVA = "0x1FD0C38", Offset = "0x1FD0C38", VA = "0x1FD0C38")]
				[DebuggerHidden]
				public <PeriodicAction>d__3(int <>1__state)
				{
				}

				[Token(Token = "0x6000438")]
				[Address(RVA = "0x1FD0C64", Offset = "0x1FD0C64", VA = "0x1FD0C64", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000439")]
				[Address(RVA = "0x1FD0C68", Offset = "0x1FD0C68", VA = "0x1FD0C68", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600043B")]
				[Address(RVA = "0x1FD0EF8", Offset = "0x1FD0EF8", VA = "0x1FD0EF8", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x17000071")]
			public DateTimeOffset Now
			{
				[Token(Token = "0x6000425")]
				[Address(RVA = "0x106EA48", Offset = "0x106EA48", VA = "0x106EA48", Slot = "4")]
				get
				{
					return default(DateTimeOffset);
				}
			}

			[Token(Token = "0x6000421")]
			[Address(RVA = "0x106E8DC", Offset = "0x106E8DC", VA = "0x106E8DC")]
			public EndOfFrameMainThreadScheduler()
			{
			}

			[Token(Token = "0x6000422")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B702C", Offset = "0x8B702C")]
			private IEnumerator ImmediateAction<T>(T state, Action<T> action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x6000423")]
			[Address(RVA = "0x106E948", Offset = "0x106E948", VA = "0x106E948")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B708C", Offset = "0x8B708C")]
			private IEnumerator DelayAction(TimeSpan dueTime, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x6000424")]
			[Address(RVA = "0x106E9C8", Offset = "0x106E9C8", VA = "0x106E9C8")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B70EC", Offset = "0x8B70EC")]
			private IEnumerator PeriodicAction(TimeSpan period, Action action, ICancelable cancellation)
			{
				return null;
			}

			[Token(Token = "0x6000426")]
			[Address(RVA = "0x106EAA4", Offset = "0x106EAA4", VA = "0x106EAA4", Slot = "5")]
			public IDisposable Schedule(Action action)
			{
				return null;
			}

			[Token(Token = "0x6000427")]
			[Address(RVA = "0x106EC00", Offset = "0x106EC00", VA = "0x106EC00")]
			public IDisposable Schedule(DateTimeOffset dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x6000428")]
			[Address(RVA = "0x106EB10", Offset = "0x106EB10", VA = "0x106EB10", Slot = "6")]
			public IDisposable Schedule(TimeSpan dueTime, Action action)
			{
				return null;
			}

			[Token(Token = "0x6000429")]
			[Address(RVA = "0x106ECA0", Offset = "0x106ECA0", VA = "0x106ECA0", Slot = "7")]
			public IDisposable SchedulePeriodic(TimeSpan period, Action action)
			{
				return null;
			}

			[Token(Token = "0x600042A")]
			public void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action)
			{
			}
		}

		[Token(Token = "0x20000AF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0388", Offset = "0x8B0388")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x40001B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<Action> action;

			[Token(Token = "0x40001B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IScheduler scheduler;

			[Token(Token = "0x40001B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public object gate;

			[Token(Token = "0x40001BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CompositeDisposable group;

			[Token(Token = "0x40001BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action recursiveAction;

			[Token(Token = "0x40001BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action <>9__1;

			[Token(Token = "0x600043D")]
			[Address(RVA = "0x106D1A4", Offset = "0x106D1A4", VA = "0x106D1A4")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x600043E")]
			[Address(RVA = "0x106D1AC", Offset = "0x106D1AC", VA = "0x106D1AC")]
			internal void <Schedule>b__0()
			{
			}

			[Token(Token = "0x600043F")]
			[Address(RVA = "0x106D260", Offset = "0x106D260", VA = "0x106D260")]
			internal void <Schedule>b__1()
			{
			}
		}

		[Token(Token = "0x20000B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0398", Offset = "0x8B0398")]
		private sealed class <>c__DisplayClass11_1
		{
			[Token(Token = "0x40001BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isAdded;

			[Token(Token = "0x40001BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IDisposable d;

			[Token(Token = "0x40001BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool isDone;

			[Token(Token = "0x40001C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public <>c__DisplayClass11_0 CS$<>8__locals1;

			[Token(Token = "0x6000440")]
			[Address(RVA = "0x106D46C", Offset = "0x106D46C", VA = "0x106D46C")]
			public <>c__DisplayClass11_1()
			{
			}

			[Token(Token = "0x6000441")]
			[Address(RVA = "0x106D474", Offset = "0x106D474", VA = "0x106D474")]
			internal void <Schedule>b__2()
			{
			}
		}

		[Token(Token = "0x20000B1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03A8", Offset = "0x8B03A8")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40001C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<Action<TimeSpan>> action;

			[Token(Token = "0x40001C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IScheduler scheduler;

			[Token(Token = "0x40001C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public object gate;

			[Token(Token = "0x40001C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CompositeDisposable group;

			[Token(Token = "0x40001C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action recursiveAction;

			[Token(Token = "0x40001C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<TimeSpan> <>9__1;

			[Token(Token = "0x6000442")]
			[Address(RVA = "0x106D5A4", Offset = "0x106D5A4", VA = "0x106D5A4")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6000443")]
			[Address(RVA = "0x106D5AC", Offset = "0x106D5AC", VA = "0x106D5AC")]
			internal void <Schedule>b__0()
			{
			}

			[Token(Token = "0x6000444")]
			[Address(RVA = "0x106D674", Offset = "0x106D674", VA = "0x106D674")]
			internal void <Schedule>b__1(TimeSpan dt)
			{
			}
		}

		[Token(Token = "0x20000B2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03B8", Offset = "0x8B03B8")]
		private sealed class <>c__DisplayClass12_1
		{
			[Token(Token = "0x40001C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isAdded;

			[Token(Token = "0x40001C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IDisposable d;

			[Token(Token = "0x40001C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool isDone;

			[Token(Token = "0x40001CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public <>c__DisplayClass12_0 CS$<>8__locals1;

			[Token(Token = "0x6000445")]
			[Address(RVA = "0x106D890", Offset = "0x106D890", VA = "0x106D890")]
			public <>c__DisplayClass12_1()
			{
			}

			[Token(Token = "0x6000446")]
			[Address(RVA = "0x106D898", Offset = "0x106D898", VA = "0x106D898")]
			internal void <Schedule>b__2()
			{
			}
		}

		[Token(Token = "0x20000B3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03C8", Offset = "0x8B03C8")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40001CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<Action<DateTimeOffset>> action;

			[Token(Token = "0x40001CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IScheduler scheduler;

			[Token(Token = "0x40001CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public object gate;

			[Token(Token = "0x40001CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CompositeDisposable group;

			[Token(Token = "0x40001CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action recursiveAction;

			[Token(Token = "0x40001D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<DateTimeOffset> <>9__1;

			[Token(Token = "0x6000447")]
			[Address(RVA = "0x106D9C8", Offset = "0x106D9C8", VA = "0x106D9C8")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6000448")]
			[Address(RVA = "0x106D9D0", Offset = "0x106D9D0", VA = "0x106D9D0")]
			internal void <Schedule>b__0()
			{
			}

			[Token(Token = "0x6000449")]
			[Address(RVA = "0x106DA98", Offset = "0x106DA98", VA = "0x106DA98")]
			internal void <Schedule>b__1(DateTimeOffset dt)
			{
			}
		}

		[Token(Token = "0x20000B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03D8", Offset = "0x8B03D8")]
		private sealed class <>c__DisplayClass13_1
		{
			[Token(Token = "0x40001D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isAdded;

			[Token(Token = "0x40001D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IDisposable d;

			[Token(Token = "0x40001D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool isDone;

			[Token(Token = "0x40001D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public <>c__DisplayClass13_0 CS$<>8__locals1;

			[Token(Token = "0x600044A")]
			[Address(RVA = "0x106DC78", Offset = "0x106DC78", VA = "0x106DC78")]
			public <>c__DisplayClass13_1()
			{
			}

			[Token(Token = "0x600044B")]
			[Address(RVA = "0x106DC80", Offset = "0x106DC80", VA = "0x106DC80")]
			internal void <Schedule>b__2()
			{
			}
		}

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IScheduler CurrentThread;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly IScheduler Immediate;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly IScheduler ThreadPool;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IScheduler mainThread;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IScheduler mainThreadIgnoreTimeScale;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IScheduler mainThreadFixedUpdate;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IScheduler mainThreadEndOfFrame;

		[Token(Token = "0x17000050")]
		public static bool IsCurrentThreadSchedulerScheduleRequired
		{
			[Token(Token = "0x600039A")]
			[Address(RVA = "0x12CAC48", Offset = "0x12CAC48", VA = "0x12CAC48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000051")]
		public static DateTimeOffset Now
		{
			[Token(Token = "0x600039B")]
			[Address(RVA = "0x12CAC50", Offset = "0x12CAC50", VA = "0x12CAC50")]
			get
			{
				return default(DateTimeOffset);
			}
		}

		[Token(Token = "0x17000052")]
		public static IScheduler MainThread
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x12CB3A4", Offset = "0x12CB3A4", VA = "0x12CB3A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public static IScheduler MainThreadIgnoreTimeScale
		{
			[Token(Token = "0x60003A3")]
			[Address(RVA = "0x12CB45C", Offset = "0x12CB45C", VA = "0x12CB45C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		public static IScheduler MainThreadFixedUpdate
		{
			[Token(Token = "0x60003A4")]
			[Address(RVA = "0x12CB514", Offset = "0x12CB514", VA = "0x12CB514")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		public static IScheduler MainThreadEndOfFrame
		{
			[Token(Token = "0x60003A5")]
			[Address(RVA = "0x12CB5CC", Offset = "0x12CB5CC", VA = "0x12CB5CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x12CACAC", Offset = "0x12CACAC", VA = "0x12CACAC")]
		public static TimeSpan Normalize(TimeSpan timeSpan)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x12CAD4C", Offset = "0x12CAD4C", VA = "0x12CAD4C")]
		public static IDisposable Schedule(this IScheduler scheduler, DateTimeOffset dueTime, Action action)
		{
			return null;
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x12C7480", Offset = "0x12C7480", VA = "0x12C7480")]
		public static IDisposable Schedule(this IScheduler scheduler, Action<Action> action)
		{
			return null;
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x12CAED4", Offset = "0x12CAED4", VA = "0x12CAED4")]
		public static IDisposable Schedule(this IScheduler scheduler, TimeSpan dueTime, Action<Action<TimeSpan>> action)
		{
			return null;
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x12CB09C", Offset = "0x12CB09C", VA = "0x12CB09C")]
		public static IDisposable Schedule(this IScheduler scheduler, DateTimeOffset dueTime, Action<Action<DateTimeOffset>> action)
		{
			return null;
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x12CB224", Offset = "0x12CB224", VA = "0x12CB224")]
		public static void SetDefaultForUnity()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public interface IScheduler
	{
		[Token(Token = "0x17000078")]
		DateTimeOffset Now
		{
			[Token(Token = "0x600044C")]
			get;
		}

		[Token(Token = "0x600044D")]
		IDisposable Schedule(Action action);

		[Token(Token = "0x600044E")]
		IDisposable Schedule(TimeSpan dueTime, Action action);
	}
	[Token(Token = "0x20000B6")]
	public interface ISchedulerPeriodic
	{
		[Token(Token = "0x600044F")]
		IDisposable SchedulePeriodic(TimeSpan period, Action action);
	}
	[Token(Token = "0x20000B7")]
	public interface ISchedulerLongRunning
	{
		[Token(Token = "0x6000450")]
		IDisposable ScheduleLongRunning(Action<ICancelable> action);
	}
	[Token(Token = "0x20000B8")]
	public interface ISchedulerQueueing
	{
		[Token(Token = "0x6000451")]
		void ScheduleQueueing<T>(ICancelable cancel, T state, Action<T> action);
	}
	[Token(Token = "0x20000B9")]
	public sealed class AsyncSubject<T> : ISubject<T>, ISubject<T, T>, IObserver<T>, IObservable<T>, IOptimizedObservable<T>, IDisposable, INotifyCompletion
	{
		[Token(Token = "0x20000BA")]
		private class Subscription : IDisposable
		{
			[Token(Token = "0x40001DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40001DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private AsyncSubject<T> parent;

			[Token(Token = "0x40001DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObserver<T> unsubscribeTarget;

			[Token(Token = "0x6000461")]
			public Subscription(AsyncSubject<T> parent, IObserver<T> unsubscribeTarget)
			{
			}

			[Token(Token = "0x6000462")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20000BB")]
		private class AwaitObserver : IObserver<T>
		{
			[Serializable]
			[Token(Token = "0x20000BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03E8", Offset = "0x8B03E8")]
			private sealed class <>c
			{
				[Token(Token = "0x40001E1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x40001E2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static SendOrPostCallback <>9__6_0;

				[Token(Token = "0x6000469")]
				public <>c()
				{
				}

				[Token(Token = "0x600046A")]
				internal void <InvokeOnOriginalContext>b__6_0(object c)
				{
				}
			}

			[Token(Token = "0x40001DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SynchronizationContext _context;

			[Token(Token = "0x40001E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action _callback;

			[Token(Token = "0x6000463")]
			public AwaitObserver(Action callback, bool originalContext)
			{
			}

			[Token(Token = "0x6000464")]
			public void OnCompleted()
			{
			}

			[Token(Token = "0x6000465")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000466")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x6000467")]
			private void InvokeOnOriginalContext()
			{
			}
		}

		[Token(Token = "0x20000BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B03F8", Offset = "0x8B03F8")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x40001E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ManualResetEvent e;

			[Token(Token = "0x600046B")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x600046C")]
			internal void <GetResult>b__0()
			{
			}
		}

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object observerLock;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T lastValue;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool hasValue;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isStopped;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception lastError;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObserver<T> outObserver;

		[Token(Token = "0x17000079")]
		public T Value
		{
			[Token(Token = "0x6000452")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700007A")]
		public bool HasObservers
		{
			[Token(Token = "0x6000453")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007B")]
		public bool IsCompleted
		{
			[Token(Token = "0x6000454")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000455")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000456")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000457")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000458")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000459")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600045A")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x600045B")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x600045C")]
		public AsyncSubject<T> GetAwaiter()
		{
			return null;
		}

		[Token(Token = "0x600045D")]
		public void OnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x600045E")]
		private void OnCompleted(Action continuation, bool originalContext)
		{
		}

		[Token(Token = "0x600045F")]
		public T GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x6000460")]
		public AsyncSubject()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public sealed class BehaviorSubject<T> : ISubject<T>, ISubject<T, T>, IObserver<T>, IObservable<T>, IDisposable, IOptimizedObservable<T>
	{
		[Token(Token = "0x20000BF")]
		private class Subscription : IDisposable
		{
			[Token(Token = "0x40001EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40001EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private BehaviorSubject<T> parent;

			[Token(Token = "0x40001EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObserver<T> unsubscribeTarget;

			[Token(Token = "0x6000477")]
			public Subscription(BehaviorSubject<T> parent, IObserver<T> unsubscribeTarget)
			{
			}

			[Token(Token = "0x6000478")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object observerLock;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isStopped;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T lastValue;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception lastError;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObserver<T> outObserver;

		[Token(Token = "0x1700007C")]
		public T Value
		{
			[Token(Token = "0x600046E")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700007D")]
		public bool HasObservers
		{
			[Token(Token = "0x600046F")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600046D")]
		public BehaviorSubject(T defaultValue)
		{
		}

		[Token(Token = "0x6000470")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000471")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000472")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000473")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000474")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000475")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000476")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C0")]
	public interface IConnectableObservable<T> : IObservable<T>
	{
		[Token(Token = "0x6000479")]
		IDisposable Connect();
	}
	[Token(Token = "0x20000C1")]
	public interface ISubject<TSource, TResult> : IObserver<TSource>, IObservable<TResult>
	{
	}
	[Token(Token = "0x20000C2")]
	public interface ISubject<T> : ISubject<T, T>, IObserver<T>, IObservable<T>
	{
	}
	[Token(Token = "0x20000C3")]
	public sealed class ReplaySubject<T> : ISubject<T>, ISubject<T, T>, IObserver<T>, IObservable<T>, IOptimizedObservable<T>, IDisposable
	{
		[Token(Token = "0x20000C4")]
		private class Subscription : IDisposable
		{
			[Token(Token = "0x40001F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40001F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ReplaySubject<T> parent;

			[Token(Token = "0x40001F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObserver<T> unsubscribeTarget;

			[Token(Token = "0x6000489")]
			public Subscription(ReplaySubject<T> parent, IObserver<T> unsubscribeTarget)
			{
			}

			[Token(Token = "0x600048A")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object observerLock;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isStopped;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception lastError;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObserver<T> outObserver;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int bufferSize;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan window;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly DateTimeOffset startTime;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<TimeInterval<T>> queue;

		[Token(Token = "0x600047A")]
		public ReplaySubject()
		{
		}

		[Token(Token = "0x600047B")]
		public ReplaySubject(IScheduler scheduler)
		{
		}

		[Token(Token = "0x600047C")]
		public ReplaySubject(int bufferSize)
		{
		}

		[Token(Token = "0x600047D")]
		public ReplaySubject(int bufferSize, IScheduler scheduler)
		{
		}

		[Token(Token = "0x600047E")]
		public ReplaySubject(TimeSpan window)
		{
		}

		[Token(Token = "0x600047F")]
		public ReplaySubject(TimeSpan window, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000480")]
		public ReplaySubject(int bufferSize, TimeSpan window, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000481")]
		private void Trim()
		{
		}

		[Token(Token = "0x6000482")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000483")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000484")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000485")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000486")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000487")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000488")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C5")]
	public sealed class Subject<T> : ISubject<T>, ISubject<T, T>, IObserver<T>, IObservable<T>, IDisposable, IOptimizedObservable<T>
	{
		[Token(Token = "0x20000C6")]
		private class Subscription : IDisposable
		{
			[Token(Token = "0x40001FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Subject<T> parent;

			[Token(Token = "0x4000201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObserver<T> unsubscribeTarget;

			[Token(Token = "0x6000494")]
			public Subscription(Subject<T> parent, IObserver<T> unsubscribeTarget)
			{
			}

			[Token(Token = "0x6000495")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object observerLock;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isStopped;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception lastError;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObserver<T> outObserver;

		[Token(Token = "0x1700007E")]
		public bool HasObservers
		{
			[Token(Token = "0x600048B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600048C")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x600048D")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x600048E")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x600048F")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000490")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000491")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000492")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000493")]
		public Subject()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public static class SubjectExtensions
	{
		[Token(Token = "0x20000C8")]
		private class AnonymousSubject<T, U> : ISubject<T, U>, IObserver<T>, IObservable<U>
		{
			[Token(Token = "0x4000202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObserver<T> observer;

			[Token(Token = "0x4000203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObservable<U> observable;

			[Token(Token = "0x6000498")]
			public AnonymousSubject(IObserver<T> observer, IObservable<U> observable)
			{
			}

			[Token(Token = "0x6000499")]
			public void OnCompleted()
			{
			}

			[Token(Token = "0x600049A")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x600049B")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x600049C")]
			public IDisposable Subscribe(IObserver<U> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x20000C9")]
		private class AnonymousSubject<T> : AnonymousSubject<T, T>, ISubject<T>, ISubject<T, T>, IObserver<T>, IObservable<T>
		{
			[Token(Token = "0x600049D")]
			public AnonymousSubject(IObserver<T> observer, IObservable<T> observable)
			{
			}
		}

		[Token(Token = "0x6000496")]
		public static ISubject<T> Synchronize<T>(this ISubject<T> subject)
		{
			return null;
		}

		[Token(Token = "0x6000497")]
		public static ISubject<T> Synchronize<T>(this ISubject<T> subject, object gate)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CA")]
	public interface IGroupedObservable<TKey, TElement> : IObservable<TElement>
	{
		[Token(Token = "0x1700007F")]
		TKey Key
		{
			[Token(Token = "0x600049E")]
			get;
		}
	}
	[Token(Token = "0x20000CB")]
	public interface IOptimizedObservable<T> : IObservable<T>
	{
		[Token(Token = "0x600049F")]
		bool IsRequiredSubscribeOnCurrentThread();
	}
	[Token(Token = "0x20000CC")]
	public static class OptimizedObservableExtensions
	{
		[Token(Token = "0x60004A0")]
		public static bool IsRequiredSubscribeOnCurrentThread<T>(this IObservable<T> source)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A1")]
		public static bool IsRequiredSubscribeOnCurrentThread<T>(this IObservable<T> source, IScheduler scheduler)
		{
			return default(bool);
		}
	}
	[Serializable]
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x20000CD")]
	public struct Unit : IEquatable<Unit>
	{
		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Unit @default;

		[Token(Token = "0x17000080")]
		public static Unit Default
		{
			[Token(Token = "0x60004A2")]
			[Address(RVA = "0x10B26E8", Offset = "0x10B26E8", VA = "0x10B26E8")]
			get
			{
				return default(Unit);
			}
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x10B274C", Offset = "0x10B274C", VA = "0x10B274C")]
		public static bool operator ==(Unit first, Unit second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x10B2754", Offset = "0x10B2754", VA = "0x10B2754")]
		public static bool operator !=(Unit first, Unit second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x10B275C", Offset = "0x10B275C", VA = "0x10B275C", Slot = "4")]
		public bool Equals(Unit other)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x10B2764", Offset = "0x10B2764", VA = "0x10B2764", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x10B27C4", Offset = "0x10B27C4", VA = "0x10B27C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x10B27CC", Offset = "0x10B27CC", VA = "0x10B27CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000CE")]
	public static class TaskObservableExtensions
	{
		[Token(Token = "0x20000CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0438", Offset = "0x8B0438")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Task task;

			[Token(Token = "0x4000206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AsyncSubject<Unit> subject;

			[Token(Token = "0x60004BA")]
			[Address(RVA = "0x107542C", Offset = "0x107542C", VA = "0x107542C")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60004BB")]
			[Address(RVA = "0x1075434", Offset = "0x1075434", VA = "0x1075434")]
			internal void <ToObservableSlow>b__0(Task t)
			{
			}
		}

		[Token(Token = "0x20000D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0448", Offset = "0x8B0448")]
		private sealed class <>c__DisplayClass8_0<TResult>
		{
			[Token(Token = "0x4000207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Task<TResult> task;

			[Token(Token = "0x4000208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<TResult> subject;

			[Token(Token = "0x60004BC")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60004BD")]
			internal void <ToObservableSlow>b__0(Task<TResult> t)
			{
			}
		}

		[Token(Token = "0x20000D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0458", Offset = "0x8B0458")]
		private sealed class <>c__DisplayClass15_0<TResult>
		{
			[Token(Token = "0x4000209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SingleAssignmentDisposable disposable;

			[Token(Token = "0x400020A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TaskCompletionSource<TResult> tcs;

			[Token(Token = "0x400020B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x400020C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool hasValue;

			[Token(Token = "0x400020D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TResult lastValue;

			[Token(Token = "0x400020E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationTokenRegistration ctr;

			[Token(Token = "0x60004BE")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60004BF")]
			internal void <ToTask>b__0()
			{
			}

			[Token(Token = "0x60004C0")]
			internal void <ToTask>b__1(TResult value)
			{
			}

			[Token(Token = "0x60004C1")]
			internal void <ToTask>b__2(Exception ex)
			{
			}

			[Token(Token = "0x60004C2")]
			internal void <ToTask>b__3()
			{
			}
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x14DBFCC", Offset = "0x14DBFCC", VA = "0x14DBFCC")]
		public static IObservable<Unit> ToObservable(this Task task)
		{
			return null;
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x14DC290", Offset = "0x14DC290", VA = "0x14DC290")]
		public static IObservable<Unit> ToObservable(this Task task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x14DC02C", Offset = "0x14DC02C", VA = "0x14DC02C")]
		private static IObservable<Unit> ToObservableImpl(Task task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x14DC318", Offset = "0x14DC318", VA = "0x14DC318")]
		private static IObservable<Unit> ToObservableSlow(Task task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x14DC474", Offset = "0x14DC474", VA = "0x14DC474")]
		private static void ToObservableDone(Task task, IObserver<Unit> subject)
		{
		}

		[Token(Token = "0x60004AF")]
		public static IObservable<TResult> ToObservable<TResult>(this Task<TResult> task)
		{
			return null;
		}

		[Token(Token = "0x60004B0")]
		public static IObservable<TResult> ToObservable<TResult>(this Task<TResult> task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004B1")]
		private static IObservable<TResult> ToObservableImpl<TResult>(Task<TResult> task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		private static IObservable<TResult> ToObservableSlow<TResult>(Task<TResult> task, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004B3")]
		private static void ToObservableDone<TResult>(Task<TResult> task, IObserver<TResult> subject)
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x14DC464", Offset = "0x14DC464", VA = "0x14DC464")]
		private static TaskContinuationOptions GetTaskContinuationOptions(IScheduler scheduler)
		{
			return default(TaskContinuationOptions);
		}

		[Token(Token = "0x60004B5")]
		private static IObservable<TResult> ToObservableResult<TResult>(AsyncSubject<TResult> subject, IScheduler scheduler)
		{
			return null;
		}

		[Token(Token = "0x60004B6")]
		public static Task<TResult> ToTask<TResult>(this IObservable<TResult> observable)
		{
			return null;
		}

		[Token(Token = "0x60004B7")]
		public static Task<TResult> ToTask<TResult>(this IObservable<TResult> observable, object state)
		{
			return null;
		}

		[Token(Token = "0x60004B8")]
		public static Task<TResult> ToTask<TResult>(this IObservable<TResult> observable, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60004B9")]
		public static Task<TResult> ToTask<TResult>(this IObservable<TResult> observable, CancellationToken cancellationToken, object state)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D2")]
	public static class UniTaskObservableExtensions
	{
		[Token(Token = "0x20000D3")]
		private class ToUniTaskObserver<T> : IObserver<T>
		{
			[Token(Token = "0x400020F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Action<object> callback;

			[Token(Token = "0x4000210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly UniTaskCompletionSource<T> promise;

			[Token(Token = "0x4000211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SingleAssignmentDisposable disposable;

			[Token(Token = "0x4000212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CancellationToken cancellationToken;

			[Token(Token = "0x4000213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CancellationTokenRegistration registration;

			[Token(Token = "0x4000214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasValue;

			[Token(Token = "0x4000215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x60004C8")]
			public ToUniTaskObserver(UniTaskCompletionSource<T> promise, SingleAssignmentDisposable disposable, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x60004C9")]
			private static void OnCanceled(object state)
			{
			}

			[Token(Token = "0x60004CA")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x60004CB")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x60004CC")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20000D4")]
		private class FirstValueToUniTaskObserver<T> : IObserver<T>
		{
			[Token(Token = "0x4000216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Action<object> callback;

			[Token(Token = "0x4000217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly UniTaskCompletionSource<T> promise;

			[Token(Token = "0x4000218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SingleAssignmentDisposable disposable;

			[Token(Token = "0x4000219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CancellationToken cancellationToken;

			[Token(Token = "0x400021A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CancellationTokenRegistration registration;

			[Token(Token = "0x400021B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasValue;

			[Token(Token = "0x60004CE")]
			public FirstValueToUniTaskObserver(UniTaskCompletionSource<T> promise, SingleAssignmentDisposable disposable, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x60004CF")]
			private static void OnCanceled(object state)
			{
			}

			[Token(Token = "0x60004D0")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x60004D1")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x60004D2")]
			public void OnCompleted()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000D5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0478", Offset = "0x8B0478")]
		private struct <Fire>d__3<T> : IAsyncStateMachine
		{
			[Token(Token = "0x400021C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400021D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x400021E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x400021F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncSubject<T> subject;

			[Token(Token = "0x4000220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x60004D4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60004D5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0488", Offset = "0x8B0488")]
		private struct <Fire>d__4 : IAsyncStateMachine
		{
			[Token(Token = "0x4000221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UniTask task;

			[Token(Token = "0x4000224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AsyncSubject<Unit> subject;

			[Token(Token = "0x4000225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x60004D6")]
			[Address(RVA = "0x1079388", Offset = "0x1079388", VA = "0x1079388", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60004D7")]
			[Address(RVA = "0x10796B0", Offset = "0x10796B0", VA = "0x10796B0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x60004C3")]
		public static UniTask<T> ToUniTask<T>(this IObservable<T> source, [Optional] CancellationToken cancellationToken, bool useFirstValue = false)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60004C4")]
		public static IObservable<T> ToObservable<T>(this UniTask<T> task)
		{
			return null;
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x10B1D40", Offset = "0x10B1D40", VA = "0x10B1D40")]
		public static IObservable<Unit> ToObservable(this UniTask task)
		{
			return null;
		}

		[Token(Token = "0x60004C6")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B732C", Offset = "0x8B732C")]
		private static UniTaskVoid Fire<T>(AsyncSubject<T> subject, UniTask<T> task)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x10B1F20", Offset = "0x10B1F20", VA = "0x10B1F20")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B738C", Offset = "0x8B738C")]
		private static UniTaskVoid Fire(AsyncSubject<Unit> subject, UniTask task)
		{
			return default(UniTaskVoid);
		}
	}
	[Serializable]
	[Token(Token = "0x20000D7")]
	public struct TimeInterval<T> : IEquatable<TimeInterval<T>>
	{
		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan _interval;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T _value;

		[Token(Token = "0x17000081")]
		public T Value
		{
			[Token(Token = "0x60004D9")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000082")]
		public TimeSpan Interval
		{
			[Token(Token = "0x60004DA")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x60004D8")]
		public TimeInterval(T value, TimeSpan interval)
		{
		}

		[Token(Token = "0x60004DB")]
		public bool Equals(TimeInterval<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DC")]
		public static bool operator ==(TimeInterval<T> first, TimeInterval<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DD")]
		public static bool operator !=(TimeInterval<T> first, TimeInterval<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DE")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DF")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60004E0")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000D8")]
	public struct Timestamped<T> : IEquatable<Timestamped<T>>
	{
		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly DateTimeOffset _timestamp;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T _value;

		[Token(Token = "0x17000083")]
		public T Value
		{
			[Token(Token = "0x60004E2")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000084")]
		public DateTimeOffset Timestamp
		{
			[Token(Token = "0x60004E3")]
			get
			{
				return default(DateTimeOffset);
			}
		}

		[Token(Token = "0x60004E1")]
		public Timestamped(T value, DateTimeOffset timestamp)
		{
		}

		[Token(Token = "0x60004E4")]
		public bool Equals(Timestamped<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E5")]
		public static bool operator ==(Timestamped<T> first, Timestamped<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E6")]
		public static bool operator !=(Timestamped<T> first, Timestamped<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E7")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E8")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60004E9")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000D9")]
	public static class Timestamped
	{
		[Token(Token = "0x60004EA")]
		public static Timestamped<T> Create<T>(T value, DateTimeOffset timestamp)
		{
			return default(Timestamped<T>);
		}
	}
	[Token(Token = "0x20000DA")]
	public static class AsyncOperationExtensions
	{
		[Token(Token = "0x20000DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B04A8", Offset = "0x8B04A8")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400022A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AsyncOperation asyncOperation;

			[Token(Token = "0x400022B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IProgress<float> progress;

			[Token(Token = "0x60004EE")]
			[Address(RVA = "0x10BAEC0", Offset = "0x10BAEC0", VA = "0x10BAEC0")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60004EF")]
			[Address(RVA = "0x10BAEC8", Offset = "0x10BAEC8", VA = "0x10BAEC8")]
			internal IEnumerator <AsObservable>b__0(IObserver<AsyncOperation> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x20000DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B04B8", Offset = "0x8B04B8")]
		private sealed class <>c__DisplayClass1_0<T> where T : AsyncOperation
		{
			[Token(Token = "0x400022C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T asyncOperation;

			[Token(Token = "0x400022D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IProgress<float> progress;

			[Token(Token = "0x60004F0")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60004F1")]
			internal IEnumerator <AsAsyncOperationObservable>b__0(IObserver<T> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x20000DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B04C8", Offset = "0x8B04C8")]
		private sealed class <AsObservableCore>d__2<T> : IEnumerator<object>, IEnumerator, IDisposable where T : AsyncOperation
		{
			[Token(Token = "0x400022E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400022F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IProgress<float> reportProgress;

			[Token(Token = "0x4000231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T asyncOperation;

			[Token(Token = "0x4000232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x4000233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancel;

			[Token(Token = "0x17000085")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60004F5")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000086")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60004F7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60004F2")]
			[DebuggerHidden]
			public <AsObservableCore>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60004F3")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60004F4")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60004F6")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x118060C", Offset = "0x118060C", VA = "0x118060C")]
		public static IObservable<AsyncOperation> AsObservable(this AsyncOperation asyncOperation, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60004EC")]
		public static IObservable<T> AsAsyncOperationObservable<T>(this T asyncOperation, [Optional] IProgress<float> progress) where T : AsyncOperation
		{
			return null;
		}

		[Token(Token = "0x60004ED")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B742C", Offset = "0x8B742C")]
		private static IEnumerator AsObservableCore<T>(T asyncOperation, IObserver<T> observer, IProgress<float> reportProgress, CancellationToken cancel) where T : AsyncOperation
		{
			return null;
		}
	}
	[Token(Token = "0x20000DE")]
	public class CoroutineAsyncBridge : INotifyCompletion
	{
		[Token(Token = "0x20000DF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B04D8", Offset = "0x8B04D8")]
		private sealed class <Run>d__7<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T target;

			[Token(Token = "0x4000239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CoroutineAsyncBridge <>4__this;

			[Token(Token = "0x17000088")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000502")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000089")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000504")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60004FF")]
			[DebuggerHidden]
			public <Run>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000500")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000501")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000503")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action continuation;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2680", Offset = "0x8B2680")]
		private bool <IsCompleted>k__BackingField;

		[Token(Token = "0x17000087")]
		public bool IsCompleted
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0x168E538", Offset = "0x168E538", VA = "0x168E538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B74DC", Offset = "0x8B74DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004F9")]
			[Address(RVA = "0x168E540", Offset = "0x168E540", VA = "0x168E540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B74EC", Offset = "0x8B74EC")]
			private set
			{
			}
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x168E54C", Offset = "0x168E54C", VA = "0x168E54C")]
		private CoroutineAsyncBridge()
		{
		}

		[Token(Token = "0x60004FB")]
		public static CoroutineAsyncBridge Start<T>(T awaitTarget)
		{
			return null;
		}

		[Token(Token = "0x60004FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B74FC", Offset = "0x8B74FC")]
		private IEnumerator Run<T>(T target)
		{
			return null;
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x168E574", Offset = "0x168E574", VA = "0x168E574", Slot = "4")]
		public void OnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x168E57C", Offset = "0x168E57C", VA = "0x168E57C")]
		public void GetResult()
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public class CoroutineAsyncBridge<T> : INotifyCompletion
	{
		[Token(Token = "0x20000E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B04E8", Offset = "0x8B04E8")]
		private sealed class <Run>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400023D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400023E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400023F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T target;

			[Token(Token = "0x4000240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CoroutineAsyncBridge<T> <>4__this;

			[Token(Token = "0x1700008B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600050F")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000511")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600050C")]
			[DebuggerHidden]
			public <Run>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600050D")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600050E")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000510")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T result;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action continuation;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2690", Offset = "0x8B2690")]
		private bool <IsCompleted>k__BackingField;

		[Token(Token = "0x1700008A")]
		public bool IsCompleted
		{
			[Token(Token = "0x6000505")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B75AC", Offset = "0x8B75AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000506")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B75BC", Offset = "0x8B75BC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000507")]
		private CoroutineAsyncBridge(T result)
		{
		}

		[Token(Token = "0x6000508")]
		public static CoroutineAsyncBridge<T> Start(T awaitTarget)
		{
			return null;
		}

		[Token(Token = "0x6000509")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B75CC", Offset = "0x8B75CC")]
		private IEnumerator Run(T target)
		{
			return null;
		}

		[Token(Token = "0x600050A")]
		public void OnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x600050B")]
		public T GetResult()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20000E2")]
	public static class CoroutineAsyncExtensions
	{
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x168E5DC", Offset = "0x168E5DC", VA = "0x168E5DC")]
		public static CoroutineAsyncBridge GetAwaiter(this Coroutine coroutine)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000E3")]
	public struct FrameInterval<T> : IEquatable<FrameInterval<T>>
	{
		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int _interval;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T _value;

		[Token(Token = "0x1700008D")]
		public T Value
		{
			[Token(Token = "0x6000514")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700008E")]
		public int Interval
		{
			[Token(Token = "0x6000515")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000513")]
		public FrameInterval(T value, int interval)
		{
		}

		[Token(Token = "0x6000516")]
		public bool Equals(FrameInterval<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000517")]
		public static bool operator ==(FrameInterval<T> first, FrameInterval<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x6000518")]
		public static bool operator !=(FrameInterval<T> first, FrameInterval<T> second)
		{
			return default(bool);
		}

		[Token(Token = "0x6000519")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600051A")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600051B")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000E4")]
	public class IntReactiveProperty : ReactiveProperty<int>
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x169689C", Offset = "0x169689C", VA = "0x169689C")]
		public IntReactiveProperty()
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1696914", Offset = "0x1696914", VA = "0x1696914")]
		public IntReactiveProperty(int initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E5")]
	public class LongReactiveProperty : ReactiveProperty<long>
	{
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1698ECC", Offset = "0x1698ECC", VA = "0x1698ECC")]
		public LongReactiveProperty()
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1698F44", Offset = "0x1698F44", VA = "0x1698F44")]
		public LongReactiveProperty(long initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E6")]
	public class ByteReactiveProperty : ReactiveProperty<byte>
	{
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x168B228", Offset = "0x168B228", VA = "0x168B228")]
		public ByteReactiveProperty()
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x168B2A0", Offset = "0x168B2A0", VA = "0x168B2A0")]
		public ByteReactiveProperty(byte initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E7")]
	public class FloatReactiveProperty : ReactiveProperty<float>
	{
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1693470", Offset = "0x1693470", VA = "0x1693470")]
		public FloatReactiveProperty()
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x16934E8", Offset = "0x16934E8", VA = "0x16934E8")]
		public FloatReactiveProperty(float initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E8")]
	public class DoubleReactiveProperty : ReactiveProperty<double>
	{
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1691B58", Offset = "0x1691B58", VA = "0x1691B58")]
		public DoubleReactiveProperty()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1691BD0", Offset = "0x1691BD0", VA = "0x1691BD0")]
		public DoubleReactiveProperty(double initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E9")]
	public class StringReactiveProperty : ReactiveProperty<string>
	{
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x14DBB30", Offset = "0x14DBB30", VA = "0x14DBB30")]
		public StringReactiveProperty()
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x14DBBA8", Offset = "0x14DBBA8", VA = "0x14DBBA8")]
		public StringReactiveProperty(string initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EA")]
	public class BoolReactiveProperty : ReactiveProperty<bool>
	{
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1689B88", Offset = "0x1689B88", VA = "0x1689B88")]
		public BoolReactiveProperty()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1689C00", Offset = "0x1689C00", VA = "0x1689C00")]
		public BoolReactiveProperty(bool initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EB")]
	public class Vector2ReactiveProperty : ReactiveProperty<Vector2>
	{
		[Token(Token = "0x1700008F")]
		protected override IEqualityComparer<Vector2> EqualityComparer
		{
			[Token(Token = "0x600052C")]
			[Address(RVA = "0x10B692C", Offset = "0x10B692C", VA = "0x10B692C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x10B6824", Offset = "0x10B6824", VA = "0x10B6824")]
		public Vector2ReactiveProperty()
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x10B689C", Offset = "0x10B689C", VA = "0x10B689C")]
		public Vector2ReactiveProperty(Vector2 initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EC")]
	public class Vector3ReactiveProperty : ReactiveProperty<Vector3>
	{
		[Token(Token = "0x17000090")]
		protected override IEqualityComparer<Vector3> EqualityComparer
		{
			[Token(Token = "0x600052F")]
			[Address(RVA = "0x10B6AA8", Offset = "0x10B6AA8", VA = "0x10B6AA8", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x10B6990", Offset = "0x10B6990", VA = "0x10B6990")]
		public Vector3ReactiveProperty()
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x10B6A08", Offset = "0x10B6A08", VA = "0x10B6A08")]
		public Vector3ReactiveProperty(Vector3 initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000ED")]
	public class Vector4ReactiveProperty : ReactiveProperty<Vector4>
	{
		[Token(Token = "0x17000091")]
		protected override IEqualityComparer<Vector4> EqualityComparer
		{
			[Token(Token = "0x6000532")]
			[Address(RVA = "0x10B6C2C", Offset = "0x10B6C2C", VA = "0x10B6C2C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x10B6B0C", Offset = "0x10B6B0C", VA = "0x10B6B0C")]
		public Vector4ReactiveProperty()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x10B6B84", Offset = "0x10B6B84", VA = "0x10B6B84")]
		public Vector4ReactiveProperty(Vector4 initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EE")]
	public class ColorReactiveProperty : ReactiveProperty<Color>
	{
		[Token(Token = "0x17000092")]
		protected override IEqualityComparer<Color> EqualityComparer
		{
			[Token(Token = "0x6000535")]
			[Address(RVA = "0x168C124", Offset = "0x168C124", VA = "0x168C124", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x168C004", Offset = "0x168C004", VA = "0x168C004")]
		public ColorReactiveProperty()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x168C07C", Offset = "0x168C07C", VA = "0x168C07C")]
		public ColorReactiveProperty(Color initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EF")]
	public class RectReactiveProperty : ReactiveProperty<Rect>
	{
		[Token(Token = "0x17000093")]
		protected override IEqualityComparer<Rect> EqualityComparer
		{
			[Token(Token = "0x6000538")]
			[Address(RVA = "0x12C81EC", Offset = "0x12C81EC", VA = "0x12C81EC", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x12C80CC", Offset = "0x12C80CC", VA = "0x12C80CC")]
		public RectReactiveProperty()
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x12C8144", Offset = "0x12C8144", VA = "0x12C8144")]
		public RectReactiveProperty(Rect initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F0")]
	public class AnimationCurveReactiveProperty : ReactiveProperty<AnimationCurve>
	{
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1177E44", Offset = "0x1177E44", VA = "0x1177E44")]
		public AnimationCurveReactiveProperty()
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1177EBC", Offset = "0x1177EBC", VA = "0x1177EBC")]
		public AnimationCurveReactiveProperty(AnimationCurve initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F1")]
	public class BoundsReactiveProperty : ReactiveProperty<Bounds>
	{
		[Token(Token = "0x17000094")]
		protected override IEqualityComparer<Bounds> EqualityComparer
		{
			[Token(Token = "0x600053D")]
			[Address(RVA = "0x168B1C4", Offset = "0x168B1C4", VA = "0x168B1C4", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x168B098", Offset = "0x168B098", VA = "0x168B098")]
		public BoundsReactiveProperty()
		{
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x168B110", Offset = "0x168B110", VA = "0x168B110")]
		public BoundsReactiveProperty(Bounds initialValue)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F2")]
	public class QuaternionReactiveProperty : ReactiveProperty<Quaternion>
	{
		[Token(Token = "0x17000095")]
		protected override IEqualityComparer<Quaternion> EqualityComparer
		{
			[Token(Token = "0x6000540")]
			[Address(RVA = "0x12C7040", Offset = "0x12C7040", VA = "0x12C7040", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x12C6F20", Offset = "0x12C6F20", VA = "0x12C6F20")]
		public QuaternionReactiveProperty()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x12C6F98", Offset = "0x12C6F98", VA = "0x12C6F98")]
		public QuaternionReactiveProperty(Quaternion initialValue)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x8B0508", Offset = "0x8B0508")]
	public class InspectorDisplayAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B26A0", Offset = "0x8B26A0")]
		private string <FieldName>k__BackingField;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B26B0", Offset = "0x8B26B0")]
		private bool <NotifyPropertyChanged>k__BackingField;

		[Token(Token = "0x17000096")]
		public string FieldName
		{
			[Token(Token = "0x6000541")]
			[Address(RVA = "0x1696838", Offset = "0x1696838", VA = "0x1696838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B768C", Offset = "0x8B768C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000542")]
			[Address(RVA = "0x1696840", Offset = "0x1696840", VA = "0x1696840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B769C", Offset = "0x8B769C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public bool NotifyPropertyChanged
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0x1696848", Offset = "0x1696848", VA = "0x1696848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76AC", Offset = "0x8B76AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000544")]
			[Address(RVA = "0x1696850", Offset = "0x1696850", VA = "0x1696850")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76BC", Offset = "0x8B76BC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x169685C", Offset = "0x169685C", VA = "0x169685C")]
		public InspectorDisplayAttribute(string fieldName = "value", bool notifyPropertyChanged = true)
		{
		}
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x8B053C", Offset = "0x8B053C")]
	public class MultilineReactivePropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B26C0", Offset = "0x8B26C0")]
		private int <Lines>k__BackingField;

		[Token(Token = "0x17000098")]
		public int Lines
		{
			[Token(Token = "0x6000546")]
			[Address(RVA = "0x1757104", Offset = "0x1757104", VA = "0x1757104")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76CC", Offset = "0x8B76CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000547")]
			[Address(RVA = "0x175710C", Offset = "0x175710C", VA = "0x175710C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76DC", Offset = "0x8B76DC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1757114", Offset = "0x1757114", VA = "0x1757114")]
		public MultilineReactivePropertyAttribute()
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1757140", Offset = "0x1757140", VA = "0x1757140")]
		public MultilineReactivePropertyAttribute(int lines)
		{
		}
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x8B0570", Offset = "0x8B0570")]
	public class RangeReactivePropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B26D0", Offset = "0x8B26D0")]
		private float <Min>k__BackingField;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B26E0", Offset = "0x8B26E0")]
		private float <Max>k__BackingField;

		[Token(Token = "0x17000099")]
		public float Min
		{
			[Token(Token = "0x600054A")]
			[Address(RVA = "0x12C7638", Offset = "0x12C7638", VA = "0x12C7638")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76EC", Offset = "0x8B76EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600054B")]
			[Address(RVA = "0x12C7640", Offset = "0x12C7640", VA = "0x12C7640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B76FC", Offset = "0x8B76FC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public float Max
		{
			[Token(Token = "0x600054C")]
			[Address(RVA = "0x12C7648", Offset = "0x12C7648", VA = "0x12C7648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B770C", Offset = "0x8B770C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600054D")]
			[Address(RVA = "0x12C7650", Offset = "0x12C7650", VA = "0x12C7650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B771C", Offset = "0x8B771C")]
			private set
			{
			}
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x12C7658", Offset = "0x12C7658", VA = "0x12C7658")]
		public RangeReactivePropertyAttribute(float min, float max)
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public sealed class MainThreadDispatcher : MonoBehaviour
	{
		[Token(Token = "0x20000F7")]
		public enum CullingMode
		{
			[Token(Token = "0x4000258")]
			Disabled,
			[Token(Token = "0x4000259")]
			Self,
			[Token(Token = "0x400025A")]
			All
		}

		[Token(Token = "0x20000F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B05A4", Offset = "0x8B05A4")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400025B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IEnumerator routine;

			[Token(Token = "0x6000574")]
			[Address(RVA = "0x1066B24", Offset = "0x1066B24", VA = "0x1066B24")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000575")]
			[Address(RVA = "0x1066B2C", Offset = "0x1066B2C", VA = "0x1066B2C")]
			internal void <SendStartCoroutine>b__0(object _)
			{
			}
		}

		[Token(Token = "0x20000F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B05B4", Offset = "0x8B05B4")]
		private sealed class <RunUpdateMicroCoroutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400025C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400025D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400025E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainThreadDispatcher <>4__this;

			[Token(Token = "0x1700009F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000579")]
				[Address(RVA = "0x1066F10", Offset = "0x1066F10", VA = "0x1066F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600057B")]
				[Address(RVA = "0x1066F58", Offset = "0x1066F58", VA = "0x1066F58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000576")]
			[Address(RVA = "0x1066E70", Offset = "0x1066E70", VA = "0x1066E70")]
			[DebuggerHidden]
			public <RunUpdateMicroCoroutine>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000577")]
			[Address(RVA = "0x1066E9C", Offset = "0x1066E9C", VA = "0x1066E9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000578")]
			[Address(RVA = "0x1066EA0", Offset = "0x1066EA0", VA = "0x1066EA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600057A")]
			[Address(RVA = "0x1066F18", Offset = "0x1066F18", VA = "0x1066F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20000FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B05C4", Offset = "0x8B05C4")]
		private sealed class <RunFixedUpdateMicroCoroutine>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400025F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainThreadDispatcher <>4__this;

			[Token(Token = "0x170000A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600057F")]
				[Address(RVA = "0x1066E20", Offset = "0x1066E20", VA = "0x1066E20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000581")]
				[Address(RVA = "0x1066E68", Offset = "0x1066E68", VA = "0x1066E68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600057C")]
			[Address(RVA = "0x1066D34", Offset = "0x1066D34", VA = "0x1066D34")]
			[DebuggerHidden]
			public <RunFixedUpdateMicroCoroutine>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x600057D")]
			[Address(RVA = "0x1066D60", Offset = "0x1066D60", VA = "0x1066D60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600057E")]
			[Address(RVA = "0x1066D64", Offset = "0x1066D64", VA = "0x1066D64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000580")]
			[Address(RVA = "0x1066E28", Offset = "0x1066E28", VA = "0x1066E28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20000FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B05D4", Offset = "0x8B05D4")]
		private sealed class <RunEndOfFrameMicroCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainThreadDispatcher <>4__this;

			[Token(Token = "0x170000A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000585")]
				[Address(RVA = "0x1066CE4", Offset = "0x1066CE4", VA = "0x1066CE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000587")]
				[Address(RVA = "0x1066D2C", Offset = "0x1066D2C", VA = "0x1066D2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000582")]
			[Address(RVA = "0x1066BF8", Offset = "0x1066BF8", VA = "0x1066BF8")]
			[DebuggerHidden]
			public <RunEndOfFrameMicroCoroutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000583")]
			[Address(RVA = "0x1066C24", Offset = "0x1066C24", VA = "0x1066C24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000584")]
			[Address(RVA = "0x1066C28", Offset = "0x1066C28", VA = "0x1066C28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000586")]
			[Address(RVA = "0x1066CEC", Offset = "0x1066CEC", VA = "0x1066CEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B05E4", Offset = "0x8B05E4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Exception> <>9__52_0;

			[Token(Token = "0x6000589")]
			[Address(RVA = "0x1066AB8", Offset = "0x1066AB8", VA = "0x1066AB8")]
			public <>c()
			{
			}

			[Token(Token = "0x600058A")]
			[Address(RVA = "0x1066AC0", Offset = "0x1066AC0", VA = "0x1066AC0")]
			internal void <.ctor>b__52_0(Exception ex)
			{
			}
		}

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CullingMode cullingMode;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ThreadSafeQueueWorker queueWorker;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<Exception> unhandledExceptionCallback;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MicroCoroutine updateMicroCoroutine;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MicroCoroutine fixedUpdateMicroCoroutine;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MicroCoroutine endOfFrameMicroCoroutine;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MainThreadDispatcher instance;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool initialized;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private static bool isQuitting;

		[Token(Token = "0x4000251")]
		[AttributeAttribute(Name = "ThreadStaticAttribute", RVA = "0x8B26F0", Offset = "0x8B26F0")]
		private static object mainThreadToken;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Subject<Unit> update;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> lateUpdate;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<bool> onApplicationFocus;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<bool> onApplicationPause;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Subject<Unit> onApplicationQuit;

		[Token(Token = "0x1700009B")]
		public static string InstanceName
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0x16999C4", Offset = "0x16999C4", VA = "0x16999C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public static bool IsInitialized
		{
			[Token(Token = "0x600055A")]
			[Address(RVA = "0x1699AE4", Offset = "0x1699AE4", VA = "0x1699AE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009D")]
		private static MainThreadDispatcher Instance
		{
			[Token(Token = "0x600055B")]
			[Address(RVA = "0x1699074", Offset = "0x1699074", VA = "0x1699074")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public static bool IsInMainThread
		{
			[Token(Token = "0x600055D")]
			[Address(RVA = "0x169A2E0", Offset = "0x169A2E0", VA = "0x169A2E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1698FCC", Offset = "0x1698FCC", VA = "0x1698FCC")]
		public static void Post(Action<object> action, object state)
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x16990DC", Offset = "0x16990DC", VA = "0x16990DC")]
		public static void Send(Action<object> action, object state)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x16992E4", Offset = "0x16992E4", VA = "0x16992E4")]
		public static void UnsafeSend(Action action)
		{
		}

		[Token(Token = "0x6000552")]
		public static void UnsafeSend<T>(Action<T> action, T state)
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x169943C", Offset = "0x169943C", VA = "0x169943C")]
		public static void SendStartCoroutine(IEnumerator routine)
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1699690", Offset = "0x1699690", VA = "0x1699690")]
		public static void StartUpdateMicroCoroutine(IEnumerator routine)
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x169975C", Offset = "0x169975C", VA = "0x169975C")]
		public static void StartFixedUpdateMicroCoroutine(IEnumerator routine)
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1699828", Offset = "0x1699828", VA = "0x1699828")]
		public static void StartEndOfFrameMicroCoroutine(IEnumerator routine)
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x16995C4", Offset = "0x16995C4", VA = "0x16995C4")]
		public new static Coroutine StartCoroutine(IEnumerator routine)
		{
			return null;
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x16998F4", Offset = "0x16998F4", VA = "0x16998F4")]
		public static void RegisterUnhandledExceptionCallback(Action<Exception> exceptionCallback)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1699BB4", Offset = "0x1699BB4", VA = "0x1699BB4")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1699E4C", Offset = "0x1699E4C", VA = "0x1699E4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x169A34C", Offset = "0x169A34C", VA = "0x169A34C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B772C", Offset = "0x8B772C")]
		private IEnumerator RunUpdateMicroCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x169A3B8", Offset = "0x169A3B8", VA = "0x169A3B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B778C", Offset = "0x8B778C")]
		private IEnumerator RunFixedUpdateMicroCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x169A424", Offset = "0x169A424", VA = "0x169A424")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B77EC", Offset = "0x8B77EC")]
		private IEnumerator RunEndOfFrameMicroCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x169A490", Offset = "0x169A490", VA = "0x169A490")]
		private static void DestroyDispatcher(MainThreadDispatcher aDispatcher)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x169A670", Offset = "0x169A670", VA = "0x169A670")]
		public static void CullAllExcessDispatchers()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x169A774", Offset = "0x169A774", VA = "0x169A774")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x169A8AC", Offset = "0x169A8AC", VA = "0x169A8AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x169AA30", Offset = "0x169AA30", VA = "0x169AA30")]
		public static IObservable<Unit> UpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x169AB08", Offset = "0x169AB08", VA = "0x169AB08")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x169ABE4", Offset = "0x169ABE4", VA = "0x169ABE4")]
		public static IObservable<Unit> LateUpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x169ACBC", Offset = "0x169ACBC", VA = "0x169ACBC")]
		private void OnApplicationFocus(bool focus)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x169AD2C", Offset = "0x169AD2C", VA = "0x169AD2C")]
		public static IObservable<bool> OnApplicationFocusAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x169AE04", Offset = "0x169AE04", VA = "0x169AE04")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x169AE74", Offset = "0x169AE74", VA = "0x169AE74")]
		public static IObservable<bool> OnApplicationPauseAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x169AF4C", Offset = "0x169AF4C", VA = "0x169AF4C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x169B064", Offset = "0x169B064", VA = "0x169B064")]
		public static IObservable<Unit> OnApplicationQuitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x169B13C", Offset = "0x169B13C", VA = "0x169B13C")]
		public MainThreadDispatcher()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x169B2C8", Offset = "0x169B2C8", VA = "0x169B2C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B784C", Offset = "0x8B784C")]
		private void <Awake>b__30_0(Exception ex)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x169B32C", Offset = "0x169B32C", VA = "0x169B32C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B785C", Offset = "0x8B785C")]
		private void <Awake>b__30_1(Exception ex)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x169B390", Offset = "0x169B390", VA = "0x169B390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B786C", Offset = "0x8B786C")]
		private void <Awake>b__30_2(Exception ex)
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public enum FrameCountType
	{
		[Token(Token = "0x4000268")]
		Update,
		[Token(Token = "0x4000269")]
		FixedUpdate,
		[Token(Token = "0x400026A")]
		EndOfFrame
	}
	[Token(Token = "0x20000FE")]
	public enum MainThreadDispatchType
	{
		[Token(Token = "0x400026C")]
		Update,
		[Token(Token = "0x400026D")]
		FixedUpdate,
		[Token(Token = "0x400026E")]
		EndOfFrame,
		[Token(Token = "0x400026F")]
		GameObjectUpdate,
		[Token(Token = "0x4000270")]
		LateUpdate
	}
	[Token(Token = "0x20000FF")]
	public static class FrameCountTypeExtensions
	{
		[Token(Token = "0x600058B")]
		[Address(RVA = "0x1693570", Offset = "0x1693570", VA = "0x1693570")]
		public static YieldInstruction GetYieldInstruction(this FrameCountType frameCountType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000100")]
	internal interface ICustomYieldInstructionErrorHandler
	{
		[Token(Token = "0x170000A5")]
		bool HasError
		{
			[Token(Token = "0x600058C")]
			get;
		}

		[Token(Token = "0x170000A6")]
		Exception Error
		{
			[Token(Token = "0x600058D")]
			get;
		}

		[Token(Token = "0x170000A7")]
		bool IsReThrowOnError
		{
			[Token(Token = "0x600058E")]
			get;
		}

		[Token(Token = "0x600058F")]
		void ForceDisableRethrowOnError();

		[Token(Token = "0x6000590")]
		void ForceEnableRethrowOnError();
	}
	[Token(Token = "0x2000101")]
	public class ObservableYieldInstruction<T> : IEnumerator<T>, IEnumerator, IDisposable, ICustomYieldInstructionErrorHandler
	{
		[Token(Token = "0x2000102")]
		private class ToYieldInstruction : IObserver<T>
		{
			[Token(Token = "0x4000279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ObservableYieldInstruction<T> parent;

			[Token(Token = "0x60005A0")]
			public ToYieldInstruction(ObservableYieldInstruction<T> parent)
			{
			}

			[Token(Token = "0x60005A1")]
			public void OnNext(T value)
			{
			}

			[Token(Token = "0x60005A2")]
			public void OnError(Exception error)
			{
			}

			[Token(Token = "0x60005A3")]
			public void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDisposable subscription;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly CancellationToken cancel;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool reThrowOnError;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T current;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T result;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool moveNext;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool hasResult;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception error;

		[Token(Token = "0x170000A8")]
		public bool HasError
		{
			[Token(Token = "0x6000592")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A9")]
		public bool HasResult
		{
			[Token(Token = "0x6000593")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AA")]
		public bool IsCanceled
		{
			[Token(Token = "0x6000594")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AB")]
		public bool IsDone
		{
			[Token(Token = "0x6000595")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		public T Result
		{
			[Token(Token = "0x6000596")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x170000AD")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6000597")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x170000AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		public Exception Error
		{
			[Token(Token = "0x6000599")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		private bool UniRx.ICustomYieldInstructionErrorHandler.IsReThrowOnError
		{
			[Token(Token = "0x600059B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000591")]
		public ObservableYieldInstruction(IObservable<T> source, bool reThrowOnError, CancellationToken cancel)
		{
		}

		[Token(Token = "0x600059A")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059C")]
		private void UniRx.ICustomYieldInstructionErrorHandler.ForceDisableRethrowOnError()
		{
		}

		[Token(Token = "0x600059D")]
		private void UniRx.ICustomYieldInstructionErrorHandler.ForceEnableRethrowOnError()
		{
		}

		[Token(Token = "0x600059E")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600059F")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8B0604", Offset = "0x8B0604")]
	public static class ObservableWWW
	{
		[Token(Token = "0x2000104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B063C", Offset = "0x8B063C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400027A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400027B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x400027C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005BC")]
			[Address(RVA = "0x10694B8", Offset = "0x10694B8", VA = "0x10694B8")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60005BD")]
			[Address(RVA = "0x10694C0", Offset = "0x10694C0", VA = "0x10694C0")]
			internal IEnumerator <Get>b__0(IObserver<string> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000105")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B064C", Offset = "0x8B064C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400027D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400027E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x400027F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005BE")]
			[Address(RVA = "0x1069A78", Offset = "0x1069A78", VA = "0x1069A78")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60005BF")]
			[Address(RVA = "0x1069A80", Offset = "0x1069A80", VA = "0x1069A80")]
			internal IEnumerator <GetAndGetBytes>b__0(IObserver<byte[]> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000106")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B065C", Offset = "0x8B065C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x4000281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x4000282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005C0")]
			[Address(RVA = "0x1069B54", Offset = "0x1069B54", VA = "0x1069B54")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60005C1")]
			[Address(RVA = "0x1069B5C", Offset = "0x1069B5C", VA = "0x1069B5C")]
			internal IEnumerator <GetWWW>b__0(IObserver<WWW> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000107")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B066C", Offset = "0x8B066C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x4000284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x4000285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005C2")]
			[Address(RVA = "0x1069C30", Offset = "0x1069C30", VA = "0x1069C30")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60005C3")]
			[Address(RVA = "0x1069C38", Offset = "0x1069C38", VA = "0x1069C38")]
			internal IEnumerator <Post>b__0(IObserver<string> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B067C", Offset = "0x8B067C")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4000286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x4000287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x4000288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x4000289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> progress;

			[Token(Token = "0x60005C4")]
			[Address(RVA = "0x1069CC8", Offset = "0x1069CC8", VA = "0x1069CC8")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60005C5")]
			[Address(RVA = "0x1069CD0", Offset = "0x1069CD0", VA = "0x1069CD0")]
			internal IEnumerator <Post>b__0(IObserver<string> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000109")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B068C", Offset = "0x8B068C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400028A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400028B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x400028C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005C6")]
			[Address(RVA = "0x1069D70", Offset = "0x1069D70", VA = "0x1069D70")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x60005C7")]
			[Address(RVA = "0x1069D78", Offset = "0x1069D78", VA = "0x1069D78")]
			internal IEnumerator <Post>b__0(IObserver<string> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B069C", Offset = "0x8B069C")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400028D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400028E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x400028F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> contentHeaders;

			[Token(Token = "0x4000290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x4000291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IProgress<float> progress;

			[Token(Token = "0x60005C8")]
			[Address(RVA = "0x1069E08", Offset = "0x1069E08", VA = "0x1069E08")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x60005C9")]
			[Address(RVA = "0x1069E10", Offset = "0x1069E10", VA = "0x1069E10")]
			internal IEnumerator <Post>b__0(IObserver<string> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06AC", Offset = "0x8B06AC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x4000292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x4000293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x4000294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005CA")]
			[Address(RVA = "0x1069EDC", Offset = "0x1069EDC", VA = "0x1069EDC")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60005CB")]
			[Address(RVA = "0x1069EE4", Offset = "0x1069EE4", VA = "0x1069EE4")]
			internal IEnumerator <PostAndGetBytes>b__0(IObserver<byte[]> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06BC", Offset = "0x8B06BC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4000295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x4000296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x4000297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x4000298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> progress;

			[Token(Token = "0x60005CC")]
			[Address(RVA = "0x1069F74", Offset = "0x1069F74", VA = "0x1069F74")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60005CD")]
			[Address(RVA = "0x1069F7C", Offset = "0x1069F7C", VA = "0x1069F7C")]
			internal IEnumerator <PostAndGetBytes>b__0(IObserver<byte[]> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06CC", Offset = "0x8B06CC")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4000299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400029A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x400029B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005CE")]
			[Address(RVA = "0x106A01C", Offset = "0x106A01C", VA = "0x106A01C")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60005CF")]
			[Address(RVA = "0x106A024", Offset = "0x106A024", VA = "0x106A024")]
			internal IEnumerator <PostAndGetBytes>b__0(IObserver<byte[]> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06DC", Offset = "0x8B06DC")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x400029C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x400029D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x400029E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> contentHeaders;

			[Token(Token = "0x400029F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x40002A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IProgress<float> progress;

			[Token(Token = "0x60005D0")]
			[Address(RVA = "0x1069594", Offset = "0x1069594", VA = "0x1069594")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60005D1")]
			[Address(RVA = "0x106959C", Offset = "0x106959C", VA = "0x106959C")]
			internal IEnumerator <PostAndGetBytes>b__0(IObserver<byte[]> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x200010F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06EC", Offset = "0x8B06EC")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x40002A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x40002A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005D2")]
			[Address(RVA = "0x1069668", Offset = "0x1069668", VA = "0x1069668")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x60005D3")]
			[Address(RVA = "0x1069670", Offset = "0x1069670", VA = "0x1069670")]
			internal IEnumerator <PostWWW>b__0(IObserver<WWW> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B06FC", Offset = "0x8B06FC")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40002A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte[] postData;

			[Token(Token = "0x40002A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x40002A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> progress;

			[Token(Token = "0x60005D4")]
			[Address(RVA = "0x1069700", Offset = "0x1069700", VA = "0x1069700")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60005D5")]
			[Address(RVA = "0x1069708", Offset = "0x1069708", VA = "0x1069708")]
			internal IEnumerator <PostWWW>b__0(IObserver<WWW> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000111")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B070C", Offset = "0x8B070C")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40002A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x40002AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005D6")]
			[Address(RVA = "0x10697A8", Offset = "0x10697A8", VA = "0x10697A8")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x60005D7")]
			[Address(RVA = "0x10697B0", Offset = "0x10697B0", VA = "0x10697B0")]
			internal IEnumerator <PostWWW>b__0(IObserver<WWW> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000112")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B071C", Offset = "0x8B071C")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x40002AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WWWForm content;

			[Token(Token = "0x40002AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, string> contentHeaders;

			[Token(Token = "0x40002AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dictionary<string, string> headers;

			[Token(Token = "0x40002AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IProgress<float> progress;

			[Token(Token = "0x60005D8")]
			[Address(RVA = "0x1069840", Offset = "0x1069840", VA = "0x1069840")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60005D9")]
			[Address(RVA = "0x1069848", Offset = "0x1069848", VA = "0x1069848")]
			internal IEnumerator <PostWWW>b__0(IObserver<WWW> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000113")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B072C", Offset = "0x8B072C")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40002B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int version;

			[Token(Token = "0x40002B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005DA")]
			[Address(RVA = "0x1069914", Offset = "0x1069914", VA = "0x1069914")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60005DB")]
			[Address(RVA = "0x106991C", Offset = "0x106991C", VA = "0x106991C")]
			internal IEnumerator <LoadFromCacheOrDownload>b__0(IObserver<AssetBundle> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000114")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B073C", Offset = "0x8B073C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x40002B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int version;

			[Token(Token = "0x40002B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public uint crc;

			[Token(Token = "0x40002B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IProgress<float> progress;

			[Token(Token = "0x60005DC")]
			[Address(RVA = "0x106996C", Offset = "0x106996C", VA = "0x106996C")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60005DD")]
			[Address(RVA = "0x1069974", Offset = "0x1069974", VA = "0x1069974")]
			internal IEnumerator <LoadFromCacheOrDownload>b__0(IObserver<AssetBundle> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000115")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B074C", Offset = "0x8B074C")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x40002B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Hash128 hash128;

			[Token(Token = "0x40002B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> progress;

			[Token(Token = "0x60005DE")]
			[Address(RVA = "0x10699C4", Offset = "0x10699C4", VA = "0x10699C4")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60005DF")]
			[Address(RVA = "0x10699CC", Offset = "0x10699CC", VA = "0x10699CC")]
			internal IEnumerator <LoadFromCacheOrDownload>b__0(IObserver<AssetBundle> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000116")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B075C", Offset = "0x8B075C")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x40002BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string url;

			[Token(Token = "0x40002BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Hash128 hash128;

			[Token(Token = "0x40002BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public uint crc;

			[Token(Token = "0x40002BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IProgress<float> progress;

			[Token(Token = "0x60005E0")]
			[Address(RVA = "0x1069A1C", Offset = "0x1069A1C", VA = "0x1069A1C")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x60005E1")]
			[Address(RVA = "0x1069A24", Offset = "0x1069A24", VA = "0x1069A24")]
			internal IEnumerator <LoadFromCacheOrDownload>b__0(IObserver<AssetBundle> observer, CancellationToken cancellation)
			{
				return null;
			}
		}

		[Token(Token = "0x2000117")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B076C", Offset = "0x8B076C")]
		private sealed class <Fetch>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40002C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x40002C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> reportProgress;

			[Token(Token = "0x40002C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IObserver<WWW> observer;

			[Token(Token = "0x40002C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationToken cancel;

			[Token(Token = "0x40002C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private WWW <>7__wrap1;

			[Token(Token = "0x170000B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005E6")]
				[Address(RVA = "0x106A884", Offset = "0x106A884", VA = "0x106A884", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005E8")]
				[Address(RVA = "0x106A8CC", Offset = "0x106A8CC", VA = "0x106A8CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x106A0B4", Offset = "0x106A0B4", VA = "0x106A0B4")]
			[DebuggerHidden]
			public <Fetch>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60005E3")]
			[Address(RVA = "0x106A0E0", Offset = "0x106A0E0", VA = "0x106A0E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005E4")]
			[Address(RVA = "0x106A1C8", Offset = "0x106A1C8", VA = "0x106A1C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005E5")]
			[Address(RVA = "0x106A10C", Offset = "0x106A10C", VA = "0x106A10C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60005E7")]
			[Address(RVA = "0x106A88C", Offset = "0x106A88C", VA = "0x106A88C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B077C", Offset = "0x8B077C")]
		private sealed class <FetchText>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40002C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x40002C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> reportProgress;

			[Token(Token = "0x40002C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IObserver<string> observer;

			[Token(Token = "0x40002CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationToken cancel;

			[Token(Token = "0x40002CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private WWW <>7__wrap1;

			[Token(Token = "0x170000B3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005ED")]
				[Address(RVA = "0x106C124", Offset = "0x106C124", VA = "0x106C124", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005EF")]
				[Address(RVA = "0x106C16C", Offset = "0x106C16C", VA = "0x106C16C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005E9")]
			[Address(RVA = "0x106B938", Offset = "0x106B938", VA = "0x106B938")]
			[DebuggerHidden]
			public <FetchText>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60005EA")]
			[Address(RVA = "0x106B964", Offset = "0x106B964", VA = "0x106B964", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005EB")]
			[Address(RVA = "0x106BA4C", Offset = "0x106BA4C", VA = "0x106BA4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005EC")]
			[Address(RVA = "0x106B990", Offset = "0x106B990", VA = "0x106B990")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60005EE")]
			[Address(RVA = "0x106C12C", Offset = "0x106C12C", VA = "0x106C12C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000119")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B078C", Offset = "0x8B078C")]
		private sealed class <FetchBytes>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40002CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x40002CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> reportProgress;

			[Token(Token = "0x40002D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IObserver<byte[]> observer;

			[Token(Token = "0x40002D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationToken cancel;

			[Token(Token = "0x40002D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private WWW <>7__wrap1;

			[Token(Token = "0x170000B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005F4")]
				[Address(RVA = "0x106B8E8", Offset = "0x106B8E8", VA = "0x106B8E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005F6")]
				[Address(RVA = "0x106B930", Offset = "0x106B930", VA = "0x106B930", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005F0")]
			[Address(RVA = "0x106B0FC", Offset = "0x106B0FC", VA = "0x106B0FC")]
			[DebuggerHidden]
			public <FetchBytes>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60005F1")]
			[Address(RVA = "0x106B128", Offset = "0x106B128", VA = "0x106B128", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005F2")]
			[Address(RVA = "0x106B210", Offset = "0x106B210", VA = "0x106B210", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005F3")]
			[Address(RVA = "0x106B154", Offset = "0x106B154", VA = "0x106B154")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60005F5")]
			[Address(RVA = "0x106B8F0", Offset = "0x106B8F0", VA = "0x106B8F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200011A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B079C", Offset = "0x8B079C")]
		private sealed class <FetchAssetBundle>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40002D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x40002D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IProgress<float> reportProgress;

			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IObserver<AssetBundle> observer;

			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationToken cancel;

			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private WWW <>7__wrap1;

			[Token(Token = "0x170000B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005FB")]
				[Address(RVA = "0x106B0AC", Offset = "0x106B0AC", VA = "0x106B0AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005FD")]
				[Address(RVA = "0x106B0F4", Offset = "0x106B0F4", VA = "0x106B0F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005F7")]
			[Address(RVA = "0x106A8D4", Offset = "0x106A8D4", VA = "0x106A8D4")]
			[DebuggerHidden]
			public <FetchAssetBundle>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60005F8")]
			[Address(RVA = "0x106A900", Offset = "0x106A900", VA = "0x106A900", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005F9")]
			[Address(RVA = "0x106A9E8", Offset = "0x106A9E8", VA = "0x106A9E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005FA")]
			[Address(RVA = "0x106A92C", Offset = "0x106A92C", VA = "0x106A92C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60005FC")]
			[Address(RVA = "0x106B0B4", Offset = "0x106B0B4", VA = "0x106B0B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x12BFA94", Offset = "0x12BFA94", VA = "0x12BFA94")]
		public static IObservable<string> Get(string url, [Optional] Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x12BFBAC", Offset = "0x12BFBAC", VA = "0x12BFBAC")]
		public static IObservable<byte[]> GetAndGetBytes(string url, [Optional] Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x12BFCC4", Offset = "0x12BFCC4", VA = "0x12BFCC4")]
		public static IObservable<WWW> GetWWW(string url, [Optional] Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x12BFDDC", Offset = "0x12BFDDC", VA = "0x12BFDDC")]
		public static IObservable<string> Post(string url, byte[] postData, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x12BFEF4", Offset = "0x12BFEF4", VA = "0x12BFEF4")]
		public static IObservable<string> Post(string url, byte[] postData, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x12C0018", Offset = "0x12C0018", VA = "0x12C0018")]
		public static IObservable<string> Post(string url, WWWForm content, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x12C0130", Offset = "0x12C0130", VA = "0x12C0130")]
		public static IObservable<string> Post(string url, WWWForm content, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x12C0268", Offset = "0x12C0268", VA = "0x12C0268")]
		public static IObservable<byte[]> PostAndGetBytes(string url, byte[] postData, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x12C0380", Offset = "0x12C0380", VA = "0x12C0380")]
		public static IObservable<byte[]> PostAndGetBytes(string url, byte[] postData, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x12C04A4", Offset = "0x12C04A4", VA = "0x12C04A4")]
		public static IObservable<byte[]> PostAndGetBytes(string url, WWWForm content, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x12C05BC", Offset = "0x12C05BC", VA = "0x12C05BC")]
		public static IObservable<byte[]> PostAndGetBytes(string url, WWWForm content, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x12C06F4", Offset = "0x12C06F4", VA = "0x12C06F4")]
		public static IObservable<WWW> PostWWW(string url, byte[] postData, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x12C080C", Offset = "0x12C080C", VA = "0x12C080C")]
		public static IObservable<WWW> PostWWW(string url, byte[] postData, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x12C0930", Offset = "0x12C0930", VA = "0x12C0930")]
		public static IObservable<WWW> PostWWW(string url, WWWForm content, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x12C0A48", Offset = "0x12C0A48", VA = "0x12C0A48")]
		public static IObservable<WWW> PostWWW(string url, WWWForm content, Dictionary<string, string> headers, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x12C0B80", Offset = "0x12C0B80", VA = "0x12C0B80")]
		public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, int version, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x12C0C9C", Offset = "0x12C0C9C", VA = "0x12C0C9C")]
		public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, int version, uint crc, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x12C0DC4", Offset = "0x12C0DC4", VA = "0x12C0DC4")]
		public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, Hash128 hash128, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x12C0EE8", Offset = "0x12C0EE8", VA = "0x12C0EE8")]
		public static IObservable<AssetBundle> LoadFromCacheOrDownload(string url, Hash128 hash128, uint crc, [Optional] IProgress<float> progress)
		{
			return null;
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x12C1018", Offset = "0x12C1018", VA = "0x12C1018")]
		private static Dictionary<string, string> MergeHash(Dictionary<string, string> wwwFormHeaders, Dictionary<string, string> externalHeaders)
		{
			return null;
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x12C1178", Offset = "0x12C1178", VA = "0x12C1178")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B797C", Offset = "0x8B797C")]
		private static IEnumerator Fetch(WWW www, IObserver<WWW> observer, IProgress<float> reportProgress, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x12C1204", Offset = "0x12C1204", VA = "0x12C1204")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B79DC", Offset = "0x8B79DC")]
		private static IEnumerator FetchText(WWW www, IObserver<string> observer, IProgress<float> reportProgress, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x12C1290", Offset = "0x12C1290", VA = "0x12C1290")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B7A3C", Offset = "0x8B7A3C")]
		private static IEnumerator FetchBytes(WWW www, IObserver<byte[]> observer, IProgress<float> reportProgress, CancellationToken cancel)
		{
			return null;
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x12C131C", Offset = "0x12C131C", VA = "0x12C131C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B7A9C", Offset = "0x8B7A9C")]
		private static IEnumerator FetchAssetBundle(WWW www, IObserver<AssetBundle> observer, IProgress<float> reportProgress, CancellationToken cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200011B")]
	public class WWWErrorException : Exception
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2700", Offset = "0x8B2700")]
		private string <RawErrorMessage>k__BackingField;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2710", Offset = "0x8B2710")]
		private bool <HasResponse>k__BackingField;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2720", Offset = "0x8B2720")]
		private string <Text>k__BackingField;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2730", Offset = "0x8B2730")]
		private HttpStatusCode <StatusCode>k__BackingField;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2740", Offset = "0x8B2740")]
		private Dictionary<string, string> <ResponseHeaders>k__BackingField;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2750", Offset = "0x8B2750")]
		private WWW <WWW>k__BackingField;

		[Token(Token = "0x170000B9")]
		public string RawErrorMessage
		{
			[Token(Token = "0x60005FE")]
			[Address(RVA = "0x10B72EC", Offset = "0x10B72EC", VA = "0x10B72EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C3C", Offset = "0x8B7C3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005FF")]
			[Address(RVA = "0x10B72F4", Offset = "0x10B72F4", VA = "0x10B72F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C4C", Offset = "0x8B7C4C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool HasResponse
		{
			[Token(Token = "0x6000600")]
			[Address(RVA = "0x10B72FC", Offset = "0x10B72FC", VA = "0x10B72FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C5C", Offset = "0x8B7C5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000601")]
			[Address(RVA = "0x10B7304", Offset = "0x10B7304", VA = "0x10B7304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C6C", Offset = "0x8B7C6C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public string Text
		{
			[Token(Token = "0x6000602")]
			[Address(RVA = "0x10B7310", Offset = "0x10B7310", VA = "0x10B7310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C7C", Offset = "0x8B7C7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000603")]
			[Address(RVA = "0x10B7318", Offset = "0x10B7318", VA = "0x10B7318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C8C", Offset = "0x8B7C8C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public HttpStatusCode StatusCode
		{
			[Token(Token = "0x6000604")]
			[Address(RVA = "0x10B7320", Offset = "0x10B7320", VA = "0x10B7320")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7C9C", Offset = "0x8B7C9C")]
			get
			{
				return default(HttpStatusCode);
			}
			[Token(Token = "0x6000605")]
			[Address(RVA = "0x10B7328", Offset = "0x10B7328", VA = "0x10B7328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7CAC", Offset = "0x8B7CAC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public Dictionary<string, string> ResponseHeaders
		{
			[Token(Token = "0x6000606")]
			[Address(RVA = "0x10B7330", Offset = "0x10B7330", VA = "0x10B7330")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7CBC", Offset = "0x8B7CBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000607")]
			[Address(RVA = "0x10B7338", Offset = "0x10B7338", VA = "0x10B7338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7CCC", Offset = "0x8B7CCC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public WWW WWW
		{
			[Token(Token = "0x6000608")]
			[Address(RVA = "0x10B7340", Offset = "0x10B7340", VA = "0x10B7340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7CDC", Offset = "0x8B7CDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000609")]
			[Address(RVA = "0x10B7348", Offset = "0x10B7348", VA = "0x10B7348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7CEC", Offset = "0x8B7CEC")]
			private set
			{
			}
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x10B7350", Offset = "0x10B7350", VA = "0x10B7350")]
		public WWWErrorException(WWW www, string text)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x10B74A4", Offset = "0x10B74A4", VA = "0x10B74A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200011C")]
	public static class ObserveExtensions
	{
		[Token(Token = "0x200011D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B07BC", Offset = "0x8B07BC")]
		private sealed class <>c__DisplayClass2_0<TSource, TProperty> where TSource : class
		{
			[Token(Token = "0x40002E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Object unityObject;

			[Token(Token = "0x40002E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, TProperty> propertySelector;

			[Token(Token = "0x40002E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEqualityComparer<TProperty> comparer;

			[Token(Token = "0x40002E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool fastDestroyCheck;

			[Token(Token = "0x6000613")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6000614")]
			internal IEnumerator <ObserveEveryValueChanged>b__0(IObserver<TProperty> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x200011E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B07CC", Offset = "0x8B07CC")]
		private sealed class <>c__DisplayClass2_1<TSource, TProperty> where TSource : class
		{
			[Token(Token = "0x40002E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WeakReference reference;

			[Token(Token = "0x40002E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass2_0<TSource, TProperty> CS$<>8__locals1;

			[Token(Token = "0x6000615")]
			public <>c__DisplayClass2_1()
			{
			}

			[Token(Token = "0x6000616")]
			internal IEnumerator <ObserveEveryValueChanged>b__1(IObserver<TProperty> observer, CancellationToken cancellationToken)
			{
				return null;
			}
		}

		[Token(Token = "0x200011F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B07DC", Offset = "0x8B07DC")]
		private sealed class <EmptyEnumerator>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170000BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600061A")]
				[Address(RVA = "0x106C1BC", Offset = "0x106C1BC", VA = "0x106C1BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600061C")]
				[Address(RVA = "0x106C204", Offset = "0x106C204", VA = "0x106C204", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000617")]
			[Address(RVA = "0x106C174", Offset = "0x106C174", VA = "0x106C174")]
			[DebuggerHidden]
			public <EmptyEnumerator>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000618")]
			[Address(RVA = "0x106C1A0", Offset = "0x106C1A0", VA = "0x106C1A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000619")]
			[Address(RVA = "0x106C1A4", Offset = "0x106C1A4", VA = "0x106C1A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600061B")]
			[Address(RVA = "0x106C1C4", Offset = "0x106C1C4", VA = "0x106C1C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000120")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B07EC", Offset = "0x8B07EC")]
		private sealed class <PublishPocoValueChanged>d__4<TSource, TProperty> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40002E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40002EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TProperty firstValue;

			[Token(Token = "0x40002EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WeakReference sourceReference;

			[Token(Token = "0x40002EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, TProperty> propertySelector;

			[Token(Token = "0x40002ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<TProperty> observer;

			[Token(Token = "0x40002EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEqualityComparer<TProperty> comparer;

			[Token(Token = "0x40002EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40002F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TProperty <prevValue>5__2;

			[Token(Token = "0x170000C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000620")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000622")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600061D")]
			[DebuggerHidden]
			public <PublishPocoValueChanged>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600061E")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600061F")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000621")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000121")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B07FC", Offset = "0x8B07FC")]
		private sealed class <PublishUnityObjectValueChanged>d__5<TSource, TProperty> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40002F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40002F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TProperty firstValue;

			[Token(Token = "0x40002F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Object unityObject;

			[Token(Token = "0x40002F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool fastDestroyCheck;

			[Token(Token = "0x40002F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, TProperty> propertySelector;

			[Token(Token = "0x40002F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<TProperty> observer;

			[Token(Token = "0x40002F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEqualityComparer<TProperty> comparer;

			[Token(Token = "0x40002F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40002FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TProperty <prevValue>5__2;

			[Token(Token = "0x40002FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TSource <source>5__3;

			[Token(Token = "0x40002FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ObservableDestroyTrigger <destroyTrigger>5__4;

			[Token(Token = "0x170000C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000626")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000628")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000623")]
			[DebuggerHidden]
			public <PublishUnityObjectValueChanged>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000624")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000625")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000627")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600060C")]
		public static IObservable<TProperty> ObserveEveryValueChanged<TSource, TProperty>(this TSource source, Func<TSource, TProperty> propertySelector, FrameCountType frameCountType = FrameCountType.Update, bool fastDestroyCheck = false) where TSource : class
		{
			return null;
		}

		[Token(Token = "0x600060D")]
		public static IObservable<TProperty> ObserveEveryValueChanged<TSource, TProperty>(this TSource source, Func<TSource, TProperty> propertySelector, FrameCountType frameCountType, IEqualityComparer<TProperty> comparer) where TSource : class
		{
			return null;
		}

		[Token(Token = "0x600060E")]
		public static IObservable<TProperty> ObserveEveryValueChanged<TSource, TProperty>(this TSource source, Func<TSource, TProperty> propertySelector, FrameCountType frameCountType, IEqualityComparer<TProperty> comparer, bool fastDestroyCheck) where TSource : class
		{
			return null;
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x12C13A8", Offset = "0x12C13A8", VA = "0x12C13A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B7D2C", Offset = "0x8B7D2C")]
		private static IEnumerator EmptyEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000610")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B7D8C", Offset = "0x8B7D8C")]
		private static IEnumerator PublishPocoValueChanged<TSource, TProperty>(WeakReference sourceReference, TProperty firstValue, Func<TSource, TProperty> propertySelector, IEqualityComparer<TProperty> comparer, IObserver<TProperty> observer, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6000611")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B7DEC", Offset = "0x8B7DEC")]
		private static IEnumerator PublishUnityObjectValueChanged<TSource, TProperty>(UnityEngine.Object unityObject, TProperty firstValue, Func<TSource, TProperty> propertySelector, IEqualityComparer<TProperty> comparer, IObserver<TProperty> observer, CancellationToken cancellationToken, bool fastDestroyCheck)
		{
			return null;
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x12C1404", Offset = "0x12C1404", VA = "0x12C1404")]
		private static ObservableDestroyTrigger GetOrAddDestroyTrigger(GameObject go)
		{
			return null;
		}
	}
	[Token(Token = "0x2000122")]
	public struct CollectionAddEvent<T> : IEquatable<CollectionAddEvent<T>>
	{
		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2760", Offset = "0x8B2760")]
		private int <Index>k__BackingField;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2770", Offset = "0x8B2770")]
		private T <Value>k__BackingField;

		[Token(Token = "0x170000C5")]
		public int Index
		{
			[Token(Token = "0x6000629")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7F3C", Offset = "0x8B7F3C")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x600062A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7F74", Offset = "0x8B7F74")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public T Value
		{
			[Token(Token = "0x600062B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7F84", Offset = "0x8B7F84")]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x600062C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7FBC", Offset = "0x8B7FBC")]
			private set
			{
			}
		}

		[Token(Token = "0x600062D")]
		public CollectionAddEvent(int index, T value)
		{
		}

		[Token(Token = "0x600062E")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600062F")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000630")]
		public bool Equals(CollectionAddEvent<T> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000123")]
	public struct CollectionRemoveEvent<T> : IEquatable<CollectionRemoveEvent<T>>
	{
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2780", Offset = "0x8B2780")]
		private int <Index>k__BackingField;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2790", Offset = "0x8B2790")]
		private T <Value>k__BackingField;

		[Token(Token = "0x170000C7")]
		public int Index
		{
			[Token(Token = "0x6000631")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B7FCC", Offset = "0x8B7FCC")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000632")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8004", Offset = "0x8B8004")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public T Value
		{
			[Token(Token = "0x6000633")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8014", Offset = "0x8B8014")]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x6000634")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B804C", Offset = "0x8B804C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000635")]
		public CollectionRemoveEvent(int index, T value)
		{
		}

		[Token(Token = "0x6000636")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000637")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000638")]
		public bool Equals(CollectionRemoveEvent<T> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000124")]
	public struct CollectionMoveEvent<T> : IEquatable<CollectionMoveEvent<T>>
	{
		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27A0", Offset = "0x8B27A0")]
		private int <OldIndex>k__BackingField;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27B0", Offset = "0x8B27B0")]
		private int <NewIndex>k__BackingField;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27C0", Offset = "0x8B27C0")]
		private T <Value>k__BackingField;

		[Token(Token = "0x170000C9")]
		public int OldIndex
		{
			[Token(Token = "0x6000639")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B805C", Offset = "0x8B805C")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x600063A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8094", Offset = "0x8B8094")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public int NewIndex
		{
			[Token(Token = "0x600063B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B80A4", Offset = "0x8B80A4")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x600063C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B80DC", Offset = "0x8B80DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public T Value
		{
			[Token(Token = "0x600063D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B80EC", Offset = "0x8B80EC")]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x600063E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8124", Offset = "0x8B8124")]
			private set
			{
			}
		}

		[Token(Token = "0x600063F")]
		public CollectionMoveEvent(int oldIndex, int newIndex, T value)
		{
		}

		[Token(Token = "0x6000640")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000642")]
		public bool Equals(CollectionMoveEvent<T> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000125")]
	public struct CollectionReplaceEvent<T> : IEquatable<CollectionReplaceEvent<T>>
	{
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27D0", Offset = "0x8B27D0")]
		private int <Index>k__BackingField;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27E0", Offset = "0x8B27E0")]
		private T <OldValue>k__BackingField;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B27F0", Offset = "0x8B27F0")]
		private T <NewValue>k__BackingField;

		[Token(Token = "0x170000CC")]
		public int Index
		{
			[Token(Token = "0x6000643")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8134", Offset = "0x8B8134")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B816C", Offset = "0x8B816C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public T OldValue
		{
			[Token(Token = "0x6000645")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B817C", Offset = "0x8B817C")]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x6000646")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B81B4", Offset = "0x8B81B4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public T NewValue
		{
			[Token(Token = "0x6000647")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B81C4", Offset = "0x8B81C4")]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x6000648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B81FC", Offset = "0x8B81FC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000649")]
		public CollectionReplaceEvent(int index, T oldValue, T newValue)
		{
		}

		[Token(Token = "0x600064A")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600064B")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600064C")]
		public bool Equals(CollectionReplaceEvent<T> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x8B080C", Offset = "0x8B080C")]
	public interface IReadOnlyReactiveCollection<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x170000CF")]
		int Count
		{
			[Token(Token = "0x600064D")]
			get;
		}

		[Token(Token = "0x170000D0")]
		T Item
		{
			[Token(Token = "0x600064E")]
			get;
		}

		[Token(Token = "0x600064F")]
		IObservable<CollectionAddEvent<T>> ObserveAdd();

		[Token(Token = "0x6000650")]
		IObservable<int> ObserveCountChanged(bool notifyCurrentCount = false);

		[Token(Token = "0x6000651")]
		IObservable<CollectionMoveEvent<T>> ObserveMove();

		[Token(Token = "0x6000652")]
		IObservable<CollectionRemoveEvent<T>> ObserveRemove();

		[Token(Token = "0x6000653")]
		IObservable<CollectionReplaceEvent<T>> ObserveReplace();

		[Token(Token = "0x6000654")]
		IObservable<Unit> ObserveReset();
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x8B0844", Offset = "0x8B0844")]
	public interface IReactiveCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyReactiveCollection<T>
	{
		[Token(Token = "0x170000D1")]
		new int Count
		{
			[Token(Token = "0x6000655")]
			get;
		}

		[Token(Token = "0x170000D2")]
		new T Item
		{
			[Token(Token = "0x6000656")]
			get;
			[Token(Token = "0x6000657")]
			set;
		}

		[Token(Token = "0x6000658")]
		void Move(int oldIndex, int newIndex);
	}
	[Serializable]
	[Token(Token = "0x2000128")]
	public class ReactiveCollection<T> : Collection<T>, IReactiveCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyReactiveCollection<T>, IDisposable
	{
		[NonSerialized]
		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[NonSerialized]
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<int> countChanged;

		[NonSerialized]
		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<Unit> collectionReset;

		[NonSerialized]
		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<CollectionAddEvent<T>> collectionAdd;

		[NonSerialized]
		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<CollectionMoveEvent<T>> collectionMove;

		[NonSerialized]
		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<CollectionRemoveEvent<T>> collectionRemove;

		[NonSerialized]
		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<CollectionReplaceEvent<T>> collectionReplace;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposedValue;

		[Token(Token = "0x6000659")]
		public ReactiveCollection()
		{
		}

		[Token(Token = "0x600065A")]
		public ReactiveCollection(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x600065B")]
		public ReactiveCollection(List<T> list)
		{
		}

		[Token(Token = "0x600065C")]
		protected override void ClearItems()
		{
		}

		[Token(Token = "0x600065D")]
		protected override void InsertItem(int index, T item)
		{
		}

		[Token(Token = "0x600065E")]
		public void Move(int oldIndex, int newIndex)
		{
		}

		[Token(Token = "0x600065F")]
		protected virtual void MoveItem(int oldIndex, int newIndex)
		{
		}

		[Token(Token = "0x6000660")]
		protected override void RemoveItem(int index)
		{
		}

		[Token(Token = "0x6000661")]
		protected override void SetItem(int index, T item)
		{
		}

		[Token(Token = "0x6000662")]
		public IObservable<int> ObserveCountChanged(bool notifyCurrentCount = false)
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		public IObservable<Unit> ObserveReset()
		{
			return null;
		}

		[Token(Token = "0x6000664")]
		public IObservable<CollectionAddEvent<T>> ObserveAdd()
		{
			return null;
		}

		[Token(Token = "0x6000665")]
		public IObservable<CollectionMoveEvent<T>> ObserveMove()
		{
			return null;
		}

		[Token(Token = "0x6000666")]
		public IObservable<CollectionRemoveEvent<T>> ObserveRemove()
		{
			return null;
		}

		[Token(Token = "0x6000667")]
		public IObservable<CollectionReplaceEvent<T>> ObserveReplace()
		{
			return null;
		}

		[Token(Token = "0x6000668")]
		private void DisposeSubject<TSubject>(ref Subject<TSubject> subject)
		{
		}

		[Token(Token = "0x6000669")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600066A")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600066B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B820C", Offset = "0x8B820C")]
		private int <ObserveCountChanged>b__11_0()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000129")]
	public static class ReactiveCollectionExtensions
	{
		[Token(Token = "0x600066C")]
		public static ReactiveCollection<T> ToReactiveCollection<T>(this IEnumerable<T> source)
		{
			return null;
		}
	}
	[Token(Token = "0x200012A")]
	public interface IReactiveCommand<T> : IObservable<T>
	{
		[Token(Token = "0x170000D3")]
		IReadOnlyReactiveProperty<bool> CanExecute
		{
			[Token(Token = "0x600066D")]
			get;
		}

		[Token(Token = "0x600066E")]
		bool Execute(T parameter);

		[Token(Token = "0x600066F")]
		UniTask<T> WaitUntilExecuteAsync(CancellationToken cancellationToken);
	}
	[Token(Token = "0x200012B")]
	public interface IAsyncReactiveCommand<T>
	{
		[Token(Token = "0x170000D4")]
		IReadOnlyReactiveProperty<bool> CanExecute
		{
			[Token(Token = "0x6000670")]
			get;
		}

		[Token(Token = "0x6000671")]
		IDisposable Execute(T parameter);

		[Token(Token = "0x6000672")]
		IDisposable Subscribe(Func<T, IObservable<Unit>> asyncAction);

		[Token(Token = "0x6000673")]
		UniTask<T> WaitUntilExecuteAsync(CancellationToken cancellationToken);
	}
	[Token(Token = "0x200012C")]
	public class ReactiveCommand : ReactiveCommand<Unit>
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x12C7690", Offset = "0x12C7690", VA = "0x12C7690")]
		public ReactiveCommand()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x12C7708", Offset = "0x12C7708", VA = "0x12C7708")]
		public ReactiveCommand(IObservable<bool> canExecuteSource, bool initialValue = true)
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x12C7798", Offset = "0x12C7798", VA = "0x12C7798")]
		public bool Execute()
		{
			return default(bool);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x12C785C", Offset = "0x12C785C", VA = "0x12C785C")]
		public void ForceExecute()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class ReactiveCommand<T> : IReactiveCommand<T>, IObservable<T>, IDisposable
	{
		[Serializable]
		[Token(Token = "0x200012E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B088C", Offset = "0x8B088C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<bool, ReactiveProperty<bool>> <>9__10_0;

			[Token(Token = "0x6000685")]
			public <>c()
			{
			}

			[Token(Token = "0x6000686")]
			internal void <.ctor>b__10_0(bool b, ReactiveProperty<bool> c)
			{
			}
		}

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Subject<T> trigger;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDisposable canExecuteSubscription;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReactiveProperty<bool> canExecute;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2800", Offset = "0x8B2800")]
		private bool <IsDisposed>k__BackingField;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> Callback;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReactivePropertyReusablePromise<T> commonPromise;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<CancellationToken, ReactivePropertyReusablePromise<T>> removablePromises;

		[Token(Token = "0x170000D5")]
		public IReadOnlyReactiveProperty<bool> CanExecute
		{
			[Token(Token = "0x6000678")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D6")]
		public bool IsDisposed
		{
			[Token(Token = "0x6000679")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B822C", Offset = "0x8B822C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B823C", Offset = "0x8B823C")]
			private set
			{
			}
		}

		[Token(Token = "0x600067B")]
		public ReactiveCommand()
		{
		}

		[Token(Token = "0x600067C")]
		public ReactiveCommand(IObservable<bool> canExecuteSource, bool initialValue = true)
		{
		}

		[Token(Token = "0x600067D")]
		public bool Execute(T parameter)
		{
			return default(bool);
		}

		[Token(Token = "0x600067E")]
		public void ForceExecute(T parameter)
		{
		}

		[Token(Token = "0x600067F")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000680")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000681")]
		public UniTask<T> WaitUntilExecuteAsync(CancellationToken cancellationToken)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000682")]
		private static void CancelCallback(object state)
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class AsyncReactiveCommand : AsyncReactiveCommand<Unit>
	{
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x1181124", Offset = "0x1181124", VA = "0x1181124")]
		public AsyncReactiveCommand()
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x118119C", Offset = "0x118119C", VA = "0x118119C")]
		public AsyncReactiveCommand(IObservable<bool> canExecuteSource)
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1181224", Offset = "0x1181224", VA = "0x1181224")]
		public AsyncReactiveCommand(IReactiveProperty<bool> sharedCanExecute)
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x11812AC", Offset = "0x11812AC", VA = "0x11812AC")]
		public IDisposable Execute()
		{
			return null;
		}
	}
	[Token(Token = "0x2000130")]
	public class AsyncReactiveCommand<T> : IAsyncReactiveCommand<T>
	{
		[Token(Token = "0x2000131")]
		private class Subscription : IDisposable
		{
			[Token(Token = "0x4000320")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AsyncReactiveCommand<T> parent;

			[Token(Token = "0x4000321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, IObservable<Unit>> asyncAction;

			[Token(Token = "0x6000699")]
			public Subscription(AsyncReactiveCommand<T> parent, Func<T, IObservable<Unit>> asyncAction)
			{
			}

			[Token(Token = "0x600069A")]
			public void Dispose()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000132")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B089C", Offset = "0x8B089C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<bool, bool, bool> <>9__11_0;

			[Token(Token = "0x600069C")]
			public <>c()
			{
			}

			[Token(Token = "0x600069D")]
			internal bool <.ctor>b__11_0(bool x, bool y)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ImmutableList<Func<T, IObservable<Unit>>> asyncActions;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IReactiveProperty<bool> canExecuteSource;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IReadOnlyReactiveProperty<bool> canExecute;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2810", Offset = "0x8B2810")]
		private bool <IsDisposed>k__BackingField;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> Callback;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReactivePropertyReusablePromise<T> commonPromise;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<CancellationToken, ReactivePropertyReusablePromise<T>> removablePromises;

		[Token(Token = "0x170000D7")]
		public IReadOnlyReactiveProperty<bool> CanExecute
		{
			[Token(Token = "0x600068B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D8")]
		public bool IsDisposed
		{
			[Token(Token = "0x600068C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B824C", Offset = "0x8B824C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600068D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B825C", Offset = "0x8B825C")]
			private set
			{
			}
		}

		[Token(Token = "0x600068E")]
		public AsyncReactiveCommand()
		{
		}

		[Token(Token = "0x600068F")]
		public AsyncReactiveCommand(IObservable<bool> canExecuteSource)
		{
		}

		[Token(Token = "0x6000690")]
		public AsyncReactiveCommand(IReactiveProperty<bool> sharedCanExecute)
		{
		}

		[Token(Token = "0x6000691")]
		public IDisposable Execute(T parameter)
		{
			return null;
		}

		[Token(Token = "0x6000692")]
		public IDisposable Subscribe(Func<T, IObservable<Unit>> asyncAction)
		{
			return null;
		}

		[Token(Token = "0x6000693")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000694")]
		public UniTask<T> WaitUntilExecuteAsync(CancellationToken cancellationToken)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000695")]
		private static void CancelCallback(object state)
		{
		}

		[Token(Token = "0x6000697")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B826C", Offset = "0x8B826C")]
		private void <Execute>b__13_0()
		{
		}

		[Token(Token = "0x6000698")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B827C", Offset = "0x8B827C")]
		private void <Execute>b__13_1()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public static class ReactiveCommandExtensions
	{
		[Serializable]
		[Token(Token = "0x2000134")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B08BC", Offset = "0x8B08BC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Unit, IReactiveCommand<Unit>> <>9__3_0;

			[Token(Token = "0x4000326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<Unit, IReactiveCommand<Unit>> <>9__4_0;

			[Token(Token = "0x60006A5")]
			[Address(RVA = "0x106C8D4", Offset = "0x106C8D4", VA = "0x106C8D4")]
			public <>c()
			{
			}

			[Token(Token = "0x60006A6")]
			[Address(RVA = "0x106C8DC", Offset = "0x106C8DC", VA = "0x106C8DC")]
			internal void <BindTo>b__3_0(Unit x, IReactiveCommand<Unit> c)
			{
			}

			[Token(Token = "0x60006A7")]
			[Address(RVA = "0x106C99C", Offset = "0x106C99C", VA = "0x106C99C")]
			internal void <BindToOnClick>b__4_0(Unit x, IReactiveCommand<Unit> c)
			{
			}
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x12C7920", Offset = "0x12C7920", VA = "0x12C7920")]
		public static ReactiveCommand ToReactiveCommand(this IObservable<bool> canExecuteSource, bool initialValue = true)
		{
			return null;
		}

		[Token(Token = "0x600069F")]
		public static ReactiveCommand<T> ToReactiveCommand<T>(this IObservable<bool> canExecuteSource, bool initialValue = true)
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		public static UniTask<T>.Awaiter GetAwaiter<T>(this IReactiveCommand<T> command)
		{
			return default(UniTask<T>.Awaiter);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x12C798C", Offset = "0x12C798C", VA = "0x12C798C")]
		public static IDisposable BindTo(this IReactiveCommand<Unit> command, Button button)
		{
			return null;
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x12C7B68", Offset = "0x12C7B68", VA = "0x12C7B68")]
		public static IDisposable BindToOnClick(this IReactiveCommand<Unit> command, Button button, Action<Unit> onClick)
		{
			return null;
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x12C7D7C", Offset = "0x12C7D7C", VA = "0x12C7D7C")]
		public static IDisposable BindToButtonOnClick(this IObservable<bool> canExecuteSource, Button button, Action<Unit> onClick, bool initialValue = true)
		{
			return null;
		}
	}
	[Token(Token = "0x2000135")]
	public static class AsyncReactiveCommandExtensions
	{
		[Serializable]
		[Token(Token = "0x2000136")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B08DC", Offset = "0x8B08DC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000328")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Unit, IAsyncReactiveCommand<Unit>> <>9__3_0;

			[Token(Token = "0x4000329")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<Unit, IAsyncReactiveCommand<Unit>> <>9__4_0;

			[Token(Token = "0x60006B0")]
			[Address(RVA = "0x10BAF8C", Offset = "0x10BAF8C", VA = "0x10BAF8C")]
			public <>c()
			{
			}

			[Token(Token = "0x60006B1")]
			[Address(RVA = "0x10BAF94", Offset = "0x10BAF94", VA = "0x10BAF94")]
			internal void <BindTo>b__3_0(Unit x, IAsyncReactiveCommand<Unit> c)
			{
			}

			[Token(Token = "0x60006B2")]
			[Address(RVA = "0x10BB054", Offset = "0x10BB054", VA = "0x10BB054")]
			internal void <BindToOnClick>b__4_0(Unit x, IAsyncReactiveCommand<Unit> c)
			{
			}
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x1181370", Offset = "0x1181370", VA = "0x1181370")]
		public static AsyncReactiveCommand ToAsyncReactiveCommand(this IReactiveProperty<bool> sharedCanExecuteSource)
		{
			return null;
		}

		[Token(Token = "0x60006A9")]
		public static AsyncReactiveCommand<T> ToAsyncReactiveCommand<T>(this IReactiveProperty<bool> sharedCanExecuteSource)
		{
			return null;
		}

		[Token(Token = "0x60006AA")]
		public static UniTask<T>.Awaiter GetAwaiter<T>(this IAsyncReactiveCommand<T> command)
		{
			return default(UniTask<T>.Awaiter);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x11813CC", Offset = "0x11813CC", VA = "0x11813CC")]
		public static IDisposable BindTo(this IAsyncReactiveCommand<Unit> command, Button button)
		{
			return null;
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x11815A8", Offset = "0x11815A8", VA = "0x11815A8")]
		public static IDisposable BindToOnClick(this IAsyncReactiveCommand<Unit> command, Button button, Func<Unit, IObservable<Unit>> asyncOnClick)
		{
			return null;
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1181800", Offset = "0x1181800", VA = "0x1181800")]
		public static IDisposable BindToOnClick(this Button button, Func<Unit, IObservable<Unit>> asyncOnClick)
		{
			return null;
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x118186C", Offset = "0x118186C", VA = "0x118186C")]
		public static IDisposable BindToOnClick(this Button button, IReactiveProperty<bool> sharedCanExecuteSource, Func<Unit, IObservable<Unit>> asyncOnClick)
		{
			return null;
		}
	}
	[Token(Token = "0x2000137")]
	public struct DictionaryAddEvent<TKey, TValue> : IEquatable<DictionaryAddEvent<TKey, TValue>>
	{
		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2820", Offset = "0x8B2820")]
		private TKey <Key>k__BackingField;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2830", Offset = "0x8B2830")]
		private TValue <Value>k__BackingField;

		[Token(Token = "0x170000D9")]
		public TKey Key
		{
			[Token(Token = "0x60006B3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B835C", Offset = "0x8B835C")]
			readonly get
			{
				return (TKey)null;
			}
			[Token(Token = "0x60006B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8394", Offset = "0x8B8394")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public TValue Value
		{
			[Token(Token = "0x60006B5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B83A4", Offset = "0x8B83A4")]
			readonly get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60006B6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B83DC", Offset = "0x8B83DC")]
			private set
			{
			}
		}

		[Token(Token = "0x60006B7")]
		public DictionaryAddEvent(TKey key, TValue value)
		{
		}

		[Token(Token = "0x60006B8")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006B9")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006BA")]
		public bool Equals(DictionaryAddEvent<TKey, TValue> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000138")]
	public struct DictionaryRemoveEvent<TKey, TValue> : IEquatable<DictionaryRemoveEvent<TKey, TValue>>
	{
		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2840", Offset = "0x8B2840")]
		private TKey <Key>k__BackingField;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2850", Offset = "0x8B2850")]
		private TValue <Value>k__BackingField;

		[Token(Token = "0x170000DB")]
		public TKey Key
		{
			[Token(Token = "0x60006BB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B83EC", Offset = "0x8B83EC")]
			readonly get
			{
				return (TKey)null;
			}
			[Token(Token = "0x60006BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8424", Offset = "0x8B8424")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public TValue Value
		{
			[Token(Token = "0x60006BD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8434", Offset = "0x8B8434")]
			readonly get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60006BE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B846C", Offset = "0x8B846C")]
			private set
			{
			}
		}

		[Token(Token = "0x60006BF")]
		public DictionaryRemoveEvent(TKey key, TValue value)
		{
		}

		[Token(Token = "0x60006C0")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006C1")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006C2")]
		public bool Equals(DictionaryRemoveEvent<TKey, TValue> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000139")]
	public struct DictionaryReplaceEvent<TKey, TValue> : IEquatable<DictionaryReplaceEvent<TKey, TValue>>
	{
		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2860", Offset = "0x8B2860")]
		private TKey <Key>k__BackingField;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2870", Offset = "0x8B2870")]
		private TValue <OldValue>k__BackingField;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2880", Offset = "0x8B2880")]
		private TValue <NewValue>k__BackingField;

		[Token(Token = "0x170000DD")]
		public TKey Key
		{
			[Token(Token = "0x60006C3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B847C", Offset = "0x8B847C")]
			readonly get
			{
				return (TKey)null;
			}
			[Token(Token = "0x60006C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B84B4", Offset = "0x8B84B4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public TValue OldValue
		{
			[Token(Token = "0x60006C5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B84C4", Offset = "0x8B84C4")]
			readonly get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60006C6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B84FC", Offset = "0x8B84FC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public TValue NewValue
		{
			[Token(Token = "0x60006C7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B850C", Offset = "0x8B850C")]
			readonly get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60006C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8544", Offset = "0x8B8544")]
			private set
			{
			}
		}

		[Token(Token = "0x60006C9")]
		public DictionaryReplaceEvent(TKey key, TValue oldValue, TValue newValue)
		{
		}

		[Token(Token = "0x60006CA")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006CB")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006CC")]
		public bool Equals(DictionaryReplaceEvent<TKey, TValue> other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x8B08EC", Offset = "0x8B08EC")]
	public interface IReadOnlyReactiveDictionary<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
	{
		[Token(Token = "0x170000E0")]
		int Count
		{
			[Token(Token = "0x60006CD")]
			get;
		}

		[Token(Token = "0x170000E1")]
		TValue Item
		{
			[Token(Token = "0x60006CE")]
			get;
		}

		[Token(Token = "0x60006CF")]
		bool ContainsKey(TKey key);

		[Token(Token = "0x60006D0")]
		bool TryGetValue(TKey key, out TValue value);

		[Token(Token = "0x60006D1")]
		IObservable<DictionaryAddEvent<TKey, TValue>> ObserveAdd();

		[Token(Token = "0x60006D2")]
		IObservable<int> ObserveCountChanged(bool notifyCurrentCount = false);

		[Token(Token = "0x60006D3")]
		IObservable<DictionaryRemoveEvent<TKey, TValue>> ObserveRemove();

		[Token(Token = "0x60006D4")]
		IObservable<DictionaryReplaceEvent<TKey, TValue>> ObserveReplace();

		[Token(Token = "0x60006D5")]
		IObservable<Unit> ObserveReset();
	}
	[Token(Token = "0x200013B")]
	public interface IReactiveDictionary<TKey, TValue> : IReadOnlyReactiveDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>
	{
	}
	[Serializable]
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x8B0924", Offset = "0x8B0924")]
	public class ReactiveDictionary<TKey, TValue> : IReactiveDictionary<TKey, TValue>, IReadOnlyReactiveDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IDisposable, ISerializable, IDeserializationCallback
	{
		[NonSerialized]
		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private readonly Dictionary<TKey, TValue> inner;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposedValue;

		[NonSerialized]
		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<int> countChanged;

		[NonSerialized]
		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<Unit> collectionReset;

		[NonSerialized]
		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<DictionaryAddEvent<TKey, TValue>> dictionaryAdd;

		[NonSerialized]
		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<DictionaryRemoveEvent<TKey, TValue>> dictionaryRemove;

		[NonSerialized]
		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Subject<DictionaryReplaceEvent<TKey, TValue>> dictionaryReplace;

		[Token(Token = "0x170000E2")]
		public TValue Item
		{
			[Token(Token = "0x60006D9")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60006DA")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public int Count
		{
			[Token(Token = "0x60006DB")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E4")]
		public Dictionary<TKey, TValue>.KeyCollection Keys
		{
			[Token(Token = "0x60006DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public Dictionary<TKey, TValue>.ValueCollection Values
		{
			[Token(Token = "0x60006DD")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x60006EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006ED")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x60006EE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Token(Token = "0x60006EF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E9")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x60006F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EA")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x60006F1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x60006F2")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x60006F3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
		{
			[Token(Token = "0x60006F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EE")]
		private ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys
		{
			[Token(Token = "0x60006F5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values
		{
			[Token(Token = "0x60006F6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D6")]
		public ReactiveDictionary()
		{
		}

		[Token(Token = "0x60006D7")]
		public ReactiveDictionary(IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x60006D8")]
		public ReactiveDictionary(Dictionary<TKey, TValue> innerDictionary)
		{
		}

		[Token(Token = "0x60006DE")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x60006DF")]
		public void Clear()
		{
		}

		[Token(Token = "0x60006E0")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E1")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E2")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E3")]
		public Dictionary<TKey, TValue>.Enumerator GetEnumerator()
		{
			return default(Dictionary<TKey, TValue>.Enumerator);
		}

		[Token(Token = "0x60006E4")]
		private void DisposeSubject<TSubject>(ref Subject<TSubject> subject)
		{
		}

		[Token(Token = "0x60006E5")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60006E6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60006E7")]
		public IObservable<int> ObserveCountChanged(bool notifyCurrentCount = false)
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		public IObservable<Unit> ObserveReset()
		{
			return null;
		}

		[Token(Token = "0x60006E9")]
		public IObservable<DictionaryAddEvent<TKey, TValue>> ObserveAdd()
		{
			return null;
		}

		[Token(Token = "0x60006EA")]
		public IObservable<DictionaryRemoveEvent<TKey, TValue>> ObserveRemove()
		{
			return null;
		}

		[Token(Token = "0x60006EB")]
		public IObservable<DictionaryReplaceEvent<TKey, TValue>> ObserveReplace()
		{
			return null;
		}

		[Token(Token = "0x60006F7")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x60006F8")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F9")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x60006FA")]
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
		}

		[Token(Token = "0x60006FB")]
		public void OnDeserialization(object sender)
		{
		}

		[Token(Token = "0x60006FC")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Token(Token = "0x60006FD")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x60006FE")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FF")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000700")]
		private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000701")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000702")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000703")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000704")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8554", Offset = "0x8B8554")]
		private int <ObserveCountChanged>b__25_0()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200013D")]
	public static class ReactiveDictionaryExtensions
	{
		[Token(Token = "0x6000705")]
		public static ReactiveDictionary<TKey, TValue> ToReactiveDictionary<TKey, TValue>(this Dictionary<TKey, TValue> dictionary)
		{
			return null;
		}
	}
	[Token(Token = "0x200013E")]
	public interface IReadOnlyReactiveProperty<T> : IObservable<T>
	{
		[Token(Token = "0x170000F0")]
		T Value
		{
			[Token(Token = "0x6000706")]
			get;
		}

		[Token(Token = "0x170000F1")]
		bool HasValue
		{
			[Token(Token = "0x6000707")]
			get;
		}

		[Token(Token = "0x6000708")]
		UniTask<T> WaitUntilValueChangedAsync(CancellationToken cancellationToken);
	}
	[Token(Token = "0x200013F")]
	public interface IReactiveProperty<T> : IReadOnlyReactiveProperty<T>, IObservable<T>
	{
		[Token(Token = "0x170000F2")]
		new T Value
		{
			[Token(Token = "0x6000709")]
			get;
			[Token(Token = "0x600070A")]
			set;
		}
	}
	[Token(Token = "0x2000140")]
	internal interface IObserverLinkedList<T>
	{
		[Token(Token = "0x600070B")]
		void UnsubscribeNode(ObserverNode<T> node);
	}
	[Token(Token = "0x2000141")]
	internal sealed class ObserverNode<T> : IObserver<T>, IDisposable
	{
		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObserver<T> observer;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObserverLinkedList<T> list;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B28A0", Offset = "0x8B28A0")]
		private ObserverNode<T> <Previous>k__BackingField;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B28B0", Offset = "0x8B28B0")]
		private ObserverNode<T> <Next>k__BackingField;

		[Token(Token = "0x170000F3")]
		public ObserverNode<T> Previous
		{
			[Token(Token = "0x600070C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8574", Offset = "0x8B8574")]
			get
			{
				return null;
			}
			[Token(Token = "0x600070D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8584", Offset = "0x8B8584")]
			internal set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public ObserverNode<T> Next
		{
			[Token(Token = "0x600070E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8594", Offset = "0x8B8594")]
			get
			{
				return null;
			}
			[Token(Token = "0x600070F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B85A4", Offset = "0x8B85A4")]
			internal set
			{
			}
		}

		[Token(Token = "0x6000710")]
		public ObserverNode(IObserverLinkedList<T> list, IObserver<T> observer)
		{
		}

		[Token(Token = "0x6000711")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000712")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000713")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000714")]
		public void Dispose()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000142")]
	public class ReactiveProperty<T> : IReactiveProperty<T>, IReadOnlyReactiveProperty<T>, IObservable<T>, IDisposable, IOptimizedObservable<T>, IObserverLinkedList<T>
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IEqualityComparer<T> defaultEqualityComparer;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private T value;

		[NonSerialized]
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ObserverNode<T> root;

		[NonSerialized]
		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ObserverNode<T> last;

		[NonSerialized]
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> Callback;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReactivePropertyReusablePromise<T> commonPromise;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<CancellationToken, ReactivePropertyReusablePromise<T>> removablePromises;

		[Token(Token = "0x170000F5")]
		protected virtual IEqualityComparer<T> EqualityComparer
		{
			[Token(Token = "0x6000715")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public T Value
		{
			[Token(Token = "0x6000716")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000717")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool HasValue
		{
			[Token(Token = "0x6000718")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000719")]
		public ReactiveProperty()
		{
		}

		[Token(Token = "0x600071A")]
		public ReactiveProperty(T initialValue)
		{
		}

		[Token(Token = "0x600071B")]
		private void RaiseOnNext(ref T value)
		{
		}

		[Token(Token = "0x600071C")]
		protected virtual void SetValue(T value)
		{
		}

		[Token(Token = "0x600071D")]
		public void SetValueAndForceNotify(T value)
		{
		}

		[Token(Token = "0x600071E")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x600071F")]
		private void UniRx.IObserverLinkedList<T>.UnsubscribeNode(ObserverNode<T> node)
		{
		}

		[Token(Token = "0x6000720")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000721")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000722")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000723")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000724")]
		public UniTask<T> WaitUntilValueChangedAsync(CancellationToken cancellationToken)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000725")]
		private static void CancelCallback(object state)
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class ReadOnlyReactiveProperty<T> : IReadOnlyReactiveProperty<T>, IObservable<T>, IDisposable, IOptimizedObservable<T>, IObserverLinkedList<T>, IObserver<T>
	{
		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IEqualityComparer<T> defaultEqualityComparer;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool distinctUntilChanged;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool canPublishValueOnSubscribe;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isSourceCompleted;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T latestValue;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception lastException;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IDisposable sourceConnection;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ObserverNode<T> root;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ObserverNode<T> last;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> Callback;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReactivePropertyReusablePromise<T> commonPromise;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<CancellationToken, ReactivePropertyReusablePromise<T>> removablePromises;

		[Token(Token = "0x170000F8")]
		public T Value
		{
			[Token(Token = "0x6000727")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x170000F9")]
		public bool HasValue
		{
			[Token(Token = "0x6000728")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FA")]
		protected virtual IEqualityComparer<T> EqualityComparer
		{
			[Token(Token = "0x6000729")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600072A")]
		public ReadOnlyReactiveProperty(IObservable<T> source)
		{
		}

		[Token(Token = "0x600072B")]
		public ReadOnlyReactiveProperty(IObservable<T> source, bool distinctUntilChanged)
		{
		}

		[Token(Token = "0x600072C")]
		public ReadOnlyReactiveProperty(IObservable<T> source, T initialValue)
		{
		}

		[Token(Token = "0x600072D")]
		public ReadOnlyReactiveProperty(IObservable<T> source, T initialValue, bool distinctUntilChanged)
		{
		}

		[Token(Token = "0x600072E")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x600072F")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000730")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000731")]
		private void UniRx.IObserverLinkedList<T>.UnsubscribeNode(ObserverNode<T> node)
		{
		}

		[Token(Token = "0x6000732")]
		private void System.IObserver<T>.OnNext(T value)
		{
		}

		[Token(Token = "0x6000733")]
		private void System.IObserver<T>.OnError(Exception error)
		{
		}

		[Token(Token = "0x6000734")]
		private void System.IObserver<T>.OnCompleted()
		{
		}

		[Token(Token = "0x6000735")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000736")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000737")]
		public UniTask<T> WaitUntilValueChangedAsync(CancellationToken cancellationToken)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000738")]
		private static void CancelCallback(object state)
		{
		}
	}
	[Token(Token = "0x2000144")]
	public static class ReactivePropertyExtensions
	{
		[Serializable]
		[Token(Token = "0x2000145")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B097C", Offset = "0x8B097C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IList<bool>, bool> <>9__8_0;

			[Token(Token = "0x4000354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IList<bool>, bool> <>9__9_0;

			[Token(Token = "0x6000745")]
			[Address(RVA = "0x106CABC", Offset = "0x106CABC", VA = "0x106CABC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000746")]
			[Address(RVA = "0x106CAC4", Offset = "0x106CAC4", VA = "0x106CAC4")]
			internal bool <CombineLatestValuesAreAllTrue>b__8_0(IList<bool> xs)
			{
				return default(bool);
			}

			[Token(Token = "0x6000747")]
			[Address(RVA = "0x106CD88", Offset = "0x106CD88", VA = "0x106CD88")]
			internal bool <CombineLatestValuesAreAllFalse>b__9_0(IList<bool> xs)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600073A")]
		public static IReadOnlyReactiveProperty<T> ToReactiveProperty<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600073B")]
		public static IReadOnlyReactiveProperty<T> ToReactiveProperty<T>(this IObservable<T> source, T initialValue)
		{
			return null;
		}

		[Token(Token = "0x600073C")]
		public static ReadOnlyReactiveProperty<T> ToReadOnlyReactiveProperty<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600073D")]
		public static UniTask<T>.Awaiter GetAwaiter<T>(this IReadOnlyReactiveProperty<T> source)
		{
			return default(UniTask<T>.Awaiter);
		}

		[Token(Token = "0x600073E")]
		public static ReadOnlyReactiveProperty<T> ToSequentialReadOnlyReactiveProperty<T>(this IObservable<T> source)
		{
			return null;
		}

		[Token(Token = "0x600073F")]
		public static ReadOnlyReactiveProperty<T> ToReadOnlyReactiveProperty<T>(this IObservable<T> source, T initialValue)
		{
			return null;
		}

		[Token(Token = "0x6000740")]
		public static ReadOnlyReactiveProperty<T> ToSequentialReadOnlyReactiveProperty<T>(this IObservable<T> source, T initialValue)
		{
			return null;
		}

		[Token(Token = "0x6000741")]
		public static IObservable<T> SkipLatestValueOnSubscribe<T>(this IReadOnlyReactiveProperty<T> source)
		{
			return null;
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x12C7DAC", Offset = "0x12C7DAC", VA = "0x12C7DAC")]
		public static IObservable<bool> CombineLatestValuesAreAllTrue(this IEnumerable<IObservable<bool>> sources)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x12C7F3C", Offset = "0x12C7F3C", VA = "0x12C7F3C")]
		public static IObservable<bool> CombineLatestValuesAreAllFalse(this IEnumerable<IObservable<bool>> sources)
		{
			return null;
		}
	}
	[Token(Token = "0x2000146")]
	internal class ReactivePropertyReusablePromise<T> : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IResolvePromise<T>
	{
		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T result;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object continuation;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MinimumQueue<(int, T)> queueValues;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool running;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int waitingContinuationCount;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private AwaiterStatus status;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly CancellationToken RegisteredCancelationToken;

		[Token(Token = "0x170000FB")]
		public bool IsCompleted
		{
			[Token(Token = "0x6000748")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FC")]
		public UniTask<T> Task
		{
			[Token(Token = "0x6000749")]
			get
			{
				return default(UniTask<T>);
			}
		}

		[Token(Token = "0x170000FD")]
		public AwaiterStatus Status
		{
			[Token(Token = "0x600074A")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x600074B")]
		public ReactivePropertyReusablePromise(CancellationToken cancellationToken)
		{
		}

		[Token(Token = "0x600074C")]
		public T GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x600074D")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x600074E")]
		public void SetCanceled()
		{
		}

		[Token(Token = "0x600074F")]
		public void InvokeContinuation(ref T value)
		{
		}

		[Token(Token = "0x6000750")]
		public void OnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x6000751")]
		public void UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x6000752")]
		private bool UniRx.Async.IResolvePromise<T>.TrySetResult(T value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000147")]
	public static class UnityEventExtensions
	{
		[Token(Token = "0x2000148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B099C", Offset = "0x8B099C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400035C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000758")]
			[Address(RVA = "0x107BE48", Offset = "0x107BE48", VA = "0x107BE48")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6000759")]
			[Address(RVA = "0x107BE50", Offset = "0x107BE50", VA = "0x107BE50")]
			internal void <AsObservable>b__1(UnityAction h)
			{
			}

			[Token(Token = "0x600075A")]
			[Address(RVA = "0x107BE6C", Offset = "0x107BE6C", VA = "0x107BE6C")]
			internal void <AsObservable>b__2(UnityAction h)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000149")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09AC", Offset = "0x8B09AC")]
		private sealed class <>c
		{
			[Token(Token = "0x400035D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400035E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Action, UnityAction> <>9__0_0;

			[Token(Token = "0x600075C")]
			[Address(RVA = "0x107BDC8", Offset = "0x107BDC8", VA = "0x107BDC8")]
			public <>c()
			{
			}

			[Token(Token = "0x600075D")]
			[Address(RVA = "0x107BDD0", Offset = "0x107BDD0", VA = "0x107BDD0")]
			internal UnityAction <AsObservable>b__0_0(Action h)
			{
				return null;
			}
		}

		[Token(Token = "0x200014A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09BC", Offset = "0x8B09BC")]
		private sealed class <>c__DisplayClass1_0<T>
		{
			[Token(Token = "0x400035F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEvent<T> unityEvent;

			[Token(Token = "0x600075E")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x600075F")]
			internal void <AsObservable>b__1(UnityAction<T> h)
			{
			}

			[Token(Token = "0x6000760")]
			internal void <AsObservable>b__2(UnityAction<T> h)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200014B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09CC", Offset = "0x8B09CC")]
		private sealed class <>c__1<T>
		{
			[Token(Token = "0x4000360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__1<T> <>9;

			[Token(Token = "0x4000361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Action<T>, UnityAction<T>> <>9__1_0;

			[Token(Token = "0x6000762")]
			public <>c__1()
			{
			}

			[Token(Token = "0x6000763")]
			internal UnityAction<T> <AsObservable>b__1_0(Action<T> h)
			{
				return null;
			}
		}

		[Token(Token = "0x200014C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09DC", Offset = "0x8B09DC")]
		private sealed class <>c__DisplayClass2_0<T0, T1>
		{
			[Token(Token = "0x4000362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEvent<T0, T1> unityEvent;

			[Token(Token = "0x6000764")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6000765")]
			internal void <AsObservable>b__1(UnityAction<T0, T1> h)
			{
			}

			[Token(Token = "0x6000766")]
			internal void <AsObservable>b__2(UnityAction<T0, T1> h)
			{
			}
		}

		[Token(Token = "0x200014D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09EC", Offset = "0x8B09EC")]
		private sealed class <>c__DisplayClass2_1<T0, T1>
		{
			[Token(Token = "0x4000363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<Tuple<T0, T1>> h;

			[Token(Token = "0x6000767")]
			public <>c__DisplayClass2_1()
			{
			}

			[Token(Token = "0x6000768")]
			internal void <AsObservable>b__3(T0 t0, T1 t1)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200014E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B09FC", Offset = "0x8B09FC")]
		private sealed class <>c__2<T0, T1>
		{
			[Token(Token = "0x4000364")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__2<T0, T1> <>9;

			[Token(Token = "0x4000365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Action<Tuple<T0, T1>>, UnityAction<T0, T1>> <>9__2_0;

			[Token(Token = "0x600076A")]
			public <>c__2()
			{
			}

			[Token(Token = "0x600076B")]
			internal UnityAction<T0, T1> <AsObservable>b__2_0(Action<Tuple<T0, T1>> h)
			{
				return null;
			}
		}

		[Token(Token = "0x200014F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A0C", Offset = "0x8B0A0C")]
		private sealed class <>c__DisplayClass3_0<T0, T1, T2>
		{
			[Token(Token = "0x4000366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEvent<T0, T1, T2> unityEvent;

			[Token(Token = "0x600076C")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600076D")]
			internal void <AsObservable>b__1(UnityAction<T0, T1, T2> h)
			{
			}

			[Token(Token = "0x600076E")]
			internal void <AsObservable>b__2(UnityAction<T0, T1, T2> h)
			{
			}
		}

		[Token(Token = "0x2000150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A1C", Offset = "0x8B0A1C")]
		private sealed class <>c__DisplayClass3_1<T0, T1, T2>
		{
			[Token(Token = "0x4000367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<Tuple<T0, T1, T2>> h;

			[Token(Token = "0x600076F")]
			public <>c__DisplayClass3_1()
			{
			}

			[Token(Token = "0x6000770")]
			internal void <AsObservable>b__3(T0 t0, T1 t1, T2 t2)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000151")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A2C", Offset = "0x8B0A2C")]
		private sealed class <>c__3<T0, T1, T2>
		{
			[Token(Token = "0x4000368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__3<T0, T1, T2> <>9;

			[Token(Token = "0x4000369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Action<Tuple<T0, T1, T2>>, UnityAction<T0, T1, T2>> <>9__3_0;

			[Token(Token = "0x6000772")]
			public <>c__3()
			{
			}

			[Token(Token = "0x6000773")]
			internal UnityAction<T0, T1, T2> <AsObservable>b__3_0(Action<Tuple<T0, T1, T2>> h)
			{
				return null;
			}
		}

		[Token(Token = "0x2000152")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A3C", Offset = "0x8B0A3C")]
		private sealed class <>c__DisplayClass4_0<T0, T1, T2, T3>
		{
			[Token(Token = "0x400036A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEvent<T0, T1, T2, T3> unityEvent;

			[Token(Token = "0x6000774")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6000775")]
			internal void <AsObservable>b__1(UnityAction<T0, T1, T2, T3> h)
			{
			}

			[Token(Token = "0x6000776")]
			internal void <AsObservable>b__2(UnityAction<T0, T1, T2, T3> h)
			{
			}
		}

		[Token(Token = "0x2000153")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A4C", Offset = "0x8B0A4C")]
		private sealed class <>c__DisplayClass4_1<T0, T1, T2, T3>
		{
			[Token(Token = "0x400036B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<Tuple<T0, T1, T2, T3>> h;

			[Token(Token = "0x6000777")]
			public <>c__DisplayClass4_1()
			{
			}

			[Token(Token = "0x6000778")]
			internal void <AsObservable>b__3(T0 t0, T1 t1, T2 t2, T3 t3)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000154")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A5C", Offset = "0x8B0A5C")]
		private sealed class <>c__4<T0, T1, T2, T3>
		{
			[Token(Token = "0x400036C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__4<T0, T1, T2, T3> <>9;

			[Token(Token = "0x400036D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Action<Tuple<T0, T1, T2, T3>>, UnityAction<T0, T1, T2, T3>> <>9__4_0;

			[Token(Token = "0x600077A")]
			public <>c__4()
			{
			}

			[Token(Token = "0x600077B")]
			internal UnityAction<T0, T1, T2, T3> <AsObservable>b__4_0(Action<Tuple<T0, T1, T2, T3>> h)
			{
				return null;
			}
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x10B5504", Offset = "0x10B5504", VA = "0x10B5504")]
		public static IObservable<Unit> AsObservable(this UnityEvent unityEvent)
		{
			return null;
		}

		[Token(Token = "0x6000754")]
		public static IObservable<T> AsObservable<T>(this UnityEvent<T> unityEvent)
		{
			return null;
		}

		[Token(Token = "0x6000755")]
		public static IObservable<Tuple<T0, T1>> AsObservable<T0, T1>(this UnityEvent<T0, T1> unityEvent)
		{
			return null;
		}

		[Token(Token = "0x6000756")]
		public static IObservable<Tuple<T0, T1, T2>> AsObservable<T0, T1, T2>(this UnityEvent<T0, T1, T2> unityEvent)
		{
			return null;
		}

		[Token(Token = "0x6000757")]
		public static IObservable<Tuple<T0, T1, T2, T3>> AsObservable<T0, T1, T2, T3>(this UnityEvent<T0, T1, T2, T3> unityEvent)
		{
			return null;
		}
	}
	[Token(Token = "0x2000155")]
	public static class UnityGraphicExtensions
	{
		[Token(Token = "0x2000156")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A7C", Offset = "0x8B0A7C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400036E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic graphic;

			[Token(Token = "0x600077F")]
			[Address(RVA = "0x107BE88", Offset = "0x107BE88", VA = "0x107BE88")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6000780")]
			[Address(RVA = "0x107BE90", Offset = "0x107BE90", VA = "0x107BE90")]
			internal IDisposable <DirtyLayoutCallbackAsObservable>b__0(IObserver<Unit> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x2000157")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A8C", Offset = "0x8B0A8C")]
		private sealed class <>c__DisplayClass0_1
		{
			[Token(Token = "0x400036F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IObserver<Unit> observer;

			[Token(Token = "0x4000370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityAction registerHandler;

			[Token(Token = "0x4000371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public <>c__DisplayClass0_0 CS$<>8__locals1;

			[Token(Token = "0x6000781")]
			[Address(RVA = "0x107BFD8", Offset = "0x107BFD8", VA = "0x107BFD8")]
			public <>c__DisplayClass0_1()
			{
			}

			[Token(Token = "0x6000782")]
			[Address(RVA = "0x107BFE0", Offset = "0x107BFE0", VA = "0x107BFE0")]
			internal void <DirtyLayoutCallbackAsObservable>b__1()
			{
			}

			[Token(Token = "0x6000783")]
			[Address(RVA = "0x107C108", Offset = "0x107C108", VA = "0x107C108")]
			internal void <DirtyLayoutCallbackAsObservable>b__2()
			{
			}
		}

		[Token(Token = "0x2000158")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0A9C", Offset = "0x8B0A9C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4000372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic graphic;

			[Token(Token = "0x6000784")]
			[Address(RVA = "0x107C138", Offset = "0x107C138", VA = "0x107C138")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6000785")]
			[Address(RVA = "0x107C140", Offset = "0x107C140", VA = "0x107C140")]
			internal IDisposable <DirtyMaterialCallbackAsObservable>b__0(IObserver<Unit> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x2000159")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0AAC", Offset = "0x8B0AAC")]
		private sealed class <>c__DisplayClass1_1
		{
			[Token(Token = "0x4000373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IObserver<Unit> observer;

			[Token(Token = "0x4000374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityAction registerHandler;

			[Token(Token = "0x4000375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public <>c__DisplayClass1_0 CS$<>8__locals1;

			[Token(Token = "0x6000786")]
			[Address(RVA = "0x107C288", Offset = "0x107C288", VA = "0x107C288")]
			public <>c__DisplayClass1_1()
			{
			}

			[Token(Token = "0x6000787")]
			[Address(RVA = "0x107C290", Offset = "0x107C290", VA = "0x107C290")]
			internal void <DirtyMaterialCallbackAsObservable>b__1()
			{
			}

			[Token(Token = "0x6000788")]
			[Address(RVA = "0x107C3B8", Offset = "0x107C3B8", VA = "0x107C3B8")]
			internal void <DirtyMaterialCallbackAsObservable>b__2()
			{
			}
		}

		[Token(Token = "0x200015A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0ABC", Offset = "0x8B0ABC")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic graphic;

			[Token(Token = "0x6000789")]
			[Address(RVA = "0x107C3E8", Offset = "0x107C3E8", VA = "0x107C3E8")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x600078A")]
			[Address(RVA = "0x107C3F0", Offset = "0x107C3F0", VA = "0x107C3F0")]
			internal IDisposable <DirtyVerticesCallbackAsObservable>b__0(IObserver<Unit> observer)
			{
				return null;
			}
		}

		[Token(Token = "0x200015B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0ACC", Offset = "0x8B0ACC")]
		private sealed class <>c__DisplayClass2_1
		{
			[Token(Token = "0x4000377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IObserver<Unit> observer;

			[Token(Token = "0x4000378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityAction registerHandler;

			[Token(Token = "0x4000379")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public <>c__DisplayClass2_0 CS$<>8__locals1;

			[Token(Token = "0x600078B")]
			[Address(RVA = "0x107C538", Offset = "0x107C538", VA = "0x107C538")]
			public <>c__DisplayClass2_1()
			{
			}

			[Token(Token = "0x600078C")]
			[Address(RVA = "0x107C540", Offset = "0x107C540", VA = "0x107C540")]
			internal void <DirtyVerticesCallbackAsObservable>b__1()
			{
			}

			[Token(Token = "0x600078D")]
			[Address(RVA = "0x107C668", Offset = "0x107C668", VA = "0x107C668")]
			internal void <DirtyVerticesCallbackAsObservable>b__2()
			{
			}
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x10B5710", Offset = "0x10B5710", VA = "0x10B5710")]
		public static IObservable<Unit> DirtyLayoutCallbackAsObservable(this Graphic graphic)
		{
			return null;
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x10B5814", Offset = "0x10B5814", VA = "0x10B5814")]
		public static IObservable<Unit> DirtyMaterialCallbackAsObservable(this Graphic graphic)
		{
			return null;
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x10B5918", Offset = "0x10B5918", VA = "0x10B5918")]
		public static IObservable<Unit> DirtyVerticesCallbackAsObservable(this Graphic graphic)
		{
			return null;
		}
	}
	[Token(Token = "0x200015C")]
	public static class UnityUIComponentExtensions
	{
		[Serializable]
		[Token(Token = "0x200015D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0AEC", Offset = "0x8B0AEC")]
		private sealed class <>c
		{
			[Token(Token = "0x400037A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400037B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<string, Text> <>9__0_0;

			[Token(Token = "0x400037C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<bool, Selectable> <>9__3_0;

			[Token(Token = "0x400037D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Toggle, IObserver<bool>, IDisposable> <>9__5_0;

			[Token(Token = "0x400037E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<Scrollbar, IObserver<float>, IDisposable> <>9__6_0;

			[Token(Token = "0x400037F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<ScrollRect, IObserver<Vector2>, IDisposable> <>9__7_0;

			[Token(Token = "0x4000380")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<Slider, IObserver<float>, IDisposable> <>9__8_0;

			[Token(Token = "0x4000381")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<InputField, IObserver<string>, IDisposable> <>9__10_0;

			[Token(Token = "0x4000382")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<Dropdown, IObserver<int>, IDisposable> <>9__11_0;

			[Token(Token = "0x600079B")]
			[Address(RVA = "0x107C6F8", Offset = "0x107C6F8", VA = "0x107C6F8")]
			public <>c()
			{
			}

			[Token(Token = "0x600079C")]
			[Address(RVA = "0x107C700", Offset = "0x107C700", VA = "0x107C700")]
			internal void <SubscribeToText>b__0_0(string x, Text t)
			{
			}

			[Token(Token = "0x600079D")]
			[Address(RVA = "0x107C724", Offset = "0x107C724", VA = "0x107C724")]
			internal void <SubscribeToInteractable>b__3_0(bool x, Selectable s)
			{
			}

			[Token(Token = "0x600079E")]
			[Address(RVA = "0x107C744", Offset = "0x107C744", VA = "0x107C744")]
			internal IDisposable <OnValueChangedAsObservable>b__5_0(Toggle t, IObserver<bool> observer)
			{
				return null;
			}

			[Token(Token = "0x600079F")]
			[Address(RVA = "0x107C8A8", Offset = "0x107C8A8", VA = "0x107C8A8")]
			internal IDisposable <OnValueChangedAsObservable>b__6_0(Scrollbar s, IObserver<float> observer)
			{
				return null;
			}

			[Token(Token = "0x60007A0")]
			[Address(RVA = "0x107CA1C", Offset = "0x107CA1C", VA = "0x107CA1C")]
			internal IDisposable <OnValueChangedAsObservable>b__7_0(ScrollRect s, IObserver<Vector2> observer)
			{
				return null;
			}

			[Token(Token = "0x60007A1")]
			[Address(RVA = "0x107CB98", Offset = "0x107CB98", VA = "0x107CB98")]
			internal IDisposable <OnValueChangedAsObservable>b__8_0(Slider s, IObserver<float> observer)
			{
				return null;
			}

			[Token(Token = "0x60007A2")]
			[Address(RVA = "0x107CD14", Offset = "0x107CD14", VA = "0x107CD14")]
			internal IDisposable <OnValueChangedAsObservable>b__10_0(InputField i, IObserver<string> observer)
			{
				return null;
			}

			[Token(Token = "0x60007A3")]
			[Address(RVA = "0x107CE74", Offset = "0x107CE74", VA = "0x107CE74")]
			internal IDisposable <OnValueChangedAsObservable>b__11_0(Dropdown d, IObserver<int> observer)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200015E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0AFC", Offset = "0x8B0AFC")]
		private sealed class <>c__1<T>
		{
			[Token(Token = "0x4000383")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__1<T> <>9;

			[Token(Token = "0x4000384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<T, Text> <>9__1_0;

			[Token(Token = "0x60007A5")]
			public <>c__1()
			{
			}

			[Token(Token = "0x60007A6")]
			internal void <SubscribeToText>b__1_0(T x, Text t)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200015F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0B0C", Offset = "0x8B0B0C")]
		private sealed class <>c__2<T>
		{
			[Token(Token = "0x4000385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__2<T> <>9;

			[Token(Token = "0x4000386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<T, Text, Func<T, string>> <>9__2_0;

			[Token(Token = "0x60007A8")]
			public <>c__2()
			{
			}

			[Token(Token = "0x60007A9")]
			internal void <SubscribeToText>b__2_0(T x, Text t, Func<T, string> s)
			{
			}
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x10B5A1C", Offset = "0x10B5A1C", VA = "0x10B5A1C")]
		public static IDisposable SubscribeToText(this IObservable<string> source, Text text)
		{
			return null;
		}

		[Token(Token = "0x600078F")]
		public static IDisposable SubscribeToText<T>(this IObservable<T> source, Text text)
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		public static IDisposable SubscribeToText<T>(this IObservable<T> source, Text text, Func<T, string> selector)
		{
			return null;
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x10B5B44", Offset = "0x10B5B44", VA = "0x10B5B44")]
		public static IDisposable SubscribeToInteractable(this IObservable<bool> source, Selectable selectable)
		{
			return null;
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x10B5C6C", Offset = "0x10B5C6C", VA = "0x10B5C6C")]
		public static IObservable<Unit> OnClickAsObservable(this Button button)
		{
			return null;
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x10B5C84", Offset = "0x10B5C84", VA = "0x10B5C84")]
		public static IObservable<bool> OnValueChangedAsObservable(this Toggle toggle)
		{
			return null;
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x10B5DC8", Offset = "0x10B5DC8", VA = "0x10B5DC8")]
		public static IObservable<float> OnValueChangedAsObservable(this Scrollbar scrollbar)
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x10B5F0C", Offset = "0x10B5F0C", VA = "0x10B5F0C")]
		public static IObservable<Vector2> OnValueChangedAsObservable(this ScrollRect scrollRect)
		{
			return null;
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x10B6050", Offset = "0x10B6050", VA = "0x10B6050")]
		public static IObservable<float> OnValueChangedAsObservable(this Slider slider)
		{
			return null;
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x10B6194", Offset = "0x10B6194", VA = "0x10B6194")]
		public static IObservable<string> OnEndEditAsObservable(this InputField inputField)
		{
			return null;
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x10B61E8", Offset = "0x10B61E8", VA = "0x10B61E8")]
		public static IObservable<string> OnValueChangedAsObservable(this InputField inputField)
		{
			return null;
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x10B632C", Offset = "0x10B632C", VA = "0x10B632C")]
		public static IObservable<int> OnValueChangedAsObservable(this Dropdown dropdown)
		{
			return null;
		}
	}
	[Token(Token = "0x2000160")]
	internal static class YieldInstructionCache
	{
		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly WaitForEndOfFrame WaitForEndOfFrame;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly WaitForFixedUpdate WaitForFixedUpdate;
	}
}
namespace UniRx.Triggers
{
	[Token(Token = "0x2000161")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B1C", Offset = "0x8B0B1C")]
	public class ObservableAnimatorTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<int> onAnimatorIK;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onAnimatorMove;

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x175A408", Offset = "0x175A408", VA = "0x175A408")]
		private void OnAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x175A478", Offset = "0x175A478", VA = "0x175A478")]
		public IObservable<int> OnAnimatorIKAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x175A4F4", Offset = "0x175A4F4", VA = "0x175A4F4")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x175A5D0", Offset = "0x175A5D0", VA = "0x175A5D0")]
		public IObservable<Unit> OnAnimatorMoveAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x175A64C", Offset = "0x175A64C", VA = "0x175A64C", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x175A6CC", Offset = "0x175A6CC", VA = "0x175A6CC")]
		public ObservableAnimatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B2C", Offset = "0x8B0B2C")]
	public class ObservableBeginDragTrigger : ObservableTriggerBase, IEventSystemHandler, IBeginDragHandler
	{
		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onBeginDrag;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x175A6DC", Offset = "0x175A6DC", VA = "0x175A6DC", Slot = "5")]
		private void UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x175A74C", Offset = "0x175A74C", VA = "0x175A74C")]
		public IObservable<PointerEventData> OnBeginDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x175A7C8", Offset = "0x175A7C8", VA = "0x175A7C8", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x175A824", Offset = "0x175A824", VA = "0x175A824")]
		public ObservableBeginDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B3C", Offset = "0x8B0B3C")]
	public class ObservableCancelTrigger : ObservableTriggerBase, IEventSystemHandler, ICancelHandler
	{
		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onCancel;

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x175A82C", Offset = "0x175A82C", VA = "0x175A82C", Slot = "5")]
		private void UnityEngine.EventSystems.ICancelHandler.OnCancel(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x175A89C", Offset = "0x175A89C", VA = "0x175A89C")]
		public IObservable<BaseEventData> OnCancelAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x175A918", Offset = "0x175A918", VA = "0x175A918", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x175A974", Offset = "0x175A974", VA = "0x175A974")]
		public ObservableCancelTrigger()
		{
		}
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B4C", Offset = "0x8B0B4C")]
	public class ObservableCanvasGroupChangedTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> onCanvasGroupChanged;

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x175A97C", Offset = "0x175A97C", VA = "0x175A97C")]
		private void OnCanvasGroupChanged()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x175AA58", Offset = "0x175AA58", VA = "0x175AA58")]
		public IObservable<Unit> OnCanvasGroupChangedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x175AAD4", Offset = "0x175AAD4", VA = "0x175AAD4", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x175AB30", Offset = "0x175AB30", VA = "0x175AB30")]
		public ObservableCanvasGroupChangedTrigger()
		{
		}
	}
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B5C", Offset = "0x8B0B5C")]
	public class ObservableCollision2DTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Collision2D> onCollisionEnter2D;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Collision2D> onCollisionExit2D;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<Collision2D> onCollisionStay2D;

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x175AB38", Offset = "0x175AB38", VA = "0x175AB38")]
		private void OnCollisionEnter2D(Collision2D coll)
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x175ABA8", Offset = "0x175ABA8", VA = "0x175ABA8")]
		public IObservable<Collision2D> OnCollisionEnter2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x175AC24", Offset = "0x175AC24", VA = "0x175AC24")]
		private void OnCollisionExit2D(Collision2D coll)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x175AC94", Offset = "0x175AC94", VA = "0x175AC94")]
		public IObservable<Collision2D> OnCollisionExit2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x175AD10", Offset = "0x175AD10", VA = "0x175AD10")]
		private void OnCollisionStay2D(Collision2D coll)
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x175AD80", Offset = "0x175AD80", VA = "0x175AD80")]
		public IObservable<Collision2D> OnCollisionStay2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x175ADFC", Offset = "0x175ADFC", VA = "0x175ADFC", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x175AE88", Offset = "0x175AE88", VA = "0x175AE88")]
		public ObservableCollision2DTrigger()
		{
		}
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B6C", Offset = "0x8B0B6C")]
	public class ObservableCollisionTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Collision> onCollisionEnter;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Collision> onCollisionExit;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<Collision> onCollisionStay;

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x175AE90", Offset = "0x175AE90", VA = "0x175AE90")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x175AF00", Offset = "0x175AF00", VA = "0x175AF00")]
		public IObservable<Collision> OnCollisionEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x175AF7C", Offset = "0x175AF7C", VA = "0x175AF7C")]
		private void OnCollisionExit(Collision collisionInfo)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x175AFEC", Offset = "0x175AFEC", VA = "0x175AFEC")]
		public IObservable<Collision> OnCollisionExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x175B068", Offset = "0x175B068", VA = "0x175B068")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x175B0D8", Offset = "0x175B0D8", VA = "0x175B0D8")]
		public IObservable<Collision> OnCollisionStayAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x175B154", Offset = "0x175B154", VA = "0x175B154", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x175B1E0", Offset = "0x175B1E0", VA = "0x175B1E0")]
		public ObservableCollisionTrigger()
		{
		}
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B7C", Offset = "0x8B0B7C")]
	public class ObservableDeselectTrigger : ObservableTriggerBase, IEventSystemHandler, IDeselectHandler
	{
		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onDeselect;

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x175B1E8", Offset = "0x175B1E8", VA = "0x175B1E8", Slot = "5")]
		private void UnityEngine.EventSystems.IDeselectHandler.OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x175B258", Offset = "0x175B258", VA = "0x175B258")]
		public IObservable<BaseEventData> OnDeselectAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x175B2D4", Offset = "0x175B2D4", VA = "0x175B2D4", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x175B330", Offset = "0x175B330", VA = "0x175B330")]
		public ObservableDeselectTrigger()
		{
		}
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B8C", Offset = "0x8B0B8C")]
	public class ObservableDestroyTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool calledDestroy;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Subject<Unit> onDestroy;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CompositeDisposable disposablesOnDestroy;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B28D0", Offset = "0x8B28D0")]
		private bool <IsMonitoredActivate>k__BackingField;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B28E0", Offset = "0x8B28E0")]
		private bool <IsActivated>k__BackingField;

		[Token(Token = "0x170000FE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8BFC84", Offset = "0x8BFC84")]
		internal bool IsMonitoredActivate
		{
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0x175B338", Offset = "0x175B338", VA = "0x175B338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8794", Offset = "0x8B8794")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0x175B340", Offset = "0x175B340", VA = "0x175B340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87A4", Offset = "0x8B87A4")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public bool IsActivated
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0x175B34C", Offset = "0x175B34C", VA = "0x175B34C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87B4", Offset = "0x8B87B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0x175B354", Offset = "0x175B354", VA = "0x175B354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87C4", Offset = "0x8B87C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public bool IsCalledOnDestroy
		{
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0x175B360", Offset = "0x175B360", VA = "0x175B360")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x175B368", Offset = "0x175B368", VA = "0x175B368")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x175B374", Offset = "0x175B374", VA = "0x175B374")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x175B498", Offset = "0x175B498", VA = "0x175B498")]
		public IObservable<Unit> OnDestroyAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x175B63C", Offset = "0x175B63C", VA = "0x175B63C")]
		public void ForceRaiseOnDestroy()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x175B640", Offset = "0x175B640", VA = "0x175B640")]
		public void AddDisposableOnDestroy(IDisposable disposable)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x175B750", Offset = "0x175B750", VA = "0x175B750")]
		public ObservableDestroyTrigger()
		{
		}
	}
	[Token(Token = "0x2000169")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0B9C", Offset = "0x8B0B9C")]
	public class ObservableDragTrigger : ObservableTriggerBase, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onDrag;

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x175B758", Offset = "0x175B758", VA = "0x175B758", Slot = "5")]
		private void UnityEngine.EventSystems.IDragHandler.OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x175B7C8", Offset = "0x175B7C8", VA = "0x175B7C8")]
		public IObservable<PointerEventData> OnDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x175B844", Offset = "0x175B844", VA = "0x175B844", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x175B8A0", Offset = "0x175B8A0", VA = "0x175B8A0")]
		public ObservableDragTrigger()
		{
		}
	}
	[Token(Token = "0x200016A")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BAC", Offset = "0x8B0BAC")]
	public class ObservableDropTrigger : ObservableTriggerBase, IEventSystemHandler, IDropHandler
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onDrop;

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x175B8A8", Offset = "0x175B8A8", VA = "0x175B8A8", Slot = "5")]
		private void UnityEngine.EventSystems.IDropHandler.OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x175B918", Offset = "0x175B918", VA = "0x175B918")]
		public IObservable<PointerEventData> OnDropAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x175B994", Offset = "0x175B994", VA = "0x175B994", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x175B9F0", Offset = "0x175B9F0", VA = "0x175B9F0")]
		public ObservableDropTrigger()
		{
		}
	}
	[Token(Token = "0x200016B")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BBC", Offset = "0x8B0BBC")]
	public class ObservableEnableTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> onEnable;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onDisable;

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x175B9F8", Offset = "0x175B9F8", VA = "0x175B9F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x175BAD4", Offset = "0x175BAD4", VA = "0x175BAD4")]
		public IObservable<Unit> OnEnableAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x175BB50", Offset = "0x175BB50", VA = "0x175BB50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x175BC2C", Offset = "0x175BC2C", VA = "0x175BC2C")]
		public IObservable<Unit> OnDisableAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x175BCA8", Offset = "0x175BCA8", VA = "0x175BCA8", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x175BD1C", Offset = "0x175BD1C", VA = "0x175BD1C")]
		public ObservableEnableTrigger()
		{
		}
	}
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BCC", Offset = "0x8B0BCC")]
	public class ObservableEndDragTrigger : ObservableTriggerBase, IEventSystemHandler, IEndDragHandler
	{
		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onEndDrag;

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x175BD24", Offset = "0x175BD24", VA = "0x175BD24", Slot = "5")]
		private void UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x175BD94", Offset = "0x175BD94", VA = "0x175BD94")]
		public IObservable<PointerEventData> OnEndDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x175BE10", Offset = "0x175BE10", VA = "0x175BE10", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x175BE6C", Offset = "0x175BE6C", VA = "0x175BE6C")]
		public ObservableEndDragTrigger()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BDC", Offset = "0x8B0BDC")]
	public class ObservableEventTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler
	{
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onDeselect;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<AxisEventData> onMove;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<PointerEventData> onPointerDown;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Subject<PointerEventData> onPointerEnter;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Subject<PointerEventData> onPointerExit;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Subject<PointerEventData> onPointerUp;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Subject<BaseEventData> onSelect;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Subject<PointerEventData> onPointerClick;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Subject<BaseEventData> onSubmit;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Subject<PointerEventData> onDrag;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Subject<PointerEventData> onBeginDrag;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Subject<PointerEventData> onEndDrag;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Subject<PointerEventData> onDrop;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Subject<BaseEventData> onUpdateSelected;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Subject<PointerEventData> onInitializePotentialDrag;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Subject<BaseEventData> onCancel;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Subject<PointerEventData> onScroll;

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x175BE74", Offset = "0x175BE74", VA = "0x175BE74", Slot = "18")]
		private void UnityEngine.EventSystems.IDeselectHandler.OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x175BEE4", Offset = "0x175BEE4", VA = "0x175BEE4")]
		public IObservable<BaseEventData> OnDeselectAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x175BF60", Offset = "0x175BF60", VA = "0x175BF60", Slot = "19")]
		private void UnityEngine.EventSystems.IMoveHandler.OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x175BFD0", Offset = "0x175BFD0", VA = "0x175BFD0")]
		public IObservable<AxisEventData> OnMoveAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x175C04C", Offset = "0x175C04C", VA = "0x175C04C", Slot = "7")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x175C0BC", Offset = "0x175C0BC", VA = "0x175C0BC")]
		public IObservable<PointerEventData> OnPointerDownAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x175C138", Offset = "0x175C138", VA = "0x175C138", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerEnterHandler.OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x175C1A8", Offset = "0x175C1A8", VA = "0x175C1A8")]
		public IObservable<PointerEventData> OnPointerEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x175C224", Offset = "0x175C224", VA = "0x175C224", Slot = "6")]
		private void UnityEngine.EventSystems.IPointerExitHandler.OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x175C294", Offset = "0x175C294", VA = "0x175C294")]
		public IObservable<PointerEventData> OnPointerExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x175C310", Offset = "0x175C310", VA = "0x175C310", Slot = "8")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x175C380", Offset = "0x175C380", VA = "0x175C380")]
		public IObservable<PointerEventData> OnPointerUpAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x175C3FC", Offset = "0x175C3FC", VA = "0x175C3FC", Slot = "17")]
		private void UnityEngine.EventSystems.ISelectHandler.OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x175C46C", Offset = "0x175C46C", VA = "0x175C46C")]
		public IObservable<BaseEventData> OnSelectAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x175C4E8", Offset = "0x175C4E8", VA = "0x175C4E8", Slot = "9")]
		private void UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x175C558", Offset = "0x175C558", VA = "0x175C558")]
		public IObservable<PointerEventData> OnPointerClickAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x175C5D4", Offset = "0x175C5D4", VA = "0x175C5D4", Slot = "20")]
		private void UnityEngine.EventSystems.ISubmitHandler.OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x175C644", Offset = "0x175C644", VA = "0x175C644")]
		public IObservable<BaseEventData> OnSubmitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x175C6C0", Offset = "0x175C6C0", VA = "0x175C6C0", Slot = "12")]
		private void UnityEngine.EventSystems.IDragHandler.OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x175C730", Offset = "0x175C730", VA = "0x175C730")]
		public IObservable<PointerEventData> OnDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x175C7AC", Offset = "0x175C7AC", VA = "0x175C7AC", Slot = "10")]
		private void UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x175C81C", Offset = "0x175C81C", VA = "0x175C81C")]
		public IObservable<PointerEventData> OnBeginDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x175C898", Offset = "0x175C898", VA = "0x175C898", Slot = "13")]
		private void UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x175C908", Offset = "0x175C908", VA = "0x175C908")]
		public IObservable<PointerEventData> OnEndDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x175C984", Offset = "0x175C984", VA = "0x175C984", Slot = "14")]
		private void UnityEngine.EventSystems.IDropHandler.OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x175C9F4", Offset = "0x175C9F4", VA = "0x175C9F4")]
		public IObservable<PointerEventData> OnDropAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x175CA70", Offset = "0x175CA70", VA = "0x175CA70", Slot = "16")]
		private void UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x175CAE0", Offset = "0x175CAE0", VA = "0x175CAE0")]
		public IObservable<BaseEventData> OnUpdateSelectedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x175CB5C", Offset = "0x175CB5C", VA = "0x175CB5C", Slot = "11")]
		private void UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x175CBCC", Offset = "0x175CBCC", VA = "0x175CBCC")]
		public IObservable<PointerEventData> OnInitializePotentialDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x175CC48", Offset = "0x175CC48", VA = "0x175CC48", Slot = "21")]
		private void UnityEngine.EventSystems.ICancelHandler.OnCancel(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x175CCB8", Offset = "0x175CCB8", VA = "0x175CCB8")]
		public IObservable<BaseEventData> OnCancelAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x175CD34", Offset = "0x175CD34", VA = "0x175CD34", Slot = "15")]
		private void UnityEngine.EventSystems.IScrollHandler.OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x175CDA4", Offset = "0x175CDA4", VA = "0x175CDA4")]
		public IObservable<PointerEventData> OnScrollAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x175CE20", Offset = "0x175CE20", VA = "0x175CE20", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x175D014", Offset = "0x175D014", VA = "0x175D014")]
		public ObservableEventTrigger()
		{
		}
	}
	[Token(Token = "0x200016E")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BEC", Offset = "0x8B0BEC")]
	public class ObservableFixedUpdateTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> fixedUpdate;

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x175D01C", Offset = "0x175D01C", VA = "0x175D01C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x175D0F8", Offset = "0x175D0F8", VA = "0x175D0F8")]
		public IObservable<Unit> FixedUpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x175D174", Offset = "0x175D174", VA = "0x175D174", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x175D1D0", Offset = "0x175D1D0", VA = "0x175D1D0")]
		public ObservableFixedUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x200016F")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0BFC", Offset = "0x8B0BFC")]
	public class ObservableInitializePotentialDragTrigger : ObservableTriggerBase, IEventSystemHandler, IInitializePotentialDragHandler
	{
		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onInitializePotentialDrag;

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x175D1D8", Offset = "0x175D1D8", VA = "0x175D1D8", Slot = "5")]
		private void UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x175D248", Offset = "0x175D248", VA = "0x175D248")]
		public IObservable<PointerEventData> OnInitializePotentialDragAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x175D2C4", Offset = "0x175D2C4", VA = "0x175D2C4", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x175D320", Offset = "0x175D320", VA = "0x175D320")]
		public ObservableInitializePotentialDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000170")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C0C", Offset = "0x8B0C0C")]
	public class ObservableJointTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<float> onJointBreak;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Joint2D> onJointBreak2D;

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x175D328", Offset = "0x175D328", VA = "0x175D328")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x175D398", Offset = "0x175D398", VA = "0x175D398")]
		public IObservable<float> OnJointBreakAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x175D414", Offset = "0x175D414", VA = "0x175D414")]
		private void OnJointBreak2D(Joint2D brokenJoint)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x175D484", Offset = "0x175D484", VA = "0x175D484")]
		public IObservable<Joint2D> OnJointBreak2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x175D500", Offset = "0x175D500", VA = "0x175D500", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x175D580", Offset = "0x175D580", VA = "0x175D580")]
		public ObservableJointTrigger()
		{
		}
	}
	[Token(Token = "0x2000171")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C1C", Offset = "0x8B0C1C")]
	public class ObservableLateUpdateTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> lateUpdate;

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x175D588", Offset = "0x175D588", VA = "0x175D588")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x175D664", Offset = "0x175D664", VA = "0x175D664")]
		public IObservable<Unit> LateUpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x175D6E0", Offset = "0x175D6E0", VA = "0x175D6E0", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x175D73C", Offset = "0x175D73C", VA = "0x175D73C")]
		public ObservableLateUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C2C", Offset = "0x8B0C2C")]
	public class ObservableMoveTrigger : ObservableTriggerBase, IEventSystemHandler, IMoveHandler
	{
		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<AxisEventData> onMove;

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x175D990", Offset = "0x175D990", VA = "0x175D990", Slot = "5")]
		private void UnityEngine.EventSystems.IMoveHandler.OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x175DA00", Offset = "0x175DA00", VA = "0x175DA00")]
		public IObservable<AxisEventData> OnMoveAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x175DA7C", Offset = "0x175DA7C", VA = "0x175DA7C", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x175DAD8", Offset = "0x175DAD8", VA = "0x175DAD8")]
		public ObservableMoveTrigger()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C3C", Offset = "0x8B0C3C")]
	public class ObservableParticleTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<GameObject> onParticleCollision;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onParticleTrigger;

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x175DAE0", Offset = "0x175DAE0", VA = "0x175DAE0")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x175DB50", Offset = "0x175DB50", VA = "0x175DB50")]
		public IObservable<GameObject> OnParticleCollisionAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x175DBCC", Offset = "0x175DBCC", VA = "0x175DBCC")]
		private void OnParticleTrigger()
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x175DCA8", Offset = "0x175DCA8", VA = "0x175DCA8")]
		public IObservable<Unit> OnParticleTriggerAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x175DD24", Offset = "0x175DD24", VA = "0x175DD24", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x175DDA4", Offset = "0x175DDA4", VA = "0x175DDA4")]
		public ObservableParticleTrigger()
		{
		}
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C4C", Offset = "0x8B0C4C")]
	public class ObservablePointerClickTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerClickHandler
	{
		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onPointerClick;

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x175DDAC", Offset = "0x175DDAC", VA = "0x175DDAC", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x175DE1C", Offset = "0x175DE1C", VA = "0x175DE1C")]
		public IObservable<PointerEventData> OnPointerClickAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x175DE98", Offset = "0x175DE98", VA = "0x175DE98", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x175DEF4", Offset = "0x175DEF4", VA = "0x175DEF4")]
		public ObservablePointerClickTrigger()
		{
		}
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C5C", Offset = "0x8B0C5C")]
	public class ObservablePointerDownTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerDownHandler
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onPointerDown;

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x175DEFC", Offset = "0x175DEFC", VA = "0x175DEFC", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x175DF6C", Offset = "0x175DF6C", VA = "0x175DF6C")]
		public IObservable<PointerEventData> OnPointerDownAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x175DFE8", Offset = "0x175DFE8", VA = "0x175DFE8", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x175E044", Offset = "0x175E044", VA = "0x175E044")]
		public ObservablePointerDownTrigger()
		{
		}
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C6C", Offset = "0x8B0C6C")]
	public class ObservablePointerEnterTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerEnterHandler
	{
		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onPointerEnter;

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x175E04C", Offset = "0x175E04C", VA = "0x175E04C", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerEnterHandler.OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x175E0BC", Offset = "0x175E0BC", VA = "0x175E0BC")]
		public IObservable<PointerEventData> OnPointerEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x175E138", Offset = "0x175E138", VA = "0x175E138", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x175E194", Offset = "0x175E194", VA = "0x175E194")]
		public ObservablePointerEnterTrigger()
		{
		}
	}
	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C7C", Offset = "0x8B0C7C")]
	public class ObservablePointerExitTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onPointerExit;

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x175E19C", Offset = "0x175E19C", VA = "0x175E19C", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerExitHandler.OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x175E20C", Offset = "0x175E20C", VA = "0x175E20C")]
		public IObservable<PointerEventData> OnPointerExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x175E288", Offset = "0x175E288", VA = "0x175E288", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x175E2E4", Offset = "0x175E2E4", VA = "0x175E2E4")]
		public ObservablePointerExitTrigger()
		{
		}
	}
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C8C", Offset = "0x8B0C8C")]
	public class ObservablePointerUpTrigger : ObservableTriggerBase, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onPointerUp;

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x175E2EC", Offset = "0x175E2EC", VA = "0x175E2EC", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x175E35C", Offset = "0x175E35C", VA = "0x175E35C")]
		public IObservable<PointerEventData> OnPointerUpAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x175E3D8", Offset = "0x175E3D8", VA = "0x175E3D8", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x175E434", Offset = "0x175E434", VA = "0x175E434")]
		public ObservablePointerUpTrigger()
		{
		}
	}
	[Token(Token = "0x2000179")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0C9C", Offset = "0x8B0C9C")]
	public class ObservableRectTransformTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> onRectTransformDimensionsChange;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onRectTransformRemoved;

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x175E43C", Offset = "0x175E43C", VA = "0x175E43C")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x175E518", Offset = "0x175E518", VA = "0x175E518")]
		public IObservable<Unit> OnRectTransformDimensionsChangeAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x175E594", Offset = "0x175E594", VA = "0x175E594")]
		private void OnRectTransformRemoved()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x175E670", Offset = "0x175E670", VA = "0x175E670")]
		public IObservable<Unit> OnRectTransformRemovedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x175E6EC", Offset = "0x175E6EC", VA = "0x175E6EC", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x175E760", Offset = "0x175E760", VA = "0x175E760")]
		public ObservableRectTransformTrigger()
		{
		}
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CAC", Offset = "0x8B0CAC")]
	public class ObservableScrollTrigger : ObservableTriggerBase, IEventSystemHandler, IScrollHandler
	{
		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<PointerEventData> onScroll;

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x175E768", Offset = "0x175E768", VA = "0x175E768", Slot = "5")]
		private void UnityEngine.EventSystems.IScrollHandler.OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x175E7D8", Offset = "0x175E7D8", VA = "0x175E7D8")]
		public IObservable<PointerEventData> OnScrollAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x175E854", Offset = "0x175E854", VA = "0x175E854", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x175E8B0", Offset = "0x175E8B0", VA = "0x175E8B0")]
		public ObservableScrollTrigger()
		{
		}
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CBC", Offset = "0x8B0CBC")]
	public class ObservableSelectTrigger : ObservableTriggerBase, IEventSystemHandler, ISelectHandler
	{
		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onSelect;

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x175E8B8", Offset = "0x175E8B8", VA = "0x175E8B8", Slot = "5")]
		private void UnityEngine.EventSystems.ISelectHandler.OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x175E928", Offset = "0x175E928", VA = "0x175E928")]
		public IObservable<BaseEventData> OnSelectAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x175E9A4", Offset = "0x175E9A4", VA = "0x175E9A4", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x175EA00", Offset = "0x175EA00", VA = "0x175EA00")]
		public ObservableSelectTrigger()
		{
		}
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CCC", Offset = "0x8B0CCC")]
	public class ObservableStateMachineTrigger : StateMachineBehaviour
	{
		[Token(Token = "0x200017D")]
		public class OnStateInfo
		{
			[Token(Token = "0x40003C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B28F0", Offset = "0x8B28F0")]
			private Animator <Animator>k__BackingField;

			[Token(Token = "0x40003C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2900", Offset = "0x8B2900")]
			private AnimatorStateInfo <StateInfo>k__BackingField;

			[Token(Token = "0x40003C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2910", Offset = "0x8B2910")]
			private int <LayerIndex>k__BackingField;

			[Token(Token = "0x17000101")]
			public Animator Animator
			{
				[Token(Token = "0x600085D")]
				[Address(RVA = "0x10693BC", Offset = "0x10693BC", VA = "0x10693BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87D4", Offset = "0x8B87D4")]
				get
				{
					return null;
				}
				[Token(Token = "0x600085E")]
				[Address(RVA = "0x10693C4", Offset = "0x10693C4", VA = "0x10693C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87E4", Offset = "0x8B87E4")]
				private set
				{
				}
			}

			[Token(Token = "0x17000102")]
			public AnimatorStateInfo StateInfo
			{
				[Token(Token = "0x600085F")]
				[Address(RVA = "0x10693CC", Offset = "0x10693CC", VA = "0x10693CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B87F4", Offset = "0x8B87F4")]
				get
				{
					return default(AnimatorStateInfo);
				}
				[Token(Token = "0x6000860")]
				[Address(RVA = "0x10693E4", Offset = "0x10693E4", VA = "0x10693E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8804", Offset = "0x8B8804")]
				private set
				{
				}
			}

			[Token(Token = "0x17000103")]
			public int LayerIndex
			{
				[Token(Token = "0x6000861")]
				[Address(RVA = "0x10693FC", Offset = "0x10693FC", VA = "0x10693FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8814", Offset = "0x8B8814")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000862")]
				[Address(RVA = "0x1069404", Offset = "0x1069404", VA = "0x1069404")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8824", Offset = "0x8B8824")]
				private set
				{
				}
			}

			[Token(Token = "0x6000863")]
			[Address(RVA = "0x106940C", Offset = "0x106940C", VA = "0x106940C")]
			public OnStateInfo(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
			{
			}
		}

		[Token(Token = "0x200017E")]
		public class OnStateMachineInfo
		{
			[Token(Token = "0x40003CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2920", Offset = "0x8B2920")]
			private Animator <Animator>k__BackingField;

			[Token(Token = "0x40003CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2930", Offset = "0x8B2930")]
			private int <StateMachinePathHash>k__BackingField;

			[Token(Token = "0x17000104")]
			public Animator Animator
			{
				[Token(Token = "0x6000864")]
				[Address(RVA = "0x106945C", Offset = "0x106945C", VA = "0x106945C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8834", Offset = "0x8B8834")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000865")]
				[Address(RVA = "0x1069464", Offset = "0x1069464", VA = "0x1069464")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8844", Offset = "0x8B8844")]
				private set
				{
				}
			}

			[Token(Token = "0x17000105")]
			public int StateMachinePathHash
			{
				[Token(Token = "0x6000866")]
				[Address(RVA = "0x106946C", Offset = "0x106946C", VA = "0x106946C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8854", Offset = "0x8B8854")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000867")]
				[Address(RVA = "0x1069474", Offset = "0x1069474", VA = "0x1069474")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8864", Offset = "0x8B8864")]
				private set
				{
				}
			}

			[Token(Token = "0x6000868")]
			[Address(RVA = "0x106947C", Offset = "0x106947C", VA = "0x106947C")]
			public OnStateMachineInfo(Animator animator, int stateMachinePathHash)
			{
			}
		}

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Subject<OnStateInfo> onStateExit;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Subject<OnStateInfo> onStateEnter;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Subject<OnStateInfo> onStateIK;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Subject<OnStateInfo> onStateUpdate;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Subject<OnStateMachineInfo> onStateMachineEnter;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Subject<OnStateMachineInfo> onStateMachineExit;

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x175EA08", Offset = "0x175EA08", VA = "0x175EA08", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x175EACC", Offset = "0x175EACC", VA = "0x175EACC")]
		public IObservable<OnStateInfo> OnStateExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x175EB48", Offset = "0x175EB48", VA = "0x175EB48", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x175EC0C", Offset = "0x175EC0C", VA = "0x175EC0C")]
		public IObservable<OnStateInfo> OnStateEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x175EC88", Offset = "0x175EC88", VA = "0x175EC88", Slot = "8")]
		public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x175ED4C", Offset = "0x175ED4C", VA = "0x175ED4C")]
		public IObservable<OnStateInfo> OnStateIKAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x175EDC8", Offset = "0x175EDC8", VA = "0x175EDC8", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x175EE8C", Offset = "0x175EE8C", VA = "0x175EE8C")]
		public IObservable<OnStateInfo> OnStateUpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x175EF08", Offset = "0x175EF08", VA = "0x175EF08", Slot = "9")]
		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x175EFB0", Offset = "0x175EFB0", VA = "0x175EFB0")]
		public IObservable<OnStateMachineInfo> OnStateMachineEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x175F02C", Offset = "0x175F02C", VA = "0x175F02C", Slot = "10")]
		public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x175F0D4", Offset = "0x175F0D4", VA = "0x175F0D4")]
		public IObservable<OnStateMachineInfo> OnStateMachineExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x175F150", Offset = "0x175F150", VA = "0x175F150")]
		public ObservableStateMachineTrigger()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CDC", Offset = "0x8B0CDC")]
	public class ObservableSubmitTrigger : ObservableTriggerBase, IEventSystemHandler, ISubmitHandler
	{
		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onSubmit;

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x175F158", Offset = "0x175F158", VA = "0x175F158", Slot = "5")]
		private void UnityEngine.EventSystems.ISubmitHandler.OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x175F1C8", Offset = "0x175F1C8", VA = "0x175F1C8")]
		public IObservable<BaseEventData> OnSubmitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x175F244", Offset = "0x175F244", VA = "0x175F244", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x175F2A0", Offset = "0x175F2A0", VA = "0x175F2A0")]
		public ObservableSubmitTrigger()
		{
		}
	}
	[Token(Token = "0x2000180")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CEC", Offset = "0x8B0CEC")]
	public class ObservableTransformChangedTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> onBeforeTransformParentChanged;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onTransformParentChanged;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<Unit> onTransformChildrenChanged;

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x175F2A8", Offset = "0x175F2A8", VA = "0x175F2A8")]
		private void OnBeforeTransformParentChanged()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x175F384", Offset = "0x175F384", VA = "0x175F384")]
		public IObservable<Unit> OnBeforeTransformParentChangedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x175F400", Offset = "0x175F400", VA = "0x175F400")]
		private void OnTransformParentChanged()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x175F4DC", Offset = "0x175F4DC", VA = "0x175F4DC")]
		public IObservable<Unit> OnTransformParentChangedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x175F558", Offset = "0x175F558", VA = "0x175F558")]
		private void OnTransformChildrenChanged()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x175F634", Offset = "0x175F634", VA = "0x175F634")]
		public IObservable<Unit> OnTransformChildrenChangedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x175F6B0", Offset = "0x175F6B0", VA = "0x175F6B0", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x175F73C", Offset = "0x175F73C", VA = "0x175F73C")]
		public ObservableTransformChangedTrigger()
		{
		}
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0CFC", Offset = "0x8B0CFC")]
	public class ObservableTrigger2DTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Collider2D> onTriggerEnter2D;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Collider2D> onTriggerExit2D;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<Collider2D> onTriggerStay2D;

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x175F744", Offset = "0x175F744", VA = "0x175F744")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x175F7B4", Offset = "0x175F7B4", VA = "0x175F7B4")]
		public IObservable<Collider2D> OnTriggerEnter2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x175F830", Offset = "0x175F830", VA = "0x175F830")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x175F8A0", Offset = "0x175F8A0", VA = "0x175F8A0")]
		public IObservable<Collider2D> OnTriggerExit2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x175F91C", Offset = "0x175F91C", VA = "0x175F91C")]
		private void OnTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x175F98C", Offset = "0x175F98C", VA = "0x175F98C")]
		public IObservable<Collider2D> OnTriggerStay2DAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x175FA08", Offset = "0x175FA08", VA = "0x175FA08", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x175FA94", Offset = "0x175FA94", VA = "0x175FA94")]
		public ObservableTrigger2DTrigger()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public abstract class ObservableTriggerBase : MonoBehaviour
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool calledAwake;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Subject<Unit> awake;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool calledStart;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Subject<Unit> start;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool calledDestroy;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Subject<Unit> onDestroy;

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x175FA9C", Offset = "0x175FA9C", VA = "0x175FA9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x175FBA8", Offset = "0x175FBA8", VA = "0x175FBA8")]
		public IObservable<Unit> AwakeAsObservable()
		{
			return null;
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x175FD0C", Offset = "0x175FD0C", VA = "0x175FD0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x175FE18", Offset = "0x175FE18", VA = "0x175FE18")]
		public IObservable<Unit> StartAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x175FF7C", Offset = "0x175FF7C", VA = "0x175FF7C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1760088", Offset = "0x1760088", VA = "0x1760088")]
		public IObservable<Unit> OnDestroyAsObservable()
		{
			return null;
		}

		[Token(Token = "0x6000883")]
		protected abstract void RaiseOnCompletedOnDestroy();

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x175A6D4", Offset = "0x175A6D4", VA = "0x175A6D4")]
		protected ObservableTriggerBase()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public static class ObservableTriggerExtensions
	{
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x176022C", Offset = "0x176022C", VA = "0x176022C")]
		public static IObservable<int> OnAnimatorIKAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1760360", Offset = "0x1760360", VA = "0x1760360")]
		public static IObservable<Unit> OnAnimatorMoveAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1760494", Offset = "0x1760494", VA = "0x1760494")]
		public static IObservable<Collision2D> OnCollisionEnter2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x17605C8", Offset = "0x17605C8", VA = "0x17605C8")]
		public static IObservable<Collision2D> OnCollisionExit2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x17606FC", Offset = "0x17606FC", VA = "0x17606FC")]
		public static IObservable<Collision2D> OnCollisionStay2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x1760830", Offset = "0x1760830", VA = "0x1760830")]
		public static IObservable<Collision> OnCollisionEnterAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x1760964", Offset = "0x1760964", VA = "0x1760964")]
		public static IObservable<Collision> OnCollisionExitAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1760A98", Offset = "0x1760A98", VA = "0x1760A98")]
		public static IObservable<Collision> OnCollisionStayAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1760BCC", Offset = "0x1760BCC", VA = "0x1760BCC")]
		public static IObservable<Unit> OnDestroyAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1760D98", Offset = "0x1760D98", VA = "0x1760D98")]
		public static IObservable<Unit> OnEnableAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1760ECC", Offset = "0x1760ECC", VA = "0x1760ECC")]
		public static IObservable<Unit> OnDisableAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1761000", Offset = "0x1761000", VA = "0x1761000")]
		public static IObservable<Unit> FixedUpdateAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x1761134", Offset = "0x1761134", VA = "0x1761134")]
		public static IObservable<Unit> LateUpdateAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x1761268", Offset = "0x1761268", VA = "0x1761268")]
		public static IObservable<Collider2D> OnTriggerEnter2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x176139C", Offset = "0x176139C", VA = "0x176139C")]
		public static IObservable<Collider2D> OnTriggerExit2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x17614D0", Offset = "0x17614D0", VA = "0x17614D0")]
		public static IObservable<Collider2D> OnTriggerStay2DAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x1761604", Offset = "0x1761604", VA = "0x1761604")]
		public static IObservable<Collider> OnTriggerEnterAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x176173C", Offset = "0x176173C", VA = "0x176173C")]
		public static IObservable<Collider> OnTriggerExitAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1761874", Offset = "0x1761874", VA = "0x1761874")]
		public static IObservable<Collider> OnTriggerStayAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x17619AC", Offset = "0x17619AC", VA = "0x17619AC")]
		public static IObservable<Unit> UpdateAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1761AE4", Offset = "0x1761AE4", VA = "0x1761AE4")]
		public static IObservable<Unit> OnBecameInvisibleAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x1761C1C", Offset = "0x1761C1C", VA = "0x1761C1C")]
		public static IObservable<Unit> OnBecameVisibleAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1761D54", Offset = "0x1761D54", VA = "0x1761D54")]
		public static IObservable<Unit> OnBeforeTransformParentChangedAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1761E88", Offset = "0x1761E88", VA = "0x1761E88")]
		public static IObservable<Unit> OnTransformParentChangedAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x1761FBC", Offset = "0x1761FBC", VA = "0x1761FBC")]
		public static IObservable<Unit> OnTransformChildrenChangedAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x17620F0", Offset = "0x17620F0", VA = "0x17620F0")]
		public static IObservable<Unit> OnCanvasGroupChangedAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1762224", Offset = "0x1762224", VA = "0x1762224")]
		public static IObservable<Unit> OnRectTransformDimensionsChangeAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1762358", Offset = "0x1762358", VA = "0x1762358")]
		public static IObservable<Unit> OnRectTransformRemovedAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x176248C", Offset = "0x176248C", VA = "0x176248C")]
		public static IObservable<BaseEventData> OnDeselectAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x17625C0", Offset = "0x17625C0", VA = "0x17625C0")]
		public static IObservable<AxisEventData> OnMoveAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x17626F4", Offset = "0x17626F4", VA = "0x17626F4")]
		public static IObservable<PointerEventData> OnPointerDownAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x1762828", Offset = "0x1762828", VA = "0x1762828")]
		public static IObservable<PointerEventData> OnPointerEnterAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x176295C", Offset = "0x176295C", VA = "0x176295C")]
		public static IObservable<PointerEventData> OnPointerExitAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x1762A90", Offset = "0x1762A90", VA = "0x1762A90")]
		public static IObservable<PointerEventData> OnPointerUpAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1762BC4", Offset = "0x1762BC4", VA = "0x1762BC4")]
		public static IObservable<BaseEventData> OnSelectAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1762CF8", Offset = "0x1762CF8", VA = "0x1762CF8")]
		public static IObservable<PointerEventData> OnPointerClickAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1762E2C", Offset = "0x1762E2C", VA = "0x1762E2C")]
		public static IObservable<BaseEventData> OnSubmitAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1762F60", Offset = "0x1762F60", VA = "0x1762F60")]
		public static IObservable<PointerEventData> OnDragAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1763094", Offset = "0x1763094", VA = "0x1763094")]
		public static IObservable<PointerEventData> OnBeginDragAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x17631C8", Offset = "0x17631C8", VA = "0x17631C8")]
		public static IObservable<PointerEventData> OnEndDragAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x17632FC", Offset = "0x17632FC", VA = "0x17632FC")]
		public static IObservable<PointerEventData> OnDropAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x1763430", Offset = "0x1763430", VA = "0x1763430")]
		public static IObservable<BaseEventData> OnUpdateSelectedAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1763568", Offset = "0x1763568", VA = "0x1763568")]
		public static IObservable<PointerEventData> OnInitializePotentialDragAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x176369C", Offset = "0x176369C", VA = "0x176369C")]
		public static IObservable<BaseEventData> OnCancelAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x17637D0", Offset = "0x17637D0", VA = "0x17637D0")]
		public static IObservable<PointerEventData> OnScrollAsObservable(this UIBehaviour component)
		{
			return null;
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1763904", Offset = "0x1763904", VA = "0x1763904")]
		public static IObservable<GameObject> OnParticleCollisionAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x1763A38", Offset = "0x1763A38", VA = "0x1763A38")]
		public static IObservable<Unit> OnParticleTriggerAsObservable(this Component component)
		{
			return null;
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1763B6C", Offset = "0x1763B6C", VA = "0x1763B6C")]
		public static IObservable<int> OnAnimatorIKAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x1763C54", Offset = "0x1763C54", VA = "0x1763C54")]
		public static IObservable<Unit> OnAnimatorMoveAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x1763D3C", Offset = "0x1763D3C", VA = "0x1763D3C")]
		public static IObservable<Collision2D> OnCollisionEnter2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x1763E24", Offset = "0x1763E24", VA = "0x1763E24")]
		public static IObservable<Collision2D> OnCollisionExit2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x1763F0C", Offset = "0x1763F0C", VA = "0x1763F0C")]
		public static IObservable<Collision2D> OnCollisionStay2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1763FF4", Offset = "0x1763FF4", VA = "0x1763FF4")]
		public static IObservable<Collision> OnCollisionEnterAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x17640DC", Offset = "0x17640DC", VA = "0x17640DC")]
		public static IObservable<Collision> OnCollisionExitAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x17641C4", Offset = "0x17641C4", VA = "0x17641C4")]
		public static IObservable<Collision> OnCollisionStayAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x17642AC", Offset = "0x17642AC", VA = "0x17642AC")]
		public static IObservable<Unit> OnDestroyAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x176442C", Offset = "0x176442C", VA = "0x176442C")]
		public static IObservable<Unit> OnEnableAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1764514", Offset = "0x1764514", VA = "0x1764514")]
		public static IObservable<Unit> OnDisableAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x17645FC", Offset = "0x17645FC", VA = "0x17645FC")]
		public static IObservable<Unit> FixedUpdateAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x17646E4", Offset = "0x17646E4", VA = "0x17646E4")]
		public static IObservable<Unit> LateUpdateAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x17647CC", Offset = "0x17647CC", VA = "0x17647CC")]
		public static IObservable<Collider2D> OnTriggerEnter2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x17648B4", Offset = "0x17648B4", VA = "0x17648B4")]
		public static IObservable<Collider2D> OnTriggerExit2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x176499C", Offset = "0x176499C", VA = "0x176499C")]
		public static IObservable<Collider2D> OnTriggerStay2DAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1764A84", Offset = "0x1764A84", VA = "0x1764A84")]
		public static IObservable<Collider> OnTriggerEnterAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x1764B70", Offset = "0x1764B70", VA = "0x1764B70")]
		public static IObservable<Collider> OnTriggerExitAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x1764C5C", Offset = "0x1764C5C", VA = "0x1764C5C")]
		public static IObservable<Collider> OnTriggerStayAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x1764D48", Offset = "0x1764D48", VA = "0x1764D48")]
		public static IObservable<Unit> UpdateAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x1764E34", Offset = "0x1764E34", VA = "0x1764E34")]
		public static IObservable<Unit> OnBecameInvisibleAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1764F20", Offset = "0x1764F20", VA = "0x1764F20")]
		public static IObservable<Unit> OnBecameVisibleAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x176500C", Offset = "0x176500C", VA = "0x176500C")]
		public static IObservable<Unit> OnBeforeTransformParentChangedAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x17650F4", Offset = "0x17650F4", VA = "0x17650F4")]
		public static IObservable<Unit> OnTransformParentChangedAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x17651DC", Offset = "0x17651DC", VA = "0x17651DC")]
		public static IObservable<Unit> OnTransformChildrenChangedAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x17652C4", Offset = "0x17652C4", VA = "0x17652C4")]
		public static IObservable<Unit> OnCanvasGroupChangedAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x17653AC", Offset = "0x17653AC", VA = "0x17653AC")]
		public static IObservable<Unit> OnRectTransformDimensionsChangeAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x1765494", Offset = "0x1765494", VA = "0x1765494")]
		public static IObservable<Unit> OnRectTransformRemovedAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x176557C", Offset = "0x176557C", VA = "0x176557C")]
		public static IObservable<GameObject> OnParticleCollisionAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x1765664", Offset = "0x1765664", VA = "0x1765664")]
		public static IObservable<Unit> OnParticleTriggerAsObservable(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60008D2")]
		private static T GetOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0D1C", Offset = "0x8B0D1C")]
	public class ObservableTriggerTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Collider> onTriggerEnter;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Collider> onTriggerExit;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Subject<Collider> onTriggerStay;

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x12BF104", Offset = "0x12BF104", VA = "0x12BF104")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x12BF174", Offset = "0x12BF174", VA = "0x12BF174")]
		public IObservable<Collider> OnTriggerEnterAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x12BF1F0", Offset = "0x12BF1F0", VA = "0x12BF1F0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x12BF260", Offset = "0x12BF260", VA = "0x12BF260")]
		public IObservable<Collider> OnTriggerExitAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x12BF2DC", Offset = "0x12BF2DC", VA = "0x12BF2DC")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x12BF34C", Offset = "0x12BF34C", VA = "0x12BF34C")]
		public IObservable<Collider> OnTriggerStayAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x12BF3C8", Offset = "0x12BF3C8", VA = "0x12BF3C8", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x12BF454", Offset = "0x12BF454", VA = "0x12BF454")]
		public ObservableTriggerTrigger()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0D2C", Offset = "0x8B0D2C")]
	public class ObservableUpdateSelectedTrigger : ObservableTriggerBase, IEventSystemHandler, IUpdateSelectedHandler
	{
		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<BaseEventData> onUpdateSelected;

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x12BF45C", Offset = "0x12BF45C", VA = "0x12BF45C", Slot = "5")]
		private void UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x12BF4CC", Offset = "0x12BF4CC", VA = "0x12BF4CC")]
		public IObservable<BaseEventData> OnUpdateSelectedAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x12BF548", Offset = "0x12BF548", VA = "0x12BF548", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x12BF5A4", Offset = "0x12BF5A4", VA = "0x12BF5A4")]
		public ObservableUpdateSelectedTrigger()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0D3C", Offset = "0x8B0D3C")]
	public class ObservableUpdateTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> update;

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x12BF5AC", Offset = "0x12BF5AC", VA = "0x12BF5AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x12BF688", Offset = "0x12BF688", VA = "0x12BF688")]
		public IObservable<Unit> UpdateAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x12BF704", Offset = "0x12BF704", VA = "0x12BF704", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x12BF760", Offset = "0x12BF760", VA = "0x12BF760")]
		public ObservableUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B0D4C", Offset = "0x8B0D4C")]
	public class ObservableVisibleTrigger : ObservableTriggerBase
	{
		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Subject<Unit> onBecameInvisible;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Subject<Unit> onBecameVisible;

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x12BF768", Offset = "0x12BF768", VA = "0x12BF768")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x12BF844", Offset = "0x12BF844", VA = "0x12BF844")]
		public IObservable<Unit> OnBecameInvisibleAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x12BF8C0", Offset = "0x12BF8C0", VA = "0x12BF8C0")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x12BF99C", Offset = "0x12BF99C", VA = "0x12BF99C")]
		public IObservable<Unit> OnBecameVisibleAsObservable()
		{
			return null;
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x12BFA18", Offset = "0x12BFA18", VA = "0x12BFA18", Slot = "4")]
		protected override void RaiseOnCompletedOnDestroy()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x12BFA8C", Offset = "0x12BFA8C", VA = "0x12BFA8C")]
		public ObservableVisibleTrigger()
		{
		}
	}
}
namespace UniRx.Toolkit
{
	[Token(Token = "0x2000188")]
	public abstract class ObjectPool<T> : IDisposable where T : Component
	{
		[Token(Token = "0x2000189")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0D5C", Offset = "0x8B0D5C")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x40003E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ObjectPool<T> <>4__this;

			[Token(Token = "0x40003E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float instanceCountRatio;

			[Token(Token = "0x40003E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int minSize;

			[Token(Token = "0x40003E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool callOnBeforeRent;

			[Token(Token = "0x60008F9")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60008FA")]
			internal bool <StartShrinkTimer>b__0(long _)
			{
				return default(bool);
			}

			[Token(Token = "0x60008FB")]
			internal void <StartShrinkTimer>b__1(long _)
			{
			}
		}

		[Token(Token = "0x200018A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0D6C", Offset = "0x8B0D6C")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40003E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ObjectPool<T> <>4__this;

			[Token(Token = "0x40003E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int preloadCount;

			[Token(Token = "0x40003E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int threshold;

			[Token(Token = "0x60008FC")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60008FD")]
			internal IEnumerator <PreloadAsync>b__0(IObserver<Unit> observer, CancellationToken cancel)
			{
				return null;
			}
		}

		[Token(Token = "0x200018B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0D7C", Offset = "0x8B0D7C")]
		private sealed class <PreloadCore>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40003E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40003EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40003EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int preloadCount;

			[Token(Token = "0x40003EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ObjectPool<T> <>4__this;

			[Token(Token = "0x40003ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int threshold;

			[Token(Token = "0x40003EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<Unit> observer;

			[Token(Token = "0x40003EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x17000108")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000901")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000109")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000903")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008FE")]
			[DebuggerHidden]
			public <PreloadCore>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60008FF")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000900")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000902")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T> q;

		[Token(Token = "0x17000106")]
		protected int MaxPoolCount
		{
			[Token(Token = "0x60008E9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000107")]
		public int Count
		{
			[Token(Token = "0x60008EE")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60008EA")]
		protected abstract T CreateInstance();

		[Token(Token = "0x60008EB")]
		protected virtual void OnBeforeRent(T instance)
		{
		}

		[Token(Token = "0x60008EC")]
		protected virtual void OnBeforeReturn(T instance)
		{
		}

		[Token(Token = "0x60008ED")]
		protected virtual void OnClear(T instance)
		{
		}

		[Token(Token = "0x60008EF")]
		public T Rent()
		{
			return null;
		}

		[Token(Token = "0x60008F0")]
		public void Return(T instance)
		{
		}

		[Token(Token = "0x60008F1")]
		public void Clear(bool callOnBeforeRent = false)
		{
		}

		[Token(Token = "0x60008F2")]
		public void Shrink(float instanceCountRatio, int minSize, bool callOnBeforeRent = false)
		{
		}

		[Token(Token = "0x60008F3")]
		public IDisposable StartShrinkTimer(TimeSpan checkInterval, float instanceCountRatio, int minSize, bool callOnBeforeRent = false)
		{
			return null;
		}

		[Token(Token = "0x60008F4")]
		public IObservable<Unit> PreloadAsync(int preloadCount, int threshold)
		{
			return null;
		}

		[Token(Token = "0x60008F5")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B8D44", Offset = "0x8B8D44")]
		private IEnumerator PreloadCore(int preloadCount, int threshold, IObserver<Unit> observer, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x60008F6")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60008F7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60008F8")]
		protected ObjectPool()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public abstract class AsyncObjectPool<T> : IDisposable where T : Component
	{
		[Token(Token = "0x200018D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0D8C", Offset = "0x8B0D8C")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40003F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncObjectPool<T> <>4__this;

			[Token(Token = "0x40003F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float instanceCountRatio;

			[Token(Token = "0x40003F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int minSize;

			[Token(Token = "0x40003F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool callOnBeforeRent;

			[Token(Token = "0x6000916")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6000917")]
			internal bool <StartShrinkTimer>b__0(long _)
			{
				return default(bool);
			}

			[Token(Token = "0x6000918")]
			internal void <StartShrinkTimer>b__1(long _)
			{
			}
		}

		[Token(Token = "0x200018E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0D9C", Offset = "0x8B0D9C")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40003F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncObjectPool<T> <>4__this;

			[Token(Token = "0x40003F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int preloadCount;

			[Token(Token = "0x40003F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int threshold;

			[Token(Token = "0x6000919")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x600091A")]
			internal IEnumerator <PreloadAsync>b__0(IObserver<Unit> observer, CancellationToken cancel)
			{
				return null;
			}
		}

		[Token(Token = "0x200018F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0DAC", Offset = "0x8B0DAC")]
		private sealed class <PreloadCore>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40003F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40003FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x40003FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int preloadCount;

			[Token(Token = "0x40003FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncObjectPool<T> <>4__this;

			[Token(Token = "0x40003FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int threshold;

			[Token(Token = "0x40003FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x40003FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<Unit> observer;

			[Token(Token = "0x4000400")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ObservableYieldInstruction<Unit> <awaiter>5__2;

			[Token(Token = "0x1700010C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600091E")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000920")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600091B")]
			[DebuggerHidden]
			public <PreloadCore>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x600091C")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600091D")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600091F")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T> q;

		[Token(Token = "0x1700010A")]
		protected int MaxPoolCount
		{
			[Token(Token = "0x6000904")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700010B")]
		public int Count
		{
			[Token(Token = "0x6000909")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000905")]
		protected abstract IObservable<T> CreateInstanceAsync();

		[Token(Token = "0x6000906")]
		protected virtual void OnBeforeRent(T instance)
		{
		}

		[Token(Token = "0x6000907")]
		protected virtual void OnBeforeReturn(T instance)
		{
		}

		[Token(Token = "0x6000908")]
		protected virtual void OnClear(T instance)
		{
		}

		[Token(Token = "0x600090A")]
		public IObservable<T> RentAsync()
		{
			return null;
		}

		[Token(Token = "0x600090B")]
		public void Return(T instance)
		{
		}

		[Token(Token = "0x600090C")]
		public void Shrink(float instanceCountRatio, int minSize, bool callOnBeforeRent = false)
		{
		}

		[Token(Token = "0x600090D")]
		public IDisposable StartShrinkTimer(TimeSpan checkInterval, float instanceCountRatio, int minSize, bool callOnBeforeRent = false)
		{
			return null;
		}

		[Token(Token = "0x600090E")]
		public void Clear(bool callOnBeforeRent = false)
		{
		}

		[Token(Token = "0x600090F")]
		public IObservable<Unit> PreloadAsync(int preloadCount, int threshold)
		{
			return null;
		}

		[Token(Token = "0x6000910")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B8DF4", Offset = "0x8B8DF4")]
		private IEnumerator PreloadCore(int preloadCount, int threshold, IObserver<Unit> observer, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6000911")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000912")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000913")]
		protected AsyncObjectPool()
		{
		}

		[Token(Token = "0x6000914")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8E54", Offset = "0x8B8E54")]
		private void <RentAsync>b__10_0(T x)
		{
		}

		[Token(Token = "0x6000915")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8E64", Offset = "0x8B8E64")]
		private void <PreloadCore>b__16_0(T x)
		{
		}
	}
}
namespace UniRx.Diagnostics
{
	[Token(Token = "0x2000190")]
	public struct LogEntry
	{
		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2940", Offset = "0x8B2940")]
		private string <LoggerName>k__BackingField;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2950", Offset = "0x8B2950")]
		private LogType <LogType>k__BackingField;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2960", Offset = "0x8B2960")]
		private string <Message>k__BackingField;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2970", Offset = "0x8B2970")]
		private DateTime <Timestamp>k__BackingField;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2980", Offset = "0x8B2980")]
		private UnityEngine.Object <Context>k__BackingField;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2990", Offset = "0x8B2990")]
		private Exception <Exception>k__BackingField;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B29A0", Offset = "0x8B29A0")]
		private string <StackTrace>k__BackingField;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B29B0", Offset = "0x8B29B0")]
		private object <State>k__BackingField;

		[Token(Token = "0x1700010E")]
		public string LoggerName
		{
			[Token(Token = "0x6000921")]
			[Address(RVA = "0x1697E8C", Offset = "0x1697E8C", VA = "0x1697E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8EC4", Offset = "0x8B8EC4")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000922")]
			[Address(RVA = "0x1697E94", Offset = "0x1697E94", VA = "0x1697E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8EFC", Offset = "0x8B8EFC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public LogType LogType
		{
			[Token(Token = "0x6000923")]
			[Address(RVA = "0x1697E9C", Offset = "0x1697E9C", VA = "0x1697E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8F0C", Offset = "0x8B8F0C")]
			readonly get
			{
				return default(LogType);
			}
			[Token(Token = "0x6000924")]
			[Address(RVA = "0x1697EA4", Offset = "0x1697EA4", VA = "0x1697EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8F44", Offset = "0x8B8F44")]
			private set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public string Message
		{
			[Token(Token = "0x6000925")]
			[Address(RVA = "0x1697EAC", Offset = "0x1697EAC", VA = "0x1697EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8F54", Offset = "0x8B8F54")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000926")]
			[Address(RVA = "0x1697EB4", Offset = "0x1697EB4", VA = "0x1697EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8F8C", Offset = "0x8B8F8C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public DateTime Timestamp
		{
			[Token(Token = "0x6000927")]
			[Address(RVA = "0x1697EBC", Offset = "0x1697EBC", VA = "0x1697EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8F9C", Offset = "0x8B8F9C")]
			readonly get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6000928")]
			[Address(RVA = "0x1697EC4", Offset = "0x1697EC4", VA = "0x1697EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8FD4", Offset = "0x8B8FD4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public UnityEngine.Object Context
		{
			[Token(Token = "0x6000929")]
			[Address(RVA = "0x1697ECC", Offset = "0x1697ECC", VA = "0x1697ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B8FE4", Offset = "0x8B8FE4")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x600092A")]
			[Address(RVA = "0x1697ED4", Offset = "0x1697ED4", VA = "0x1697ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B901C", Offset = "0x8B901C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public Exception Exception
		{
			[Token(Token = "0x600092B")]
			[Address(RVA = "0x1697EDC", Offset = "0x1697EDC", VA = "0x1697EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B902C", Offset = "0x8B902C")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x600092C")]
			[Address(RVA = "0x1697EE4", Offset = "0x1697EE4", VA = "0x1697EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9064", Offset = "0x8B9064")]
			private set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public string StackTrace
		{
			[Token(Token = "0x600092D")]
			[Address(RVA = "0x1697EEC", Offset = "0x1697EEC", VA = "0x1697EEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9074", Offset = "0x8B9074")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x600092E")]
			[Address(RVA = "0x1697EF4", Offset = "0x1697EF4", VA = "0x1697EF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B90AC", Offset = "0x8B90AC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public object State
		{
			[Token(Token = "0x600092F")]
			[Address(RVA = "0x1697EFC", Offset = "0x1697EFC", VA = "0x1697EFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B90BC", Offset = "0x8B90BC")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000930")]
			[Address(RVA = "0x1697F04", Offset = "0x1697F04", VA = "0x1697F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B90F4", Offset = "0x8B90F4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x1697F0C", Offset = "0x1697F0C", VA = "0x1697F0C")]
		public LogEntry(string loggerName, LogType logType, DateTime timestamp, string message, [Optional] UnityEngine.Object context, [Optional] Exception exception, [Optional] string stackTrace, [Optional] object state)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x1697F28", Offset = "0x1697F28", VA = "0x1697F28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000191")]
	public static class LogEntryExtensions
	{
		[Token(Token = "0x6000933")]
		[Address(RVA = "0x1698244", Offset = "0x1698244", VA = "0x1698244")]
		public static IDisposable LogToUnityDebug(this IObservable<LogEntry> source)
		{
			return null;
		}
	}
	[Token(Token = "0x2000192")]
	public class Logger
	{
		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isInitialized;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool isDebugBuild;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B29C0", Offset = "0x8B29C0")]
		private string <Name>k__BackingField;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly Action<LogEntry> logPublisher;

		[Token(Token = "0x17000116")]
		public string Name
		{
			[Token(Token = "0x6000934")]
			[Address(RVA = "0x1698318", Offset = "0x1698318", VA = "0x1698318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9114", Offset = "0x8B9114")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000935")]
			[Address(RVA = "0x1698320", Offset = "0x1698320", VA = "0x1698320")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9124", Offset = "0x8B9124")]
			private set
			{
			}
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x1698328", Offset = "0x1698328", VA = "0x1698328")]
		public Logger(string loggerName)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x16983B0", Offset = "0x16983B0", VA = "0x16983B0", Slot = "4")]
		public virtual void Debug(object message, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x169857C", Offset = "0x169857C", VA = "0x169857C", Slot = "5")]
		public virtual void DebugFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1698748", Offset = "0x1698748", VA = "0x1698748", Slot = "6")]
		public virtual void Log(object message, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x1698848", Offset = "0x1698848", VA = "0x1698848", Slot = "7")]
		public virtual void LogFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1698948", Offset = "0x1698948", VA = "0x1698948", Slot = "8")]
		public virtual void Warning(object message, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1698A48", Offset = "0x1698A48", VA = "0x1698A48", Slot = "9")]
		public virtual void WarningFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x1698B48", Offset = "0x1698B48", VA = "0x1698B48", Slot = "10")]
		public virtual void Error(object message, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x1698C3C", Offset = "0x1698C3C", VA = "0x1698C3C", Slot = "11")]
		public virtual void ErrorFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x1698D30", Offset = "0x1698D30", VA = "0x1698D30", Slot = "12")]
		public virtual void Exception(Exception exception, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x1698E38", Offset = "0x1698E38", VA = "0x1698E38", Slot = "13")]
		public virtual void Raw(LogEntry logEntry)
		{
		}
	}
	[Token(Token = "0x2000193")]
	public static class ObservableDebugExtensions
	{
		[Token(Token = "0x6000942")]
		public static IObservable<T> Debug<T>(this IObservable<T> source, [Optional] string label)
		{
			return null;
		}

		[Token(Token = "0x6000943")]
		public static IObservable<T> Debug<T>(this IObservable<T> source, Logger logger)
		{
			return null;
		}
	}
	[Token(Token = "0x2000194")]
	public class ObservableLogger : IObservable<LogEntry>
	{
		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Subject<LogEntry> logPublisher;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly ObservableLogger Listener;

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x175D744", Offset = "0x175D744", VA = "0x175D744")]
		private ObservableLogger()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x175D74C", Offset = "0x175D74C", VA = "0x175D74C")]
		public static Action<LogEntry> RegisterLogger(Logger logger)
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x175D85C", Offset = "0x175D85C", VA = "0x175D85C", Slot = "4")]
		public IDisposable Subscribe(IObserver<LogEntry> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000195")]
	public class UnityDebugSink : IObserver<LogEntry>
	{
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x10B4788", Offset = "0x10B4788", VA = "0x10B4788", Slot = "6")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x10B478C", Offset = "0x10B478C", VA = "0x10B478C", Slot = "5")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x10B4790", Offset = "0x10B4790", VA = "0x10B4790", Slot = "4")]
		public void OnNext(LogEntry value)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x10B4980", Offset = "0x10B4980", VA = "0x10B4980")]
		public UnityDebugSink()
		{
		}
	}
}
namespace UniRx.Operators
{
	[Token(Token = "0x2000196")]
	internal class AggregateObservable<TSource> : OperatorObservableBase<TSource>
	{
		[Token(Token = "0x2000197")]
		private class Aggregate : OperatorObserverBase<TSource, TSource>
		{
			[Token(Token = "0x4000411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AggregateObservable<TSource> parent;

			[Token(Token = "0x4000412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TSource accumulation;

			[Token(Token = "0x4000413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool seenValue;

			[Token(Token = "0x600094E")]
			public Aggregate(AggregateObservable<TSource> parent, IObserver<TSource> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x600094F")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000950")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000951")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, TSource, TSource> accumulator;

		[Token(Token = "0x600094C")]
		public AggregateObservable(IObservable<TSource> source, Func<TSource, TSource, TSource> accumulator)
		{
		}

		[Token(Token = "0x600094D")]
		protected override IDisposable SubscribeCore(IObserver<TSource> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000198")]
	internal class AggregateObservable<TSource, TAccumulate> : OperatorObservableBase<TAccumulate>
	{
		[Token(Token = "0x2000199")]
		private class Aggregate : OperatorObserverBase<TSource, TAccumulate>
		{
			[Token(Token = "0x4000417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AggregateObservable<TSource, TAccumulate> parent;

			[Token(Token = "0x4000418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TAccumulate accumulation;

			[Token(Token = "0x6000954")]
			public Aggregate(AggregateObservable<TSource, TAccumulate> parent, IObserver<TAccumulate> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000955")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000956")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000957")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TAccumulate seed;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TAccumulate, TSource, TAccumulate> accumulator;

		[Token(Token = "0x6000952")]
		public AggregateObservable(IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator)
		{
		}

		[Token(Token = "0x6000953")]
		protected override IDisposable SubscribeCore(IObserver<TAccumulate> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200019A")]
	internal class AggregateObservable<TSource, TAccumulate, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x200019B")]
		private class Aggregate : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x400041D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AggregateObservable<TSource, TAccumulate, TResult> parent;

			[Token(Token = "0x400041E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TAccumulate accumulation;

			[Token(Token = "0x600095A")]
			public Aggregate(AggregateObservable<TSource, TAccumulate, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x600095B")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x600095C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x600095D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TAccumulate seed;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TAccumulate, TSource, TAccumulate> accumulator;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TAccumulate, TResult> resultSelector;

		[Token(Token = "0x6000958")]
		public AggregateObservable(IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator, Func<TAccumulate, TResult> resultSelector)
		{
		}

		[Token(Token = "0x6000959")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200019C")]
	internal class AmbObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200019D")]
		private class AmbOuterObserver : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200019E")]
			private enum AmbState
			{
				[Token(Token = "0x4000427")]
				Left,
				[Token(Token = "0x4000428")]
				Right,
				[Token(Token = "0x4000429")]
				Neither
			}

			[Token(Token = "0x200019F")]
			private class Amb : IObserver<T>
			{
				[Token(Token = "0x400042A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IObserver<T> targetObserver;

				[Token(Token = "0x400042B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IDisposable targetDisposable;

				[Token(Token = "0x6000965")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000966")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000967")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000968")]
				public Amb()
				{
				}
			}

			[Token(Token = "0x20001A0")]
			private class AmbDecisionObserver : IObserver<T>
			{
				[Token(Token = "0x400042C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly AmbOuterObserver parent;

				[Token(Token = "0x400042D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly AmbState me;

				[Token(Token = "0x400042E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable otherSubscription;

				[Token(Token = "0x400042F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Amb self;

				[Token(Token = "0x6000969")]
				public AmbDecisionObserver(AmbOuterObserver parent, AmbState me, IDisposable otherSubscription, Amb self)
				{
				}

				[Token(Token = "0x600096A")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x600096B")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x600096C")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly AmbObservable<T> parent;

			[Token(Token = "0x4000422")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000423")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable leftSubscription;

			[Token(Token = "0x4000424")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable rightSubscription;

			[Token(Token = "0x4000425")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private AmbState choice;

			[Token(Token = "0x6000960")]
			public AmbOuterObserver(AmbObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000961")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000962")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000963")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000964")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> second;

		[Token(Token = "0x600095E")]
		public AmbObservable(IObservable<T> source, IObservable<T> second)
		{
		}

		[Token(Token = "0x600095F")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A1")]
	internal class AsObservableObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001A2")]
		private class AsObservable : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x600096F")]
			public AsObservable(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000970")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000971")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000972")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x600096D")]
		public AsObservableObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x600096E")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A3")]
	internal class AsSingleUnitObservableObservable<T> : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x20001A4")]
		private class AsSingleUnitObservable : OperatorObserverBase<T, Unit>
		{
			[Token(Token = "0x6000975")]
			public AsSingleUnitObservable(IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000976")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000977")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000978")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000973")]
		public AsSingleUnitObservableObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x6000974")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A5")]
	internal class AsUnitObservableObservable<T> : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x20001A6")]
		private class AsUnitObservable : OperatorObserverBase<T, Unit>
		{
			[Token(Token = "0x600097B")]
			public AsUnitObservable(IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x600097C")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x600097D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x600097E")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000979")]
		public AsUnitObservableObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x600097A")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A7")]
	internal class BufferObservable<T> : OperatorObservableBase<IList<T>>
	{
		[Token(Token = "0x20001A8")]
		private class Buffer : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x4000439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<T> parent;

			[Token(Token = "0x400043A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<T> list;

			[Token(Token = "0x6000983")]
			public Buffer(BufferObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000984")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000985")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000986")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000987")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20001A9")]
		private class Buffer_ : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x400043B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<T> parent;

			[Token(Token = "0x400043C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<List<T>> q;

			[Token(Token = "0x400043D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000988")]
			public Buffer_(BufferObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000989")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x600098A")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x600098B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x600098C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20001AA")]
		private class BufferT : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x20001AB")]
			private class Buffer : IObserver<long>
			{
				[Token(Token = "0x4000442")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private BufferT parent;

				[Token(Token = "0x6000993")]
				public Buffer(BufferT parent)
				{
				}

				[Token(Token = "0x6000994")]
				public void OnNext(long value)
				{
				}

				[Token(Token = "0x6000995")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000996")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly T[] EmptyArray;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<T> parent;

			[Token(Token = "0x4000440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<T> list;

			[Token(Token = "0x600098D")]
			public BufferT(BufferObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x600098E")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x600098F")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000990")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000991")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20001AC")]
		private class BufferTS : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x20001AD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0DDC", Offset = "0x8B0DDC")]
			private sealed class <>c__DisplayClass9_0
			{
				[Token(Token = "0x400044A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public BufferTS <>4__this;

				[Token(Token = "0x400044B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public bool isShift;

				[Token(Token = "0x400044C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public bool isSpan;

				[Token(Token = "0x600099D")]
				public <>c__DisplayClass9_0()
				{
				}

				[Token(Token = "0x600099E")]
				internal void <CreateTimer>b__0()
				{
				}
			}

			[Token(Token = "0x4000443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<T> parent;

			[Token(Token = "0x4000444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<IList<T>> q;

			[Token(Token = "0x4000446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TimeSpan totalTime;

			[Token(Token = "0x4000447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TimeSpan nextShift;

			[Token(Token = "0x4000448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TimeSpan nextSpan;

			[Token(Token = "0x4000449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable timerD;

			[Token(Token = "0x6000997")]
			public BufferTS(BufferObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000998")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000999")]
			private void CreateTimer()
			{
			}

			[Token(Token = "0x600099A")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x600099B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x600099C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20001AE")]
		private class BufferTC : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x20001AF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0DEC", Offset = "0x8B0DEC")]
			private sealed class <>c__DisplayClass8_0
			{
				[Token(Token = "0x4000453")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public BufferTC <>4__this;

				[Token(Token = "0x4000454")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public long currentTimerId;

				[Token(Token = "0x60009A8")]
				public <>c__DisplayClass8_0()
				{
				}

				[Token(Token = "0x60009A9")]
				internal void <CreateTimer>b__0()
				{
				}

				[Token(Token = "0x60009AA")]
				internal void <CreateTimer>b__1(Action<TimeSpan> self)
				{
				}
			}

			[Token(Token = "0x400044D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly T[] EmptyArray;

			[Token(Token = "0x400044E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<T> parent;

			[Token(Token = "0x400044F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<T> list;

			[Token(Token = "0x4000451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private long timerId;

			[Token(Token = "0x4000452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable timerD;

			[Token(Token = "0x600099F")]
			public BufferTC(BufferObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009A0")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009A1")]
			private void CreateTimer()
			{
			}

			[Token(Token = "0x60009A2")]
			private void OnNextTick(long currentTimerId)
			{
			}

			[Token(Token = "0x60009A3")]
			private void OnNextRecursive(long currentTimerId, Action<TimeSpan> self)
			{
			}

			[Token(Token = "0x60009A4")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x60009A5")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009A6")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int count;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int skip;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan timeSpan;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan timeShift;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x600097F")]
		public BufferObservable(IObservable<T> source, int count, int skip)
		{
		}

		[Token(Token = "0x6000980")]
		public BufferObservable(IObservable<T> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000981")]
		public BufferObservable(IObservable<T> source, TimeSpan timeSpan, int count, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000982")]
		protected override IDisposable SubscribeCore(IObserver<IList<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B0")]
	internal class BufferObservable<TSource, TWindowBoundary> : OperatorObservableBase<IList<TSource>>
	{
		[Token(Token = "0x20001B1")]
		private class Buffer : OperatorObserverBase<TSource, IList<TSource>>
		{
			[Token(Token = "0x20001B2")]
			private class Buffer_ : IObserver<TWindowBoundary>
			{
				[Token(Token = "0x400045B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Buffer parent;

				[Token(Token = "0x60009B3")]
				public Buffer_(Buffer parent)
				{
				}

				[Token(Token = "0x60009B4")]
				public void OnNext(TWindowBoundary value)
				{
				}

				[Token(Token = "0x60009B5")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x60009B6")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly TSource[] EmptyArray;

			[Token(Token = "0x4000458")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BufferObservable<TSource, TWindowBoundary> parent;

			[Token(Token = "0x4000459")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x400045A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<TSource> list;

			[Token(Token = "0x60009AD")]
			public Buffer(BufferObservable<TSource, TWindowBoundary> parent, IObserver<IList<TSource>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009AE")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009AF")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x60009B0")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009B1")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TWindowBoundary> windowBoundaries;

		[Token(Token = "0x60009AB")]
		public BufferObservable(IObservable<TSource> source, IObservable<TWindowBoundary> windowBoundaries)
		{
		}

		[Token(Token = "0x60009AC")]
		protected override IDisposable SubscribeCore(IObserver<IList<TSource>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B3")]
	internal class CastObservable<TSource, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20001B4")]
		private class Cast : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x60009B9")]
			public Cast(IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009BA")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x60009BB")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009BC")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x60009B7")]
		public CastObservable(IObservable<TSource> source)
		{
		}

		[Token(Token = "0x60009B8")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B5")]
	internal class CatchObservable<T, TException> : OperatorObservableBase<T> where TException : Exception
	{
		[Token(Token = "0x20001B6")]
		private class Catch : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400045F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CatchObservable<T, TException> parent;

			[Token(Token = "0x4000460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x4000461")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable exceptionSubscription;

			[Token(Token = "0x60009BF")]
			public Catch(CatchObservable<T, TException> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009C0")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009C1")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x60009C2")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009C3")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TException, IObservable<T>> errorHandler;

		[Token(Token = "0x60009BD")]
		public CatchObservable(IObservable<T> source, Func<TException, IObservable<T>> errorHandler)
		{
		}

		[Token(Token = "0x60009BE")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B7")]
	internal class CatchObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001B8")]
		private class Catch : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000463")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CatchObservable<T> parent;

			[Token(Token = "0x4000464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x4000466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<IObservable<T>> e;

			[Token(Token = "0x4000467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable subscription;

			[Token(Token = "0x4000468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Exception lastException;

			[Token(Token = "0x4000469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action nextSelf;

			[Token(Token = "0x60009C6")]
			public Catch(CatchObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009C7")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009C8")]
			private void RecursiveRun(Action self)
			{
			}

			[Token(Token = "0x60009C9")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x60009CA")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009CB")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x60009CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9154", Offset = "0x8B9154")]
			private void <Run>b__8_0()
			{
			}
		}

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<IObservable<T>> sources;

		[Token(Token = "0x60009C4")]
		public CatchObservable(IEnumerable<IObservable<T>> sources)
		{
		}

		[Token(Token = "0x60009C5")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B9")]
	public delegate TR CombineLatestFunc<T1, T2, T3, TR>(T1 arg1, T2 arg2, T3 arg3);
	[Token(Token = "0x20001BA")]
	public delegate TR CombineLatestFunc<T1, T2, T3, T4, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
	[Token(Token = "0x20001BB")]
	public delegate TR CombineLatestFunc<T1, T2, T3, T4, T5, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	[Token(Token = "0x20001BC")]
	public delegate TR CombineLatestFunc<T1, T2, T3, T4, T5, T6, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
	[Token(Token = "0x20001BD")]
	public delegate TR CombineLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
	[Token(Token = "0x20001BE")]
	internal class CombineLatestObservable<TLeft, TRight, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20001BF")]
		private class CombineLatest : OperatorObserverBase<TResult, TResult>
		{
			[Token(Token = "0x20001C0")]
			private class LeftObserver : IObserver<TLeft>
			{
				[Token(Token = "0x4000475")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly CombineLatest parent;

				[Token(Token = "0x60009E9")]
				public LeftObserver(CombineLatest parent)
				{
				}

				[Token(Token = "0x60009EA")]
				public void OnNext(TLeft value)
				{
				}

				[Token(Token = "0x60009EB")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x60009EC")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x20001C1")]
			private class RightObserver : IObserver<TRight>
			{
				[Token(Token = "0x4000476")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly CombineLatest parent;

				[Token(Token = "0x60009ED")]
				public RightObserver(CombineLatest parent)
				{
				}

				[Token(Token = "0x60009EE")]
				public void OnNext(TRight value)
				{
				}

				[Token(Token = "0x60009EF")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x60009F0")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400046D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<TLeft, TRight, TResult> parent;

			[Token(Token = "0x400046E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400046F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TLeft leftValue;

			[Token(Token = "0x4000470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool leftStarted;

			[Token(Token = "0x4000471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool leftCompleted;

			[Token(Token = "0x4000472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TRight rightValue;

			[Token(Token = "0x4000473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool rightStarted;

			[Token(Token = "0x4000474")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool rightCompleted;

			[Token(Token = "0x60009E3")]
			public CombineLatest(CombineLatestObservable<TLeft, TRight, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009E4")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009E5")]
			public void Publish()
			{
			}

			[Token(Token = "0x60009E6")]
			public override void OnNext(TResult value)
			{
			}

			[Token(Token = "0x60009E7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009E8")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TLeft> left;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TRight> right;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TLeft, TRight, TResult> selector;

		[Token(Token = "0x60009E1")]
		public CombineLatestObservable(IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
		}

		[Token(Token = "0x60009E2")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C2")]
	internal class CombineLatestObservable<T> : OperatorObservableBase<IList<T>>
	{
		[Token(Token = "0x20001C3")]
		private class CombineLatest : OperatorObserverBase<IList<T>, IList<T>>
		{
			[Token(Token = "0x20001C4")]
			private class CombineLatestObserver : IObserver<T>
			{
				[Token(Token = "0x400047F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly CombineLatest parent;

				[Token(Token = "0x4000480")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int index;

				[Token(Token = "0x60009F9")]
				public CombineLatestObserver(CombineLatest parent, int index)
				{
				}

				[Token(Token = "0x60009FA")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x60009FB")]
				public void OnError(Exception ex)
				{
				}

				[Token(Token = "0x60009FC")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T> parent;

			[Token(Token = "0x4000479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400047A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int length;

			[Token(Token = "0x400047B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] values;

			[Token(Token = "0x400047C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool[] isStarted;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool[] isCompleted;

			[Token(Token = "0x400047E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isAllValueStarted;

			[Token(Token = "0x60009F3")]
			public CombineLatest(CombineLatestObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x60009F4")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x60009F5")]
			private void Publish(int index)
			{
			}

			[Token(Token = "0x60009F6")]
			public override void OnNext(IList<T> value)
			{
			}

			[Token(Token = "0x60009F7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x60009F8")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T>[] sources;

		[Token(Token = "0x60009F1")]
		public CombineLatestObservable(IObservable<T>[] sources)
		{
		}

		[Token(Token = "0x60009F2")]
		protected override IDisposable SubscribeCore(IObserver<IList<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C5")]
	internal class CombineLatestObservable<T1, T2, T3, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20001C6")]
		private class CombineLatest : NthCombineLatestObserverBase<TR>
		{
			[Token(Token = "0x4000485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T1, T2, T3, TR> parent;

			[Token(Token = "0x4000486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T1> c1;

			[Token(Token = "0x4000488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T2> c2;

			[Token(Token = "0x4000489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T3> c3;

			[Token(Token = "0x60009FF")]
			public CombineLatest(int length, CombineLatestObservable<T1, T2, T3, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A00")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A01")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000A02")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000A03")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A04")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CombineLatestFunc<T1, T2, T3, TR> resultSelector;

		[Token(Token = "0x60009FD")]
		public CombineLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, CombineLatestFunc<T1, T2, T3, TR> resultSelector)
		{
		}

		[Token(Token = "0x60009FE")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C7")]
	internal class CombineLatestObservable<T1, T2, T3, T4, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20001C8")]
		private class CombineLatest : NthCombineLatestObserverBase<TR>
		{
			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T1, T2, T3, T4, TR> parent;

			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T1> c1;

			[Token(Token = "0x4000492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T2> c2;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T3> c3;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T4> c4;

			[Token(Token = "0x6000A07")]
			public CombineLatest(int length, CombineLatestObservable<T1, T2, T3, T4, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A08")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A09")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000A0A")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000A0B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A0C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CombineLatestFunc<T1, T2, T3, T4, TR> resultSelector;

		[Token(Token = "0x6000A05")]
		public CombineLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, CombineLatestFunc<T1, T2, T3, T4, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000A06")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C9")]
	internal class CombineLatestObservable<T1, T2, T3, T4, T5, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20001CA")]
		private class CombineLatest : NthCombineLatestObserverBase<TR>
		{
			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T1, T2, T3, T4, T5, TR> parent;

			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400049D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T1> c1;

			[Token(Token = "0x400049E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T2> c2;

			[Token(Token = "0x400049F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T3> c3;

			[Token(Token = "0x40004A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T4> c4;

			[Token(Token = "0x40004A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T5> c5;

			[Token(Token = "0x6000A0F")]
			public CombineLatest(int length, CombineLatestObservable<T1, T2, T3, T4, T5, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A10")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A11")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000A12")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000A13")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A14")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CombineLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector;

		[Token(Token = "0x6000A0D")]
		public CombineLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, CombineLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000A0E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CB")]
	internal class CombineLatestObservable<T1, T2, T3, T4, T5, T6, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20001CC")]
		private class CombineLatest : NthCombineLatestObserverBase<TR>
		{
			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T1, T2, T3, T4, T5, T6, TR> parent;

			[Token(Token = "0x40004AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T1> c1;

			[Token(Token = "0x40004AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T2> c2;

			[Token(Token = "0x40004AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T3> c3;

			[Token(Token = "0x40004AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T4> c4;

			[Token(Token = "0x40004AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T5> c5;

			[Token(Token = "0x40004B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T6> c6;

			[Token(Token = "0x6000A17")]
			public CombineLatest(int length, CombineLatestObservable<T1, T2, T3, T4, T5, T6, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A18")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A19")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000A1A")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000A1B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A1C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CombineLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector;

		[Token(Token = "0x6000A15")]
		public CombineLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, CombineLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000A16")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CD")]
	internal class CombineLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20001CE")]
		private class CombineLatest : NthCombineLatestObserverBase<TR>
		{
			[Token(Token = "0x40004B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly CombineLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent;

			[Token(Token = "0x40004BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40004BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T1> c1;

			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T2> c2;

			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T3> c3;

			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T4> c4;

			[Token(Token = "0x40004BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T5> c5;

			[Token(Token = "0x40004C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T6> c6;

			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CombineLatestObserver<T7> c7;

			[Token(Token = "0x6000A1F")]
			public CombineLatest(int length, CombineLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A20")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A21")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000A22")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000A23")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A24")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T7> source7;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CombineLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector;

		[Token(Token = "0x6000A1D")]
		public CombineLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, CombineLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000A1E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CF")]
	internal interface ICombineLatestObservable
	{
		[Token(Token = "0x6000A25")]
		void Publish(int index);

		[Token(Token = "0x6000A26")]
		void Fail(Exception error);

		[Token(Token = "0x6000A27")]
		void Done(int index);
	}
	[Token(Token = "0x20001D0")]
	internal abstract class NthCombineLatestObserverBase<T> : OperatorObserverBase<T, T>, ICombineLatestObservable
	{
		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int length;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isAllValueStarted;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool[] isStarted;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool[] isCompleted;

		[Token(Token = "0x6000A28")]
		public NthCombineLatestObserverBase(int length, IObserver<T> observer, IDisposable cancel)
		{
		}

		[Token(Token = "0x6000A29")]
		public abstract T GetResult();

		[Token(Token = "0x6000A2A")]
		public void Publish(int index)
		{
		}

		[Token(Token = "0x6000A2B")]
		public void Done(int index)
		{
		}

		[Token(Token = "0x6000A2C")]
		public void Fail(Exception error)
		{
		}
	}
	[Token(Token = "0x20001D1")]
	internal class CombineLatestObserver<T> : IObserver<T>
	{
		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ICombineLatestObservable parent;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int index;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x17000117")]
		public T Value
		{
			[Token(Token = "0x6000A2D")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000A2E")]
		public CombineLatestObserver(object gate, ICombineLatestObservable parent, int index)
		{
		}

		[Token(Token = "0x6000A2F")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000A30")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000A31")]
		public void OnCompleted()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	internal class ConcatObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001D3")]
		private class Concat : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ConcatObservable<T> parent;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40004CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x40004CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<IObservable<T>> e;

			[Token(Token = "0x40004CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable subscription;

			[Token(Token = "0x40004D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action nextSelf;

			[Token(Token = "0x6000A36")]
			public Concat(ConcatObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A37")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A38")]
			private void RecursiveRun(Action self)
			{
			}

			[Token(Token = "0x6000A39")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A3A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A3B")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000A3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B91C4", Offset = "0x8B91C4")]
			private void <Run>b__7_0()
			{
			}
		}

		[Token(Token = "0x20001D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0DFC", Offset = "0x8B0DFC")]
		private sealed class <CombineSources>d__3 : IEnumerable<IObservable<T>>, IEnumerable, IEnumerator<IObservable<T>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40004D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40004D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IObservable<T> <>2__current;

			[Token(Token = "0x40004D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40004D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<IObservable<T>> first;

			[Token(Token = "0x40004D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<IObservable<T>> <>3__first;

			[Token(Token = "0x40004D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<IObservable<T>> second;

			[Token(Token = "0x40004D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<IObservable<T>> <>3__second;

			[Token(Token = "0x40004D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<IObservable<T>> <>7__wrap1;

			[Token(Token = "0x17000118")]
			private IObservable<T> System.Collections.Generic.IEnumerator<System.IObservable<T>>.Current
			{
				[Token(Token = "0x6000A42")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000119")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A44")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A3D")]
			[DebuggerHidden]
			public <CombineSources>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000A3E")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A3F")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A40")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A41")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000A43")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A45")]
			[DebuggerHidden]
			private IEnumerator<IObservable<T>> System.Collections.Generic.IEnumerable<System.IObservable<T>>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A46")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<IObservable<T>> sources;

		[Token(Token = "0x6000A32")]
		public ConcatObservable(IEnumerable<IObservable<T>> sources)
		{
		}

		[Token(Token = "0x6000A33")]
		public IObservable<T> Combine(IEnumerable<IObservable<T>> combineSources)
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B9164", Offset = "0x8B9164")]
		private static IEnumerable<IObservable<T>> CombineSources(IEnumerable<IObservable<T>> first, IEnumerable<IObservable<T>> second)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D5")]
	internal class ContinueWithObservable<TSource, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20001D6")]
		private class ContinueWith : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x40004DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ContinueWithObservable<TSource, TResult> parent;

			[Token(Token = "0x40004DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SerialDisposable serialDisposable;

			[Token(Token = "0x40004DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool seenValue;

			[Token(Token = "0x40004DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TSource lastValue;

			[Token(Token = "0x6000A49")]
			public ContinueWith(ContinueWithObservable<TSource, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A4A")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A4B")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000A4C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A4D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, IObservable<TResult>> selector;

		[Token(Token = "0x6000A47")]
		public ContinueWithObservable(IObservable<TSource> source, Func<TSource, IObservable<TResult>> selector)
		{
		}

		[Token(Token = "0x6000A48")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D7")]
	internal class CreateObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001D8")]
		private class Create : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000A51")]
			public Create(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A52")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A53")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A54")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<IObserver<T>, IDisposable> subscribe;

		[Token(Token = "0x6000A4E")]
		public CreateObservable(Func<IObserver<T>, IDisposable> subscribe)
		{
		}

		[Token(Token = "0x6000A4F")]
		public CreateObservable(Func<IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000A50")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D9")]
	internal class CreateObservable<T, TState> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001DA")]
		private class Create : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000A58")]
			public Create(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A59")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A5A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A5B")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TState state;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TState, IObserver<T>, IDisposable> subscribe;

		[Token(Token = "0x6000A55")]
		public CreateObservable(TState state, Func<TState, IObserver<T>, IDisposable> subscribe)
		{
		}

		[Token(Token = "0x6000A56")]
		public CreateObservable(TState state, Func<TState, IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000A57")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DB")]
	internal class CreateSafeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001DC")]
		private class CreateSafe : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000A5F")]
			public CreateSafe(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A60")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A61")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A62")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<IObserver<T>, IDisposable> subscribe;

		[Token(Token = "0x6000A5C")]
		public CreateSafeObservable(Func<IObserver<T>, IDisposable> subscribe)
		{
		}

		[Token(Token = "0x6000A5D")]
		public CreateSafeObservable(Func<IObserver<T>, IDisposable> subscribe, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000A5E")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DD")]
	internal class DefaultIfEmptyObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001DE")]
		private class DefaultIfEmpty : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40004E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DefaultIfEmptyObservable<T> parent;

			[Token(Token = "0x40004E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasValue;

			[Token(Token = "0x6000A65")]
			public DefaultIfEmpty(DefaultIfEmptyObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A66")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A67")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A68")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T defaultValue;

		[Token(Token = "0x6000A63")]
		public DefaultIfEmptyObservable(IObservable<T> source, T defaultValue)
		{
		}

		[Token(Token = "0x6000A64")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DF")]
	internal class DeferObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001E0")]
		private class Defer : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000A6B")]
			public Defer(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A6C")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A6D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A6E")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<IObservable<T>> observableFactory;

		[Token(Token = "0x6000A69")]
		public DeferObservable(Func<IObservable<T>> observableFactory)
		{
		}

		[Token(Token = "0x6000A6A")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E1")]
	internal class DelayObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001E2")]
		private class Delay : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40004EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DelayObservable<T> parent;

			[Token(Token = "0x40004EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40004ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasFailed;

			[Token(Token = "0x40004EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool running;

			[Token(Token = "0x40004EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool active;

			[Token(Token = "0x40004F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Exception exception;

			[Token(Token = "0x40004F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<Timestamped<T>> queue;

			[Token(Token = "0x40004F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool onCompleted;

			[Token(Token = "0x40004F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private DateTimeOffset completeAt;

			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IDisposable sourceSubscription;

			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TimeSpan delay;

			[Token(Token = "0x40004F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool ready;

			[Token(Token = "0x40004F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable cancelable;

			[Token(Token = "0x6000A71")]
			public Delay(DelayObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A72")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A73")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A74")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A75")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000A76")]
			private void DrainQueue(Action<TimeSpan> recurse)
			{
			}
		}

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan dueTime;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000A6F")]
		public DelayObservable(IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000A70")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E3")]
	internal class DelaySubscriptionObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E0C", Offset = "0x8B0E0C")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40004FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public DelaySubscriptionObservable<T> <>4__this;

			[Token(Token = "0x40004FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x6000A7A")]
			public <>c__DisplayClass6_0()
			{
			}
		}

		[Token(Token = "0x20001E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E1C", Offset = "0x8B0E1C")]
		private sealed class <>c__DisplayClass6_1
		{
			[Token(Token = "0x40004FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MultipleAssignmentDisposable d;

			[Token(Token = "0x40004FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass6_0 CS$<>8__locals1;

			[Token(Token = "0x6000A7B")]
			public <>c__DisplayClass6_1()
			{
			}

			[Token(Token = "0x6000A7C")]
			internal void <SubscribeCore>b__0()
			{
			}
		}

		[Token(Token = "0x20001E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E2C", Offset = "0x8B0E2C")]
		private sealed class <>c__DisplayClass6_2
		{
			[Token(Token = "0x4000500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MultipleAssignmentDisposable d;

			[Token(Token = "0x4000501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass6_0 CS$<>8__locals2;

			[Token(Token = "0x6000A7D")]
			public <>c__DisplayClass6_2()
			{
			}

			[Token(Token = "0x6000A7E")]
			internal void <SubscribeCore>b__1()
			{
			}
		}

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan? dueTimeT;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly DateTimeOffset? dueTimeD;

		[Token(Token = "0x6000A77")]
		public DelaySubscriptionObservable(IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000A78")]
		public DelaySubscriptionObservable(IObservable<T> source, DateTimeOffset dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000A79")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	internal class DematerializeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001E8")]
		private class Dematerialize : OperatorObserverBase<Notification<T>, T>
		{
			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DematerializeObservable<T> parent;

			[Token(Token = "0x6000A81")]
			public Dematerialize(DematerializeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A82")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000A83")]
			public override void OnNext(Notification<T> value)
			{
			}

			[Token(Token = "0x6000A84")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A85")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<Notification<T>> source;

		[Token(Token = "0x6000A7F")]
		public DematerializeObservable(IObservable<Notification<T>> source)
		{
		}

		[Token(Token = "0x6000A80")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E9")]
	internal class DistinctObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001EA")]
		private class Distinct : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000506")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly HashSet<T> hashSet;

			[Token(Token = "0x6000A88")]
			public Distinct(DistinctObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A89")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A8A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A8B")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<T> comparer;

		[Token(Token = "0x6000A86")]
		public DistinctObservable(IObservable<T> source, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000A87")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EB")]
	internal class DistinctObservable<T, TKey> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001EC")]
		private class Distinct : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400050A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DistinctObservable<T, TKey> parent;

			[Token(Token = "0x400050B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly HashSet<TKey> hashSet;

			[Token(Token = "0x6000A8E")]
			public Distinct(DistinctObservable<T, TKey> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A8F")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A90")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A91")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<TKey> comparer;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, TKey> keySelector;

		[Token(Token = "0x6000A8C")]
		public DistinctObservable(IObservable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000A8D")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001ED")]
	internal class DistinctUntilChangedObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001EE")]
		private class DistinctUntilChanged : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400050E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DistinctUntilChangedObservable<T> parent;

			[Token(Token = "0x400050F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x4000510")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T prevKey;

			[Token(Token = "0x6000A94")]
			public DistinctUntilChanged(DistinctUntilChangedObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A95")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A96")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A97")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<T> comparer;

		[Token(Token = "0x6000A92")]
		public DistinctUntilChangedObservable(IObservable<T> source, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000A93")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EF")]
	internal class DistinctUntilChangedObservable<T, TKey> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001F0")]
		private class DistinctUntilChanged : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DistinctUntilChangedObservable<T, TKey> parent;

			[Token(Token = "0x4000515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x4000516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TKey prevKey;

			[Token(Token = "0x6000A9A")]
			public DistinctUntilChanged(DistinctUntilChangedObservable<T, TKey> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000A9B")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000A9C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000A9D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<TKey> comparer;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, TKey> keySelector;

		[Token(Token = "0x6000A98")]
		public DistinctUntilChangedObservable(IObservable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000A99")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F1")]
	internal class DoObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001F2")]
		private class Do : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400051B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoObservable<T> parent;

			[Token(Token = "0x6000AA0")]
			public Do(DoObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AA1")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000AA2")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AA3")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AA4")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<T> onNext;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<Exception> onError;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action onCompleted;

		[Token(Token = "0x6000A9E")]
		public DoObservable(IObservable<T> source, Action<T> onNext, Action<Exception> onError, Action onCompleted)
		{
		}

		[Token(Token = "0x6000A9F")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F3")]
	internal class DoObserverObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001F4")]
		private class Do : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400051E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoObserverObservable<T> parent;

			[Token(Token = "0x6000AA7")]
			public Do(DoObserverObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AA8")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000AA9")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AAA")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AAB")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObserver<T> observer;

		[Token(Token = "0x6000AA5")]
		public DoObserverObservable(IObservable<T> source, IObserver<T> observer)
		{
		}

		[Token(Token = "0x6000AA6")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	internal class DoOnErrorObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001F6")]
		private class DoOnError : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoOnErrorObservable<T> parent;

			[Token(Token = "0x6000AAE")]
			public DoOnError(DoOnErrorObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AAF")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000AB0")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AB1")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AB2")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<Exception> onError;

		[Token(Token = "0x6000AAC")]
		public DoOnErrorObservable(IObservable<T> source, Action<Exception> onError)
		{
		}

		[Token(Token = "0x6000AAD")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F7")]
	internal class DoOnCompletedObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001F8")]
		private class DoOnCompleted : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoOnCompletedObservable<T> parent;

			[Token(Token = "0x6000AB5")]
			public DoOnCompleted(DoOnCompletedObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AB6")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000AB7")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AB8")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AB9")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action onCompleted;

		[Token(Token = "0x6000AB3")]
		public DoOnCompletedObservable(IObservable<T> source, Action onCompleted)
		{
		}

		[Token(Token = "0x6000AB4")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F9")]
	internal class DoOnTerminateObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001FA")]
		private class DoOnTerminate : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoOnTerminateObservable<T> parent;

			[Token(Token = "0x6000ABC")]
			public DoOnTerminate(DoOnTerminateObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000ABD")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000ABE")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000ABF")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AC0")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action onTerminate;

		[Token(Token = "0x6000ABA")]
		public DoOnTerminateObservable(IObservable<T> source, Action onTerminate)
		{
		}

		[Token(Token = "0x6000ABB")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	internal class DoOnSubscribeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001FC")]
		private class DoOnSubscribe : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400052A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoOnSubscribeObservable<T> parent;

			[Token(Token = "0x6000AC3")]
			public DoOnSubscribe(DoOnSubscribeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AC4")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000AC5")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AC6")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AC7")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action onSubscribe;

		[Token(Token = "0x6000AC1")]
		public DoOnSubscribeObservable(IObservable<T> source, Action onSubscribe)
		{
		}

		[Token(Token = "0x6000AC2")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FD")]
	internal class DoOnCancelObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20001FE")]
		private class DoOnCancel : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400052D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DoOnCancelObservable<T> parent;

			[Token(Token = "0x400052E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isCompletedCall;

			[Token(Token = "0x6000ACA")]
			public DoOnCancel(DoOnCancelObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000ACB")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000ACC")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000ACD")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000ACE")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000ACF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9244", Offset = "0x8B9244")]
			private void <Run>b__3_0()
			{
			}
		}

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action onCancel;

		[Token(Token = "0x6000AC8")]
		public DoOnCancelObservable(IObservable<T> source, Action onCancel)
		{
		}

		[Token(Token = "0x6000AC9")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FF")]
	internal class EmptyObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000200")]
		private class Empty : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000AD2")]
			public Empty(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AD3")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AD4")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AD5")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000AD0")]
		public EmptyObservable(IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000AD1")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000201")]
	internal class ImmutableEmptyObservable<T> : IObservable<T>, IOptimizedObservable<T>
	{
		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ImmutableEmptyObservable<T> Instance;

		[Token(Token = "0x6000AD6")]
		private ImmutableEmptyObservable()
		{
		}

		[Token(Token = "0x6000AD7")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000202")]
	internal class FinallyObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000203")]
		private class Finally : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FinallyObservable<T> parent;

			[Token(Token = "0x6000ADC")]
			public Finally(FinallyObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000ADD")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000ADE")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000ADF")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AE0")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000AE1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9254", Offset = "0x8B9254")]
			private void <Run>b__2_0()
			{
			}
		}

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action finallyAction;

		[Token(Token = "0x6000ADA")]
		public FinallyObservable(IObservable<T> source, Action finallyAction)
		{
		}

		[Token(Token = "0x6000ADB")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000204")]
	internal class FirstObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000205")]
		private class First : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FirstObservable<T> parent;

			[Token(Token = "0x4000538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool notPublished;

			[Token(Token = "0x6000AE5")]
			public First(FirstObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AE6")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AE7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AE8")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000206")]
		private class First_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FirstObservable<T> parent;

			[Token(Token = "0x400053A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool notPublished;

			[Token(Token = "0x6000AE9")]
			public First_(FirstObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AEA")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AEB")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AEC")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool useDefault;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x6000AE2")]
		public FirstObservable(IObservable<T> source, bool useDefault)
		{
		}

		[Token(Token = "0x6000AE3")]
		public FirstObservable(IObservable<T> source, Func<T, bool> predicate, bool useDefault)
		{
		}

		[Token(Token = "0x6000AE4")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000207")]
	internal class ForEachAsyncObservable<T> : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x2000208")]
		private class ForEachAsync : OperatorObserverBase<T, Unit>
		{
			[Token(Token = "0x400053E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ForEachAsyncObservable<T> parent;

			[Token(Token = "0x6000AF0")]
			public ForEachAsync(ForEachAsyncObservable<T> parent, IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AF1")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AF2")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AF3")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000209")]
		private class ForEachAsync_ : OperatorObserverBase<T, Unit>
		{
			[Token(Token = "0x400053F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ForEachAsyncObservable<T> parent;

			[Token(Token = "0x4000540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000AF4")]
			public ForEachAsync_(ForEachAsyncObservable<T> parent, IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000AF5")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000AF6")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000AF7")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<T> onNext;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<T, int> onNextWithIndex;

		[Token(Token = "0x6000AED")]
		public ForEachAsyncObservable(IObservable<T> source, Action<T> onNext)
		{
		}

		[Token(Token = "0x6000AEE")]
		public ForEachAsyncObservable(IObservable<T> source, Action<T, int> onNext)
		{
		}

		[Token(Token = "0x6000AEF")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200020A")]
	internal class FromEventPatternObservable<TDelegate, TEventArgs> : OperatorObservableBase<EventPattern<TEventArgs>> where TEventArgs : EventArgs
	{
		[Token(Token = "0x200020B")]
		private class FromEventPattern : IDisposable
		{
			[Token(Token = "0x4000544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FromEventPatternObservable<TDelegate, TEventArgs> parent;

			[Token(Token = "0x4000545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObserver<EventPattern<TEventArgs>> observer;

			[Token(Token = "0x4000546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TDelegate handler;

			[Token(Token = "0x6000AFA")]
			public FromEventPattern(FromEventPatternObservable<TDelegate, TEventArgs> parent, IObserver<EventPattern<TEventArgs>> observer)
			{
			}

			[Token(Token = "0x6000AFB")]
			public bool Register()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFC")]
			private void OnNext(object sender, TEventArgs eventArgs)
			{
			}

			[Token(Token = "0x6000AFD")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<EventHandler<TEventArgs>, TDelegate> conversion;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> addHandler;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> removeHandler;

		[Token(Token = "0x6000AF8")]
		public FromEventPatternObservable(Func<EventHandler<TEventArgs>, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler)
		{
		}

		[Token(Token = "0x6000AF9")]
		protected override IDisposable SubscribeCore(IObserver<EventPattern<TEventArgs>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200020C")]
	internal class FromEventObservable<TDelegate> : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x200020D")]
		private class FromEvent : IDisposable
		{
			[Token(Token = "0x400054A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FromEventObservable<TDelegate> parent;

			[Token(Token = "0x400054B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObserver<Unit> observer;

			[Token(Token = "0x400054C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TDelegate handler;

			[Token(Token = "0x6000B00")]
			public FromEvent(FromEventObservable<TDelegate> parent, IObserver<Unit> observer)
			{
			}

			[Token(Token = "0x6000B01")]
			public bool Register()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B02")]
			private void OnNext()
			{
			}

			[Token(Token = "0x6000B03")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<Action, TDelegate> conversion;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> addHandler;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> removeHandler;

		[Token(Token = "0x6000AFE")]
		public FromEventObservable(Func<Action, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler)
		{
		}

		[Token(Token = "0x6000AFF")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200020E")]
	internal class FromEventObservable<TDelegate, TEventArgs> : OperatorObservableBase<TEventArgs>
	{
		[Token(Token = "0x200020F")]
		private class FromEvent : IDisposable
		{
			[Token(Token = "0x4000550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FromEventObservable<TDelegate, TEventArgs> parent;

			[Token(Token = "0x4000551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObserver<TEventArgs> observer;

			[Token(Token = "0x4000552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TDelegate handler;

			[Token(Token = "0x6000B06")]
			public FromEvent(FromEventObservable<TDelegate, TEventArgs> parent, IObserver<TEventArgs> observer)
			{
			}

			[Token(Token = "0x6000B07")]
			public bool Register()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B08")]
			private void OnNext(TEventArgs args)
			{
			}

			[Token(Token = "0x6000B09")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<Action<TEventArgs>, TDelegate> conversion;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> addHandler;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<TDelegate> removeHandler;

		[Token(Token = "0x6000B04")]
		public FromEventObservable(Func<Action<TEventArgs>, TDelegate> conversion, Action<TDelegate> addHandler, Action<TDelegate> removeHandler)
		{
		}

		[Token(Token = "0x6000B05")]
		protected override IDisposable SubscribeCore(IObserver<TEventArgs> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000210")]
	internal class FromEventObservable : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x2000211")]
		private class FromEvent : IDisposable
		{
			[Token(Token = "0x4000555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly FromEventObservable parent;

			[Token(Token = "0x4000556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly IObserver<Unit> observer;

			[Token(Token = "0x4000557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Action handler;

			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x10BF198", Offset = "0x10BF198", VA = "0x10BF198")]
			public FromEvent(FromEventObservable parent, IObserver<Unit> observer)
			{
			}

			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x10BF230", Offset = "0x10BF230", VA = "0x10BF230")]
			public bool Register()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0x10BF398", Offset = "0x10BF398", VA = "0x10BF398")]
			private void OnNext()
			{
			}

			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0x10BF4C0", Offset = "0x10BF4C0", VA = "0x10BF4C0", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Action<Action> addHandler;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Action<Action> removeHandler;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x1693620", Offset = "0x1693620", VA = "0x1693620")]
		public FromEventObservable(Action<Action> addHandler, Action<Action> removeHandler)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1693688", Offset = "0x1693688", VA = "0x1693688", Slot = "6")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000212")]
	internal class FromEventObservable_<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000213")]
		private class FromEvent : IDisposable
		{
			[Token(Token = "0x400055A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FromEventObservable_<T> parent;

			[Token(Token = "0x400055B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObserver<T> observer;

			[Token(Token = "0x400055C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action<T> handler;

			[Token(Token = "0x6000B12")]
			public FromEvent(FromEventObservable_<T> parent, IObserver<T> observer)
			{
			}

			[Token(Token = "0x6000B13")]
			public bool Register()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B14")]
			private void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B15")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<Action<T>> addHandler;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action<Action<T>> removeHandler;

		[Token(Token = "0x6000B10")]
		public FromEventObservable_(Action<Action<T>> addHandler, Action<Action<T>> removeHandler)
		{
		}

		[Token(Token = "0x6000B11")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000214")]
	internal class GroupedObservable<TKey, TElement> : IGroupedObservable<TKey, TElement>, IObservable<TElement>
	{
		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TKey key;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TElement> subject;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly RefCountDisposable refCount;

		[Token(Token = "0x1700011A")]
		public TKey Key
		{
			[Token(Token = "0x6000B16")]
			get
			{
				return (TKey)null;
			}
		}

		[Token(Token = "0x6000B17")]
		public GroupedObservable(TKey key, ISubject<TElement> subject, RefCountDisposable refCount)
		{
		}

		[Token(Token = "0x6000B18")]
		public IDisposable Subscribe(IObserver<TElement> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000215")]
	internal class GroupByObservable<TSource, TKey, TElement> : OperatorObservableBase<IGroupedObservable<TKey, TElement>>
	{
		[Token(Token = "0x2000216")]
		private class GroupBy : OperatorObserverBase<TSource, IGroupedObservable<TKey, TElement>>
		{
			[Token(Token = "0x4000565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GroupByObservable<TSource, TKey, TElement> parent;

			[Token(Token = "0x4000566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Dictionary<TKey, ISubject<TElement>> map;

			[Token(Token = "0x4000567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ISubject<TElement> nullKeySubject;

			[Token(Token = "0x4000568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable groupDisposable;

			[Token(Token = "0x4000569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private RefCountDisposable refCountDisposable;

			[Token(Token = "0x6000B1B")]
			public GroupBy(GroupByObservable<TSource, TKey, TElement> parent, IObserver<IGroupedObservable<TKey, TElement>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B1C")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B1D")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000B1E")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B1F")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000B20")]
			private void Error(Exception exception)
			{
			}
		}

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, TKey> keySelector;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, TElement> elementSelector;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int? capacity;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<TKey> comparer;

		[Token(Token = "0x6000B19")]
		public GroupByObservable(IObservable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, int? capacity, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000B1A")]
		protected override IDisposable SubscribeCore(IObserver<IGroupedObservable<TKey, TElement>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000217")]
	internal class IgnoreElementsObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000218")]
		private class IgnoreElements : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000B23")]
			public IgnoreElements(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B24")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B25")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B26")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000B21")]
		public IgnoreElementsObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x6000B22")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000219")]
	internal class LastObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200021A")]
		private class Last : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400056E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LastObservable<T> parent;

			[Token(Token = "0x400056F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool notPublished;

			[Token(Token = "0x4000570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T lastValue;

			[Token(Token = "0x6000B2A")]
			public Last(LastObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B2B")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B2C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B2D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x200021B")]
		private class Last_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LastObservable<T> parent;

			[Token(Token = "0x4000572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool notPublished;

			[Token(Token = "0x4000573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T lastValue;

			[Token(Token = "0x6000B2E")]
			public Last_(LastObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B2F")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B30")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B31")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool useDefault;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x6000B27")]
		public LastObservable(IObservable<T> source, bool useDefault)
		{
		}

		[Token(Token = "0x6000B28")]
		public LastObservable(IObservable<T> source, Func<T, bool> predicate, bool useDefault)
		{
		}

		[Token(Token = "0x6000B29")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200021C")]
	internal class MaterializeObservable<T> : OperatorObservableBase<Notification<T>>
	{
		[Token(Token = "0x200021D")]
		private class Materialize : OperatorObserverBase<T, Notification<T>>
		{
			[Token(Token = "0x4000575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly MaterializeObservable<T> parent;

			[Token(Token = "0x6000B34")]
			public Materialize(MaterializeObservable<T> parent, IObserver<Notification<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B35")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B36")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B37")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B38")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000B32")]
		public MaterializeObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x6000B33")]
		protected override IDisposable SubscribeCore(IObserver<Notification<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200021E")]
	internal class MergeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200021F")]
		private class MergeOuterObserver : OperatorObserverBase<IObservable<T>, T>
		{
			[Token(Token = "0x2000220")]
			private class Merge : OperatorObserverBase<T, T>
			{
				[Token(Token = "0x400057D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly MergeOuterObserver parent;

				[Token(Token = "0x400057E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x6000B41")]
				public Merge(MergeOuterObserver parent, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000B42")]
				public override void OnNext(T value)
				{
				}

				[Token(Token = "0x6000B43")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000B44")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly MergeObservable<T> parent;

			[Token(Token = "0x4000579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x400057A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x400057B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x400057C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x6000B3C")]
			public MergeOuterObserver(MergeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B3D")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B3E")]
			public override void OnNext(IObservable<T> value)
			{
			}

			[Token(Token = "0x6000B3F")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B40")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000221")]
		private class MergeConcurrentObserver : OperatorObserverBase<IObservable<T>, T>
		{
			[Token(Token = "0x2000222")]
			private class Merge : OperatorObserverBase<T, T>
			{
				[Token(Token = "0x4000586")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly MergeConcurrentObserver parent;

				[Token(Token = "0x4000587")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x6000B4B")]
				public Merge(MergeConcurrentObserver parent, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000B4C")]
				public override void OnNext(T value)
				{
				}

				[Token(Token = "0x6000B4D")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000B4E")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400057F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly MergeObservable<T> parent;

			[Token(Token = "0x4000580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x4000581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x4000582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x4000583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x4000584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<IObservable<T>> q;

			[Token(Token = "0x4000585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int activeCount;

			[Token(Token = "0x6000B45")]
			public MergeConcurrentObserver(MergeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B46")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B47")]
			public override void OnNext(IObservable<T> value)
			{
			}

			[Token(Token = "0x6000B48")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B49")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000B4A")]
			private void Subscribe(IObservable<T> innerSource)
			{
			}
		}

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<IObservable<T>> sources;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int maxConcurrent;

		[Token(Token = "0x6000B39")]
		public MergeObservable(IObservable<IObservable<T>> sources, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000B3A")]
		public MergeObservable(IObservable<IObservable<T>> sources, int maxConcurrent, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000B3B")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000223")]
	internal class NeverObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x6000B4F")]
		public NeverObservable()
		{
		}

		[Token(Token = "0x6000B50")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000224")]
	internal class ImmutableNeverObservable<T> : IObservable<T>, IOptimizedObservable<T>
	{
		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ImmutableNeverObservable<T> Instance;

		[Token(Token = "0x6000B51")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000B53")]
		public ImmutableNeverObservable()
		{
		}
	}
	[Token(Token = "0x2000225")]
	internal class ObserveOnObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000226")]
		private class ObserveOn : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000227")]
			private class SchedulableAction : IDisposable
			{
				[Token(Token = "0x400058E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Notification<T> data;

				[Token(Token = "0x400058F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public LinkedListNode<SchedulableAction> node;

				[Token(Token = "0x4000590")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IDisposable schedule;

				[Token(Token = "0x1700011B")]
				public bool IsScheduled
				{
					[Token(Token = "0x6000B60")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6000B5F")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6000B61")]
				public SchedulableAction()
				{
				}
			}

			[Token(Token = "0x2000228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E3C", Offset = "0x8B0E3C")]
			private sealed class <>c__DisplayClass10_0
			{
				[Token(Token = "0x4000591")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ObserveOn <>4__this;

				[Token(Token = "0x4000592")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public SchedulableAction action;

				[Token(Token = "0x6000B62")]
				public <>c__DisplayClass10_0()
				{
				}

				[Token(Token = "0x6000B63")]
				internal void <ProcessNext>b__0()
				{
				}
			}

			[Token(Token = "0x400058B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ObserveOnObservable<T> parent;

			[Token(Token = "0x400058C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LinkedList<SchedulableAction> actions;

			[Token(Token = "0x400058D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x6000B57")]
			public ObserveOn(ObserveOnObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B58")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B59")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B5A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B5B")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000B5C")]
			private void QueueAction(Notification<T> data)
			{
			}

			[Token(Token = "0x6000B5D")]
			private void ProcessNext()
			{
			}

			[Token(Token = "0x6000B5E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9264", Offset = "0x8B9264")]
			private void <Run>b__5_0()
			{
			}
		}

		[Token(Token = "0x2000229")]
		private class ObserveOn_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ObserveOnObservable<T> parent;

			[Token(Token = "0x4000594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ISchedulerQueueing scheduler;

			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BooleanDisposable isDisposed;

			[Token(Token = "0x4000596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> onNext;

			[Token(Token = "0x6000B64")]
			public ObserveOn_(ObserveOnObservable<T> parent, ISchedulerQueueing scheduler, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B65")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B66")]
			private void OnNext_(T value)
			{
			}

			[Token(Token = "0x6000B67")]
			private void OnError_(Exception error)
			{
			}

			[Token(Token = "0x6000B68")]
			private void OnCompleted_(Unit _)
			{
			}

			[Token(Token = "0x6000B69")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B6A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B6B")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000B55")]
		public ObserveOnObservable(IObservable<T> source, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000B56")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200022A")]
	internal class OfTypeObservable<TSource, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x200022B")]
		private class OfType : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x6000B6E")]
			public OfType(IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B6F")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000B70")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B71")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x6000B6C")]
		public OfTypeObservable(IObservable<TSource> source)
		{
		}

		[Token(Token = "0x6000B6D")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	public abstract class OperatorObservableBase<T> : IObservable<T>, IOptimizedObservable<T>
	{
		[Token(Token = "0x200022D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E4C", Offset = "0x8B0E4C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SingleAssignmentDisposable subscription;

			[Token(Token = "0x400059A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public OperatorObservableBase<T> <>4__this;

			[Token(Token = "0x400059B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x6000B76")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6000B77")]
			internal void <Subscribe>b__0()
			{
			}
		}

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool isRequiredSubscribeOnCurrentThread;

		[Token(Token = "0x6000B72")]
		public OperatorObservableBase(bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000B73")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		protected abstract IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel);
	}
	[Token(Token = "0x200022E")]
	public abstract class OperatorObserverBase<TSource, TResult> : IDisposable, IObserver<TSource>
	{
		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected internal IObserver<TResult> observer;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IDisposable cancel;

		[Token(Token = "0x6000B78")]
		public OperatorObserverBase(IObserver<TResult> observer, IDisposable cancel)
		{
		}

		[Token(Token = "0x6000B79")]
		public abstract void OnNext(TSource value);

		[Token(Token = "0x6000B7A")]
		public abstract void OnError(Exception error);

		[Token(Token = "0x6000B7B")]
		public abstract void OnCompleted();

		[Token(Token = "0x6000B7C")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200022F")]
	internal class PairwiseObservable<T, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x2000230")]
		private class Pairwise : OperatorObserverBase<T, TR>
		{
			[Token(Token = "0x40005A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly PairwiseObservable<T, TR> parent;

			[Token(Token = "0x40005A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T prev;

			[Token(Token = "0x40005A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x6000B7F")]
			public Pairwise(PairwiseObservable<T, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B80")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B81")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B82")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, T, TR> selector;

		[Token(Token = "0x6000B7D")]
		public PairwiseObservable(IObservable<T> source, Func<T, T, TR> selector)
		{
		}

		[Token(Token = "0x6000B7E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000231")]
	internal class PairwiseObservable<T> : OperatorObservableBase<Pair<T>>
	{
		[Token(Token = "0x2000232")]
		private class Pairwise : OperatorObserverBase<T, Pair<T>>
		{
			[Token(Token = "0x40005A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T prev;

			[Token(Token = "0x40005A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x6000B85")]
			public Pairwise(IObserver<Pair<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B86")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B87")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B88")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000B83")]
		public PairwiseObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x6000B84")]
		protected override IDisposable SubscribeCore(IObserver<Pair<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000233")]
	internal class RangeObservable : OperatorObservableBase<int>
	{
		[Token(Token = "0x2000234")]
		private class Range : OperatorObserverBase<int, int>
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x106C458", Offset = "0x106C458", VA = "0x106C458")]
			public Range(IObserver<int> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x106C4BC", Offset = "0x106C4BC", VA = "0x106C4BC", Slot = "8")]
			public override void OnNext(int value)
			{
			}

			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x106C624", Offset = "0x106C624", VA = "0x106C624", Slot = "9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x106C758", Offset = "0x106C758", VA = "0x106C758", Slot = "10")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000235")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E5C", Offset = "0x8B0E5C")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x40005A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RangeObservable <>4__this;

			[Token(Token = "0x40005AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IObserver<int> observer;

			[Token(Token = "0x40005AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int i;

			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x106C2D8", Offset = "0x106C2D8", VA = "0x106C2D8")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x106C2E0", Offset = "0x106C2E0", VA = "0x106C2E0")]
			internal void <SubscribeCore>b__0(Action self)
			{
			}
		}

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly int start;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int count;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x12C70A4", Offset = "0x12C70A4", VA = "0x12C70A4")]
		public RangeObservable(int start, int count, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x12C71A4", Offset = "0x12C71A4", VA = "0x12C71A4", Slot = "6")]
		protected override IDisposable SubscribeCore(IObserver<int> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000236")]
	internal class RefCountObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000237")]
		private class RefCount : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E6C", Offset = "0x8B0E6C")]
			private sealed class <>c__DisplayClass2_0
			{
				[Token(Token = "0x40005B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IDisposable subcription;

				[Token(Token = "0x40005B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RefCount <>4__this;

				[Token(Token = "0x6000B98")]
				public <>c__DisplayClass2_0()
				{
				}

				[Token(Token = "0x6000B99")]
				internal void <Run>b__0()
				{
				}
			}

			[Token(Token = "0x40005B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly RefCountObservable<T> parent;

			[Token(Token = "0x6000B93")]
			public RefCount(RefCountObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B94")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000B95")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B96")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B97")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IConnectableObservable<T> source;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int refCount;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IDisposable connection;

		[Token(Token = "0x6000B91")]
		public RefCountObservable(IConnectableObservable<T> source)
		{
		}

		[Token(Token = "0x6000B92")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000239")]
	internal class RepeatObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200023A")]
		private class Repeat : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000B9C")]
			public Repeat(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000B9D")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000B9E")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000B9F")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x200023B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E7C", Offset = "0x8B0E7C")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x40005B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x40005B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public RepeatObservable<T> <>4__this;

			[Token(Token = "0x6000BA0")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6000BA1")]
			internal void <SubscribeCore>b__0(Action self)
			{
			}
		}

		[Token(Token = "0x200023C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E8C", Offset = "0x8B0E8C")]
		private sealed class <>c__DisplayClass4_1
		{
			[Token(Token = "0x40005B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int currentCount;

			[Token(Token = "0x40005B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass4_0 CS$<>8__locals1;

			[Token(Token = "0x6000BA2")]
			public <>c__DisplayClass4_1()
			{
			}

			[Token(Token = "0x6000BA3")]
			internal void <SubscribeCore>b__1(Action self)
			{
			}
		}

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T value;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int? repeatCount;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000B9A")]
		public RepeatObservable(T value, int? repeatCount, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000B9B")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200023D")]
	internal class RepeatSafeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200023E")]
		private class RepeatSafe : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40005BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly RepeatSafeObservable<T> parent;

			[Token(Token = "0x40005BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40005BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<IObservable<T>> e;

			[Token(Token = "0x40005BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable subscription;

			[Token(Token = "0x40005BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action nextSelf;

			[Token(Token = "0x40005C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x40005C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isRunNext;

			[Token(Token = "0x6000BA6")]
			public RepeatSafe(RepeatSafeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BA7")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000BA8")]
			private void RecursiveRun(Action self)
			{
			}

			[Token(Token = "0x6000BA9")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BAA")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BAB")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000BAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9274", Offset = "0x8B9274")]
			private void <Run>b__8_0()
			{
			}
		}

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<IObservable<T>> sources;

		[Token(Token = "0x6000BA4")]
		public RepeatSafeObservable(IEnumerable<IObservable<T>> sources, bool isRequiredSubscribeOnCurrentThread)
		{
		}

		[Token(Token = "0x6000BA5")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200023F")]
	internal class ReturnObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000240")]
		private class Return : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000BAF")]
			public Return(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BB0")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BB1")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BB2")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000241")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0E9C", Offset = "0x8B0E9C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40005C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x40005C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReturnObservable<T> <>4__this;

			[Token(Token = "0x6000BB3")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6000BB4")]
			internal void <SubscribeCore>b__0()
			{
			}
		}

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T value;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000BAD")]
		public ReturnObservable(T value, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000BAE")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000242")]
	internal class ImmediateReturnObservable<T> : IObservable<T>, IOptimizedObservable<T>
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T value;

		[Token(Token = "0x6000BB5")]
		public ImmediateReturnObservable(T value)
		{
		}

		[Token(Token = "0x6000BB6")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB7")]
		public IDisposable Subscribe(IObserver<T> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000243")]
	internal class ImmutableReturnUnitObservable : IObservable<Unit>, IOptimizedObservable<Unit>
	{
		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ImmutableReturnUnitObservable Instance;

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x1696604", Offset = "0x1696604", VA = "0x1696604")]
		private ImmutableReturnUnitObservable()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x169660C", Offset = "0x169660C", VA = "0x169660C", Slot = "5")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x1696614", Offset = "0x1696614", VA = "0x1696614", Slot = "4")]
		public IDisposable Subscribe(IObserver<Unit> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	internal class ImmutableReturnTrueObservable : IObservable<bool>, IOptimizedObservable<bool>
	{
		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ImmutableReturnTrueObservable Instance;

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1696448", Offset = "0x1696448", VA = "0x1696448")]
		private ImmutableReturnTrueObservable()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x1696450", Offset = "0x1696450", VA = "0x1696450", Slot = "5")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1696458", Offset = "0x1696458", VA = "0x1696458", Slot = "4")]
		public IDisposable Subscribe(IObserver<bool> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000245")]
	internal class ImmutableReturnFalseObservable : IObservable<bool>, IOptimizedObservable<bool>
	{
		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ImmutableReturnFalseObservable Instance;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x1695C98", Offset = "0x1695C98", VA = "0x1695C98")]
		private ImmutableReturnFalseObservable()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x1695CA0", Offset = "0x1695CA0", VA = "0x1695CA0", Slot = "5")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x1695CA8", Offset = "0x1695CA8", VA = "0x1695CA8", Slot = "4")]
		public IDisposable Subscribe(IObserver<bool> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000246")]
	internal class ImmutableReturnInt32Observable : IObservable<int>, IOptimizedObservable<int>
	{
		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ImmutableReturnInt32Observable[] Caches;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int x;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x1695E54", Offset = "0x1695E54", VA = "0x1695E54")]
		public static IObservable<int> GetInt32Observable(int x)
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x1695F38", Offset = "0x1695F38", VA = "0x1695F38")]
		private ImmutableReturnInt32Observable(int x)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x1695F64", Offset = "0x1695F64", VA = "0x1695F64", Slot = "5")]
		public bool IsRequiredSubscribeOnCurrentThread()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x1695F6C", Offset = "0x1695F6C", VA = "0x1695F6C", Slot = "4")]
		public IDisposable Subscribe(IObserver<int> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000247")]
	internal class SampleObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000248")]
		private class Sample : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40005CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SampleObservable<T> parent;

			[Token(Token = "0x40005D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40005D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x40005D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isUpdated;

			[Token(Token = "0x40005D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isCompleted;

			[Token(Token = "0x40005D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x6000BCB")]
			public Sample(SampleObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BCC")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000BCD")]
			private void OnNextTick()
			{
			}

			[Token(Token = "0x6000BCE")]
			private void OnNextRecursive(Action<TimeSpan> self)
			{
			}

			[Token(Token = "0x6000BCF")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BD0")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BD1")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan interval;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000BC9")]
		public SampleObservable(IObservable<T> source, TimeSpan interval, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000BCA")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000249")]
	internal class SampleObservable<T, T2> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200024A")]
		private class Sample : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200024B")]
			private class SampleTick : IObserver<T2>
			{
				[Token(Token = "0x40005DD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Sample parent;

				[Token(Token = "0x6000BD9")]
				public SampleTick(Sample parent)
				{
				}

				[Token(Token = "0x6000BDA")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000BDB")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000BDC")]
				public void OnNext(T2 _)
				{
				}
			}

			[Token(Token = "0x40005D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SampleObservable<T, T2> parent;

			[Token(Token = "0x40005D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40005D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x40005DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isUpdated;

			[Token(Token = "0x40005DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isCompleted;

			[Token(Token = "0x40005DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x6000BD4")]
			public Sample(SampleObservable<T, T2> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BD5")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000BD6")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BD7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BD8")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T2> intervalSource;

		[Token(Token = "0x6000BD2")]
		public SampleObservable(IObservable<T> source, IObservable<T2> intervalSource)
		{
		}

		[Token(Token = "0x6000BD3")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200024C")]
	internal class ScanObservable<TSource> : OperatorObservableBase<TSource>
	{
		[Token(Token = "0x200024D")]
		private class Scan : OperatorObserverBase<TSource, TSource>
		{
			[Token(Token = "0x40005E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ScanObservable<TSource> parent;

			[Token(Token = "0x40005E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TSource accumulation;

			[Token(Token = "0x40005E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x6000BDF")]
			public Scan(ScanObservable<TSource> parent, IObserver<TSource> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BE0")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000BE1")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BE2")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, TSource, TSource> accumulator;

		[Token(Token = "0x6000BDD")]
		public ScanObservable(IObservable<TSource> source, Func<TSource, TSource, TSource> accumulator)
		{
		}

		[Token(Token = "0x6000BDE")]
		protected override IDisposable SubscribeCore(IObserver<TSource> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200024E")]
	internal class ScanObservable<TSource, TAccumulate> : OperatorObservableBase<TAccumulate>
	{
		[Token(Token = "0x200024F")]
		private class Scan : OperatorObserverBase<TSource, TAccumulate>
		{
			[Token(Token = "0x40005E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ScanObservable<TSource, TAccumulate> parent;

			[Token(Token = "0x40005E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TAccumulate accumulation;

			[Token(Token = "0x40005E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirst;

			[Token(Token = "0x6000BE5")]
			public Scan(ScanObservable<TSource, TAccumulate> parent, IObserver<TAccumulate> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BE6")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000BE7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BE8")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TAccumulate seed;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TAccumulate, TSource, TAccumulate> accumulator;

		[Token(Token = "0x6000BE3")]
		public ScanObservable(IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator)
		{
		}

		[Token(Token = "0x6000BE4")]
		protected override IDisposable SubscribeCore(IObserver<TAccumulate> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000250")]
	internal interface ISelect<TR>
	{
		[Token(Token = "0x6000BE9")]
		IObservable<TR> CombinePredicate(Func<TR, bool> predicate);
	}
	[Token(Token = "0x2000251")]
	internal class SelectObservable<T, TR> : OperatorObservableBase<TR>, ISelect<TR>
	{
		[Token(Token = "0x2000252")]
		private class Select : OperatorObserverBase<T, TR>
		{
			[Token(Token = "0x40005EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectObservable<T, TR> parent;

			[Token(Token = "0x6000BEE")]
			public Select(SelectObservable<T, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BEF")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BF0")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BF1")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000253")]
		private class Select_ : OperatorObserverBase<T, TR>
		{
			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectObservable<T, TR> parent;

			[Token(Token = "0x40005EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000BF2")]
			public Select_(SelectObservable<T, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BF3")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000BF4")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BF5")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, TR> selector;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, int, TR> selectorWithIndex;

		[Token(Token = "0x6000BEA")]
		public SelectObservable(IObservable<T> source, Func<T, TR> selector)
		{
		}

		[Token(Token = "0x6000BEB")]
		public SelectObservable(IObservable<T> source, Func<T, int, TR> selector)
		{
		}

		[Token(Token = "0x6000BEC")]
		public IObservable<TR> CombinePredicate(Func<TR, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000254")]
	internal class SelectManyObservable<TSource, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x2000255")]
		private class SelectManyOuterObserver : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x2000256")]
			private class SelectMany : OperatorObserverBase<TResult, TResult>
			{
				[Token(Token = "0x40005F9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SelectManyOuterObserver parent;

				[Token(Token = "0x40005FA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x6000C00")]
				public SelectMany(SelectManyOuterObserver parent, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000C01")]
				public override void OnNext(TResult value)
				{
				}

				[Token(Token = "0x6000C02")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C03")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40005F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TResult> parent;

			[Token(Token = "0x40005F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x40005F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x40005F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x40005F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x6000BFB")]
			public SelectManyOuterObserver(SelectManyObservable<TSource, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000BFC")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000BFD")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000BFE")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000BFF")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000257")]
		private class SelectManyObserverWithIndex : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x2000258")]
			private class SelectMany : OperatorObserverBase<TResult, TResult>
			{
				[Token(Token = "0x4000601")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SelectManyObserverWithIndex parent;

				[Token(Token = "0x4000602")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x6000C09")]
				public SelectMany(SelectManyObserverWithIndex parent, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000C0A")]
				public override void OnNext(TResult value)
				{
				}

				[Token(Token = "0x6000C0B")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C0C")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40005FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TResult> parent;

			[Token(Token = "0x40005FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x40005FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x40005FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x40005FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x4000600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x6000C04")]
			public SelectManyObserverWithIndex(SelectManyObservable<TSource, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C05")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C06")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C07")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C08")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000259")]
		private class SelectManyEnumerableObserver : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x4000603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TResult> parent;

			[Token(Token = "0x6000C0D")]
			public SelectManyEnumerableObserver(SelectManyObservable<TSource, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C0E")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C0F")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C10")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C11")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x200025A")]
		private class SelectManyEnumerableObserverWithIndex : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x4000604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TResult> parent;

			[Token(Token = "0x4000605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000C12")]
			public SelectManyEnumerableObserverWithIndex(SelectManyObservable<TSource, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C13")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C14")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C15")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C16")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, IObservable<TResult>> selector;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, int, IObservable<TResult>> selectorWithIndex;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, IEnumerable<TResult>> selectorEnumerable;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, int, IEnumerable<TResult>> selectorEnumerableWithIndex;

		[Token(Token = "0x6000BF6")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, IObservable<TResult>> selector)
		{
		}

		[Token(Token = "0x6000BF7")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, int, IObservable<TResult>> selector)
		{
		}

		[Token(Token = "0x6000BF8")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
		{
		}

		[Token(Token = "0x6000BF9")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
		{
		}

		[Token(Token = "0x6000BFA")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200025B")]
	internal class SelectManyObservable<TSource, TCollection, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x200025C")]
		private class SelectManyOuterObserver : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x200025D")]
			private class SelectMany : OperatorObserverBase<TCollection, TResult>
			{
				[Token(Token = "0x4000612")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SelectManyOuterObserver parent;

				[Token(Token = "0x4000613")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly TSource sourceValue;

				[Token(Token = "0x4000614")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x6000C21")]
				public SelectMany(SelectManyOuterObserver parent, TSource value, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000C22")]
				public override void OnNext(TCollection value)
				{
				}

				[Token(Token = "0x6000C23")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C24")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TCollection, TResult> parent;

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x400060F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x4000610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x4000611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x6000C1C")]
			public SelectManyOuterObserver(SelectManyObservable<TSource, TCollection, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C1D")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C1E")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C1F")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C20")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x200025E")]
		private class SelectManyObserverWithIndex : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x200025F")]
			private class SelectManyObserver : OperatorObserverBase<TCollection, TResult>
			{
				[Token(Token = "0x400061B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SelectManyObserverWithIndex parent;

				[Token(Token = "0x400061C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly TSource sourceValue;

				[Token(Token = "0x400061D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int sourceIndex;

				[Token(Token = "0x400061E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable cancel;

				[Token(Token = "0x400061F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int index;

				[Token(Token = "0x6000C2A")]
				public SelectManyObserver(SelectManyObserverWithIndex parent, TSource value, int index, IDisposable cancel)
				{
				}

				[Token(Token = "0x6000C2B")]
				public override void OnNext(TCollection value)
				{
				}

				[Token(Token = "0x6000C2C")]
				public override void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C2D")]
				public override void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TCollection, TResult> parent;

			[Token(Token = "0x4000616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CompositeDisposable collectionDisposable;

			[Token(Token = "0x4000617")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x4000618")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x4000619")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceDisposable;

			[Token(Token = "0x400061A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000C25")]
			public SelectManyObserverWithIndex(SelectManyObservable<TSource, TCollection, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C26")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C27")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C28")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C29")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000260")]
		private class SelectManyEnumerableObserver : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x4000620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TCollection, TResult> parent;

			[Token(Token = "0x6000C2E")]
			public SelectManyEnumerableObserver(SelectManyObservable<TSource, TCollection, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C2F")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C30")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C31")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C32")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000261")]
		private class SelectManyEnumerableObserverWithIndex : OperatorObserverBase<TSource, TResult>
		{
			[Token(Token = "0x4000621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectManyObservable<TSource, TCollection, TResult> parent;

			[Token(Token = "0x4000622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000C33")]
			public SelectManyEnumerableObserverWithIndex(SelectManyObservable<TSource, TCollection, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C34")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C35")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000C36")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C37")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, IObservable<TCollection>> collectionSelector;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, int, IObservable<TCollection>> collectionSelectorWithIndex;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, IEnumerable<TCollection>> collectionSelectorEnumerable;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, int, IEnumerable<TCollection>> collectionSelectorEnumerableWithIndex;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, TCollection, TResult> resultSelector;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TSource, int, TCollection, int, TResult> resultSelectorWithIndex;

		[Token(Token = "0x6000C17")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, IObservable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
		{
		}

		[Token(Token = "0x6000C18")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, int, IObservable<TCollection>> collectionSelector, Func<TSource, int, TCollection, int, TResult> resultSelector)
		{
		}

		[Token(Token = "0x6000C19")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
		{
		}

		[Token(Token = "0x6000C1A")]
		public SelectManyObservable(IObservable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, int, TCollection, int, TResult> resultSelector)
		{
		}

		[Token(Token = "0x6000C1B")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000262")]
	internal class SelectWhereObservable<T, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x2000263")]
		private class SelectWhere : OperatorObserverBase<T, TR>
		{
			[Token(Token = "0x4000626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SelectWhereObservable<T, TR> parent;

			[Token(Token = "0x6000C3A")]
			public SelectWhere(SelectWhereObservable<T, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C3B")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C3C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C3D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, TR> selector;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TR, bool> predicate;

		[Token(Token = "0x6000C38")]
		public SelectWhereObservable(IObservable<T> source, Func<T, TR> selector, Func<TR, bool> predicate)
		{
		}

		[Token(Token = "0x6000C39")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000264")]
	internal class SingleObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000265")]
		private class Single : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400062A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SingleObservable<T> parent;

			[Token(Token = "0x400062B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool seenValue;

			[Token(Token = "0x400062C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T lastValue;

			[Token(Token = "0x6000C41")]
			public Single(SingleObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C42")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C43")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C44")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000266")]
		private class Single_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400062D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SingleObservable<T> parent;

			[Token(Token = "0x400062E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool seenValue;

			[Token(Token = "0x400062F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T lastValue;

			[Token(Token = "0x6000C45")]
			public Single_(SingleObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C46")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C47")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C48")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool useDefault;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x6000C3E")]
		public SingleObservable(IObservable<T> source, bool useDefault)
		{
		}

		[Token(Token = "0x6000C3F")]
		public SingleObservable(IObservable<T> source, Func<T, bool> predicate, bool useDefault)
		{
		}

		[Token(Token = "0x6000C40")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000267")]
	internal class SkipObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000268")]
		private class Skip : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int remaining;

			[Token(Token = "0x6000C4E")]
			public Skip(SkipObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C4F")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C50")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C51")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000269")]
		private class Skip_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SkipObservable<T> parent;

			[Token(Token = "0x4000636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool open;

			[Token(Token = "0x6000C52")]
			public Skip_(SkipObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C53")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C54")]
			private void Tick()
			{
			}

			[Token(Token = "0x6000C55")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C56")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C57")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int count;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan duration;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly IScheduler scheduler;

		[Token(Token = "0x6000C49")]
		public SkipObservable(IObservable<T> source, int count)
		{
		}

		[Token(Token = "0x6000C4A")]
		public SkipObservable(IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000C4B")]
		public IObservable<T> Combine(int count)
		{
			return null;
		}

		[Token(Token = "0x6000C4C")]
		public IObservable<T> Combine(TimeSpan duration)
		{
			return null;
		}

		[Token(Token = "0x6000C4D")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200026A")]
	internal class SkipUntilObservable<T, TOther> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200026B")]
		private class SkipUntilOuterObserver : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200026C")]
			private class SkipUntil : IObserver<T>
			{
				[Token(Token = "0x400063A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IObserver<T> observer;

				[Token(Token = "0x400063B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SkipUntilOuterObserver parent;

				[Token(Token = "0x400063C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable subscription;

				[Token(Token = "0x6000C5F")]
				public SkipUntil(SkipUntilOuterObserver parent, IDisposable subscription)
				{
				}

				[Token(Token = "0x6000C60")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000C61")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C62")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x200026D")]
			private class SkipUntilOther : IObserver<TOther>
			{
				[Token(Token = "0x400063D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SkipUntilOuterObserver parent;

				[Token(Token = "0x400063E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SkipUntil sourceObserver;

				[Token(Token = "0x400063F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable subscription;

				[Token(Token = "0x6000C63")]
				public SkipUntilOther(SkipUntilOuterObserver parent, SkipUntil sourceObserver, IDisposable subscription)
				{
				}

				[Token(Token = "0x6000C64")]
				public void OnNext(TOther value)
				{
				}

				[Token(Token = "0x6000C65")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C66")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SkipUntilObservable<T, TOther> parent;

			[Token(Token = "0x6000C5A")]
			public SkipUntilOuterObserver(SkipUntilObservable<T, TOther> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C5B")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C5C")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C5D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C5E")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TOther> other;

		[Token(Token = "0x6000C58")]
		public SkipUntilObservable(IObservable<T> source, IObservable<TOther> other)
		{
		}

		[Token(Token = "0x6000C59")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200026E")]
	internal class SkipWhileObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200026F")]
		private class SkipWhile : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SkipWhileObservable<T> parent;

			[Token(Token = "0x4000644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool endSkip;

			[Token(Token = "0x6000C6A")]
			public SkipWhile(SkipWhileObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C6B")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C6C")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C6D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C6E")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000270")]
		private class SkipWhile_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SkipWhileObservable<T> parent;

			[Token(Token = "0x4000646")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool endSkip;

			[Token(Token = "0x4000647")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000C6F")]
			public SkipWhile_(SkipWhileObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C70")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C71")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C72")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C73")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, int, bool> predicateWithIndex;

		[Token(Token = "0x6000C67")]
		public SkipWhileObservable(IObservable<T> source, Func<T, bool> predicate)
		{
		}

		[Token(Token = "0x6000C68")]
		public SkipWhileObservable(IObservable<T> source, Func<T, int, bool> predicateWithIndex)
		{
		}

		[Token(Token = "0x6000C69")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000271")]
	internal class StartObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000272")]
		private class StartObserver : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400064C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly StartObservable<T> parent;

			[Token(Token = "0x6000C77")]
			public StartObserver(StartObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C78")]
			public void Run()
			{
			}

			[Token(Token = "0x6000C79")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C7A")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C7B")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Action action;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> function;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan? startAfter;

		[Token(Token = "0x6000C74")]
		public StartObservable(Func<T> function, TimeSpan? startAfter, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000C75")]
		public StartObservable(Action action, TimeSpan? startAfter, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000C76")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000273")]
	internal class StartWithObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000274")]
		private class StartWith : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly StartWithObservable<T> parent;

			[Token(Token = "0x6000C7F")]
			public StartWith(StartWithObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C80")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C81")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C82")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C83")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T value;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> valueFactory;

		[Token(Token = "0x6000C7C")]
		public StartWithObservable(IObservable<T> source, T value)
		{
		}

		[Token(Token = "0x6000C7D")]
		public StartWithObservable(IObservable<T> source, Func<T> valueFactory)
		{
		}

		[Token(Token = "0x6000C7E")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000275")]
	internal class SubscribeOnObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000276")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0EAC", Offset = "0x8B0EAC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SerialDisposable d;

			[Token(Token = "0x4000654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SubscribeOnObservable<T> <>4__this;

			[Token(Token = "0x4000655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x6000C86")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6000C87")]
			internal void <SubscribeCore>b__0()
			{
			}
		}

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000C84")]
		public SubscribeOnObservable(IObservable<T> source, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000C85")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000277")]
	internal class SwitchObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000278")]
		private class SwitchObserver : OperatorObserverBase<IObservable<T>, T>
		{
			[Token(Token = "0x2000279")]
			private class Switch : IObserver<T>
			{
				[Token(Token = "0x400065D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SwitchObserver parent;

				[Token(Token = "0x400065E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ulong id;

				[Token(Token = "0x6000C8F")]
				public Switch(SwitchObserver observer, ulong id)
				{
				}

				[Token(Token = "0x6000C90")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000C91")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000C92")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SwitchObservable<T> parent;

			[Token(Token = "0x4000658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SerialDisposable innerSubscription;

			[Token(Token = "0x400065A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong latest;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasLatest;

			[Token(Token = "0x6000C8A")]
			public SwitchObserver(SwitchObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C8B")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000C8C")]
			public override void OnNext(IObservable<T> value)
			{
			}

			[Token(Token = "0x6000C8D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C8E")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<IObservable<T>> sources;

		[Token(Token = "0x6000C88")]
		public SwitchObservable(IObservable<IObservable<T>> sources)
		{
		}

		[Token(Token = "0x6000C89")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200027A")]
	internal class SynchronizeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200027B")]
		private class Synchronize : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SynchronizeObservable<T> parent;

			[Token(Token = "0x6000C95")]
			public Synchronize(SynchronizeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000C96")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000C97")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000C98")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x6000C93")]
		public SynchronizeObservable(IObservable<T> source, object gate)
		{
		}

		[Token(Token = "0x6000C94")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200027C")]
	internal class SynchronizedObserver<T> : IObserver<T>
	{
		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObserver<T> observer;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x6000C99")]
		public SynchronizedObserver(IObserver<T> observer, object gate)
		{
		}

		[Token(Token = "0x6000C9A")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000C9B")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000C9C")]
		public void OnCompleted()
		{
		}
	}
	[Token(Token = "0x200027D")]
	internal class TakeObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200027E")]
		private class Take : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int rest;

			[Token(Token = "0x6000CA2")]
			public Take(TakeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CA3")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CA4")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CA5")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x200027F")]
		private class Take_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeObservable<T> parent;

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x6000CA6")]
			public Take_(TakeObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CA7")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CA8")]
			private void Tick()
			{
			}

			[Token(Token = "0x6000CA9")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CAA")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CAB")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int count;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan duration;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly IScheduler scheduler;

		[Token(Token = "0x6000C9D")]
		public TakeObservable(IObservable<T> source, int count)
		{
		}

		[Token(Token = "0x6000C9E")]
		public TakeObservable(IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000C9F")]
		public IObservable<T> Combine(int count)
		{
			return null;
		}

		[Token(Token = "0x6000CA0")]
		public IObservable<T> Combine(TimeSpan duration)
		{
			return null;
		}

		[Token(Token = "0x6000CA1")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	internal class TakeLastObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000281")]
		private class TakeLast : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeLastObservable<T> parent;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T> q;

			[Token(Token = "0x6000CAF")]
			public TakeLast(TakeLastObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CB0")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CB1")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CB2")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CB3")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000282")]
		private class TakeLast_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private DateTimeOffset startTime;

			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeLastObservable<T> parent;

			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<TimeInterval<T>> q;

			[Token(Token = "0x6000CB4")]
			public TakeLast_(TakeLastObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CB5")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CB6")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CB7")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CB8")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000CB9")]
			private void Trim(TimeSpan now)
			{
			}
		}

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int count;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan duration;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CAC")]
		public TakeLastObservable(IObservable<T> source, int count)
		{
		}

		[Token(Token = "0x6000CAD")]
		public TakeLastObservable(IObservable<T> source, TimeSpan duration, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CAE")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	internal class TakeUntilObservable<T, TOther> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000284")]
		private class TakeUntil : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000285")]
			private class TakeUntilOther : IObserver<TOther>
			{
				[Token(Token = "0x4000678")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly TakeUntil sourceObserver;

				[Token(Token = "0x4000679")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable subscription;

				[Token(Token = "0x6000CC1")]
				public TakeUntilOther(TakeUntil sourceObserver, IDisposable subscription)
				{
				}

				[Token(Token = "0x6000CC2")]
				public void OnNext(TOther value)
				{
				}

				[Token(Token = "0x6000CC3")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000CC4")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeUntilObservable<T, TOther> parent;

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object gate;

			[Token(Token = "0x6000CBC")]
			public TakeUntil(TakeUntilObservable<T, TOther> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CBD")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CBE")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CBF")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CC0")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TOther> other;

		[Token(Token = "0x6000CBA")]
		public TakeUntilObservable(IObservable<T> source, IObservable<TOther> other)
		{
		}

		[Token(Token = "0x6000CBB")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	internal class TakeWhileObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000287")]
		private class TakeWhile : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeWhileObservable<T> parent;

			[Token(Token = "0x6000CC8")]
			public TakeWhile(TakeWhileObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CC9")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CCA")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CCB")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CCC")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000288")]
		private class TakeWhile_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TakeWhileObservable<T> parent;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000CCD")]
			public TakeWhile_(TakeWhileObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CCE")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CCF")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CD0")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CD1")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, int, bool> predicateWithIndex;

		[Token(Token = "0x6000CC5")]
		public TakeWhileObservable(IObservable<T> source, Func<T, bool> predicate)
		{
		}

		[Token(Token = "0x6000CC6")]
		public TakeWhileObservable(IObservable<T> source, Func<T, int, bool> predicateWithIndex)
		{
		}

		[Token(Token = "0x6000CC7")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000289")]
	internal class ThrottleObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200028A")]
		private class Throttle : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200028B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0EBC", Offset = "0x8B0EBC")]
			private sealed class <>c__DisplayClass9_0
			{
				[Token(Token = "0x4000689")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Throttle <>4__this;

				[Token(Token = "0x400068A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ulong currentid;

				[Token(Token = "0x6000CDA")]
				public <>c__DisplayClass9_0()
				{
				}

				[Token(Token = "0x6000CDB")]
				internal void <OnNext>b__0()
				{
				}
			}

			[Token(Token = "0x4000683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ThrottleObservable<T> parent;

			[Token(Token = "0x4000684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasValue;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable cancelable;

			[Token(Token = "0x4000688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong id;

			[Token(Token = "0x6000CD4")]
			public Throttle(ThrottleObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CD5")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CD6")]
			private void OnNext(ulong currentid)
			{
			}

			[Token(Token = "0x6000CD7")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CD8")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CD9")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan dueTime;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CD2")]
		public ThrottleObservable(IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CD3")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200028C")]
	internal class ThrottleFirstObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200028D")]
		private class ThrottleFirst : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ThrottleFirstObservable<T> parent;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool open;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable cancelable;

			[Token(Token = "0x6000CDE")]
			public ThrottleFirst(ThrottleFirstObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CDF")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CE0")]
			private void OnNext()
			{
			}

			[Token(Token = "0x6000CE1")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CE2")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CE3")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan dueTime;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CDC")]
		public ThrottleFirstObservable(IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CDD")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200028E")]
	internal class ThrowObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200028F")]
		private class Throw : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000CE6")]
			public Throw(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CE7")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CE8")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CE9")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000290")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0ECC", Offset = "0x8B0ECC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObserver<T> observer;

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ThrowObservable<T> <>4__this;

			[Token(Token = "0x6000CEA")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6000CEB")]
			internal void <SubscribeCore>b__0()
			{
			}
		}

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Exception error;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CE4")]
		public ThrowObservable(Exception error, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CE5")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000291")]
	internal class TimeIntervalObservable<T> : OperatorObservableBase<TimeInterval<T>>
	{
		[Token(Token = "0x2000292")]
		private class TimeInterval : OperatorObserverBase<T, TimeInterval<T>>
		{
			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TimeIntervalObservable<T> parent;

			[Token(Token = "0x4000699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private DateTimeOffset lastTime;

			[Token(Token = "0x6000CEE")]
			public TimeInterval(TimeIntervalObservable<T> parent, IObserver<TimeInterval<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CEF")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CF0")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CF1")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CEC")]
		public TimeIntervalObservable(IObservable<T> source, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CED")]
		protected override IDisposable SubscribeCore(IObserver<TimeInterval<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000293")]
	internal class TimeoutObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000294")]
		private class Timeout : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000295")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0EDC", Offset = "0x8B0EDC")]
			private sealed class <>c__DisplayClass8_0
			{
				[Token(Token = "0x40006A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Timeout <>4__this;

				[Token(Token = "0x40006A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ulong timerId;

				[Token(Token = "0x6000CFB")]
				public <>c__DisplayClass8_0()
				{
				}

				[Token(Token = "0x6000CFC")]
				internal void <RunTimer>b__0()
				{
				}
			}

			[Token(Token = "0x400069E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TimeoutObservable<T> parent;

			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong objectId;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isTimeout;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable timerSubscription;

			[Token(Token = "0x6000CF5")]
			public Timeout(TimeoutObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CF6")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CF7")]
			private IDisposable RunTimer(ulong timerId)
			{
				return null;
			}

			[Token(Token = "0x6000CF8")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000CF9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000CFA")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000296")]
		private class Timeout_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TimeoutObservable<T> parent;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFinished;

			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IDisposable timerSubscription;

			[Token(Token = "0x6000CFD")]
			public Timeout_(TimeoutObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000CFE")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000CFF")]
			private void OnNext()
			{
			}

			[Token(Token = "0x6000D00")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D01")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D02")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan? dueTime;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly DateTimeOffset? dueTimeDT;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000CF2")]
		public TimeoutObservable(IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CF3")]
		public TimeoutObservable(IObservable<T> source, DateTimeOffset dueTime, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000CF4")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000297")]
	internal class TimerObservable : OperatorObservableBase<long>
	{
		[Token(Token = "0x2000298")]
		private class Timer : OperatorObserverBase<long, long>
		{
			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private long index;

			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x107585C", Offset = "0x107585C", VA = "0x107585C")]
			public Timer(IObserver<long> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x1075488", Offset = "0x1075488", VA = "0x1075488")]
			public void OnNext()
			{
			}

			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x10758C0", Offset = "0x10758C0", VA = "0x10758C0", Slot = "8")]
			public override void OnNext(long value)
			{
			}

			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x10758C4", Offset = "0x10758C4", VA = "0x10758C4", Slot = "9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0x10759F8", Offset = "0x10759F8", VA = "0x10759F8", Slot = "10")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x2000299")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0EEC", Offset = "0x8B0EEC")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Timer timerObserver;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TimerObservable <>4__this;

			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0x1075444", Offset = "0x1075444", VA = "0x1075444")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0x107544C", Offset = "0x107544C", VA = "0x107544C")]
			internal void <SubscribeCore>b__0()
			{
			}
		}

		[Token(Token = "0x200029A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0EFC", Offset = "0x8B0EFC")]
		private sealed class <>c__DisplayClass6_1
		{
			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ISchedulerPeriodic periodicScheduler;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass6_0 CS$<>8__locals1;

			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x10755F8", Offset = "0x10755F8", VA = "0x10755F8")]
			public <>c__DisplayClass6_1()
			{
			}
		}

		[Token(Token = "0x200029B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F0C", Offset = "0x8B0F0C")]
		private sealed class <>c__DisplayClass6_2
		{
			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SerialDisposable disposable;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass6_1 CS$<>8__locals2;

			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x1075600", Offset = "0x1075600", VA = "0x1075600")]
			public <>c__DisplayClass6_2()
			{
			}

			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x1075608", Offset = "0x1075608", VA = "0x1075608")]
			internal void <SubscribeCore>b__1()
			{
			}
		}

		[Token(Token = "0x200029C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F1C", Offset = "0x8B0F1C")]
		private sealed class <>c__DisplayClass6_3
		{
			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TimeSpan timeP;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass6_1 CS$<>8__locals3;

			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x10757D4", Offset = "0x10757D4", VA = "0x10757D4")]
			public <>c__DisplayClass6_3()
			{
			}

			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x10757DC", Offset = "0x10757DC", VA = "0x10757DC")]
			internal void <SubscribeCore>b__2(Action<TimeSpan> self)
			{
			}
		}

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DateTimeOffset? dueTimeA;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly TimeSpan? dueTimeB;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly TimeSpan? period;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x14DD7FC", Offset = "0x14DD7FC", VA = "0x14DD7FC")]
		public TimerObservable(DateTimeOffset dueTime, TimeSpan? period, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x14DD904", Offset = "0x14DD904", VA = "0x14DD904")]
		public TimerObservable(TimeSpan dueTime, TimeSpan? period, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x14DD9F4", Offset = "0x14DD9F4", VA = "0x14DD9F4", Slot = "6")]
		protected override IDisposable SubscribeCore(IObserver<long> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200029D")]
	internal class TimestampObservable<T> : OperatorObservableBase<Timestamped<T>>
	{
		[Token(Token = "0x200029E")]
		private class Timestamp : OperatorObserverBase<T, Timestamped<T>>
		{
			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TimestampObservable<T> parent;

			[Token(Token = "0x6000D14")]
			public Timestamp(TimestampObservable<T> parent, IObserver<Timestamped<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D15")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D16")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D17")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000D12")]
		public TimestampObservable(IObservable<T> source, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000D13")]
		protected override IDisposable SubscribeCore(IObserver<Timestamped<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200029F")]
	internal class ToArrayObservable<TSource> : OperatorObservableBase<TSource[]>
	{
		[Token(Token = "0x20002A0")]
		private class ToArray : OperatorObserverBase<TSource, TSource[]>
		{
			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly List<TSource> list;

			[Token(Token = "0x6000D1A")]
			public ToArray(IObserver<TSource[]> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D1B")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000D1C")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D1D")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x6000D18")]
		public ToArrayObservable(IObservable<TSource> source)
		{
		}

		[Token(Token = "0x6000D19")]
		protected override IDisposable SubscribeCore(IObserver<TSource[]> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A1")]
	internal class ToListObservable<TSource> : OperatorObservableBase<IList<TSource>>
	{
		[Token(Token = "0x20002A2")]
		private class ToList : OperatorObserverBase<TSource, IList<TSource>>
		{
			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly List<TSource> list;

			[Token(Token = "0x6000D20")]
			public ToList(IObserver<IList<TSource>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D21")]
			public override void OnNext(TSource value)
			{
			}

			[Token(Token = "0x6000D22")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D23")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TSource> source;

		[Token(Token = "0x6000D1E")]
		public ToListObservable(IObservable<TSource> source)
		{
		}

		[Token(Token = "0x6000D1F")]
		protected override IDisposable SubscribeCore(IObserver<IList<TSource>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A3")]
	internal class ToObservableObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20002A4")]
		private class ToObservable : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x20002A5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F2C", Offset = "0x8B0F2C")]
			private sealed class <>c__DisplayClass2_0
			{
				[Token(Token = "0x40006C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public SingleAssignmentDisposable flag;

				[Token(Token = "0x40006C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IEnumerator<T> e;

				[Token(Token = "0x40006C4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ToObservable <>4__this;

				[Token(Token = "0x6000D2B")]
				public <>c__DisplayClass2_0()
				{
				}

				[Token(Token = "0x6000D2C")]
				internal void <Run>b__0(Action self)
				{
				}
			}

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ToObservableObservable<T> parent;

			[Token(Token = "0x6000D26")]
			public ToObservable(ToObservableObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D27")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D28")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D29")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D2A")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<T> source;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IScheduler scheduler;

		[Token(Token = "0x6000D24")]
		public ToObservableObservable(IEnumerable<T> source, IScheduler scheduler)
		{
		}

		[Token(Token = "0x6000D25")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A6")]
	internal class Wait<T> : IObserver<T>
	{
		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly TimeSpan InfiniteTimeSpan;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TimeSpan timeout;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ManualResetEvent semaphore;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool seenValue;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Exception ex;

		[Token(Token = "0x6000D2D")]
		public Wait(IObservable<T> source, TimeSpan timeout)
		{
		}

		[Token(Token = "0x6000D2E")]
		public T Run()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D2F")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000D30")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000D31")]
		public void OnCompleted()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	internal class WhenAllObservable<T> : OperatorObservableBase<T[]>
	{
		[Token(Token = "0x20002A8")]
		private class WhenAll : OperatorObserverBase<T[], T[]>
		{
			[Token(Token = "0x20002A9")]
			private class WhenAllCollectionObserver : IObserver<T>
			{
				[Token(Token = "0x40006D3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly WhenAll parent;

				[Token(Token = "0x40006D4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int index;

				[Token(Token = "0x40006D5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private bool isCompleted;

				[Token(Token = "0x6000D3B")]
				public WhenAllCollectionObserver(WhenAll parent, int index)
				{
				}

				[Token(Token = "0x6000D3C")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000D3D")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D3E")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40006CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IObservable<T>[] sources;

			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completedCount;

			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int length;

			[Token(Token = "0x40006D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] values;

			[Token(Token = "0x6000D36")]
			public WhenAll(IObservable<T>[] sources, IObserver<T[]> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D37")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D38")]
			public override void OnNext(T[] value)
			{
			}

			[Token(Token = "0x6000D39")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D3A")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20002AA")]
		private class WhenAll_ : OperatorObserverBase<T[], T[]>
		{
			[Token(Token = "0x20002AB")]
			private class WhenAllCollectionObserver : IObserver<T>
			{
				[Token(Token = "0x40006DB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly WhenAll_ parent;

				[Token(Token = "0x40006DC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int index;

				[Token(Token = "0x40006DD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private bool isCompleted;

				[Token(Token = "0x6000D44")]
				public WhenAllCollectionObserver(WhenAll_ parent, int index)
				{
				}

				[Token(Token = "0x6000D45")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000D46")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D47")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40006D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IList<IObservable<T>> sources;

			[Token(Token = "0x40006D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completedCount;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int length;

			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] values;

			[Token(Token = "0x6000D3F")]
			public WhenAll_(IList<IObservable<T>> sources, IObserver<T[]> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D40")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D41")]
			public override void OnNext(T[] value)
			{
			}

			[Token(Token = "0x6000D42")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D43")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T>[] sources;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<IObservable<T>> sourcesEnumerable;

		[Token(Token = "0x6000D33")]
		public WhenAllObservable(IObservable<T>[] sources)
		{
		}

		[Token(Token = "0x6000D34")]
		public WhenAllObservable(IEnumerable<IObservable<T>> sources)
		{
		}

		[Token(Token = "0x6000D35")]
		protected override IDisposable SubscribeCore(IObserver<T[]> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	internal class WhenAllObservable : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x20002AD")]
		private class WhenAll : OperatorObserverBase<Unit, Unit>
		{
			[Token(Token = "0x20002AE")]
			private class WhenAllCollectionObserver : IObserver<Unit>
			{
				[Token(Token = "0x40006E4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly WhenAll parent;

				[Token(Token = "0x40006E5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private bool isCompleted;

				[Token(Token = "0x6000D50")]
				[Address(RVA = "0x1FCEC44", Offset = "0x1FCEC44", VA = "0x1FCEC44")]
				public WhenAllCollectionObserver(WhenAll parent)
				{
				}

				[Token(Token = "0x6000D51")]
				[Address(RVA = "0x1FD3838", Offset = "0x1FD3838", VA = "0x1FD3838", Slot = "4")]
				public void OnNext(Unit value)
				{
				}

				[Token(Token = "0x6000D52")]
				[Address(RVA = "0x1FD383C", Offset = "0x1FD383C", VA = "0x1FD383C", Slot = "5")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D53")]
				[Address(RVA = "0x1FD3934", Offset = "0x1FD3934", VA = "0x1FD3934", Slot = "6")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly IObservable<Unit>[] sources;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly object gate;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int completedCount;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int length;

			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x1FCE834", Offset = "0x1FCE834", VA = "0x1FCE834")]
			public WhenAll(IObservable<Unit>[] sources, IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x1FCE8D8", Offset = "0x1FCE8D8", VA = "0x1FCE8D8")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x1FCEC70", Offset = "0x1FCEC70", VA = "0x1FCEC70", Slot = "8")]
			public override void OnNext(Unit value)
			{
			}

			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x1FCED34", Offset = "0x1FCED34", VA = "0x1FCED34", Slot = "9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x1FCEE68", Offset = "0x1FCEE68", VA = "0x1FCEE68", Slot = "10")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20002AF")]
		private class WhenAll_ : OperatorObserverBase<Unit, Unit>
		{
			[Token(Token = "0x20002B0")]
			private class WhenAllCollectionObserver : IObserver<Unit>
			{
				[Token(Token = "0x40006EA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly WhenAll_ parent;

				[Token(Token = "0x40006EB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private bool isCompleted;

				[Token(Token = "0x6000D59")]
				[Address(RVA = "0x1FCF478", Offset = "0x1FCF478", VA = "0x1FCF478")]
				public WhenAllCollectionObserver(WhenAll_ parent)
				{
				}

				[Token(Token = "0x6000D5A")]
				[Address(RVA = "0x1FD3B0C", Offset = "0x1FD3B0C", VA = "0x1FD3B0C", Slot = "4")]
				public void OnNext(Unit value)
				{
				}

				[Token(Token = "0x6000D5B")]
				[Address(RVA = "0x1FD3B10", Offset = "0x1FD3B10", VA = "0x1FD3B10", Slot = "5")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D5C")]
				[Address(RVA = "0x1FD3C08", Offset = "0x1FD3C08", VA = "0x1FD3C08", Slot = "6")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly IList<IObservable<Unit>> sources;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly object gate;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int completedCount;

			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int length;

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x1FCEF84", Offset = "0x1FCEF84", VA = "0x1FCEF84")]
			public WhenAll_(IList<IObservable<Unit>> sources, IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x1FCF028", Offset = "0x1FCF028", VA = "0x1FCF028")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x1FCF4A4", Offset = "0x1FCF4A4", VA = "0x1FCF4A4", Slot = "8")]
			public override void OnNext(Unit value)
			{
			}

			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1FCF568", Offset = "0x1FCF568", VA = "0x1FCF568", Slot = "9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1FCF69C", Offset = "0x1FCF69C", VA = "0x1FCF69C", Slot = "10")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IObservable<Unit>[] sources;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IEnumerable<IObservable<Unit>> sourcesEnumerable;

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x10B858C", Offset = "0x10B858C", VA = "0x10B858C")]
		public WhenAllObservable(IObservable<Unit>[] sources)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x10B85F0", Offset = "0x10B85F0", VA = "0x10B85F0")]
		public WhenAllObservable(IEnumerable<IObservable<Unit>> sources)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x10B8654", Offset = "0x10B8654", VA = "0x10B8654", Slot = "6")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B1")]
	internal class WhereObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20002B2")]
		private class Where : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly WhereObservable<T> parent;

			[Token(Token = "0x6000D62")]
			public Where(WhereObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D63")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D64")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D65")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20002B3")]
		private class Where_ : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly WhereObservable<T> parent;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x6000D66")]
			public Where_(WhereObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D67")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D68")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D69")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20002B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F3C", Offset = "0x8B0F3C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40006F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WhereObservable<T> <>4__this;

			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T, bool> combinePredicate;

			[Token(Token = "0x6000D6A")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6000D6B")]
			internal bool <CombinePredicate>b__0(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, int, bool> predicateWithIndex;

		[Token(Token = "0x6000D5D")]
		public WhereObservable(IObservable<T> source, Func<T, bool> predicate)
		{
		}

		[Token(Token = "0x6000D5E")]
		public WhereObservable(IObservable<T> source, Func<T, int, bool> predicateWithIndex)
		{
		}

		[Token(Token = "0x6000D5F")]
		public IObservable<T> CombinePredicate(Func<T, bool> combinePredicate)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		public IObservable<TR> CombineSelector<TR>(Func<T, TR> selector)
		{
			return null;
		}

		[Token(Token = "0x6000D61")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B5")]
	internal class WhereSelectObservable<T, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002B6")]
		private class WhereSelect : OperatorObserverBase<T, TR>
		{
			[Token(Token = "0x40006F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly WhereSelectObservable<T, TR> parent;

			[Token(Token = "0x6000D6E")]
			public WhereSelect(WhereSelectObservable<T, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D6F")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000D70")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D71")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, bool> predicate;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T, TR> selector;

		[Token(Token = "0x6000D6C")]
		public WhereSelectObservable(IObservable<T> source, Func<T, bool> predicate, Func<T, TR> selector)
		{
		}

		[Token(Token = "0x6000D6D")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B7")]
	internal class WithLatestFromObservable<TLeft, TRight, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20002B8")]
		private class WithLatestFrom : OperatorObserverBase<TResult, TResult>
		{
			[Token(Token = "0x20002B9")]
			private class LeftObserver : IObserver<TLeft>
			{
				[Token(Token = "0x40006FF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly WithLatestFrom parent;

				[Token(Token = "0x6000D79")]
				public LeftObserver(WithLatestFrom parent)
				{
				}

				[Token(Token = "0x6000D7A")]
				public void OnNext(TLeft value)
				{
				}

				[Token(Token = "0x6000D7B")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D7C")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x20002BA")]
			private class RightObserver : IObserver<TRight>
			{
				[Token(Token = "0x4000700")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly WithLatestFrom parent;

				[Token(Token = "0x4000701")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly IDisposable selfSubscription;

				[Token(Token = "0x6000D7D")]
				public RightObserver(WithLatestFrom parent, IDisposable subscription)
				{
				}

				[Token(Token = "0x6000D7E")]
				public void OnNext(TRight value)
				{
				}

				[Token(Token = "0x6000D7F")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000D80")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly WithLatestFromObservable<TLeft, TRight, TResult> parent;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasLatest;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TRight latestValue;

			[Token(Token = "0x6000D74")]
			public WithLatestFrom(WithLatestFromObservable<TLeft, TRight, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D75")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D76")]
			public override void OnNext(TResult value)
			{
			}

			[Token(Token = "0x6000D77")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D78")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TLeft> left;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TRight> right;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TLeft, TRight, TResult> selector;

		[Token(Token = "0x6000D72")]
		public WithLatestFromObservable(IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
		}

		[Token(Token = "0x6000D73")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BB")]
	public delegate TR ZipFunc<T1, T2, T3, TR>(T1 arg1, T2 arg2, T3 arg3);
	[Token(Token = "0x20002BC")]
	public delegate TR ZipFunc<T1, T2, T3, T4, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
	[Token(Token = "0x20002BD")]
	public delegate TR ZipFunc<T1, T2, T3, T4, T5, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	[Token(Token = "0x20002BE")]
	public delegate TR ZipFunc<T1, T2, T3, T4, T5, T6, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
	[Token(Token = "0x20002BF")]
	public delegate TR ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
	[Token(Token = "0x20002C0")]
	internal class ZipObservable<TLeft, TRight, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20002C1")]
		private class Zip : OperatorObserverBase<TResult, TResult>
		{
			[Token(Token = "0x20002C2")]
			private class LeftZipObserver : IObserver<TLeft>
			{
				[Token(Token = "0x400070B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Zip parent;

				[Token(Token = "0x6000D9E")]
				public LeftZipObserver(Zip parent)
				{
				}

				[Token(Token = "0x6000D9F")]
				public void OnNext(TLeft value)
				{
				}

				[Token(Token = "0x6000DA0")]
				public void OnError(Exception ex)
				{
				}

				[Token(Token = "0x6000DA1")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x20002C3")]
			private class RightZipObserver : IObserver<TRight>
			{
				[Token(Token = "0x400070C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Zip parent;

				[Token(Token = "0x6000DA2")]
				public RightZipObserver(Zip parent)
				{
				}

				[Token(Token = "0x6000DA3")]
				public void OnNext(TRight value)
				{
				}

				[Token(Token = "0x6000DA4")]
				public void OnError(Exception ex)
				{
				}

				[Token(Token = "0x6000DA5")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<TLeft, TRight, TResult> parent;

			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<TLeft> leftQ;

			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool leftCompleted;

			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<TRight> rightQ;

			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool rightCompleted;

			[Token(Token = "0x6000D97")]
			public Zip(ZipObservable<TLeft, TRight, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000D98")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000D99")]
			private void Dequeue()
			{
			}

			[Token(Token = "0x6000D9A")]
			public override void OnNext(TResult value)
			{
			}

			[Token(Token = "0x6000D9B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000D9C")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000D9D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9284", Offset = "0x8B9284")]
			private void <Run>b__7_0()
			{
			}
		}

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TLeft> left;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TRight> right;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TLeft, TRight, TResult> selector;

		[Token(Token = "0x6000D95")]
		public ZipObservable(IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
		}

		[Token(Token = "0x6000D96")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C4")]
	internal class ZipObservable<T> : OperatorObservableBase<IList<T>>
	{
		[Token(Token = "0x20002C5")]
		private class Zip : OperatorObserverBase<IList<T>, IList<T>>
		{
			[Token(Token = "0x20002C6")]
			private class ZipObserver : IObserver<T>
			{
				[Token(Token = "0x4000713")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly Zip parent;

				[Token(Token = "0x4000714")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int index;

				[Token(Token = "0x6000DAF")]
				public ZipObserver(Zip parent, int index)
				{
				}

				[Token(Token = "0x6000DB0")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000DB1")]
				public void OnError(Exception ex)
				{
				}

				[Token(Token = "0x6000DB2")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T> parent;

			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<T>[] queues;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool[] isDone;

			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int length;

			[Token(Token = "0x6000DA8")]
			public Zip(ZipObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DA9")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DAA")]
			private void Dequeue(int index)
			{
			}

			[Token(Token = "0x6000DAB")]
			public override void OnNext(IList<T> value)
			{
			}

			[Token(Token = "0x6000DAC")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DAD")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DAE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9294", Offset = "0x8B9294")]
			private void <Run>b__6_0()
			{
			}
		}

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T>[] sources;

		[Token(Token = "0x6000DA6")]
		public ZipObservable(IObservable<T>[] sources)
		{
		}

		[Token(Token = "0x6000DA7")]
		protected override IDisposable SubscribeCore(IObserver<IList<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C7")]
	internal class ZipObservable<T1, T2, T3, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002C8")]
		private class Zip : NthZipObserverBase<TR>
		{
			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T1, T2, T3, TR> parent;

			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T1> q1;

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T2> q2;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T3> q3;

			[Token(Token = "0x6000DB5")]
			public Zip(ZipObservable<T1, T2, T3, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DB6")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DB7")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000DB8")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000DB9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DBA")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DBB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B92A4", Offset = "0x8B92A4")]
			private void <Run>b__6_0()
			{
			}
		}

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipFunc<T1, T2, T3, TR> resultSelector;

		[Token(Token = "0x6000DB3")]
		public ZipObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, ZipFunc<T1, T2, T3, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000DB4")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C9")]
	internal class ZipObservable<T1, T2, T3, T4, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002CA")]
		private class Zip : NthZipObserverBase<TR>
		{
			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T1, T2, T3, T4, TR> parent;

			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T1> q1;

			[Token(Token = "0x4000726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T2> q2;

			[Token(Token = "0x4000727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T3> q3;

			[Token(Token = "0x4000728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T4> q4;

			[Token(Token = "0x6000DBE")]
			public Zip(ZipObservable<T1, T2, T3, T4, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DBF")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DC0")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000DC1")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000DC2")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DC3")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B92B4", Offset = "0x8B92B4")]
			private void <Run>b__7_0()
			{
			}
		}

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipFunc<T1, T2, T3, T4, TR> resultSelector;

		[Token(Token = "0x6000DBC")]
		public ZipObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, ZipFunc<T1, T2, T3, T4, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000DBD")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CB")]
	internal class ZipObservable<T1, T2, T3, T4, T5, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002CC")]
		private class Zip : NthZipObserverBase<TR>
		{
			[Token(Token = "0x400072F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T1, T2, T3, T4, T5, TR> parent;

			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T1> q1;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T2> q2;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T3> q3;

			[Token(Token = "0x4000734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T4> q4;

			[Token(Token = "0x4000735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T5> q5;

			[Token(Token = "0x6000DC7")]
			public Zip(ZipObservable<T1, T2, T3, T4, T5, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DC8")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DC9")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000DCA")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000DCB")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DCC")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DCD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B92C4", Offset = "0x8B92C4")]
			private void <Run>b__8_0()
			{
			}
		}

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector;

		[Token(Token = "0x6000DC5")]
		public ZipObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000DC6")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CD")]
	internal class ZipObservable<T1, T2, T3, T4, T5, T6, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002CE")]
		private class Zip : NthZipObserverBase<TR>
		{
			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T1, T2, T3, T4, T5, T6, TR> parent;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T1> q1;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T2> q2;

			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T3> q3;

			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T4> q4;

			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T5> q5;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T6> q6;

			[Token(Token = "0x6000DD0")]
			public Zip(ZipObservable<T1, T2, T3, T4, T5, T6, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DD1")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DD2")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000DD3")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000DD4")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DD5")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DD6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B92D4", Offset = "0x8B92D4")]
			private void <Run>b__9_0()
			{
			}
		}

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector;

		[Token(Token = "0x6000DCE")]
		public ZipObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000DCF")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CF")]
	internal class ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002D0")]
		private class Zip : NthZipObserverBase<TR>
		{
			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent;

			[Token(Token = "0x400074E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400074F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T1> q1;

			[Token(Token = "0x4000750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T2> q2;

			[Token(Token = "0x4000751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T3> q3;

			[Token(Token = "0x4000752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T4> q4;

			[Token(Token = "0x4000753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T5> q5;

			[Token(Token = "0x4000754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T6> q6;

			[Token(Token = "0x4000755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<T7> q7;

			[Token(Token = "0x6000DD9")]
			public Zip(ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000DDA")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000DDB")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000DDC")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000DDD")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000DDE")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000DDF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B92E4", Offset = "0x8B92E4")]
			private void <Run>b__10_0()
			{
			}
		}

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T7> source7;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector;

		[Token(Token = "0x6000DD7")]
		public ZipObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000DD8")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D1")]
	internal interface IZipObservable
	{
		[Token(Token = "0x6000DE0")]
		void Dequeue(int index);

		[Token(Token = "0x6000DE1")]
		void Fail(Exception error);

		[Token(Token = "0x6000DE2")]
		void Done(int index);
	}
	[Token(Token = "0x20002D2")]
	internal abstract class NthZipObserverBase<T> : OperatorObserverBase<T, T>, IZipObservable
	{
		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ICollection[] queues;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool[] isDone;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int length;

		[Token(Token = "0x6000DE3")]
		public NthZipObserverBase(IObserver<T> observer, IDisposable cancel)
		{
		}

		[Token(Token = "0x6000DE4")]
		protected void SetQueue(ICollection[] queues)
		{
		}

		[Token(Token = "0x6000DE5")]
		public abstract T GetResult();

		[Token(Token = "0x6000DE6")]
		public void Dequeue(int index)
		{
		}

		[Token(Token = "0x6000DE7")]
		public void Done(int index)
		{
		}

		[Token(Token = "0x6000DE8")]
		public void Fail(Exception error)
		{
		}
	}
	[Token(Token = "0x20002D3")]
	internal class ZipObserver<T> : IObserver<T>
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IZipObservable parent;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int index;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Queue<T> queue;

		[Token(Token = "0x6000DE9")]
		public ZipObserver(object gate, IZipObservable parent, int index, Queue<T> queue)
		{
		}

		[Token(Token = "0x6000DEA")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000DEB")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000DEC")]
		public void OnCompleted()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public delegate TR ZipLatestFunc<T1, T2, T3, TR>(T1 arg1, T2 arg2, T3 arg3);
	[Token(Token = "0x20002D5")]
	public delegate TR ZipLatestFunc<T1, T2, T3, T4, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
	[Token(Token = "0x20002D6")]
	public delegate TR ZipLatestFunc<T1, T2, T3, T4, T5, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	[Token(Token = "0x20002D7")]
	public delegate TR ZipLatestFunc<T1, T2, T3, T4, T5, T6, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
	[Token(Token = "0x20002D8")]
	public delegate TR ZipLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
	[Token(Token = "0x20002D9")]
	internal class ZipLatestObservable<TLeft, TRight, TResult> : OperatorObservableBase<TResult>
	{
		[Token(Token = "0x20002DA")]
		private class ZipLatest : OperatorObserverBase<TResult, TResult>
		{
			[Token(Token = "0x20002DB")]
			private class LeftObserver : IObserver<TLeft>
			{
				[Token(Token = "0x4000768")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ZipLatest parent;

				[Token(Token = "0x6000E09")]
				public LeftObserver(ZipLatest parent)
				{
				}

				[Token(Token = "0x6000E0A")]
				public void OnNext(TLeft value)
				{
				}

				[Token(Token = "0x6000E0B")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000E0C")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x20002DC")]
			private class RightObserver : IObserver<TRight>
			{
				[Token(Token = "0x4000769")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ZipLatest parent;

				[Token(Token = "0x6000E0D")]
				public RightObserver(ZipLatest parent)
				{
				}

				[Token(Token = "0x6000E0E")]
				public void OnNext(TRight value)
				{
				}

				[Token(Token = "0x6000E0F")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000E10")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x4000760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<TLeft, TRight, TResult> parent;

			[Token(Token = "0x4000761")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000762")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TLeft leftValue;

			[Token(Token = "0x4000763")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool leftStarted;

			[Token(Token = "0x4000764")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool leftCompleted;

			[Token(Token = "0x4000765")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TRight rightValue;

			[Token(Token = "0x4000766")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool rightStarted;

			[Token(Token = "0x4000767")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool rightCompleted;

			[Token(Token = "0x6000E03")]
			public ZipLatest(ZipLatestObservable<TLeft, TRight, TResult> parent, IObserver<TResult> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E04")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E05")]
			public void Publish()
			{
			}

			[Token(Token = "0x6000E06")]
			public override void OnNext(TResult value)
			{
			}

			[Token(Token = "0x6000E07")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E08")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TLeft> left;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<TRight> right;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TLeft, TRight, TResult> selector;

		[Token(Token = "0x6000E01")]
		public ZipLatestObservable(IObservable<TLeft> left, IObservable<TRight> right, Func<TLeft, TRight, TResult> selector)
		{
		}

		[Token(Token = "0x6000E02")]
		protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DD")]
	internal class ZipLatestObservable<T> : OperatorObservableBase<IList<T>>
	{
		[Token(Token = "0x20002DE")]
		private class ZipLatest : OperatorObserverBase<IList<T>, IList<T>>
		{
			[Token(Token = "0x20002DF")]
			private class ZipLatestObserver : IObserver<T>
			{
				[Token(Token = "0x4000771")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ZipLatest parent;

				[Token(Token = "0x4000772")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int index;

				[Token(Token = "0x6000E19")]
				public ZipLatestObserver(ZipLatest parent, int index)
				{
				}

				[Token(Token = "0x6000E1A")]
				public void OnNext(T value)
				{
				}

				[Token(Token = "0x6000E1B")]
				public void OnError(Exception ex)
				{
				}

				[Token(Token = "0x6000E1C")]
				public void OnCompleted()
				{
				}
			}

			[Token(Token = "0x400076B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T> parent;

			[Token(Token = "0x400076C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400076D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int length;

			[Token(Token = "0x400076E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] values;

			[Token(Token = "0x400076F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool[] isStarted;

			[Token(Token = "0x4000770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool[] isCompleted;

			[Token(Token = "0x6000E13")]
			public ZipLatest(ZipLatestObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E14")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E15")]
			private void Publish(int index)
			{
			}

			[Token(Token = "0x6000E16")]
			public override void OnNext(IList<T> value)
			{
			}

			[Token(Token = "0x6000E17")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E18")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T>[] sources;

		[Token(Token = "0x6000E11")]
		public ZipLatestObservable(IObservable<T>[] sources)
		{
		}

		[Token(Token = "0x6000E12")]
		protected override IDisposable SubscribeCore(IObserver<IList<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E0")]
	internal class ZipLatestObservable<T1, T2, T3, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002E1")]
		private class ZipLatest : NthZipLatestObserverBase<TR>
		{
			[Token(Token = "0x4000777")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T1, T2, T3, TR> parent;

			[Token(Token = "0x4000778")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T1> c1;

			[Token(Token = "0x400077A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T2> c2;

			[Token(Token = "0x400077B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T3> c3;

			[Token(Token = "0x6000E1F")]
			public ZipLatest(int length, ZipLatestObservable<T1, T2, T3, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E20")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E21")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000E22")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000E23")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E24")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipLatestFunc<T1, T2, T3, TR> resultSelector;

		[Token(Token = "0x6000E1D")]
		public ZipLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, ZipLatestFunc<T1, T2, T3, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000E1E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E2")]
	internal class ZipLatestObservable<T1, T2, T3, T4, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002E3")]
		private class ZipLatest : NthZipLatestObserverBase<TR>
		{
			[Token(Token = "0x4000781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T1, T2, T3, T4, TR> parent;

			[Token(Token = "0x4000782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T1> c1;

			[Token(Token = "0x4000784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T2> c2;

			[Token(Token = "0x4000785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T3> c3;

			[Token(Token = "0x4000786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T4> c4;

			[Token(Token = "0x6000E27")]
			public ZipLatest(int length, ZipLatestObservable<T1, T2, T3, T4, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E28")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E29")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000E2A")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000E2B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E2C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipLatestFunc<T1, T2, T3, T4, TR> resultSelector;

		[Token(Token = "0x6000E25")]
		public ZipLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, ZipLatestFunc<T1, T2, T3, T4, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000E26")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E4")]
	internal class ZipLatestObservable<T1, T2, T3, T4, T5, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002E5")]
		private class ZipLatest : NthZipLatestObserverBase<TR>
		{
			[Token(Token = "0x400078D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T1, T2, T3, T4, T5, TR> parent;

			[Token(Token = "0x400078E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400078F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T1> c1;

			[Token(Token = "0x4000790")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T2> c2;

			[Token(Token = "0x4000791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T3> c3;

			[Token(Token = "0x4000792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T4> c4;

			[Token(Token = "0x4000793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T5> c5;

			[Token(Token = "0x6000E2F")]
			public ZipLatest(int length, ZipLatestObservable<T1, T2, T3, T4, T5, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E30")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E31")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000E32")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000E33")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E34")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector;

		[Token(Token = "0x6000E2D")]
		public ZipLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, ZipLatestFunc<T1, T2, T3, T4, T5, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000E2E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E6")]
	internal class ZipLatestObservable<T1, T2, T3, T4, T5, T6, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002E7")]
		private class ZipLatest : NthZipLatestObserverBase<TR>
		{
			[Token(Token = "0x400079B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T1, T2, T3, T4, T5, T6, TR> parent;

			[Token(Token = "0x400079C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400079D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T1> c1;

			[Token(Token = "0x400079E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T2> c2;

			[Token(Token = "0x400079F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T3> c3;

			[Token(Token = "0x40007A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T4> c4;

			[Token(Token = "0x40007A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T5> c5;

			[Token(Token = "0x40007A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T6> c6;

			[Token(Token = "0x6000E37")]
			public ZipLatest(int length, ZipLatestObservable<T1, T2, T3, T4, T5, T6, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E38")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E39")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000E3A")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000E3B")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E3C")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector;

		[Token(Token = "0x6000E35")]
		public ZipLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, ZipLatestFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000E36")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E8")]
	internal class ZipLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> : OperatorObservableBase<TR>
	{
		[Token(Token = "0x20002E9")]
		private class ZipLatest : NthZipLatestObserverBase<TR>
		{
			[Token(Token = "0x40007AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ZipLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent;

			[Token(Token = "0x40007AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40007AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T1> c1;

			[Token(Token = "0x40007AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T2> c2;

			[Token(Token = "0x40007AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T3> c3;

			[Token(Token = "0x40007B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T4> c4;

			[Token(Token = "0x40007B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T5> c5;

			[Token(Token = "0x40007B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T6> c6;

			[Token(Token = "0x40007B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ZipLatestObserver<T7> c7;

			[Token(Token = "0x6000E3F")]
			public ZipLatest(int length, ZipLatestObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent, IObserver<TR> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E40")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E41")]
			public override TR GetResult()
			{
				return (TR)null;
			}

			[Token(Token = "0x6000E42")]
			public override void OnNext(TR value)
			{
			}

			[Token(Token = "0x6000E43")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E44")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T1> source1;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T2> source2;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T3> source3;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T4> source4;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T5> source5;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T6> source6;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IObservable<T7> source7;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ZipLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector;

		[Token(Token = "0x6000E3D")]
		public ZipLatestObservable(IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, ZipLatestFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
		{
		}

		[Token(Token = "0x6000E3E")]
		protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002EA")]
	internal interface IZipLatestObservable
	{
		[Token(Token = "0x6000E45")]
		void Publish(int index);

		[Token(Token = "0x6000E46")]
		void Fail(Exception error);

		[Token(Token = "0x6000E47")]
		void Done(int index);
	}
	[Token(Token = "0x20002EB")]
	internal abstract class NthZipLatestObserverBase<T> : OperatorObserverBase<T, T>, IZipLatestObservable
	{
		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int length;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool[] isStarted;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool[] isCompleted;

		[Token(Token = "0x6000E48")]
		public NthZipLatestObserverBase(int length, IObserver<T> observer, IDisposable cancel)
		{
		}

		[Token(Token = "0x6000E49")]
		public abstract T GetResult();

		[Token(Token = "0x6000E4A")]
		public void Publish(int index)
		{
		}

		[Token(Token = "0x6000E4B")]
		public void Done(int index)
		{
		}

		[Token(Token = "0x6000E4C")]
		public void Fail(Exception error)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	internal class ZipLatestObserver<T> : IObserver<T>
	{
		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object gate;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IZipLatestObservable parent;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int index;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x1700011C")]
		public T Value
		{
			[Token(Token = "0x6000E4D")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000E4E")]
		public ZipLatestObserver(object gate, IZipLatestObservable parent, int index)
		{
		}

		[Token(Token = "0x6000E4F")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000E50")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000E51")]
		public void OnCompleted()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	internal class BatchFrameObservable<T> : OperatorObservableBase<IList<T>>
	{
		[Token(Token = "0x20002EE")]
		private class BatchFrame : OperatorObserverBase<T, IList<T>>
		{
			[Token(Token = "0x20002EF")]
			private class ReusableEnumerator : IEnumerator
			{
				[Token(Token = "0x40007C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly BatchFrame parent;

				[Token(Token = "0x40007C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int currentFrame;

				[Token(Token = "0x1700011D")]
				public object Current
				{
					[Token(Token = "0x6000E5A")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000E59")]
				public ReusableEnumerator(BatchFrame parent)
				{
				}

				[Token(Token = "0x6000E5B")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000E5C")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BatchFrameObservable<T> parent;

			[Token(Token = "0x40007BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40007C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BooleanDisposable cancellationToken;

			[Token(Token = "0x40007C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEnumerator timer;

			[Token(Token = "0x40007C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isRunning;

			[Token(Token = "0x40007C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isCompleted;

			[Token(Token = "0x40007C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<T> list;

			[Token(Token = "0x6000E54")]
			public BatchFrame(BatchFrameObservable<T> parent, IObserver<IList<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E55")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E56")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E57")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E58")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000E52")]
		public BatchFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000E53")]
		protected override IDisposable SubscribeCore(IObserver<IList<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F0")]
	internal class BatchFrameObservable : OperatorObservableBase<Unit>
	{
		[Token(Token = "0x20002F1")]
		private class BatchFrame : OperatorObserverBase<Unit, Unit>
		{
			[Token(Token = "0x20002F2")]
			private class ReusableEnumerator : IEnumerator
			{
				[Token(Token = "0x40007D0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly BatchFrame parent;

				[Token(Token = "0x40007D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private int currentFrame;

				[Token(Token = "0x1700011E")]
				public object Current
				{
					[Token(Token = "0x6000E65")]
					[Address(RVA = "0x1FCF810", Offset = "0x1FCF810", VA = "0x1FCF810", Slot = "5")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000E64")]
				[Address(RVA = "0x1FCF7E4", Offset = "0x1FCF7E4", VA = "0x1FCF7E4")]
				public ReusableEnumerator(BatchFrame parent)
				{
				}

				[Token(Token = "0x6000E66")]
				[Address(RVA = "0x1FCF818", Offset = "0x1FCF818", VA = "0x1FCF818", Slot = "4")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000E67")]
				[Address(RVA = "0x1FCFA94", Offset = "0x1FCFA94", VA = "0x1FCFA94", Slot = "6")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40007CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly BatchFrameObservable parent;

			[Token(Token = "0x40007CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly object gate;

			[Token(Token = "0x40007CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly BooleanDisposable cancellationToken;

			[Token(Token = "0x40007CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly IEnumerator timer;

			[Token(Token = "0x40007CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool isRunning;

			[Token(Token = "0x40007CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			private bool isCompleted;

			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x10BDC44", Offset = "0x10BDC44", VA = "0x10BDC44")]
			public BatchFrame(BatchFrameObservable parent, IObserver<Unit> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x10BDD44", Offset = "0x10BDD44", VA = "0x10BDD44")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x10BDE08", Offset = "0x10BDE08", VA = "0x10BDE08", Slot = "8")]
			public override void OnNext(Unit value)
			{
			}

			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x10BE04C", Offset = "0x10BE04C", VA = "0x10BE04C", Slot = "9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x10BE180", Offset = "0x10BE180", VA = "0x10BE180", Slot = "10")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IObservable<Unit> source;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int frameCount;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x118BFDC", Offset = "0x118BFDC", VA = "0x118BFDC")]
		public BatchFrameObservable(IObservable<Unit> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x118C074", Offset = "0x118C074", VA = "0x118C074", Slot = "6")]
		protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F3")]
	internal class DelayFrameObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20002F4")]
		private class DelayFrame : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x20002F5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F4C", Offset = "0x8B0F4C")]
			private sealed class <DrainQueue>d__14 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40007E1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int <>1__state;

				[Token(Token = "0x40007E2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private object <>2__current;

				[Token(Token = "0x40007E3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public DelayFrame <>4__this;

				[Token(Token = "0x40007E4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int frameCount;

				[Token(Token = "0x40007E5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Queue<T> q;

				[Token(Token = "0x1700011F")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000E73")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000120")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000E75")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000E70")]
				[DebuggerHidden]
				public <DrainQueue>d__14(int <>1__state)
				{
				}

				[Token(Token = "0x6000E71")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000E72")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000E74")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x40007D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly DelayFrameObservable<T> parent;

			[Token(Token = "0x40007D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40007D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly QueuePool pool;

			[Token(Token = "0x40007D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int runningEnumeratorCount;

			[Token(Token = "0x40007D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool readyDrainEnumerator;

			[Token(Token = "0x40007DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool running;

			[Token(Token = "0x40007DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IDisposable sourceSubscription;

			[Token(Token = "0x40007DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Queue<T> currentQueueReference;

			[Token(Token = "0x40007DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool calledCompleted;

			[Token(Token = "0x40007DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasError;

			[Token(Token = "0x40007DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Exception error;

			[Token(Token = "0x40007E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private BooleanDisposable cancelationToken;

			[Token(Token = "0x6000E6A")]
			public DelayFrame(DelayFrameObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E6B")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E6C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B92F4", Offset = "0x8B92F4")]
			private IEnumerator DrainQueue(Queue<T> q, int frameCount)
			{
				return null;
			}

			[Token(Token = "0x6000E6D")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E6E")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E6F")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x20002F6")]
		private class QueuePool
		{
			[Token(Token = "0x40007E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40007E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Queue<Queue<T>> pool;

			[Token(Token = "0x6000E76")]
			public Queue<T> Get()
			{
				return null;
			}

			[Token(Token = "0x6000E77")]
			public void Return(Queue<T> q)
			{
			}

			[Token(Token = "0x6000E78")]
			public QueuePool()
			{
			}
		}

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000E68")]
		public DelayFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000E69")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F7")]
	internal class DelayFrameSubscriptionObservable<T> : OperatorObservableBase<T>
	{
		[Serializable]
		[Token(Token = "0x20002F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F5C", Offset = "0x8B0F5C")]
		private sealed class <>c
		{
			[Token(Token = "0x40007EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40007EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<long, IObserver<T>, MultipleAssignmentDisposable, IObservable<T>> <>9__4_0;

			[Token(Token = "0x6000E7C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000E7D")]
			internal void <SubscribeCore>b__4_0(long _, IObserver<T> o, MultipleAssignmentDisposable disp, IObservable<T> s)
			{
			}
		}

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000E79")]
		public DelayFrameSubscriptionObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000E7A")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F9")]
	internal class FrameIntervalObservable<T> : OperatorObservableBase<FrameInterval<T>>
	{
		[Token(Token = "0x20002FA")]
		private class FrameInterval : OperatorObserverBase<T, FrameInterval<T>>
		{
			[Token(Token = "0x40007EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int lastFrame;

			[Token(Token = "0x6000E80")]
			public FrameInterval(IObserver<FrameInterval<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E81")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E82")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E83")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x6000E7E")]
		public FrameIntervalObservable(IObservable<T> source)
		{
		}

		[Token(Token = "0x6000E7F")]
		protected override IDisposable SubscribeCore(IObserver<FrameInterval<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FB")]
	internal class FrameTimeIntervalObservable<T> : OperatorObservableBase<TimeInterval<T>>
	{
		[Token(Token = "0x20002FC")]
		private class FrameTimeInterval : OperatorObserverBase<T, TimeInterval<T>>
		{
			[Token(Token = "0x40007F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly FrameTimeIntervalObservable<T> parent;

			[Token(Token = "0x40007F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float lastTime;

			[Token(Token = "0x6000E86")]
			public FrameTimeInterval(FrameTimeIntervalObservable<T> parent, IObserver<TimeInterval<T>> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E87")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E88")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E89")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool ignoreTimeScale;

		[Token(Token = "0x6000E84")]
		public FrameTimeIntervalObservable(IObservable<T> source, bool ignoreTimeScale)
		{
		}

		[Token(Token = "0x6000E85")]
		protected override IDisposable SubscribeCore(IObserver<TimeInterval<T>> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FD")]
	internal class FromCoroutineObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x20002FE")]
		private class FromCoroutine : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000E8C")]
			public FromCoroutine(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E8D")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E8E")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E8F")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<IObserver<T>, CancellationToken, IEnumerator> coroutine;

		[Token(Token = "0x6000E8A")]
		public FromCoroutineObservable(Func<IObserver<T>, CancellationToken, IEnumerator> coroutine)
		{
		}

		[Token(Token = "0x6000E8B")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FF")]
	internal class FromMicroCoroutineObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000300")]
		private class FromMicroCoroutine : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x6000E92")]
			public FromMicroCoroutine(IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E93")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E94")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E95")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<IObserver<T>, CancellationToken, IEnumerator> coroutine;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000E90")]
		public FromMicroCoroutineObservable(Func<IObserver<T>, CancellationToken, IEnumerator> coroutine, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000E91")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000301")]
	internal class RepeatUntilObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000302")]
		private class RepeatUntil : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000303")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F6C", Offset = "0x8B0F6C")]
			private sealed class <SubscribeAfterEndOfFrame>d__13 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4000803")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private int <>1__state;

				[Token(Token = "0x4000804")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private object <>2__current;

				[Token(Token = "0x4000805")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public SingleAssignmentDisposable d;

				[Token(Token = "0x4000806")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public GameObject lifeTimeChecker;

				[Token(Token = "0x4000807")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IObservable<T> source;

				[Token(Token = "0x4000808")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public IObserver<T> observer;

				[Token(Token = "0x17000121")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6000EA4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000122")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6000EA6")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6000EA1")]
				[DebuggerHidden]
				public <SubscribeAfterEndOfFrame>d__13(int <>1__state)
				{
				}

				[Token(Token = "0x6000EA2")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6000EA3")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6000EA5")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x40007F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly RepeatUntilObservable<T> parent;

			[Token(Token = "0x40007FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x40007FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<IObservable<T>> e;

			[Token(Token = "0x40007FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable subscription;

			[Token(Token = "0x40007FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable schedule;

			[Token(Token = "0x40007FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action nextSelf;

			[Token(Token = "0x40007FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStopped;

			[Token(Token = "0x4000800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isDisposed;

			[Token(Token = "0x4000801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirstSubscribe;

			[Token(Token = "0x4000802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IDisposable stopper;

			[Token(Token = "0x6000E98")]
			public RepeatUntil(RepeatUntilObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000E99")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000E9A")]
			private void RecursiveRun(Action self)
			{
			}

			[Token(Token = "0x6000E9B")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8B93A4", Offset = "0x8B93A4")]
			private static IEnumerator SubscribeAfterEndOfFrame(SingleAssignmentDisposable d, IObservable<T> source, IObserver<T> observer, GameObject lifeTimeChecker)
			{
				return null;
			}

			[Token(Token = "0x6000E9C")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000E9D")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000E9E")]
			public override void OnCompleted()
			{
			}

			[Token(Token = "0x6000E9F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9404", Offset = "0x8B9404")]
			private void <Run>b__11_0(Unit _)
			{
			}

			[Token(Token = "0x6000EA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B9414", Offset = "0x8B9414")]
			private void <Run>b__11_1()
			{
			}
		}

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerable<IObservable<T>> sources;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<Unit> trigger;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly GameObject lifeTimeChecker;

		[Token(Token = "0x6000E96")]
		public RepeatUntilObservable(IEnumerable<IObservable<T>> sources, IObservable<Unit> trigger, GameObject lifeTimeChecker)
		{
		}

		[Token(Token = "0x6000E97")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000304")]
	internal class SampleFrameObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000305")]
		private class SampleFrame : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000306")]
			private class SampleFrameTick : IObserver<long>
			{
				[Token(Token = "0x4000812")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly SampleFrame parent;

				[Token(Token = "0x6000EAF")]
				public SampleFrameTick(SampleFrame parent)
				{
				}

				[Token(Token = "0x6000EB0")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000EB1")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000EB2")]
				public void OnNext(long _)
				{
				}
			}

			[Token(Token = "0x400080C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SampleFrameObservable<T> parent;

			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x400080F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isUpdated;

			[Token(Token = "0x4000810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isCompleted;

			[Token(Token = "0x4000811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x6000EA9")]
			public SampleFrame(SampleFrameObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000EAA")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000EAB")]
			private void OnNextTick(long _)
			{
			}

			[Token(Token = "0x6000EAC")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000EAD")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000EAE")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000EA7")]
		public SampleFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000EA8")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000307")]
	internal class SubscribeOnMainThreadObservable<T> : OperatorObservableBase<T>
	{
		[Serializable]
		[Token(Token = "0x2000308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0F7C", Offset = "0x8B0F7C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<long, IObserver<T>, SerialDisposable, IObservable<T>> <>9__3_0;

			[Token(Token = "0x6000EB6")]
			public <>c()
			{
			}

			[Token(Token = "0x6000EB7")]
			internal void <SubscribeCore>b__3_0(long _, IObserver<T> o, SerialDisposable disp, IObservable<T> s)
			{
			}
		}

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<long> subscribeTrigger;

		[Token(Token = "0x6000EB3")]
		public SubscribeOnMainThreadObservable(IObservable<T> source, IObservable<long> subscribeTrigger)
		{
		}

		[Token(Token = "0x6000EB4")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000309")]
	internal class ThrottleFirstFrameObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200030A")]
		private class ThrottleFirstFrame : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200030B")]
			private class ThrottleFirstFrameTick : IObserver<long>
			{
				[Token(Token = "0x400081F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ThrottleFirstFrame parent;

				[Token(Token = "0x6000EC0")]
				public ThrottleFirstFrameTick(ThrottleFirstFrame parent)
				{
				}

				[Token(Token = "0x6000EC1")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000EC2")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000EC3")]
				public void OnNext(long _)
				{
				}
			}

			[Token(Token = "0x400081A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ThrottleFirstFrameObservable<T> parent;

			[Token(Token = "0x400081B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x400081C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool open;

			[Token(Token = "0x400081D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable cancelable;

			[Token(Token = "0x400081E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ThrottleFirstFrameTick tick;

			[Token(Token = "0x6000EBA")]
			public ThrottleFirstFrame(ThrottleFirstFrameObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000EBB")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000EBC")]
			private void OnNext()
			{
			}

			[Token(Token = "0x6000EBD")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000EBE")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000EBF")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000EB8")]
		public ThrottleFirstFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000EB9")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200030C")]
	internal class ThrottleFrameObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x200030D")]
		private class ThrottleFrame : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x200030E")]
			private class ThrottleFrameTick : IObserver<long>
			{
				[Token(Token = "0x4000829")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ThrottleFrame parent;

				[Token(Token = "0x400082A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ulong currentid;

				[Token(Token = "0x6000ECB")]
				public ThrottleFrameTick(ThrottleFrame parent, ulong currentid)
				{
				}

				[Token(Token = "0x6000ECC")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000ECD")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000ECE")]
				public void OnNext(long _)
				{
				}
			}

			[Token(Token = "0x4000823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ThrottleFrameObservable<T> parent;

			[Token(Token = "0x4000824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x4000826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool hasValue;

			[Token(Token = "0x4000827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable cancelable;

			[Token(Token = "0x4000828")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong id;

			[Token(Token = "0x6000EC6")]
			public ThrottleFrame(ThrottleFrameObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000EC7")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000EC8")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000EC9")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000ECA")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000EC4")]
		public ThrottleFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000EC5")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
	[Token(Token = "0x200030F")]
	internal class TimeoutFrameObservable<T> : OperatorObservableBase<T>
	{
		[Token(Token = "0x2000310")]
		private class TimeoutFrame : OperatorObserverBase<T, T>
		{
			[Token(Token = "0x2000311")]
			private class TimeoutFrameTick : IObserver<long>
			{
				[Token(Token = "0x4000834")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly TimeoutFrame parent;

				[Token(Token = "0x4000835")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly ulong timerId;

				[Token(Token = "0x6000ED7")]
				public TimeoutFrameTick(TimeoutFrame parent, ulong timerId)
				{
				}

				[Token(Token = "0x6000ED8")]
				public void OnCompleted()
				{
				}

				[Token(Token = "0x6000ED9")]
				public void OnError(Exception error)
				{
				}

				[Token(Token = "0x6000EDA")]
				public void OnNext(long _)
				{
				}
			}

			[Token(Token = "0x400082E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TimeoutFrameObservable<T> parent;

			[Token(Token = "0x400082F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly object gate;

			[Token(Token = "0x4000830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong objectId;

			[Token(Token = "0x4000831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isTimeout;

			[Token(Token = "0x4000832")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SingleAssignmentDisposable sourceSubscription;

			[Token(Token = "0x4000833")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SerialDisposable timerSubscription;

			[Token(Token = "0x6000ED1")]
			public TimeoutFrame(TimeoutFrameObservable<T> parent, IObserver<T> observer, IDisposable cancel)
			{
			}

			[Token(Token = "0x6000ED2")]
			public IDisposable Run()
			{
				return null;
			}

			[Token(Token = "0x6000ED3")]
			private IDisposable RunTimer(ulong timerId)
			{
				return null;
			}

			[Token(Token = "0x6000ED4")]
			public override void OnNext(T value)
			{
			}

			[Token(Token = "0x6000ED5")]
			public override void OnError(Exception error)
			{
			}

			[Token(Token = "0x6000ED6")]
			public override void OnCompleted()
			{
			}
		}

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IObservable<T> source;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int frameCount;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly FrameCountType frameCountType;

		[Token(Token = "0x6000ECF")]
		public TimeoutFrameObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)
		{
		}

		[Token(Token = "0x6000ED0")]
		protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)
		{
			return null;
		}
	}
}
namespace UniRx.InternalUtil
{
	[Token(Token = "0x2000312")]
	internal sealed class AsyncLock : IDisposable
	{
		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Queue<Action> queue;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isAcquired;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool hasFaulted;

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x117FCA8", Offset = "0x117FCA8", VA = "0x117FCA8")]
		public void Wait(Action action)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x11800D4", Offset = "0x11800D4", VA = "0x11800D4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x11801D4", Offset = "0x11801D4", VA = "0x11801D4")]
		public AsyncLock()
		{
		}
	}
	[Token(Token = "0x2000313")]
	internal static class ExceptionExtensions
	{
		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x16932C0", Offset = "0x16932C0", VA = "0x16932C0")]
		public static void Throw(this Exception exception)
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class ImmutableList<T>
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ImmutableList<T> Empty;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] data;

		[Token(Token = "0x17000123")]
		public T[] Data
		{
			[Token(Token = "0x6000EDF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE0")]
		private ImmutableList()
		{
		}

		[Token(Token = "0x6000EE1")]
		public ImmutableList(T[] data)
		{
		}

		[Token(Token = "0x6000EE2")]
		public ImmutableList<T> Add(T value)
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		public ImmutableList<T> Remove(T value)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		public int IndexOf(T value)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000315")]
	public class ListObserver<T> : IObserver<T>
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ImmutableList<IObserver<T>> _observers;

		[Token(Token = "0x6000EE6")]
		public ListObserver(ImmutableList<IObserver<T>> observers)
		{
		}

		[Token(Token = "0x6000EE7")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000EE8")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000EE9")]
		public void OnNext(T value)
		{
		}

		[Token(Token = "0x6000EEA")]
		internal IObserver<T> Add(IObserver<T> observer)
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		internal IObserver<T> Remove(IObserver<T> observer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000316")]
	public class EmptyObserver<T> : IObserver<T>
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly EmptyObserver<T> Instance;

		[Token(Token = "0x6000EEC")]
		private EmptyObserver()
		{
		}

		[Token(Token = "0x6000EED")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000EEE")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000EEF")]
		public void OnNext(T value)
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class ThrowObserver<T> : IObserver<T>
	{
		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ThrowObserver<T> Instance;

		[Token(Token = "0x6000EF1")]
		private ThrowObserver()
		{
		}

		[Token(Token = "0x6000EF2")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000EF3")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000EF4")]
		public void OnNext(T value)
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class DisposedObserver<T> : IObserver<T>
	{
		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DisposedObserver<T> Instance;

		[Token(Token = "0x6000EF6")]
		private DisposedObserver()
		{
		}

		[Token(Token = "0x6000EF7")]
		public void OnCompleted()
		{
		}

		[Token(Token = "0x6000EF8")]
		public void OnError(Exception error)
		{
		}

		[Token(Token = "0x6000EF9")]
		public void OnNext(T value)
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class MicroCoroutine
	{
		[Token(Token = "0x400083F")]
		private const int InitialSize = 16;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object runningAndQueueLock;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly object arrayLock;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Action<Exception> unhandledExceptionCallback;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int tail;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool running;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IEnumerator[] coroutines;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Queue<IEnumerator> waitQueue;

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x17563A4", Offset = "0x17563A4", VA = "0x17563A4")]
		public MicroCoroutine(Action<Exception> unhandledExceptionCallback)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x1756498", Offset = "0x1756498", VA = "0x1756498")]
		public void AddCoroutine(IEnumerator enumerator)
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x1756750", Offset = "0x1756750", VA = "0x1756750")]
		public void Run()
		{
		}
	}
	[Token(Token = "0x200031A")]
	internal class PriorityQueue<T> where T : IComparable<T>
	{
		[Token(Token = "0x200031B")]
		private struct IndexedItem : IComparable<IndexedItem>
		{
			[Token(Token = "0x400084A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T Value;

			[Token(Token = "0x400084B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long Id;

			[Token(Token = "0x6000F0B")]
			public int CompareTo(IndexedItem other)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static long _count;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IndexedItem[] _items;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x17000124")]
		public int Count
		{
			[Token(Token = "0x6000F04")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EFE")]
		public PriorityQueue()
		{
		}

		[Token(Token = "0x6000EFF")]
		public PriorityQueue(int capacity)
		{
		}

		[Token(Token = "0x6000F00")]
		private bool IsHigherPriority(int left, int right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F01")]
		private void Percolate(int index)
		{
		}

		[Token(Token = "0x6000F02")]
		private void Heapify()
		{
		}

		[Token(Token = "0x6000F03")]
		private void Heapify(int index)
		{
		}

		[Token(Token = "0x6000F05")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x6000F06")]
		private void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000F07")]
		public T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000F08")]
		public void Enqueue(T item)
		{
		}

		[Token(Token = "0x6000F09")]
		public bool Remove(T item)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200031C")]
	internal class ScheduledItem : IComparable<ScheduledItem>
	{
		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BooleanDisposable _disposable;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TimeSpan _dueTime;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Action _action;

		[Token(Token = "0x17000125")]
		public TimeSpan DueTime
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x12CAA3C", Offset = "0x12CAA3C", VA = "0x12CAA3C")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000126")]
		public IDisposable Cancellation
		{
			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x12CAC24", Offset = "0x12CAC24", VA = "0x12CAC24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		public bool IsCanceled
		{
			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x12CAC2C", Offset = "0x12CAC2C", VA = "0x12CAC2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x12CA9C0", Offset = "0x12CA9C0", VA = "0x12CA9C0")]
		public ScheduledItem(Action action, TimeSpan dueTime)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x12CAA44", Offset = "0x12CAA44", VA = "0x12CAA44")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x12CAA7C", Offset = "0x12CAA7C", VA = "0x12CAA7C", Slot = "4")]
		public int CompareTo(ScheduledItem other)
		{
			return default(int);
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x12CAABC", Offset = "0x12CAABC", VA = "0x12CAABC")]
		public static bool operator <(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x12CAB08", Offset = "0x12CAB08", VA = "0x12CAB08")]
		public static bool operator <=(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x12CAB58", Offset = "0x12CAB58", VA = "0x12CAB58")]
		public static bool operator >(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x12CABA8", Offset = "0x12CABA8", VA = "0x12CABA8")]
		public static bool operator >=(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x12CABF8", Offset = "0x12CABF8", VA = "0x12CABF8")]
		public static bool operator ==(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x12CAC04", Offset = "0x12CAC04", VA = "0x12CAC04")]
		public static bool operator !=(ScheduledItem left, ScheduledItem right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x12CAC10", Offset = "0x12CAC10", VA = "0x12CAC10", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x12CAC1C", Offset = "0x12CAC1C", VA = "0x12CAC1C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200031D")]
	internal class SchedulerQueue
	{
		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PriorityQueue<ScheduledItem> _queue;

		[Token(Token = "0x17000128")]
		public int Count
		{
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0x12CB840", Offset = "0x12CB840", VA = "0x12CB840")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x12CB760", Offset = "0x12CB760", VA = "0x12CB760")]
		public SchedulerQueue()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x12CB768", Offset = "0x12CB768", VA = "0x12CB768")]
		public SchedulerQueue(int capacity)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x12CB88C", Offset = "0x12CB88C", VA = "0x12CB88C")]
		public void Enqueue(ScheduledItem scheduledItem)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x12CB8F0", Offset = "0x12CB8F0", VA = "0x12CB8F0")]
		public bool Remove(ScheduledItem scheduledItem)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x12CB954", Offset = "0x12CB954", VA = "0x12CB954")]
		public ScheduledItem Dequeue()
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x12CB9A8", Offset = "0x12CB9A8", VA = "0x12CB9A8")]
		public ScheduledItem Peek()
		{
			return null;
		}
	}
	[Token(Token = "0x200031E")]
	public class ThreadSafeQueueWorker
	{
		[Token(Token = "0x4000850")]
		private const int MaxArrayLength = 2146435071;

		[Token(Token = "0x4000851")]
		private const int InitialSize = 16;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object gate;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool dequing;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int actionListCount;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<object>[] actionList;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object[] actionStates;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int waitingListCount;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<object>[] waitingList;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private object[] waitingStates;

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x14DCF28", Offset = "0x14DCF28", VA = "0x14DCF28")]
		public void Enqueue(Action<object> action, object state)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x14DD2E0", Offset = "0x14DD2E0", VA = "0x14DD2E0")]
		public void ExecuteAll(Action<Exception> unhandledExceptionCallback)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x14DD728", Offset = "0x14DD728", VA = "0x14DD728")]
		public ThreadSafeQueueWorker()
		{
		}
	}
}
namespace UniRx.Async
{
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x200031F")]
	public struct AsyncUnit : IEquatable<AsyncUnit>
	{
		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AsyncUnit Default;

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x1184754", Offset = "0x1184754", VA = "0x1184754", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x118475C", Offset = "0x118475C", VA = "0x118475C", Slot = "4")]
		public bool Equals(AsyncUnit other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x1184764", Offset = "0x1184764", VA = "0x1184764", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000320")]
	public class CancellationTokenEqualityComparer : IEqualityComparer<CancellationToken>
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IEqualityComparer<CancellationToken> Default;

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x168B454", Offset = "0x168B454", VA = "0x168B454", Slot = "4")]
		public bool Equals(CancellationToken x, CancellationToken y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x168B484", Offset = "0x168B484", VA = "0x168B484", Slot = "5")]
		public int GetHashCode(CancellationToken obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x168B4AC", Offset = "0x168B4AC", VA = "0x168B4AC")]
		public CancellationTokenEqualityComparer()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public static class CancellationTokenExtensions
	{
		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> cancellationTokenCallback;

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x168B514", Offset = "0x168B514", VA = "0x168B514")]
		public static (UniTask, CancellationTokenRegistration) ToUniTask(this CancellationToken cts)
		{
			return default((UniTask, CancellationTokenRegistration));
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x168B87C", Offset = "0x168B87C", VA = "0x168B87C")]
		private static void Callback(object state)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x168B950", Offset = "0x168B950", VA = "0x168B950")]
		public static CancellationTokenRegistration RegisterWithoutCaptureExecutionContext(this CancellationToken cancellationToken, Action callback)
		{
			return default(CancellationTokenRegistration);
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x168B6EC", Offset = "0x168B6EC", VA = "0x168B6EC")]
		public static CancellationTokenRegistration RegisterWithoutCaptureExecutionContext(this CancellationToken cancellationToken, Action<object> callback, object state)
		{
			return default(CancellationTokenRegistration);
		}
	}
	[Token(Token = "0x2000322")]
	public static class CancellationTokenSourceExtensions
	{
		[StructLayout(3)]
		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0FBC", Offset = "0x8B0FBC")]
		private struct <CancelAfterCore>d__2 : IAsyncStateMachine
		{
			[Token(Token = "0x400085D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400085E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x400085F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UniTask delayTask;

			[Token(Token = "0x4000860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CancellationTokenSource cts;

			[Token(Token = "0x4000861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private UniTask<bool>.Awaiter <>u__1;

			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x10BE7E4", Offset = "0x10BE7E4", VA = "0x10BE7E4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x10BE9D8", Offset = "0x10BE9D8", VA = "0x10BE9D8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x168BCD0", Offset = "0x168BCD0", VA = "0x168BCD0")]
		public static void CancelAfterSlim(this CancellationTokenSource cts, int millisecondsDelay, bool ignoreTimeScale = false, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x168BE44", Offset = "0x168BE44", VA = "0x168BE44")]
		public static void CancelAfterSlim(this CancellationTokenSource cts, TimeSpan delayTimeSpan, bool ignoreTimeScale = false, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x168BD9C", Offset = "0x168BD9C", VA = "0x168BD9C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B94D4", Offset = "0x8B94D4")]
		private static UniTaskVoid CancelAfterCore(CancellationTokenSource cts, UniTask delayTask)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x168BF10", Offset = "0x168BF10", VA = "0x168BF10")]
		public static void RegisterRaiseCancelOnDestroy(this CancellationTokenSource cts, Component component)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x168BF48", Offset = "0x168BF48", VA = "0x168BF48")]
		public static void RegisterRaiseCancelOnDestroy(this CancellationTokenSource cts, GameObject gameObject)
		{
		}
	}
	[Token(Token = "0x2000324")]
	public static class DiagnosticsExtensions
	{
		[Serializable]
		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B0FDC", Offset = "0x8B0FDC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<ParameterInfo, string> <>9__4_0;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Type, string> <>9__7_0;

			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Type, string> <>9__7_1;

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x10BEA70", Offset = "0x10BEA70", VA = "0x10BEA70")]
			public <>c()
			{
			}

			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x10BEA78", Offset = "0x10BEA78", VA = "0x10BEA78")]
			internal string <CleanupAsyncStackTrace>b__4_0(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x10BEB3C", Offset = "0x10BEB3C", VA = "0x10BEB3C")]
			internal string <BeautifyType>b__7_0(Type x)
			{
				return null;
			}

			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x10BEBA4", Offset = "0x10BEBA4", VA = "0x10BEBA4")]
			internal string <BeautifyType>b__7_1(Type x)
			{
				return null;
			}
		}

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool displayFilenames;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Regex typeBeautifyRegex;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<Type, string> builtInTypeNames;

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x168FBE0", Offset = "0x168FBE0", VA = "0x168FBE0")]
		public static string ToStringWithCleanupAsyncStackTrace(this Exception exception)
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x168FEC4", Offset = "0x168FEC4", VA = "0x168FEC4")]
		public static string CleanupAsyncStackTrace(this StackTrace stackTrace)
		{
			return null;
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x1690810", Offset = "0x1690810", VA = "0x1690810")]
		private static bool IsAsync(MethodBase methodInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x16908C4", Offset = "0x16908C4", VA = "0x16908C4")]
		private static bool TryResolveStateMachineMethod(ref MethodBase method, out Type declaringType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x1690DBC", Offset = "0x1690DBC", VA = "0x1690DBC")]
		private static string BeautifyType(Type t, bool shortName)
		{
			return null;
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x16906E0", Offset = "0x16906E0", VA = "0x16906E0")]
		private static bool IgnoreLine(MethodBase methodInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x16912E8", Offset = "0x16912E8", VA = "0x16912E8")]
		private static string SimplifyPath(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x2000326")]
	public static class EnumerableAsyncExtensions
	{
		[Token(Token = "0x6000F45")]
		public static IEnumerable<UniTask> Select<T>(this IEnumerable<T> source, Func<T, UniTask> selector)
		{
			return null;
		}

		[Token(Token = "0x6000F46")]
		public static IEnumerable<UniTask<TR>> Select<T, TR>(this IEnumerable<T> source, Func<T, UniTask<TR>> selector)
		{
			return null;
		}

		[Token(Token = "0x6000F47")]
		public static IEnumerable<UniTask> Select<T>(this IEnumerable<T> source, Func<T, int, UniTask> selector)
		{
			return null;
		}

		[Token(Token = "0x6000F48")]
		public static IEnumerable<UniTask<TR>> Select<T, TR>(this IEnumerable<T> source, Func<T, int, UniTask<TR>> selector)
		{
			return null;
		}
	}
	[Token(Token = "0x2000327")]
	public static class EnumeratorAsyncExtensions
	{
		[Token(Token = "0x2000328")]
		private class EnumeratorAwaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IEnumerator innerEnumerator;

			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Action continuation;

			[Token(Token = "0x400086C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x400086D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x17000129")]
			public bool IsCompleted
			{
				[Token(Token = "0x6000F4D")]
				[Address(RVA = "0x10BEE84", Offset = "0x10BEE84", VA = "0x10BEE84", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700012A")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x6000F4E")]
				[Address(RVA = "0x10BEE94", Offset = "0x10BEE94", VA = "0x10BEE94", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0x10BEE24", Offset = "0x10BEE24", VA = "0x10BEE24")]
			public EnumeratorAwaiter(IEnumerator innerEnumerator, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x10BEE9C", Offset = "0x10BEE9C", VA = "0x10BEE9C", Slot = "6")]
			public void GetResult()
			{
			}

			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x10BEEE4", Offset = "0x10BEEE4", VA = "0x10BEEE4", Slot = "9")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F51")]
			[Address(RVA = "0x10BF05C", Offset = "0x10BF05C", VA = "0x10BF05C")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x6000F52")]
			[Address(RVA = "0x10BF0F8", Offset = "0x10BF0F8", VA = "0x10BF0F8", Slot = "8")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6000F53")]
			[Address(RVA = "0x10BF0FC", Offset = "0x10BF0FC", VA = "0x10BF0FC", Slot = "7")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1691F64", Offset = "0x1691F64", VA = "0x1691F64")]
		public static IAwaiter GetAwaiter(this IEnumerator enumerator)
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1692034", Offset = "0x1692034", VA = "0x1692034")]
		public static UniTask ToUniTask(this IEnumerator enumerator)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1692104", Offset = "0x1692104", VA = "0x1692104")]
		public static UniTask ConfigureAwait(this IEnumerator enumerator, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}
	}
	[Token(Token = "0x2000329")]
	public enum AwaiterStatus
	{
		[Token(Token = "0x400086F")]
		Pending,
		[Token(Token = "0x4000870")]
		Succeeded,
		[Token(Token = "0x4000871")]
		Faulted,
		[Token(Token = "0x4000872")]
		Canceled
	}
	[Token(Token = "0x200032A")]
	public interface IAwaiter : ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x1700012B")]
		AwaiterStatus Status
		{
			[Token(Token = "0x6000F54")]
			get;
		}

		[Token(Token = "0x1700012C")]
		bool IsCompleted
		{
			[Token(Token = "0x6000F55")]
			get;
		}

		[Token(Token = "0x6000F56")]
		void GetResult();
	}
	[Token(Token = "0x200032B")]
	public interface IAwaiter<out T> : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x6000F57")]
		new T GetResult();
	}
	[Token(Token = "0x200032C")]
	public static class AwaiterStatusExtensions
	{
		[MethodImpl(256)]
		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x118BCFC", Offset = "0x118BCFC", VA = "0x118BCFC")]
		public static bool IsCompleted(this AwaiterStatus status)
		{
			return default(bool);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x118BD08", Offset = "0x118BD08", VA = "0x118BD08")]
		public static bool IsCompletedSuccessfully(this AwaiterStatus status)
		{
			return default(bool);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x118BD14", Offset = "0x118BD14", VA = "0x118BD14")]
		public static bool IsCanceled(this AwaiterStatus status)
		{
			return default(bool);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x118BD20", Offset = "0x118BD20", VA = "0x118BD20")]
		public static bool IsFaulted(this AwaiterStatus status)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200032D")]
	public static class UniTaskLoopRunners
	{
		[StructLayout(0, Size = 1)]
		[Token(Token = "0x200032E")]
		public struct UniTaskLoopRunnerInitialization
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x200032F")]
		public struct UniTaskLoopRunnerEarlyUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000330")]
		public struct UniTaskLoopRunnerFixedUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000331")]
		public struct UniTaskLoopRunnerPreUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000332")]
		public struct UniTaskLoopRunnerUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000333")]
		public struct UniTaskLoopRunnerPreLateUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000334")]
		public struct UniTaskLoopRunnerPostLateUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000335")]
		public struct UniTaskLoopRunnerYieldInitialization
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000336")]
		public struct UniTaskLoopRunnerYieldEarlyUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000337")]
		public struct UniTaskLoopRunnerYieldFixedUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000338")]
		public struct UniTaskLoopRunnerYieldPreUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000339")]
		public struct UniTaskLoopRunnerYieldUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x200033A")]
		public struct UniTaskLoopRunnerYieldPreLateUpdate
		{
		}

		[StructLayout(0, Size = 1)]
		[Token(Token = "0x200033B")]
		public struct UniTaskLoopRunnerYieldPostLateUpdate
		{
		}
	}
	[Token(Token = "0x200033C")]
	public enum PlayerLoopTiming
	{
		[Token(Token = "0x4000874")]
		Initialization,
		[Token(Token = "0x4000875")]
		EarlyUpdate,
		[Token(Token = "0x4000876")]
		FixedUpdate,
		[Token(Token = "0x4000877")]
		PreUpdate,
		[Token(Token = "0x4000878")]
		Update,
		[Token(Token = "0x4000879")]
		PreLateUpdate,
		[Token(Token = "0x400087A")]
		PostLateUpdate
	}
	[Token(Token = "0x200033D")]
	public interface IPlayerLoopItem
	{
		[Token(Token = "0x6000F5C")]
		bool MoveNext();
	}
	[Token(Token = "0x200033E")]
	public static class PlayerLoopHelper
	{
		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int mainThreadId;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SynchronizationContext unitySynchronizationContetext;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ContinuationQueue[] yielders;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static PlayerLoopRunner[] runners;

		[Token(Token = "0x1700012D")]
		public static SynchronizationContext UnitySynchronizationContext
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x12C4608", Offset = "0x12C4608", VA = "0x12C4608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		public static int MainThreadId
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x12C4654", Offset = "0x12C4654", VA = "0x12C4654")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x12C46A0", Offset = "0x12C46A0", VA = "0x12C46A0")]
		private static PlayerLoopSystem[] InsertRunner(PlayerLoopSystem loopSystem, Type loopRunnerYieldType, ContinuationQueue cq, Type loopRunnerType, PlayerLoopRunner runner)
		{
			return null;
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x12C4830", Offset = "0x12C4830", VA = "0x12C4830")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x8B9634", Offset = "0x8B9634")]
		private static void Init()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x12C48F4", Offset = "0x12C48F4", VA = "0x12C48F4")]
		public static void Initialize(ref PlayerLoopSystem playerLoop)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x12C5494", Offset = "0x12C5494", VA = "0x12C5494")]
		public static void AddAction(PlayerLoopTiming timing, IPlayerLoopItem action)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x12C5864", Offset = "0x12C5864", VA = "0x12C5864")]
		public static void AddContinuation(PlayerLoopTiming timing, Action continuation)
		{
		}
	}
	[Token(Token = "0x200033F")]
	public static class Progress
	{
		[Token(Token = "0x2000340")]
		private sealed class NullProgress<T> : IProgress<T>
		{
			[Token(Token = "0x400087F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly IProgress<T> Instance;

			[Token(Token = "0x6000F66")]
			private NullProgress()
			{
			}

			[Token(Token = "0x6000F67")]
			public void Report(T value)
			{
			}
		}

		[Token(Token = "0x2000341")]
		private sealed class AnonymousProgress<T> : IProgress<T>
		{
			[Token(Token = "0x4000880")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> action;

			[Token(Token = "0x6000F69")]
			public AnonymousProgress(Action<T> action)
			{
			}

			[Token(Token = "0x6000F6A")]
			public void Report(T value)
			{
			}
		}

		[Token(Token = "0x2000342")]
		private sealed class OnlyValueChangedProgress<T> : IProgress<T>
		{
			[Token(Token = "0x4000881")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Action<T> action;

			[Token(Token = "0x4000882")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEqualityComparer<T> comparer;

			[Token(Token = "0x4000883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isFirstCall;

			[Token(Token = "0x4000884")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T latestValue;

			[Token(Token = "0x6000F6B")]
			public OnlyValueChangedProgress(Action<T> action, IEqualityComparer<T> comparer)
			{
			}

			[Token(Token = "0x6000F6C")]
			public void Report(T value)
			{
			}
		}

		[Token(Token = "0x6000F64")]
		public static IProgress<T> Create<T>(Action<T> handler)
		{
			return null;
		}

		[Token(Token = "0x6000F65")]
		public static IProgress<T> CreateOnlyValueChanged<T>(Action<T> handler, [Optional] IEqualityComparer<T> comparer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000343")]
	[AttributeAttribute(Name = "AsyncMethodBuilderAttribute", RVA = "0x8B101C", Offset = "0x8B101C")]
	public struct UniTask : IEquatable<UniTask>
	{
		[Token(Token = "0x2000344")]
		private class YieldPromise : PlayerLoopReusablePromiseBase
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0x1077E40", Offset = "0x1077E40", VA = "0x1077E40")]
			public YieldPromise(PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x1077E4C", Offset = "0x1077E4C", VA = "0x1077E4C", Slot = "15")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x1077E50", Offset = "0x1077E50", VA = "0x1077E50", Slot = "16")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000345")]
		private class DelayFramePromise : PlayerLoopReusablePromiseBase<int>
		{
			[Token(Token = "0x4000888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private readonly int delayFrameCount;

			[Token(Token = "0x4000889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int currentFrameCount;

			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x10770F0", Offset = "0x10770F0", VA = "0x10770F0")]
			public DelayFramePromise(int delayFrameCount, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x107716C", Offset = "0x107716C", VA = "0x107716C", Slot = "16")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x1077174", Offset = "0x1077174", VA = "0x1077174", Slot = "17")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000346")]
		private class DelayPromise : PlayerLoopReusablePromiseBase
		{
			[Token(Token = "0x400088A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private readonly float delayFrameTimeSpan;

			[Token(Token = "0x400088B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float elapsed;

			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x1077340", Offset = "0x1077340", VA = "0x1077340")]
			public DelayPromise(TimeSpan delayFrameTimeSpan, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x107738C", Offset = "0x107738C", VA = "0x107738C", Slot = "15")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0x1077394", Offset = "0x1077394", VA = "0x1077394", Slot = "16")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000347")]
		private class DelayIgnoreTimeScalePromise : PlayerLoopReusablePromiseBase
		{
			[Token(Token = "0x400088C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private readonly float delayFrameTimeSpan;

			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float elapsed;

			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x1077244", Offset = "0x1077244", VA = "0x1077244")]
			public DelayIgnoreTimeScalePromise(TimeSpan delayFrameTimeSpan, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x1077290", Offset = "0x1077290", VA = "0x1077290", Slot = "15")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x1077298", Offset = "0x1077298", VA = "0x1077298", Slot = "16")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000348")]
		private static class CanceledUniTaskCache<T>
		{
			[Token(Token = "0x400088E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly UniTask<T> Task;

			[Token(Token = "0x6000FB5")]
			static CanceledUniTaskCache()
			{
			}
		}

		[Token(Token = "0x2000349")]
		private class WaitUntilPromise : PlayerLoopReusablePromiseBase
		{
			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly Func<bool> predicate;

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x1077924", Offset = "0x1077924", VA = "0x1077924")]
			public WaitUntilPromise(Func<bool> predicate, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x1077960", Offset = "0x1077960", VA = "0x1077960", Slot = "15")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x1077964", Offset = "0x1077964", VA = "0x1077964", Slot = "16")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200034A")]
		private class WaitWhilePromise : PlayerLoopReusablePromiseBase
		{
			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly Func<bool> predicate;

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x1077ABC", Offset = "0x1077ABC", VA = "0x1077ABC")]
			public WaitWhilePromise(Func<bool> predicate, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x1077AF8", Offset = "0x1077AF8", VA = "0x1077AF8", Slot = "15")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x1077AFC", Offset = "0x1077AFC", VA = "0x1077AFC", Slot = "16")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200034B")]
		private class WaitUntilValueChangedUnityObjectPromise<T, U> : PlayerLoopReusablePromiseBase<U>
		{
			[Token(Token = "0x4000891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly T target;

			[Token(Token = "0x4000892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, U> monitorFunction;

			[Token(Token = "0x4000893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEqualityComparer<U> equalityComparer;

			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U currentValue;

			[Token(Token = "0x6000FBC")]
			public WaitUntilValueChangedUnityObjectPromise(T target, Func<T, U> monitorFunction, IEqualityComparer<U> equalityComparer, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FBD")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FBE")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200034C")]
		private class WaitUntilValueChangedStandardObjectPromise<T, U> : PlayerLoopReusablePromiseBase<U> where T : class
		{
			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly WeakReference<T> target;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, U> monitorFunction;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEqualityComparer<U> equalityComparer;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U currentValue;

			[Token(Token = "0x6000FBF")]
			public WaitUntilValueChangedStandardObjectPromise(T target, Func<T, U> monitorFunction, IEqualityComparer<U> equalityComparer, PlayerLoopTiming timing, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x6000FC0")]
			protected override void OnRunningStart()
			{
			}

			[Token(Token = "0x6000FC1")]
			public override bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200034D")]
		private class WhenAllPromise<T1, T2>
		{
			[Token(Token = "0x200034E")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x400089F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2> parent;

				[Token(Token = "0x17000132")]
				public bool IsCompleted
				{
					[Token(Token = "0x6000FCA")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6000FC9")]
				public Awaiter(WhenAllPromise<T1, T2> parent)
				{
				}

				[Token(Token = "0x6000FCB")]
				public (T1, T2) GetResult()
				{
					return default((T1, T2));
				}

				[Token(Token = "0x6000FCC")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6000FCD")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200034F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B107C", Offset = "0x8B107C")]
			private struct <RunTask1Async>d__9 : IAsyncStateMachine
			{
				[Token(Token = "0x40008A0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008A1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008A2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40008A3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2> <>4__this;

				[Token(Token = "0x40008A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6000FCE")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FCF")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B108C", Offset = "0x8B108C")]
			private struct <RunTask2Async>d__11 : IAsyncStateMachine
			{
				[Token(Token = "0x40008A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40008A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2> <>4__this;

				[Token(Token = "0x40008A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6000FD0")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FD1")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000899")]
			private const int MaxCount = 2;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x6000FC2")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2)
			{
			}

			[Token(Token = "0x6000FC3")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6000FC4")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x6000FC5")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9F88", Offset = "0x8B9F88")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FC6")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x6000FC7")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9FE8", Offset = "0x8B9FE8")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FC8")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000351")]
		private class WhenAllPromise<T1, T2, T3>
		{
			[Token(Token = "0x2000352")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x40008B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2, T3> parent;

				[Token(Token = "0x17000133")]
				public bool IsCompleted
				{
					[Token(Token = "0x6000FDC")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6000FDB")]
				public Awaiter(WhenAllPromise<T1, T2, T3> parent)
				{
				}

				[Token(Token = "0x6000FDD")]
				public (T1, T2, T3) GetResult()
				{
					return default((T1, T2, T3));
				}

				[Token(Token = "0x6000FDE")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6000FDF")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000353")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B109C", Offset = "0x8B109C")]
			private struct <RunTask1Async>d__10 : IAsyncStateMachine
			{
				[Token(Token = "0x40008B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008B3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008B4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40008B5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3> <>4__this;

				[Token(Token = "0x40008B6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6000FE0")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FE1")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10AC", Offset = "0x8B10AC")]
			private struct <RunTask2Async>d__12 : IAsyncStateMachine
			{
				[Token(Token = "0x40008B7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008B8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008B9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40008BA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3> <>4__this;

				[Token(Token = "0x40008BB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6000FE2")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FE3")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000355")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10BC", Offset = "0x8B10BC")]
			private struct <RunTask3Async>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x40008BC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008BD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008BE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40008BF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3> <>4__this;

				[Token(Token = "0x40008C0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6000FE4")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FE5")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40008AA")]
			private const int MaxCount = 3;

			[Token(Token = "0x40008AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x40008AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x40008AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x40008AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x40008AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x40008B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x6000FD2")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3)
			{
			}

			[Token(Token = "0x6000FD3")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6000FD4")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x6000FD5")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA068", Offset = "0x8BA068")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FD6")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x6000FD7")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA0C8", Offset = "0x8BA0C8")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FD8")]
			private void RunTask3(UniTask<T3> task)
			{
			}

			[Token(Token = "0x6000FD9")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA128", Offset = "0x8BA128")]
			private UniTaskVoid RunTask3Async(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FDA")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000356")]
		private class WhenAllPromise<T1, T2, T3, T4>
		{
			[Token(Token = "0x2000357")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x40008C9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2, T3, T4> parent;

				[Token(Token = "0x17000134")]
				public bool IsCompleted
				{
					[Token(Token = "0x6000FF2")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6000FF1")]
				public Awaiter(WhenAllPromise<T1, T2, T3, T4> parent)
				{
				}

				[Token(Token = "0x6000FF3")]
				public (T1, T2, T3, T4) GetResult()
				{
					return default((T1, T2, T3, T4));
				}

				[Token(Token = "0x6000FF4")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6000FF5")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10CC", Offset = "0x8B10CC")]
			private struct <RunTask1Async>d__11 : IAsyncStateMachine
			{
				[Token(Token = "0x40008CA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008CB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40008CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40008CE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6000FF6")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FF7")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000359")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10DC", Offset = "0x8B10DC")]
			private struct <RunTask2Async>d__13 : IAsyncStateMachine
			{
				[Token(Token = "0x40008CF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008D0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40008D2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40008D3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6000FF8")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FF9")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200035A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10EC", Offset = "0x8B10EC")]
			private struct <RunTask3Async>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x40008D4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008D5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008D6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40008D7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40008D8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6000FFA")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FFB")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200035B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B10FC", Offset = "0x8B10FC")]
			private struct <RunTask4Async>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x40008D9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008DA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008DB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x40008DC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40008DD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x6000FFC")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6000FFD")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40008C1")]
			private const int MaxCount = 4;

			[Token(Token = "0x40008C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x40008C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x40008C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x40008C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x40008C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x6000FE6")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4)
			{
			}

			[Token(Token = "0x6000FE7")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6000FE8")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x6000FE9")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA1B8", Offset = "0x8BA1B8")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FEA")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x6000FEB")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA218", Offset = "0x8BA218")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FEC")]
			private void RunTask3(UniTask<T3> task)
			{
			}

			[Token(Token = "0x6000FED")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA278", Offset = "0x8BA278")]
			private UniTaskVoid RunTask3Async(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FEE")]
			private void RunTask4(UniTask<T4> task)
			{
			}

			[Token(Token = "0x6000FEF")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA2D8", Offset = "0x8BA2D8")]
			private UniTaskVoid RunTask4Async(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6000FF0")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x200035C")]
		private class WhenAllPromise<T1, T2, T3, T4, T5>
		{
			[Token(Token = "0x200035D")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x40008E7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2, T3, T4, T5> parent;

				[Token(Token = "0x17000135")]
				public bool IsCompleted
				{
					[Token(Token = "0x600100C")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600100B")]
				public Awaiter(WhenAllPromise<T1, T2, T3, T4, T5> parent)
				{
				}

				[Token(Token = "0x600100D")]
				public (T1, T2, T3, T4, T5) GetResult()
				{
					return default((T1, T2, T3, T4, T5));
				}

				[Token(Token = "0x600100E")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600100F")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200035E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B110C", Offset = "0x8B110C")]
			private struct <RunTask1Async>d__12 : IAsyncStateMachine
			{
				[Token(Token = "0x40008E8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008E9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008EA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40008EB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40008EC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6001010")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001011")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200035F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B111C", Offset = "0x8B111C")]
			private struct <RunTask2Async>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x40008ED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008EE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008EF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40008F0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40008F1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6001012")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001013")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B112C", Offset = "0x8B112C")]
			private struct <RunTask3Async>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x40008F2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008F3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008F4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40008F5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40008F6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6001014")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001015")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000361")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B113C", Offset = "0x8B113C")]
			private struct <RunTask4Async>d__18 : IAsyncStateMachine
			{
				[Token(Token = "0x40008F7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008F8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008F9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x40008FA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40008FB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x6001016")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001017")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000362")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B114C", Offset = "0x8B114C")]
			private struct <RunTask5Async>d__20 : IAsyncStateMachine
			{
				[Token(Token = "0x40008FC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40008FD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40008FE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x40008FF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x4000900")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x6001018")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001019")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40008DE")]
			private const int MaxCount = 5;

			[Token(Token = "0x40008DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x40008E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x40008E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x6000FFE")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5)
			{
			}

			[Token(Token = "0x6000FFF")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6001000")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x6001001")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA378", Offset = "0x8BA378")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001002")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x6001003")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA3D8", Offset = "0x8BA3D8")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001004")]
			private void RunTask3(UniTask<T3> task)
			{
			}

			[Token(Token = "0x6001005")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA438", Offset = "0x8BA438")]
			private UniTaskVoid RunTask3Async(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001006")]
			private void RunTask4(UniTask<T4> task)
			{
			}

			[Token(Token = "0x6001007")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA498", Offset = "0x8BA498")]
			private UniTaskVoid RunTask4Async(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001008")]
			private void RunTask5(UniTask<T5> task)
			{
			}

			[Token(Token = "0x6001009")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA4F8", Offset = "0x8BA4F8")]
			private UniTaskVoid RunTask5Async(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600100A")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000363")]
		private class WhenAllPromise<T1, T2, T3, T4, T5, T6>
		{
			[Token(Token = "0x2000364")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x400090B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2, T3, T4, T5, T6> parent;

				[Token(Token = "0x17000136")]
				public bool IsCompleted
				{
					[Token(Token = "0x600102A")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6001029")]
				public Awaiter(WhenAllPromise<T1, T2, T3, T4, T5, T6> parent)
				{
				}

				[Token(Token = "0x600102B")]
				public (T1, T2, T3, T4, T5, T6) GetResult()
				{
					return default((T1, T2, T3, T4, T5, T6));
				}

				[Token(Token = "0x600102C")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600102D")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000365")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B115C", Offset = "0x8B115C")]
			private struct <RunTask1Async>d__13 : IAsyncStateMachine
			{
				[Token(Token = "0x400090C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400090D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400090E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x400090F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000910")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x600102E")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600102F")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000366")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B116C", Offset = "0x8B116C")]
			private struct <RunTask2Async>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x4000911")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000912")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000913")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x4000914")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000915")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6001030")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001031")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000367")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B117C", Offset = "0x8B117C")]
			private struct <RunTask3Async>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x4000916")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000917")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000918")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x4000919")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x400091A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6001032")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001033")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000368")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B118C", Offset = "0x8B118C")]
			private struct <RunTask4Async>d__19 : IAsyncStateMachine
			{
				[Token(Token = "0x400091B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400091C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400091D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x400091E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x400091F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x6001034")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001035")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000369")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B119C", Offset = "0x8B119C")]
			private struct <RunTask5Async>d__21 : IAsyncStateMachine
			{
				[Token(Token = "0x4000920")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000921")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000922")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x4000923")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000924")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x6001036")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001037")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200036A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11AC", Offset = "0x8B11AC")]
			private struct <RunTask6Async>d__23 : IAsyncStateMachine
			{
				[Token(Token = "0x4000925")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000926")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000927")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T6> task;

				[Token(Token = "0x4000928")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000929")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T6>.Awaiter <>u__1;

				[Token(Token = "0x6001038")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001039")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000901")]
			private const int MaxCount = 6;

			[Token(Token = "0x4000902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000903")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x4000904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x4000905")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x4000907")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T6 result6;

			[Token(Token = "0x4000908")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000909")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x400090A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x600101A")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6)
			{
			}

			[Token(Token = "0x600101B")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600101C")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x600101D")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA5A8", Offset = "0x8BA5A8")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600101E")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x600101F")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA608", Offset = "0x8BA608")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001020")]
			private void RunTask3(UniTask<T3> task)
			{
			}

			[Token(Token = "0x6001021")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA668", Offset = "0x8BA668")]
			private UniTaskVoid RunTask3Async(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001022")]
			private void RunTask4(UniTask<T4> task)
			{
			}

			[Token(Token = "0x6001023")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA6C8", Offset = "0x8BA6C8")]
			private UniTaskVoid RunTask4Async(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001024")]
			private void RunTask5(UniTask<T5> task)
			{
			}

			[Token(Token = "0x6001025")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA728", Offset = "0x8BA728")]
			private UniTaskVoid RunTask5Async(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001026")]
			private void RunTask6(UniTask<T6> task)
			{
			}

			[Token(Token = "0x6001027")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA788", Offset = "0x8BA788")]
			private UniTaskVoid RunTask6Async(UniTask<T6> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001028")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x200036B")]
		private class WhenAllPromise<T1, T2, T3, T4, T5, T6, T7>
		{
			[Token(Token = "0x200036C")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000935")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> parent;

				[Token(Token = "0x17000137")]
				public bool IsCompleted
				{
					[Token(Token = "0x600104C")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600104B")]
				public Awaiter(WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> parent)
				{
				}

				[Token(Token = "0x600104D")]
				public (T1, T2, T3, T4, T5, T6, T7) GetResult()
				{
					return default((T1, T2, T3, T4, T5, T6, T7));
				}

				[Token(Token = "0x600104E")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600104F")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200036D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11BC", Offset = "0x8B11BC")]
			private struct <RunTask1Async>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x4000936")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000937")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000938")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x4000939")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x400093A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6001050")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001051")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200036E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11CC", Offset = "0x8B11CC")]
			private struct <RunTask2Async>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x400093B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400093C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400093D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x400093E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x400093F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6001052")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001053")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200036F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11DC", Offset = "0x8B11DC")]
			private struct <RunTask3Async>d__18 : IAsyncStateMachine
			{
				[Token(Token = "0x4000940")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000941")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000942")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x4000943")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000944")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6001054")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001055")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000370")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11EC", Offset = "0x8B11EC")]
			private struct <RunTask4Async>d__20 : IAsyncStateMachine
			{
				[Token(Token = "0x4000945")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000946")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000947")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x4000948")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000949")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x6001056")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001057")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000371")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B11FC", Offset = "0x8B11FC")]
			private struct <RunTask5Async>d__22 : IAsyncStateMachine
			{
				[Token(Token = "0x400094A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400094B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400094C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x400094D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x400094E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x6001058")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001059")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000372")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B120C", Offset = "0x8B120C")]
			private struct <RunTask6Async>d__24 : IAsyncStateMachine
			{
				[Token(Token = "0x400094F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000950")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000951")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T6> task;

				[Token(Token = "0x4000952")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000953")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T6>.Awaiter <>u__1;

				[Token(Token = "0x600105A")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600105B")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000373")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B121C", Offset = "0x8B121C")]
			private struct <RunTask7Async>d__26 : IAsyncStateMachine
			{
				[Token(Token = "0x4000954")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000955")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000956")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T7> task;

				[Token(Token = "0x4000957")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000958")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T7>.Awaiter <>u__1;

				[Token(Token = "0x600105C")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600105D")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x400092A")]
			private const int MaxCount = 7;

			[Token(Token = "0x400092B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x400092C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x400092D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x400092E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x400092F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x4000930")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T6 result6;

			[Token(Token = "0x4000931")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T7 result7;

			[Token(Token = "0x4000932")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x600103A")]
			public WhenAllPromise(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7)
			{
			}

			[Token(Token = "0x600103B")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600103C")]
			private void RunTask1(UniTask<T1> task)
			{
			}

			[Token(Token = "0x600103D")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA848", Offset = "0x8BA848")]
			private UniTaskVoid RunTask1Async(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600103E")]
			private void RunTask2(UniTask<T2> task)
			{
			}

			[Token(Token = "0x600103F")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA8A8", Offset = "0x8BA8A8")]
			private UniTaskVoid RunTask2Async(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001040")]
			private void RunTask3(UniTask<T3> task)
			{
			}

			[Token(Token = "0x6001041")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA908", Offset = "0x8BA908")]
			private UniTaskVoid RunTask3Async(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001042")]
			private void RunTask4(UniTask<T4> task)
			{
			}

			[Token(Token = "0x6001043")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA968", Offset = "0x8BA968")]
			private UniTaskVoid RunTask4Async(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001044")]
			private void RunTask5(UniTask<T5> task)
			{
			}

			[Token(Token = "0x6001045")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BA9C8", Offset = "0x8BA9C8")]
			private UniTaskVoid RunTask5Async(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001046")]
			private void RunTask6(UniTask<T6> task)
			{
			}

			[Token(Token = "0x6001047")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAA28", Offset = "0x8BAA28")]
			private UniTaskVoid RunTask6Async(UniTask<T6> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001048")]
			private void RunTask7(UniTask<T7> task)
			{
			}

			[Token(Token = "0x6001049")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAA88", Offset = "0x8BAA88")]
			private UniTaskVoid RunTask7Async(UniTask<T7> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600104A")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000374")]
		private class WhenAllPromise<T>
		{
			[Token(Token = "0x2000375")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x400095D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise<T> parent;

				[Token(Token = "0x17000138")]
				public bool IsCompleted
				{
					[Token(Token = "0x6001063")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6001062")]
				public Awaiter(WhenAllPromise<T> parent)
				{
				}

				[Token(Token = "0x6001064")]
				public T[] GetResult()
				{
					return null;
				}

				[Token(Token = "0x6001065")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6001066")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000376")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B122C", Offset = "0x8B122C")]
			private struct <RunTask>d__6 : IAsyncStateMachine
			{
				[Token(Token = "0x400095E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400095F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000960")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T> task;

				[Token(Token = "0x4000961")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAllPromise<T> <>4__this;

				[Token(Token = "0x4000962")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int index;

				[Token(Token = "0x4000963")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T>.Awaiter <>u__1;

				[Token(Token = "0x6001067")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001068")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly T[] result;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x600105E")]
			public WhenAllPromise(UniTask<T>[] tasks, int tasksLength)
			{
			}

			[Token(Token = "0x600105F")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6001060")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAB58", Offset = "0x8BAB58")]
			private UniTaskVoid RunTask(UniTask<T> task, int index)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001061")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000377")]
		private class WhenAllPromise
		{
			[Token(Token = "0x2000378")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000968")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAllPromise parent;

				[Token(Token = "0x17000139")]
				public bool IsCompleted
				{
					[Token(Token = "0x600106E")]
					[Address(RVA = "0x1FD3090", Offset = "0x1FD3090", VA = "0x1FD3090")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600106D")]
				[Address(RVA = "0x1FD3088", Offset = "0x1FD3088", VA = "0x1FD3088")]
				public Awaiter(WhenAllPromise parent)
				{
				}

				[Token(Token = "0x600106F")]
				[Address(RVA = "0x1FD30C4", Offset = "0x1FD30C4", VA = "0x1FD30C4")]
				public void GetResult()
				{
				}

				[Token(Token = "0x6001070")]
				[Address(RVA = "0x1FD30EC", Offset = "0x1FD30EC", VA = "0x1FD30EC", Slot = "5")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6001071")]
				[Address(RVA = "0x1FD30F0", Offset = "0x1FD30F0", VA = "0x1FD30F0", Slot = "4")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000379")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B123C", Offset = "0x8B123C")]
			private struct <RunTask>d__6 : IAsyncStateMachine
			{
				[Token(Token = "0x4000969")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400096A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400096B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public UniTask task;

				[Token(Token = "0x400096C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public WhenAllPromise <>4__this;

				[Token(Token = "0x400096D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private UniTask.Awaiter <>u__1;

				[Token(Token = "0x6001072")]
				[Address(RVA = "0x1FD2DE4", Offset = "0x1FD2DE4", VA = "0x1FD2DE4", Slot = "4")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001073")]
				[Address(RVA = "0x1FD307C", Offset = "0x1FD307C", VA = "0x1FD307C", Slot = "5")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int completeCount;

			[Token(Token = "0x4000965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int resultLength;

			[Token(Token = "0x4000966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Action whenComplete;

			[Token(Token = "0x4000967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x6001069")]
			[Address(RVA = "0x10762C8", Offset = "0x10762C8", VA = "0x10762C8")]
			public WhenAllPromise(UniTask[] tasks, int tasksLength)
			{
			}

			[Token(Token = "0x600106A")]
			[Address(RVA = "0x1077C54", Offset = "0x1077C54", VA = "0x1077C54")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600106B")]
			[Address(RVA = "0x1077C80", Offset = "0x1077C80", VA = "0x1077C80")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BABC8", Offset = "0x8BABC8")]
			private UniTaskVoid RunTask(UniTask task, int index)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600106C")]
			[Address(RVA = "0x10764B0", Offset = "0x10764B0", VA = "0x10764B0")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x200037A")]
		private class WhenAnyPromise<T0, T1>
		{
			[Token(Token = "0x200037B")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000974")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1> parent;

				[Token(Token = "0x1700013B")]
				public bool IsCompleted
				{
					[Token(Token = "0x600107B")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600107A")]
				public Awaiter(WhenAnyPromise<T0, T1> parent)
				{
				}

				[Token(Token = "0x600107C")]
				public (int, (bool, T0), (bool, T1)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1)));
				}

				[Token(Token = "0x600107D")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600107E")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200037C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B124C", Offset = "0x8B124C")]
			private struct <RunTask0>d__10 : IAsyncStateMachine
			{
				[Token(Token = "0x4000975")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000976")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000977")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x4000978")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1> <>4__this;

				[Token(Token = "0x4000979")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x600107F")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001080")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200037D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B125C", Offset = "0x8B125C")]
			private struct <RunTask1>d__11 : IAsyncStateMachine
			{
				[Token(Token = "0x400097A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400097B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400097C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x400097D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1> <>4__this;

				[Token(Token = "0x400097E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6001081")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001082")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x400096E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x400096F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x1700013A")]
			private bool IsCompleted
			{
				[Token(Token = "0x6001074")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001075")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1)
			{
			}

			[Token(Token = "0x6001076")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6001077")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAC38", Offset = "0x8BAC38")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001078")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAC98", Offset = "0x8BAC98")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001079")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x200037E")]
		private class WhenAnyPromise<T0, T1, T2>
		{
			[Token(Token = "0x200037F")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000986")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2> parent;

				[Token(Token = "0x1700013D")]
				public bool IsCompleted
				{
					[Token(Token = "0x600108B")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600108A")]
				public Awaiter(WhenAnyPromise<T0, T1, T2> parent)
				{
				}

				[Token(Token = "0x600108C")]
				public (int, (bool, T0), (bool, T1), (bool, T2)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2)));
				}

				[Token(Token = "0x600108D")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600108E")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000380")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B126C", Offset = "0x8B126C")]
			private struct <RunTask0>d__11 : IAsyncStateMachine
			{
				[Token(Token = "0x4000987")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000988")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000989")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x400098A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2> <>4__this;

				[Token(Token = "0x400098B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x600108F")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001090")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000381")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B127C", Offset = "0x8B127C")]
			private struct <RunTask1>d__12 : IAsyncStateMachine
			{
				[Token(Token = "0x400098C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x400098D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x400098E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x400098F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2> <>4__this;

				[Token(Token = "0x4000990")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x6001091")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001092")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000382")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B128C", Offset = "0x8B128C")]
			private struct <RunTask2>d__13 : IAsyncStateMachine
			{
				[Token(Token = "0x4000991")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000992")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000993")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x4000994")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2> <>4__this;

				[Token(Token = "0x4000995")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6001093")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001094")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x1700013C")]
			private bool IsCompleted
			{
				[Token(Token = "0x6001083")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001084")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2)
			{
			}

			[Token(Token = "0x6001085")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6001086")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAD18", Offset = "0x8BAD18")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001087")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAD78", Offset = "0x8BAD78")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001088")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BADD8", Offset = "0x8BADD8")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001089")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000383")]
		private class WhenAnyPromise<T0, T1, T2, T3>
		{
			[Token(Token = "0x2000384")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x400099E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2, T3> parent;

				[Token(Token = "0x1700013F")]
				public bool IsCompleted
				{
					[Token(Token = "0x600109E")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600109D")]
				public Awaiter(WhenAnyPromise<T0, T1, T2, T3> parent)
				{
				}

				[Token(Token = "0x600109F")]
				public (int, (bool, T0), (bool, T1), (bool, T2), (bool, T3)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2), (bool, T3)));
				}

				[Token(Token = "0x60010A0")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x60010A1")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000385")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B129C", Offset = "0x8B129C")]
			private struct <RunTask0>d__12 : IAsyncStateMachine
			{
				[Token(Token = "0x400099F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009A0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009A1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x40009A2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3> <>4__this;

				[Token(Token = "0x40009A3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x60010A2")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010A3")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000386")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12AC", Offset = "0x8B12AC")]
			private struct <RunTask1>d__13 : IAsyncStateMachine
			{
				[Token(Token = "0x40009A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40009A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3> <>4__this;

				[Token(Token = "0x40009A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x60010A4")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010A5")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000387")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12BC", Offset = "0x8B12BC")]
			private struct <RunTask2>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x40009A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009AA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009AB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40009AC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3> <>4__this;

				[Token(Token = "0x40009AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x60010A6")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010A7")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000388")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12CC", Offset = "0x8B12CC")]
			private struct <RunTask3>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x40009AE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009AF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009B0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40009B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3> <>4__this;

				[Token(Token = "0x40009B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x60010A8")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010A9")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x4000997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000998")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x4000999")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x400099A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x400099B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x1700013E")]
			private bool IsCompleted
			{
				[Token(Token = "0x6001095")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001096")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3)
			{
			}

			[Token(Token = "0x6001097")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x6001098")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAE68", Offset = "0x8BAE68")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001099")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAEC8", Offset = "0x8BAEC8")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600109A")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAF28", Offset = "0x8BAF28")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600109B")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BAF88", Offset = "0x8BAF88")]
			private UniTaskVoid RunTask3(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600109C")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000389")]
		private class WhenAnyPromise<T0, T1, T2, T3, T4>
		{
			[Token(Token = "0x200038A")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x40009BC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2, T3, T4> parent;

				[Token(Token = "0x17000141")]
				public bool IsCompleted
				{
					[Token(Token = "0x60010B4")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x60010B3")]
				public Awaiter(WhenAnyPromise<T0, T1, T2, T3, T4> parent)
				{
				}

				[Token(Token = "0x60010B5")]
				public (int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4)));
				}

				[Token(Token = "0x60010B6")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x60010B7")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200038B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12DC", Offset = "0x8B12DC")]
			private struct <RunTask0>d__13 : IAsyncStateMachine
			{
				[Token(Token = "0x40009BD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009BE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009BF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x40009C0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40009C1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x60010B8")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010B9")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200038C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12EC", Offset = "0x8B12EC")]
			private struct <RunTask1>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x40009C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009C4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40009C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40009C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x60010BA")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010BB")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200038D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B12FC", Offset = "0x8B12FC")]
			private struct <RunTask2>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x40009C7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009C8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009C9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40009CA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40009CB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x60010BC")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010BD")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200038E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B130C", Offset = "0x8B130C")]
			private struct <RunTask3>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x40009CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009CE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40009CF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40009D0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x60010BE")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010BF")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200038F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B131C", Offset = "0x8B131C")]
			private struct <RunTask4>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x40009D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009D2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009D3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x40009D4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4> <>4__this;

				[Token(Token = "0x40009D5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x60010C0")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010C1")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x40009B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x40009B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x40009B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x40009B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x40009B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x40009B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x40009BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x40009BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x17000140")]
			private bool IsCompleted
			{
				[Token(Token = "0x60010AA")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60010AB")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4)
			{
			}

			[Token(Token = "0x60010AC")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x60010AD")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB028", Offset = "0x8BB028")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010AE")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB088", Offset = "0x8BB088")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010AF")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB0E8", Offset = "0x8BB0E8")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010B0")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB148", Offset = "0x8BB148")]
			private UniTaskVoid RunTask3(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010B1")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB1A8", Offset = "0x8BB1A8")]
			private UniTaskVoid RunTask4(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010B2")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000390")]
		private class WhenAnyPromise<T0, T1, T2, T3, T4, T5>
		{
			[Token(Token = "0x2000391")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x40009E0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2, T3, T4, T5> parent;

				[Token(Token = "0x17000143")]
				public bool IsCompleted
				{
					[Token(Token = "0x60010CD")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x60010CC")]
				public Awaiter(WhenAnyPromise<T0, T1, T2, T3, T4, T5> parent)
				{
				}

				[Token(Token = "0x60010CE")]
				public (int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5)));
				}

				[Token(Token = "0x60010CF")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x60010D0")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000392")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B132C", Offset = "0x8B132C")]
			private struct <RunTask0>d__14 : IAsyncStateMachine
			{
				[Token(Token = "0x40009E1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009E2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009E3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x40009E4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009E5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x60010D1")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010D2")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000393")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B133C", Offset = "0x8B133C")]
			private struct <RunTask1>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x40009E6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009E7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009E8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x40009E9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009EA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x60010D3")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010D4")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000394")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B134C", Offset = "0x8B134C")]
			private struct <RunTask2>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x40009EB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009EC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009ED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x40009EE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009EF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x60010D5")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010D6")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000395")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B135C", Offset = "0x8B135C")]
			private struct <RunTask3>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x40009F0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009F1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009F2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x40009F3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009F4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x60010D7")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010D8")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000396")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B136C", Offset = "0x8B136C")]
			private struct <RunTask4>d__18 : IAsyncStateMachine
			{
				[Token(Token = "0x40009F5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009F6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009F7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x40009F8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009F9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x60010D9")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010DA")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x2000397")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B137C", Offset = "0x8B137C")]
			private struct <RunTask5>d__19 : IAsyncStateMachine
			{
				[Token(Token = "0x40009FA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x40009FB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x40009FC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x40009FD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5> <>4__this;

				[Token(Token = "0x40009FE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x60010DB")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010DC")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x17000142")]
			private bool IsCompleted
			{
				[Token(Token = "0x60010C2")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60010C3")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5)
			{
			}

			[Token(Token = "0x60010C4")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x60010C5")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB258", Offset = "0x8BB258")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010C6")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB2B8", Offset = "0x8BB2B8")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010C7")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB318", Offset = "0x8BB318")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010C8")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB378", Offset = "0x8BB378")]
			private UniTaskVoid RunTask3(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010C9")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB3D8", Offset = "0x8BB3D8")]
			private UniTaskVoid RunTask4(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010CA")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB438", Offset = "0x8BB438")]
			private UniTaskVoid RunTask5(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010CB")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x2000398")]
		private class WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6>
		{
			[Token(Token = "0x2000399")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000A0A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> parent;

				[Token(Token = "0x17000145")]
				public bool IsCompleted
				{
					[Token(Token = "0x60010E9")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x60010E8")]
				public Awaiter(WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> parent)
				{
				}

				[Token(Token = "0x60010EA")]
				public (int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6)));
				}

				[Token(Token = "0x60010EB")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x60010EC")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B138C", Offset = "0x8B138C")]
			private struct <RunTask0>d__15 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A0B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A0C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A0D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x4000A0E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A0F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x60010ED")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010EE")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B139C", Offset = "0x8B139C")]
			private struct <RunTask1>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A10")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A11")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A12")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x4000A13")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A14")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x60010EF")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010F0")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13AC", Offset = "0x8B13AC")]
			private struct <RunTask2>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A15")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A16")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A17")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x4000A18")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A19")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x60010F1")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010F2")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13BC", Offset = "0x8B13BC")]
			private struct <RunTask3>d__18 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A1A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A1B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A1C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x4000A1D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A1E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x60010F3")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010F4")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13CC", Offset = "0x8B13CC")]
			private struct <RunTask4>d__19 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A1F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A20")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A21")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x4000A22")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A23")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x60010F5")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010F6")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x200039F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13DC", Offset = "0x8B13DC")]
			private struct <RunTask5>d__20 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A24")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A25")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A26")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x4000A27")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A28")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x60010F7")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010F8")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13EC", Offset = "0x8B13EC")]
			private struct <RunTask6>d__21 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A29")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A2A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A2B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T6> task;

				[Token(Token = "0x4000A2C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6> <>4__this;

				[Token(Token = "0x4000A2D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T6>.Awaiter <>u__1;

				[Token(Token = "0x60010F9")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x60010FA")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x40009FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x4000A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x4000A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x4000A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x4000A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x4000A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T6 result6;

			[Token(Token = "0x4000A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x17000144")]
			private bool IsCompleted
			{
				[Token(Token = "0x60010DD")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60010DE")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6)
			{
			}

			[Token(Token = "0x60010DF")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x60010E0")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB4F8", Offset = "0x8BB4F8")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E1")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB558", Offset = "0x8BB558")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E2")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB5B8", Offset = "0x8BB5B8")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E3")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB618", Offset = "0x8BB618")]
			private UniTaskVoid RunTask3(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E4")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB678", Offset = "0x8BB678")]
			private UniTaskVoid RunTask4(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E5")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB6D8", Offset = "0x8BB6D8")]
			private UniTaskVoid RunTask5(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E6")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB738", Offset = "0x8BB738")]
			private UniTaskVoid RunTask6(UniTask<T6> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010E7")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x20003A1")]
		private class WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7>
		{
			[Token(Token = "0x20003A2")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000A3A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> parent;

				[Token(Token = "0x17000147")]
				public bool IsCompleted
				{
					[Token(Token = "0x6001108")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6001107")]
				public Awaiter(WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> parent)
				{
				}

				[Token(Token = "0x6001109")]
				public (int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6), (bool, T7)) GetResult()
				{
					return default((int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6), (bool, T7)));
				}

				[Token(Token = "0x600110A")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x600110B")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B13FC", Offset = "0x8B13FC")]
			private struct <RunTask0>d__16 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A3B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A3C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A3D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x4000A3E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A3F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x600110C")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600110D")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B140C", Offset = "0x8B140C")]
			private struct <RunTask1>d__17 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A40")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A41")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A42")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T1> task;

				[Token(Token = "0x4000A43")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A44")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T1>.Awaiter <>u__1;

				[Token(Token = "0x600110E")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600110F")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B141C", Offset = "0x8B141C")]
			private struct <RunTask2>d__18 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A45")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A46")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A47")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T2> task;

				[Token(Token = "0x4000A48")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A49")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T2>.Awaiter <>u__1;

				[Token(Token = "0x6001110")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001111")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B142C", Offset = "0x8B142C")]
			private struct <RunTask3>d__19 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A4A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A4B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A4C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T3> task;

				[Token(Token = "0x4000A4D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A4E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T3>.Awaiter <>u__1;

				[Token(Token = "0x6001112")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001113")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B143C", Offset = "0x8B143C")]
			private struct <RunTask4>d__20 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A4F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A50")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A51")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T4> task;

				[Token(Token = "0x4000A52")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A53")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T4>.Awaiter <>u__1;

				[Token(Token = "0x6001114")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001115")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B144C", Offset = "0x8B144C")]
			private struct <RunTask5>d__21 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A54")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A55")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A56")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T5> task;

				[Token(Token = "0x4000A57")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A58")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T5>.Awaiter <>u__1;

				[Token(Token = "0x6001116")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001117")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003A9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B145C", Offset = "0x8B145C")]
			private struct <RunTask6>d__22 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A59")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A5A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A5B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T6> task;

				[Token(Token = "0x4000A5C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A5D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T6>.Awaiter <>u__1;

				[Token(Token = "0x6001118")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001119")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003AA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B146C", Offset = "0x8B146C")]
			private struct <RunTask7>d__23 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A5E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A5F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A60")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T7> task;

				[Token(Token = "0x4000A61")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7> <>4__this;

				[Token(Token = "0x4000A62")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T7>.Awaiter <>u__1;

				[Token(Token = "0x600111A")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600111B")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T1 result1;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T2 result2;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T3 result3;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T4 result4;

			[Token(Token = "0x4000A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T5 result5;

			[Token(Token = "0x4000A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T6 result6;

			[Token(Token = "0x4000A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T7 result7;

			[Token(Token = "0x4000A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x17000146")]
			private bool IsCompleted
			{
				[Token(Token = "0x60010FB")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60010FC")]
			public WhenAnyPromise(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7)
			{
			}

			[Token(Token = "0x60010FD")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x60010FE")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB808", Offset = "0x8BB808")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x60010FF")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB868", Offset = "0x8BB868")]
			private UniTaskVoid RunTask1(UniTask<T1> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001100")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB8C8", Offset = "0x8BB8C8")]
			private UniTaskVoid RunTask2(UniTask<T2> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001101")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB928", Offset = "0x8BB928")]
			private UniTaskVoid RunTask3(UniTask<T3> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001102")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB988", Offset = "0x8BB988")]
			private UniTaskVoid RunTask4(UniTask<T4> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001103")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BB9E8", Offset = "0x8BB9E8")]
			private UniTaskVoid RunTask5(UniTask<T5> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001104")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBA48", Offset = "0x8BBA48")]
			private UniTaskVoid RunTask6(UniTask<T6> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001105")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBAA8", Offset = "0x8BBAA8")]
			private UniTaskVoid RunTask7(UniTask<T7> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001106")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x20003AB")]
		private class UnitWhenAnyPromise<T0>
		{
			[Token(Token = "0x20003AC")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000A68")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UnitWhenAnyPromise<T0> parent;

				[Token(Token = "0x17000149")]
				public bool IsCompleted
				{
					[Token(Token = "0x6001123")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6001122")]
				public Awaiter(UnitWhenAnyPromise<T0> parent)
				{
				}

				[Token(Token = "0x6001124")]
				public (bool, T0) GetResult()
				{
					return default((bool, T0));
				}

				[Token(Token = "0x6001125")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6001126")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003AD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B147C", Offset = "0x8B147C")]
			private struct <RunTask0>d__9 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A69")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A6A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T0> task;

				[Token(Token = "0x4000A6C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UnitWhenAnyPromise<T0> <>4__this;

				[Token(Token = "0x4000A6D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T0>.Awaiter <>u__1;

				[Token(Token = "0x6001127")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001128")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003AE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B148C", Offset = "0x8B148C")]
			private struct <RunTask1>d__10 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A6E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A6F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A70")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask task;

				[Token(Token = "0x4000A71")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UnitWhenAnyPromise<T0> <>4__this;

				[Token(Token = "0x4000A72")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask.Awaiter <>u__1;

				[Token(Token = "0x6001129")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x600112A")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T0 result0;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x17000148")]
			private bool IsCompleted
			{
				[Token(Token = "0x600111C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600111D")]
			public UnitWhenAnyPromise(UniTask<T0> task0, UniTask task1)
			{
			}

			[Token(Token = "0x600111E")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600111F")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBB88", Offset = "0x8BBB88")]
			private UniTaskVoid RunTask0(UniTask<T0> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001120")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBBE8", Offset = "0x8BBBE8")]
			private UniTaskVoid RunTask1(UniTask task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001121")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x20003AF")]
		private class WhenAnyPromise<T>
		{
			[Token(Token = "0x20003B0")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000A78")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise<T> parent;

				[Token(Token = "0x1700014B")]
				public bool IsCompleted
				{
					[Token(Token = "0x6001131")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x6001130")]
				public Awaiter(WhenAnyPromise<T> parent)
				{
				}

				[Token(Token = "0x6001132")]
				public (int, T) GetResult()
				{
					return default((int, T));
				}

				[Token(Token = "0x6001133")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6001134")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003B1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B149C", Offset = "0x8B149C")]
			private struct <RunTask>d__8 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A79")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A7A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A7B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T> task;

				[Token(Token = "0x4000A7C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public WhenAnyPromise<T> <>4__this;

				[Token(Token = "0x4000A7D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int index;

				[Token(Token = "0x4000A7E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T>.Awaiter <>u__1;

				[Token(Token = "0x6001135")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001136")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T result;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int completeCount;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int winArgumentIndex;

			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action whenComplete;

			[Token(Token = "0x4000A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x1700014A")]
			public bool IsComplete
			{
				[Token(Token = "0x600112B")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600112C")]
			public WhenAnyPromise(UniTask<T>[] tasks)
			{
			}

			[Token(Token = "0x600112D")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBC68", Offset = "0x8BBC68")]
			private UniTaskVoid RunTask(UniTask<T> task, int index)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600112E")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600112F")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x20003B2")]
		private class WhenAnyPromise
		{
			[Token(Token = "0x20003B3")]
			public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
			{
				[Token(Token = "0x4000A83")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private WhenAnyPromise parent;

				[Token(Token = "0x1700014D")]
				public bool IsCompleted
				{
					[Token(Token = "0x600113D")]
					[Address(RVA = "0x1FD3400", Offset = "0x1FD3400", VA = "0x1FD3400")]
					get
					{
						return default(bool);
					}
				}

				[Token(Token = "0x600113C")]
				[Address(RVA = "0x1FD33F8", Offset = "0x1FD33F8", VA = "0x1FD33F8")]
				public Awaiter(WhenAnyPromise parent)
				{
				}

				[Token(Token = "0x600113E")]
				[Address(RVA = "0x1FD341C", Offset = "0x1FD341C", VA = "0x1FD341C")]
				public int GetResult()
				{
					return default(int);
				}

				[Token(Token = "0x600113F")]
				[Address(RVA = "0x1FD3460", Offset = "0x1FD3460", VA = "0x1FD3460", Slot = "5")]
				public void OnCompleted(Action continuation)
				{
				}

				[Token(Token = "0x6001140")]
				[Address(RVA = "0x1FD3464", Offset = "0x1FD3464", VA = "0x1FD3464", Slot = "4")]
				public void UnsafeOnCompleted(Action continuation)
				{
				}
			}

			[StructLayout(3)]
			[Token(Token = "0x20003B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14AC", Offset = "0x8B14AC")]
			private struct <RunTask>d__7 : IAsyncStateMachine
			{
				[Token(Token = "0x4000A84")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000A85")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000A86")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public UniTask task;

				[Token(Token = "0x4000A87")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public WhenAnyPromise <>4__this;

				[Token(Token = "0x4000A88")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public int index;

				[Token(Token = "0x4000A89")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private UniTask.Awaiter <>u__1;

				[Token(Token = "0x6001141")]
				[Address(RVA = "0x1FD3148", Offset = "0x1FD3148", VA = "0x1FD3148", Slot = "4")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001142")]
				[Address(RVA = "0x1FD33EC", Offset = "0x1FD33EC", VA = "0x1FD33EC", Slot = "5")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int completeCount;

			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int winArgumentIndex;

			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Action whenComplete;

			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x1700014C")]
			public bool IsComplete
			{
				[Token(Token = "0x6001137")]
				[Address(RVA = "0x1077D2C", Offset = "0x1077D2C", VA = "0x1077D2C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001138")]
			[Address(RVA = "0x1076908", Offset = "0x1076908", VA = "0x1076908")]
			public WhenAnyPromise(UniTask[] tasks)
			{
			}

			[Token(Token = "0x6001139")]
			[Address(RVA = "0x1077D64", Offset = "0x1077D64", VA = "0x1077D64")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BBCD8", Offset = "0x8BBCD8")]
			private UniTaskVoid RunTask(UniTask task, int index)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600113A")]
			[Address(RVA = "0x1077E14", Offset = "0x1077E14", VA = "0x1077E14")]
			private void TryCallContinuation()
			{
			}

			[Token(Token = "0x600113B")]
			[Address(RVA = "0x10769B4", Offset = "0x10769B4", VA = "0x10769B4")]
			public Awaiter GetAwaiter()
			{
				return default(Awaiter);
			}
		}

		[Token(Token = "0x20003B5")]
		private class AsyncUnitAwaiter : IAwaiter<AsyncUnit>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IAwaiter awaiter;

			[Token(Token = "0x1700014E")]
			public bool IsCompleted
			{
				[Token(Token = "0x6001144")]
				[Address(RVA = "0x1076A40", Offset = "0x1076A40", VA = "0x1076A40", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700014F")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x6001145")]
				[Address(RVA = "0x1076AF0", Offset = "0x1076AF0", VA = "0x1076AF0", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6001143")]
			[Address(RVA = "0x1076A14", Offset = "0x1076A14", VA = "0x1076A14")]
			public AsyncUnitAwaiter(IAwaiter awaiter)
			{
			}

			[Token(Token = "0x6001146")]
			[Address(RVA = "0x1076B9C", Offset = "0x1076B9C", VA = "0x1076B9C", Slot = "4")]
			public AsyncUnit GetResult()
			{
				return default(AsyncUnit);
			}

			[Token(Token = "0x6001147")]
			[Address(RVA = "0x1076C88", Offset = "0x1076C88", VA = "0x1076C88", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001148")]
			[Address(RVA = "0x1076D44", Offset = "0x1076D44", VA = "0x1076D44", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001149")]
			[Address(RVA = "0x1076E00", Offset = "0x1076E00", VA = "0x1076E00", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}
		}

		[Token(Token = "0x20003B6")]
		private class IsCanceledAwaiter : IAwaiter<bool>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IAwaiter awaiter;

			[Token(Token = "0x17000150")]
			public bool IsCompleted
			{
				[Token(Token = "0x600114B")]
				[Address(RVA = "0x1077468", Offset = "0x1077468", VA = "0x1077468", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000151")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x600114C")]
				[Address(RVA = "0x1077518", Offset = "0x1077518", VA = "0x1077518", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x600114A")]
			[Address(RVA = "0x107743C", Offset = "0x107743C", VA = "0x107743C")]
			public IsCanceledAwaiter(IAwaiter awaiter)
			{
			}

			[Token(Token = "0x600114D")]
			[Address(RVA = "0x10775C4", Offset = "0x10775C4", VA = "0x10775C4", Slot = "4")]
			public bool GetResult()
			{
				return default(bool);
			}

			[Token(Token = "0x600114E")]
			[Address(RVA = "0x10776FC", Offset = "0x10776FC", VA = "0x10776FC", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x600114F")]
			[Address(RVA = "0x10777B8", Offset = "0x10777B8", VA = "0x10777B8", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001150")]
			[Address(RVA = "0x1077874", Offset = "0x1077874", VA = "0x1077874", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}
		}

		[Token(Token = "0x20003B7")]
		public struct Awaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly UniTask task;

			[Token(Token = "0x17000152")]
			[DebuggerHidden]
			public bool IsCompleted
			{
				[Token(Token = "0x6001152")]
				[Address(RVA = "0x1076EB8", Offset = "0x1076EB8", VA = "0x1076EB8", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000153")]
			[DebuggerHidden]
			public AwaiterStatus Status
			{
				[Token(Token = "0x6001153")]
				[Address(RVA = "0x1076EE8", Offset = "0x1076EE8", VA = "0x1076EE8", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6001151")]
			[Address(RVA = "0x1076EB0", Offset = "0x1076EB0", VA = "0x1076EB0")]
			[DebuggerHidden]
			public Awaiter(UniTask task)
			{
			}

			[Token(Token = "0x6001154")]
			[Address(RVA = "0x1076F14", Offset = "0x1076F14", VA = "0x1076F14", Slot = "6")]
			[DebuggerHidden]
			public void GetResult()
			{
			}

			[Token(Token = "0x6001155")]
			[Address(RVA = "0x1076F40", Offset = "0x1076F40", VA = "0x1076F40", Slot = "8")]
			[DebuggerHidden]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001156")]
			[Address(RVA = "0x1077018", Offset = "0x1077018", VA = "0x1077018", Slot = "7")]
			[DebuggerHidden]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14BC", Offset = "0x8B14BC")]
		private struct <Run>d__24 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool configureAwait;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			private SwitchToThreadPoolAwaitable.Awaiter <>u__1;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001157")]
			[Address(RVA = "0x1075C10", Offset = "0x1075C10", VA = "0x1075C10", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001158")]
			[Address(RVA = "0x1075E84", Offset = "0x1075E84", VA = "0x1075E84", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003B9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14CC", Offset = "0x8B14CC")]
		private struct <Run>d__25 : IAsyncStateMachine
		{
			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action<object> action;

			[Token(Token = "0x4000A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public object state;

			[Token(Token = "0x4000A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool configureAwait;

			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			private SwitchToThreadPoolAwaitable.Awaiter <>u__1;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001159")]
			[Address(RVA = "0x1075E90", Offset = "0x1075E90", VA = "0x1075E90", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600115A")]
			[Address(RVA = "0x107611C", Offset = "0x107611C", VA = "0x107611C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14DC", Offset = "0x8B14DC")]
		private struct <Run>d__26<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T> func;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool configureAwait;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <result>5__2;

			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SwitchToThreadPoolAwaitable.Awaiter <>u__1;

			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x600115B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600115C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14EC", Offset = "0x8B14EC")]
		private struct <Run>d__27<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<object, T> func;

			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object state;

			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool configureAwait;

			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <result>5__2;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SwitchToThreadPoolAwaitable.Awaiter <>u__1;

			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x600115D")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600115E")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B14FC", Offset = "0x8B14FC")]
		private struct <WhenAll>d__39<T1, T2> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B29D0", Offset = "0x8B29D0")]
			public AsyncUniTaskMethodBuilder<(T1, T2)> <>t__builder;

			[Token(Token = "0x4000AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2>.Awaiter <>u__1;

			[Token(Token = "0x600115F")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001160")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B150C", Offset = "0x8B150C")]
		private struct <WhenAll>d__40<T1, T2, T3> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2A54", Offset = "0x8B2A54")]
			public AsyncUniTaskMethodBuilder<(T1, T2, T3)> <>t__builder;

			[Token(Token = "0x4000AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2, T3>.Awaiter <>u__1;

			[Token(Token = "0x6001161")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001162")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B151C", Offset = "0x8B151C")]
		private struct <WhenAll>d__41<T1, T2, T3, T4> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2AE8", Offset = "0x8B2AE8")]
			public AsyncUniTaskMethodBuilder<(T1, T2, T3, T4)> <>t__builder;

			[Token(Token = "0x4000AB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2, T3, T4>.Awaiter <>u__1;

			[Token(Token = "0x6001163")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001164")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B152C", Offset = "0x8B152C")]
		private struct <WhenAll>d__42<T1, T2, T3, T4, T5> : IAsyncStateMachine
		{
			[Token(Token = "0x4000ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2B8C", Offset = "0x8B2B8C")]
			public AsyncUniTaskMethodBuilder<(T1, T2, T3, T4, T5)> <>t__builder;

			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2, T3, T4, T5>.Awaiter <>u__1;

			[Token(Token = "0x6001165")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001166")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B153C", Offset = "0x8B153C")]
		private struct <WhenAll>d__43<T1, T2, T3, T4, T5, T6> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2C40", Offset = "0x8B2C40")]
			public AsyncUniTaskMethodBuilder<(T1, T2, T3, T4, T5, T6)> <>t__builder;

			[Token(Token = "0x4000AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T6> task6;

			[Token(Token = "0x4000ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2, T3, T4, T5, T6>.Awaiter <>u__1;

			[Token(Token = "0x6001167")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001168")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B154C", Offset = "0x8B154C")]
		private struct <WhenAll>d__44<T1, T2, T3, T4, T5, T6, T7> : IAsyncStateMachine
		{
			[Token(Token = "0x4000ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2D04", Offset = "0x8B2D04")]
			public AsyncUniTaskMethodBuilder<(T1, T2, T3, T4, T5, T6, T7)> <>t__builder;

			[Token(Token = "0x4000ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T6> task6;

			[Token(Token = "0x4000AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T7> task7;

			[Token(Token = "0x4000AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T1, T2, T3, T4, T5, T6, T7>.Awaiter <>u__1;

			[Token(Token = "0x6001169")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600116A")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B155C", Offset = "0x8B155C")]
		private struct <WhenAll>d__51<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T[]> <>t__builder;

			[Token(Token = "0x4000AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T>[] tasks;

			[Token(Token = "0x4000AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T>.Awaiter <>u__1;

			[Token(Token = "0x600116B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600116C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B156C", Offset = "0x8B156C")]
		private struct <WhenAll>d__52<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T[]> <>t__builder;

			[Token(Token = "0x4000ADC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<UniTask<T>> tasks;

			[Token(Token = "0x4000ADD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAllPromise<T>.Awaiter <>u__1;

			[Token(Token = "0x600116D")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600116E")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B157C", Offset = "0x8B157C")]
		private struct <WhenAll>d__53 : IAsyncStateMachine
		{
			[Token(Token = "0x4000ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000ADF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000AE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UniTask[] tasks;

			[Token(Token = "0x4000AE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private WhenAllPromise.Awaiter <>u__1;

			[Token(Token = "0x600116F")]
			[Address(RVA = "0x1076128", Offset = "0x1076128", VA = "0x1076128", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001170")]
			[Address(RVA = "0x10764B4", Offset = "0x10764B4", VA = "0x10764B4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B158C", Offset = "0x8B158C")]
		private struct <WhenAll>d__54 : IAsyncStateMachine
		{
			[Token(Token = "0x4000AE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000AE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IEnumerable<UniTask> tasks;

			[Token(Token = "0x4000AE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private WhenAllPromise.Awaiter <>u__1;

			[Token(Token = "0x6001171")]
			[Address(RVA = "0x10764C0", Offset = "0x10764C0", VA = "0x10764C0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001172")]
			[Address(RVA = "0x1076748", Offset = "0x1076748", VA = "0x1076748", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B159C", Offset = "0x8B159C")]
		private struct <WhenAny>d__57<T0, T1> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2DD8", Offset = "0x8B2DD8")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1))> <>t__builder;

			[Token(Token = "0x4000AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1>.Awaiter <>u__1;

			[Token(Token = "0x6001173")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001174")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15AC", Offset = "0x8B15AC")]
		private struct <WhenAny>d__58<T0, T1, T2> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2E98", Offset = "0x8B2E98")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2))> <>t__builder;

			[Token(Token = "0x4000AED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2>.Awaiter <>u__1;

			[Token(Token = "0x6001175")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001176")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15BC", Offset = "0x8B15BC")]
		private struct <WhenAny>d__59<T0, T1, T2, T3> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B2F74", Offset = "0x8B2F74")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3))> <>t__builder;

			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2, T3>.Awaiter <>u__1;

			[Token(Token = "0x6001177")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001178")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15CC", Offset = "0x8B15CC")]
		private struct <WhenAny>d__60<T0, T1, T2, T3, T4> : IAsyncStateMachine
		{
			[Token(Token = "0x4000AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3070", Offset = "0x8B3070")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4))> <>t__builder;

			[Token(Token = "0x4000AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2, T3, T4>.Awaiter <>u__1;

			[Token(Token = "0x6001179")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600117A")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15DC", Offset = "0x8B15DC")]
		private struct <WhenAny>d__61<T0, T1, T2, T3, T4, T5> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3188", Offset = "0x8B3188")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5))> <>t__builder;

			[Token(Token = "0x4000B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2, T3, T4, T5>.Awaiter <>u__1;

			[Token(Token = "0x600117B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600117C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15EC", Offset = "0x8B15EC")]
		private struct <WhenAny>d__62<T0, T1, T2, T3, T4, T5, T6> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B32C0", Offset = "0x8B32C0")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6))> <>t__builder;

			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000B0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000B0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000B10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000B11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T6> task6;

			[Token(Token = "0x4000B12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6>.Awaiter <>u__1;

			[Token(Token = "0x600117D")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600117E")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B15FC", Offset = "0x8B15FC")]
		private struct <WhenAny>d__63<T0, T1, T2, T3, T4, T5, T6, T7> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3414", Offset = "0x8B3414")]
			public AsyncUniTaskMethodBuilder<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6), (bool, T7))> <>t__builder;

			[Token(Token = "0x4000B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T1> task1;

			[Token(Token = "0x4000B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T2> task2;

			[Token(Token = "0x4000B18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T3> task3;

			[Token(Token = "0x4000B19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T4> task4;

			[Token(Token = "0x4000B1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T5> task5;

			[Token(Token = "0x4000B1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T6> task6;

			[Token(Token = "0x4000B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T7> task7;

			[Token(Token = "0x4000B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T0, T1, T2, T3, T4, T5, T6, T7>.Awaiter <>u__1;

			[Token(Token = "0x600117F")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001180")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B160C", Offset = "0x8B160C")]
		private struct <WhenAny>d__71<T0> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B358C", Offset = "0x8B358C")]
			public AsyncUniTaskMethodBuilder<(bool, T0)> <>t__builder;

			[Token(Token = "0x4000B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T0> task0;

			[Token(Token = "0x4000B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask task1;

			[Token(Token = "0x4000B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnitWhenAnyPromise<T0>.Awaiter <>u__1;

			[Token(Token = "0x6001181")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001182")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B161C", Offset = "0x8B161C")]
		private struct <WhenAny>d__72<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3610", Offset = "0x8B3610")]
			public AsyncUniTaskMethodBuilder<(int, T)> <>t__builder;

			[Token(Token = "0x4000B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T>[] tasks;

			[Token(Token = "0x4000B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private WhenAnyPromise<T>.Awaiter <>u__1;

			[Token(Token = "0x6001183")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001184")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B162C", Offset = "0x8B162C")]
		private struct <WhenAny>d__73 : IAsyncStateMachine
		{
			[Token(Token = "0x4000B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder<int> <>t__builder;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniTask[] tasks;

			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WhenAnyPromise.Awaiter <>u__1;

			[Token(Token = "0x6001185")]
			[Address(RVA = "0x1076754", Offset = "0x1076754", VA = "0x1076754", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001186")]
			[Address(RVA = "0x10769B8", Offset = "0x10769B8", VA = "0x10769B8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B163C", Offset = "0x8B163C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6001188")]
			[Address(RVA = "0x1075B74", Offset = "0x1075B74", VA = "0x1075B74")]
			public <>c()
			{
			}

			[Token(Token = "0x6001189")]
			[Address(RVA = "0x1075B7C", Offset = "0x1075B7C", VA = "0x1075B7C")]
			internal UniTask <.cctor>b__96_0()
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UniTask CanceledUniTask;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly UniTask<AsyncUnit> DefaultAsyncUnitTask;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IAwaiter awaiter;

		[Token(Token = "0x1700012F")]
		public static UniTask CompletedTask
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0x10AFDD0", Offset = "0x10AFDD0", VA = "0x10AFDD0")]
			get
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x17000130")]
		[DebuggerHidden]
		public AwaiterStatus Status
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0x10B0580", Offset = "0x10B0580", VA = "0x10B0580")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x17000131")]
		[DebuggerHidden]
		public bool IsCompleted
		{
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0x10B0638", Offset = "0x10B0638", VA = "0x10B0638")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x10AF86C", Offset = "0x10AF86C", VA = "0x10AF86C")]
		public static IEnumerator ToCoroutine(Func<UniTask> taskFactory)
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x10AF938", Offset = "0x10AF938", VA = "0x10AF938")]
		public static YieldAwaitable Yield(PlayerLoopTiming timing = PlayerLoopTiming.Update)
		{
			return default(YieldAwaitable);
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x10AF940", Offset = "0x10AF940", VA = "0x10AF940")]
		public static UniTask Yield(PlayerLoopTiming timing, CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x10AF9B0", Offset = "0x10AF9B0", VA = "0x10AF9B0")]
		public static UniTask<int> DelayFrame(int delayFrameCount, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask<int>);
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x10AFABC", Offset = "0x10AFABC", VA = "0x10AFABC")]
		public static UniTask Delay(int millisecondsDelay, bool ignoreTimeScale = false, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x10AFC4C", Offset = "0x10AFC4C", VA = "0x10AFC4C")]
		public static UniTask Delay(TimeSpan delayTimeSpan, bool ignoreTimeScale = false, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x10AFDD8", Offset = "0x10AFDD8", VA = "0x10AFDD8")]
		public static UniTask FromException(Exception ex)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F75")]
		public static UniTask<T> FromException<T>(Exception ex)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F76")]
		public static UniTask<T> FromResult<T>(T value)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x10AFE74", Offset = "0x10AFE74", VA = "0x10AFE74")]
		public static UniTask FromCanceled()
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F78")]
		public static UniTask<T> FromCanceled<T>()
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x10AFED8", Offset = "0x10AFED8", VA = "0x10AFED8")]
		public static UniTask FromCanceled(CancellationToken token)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F7A")]
		public static UniTask<T> FromCanceled<T>(CancellationToken token)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F7B")]
		public static UniTask<T> Lazy<T>(Func<UniTask<T>> factory)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x10AFFA8", Offset = "0x10AFFA8", VA = "0x10AFFA8")]
		public static void Void(Func<UniTask> asyncAction)
		{
		}

		[Token(Token = "0x6000F7D")]
		public static void Void<T>(Func<T, UniTask> asyncAction, T state)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x10B0004", Offset = "0x10B0004", VA = "0x10B0004")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9648", Offset = "0x8B9648")]
		public static UniTask Run(Action action, bool configureAwait = true)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x10B00B0", Offset = "0x10B00B0", VA = "0x10B00B0")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B96A8", Offset = "0x8B96A8")]
		public static UniTask Run(Action<object> action, object state, bool configureAwait = true)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F80")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9708", Offset = "0x8B9708")]
		public static UniTask<T> Run<T>(Func<T> func, bool configureAwait = true)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F81")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9768", Offset = "0x8B9768")]
		public static UniTask<T> Run<T>(Func<object, T> func, object state, bool configureAwait = true)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x10B0160", Offset = "0x10B0160", VA = "0x10B0160")]
		public static SwitchToMainThreadAwaitable SwitchToMainThread()
		{
			return default(SwitchToMainThreadAwaitable);
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x10B0168", Offset = "0x10B0168", VA = "0x10B0168")]
		public static SwitchToThreadPoolAwaitable SwitchToThreadPool()
		{
			return default(SwitchToThreadPoolAwaitable);
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x10B0170", Offset = "0x10B0170", VA = "0x10B0170")]
		public static SwitchToTaskPoolAwaitable SwitchToTaskPool()
		{
			return default(SwitchToTaskPoolAwaitable);
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x10B0178", Offset = "0x10B0178", VA = "0x10B0178")]
		public static SwitchToSynchronizationContextAwaitable SwitchToSynchronizationContext(SynchronizationContext syncContext)
		{
			return default(SwitchToSynchronizationContextAwaitable);
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x10B01DC", Offset = "0x10B01DC", VA = "0x10B01DC")]
		public static UniTask WaitUntil(Func<bool> predicate, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x10B0260", Offset = "0x10B0260", VA = "0x10B0260")]
		public static UniTask WaitWhile(Func<bool> predicate, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F88")]
		public static UniTask<U> WaitUntilValueChanged<T, U>(T target, Func<T, U> monitorFunction, PlayerLoopTiming monitorTiming = PlayerLoopTiming.Update, [Optional] IEqualityComparer<U> equalityComparer, [Optional] CancellationToken cancellationToken) where T : class
		{
			return default(UniTask<U>);
		}

		[Token(Token = "0x6000F89")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B97C8", Offset = "0x8B97C8")]
		public static UniTask<(T1, T2)> WhenAll<T1, T2>(UniTask<T1> task1, UniTask<T2> task2)
		{
			return default(UniTask<(T1, T2)>);
		}

		[Token(Token = "0x6000F8A")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9828", Offset = "0x8B9828")]
		public static UniTask<(T1, T2, T3)> WhenAll<T1, T2, T3>(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3)
		{
			return default(UniTask<(T1, T2, T3)>);
		}

		[Token(Token = "0x6000F8B")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9888", Offset = "0x8B9888")]
		public static UniTask<(T1, T2, T3, T4)> WhenAll<T1, T2, T3, T4>(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4)
		{
			return default(UniTask<(T1, T2, T3, T4)>);
		}

		[Token(Token = "0x6000F8C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B98E8", Offset = "0x8B98E8")]
		public static UniTask<(T1, T2, T3, T4, T5)> WhenAll<T1, T2, T3, T4, T5>(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5)
		{
			return default(UniTask<(T1, T2, T3, T4, T5)>);
		}

		[Token(Token = "0x6000F8D")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9948", Offset = "0x8B9948")]
		public static UniTask<(T1, T2, T3, T4, T5, T6)> WhenAll<T1, T2, T3, T4, T5, T6>(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6)
		{
			return default(UniTask<(T1, T2, T3, T4, T5, T6)>);
		}

		[Token(Token = "0x6000F8E")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B99A8", Offset = "0x8B99A8")]
		public static UniTask<(T1, T2, T3, T4, T5, T6, T7)> WhenAll<T1, T2, T3, T4, T5, T6, T7>(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7)
		{
			return default(UniTask<(T1, T2, T3, T4, T5, T6, T7)>);
		}

		[Token(Token = "0x6000F8F")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9A08", Offset = "0x8B9A08")]
		public static UniTask<T[]> WhenAll<T>(params UniTask<T>[] tasks)
		{
			return default(UniTask<T[]>);
		}

		[Token(Token = "0x6000F90")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9A68", Offset = "0x8B9A68")]
		public static UniTask<T[]> WhenAll<T>(IEnumerable<UniTask<T>> tasks)
		{
			return default(UniTask<T[]>);
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x10B02E4", Offset = "0x10B02E4", VA = "0x10B02E4")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9AC8", Offset = "0x8B9AC8")]
		public static UniTask WhenAll(params UniTask[] tasks)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x10B037C", Offset = "0x10B037C", VA = "0x10B037C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9B28", Offset = "0x8B9B28")]
		public static UniTask WhenAll(IEnumerable<UniTask> tasks)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6000F93")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9B88", Offset = "0x8B9B88")]
		public static UniTask<(int, (bool, T0), (bool, T1))> WhenAny<T0, T1>(UniTask<T0> task0, UniTask<T1> task1)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1))>);
		}

		[Token(Token = "0x6000F94")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9BE8", Offset = "0x8B9BE8")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2))> WhenAny<T0, T1, T2>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2))>);
		}

		[Token(Token = "0x6000F95")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9C48", Offset = "0x8B9C48")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3))> WhenAny<T0, T1, T2, T3>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3))>);
		}

		[Token(Token = "0x6000F96")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9CA8", Offset = "0x8B9CA8")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4))> WhenAny<T0, T1, T2, T3, T4>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4))>);
		}

		[Token(Token = "0x6000F97")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9D08", Offset = "0x8B9D08")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5))> WhenAny<T0, T1, T2, T3, T4, T5>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5))>);
		}

		[Token(Token = "0x6000F98")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9D68", Offset = "0x8B9D68")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6))> WhenAny<T0, T1, T2, T3, T4, T5, T6>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6))>);
		}

		[Token(Token = "0x6000F99")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9DC8", Offset = "0x8B9DC8")]
		public static UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6), (bool, T7))> WhenAny<T0, T1, T2, T3, T4, T5, T6, T7>(UniTask<T0> task0, UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7)
		{
			return default(UniTask<(int, (bool, T0), (bool, T1), (bool, T2), (bool, T3), (bool, T4), (bool, T5), (bool, T6), (bool, T7))>);
		}

		[Token(Token = "0x6000F9A")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9E28", Offset = "0x8B9E28")]
		public static UniTask<(bool, T0)> WhenAny<T0>(UniTask<T0> task0, UniTask task1)
		{
			return default(UniTask<(bool, T0)>);
		}

		[Token(Token = "0x6000F9B")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9E88", Offset = "0x8B9E88")]
		public static UniTask<(int, T)> WhenAny<T>(params UniTask<T>[] tasks)
		{
			return default(UniTask<(int, T)>);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x10B0414", Offset = "0x10B0414", VA = "0x10B0414")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8B9EE8", Offset = "0x8B9EE8")]
		public static UniTask<int> WhenAny(params UniTask[] tasks)
		{
			return default(UniTask<int>);
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x10B050C", Offset = "0x10B050C", VA = "0x10B050C")]
		[DebuggerHidden]
		public UniTask(IAwaiter awaiter)
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x10B0514", Offset = "0x10B0514", VA = "0x10B0514")]
		[DebuggerHidden]
		public UniTask(Func<UniTask> factory)
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x10B06F4", Offset = "0x10B06F4", VA = "0x10B06F4")]
		[DebuggerHidden]
		public void GetResult()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x10B07AC", Offset = "0x10B07AC", VA = "0x10B07AC")]
		[DebuggerHidden]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x10B07B4", Offset = "0x10B07B4", VA = "0x10B07B4")]
		public UniTask<bool> SuppressCancellationThrow()
		{
			return default(UniTask<bool>);
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x10B08D0", Offset = "0x10B08D0", VA = "0x10B08D0", Slot = "4")]
		public bool Equals(UniTask other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x10B08FC", Offset = "0x10B08FC", VA = "0x10B08FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x10B0914", Offset = "0x10B0914", VA = "0x10B0914", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x10B0AE8", Offset = "0x10B0AE8", VA = "0x10B0AE8")]
		public static implicit operator UniTask<AsyncUnit>(UniTask task)
		{
			return default(UniTask<AsyncUnit>);
		}
	}
	[Token(Token = "0x20003D1")]
	public struct YieldAwaitable
	{
		[Token(Token = "0x20003D2")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly PlayerLoopTiming timing;

			[Token(Token = "0x17000154")]
			public bool IsCompleted
			{
				[Token(Token = "0x600118E")]
				[Address(RVA = "0x1FCF7C0", Offset = "0x1FCF7C0", VA = "0x1FCF7C0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600118D")]
			[Address(RVA = "0x1FCF7B8", Offset = "0x1FCF7B8", VA = "0x1FCF7B8")]
			public Awaiter(PlayerLoopTiming timing)
			{
			}

			[Token(Token = "0x600118F")]
			[Address(RVA = "0x1FCF7C8", Offset = "0x1FCF7C8", VA = "0x1FCF7C8")]
			public void GetResult()
			{
			}

			[Token(Token = "0x6001190")]
			[Address(RVA = "0x1FCF7CC", Offset = "0x1FCF7CC", VA = "0x1FCF7CC", Slot = "5")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001191")]
			[Address(RVA = "0x1FCF7D8", Offset = "0x1FCF7D8", VA = "0x1FCF7D8", Slot = "4")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PlayerLoopTiming timing;

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x10B879C", Offset = "0x10B879C", VA = "0x10B879C")]
		public YieldAwaitable(PlayerLoopTiming timing)
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x10B87A4", Offset = "0x10B87A4", VA = "0x10B87A4")]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x10B87AC", Offset = "0x10B87AC", VA = "0x10B87AC")]
		public UniTask ToUniTask()
		{
			return default(UniTask);
		}
	}
	[Token(Token = "0x20003D3")]
	internal static class CompletedTasks
	{
		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UniTask<bool> True;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly UniTask<bool> False;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly UniTask<int> Zero;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly UniTask<int> MinusOne;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly UniTask<int> One;
	}
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x20003D4")]
	public struct SwitchToMainThreadAwaitable
	{
		[StructLayout(0, Size = 1)]
		[Token(Token = "0x20003D5")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x17000155")]
			public bool IsCompleted
			{
				[Token(Token = "0x6001194")]
				[Address(RVA = "0x1074B08", Offset = "0x1074B08", VA = "0x1074B08")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001195")]
			[Address(RVA = "0x1074B78", Offset = "0x1074B78", VA = "0x1074B78")]
			public void GetResult()
			{
			}

			[Token(Token = "0x6001196")]
			[Address(RVA = "0x1074B7C", Offset = "0x1074B7C", VA = "0x1074B7C", Slot = "5")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001197")]
			[Address(RVA = "0x1074B88", Offset = "0x1074B88", VA = "0x1074B88", Slot = "4")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x14DBFA4", Offset = "0x14DBFA4", VA = "0x14DBFA4")]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}
	}
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x20003D6")]
	public struct SwitchToThreadPoolAwaitable
	{
		[StructLayout(0, Size = 1)]
		[Token(Token = "0x20003D7")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly WaitCallback switchToCallback;

			[Token(Token = "0x17000156")]
			public bool IsCompleted
			{
				[Token(Token = "0x6001199")]
				[Address(RVA = "0x1075248", Offset = "0x1075248", VA = "0x1075248")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600119A")]
			[Address(RVA = "0x1075250", Offset = "0x1075250", VA = "0x1075250")]
			public void GetResult()
			{
			}

			[Token(Token = "0x600119B")]
			[Address(RVA = "0x1075254", Offset = "0x1075254", VA = "0x1075254", Slot = "5")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x600119C")]
			[Address(RVA = "0x10752C4", Offset = "0x10752C4", VA = "0x10752C4", Slot = "4")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x600119D")]
			[Address(RVA = "0x1075334", Offset = "0x1075334", VA = "0x1075334")]
			private static void Callback(object state)
			{
			}
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x14DBFC4", Offset = "0x14DBFC4", VA = "0x14DBFC4")]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}
	}
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x20003D8")]
	public struct SwitchToTaskPoolAwaitable
	{
		[StructLayout(0, Size = 1)]
		[Token(Token = "0x20003D9")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Action<object> switchToCallback;

			[Token(Token = "0x17000157")]
			public bool IsCompleted
			{
				[Token(Token = "0x60011A0")]
				[Address(RVA = "0x1074DC0", Offset = "0x1074DC0", VA = "0x1074DC0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60011A1")]
			[Address(RVA = "0x1074DC8", Offset = "0x1074DC8", VA = "0x1074DC8")]
			public void GetResult()
			{
			}

			[Token(Token = "0x60011A2")]
			[Address(RVA = "0x1074DCC", Offset = "0x1074DCC", VA = "0x1074DCC", Slot = "5")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x1074F84", Offset = "0x1074F84", VA = "0x1074F84", Slot = "4")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011A4")]
			[Address(RVA = "0x107513C", Offset = "0x107513C", VA = "0x107513C")]
			private static void Callback(object state)
			{
			}
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x14DBFBC", Offset = "0x14DBFBC", VA = "0x14DBFBC")]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}
	}
	[Token(Token = "0x20003DA")]
	public struct SwitchToSynchronizationContextAwaitable
	{
		[Token(Token = "0x20003DB")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly SendOrPostCallback switchToCallback;

			[Token(Token = "0x4000B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly SynchronizationContext synchronizationContext;

			[Token(Token = "0x17000158")]
			public bool IsCompleted
			{
				[Token(Token = "0x60011A9")]
				[Address(RVA = "0x1074B9C", Offset = "0x1074B9C", VA = "0x1074B9C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60011A8")]
			[Address(RVA = "0x1074B94", Offset = "0x1074B94", VA = "0x1074B94")]
			public Awaiter(SynchronizationContext synchronizationContext)
			{
			}

			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x1074BA4", Offset = "0x1074BA4", VA = "0x1074BA4")]
			public void GetResult()
			{
			}

			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x1074BA8", Offset = "0x1074BA8", VA = "0x1074BA8", Slot = "5")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x1074C38", Offset = "0x1074C38", VA = "0x1074C38", Slot = "4")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x1074CC8", Offset = "0x1074CC8", VA = "0x1074CC8")]
			private static void Callback(object state)
			{
			}
		}

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SynchronizationContext synchronizationContext;

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x14DBFAC", Offset = "0x14DBFAC", VA = "0x14DBFAC")]
		public SwitchToSynchronizationContextAwaitable(SynchronizationContext synchronizationContext)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x14DBFB4", Offset = "0x14DBFB4", VA = "0x14DBFB4")]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}
	}
	[Token(Token = "0x20003DC")]
	[AttributeAttribute(Name = "AsyncMethodBuilderAttribute", RVA = "0x8B164C", Offset = "0x8B164C")]
	public struct UniTask<T> : IEquatable<UniTask<T>>
	{
		[Token(Token = "0x20003DD")]
		private class IsCanceledAwaiter : IAwaiter<(bool, T)>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IAwaiter<T> awaiter;

			[Token(Token = "0x1700015C")]
			public bool IsCompleted
			{
				[Token(Token = "0x60011BC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015D")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60011BD")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60011BB")]
			public IsCanceledAwaiter(IAwaiter<T> awaiter)
			{
			}

			[Token(Token = "0x60011BE")]
			public (bool, T) GetResult()
			{
				return default((bool, T));
			}

			[Token(Token = "0x60011BF")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011C0")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011C1")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}
		}

		[Token(Token = "0x20003DE")]
		public struct Awaiter : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly UniTask<T> task;

			[Token(Token = "0x1700015E")]
			[DebuggerHidden]
			public bool IsCompleted
			{
				[Token(Token = "0x60011C3")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015F")]
			[DebuggerHidden]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60011C4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60011C2")]
			[DebuggerHidden]
			public Awaiter(UniTask<T> task)
			{
			}

			[Token(Token = "0x60011C5")]
			[DebuggerHidden]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}

			[Token(Token = "0x60011C6")]
			[DebuggerHidden]
			public T GetResult()
			{
				return (T)null;
			}

			[Token(Token = "0x60011C7")]
			[DebuggerHidden]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60011C8")]
			[DebuggerHidden]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T result;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IAwaiter<T> awaiter;

		[Token(Token = "0x17000159")]
		[DebuggerHidden]
		public AwaiterStatus Status
		{
			[Token(Token = "0x60011B2")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x1700015A")]
		[DebuggerHidden]
		public bool IsCompleted
		{
			[Token(Token = "0x60011B3")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015B")]
		[DebuggerHidden]
		public T Result
		{
			[Token(Token = "0x60011B4")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60011AF")]
		[DebuggerHidden]
		public UniTask(T result)
		{
		}

		[Token(Token = "0x60011B0")]
		[DebuggerHidden]
		public UniTask(IAwaiter<T> awaiter)
		{
		}

		[Token(Token = "0x60011B1")]
		[DebuggerHidden]
		public UniTask(Func<UniTask<T>> factory)
		{
		}

		[Token(Token = "0x60011B5")]
		[DebuggerHidden]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}

		[Token(Token = "0x60011B6")]
		public UniTask<(bool, T)> SuppressCancellationThrow()
		{
			return default(UniTask<(bool, T)>);
		}

		[Token(Token = "0x60011B7")]
		public bool Equals(UniTask<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B8")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011B9")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60011BA")]
		public static implicit operator UniTask(UniTask<T> task)
		{
			return default(UniTask);
		}
	}
	[Token(Token = "0x20003DF")]
	internal class ExceptionHolder
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ExceptionDispatchInfo exception;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool calledGet;

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x1693304", Offset = "0x1693304", VA = "0x1693304")]
		public ExceptionHolder(ExceptionDispatchInfo exception)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x1693330", Offset = "0x1693330", VA = "0x1693330")]
		public ExceptionDispatchInfo GetException()
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x16933AC", Offset = "0x16933AC", VA = "0x16933AC", Slot = "1")]
		~ExceptionHolder()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public interface IResolvePromise
	{
		[Token(Token = "0x60011CC")]
		bool TrySetResult();
	}
	[Token(Token = "0x20003E1")]
	public interface IResolvePromise<T>
	{
		[Token(Token = "0x60011CD")]
		bool TrySetResult(T value);
	}
	[Token(Token = "0x20003E2")]
	public interface IRejectPromise
	{
		[Token(Token = "0x60011CE")]
		bool TrySetException(Exception exception);
	}
	[Token(Token = "0x20003E3")]
	public interface ICancelPromise
	{
		[Token(Token = "0x60011CF")]
		bool TrySetCanceled();
	}
	[Token(Token = "0x20003E4")]
	public interface IPromise<T> : IResolvePromise<T>, IRejectPromise, ICancelPromise
	{
	}
	[Token(Token = "0x20003E5")]
	public interface IPromise : IResolvePromise, IRejectPromise, ICancelPromise
	{
	}
	[Token(Token = "0x20003E6")]
	public class UniTaskCompletionSource : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPromise, IResolvePromise, IRejectPromise, ICancelPromise
	{
		[Token(Token = "0x4000B3E")]
		private const int Pending = 0;

		[Token(Token = "0x4000B3F")]
		private const int Succeeded = 1;

		[Token(Token = "0x4000B40")]
		private const int Faulted = 2;

		[Token(Token = "0x4000B41")]
		private const int Canceled = 3;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int state;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool handled;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ExceptionHolder exception;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object continuation;

		[Token(Token = "0x17000160")]
		private AwaiterStatus UniRx.Async.IAwaiter.Status
		{
			[Token(Token = "0x60011D0")]
			[Address(RVA = "0x10B0DB0", Offset = "0x10B0DB0", VA = "0x10B0DB0", Slot = "4")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x17000161")]
		private bool UniRx.Async.IAwaiter.IsCompleted
		{
			[Token(Token = "0x60011D1")]
			[Address(RVA = "0x10B0DB8", Offset = "0x10B0DB8", VA = "0x10B0DB8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		public UniTask Task
		{
			[Token(Token = "0x60011D2")]
			[Address(RVA = "0x10B0DC8", Offset = "0x10B0DC8", VA = "0x10B0DC8")]
			get
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x10B0DCC", Offset = "0x10B0DCC", VA = "0x10B0DCC")]
		public UniTaskCompletionSource()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x10B0DD4", Offset = "0x10B0DD4", VA = "0x10B0DD4")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8BBF98", Offset = "0x8BBF98")]
		internal void MarkHandled()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x10B0DEC", Offset = "0x10B0DEC", VA = "0x10B0DEC", Slot = "6")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x10B0ECC", Offset = "0x10B0ECC", VA = "0x10B0ECC", Slot = "7")]
		private void System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x10B1118", Offset = "0x10B1118", VA = "0x10B1118")]
		private void TryInvokeContinuation()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x10B1258", Offset = "0x10B1258", VA = "0x10B1258", Slot = "9")]
		public bool TrySetResult()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x10B12A0", Offset = "0x10B12A0", VA = "0x10B12A0", Slot = "10")]
		public bool TrySetException(Exception exception)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x10B134C", Offset = "0x10B134C", VA = "0x10B134C", Slot = "11")]
		public bool TrySetCanceled()
		{
			return default(bool);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x10B1394", Offset = "0x10B1394", VA = "0x10B1394")]
		public bool TrySetCanceled(OperationCanceledException exception)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x10B1440", Offset = "0x10B1440", VA = "0x10B1440", Slot = "8")]
		private void System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(Action continuation)
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class UniTaskCompletionSource<T> : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPromise<T>, IResolvePromise<T>, IRejectPromise, ICancelPromise
	{
		[Token(Token = "0x4000B46")]
		private const int Pending = 0;

		[Token(Token = "0x4000B47")]
		private const int Succeeded = 1;

		[Token(Token = "0x4000B48")]
		private const int Faulted = 2;

		[Token(Token = "0x4000B49")]
		private const int Canceled = 3;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int state;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool handled;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ExceptionHolder exception;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object continuation;

		[Token(Token = "0x17000163")]
		private bool UniRx.Async.IAwaiter.IsCompleted
		{
			[Token(Token = "0x60011DD")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000164")]
		public UniTask<T> Task
		{
			[Token(Token = "0x60011DE")]
			get
			{
				return default(UniTask<T>);
			}
		}

		[Token(Token = "0x17000165")]
		public UniTask UnitTask
		{
			[Token(Token = "0x60011DF")]
			get
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x17000166")]
		private AwaiterStatus UniRx.Async.IAwaiter.Status
		{
			[Token(Token = "0x60011E0")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x60011E1")]
		public UniTaskCompletionSource()
		{
		}

		[Token(Token = "0x60011E2")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8BBFD0", Offset = "0x8BBFD0")]
		internal void MarkHandled()
		{
		}

		[Token(Token = "0x60011E3")]
		private T UniRx.Async.IAwaiter<T>.GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x60011E4")]
		private void System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60011E5")]
		private void TryInvokeContinuation()
		{
		}

		[Token(Token = "0x60011E6")]
		public bool TrySetResult(T value)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E7")]
		public bool TrySetException(Exception exception)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E8")]
		public bool TrySetCanceled()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E9")]
		public bool TrySetCanceled(OperationCanceledException exception)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EA")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60011EB")]
		private void System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(Action continuation)
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public static class UniTaskExtensions
	{
		[Token(Token = "0x20003E9")]
		private class ToCoroutineEnumerator : IEnumerator
		{
			[StructLayout(3)]
			[Token(Token = "0x20003EA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B16BC", Offset = "0x8B16BC")]
			private struct <RunTask>d__6 : IAsyncStateMachine
			{
				[Token(Token = "0x4000B54")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000B55")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000B56")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public UniTask task;

				[Token(Token = "0x4000B57")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public ToCoroutineEnumerator <>4__this;

				[Token(Token = "0x4000B58")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private UniTask.Awaiter <>u__1;

				[Token(Token = "0x6001218")]
				[Address(RVA = "0x1FD34CC", Offset = "0x1FD34CC", VA = "0x1FD34CC", Slot = "4")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001219")]
				[Address(RVA = "0x1FD382C", Offset = "0x1FD382C", VA = "0x1FD382C", Slot = "5")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool completed;

			[Token(Token = "0x4000B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UniTask task;

			[Token(Token = "0x4000B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Action<Exception> exceptionHandler;

			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool isStarted;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x17000167")]
			public object Current
			{
				[Token(Token = "0x6001215")]
				[Address(RVA = "0x10792C4", Offset = "0x10792C4", VA = "0x10792C4", Slot = "5")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001213")]
			[Address(RVA = "0x10791DC", Offset = "0x10791DC", VA = "0x10791DC")]
			public ToCoroutineEnumerator(UniTask task, Action<Exception> exceptionHandler)
			{
			}

			[Token(Token = "0x6001214")]
			[Address(RVA = "0x1079218", Offset = "0x1079218", VA = "0x1079218")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BCA18", Offset = "0x8BCA18")]
			private UniTaskVoid RunTask(UniTask task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x6001216")]
			[Address(RVA = "0x10792CC", Offset = "0x10792CC", VA = "0x10792CC", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001217")]
			[Address(RVA = "0x1079384", Offset = "0x1079384", VA = "0x1079384", Slot = "6")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x20003EB")]
		private class ToCoroutineEnumerator<T> : IEnumerator
		{
			[StructLayout(3)]
			[Token(Token = "0x20003EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B16CC", Offset = "0x8B16CC")]
			private struct <RunTask>d__8 : IAsyncStateMachine
			{
				[Token(Token = "0x4000B60")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int <>1__state;

				[Token(Token = "0x4000B61")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public AsyncUniTaskVoidMethodBuilder <>t__builder;

				[Token(Token = "0x4000B62")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public UniTask<T> task;

				[Token(Token = "0x4000B63")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public ToCoroutineEnumerator<T> <>4__this;

				[Token(Token = "0x4000B64")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private UniTask<T>.Awaiter <>u__1;

				[Token(Token = "0x600121F")]
				private void MoveNext()
				{
				}

				[Token(Token = "0x6001220")]
				[DebuggerHidden]
				private void SetStateMachine(IAsyncStateMachine stateMachine)
				{
				}
			}

			[Token(Token = "0x4000B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool completed;

			[Token(Token = "0x4000B5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action<T> resultHandler;

			[Token(Token = "0x4000B5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action<Exception> exceptionHandler;

			[Token(Token = "0x4000B5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool isStarted;

			[Token(Token = "0x4000B5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T> task;

			[Token(Token = "0x4000B5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object current;

			[Token(Token = "0x4000B5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExceptionDispatchInfo exception;

			[Token(Token = "0x17000168")]
			public object Current
			{
				[Token(Token = "0x600121C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600121A")]
			public ToCoroutineEnumerator(UniTask<T> task, Action<T> resultHandler, Action<Exception> exceptionHandler)
			{
			}

			[Token(Token = "0x600121B")]
			[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BCA88", Offset = "0x8BCA88")]
			private UniTaskVoid RunTask(UniTask<T> task)
			{
				return default(UniTaskVoid);
			}

			[Token(Token = "0x600121D")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600121E")]
			public void Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B16DC", Offset = "0x8B16DC")]
		private sealed class <>c__9<T>
		{
			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__9<T> <>9;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<Task<T>, object> <>9__9_0;

			[Token(Token = "0x6001222")]
			public <>c__9()
			{
			}

			[Token(Token = "0x6001223")]
			internal void <AsUniTask>b__9_0(Task<T> x, object state)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B16EC", Offset = "0x8B16EC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Task, object> <>9__10_0;

			[Token(Token = "0x6001225")]
			[Address(RVA = "0x1077F0C", Offset = "0x1077F0C", VA = "0x1077F0C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001226")]
			[Address(RVA = "0x1077F14", Offset = "0x1077F14", VA = "0x1077F14")]
			internal void <AsUniTask>b__10_0(Task x, object state)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B16FC", Offset = "0x8B16FC")]
		private struct <Timeout>d__14<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TimeSpan timeout;

			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool ignoreTimeScale;

			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PlayerLoopTiming timeoutCheckTiming;

			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationTokenSource taskCancellationTokenSource;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CancellationTokenSource <delayCancellationTokenSource>5__2;

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3694", Offset = "0x8B3694")]
			private UniTask<(bool, (bool, T))>.Awaiter <>u__1;

			[Token(Token = "0x6001227")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001228")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B170C", Offset = "0x8B170C")]
		private struct <TimeoutWithoutException>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder<bool> <>t__builder;

			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniTask task;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TimeSpan timeout;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool ignoreTimeScale;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public PlayerLoopTiming timeoutCheckTiming;

			[Token(Token = "0x4000B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CancellationTokenSource taskCancellationTokenSource;

			[Token(Token = "0x4000B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3738", Offset = "0x8B3738")]
			private UniTask<(bool, AsyncUnit)>.Awaiter <>u__1;

			[Token(Token = "0x6001229")]
			[Address(RVA = "0x1078F64", Offset = "0x1078F64", VA = "0x1078F64", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600122A")]
			[Address(RVA = "0x1079180", Offset = "0x1079180", VA = "0x1079180", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B171C", Offset = "0x8B171C")]
		private struct <TimeoutWithoutException>d__16<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B37BC", Offset = "0x8B37BC")]
			public AsyncUniTaskMethodBuilder<(bool, T)> <>t__builder;

			[Token(Token = "0x4000B7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TimeSpan timeout;

			[Token(Token = "0x4000B7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool ignoreTimeScale;

			[Token(Token = "0x4000B7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PlayerLoopTiming timeoutCheckTiming;

			[Token(Token = "0x4000B7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CancellationTokenSource taskCancellationTokenSource;

			[Token(Token = "0x4000B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private CancellationTokenSource <delayCancellationTokenSource>5__2;

			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3840", Offset = "0x8B3840")]
			private UniTask<(bool, (bool, T))>.Awaiter <>u__1;

			[Token(Token = "0x600122B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600122C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B172C", Offset = "0x8B172C")]
		private struct <ForgetCore>d__19 : IAsyncStateMachine
		{
			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UniTask task;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x600122D")]
			[Address(RVA = "0x1078930", Offset = "0x1078930", VA = "0x1078930", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600122E")]
			[Address(RVA = "0x1078A9C", Offset = "0x1078A9C", VA = "0x1078A9C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B173C", Offset = "0x8B173C")]
		private struct <ForgetCoreWithCatch>d__20 : IAsyncStateMachine
		{
			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UniTask task;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool handleExceptionOnMainThread;

			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action<Exception> exceptionHandler;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private object <>7__wrap1;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x4000B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Exception <ex>5__4;

			[Token(Token = "0x4000B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private SwitchToMainThreadAwaitable.Awaiter <>u__2;

			[Token(Token = "0x600122F")]
			[Address(RVA = "0x1078AA8", Offset = "0x1078AA8", VA = "0x1078AA8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001230")]
			[Address(RVA = "0x1078F58", Offset = "0x1078F58", VA = "0x1078F58", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B174C", Offset = "0x8B174C")]
		private struct <ForgetCore>d__23<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x6001231")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001232")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B175C", Offset = "0x8B175C")]
		private struct <ForgetCoreWithCatch>d__24<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool handleExceptionOnMainThread;

			[Token(Token = "0x4000B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<Exception> exceptionHandler;

			[Token(Token = "0x4000B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>7__wrap1;

			[Token(Token = "0x4000B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>7__wrap2;

			[Token(Token = "0x4000B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x4000B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Exception <ex>5__4;

			[Token(Token = "0x4000B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private SwitchToMainThreadAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001233")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001234")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B176C", Offset = "0x8B176C")]
		private struct <ContinueWith>d__25<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> continuationFunction;

			[Token(Token = "0x4000BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action<T> <>7__wrap1;

			[Token(Token = "0x4000BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x6001235")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001236")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B177C", Offset = "0x8B177C")]
		private struct <ContinueWith>d__26<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T, UniTask> continuationFunction;

			[Token(Token = "0x4000BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<T, UniTask> <>7__wrap1;

			[Token(Token = "0x4000BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x4000BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask.Awaiter <>u__2;

			[Token(Token = "0x6001237")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001238")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B178C", Offset = "0x8B178C")]
		private struct <ContinueWith>d__27<T, TR> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<TR> <>t__builder;

			[Token(Token = "0x4000BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T, TR> continuationFunction;

			[Token(Token = "0x4000BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<T, TR> <>7__wrap1;

			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x6001239")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600123A")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B179C", Offset = "0x8B179C")]
		private struct <ContinueWith>d__28<T, TR> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<TR> <>t__builder;

			[Token(Token = "0x4000BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T, UniTask<TR>> continuationFunction;

			[Token(Token = "0x4000BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<T, UniTask<TR>> <>7__wrap1;

			[Token(Token = "0x4000BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x4000BB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<TR>.Awaiter <>u__2;

			[Token(Token = "0x600123B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600123C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17AC", Offset = "0x8B17AC")]
		private struct <ContinueWith>d__29 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UniTask task;

			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action continuationFunction;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x600123D")]
			[Address(RVA = "0x107855C", Offset = "0x107855C", VA = "0x107855C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600123E")]
			[Address(RVA = "0x10786E0", Offset = "0x10786E0", VA = "0x10786E0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17BC", Offset = "0x8B17BC")]
		private struct <ContinueWith>d__30 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UniTask task;

			[Token(Token = "0x4000BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Func<UniTask> continuationFunction;

			[Token(Token = "0x4000BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x600123F")]
			[Address(RVA = "0x10786EC", Offset = "0x10786EC", VA = "0x10786EC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001240")]
			[Address(RVA = "0x1078924", Offset = "0x1078924", VA = "0x1078924", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17CC", Offset = "0x8B17CC")]
		private struct <ContinueWith>d__31<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask task;

			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<T> continuationFunction;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x6001241")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001242")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17DC", Offset = "0x8B17DC")]
		private struct <ContinueWith>d__32<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask task;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<UniTask<T>> continuationFunction;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__2;

			[Token(Token = "0x6001243")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001244")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17EC", Offset = "0x8B17EC")]
		private struct <ConfigureAwait>d__33 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Task task;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerLoopTiming timing;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001245")]
			[Address(RVA = "0x1078090", Offset = "0x1078090", VA = "0x1078090", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001246")]
			[Address(RVA = "0x10782F0", Offset = "0x10782F0", VA = "0x10782F0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B17FC", Offset = "0x8B17FC")]
		private struct <ConfigureAwait>d__34<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Task<T> task;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PlayerLoopTiming timing;

			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <v>5__2;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ConfiguredTaskAwaitable<T>.ConfiguredTaskAwaiter <>u__1;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001247")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001248")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B180C", Offset = "0x8B180C")]
		private struct <ConfigureAwait>d__35 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UniTask task;

			[Token(Token = "0x4000BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerLoopTiming timing;

			[Token(Token = "0x4000BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UniTask.Awaiter <>u__1;

			[Token(Token = "0x4000BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x6001249")]
			[Address(RVA = "0x10782FC", Offset = "0x10782FC", VA = "0x10782FC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600124A")]
			[Address(RVA = "0x1078550", Offset = "0x1078550", VA = "0x1078550", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000401")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B181C", Offset = "0x8B181C")]
		private struct <ConfigureAwait>d__36<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<T> task;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PlayerLoopTiming timing;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <v>5__2;

			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__1;

			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private YieldAwaitable.Awaiter <>u__2;

			[Token(Token = "0x600124B")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600124C")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000402")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B182C", Offset = "0x8B182C")]
		private struct <Unwrap>d__37<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder<T> <>t__builder;

			[Token(Token = "0x4000BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<UniTask<T>> task;

			[Token(Token = "0x4000BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<UniTask<T>>.Awaiter <>u__1;

			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<T>.Awaiter <>u__2;

			[Token(Token = "0x600124D")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600124E")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000403")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B183C", Offset = "0x8B183C")]
		private struct <Unwrap>d__38<T> : IAsyncStateMachine
		{
			[Token(Token = "0x4000BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncUniTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UniTask<UniTask> task;

			[Token(Token = "0x4000BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask<UniTask>.Awaiter <>u__1;

			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UniTask.Awaiter <>u__2;

			[Token(Token = "0x600124F")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001250")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x10B14F0", Offset = "0x10B14F0", VA = "0x10B14F0")]
		public static UniTask.Awaiter GetAwaiter(this IEnumerable<UniTask> tasks)
		{
			return default(UniTask.Awaiter);
		}

		[Token(Token = "0x60011ED")]
		public static UniTask<T[]>.Awaiter GetAwaiter<T>(this IEnumerable<UniTask<T>> tasks)
		{
			return default(UniTask<T[]>.Awaiter);
		}

		[Token(Token = "0x60011EE")]
		public static UniTask<(T1, T2)>.Awaiter GetAwaiter<T1, T2>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BF828", Offset = "0x8BF828")] this (UniTask<T1>, UniTask<T2>) tasks)
		{
			return default(UniTask<(T1, T2)>.Awaiter);
		}

		[Token(Token = "0x60011EF")]
		public static UniTask<(T1, T2, T3)> WhenAll<T1, T2, T3>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BF8AC", Offset = "0x8BF8AC")] this (UniTask<T1>, UniTask<T2>, UniTask<T3>) tasks)
		{
			return default(UniTask<(T1, T2, T3)>);
		}

		[Token(Token = "0x60011F0")]
		public static UniTask<(T1, T2, T3, T4)> WhenAll<T1, T2, T3, T4>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BF940", Offset = "0x8BF940")] this (UniTask<T1>, UniTask<T2>, UniTask<T3>, UniTask<T4>) tasks)
		{
			return default(UniTask<(T1, T2, T3, T4)>);
		}

		[Token(Token = "0x60011F1")]
		public static UniTask<(T1, T2, T3, T4, T5)> WhenAll<T1, T2, T3, T4, T5>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BF9E4", Offset = "0x8BF9E4")] this (UniTask<T1>, UniTask<T2>, UniTask<T3>, UniTask<T4>, UniTask<T5>) tasks)
		{
			return default(UniTask<(T1, T2, T3, T4, T5)>);
		}

		[Token(Token = "0x60011F2")]
		public static UniTask<(T1, T2, T3, T4, T5, T6)> WhenAll<T1, T2, T3, T4, T5, T6>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BFA98", Offset = "0x8BFA98")] this (UniTask<T1>, UniTask<T2>, UniTask<T3>, UniTask<T4>, UniTask<T5>, UniTask<T6>) tasks)
		{
			return default(UniTask<(T1, T2, T3, T4, T5, T6)>);
		}

		[Token(Token = "0x60011F3")]
		public static UniTask<(T1, T2, T3, T4, T5, T6, T7)> WhenAll<T1, T2, T3, T4, T5, T6, T7>([AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8BFB5C", Offset = "0x8BFB5C")] this (UniTask<T1>, UniTask<T2>, UniTask<T3>, UniTask<T4>, UniTask<T5>, UniTask<T6>, UniTask<T7>) tasks)
		{
			return default(UniTask<(T1, T2, T3, T4, T5, T6, T7)>);
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x10B1550", Offset = "0x10B1550", VA = "0x10B1550")]
		public static UniTask<AsyncUnit> AsAsyncUnitUniTask(this UniTask task)
		{
			return default(UniTask<AsyncUnit>);
		}

		[Token(Token = "0x60011F5")]
		public static UniTask<T> AsUniTask<T>(this Task<T> task, bool useCurrentSynchronizationContext = true)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x10B15B0", Offset = "0x10B15B0", VA = "0x10B15B0")]
		public static UniTask AsUniTask(this Task task, bool useCurrentSynchronizationContext = true)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60011F7")]
		public static IEnumerator ToCoroutine<T>(this UniTask<T> task, [Optional] Action<T> resultHandler, [Optional] Action<Exception> exceptionHandler)
		{
			return null;
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x10AF8C8", Offset = "0x10AF8C8", VA = "0x10AF8C8")]
		public static IEnumerator ToCoroutine(this UniTask task, [Optional] Action<Exception> exceptionHandler)
		{
			return null;
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x10B1768", Offset = "0x10B1768", VA = "0x10B1768")]
		public static UniTask Timeout(this UniTask task, TimeSpan timeout, bool ignoreTimeScale = true, PlayerLoopTiming timeoutCheckTiming = PlayerLoopTiming.Update, [Optional] CancellationTokenSource taskCancellationTokenSource)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60011FA")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC0E8", Offset = "0x8BC0E8")]
		public static UniTask<T> Timeout<T>(this UniTask<T> task, TimeSpan timeout, bool ignoreTimeScale = true, PlayerLoopTiming timeoutCheckTiming = PlayerLoopTiming.Update, [Optional] CancellationTokenSource taskCancellationTokenSource)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x10B1804", Offset = "0x10B1804", VA = "0x10B1804")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC158", Offset = "0x8BC158")]
		public static UniTask<bool> TimeoutWithoutException(this UniTask task, TimeSpan timeout, bool ignoreTimeScale = true, PlayerLoopTiming timeoutCheckTiming = PlayerLoopTiming.Update, [Optional] CancellationTokenSource taskCancellationTokenSource)
		{
			return default(UniTask<bool>);
		}

		[Token(Token = "0x60011FC")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC1C8", Offset = "0x8BC1C8")]
		public static UniTask<(bool, T)> TimeoutWithoutException<T>(this UniTask<T> task, TimeSpan timeout, bool ignoreTimeScale = true, PlayerLoopTiming timeoutCheckTiming = PlayerLoopTiming.Update, [Optional] CancellationTokenSource taskCancellationTokenSource)
		{
			return default(UniTask<(bool, T)>);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x10B0000", Offset = "0x10B0000", VA = "0x10B0000")]
		public static void Forget(this UniTask task)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x10B19D4", Offset = "0x10B19D4", VA = "0x10B19D4")]
		public static void Forget(this UniTask task, Action<Exception> exceptionHandler, bool handleExceptionOnMainThread = true)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x10B1938", Offset = "0x10B1938", VA = "0x10B1938")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC258", Offset = "0x8BC258")]
		private static UniTaskVoid ForgetCore(UniTask task)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x10B19E4", Offset = "0x10B19E4", VA = "0x10B19E4")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC2B8", Offset = "0x8BC2B8")]
		private static UniTaskVoid ForgetCoreWithCatch(UniTask task, Action<Exception> exceptionHandler, bool handleExceptionOnMainThread)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x6001201")]
		public static void Forget<T>(this UniTask<T> task)
		{
		}

		[Token(Token = "0x6001202")]
		public static void Forget<T>(this UniTask<T> task, Action<Exception> exceptionHandler, bool handleExceptionOnMainThread = true)
		{
		}

		[Token(Token = "0x6001203")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC338", Offset = "0x8BC338")]
		private static UniTaskVoid ForgetCore<T>(UniTask<T> task)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x6001204")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC398", Offset = "0x8BC398")]
		private static UniTaskVoid ForgetCoreWithCatch<T>(UniTask<T> task, Action<Exception> exceptionHandler, bool handleExceptionOnMainThread)
		{
			return default(UniTaskVoid);
		}

		[Token(Token = "0x6001205")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC3F8", Offset = "0x8BC3F8")]
		public static UniTask ContinueWith<T>(this UniTask<T> task, Action<T> continuationFunction)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001206")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC468", Offset = "0x8BC468")]
		public static UniTask ContinueWith<T>(this UniTask<T> task, Func<T, UniTask> continuationFunction)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001207")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC4D8", Offset = "0x8BC4D8")]
		public static UniTask<TR> ContinueWith<T, TR>(this UniTask<T> task, Func<T, TR> continuationFunction)
		{
			return default(UniTask<TR>);
		}

		[Token(Token = "0x6001208")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC548", Offset = "0x8BC548")]
		public static UniTask<TR> ContinueWith<T, TR>(this UniTask<T> task, Func<T, UniTask<TR>> continuationFunction)
		{
			return default(UniTask<TR>);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x10B1AA0", Offset = "0x10B1AA0", VA = "0x10B1AA0")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC5B8", Offset = "0x8BC5B8")]
		public static UniTask ContinueWith(this UniTask task, Action continuationFunction)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x10B1B44", Offset = "0x10B1B44", VA = "0x10B1B44")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC628", Offset = "0x8BC628")]
		public static UniTask ContinueWith(this UniTask task, Func<UniTask> continuationFunction)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600120B")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC698", Offset = "0x8BC698")]
		public static UniTask<T> ContinueWith<T>(this UniTask task, Func<T> continuationFunction)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x600120C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC708", Offset = "0x8BC708")]
		public static UniTask<T> ContinueWith<T>(this UniTask task, Func<UniTask<T>> continuationFunction)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x10B1BE8", Offset = "0x10B1BE8", VA = "0x10B1BE8")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC778", Offset = "0x8BC778")]
		public static UniTask ConfigureAwait(this Task task, PlayerLoopTiming timing)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600120E")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC7E8", Offset = "0x8BC7E8")]
		public static UniTask<T> ConfigureAwait<T>(this Task<T> task, PlayerLoopTiming timing)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x10B1C90", Offset = "0x10B1C90", VA = "0x10B1C90")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC858", Offset = "0x8BC858")]
		public static UniTask ConfigureAwait(this UniTask task, PlayerLoopTiming timing)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001210")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC8C8", Offset = "0x8BC8C8")]
		public static UniTask<T> ConfigureAwait<T>(this UniTask<T> task, PlayerLoopTiming timing)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6001211")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC938", Offset = "0x8BC938")]
		public static UniTask<T> Unwrap<T>(this UniTask<UniTask<T>> task)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x6001212")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x8BC9A8", Offset = "0x8BC9A8")]
		public static UniTask Unwrap<T>(this UniTask<UniTask> task)
		{
			return default(UniTask);
		}
	}
	[Token(Token = "0x2000404")]
	public static class UniTaskScheduler
	{
		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool PropagateOperationCanceledException;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LogType UnobservedExceptionWriteLogType;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static bool DispatchUnityMainThread;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly SendOrPostCallback handleExceptionInvoke;

		[Token(Token = "0x14000001")]
		public static event Action<Exception> UnobservedTaskException
		{
			[Token(Token = "0x6001251")]
			[Address(RVA = "0x10B1FCC", Offset = "0x10B1FCC", VA = "0x10B1FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BCC48", Offset = "0x8BCC48")]
			add
			{
			}
			[Token(Token = "0x6001252")]
			[Address(RVA = "0x10B20C0", Offset = "0x10B20C0", VA = "0x10B20C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BCC58", Offset = "0x8BCC58")]
			remove
			{
			}
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x10B21B4", Offset = "0x10B21B4", VA = "0x10B21B4")]
		internal static void PublishUnobservedTaskException(Exception ex)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x10B2554", Offset = "0x10B2554", VA = "0x10B2554")]
		private static void InvokeUnobservedTaskException(object state)
		{
		}
	}
	[StructLayout(0, Size = 1)]
	[Token(Token = "0x2000405")]
	[AttributeAttribute(Name = "AsyncMethodBuilderAttribute", RVA = "0x8B184C", Offset = "0x8B184C")]
	public struct UniTaskVoid
	{
		[StructLayout(0, Size = 1)]
		[Token(Token = "0x2000406")]
		public struct Awaiter : ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x17000169")]
			[DebuggerHidden]
			public bool IsCompleted
			{
				[Token(Token = "0x6001258")]
				[Address(RVA = "0x10796BC", Offset = "0x10796BC", VA = "0x10796BC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001259")]
			[Address(RVA = "0x10796C4", Offset = "0x10796C4", VA = "0x10796C4")]
			[DebuggerHidden]
			public void GetResult()
			{
			}

			[Token(Token = "0x600125A")]
			[Address(RVA = "0x1079738", Offset = "0x1079738", VA = "0x1079738", Slot = "5")]
			[DebuggerHidden]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x600125B")]
			[Address(RVA = "0x107973C", Offset = "0x107973C", VA = "0x107973C", Slot = "4")]
			[DebuggerHidden]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x10B19D0", Offset = "0x10B19D0", VA = "0x10B19D0")]
		public void Forget()
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x10B26E0", Offset = "0x10B26E0", VA = "0x10B26E0")]
		[DebuggerHidden]
		public Awaiter GetAwaiter()
		{
			return default(Awaiter);
		}
	}
	[Token(Token = "0x2000407")]
	public static class UnityAsyncExtensions
	{
		[Token(Token = "0x2000408")]
		private class JobHandleAwaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private JobHandle jobHandle;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Action continuation;

			[Token(Token = "0x1700016A")]
			public bool IsCompleted
			{
				[Token(Token = "0x600128A")]
				[Address(RVA = "0x1079C70", Offset = "0x1079C70", VA = "0x1079C70", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700016B")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x600128B")]
				[Address(RVA = "0x1079C80", Offset = "0x1079C80", VA = "0x1079C80", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6001289")]
			[Address(RVA = "0x1079BE8", Offset = "0x1079BE8", VA = "0x1079BE8")]
			public JobHandleAwaiter(JobHandle jobHandle, CancellationToken cancellationToken, int skipFrame = 2)
			{
			}

			[Token(Token = "0x600128C")]
			[Address(RVA = "0x1079C88", Offset = "0x1079C88", VA = "0x1079C88", Slot = "6")]
			public void GetResult()
			{
			}

			[Token(Token = "0x600128D")]
			[Address(RVA = "0x1079CBC", Offset = "0x1079CBC", VA = "0x1079CBC", Slot = "9")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600128E")]
			[Address(RVA = "0x1079DCC", Offset = "0x1079DCC", VA = "0x1079DCC")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x600128F")]
			[Address(RVA = "0x1079E6C", Offset = "0x1079E6C", VA = "0x1079E6C", Slot = "8")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001290")]
			[Address(RVA = "0x1079E70", Offset = "0x1079E70", VA = "0x1079E70", Slot = "7")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x2000409")]
		public struct AsyncOperationAwaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private AsyncOperation asyncOperation;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Action<AsyncOperation> continuationAction;

			[Token(Token = "0x4000BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private AwaiterStatus status;

			[Token(Token = "0x1700016C")]
			public bool IsCompleted
			{
				[Token(Token = "0x6001292")]
				[Address(RVA = "0x1079788", Offset = "0x1079788", VA = "0x1079788", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700016D")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x6001293")]
				[Address(RVA = "0x1079798", Offset = "0x1079798", VA = "0x1079798", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6001291")]
			[Address(RVA = "0x1079740", Offset = "0x1079740", VA = "0x1079740")]
			public AsyncOperationAwaiter(AsyncOperation asyncOperation)
			{
			}

			[Token(Token = "0x6001294")]
			[Address(RVA = "0x10797A0", Offset = "0x10797A0", VA = "0x10797A0", Slot = "6")]
			public void GetResult()
			{
			}

			[Token(Token = "0x6001295")]
			[Address(RVA = "0x1079808", Offset = "0x1079808", VA = "0x1079808", Slot = "8")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x6001296")]
			[Address(RVA = "0x107980C", Offset = "0x107980C", VA = "0x107980C", Slot = "7")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040A")]
		private class AsyncOperationConfiguredAwaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private AsyncOperation asyncOperation;

			[Token(Token = "0x4000BFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IProgress<float> progress;

			[Token(Token = "0x4000C00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x4000C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Action continuation;

			[Token(Token = "0x1700016E")]
			public bool IsCompleted
			{
				[Token(Token = "0x6001298")]
				[Address(RVA = "0x1079954", Offset = "0x1079954", VA = "0x1079954", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700016F")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x6001299")]
				[Address(RVA = "0x1079964", Offset = "0x1079964", VA = "0x1079964", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x6001297")]
			[Address(RVA = "0x10798CC", Offset = "0x10798CC", VA = "0x10798CC")]
			public AsyncOperationConfiguredAwaiter(AsyncOperation asyncOperation, IProgress<float> progress, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x600129A")]
			[Address(RVA = "0x107996C", Offset = "0x107996C", VA = "0x107996C", Slot = "6")]
			public void GetResult()
			{
			}

			[Token(Token = "0x600129B")]
			[Address(RVA = "0x10799A0", Offset = "0x10799A0", VA = "0x10799A0", Slot = "9")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600129C")]
			[Address(RVA = "0x1079AB4", Offset = "0x1079AB4", VA = "0x1079AB4")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x600129D")]
			[Address(RVA = "0x1079B54", Offset = "0x1079B54", VA = "0x1079B54", Slot = "8")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x600129E")]
			[Address(RVA = "0x1079B58", Offset = "0x1079B58", VA = "0x1079B58", Slot = "7")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040B")]
		public struct ResourceRequestAwaiter : IAwaiter<UnityEngine.Object>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000C03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ResourceRequest asyncOperation;

			[Token(Token = "0x4000C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Action<AsyncOperation> continuationAction;

			[Token(Token = "0x4000C05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UnityEngine.Object result;

			[Token(Token = "0x17000170")]
			public bool IsCompleted
			{
				[Token(Token = "0x60012A0")]
				[Address(RVA = "0x1079F68", Offset = "0x1079F68", VA = "0x1079F68", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000171")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60012A1")]
				[Address(RVA = "0x1079F78", Offset = "0x1079F78", VA = "0x1079F78", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x600129F")]
			[Address(RVA = "0x1079F00", Offset = "0x1079F00", VA = "0x1079F00")]
			public ResourceRequestAwaiter(ResourceRequest asyncOperation)
			{
			}

			[Token(Token = "0x60012A2")]
			[Address(RVA = "0x1079F80", Offset = "0x1079F80", VA = "0x1079F80", Slot = "4")]
			public UnityEngine.Object GetResult()
			{
				return null;
			}

			[Token(Token = "0x60012A3")]
			[Address(RVA = "0x107A000", Offset = "0x107A000", VA = "0x107A000", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}

			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x107A004", Offset = "0x107A004", VA = "0x107A004", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60012A5")]
			[Address(RVA = "0x107A008", Offset = "0x107A008", VA = "0x107A008", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040C")]
		private class ResourceRequestConfiguredAwaiter : IAwaiter<UnityEngine.Object>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000C07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ResourceRequest asyncOperation;

			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IProgress<float> progress;

			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x4000C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Action continuation;

			[Token(Token = "0x4000C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityEngine.Object result;

			[Token(Token = "0x17000172")]
			public bool IsCompleted
			{
				[Token(Token = "0x60012A7")]
				[Address(RVA = "0x107A170", Offset = "0x107A170", VA = "0x107A170", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000173")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60012A8")]
				[Address(RVA = "0x107A180", Offset = "0x107A180", VA = "0x107A180", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60012A6")]
			[Address(RVA = "0x107A0C8", Offset = "0x107A0C8", VA = "0x107A0C8")]
			public ResourceRequestConfiguredAwaiter(ResourceRequest asyncOperation, IProgress<float> progress, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x60012A9")]
			[Address(RVA = "0x107A188", Offset = "0x107A188", VA = "0x107A188", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}

			[Token(Token = "0x60012AA")]
			[Address(RVA = "0x107A18C", Offset = "0x107A18C", VA = "0x107A18C", Slot = "4")]
			public UnityEngine.Object GetResult()
			{
				return null;
			}

			[Token(Token = "0x60012AB")]
			[Address(RVA = "0x107A1FC", Offset = "0x107A1FC", VA = "0x107A1FC", Slot = "10")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012AC")]
			[Address(RVA = "0x107A324", Offset = "0x107A324", VA = "0x107A324")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x107A3C4", Offset = "0x107A3C4", VA = "0x107A3C4", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x107A454", Offset = "0x107A454", VA = "0x107A454", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040D")]
		private class WWWConfiguredAwaiter : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private WWW asyncOperation;

			[Token(Token = "0x4000C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IProgress<float> progress;

			[Token(Token = "0x4000C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x4000C10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Action continuation;

			[Token(Token = "0x17000174")]
			public bool IsCompleted
			{
				[Token(Token = "0x60012B0")]
				[Address(RVA = "0x107AB34", Offset = "0x107AB34", VA = "0x107AB34", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000175")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60012B1")]
				[Address(RVA = "0x107AB44", Offset = "0x107AB44", VA = "0x107AB44", Slot = "4")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60012AF")]
			[Address(RVA = "0x107AAAC", Offset = "0x107AAAC", VA = "0x107AAAC")]
			public WWWConfiguredAwaiter(WWW asyncOperation, IProgress<float> progress, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x60012B2")]
			[Address(RVA = "0x107AB4C", Offset = "0x107AB4C", VA = "0x107AB4C", Slot = "6")]
			public void GetResult()
			{
			}

			[Token(Token = "0x60012B3")]
			[Address(RVA = "0x107AB80", Offset = "0x107AB80", VA = "0x107AB80", Slot = "9")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012B4")]
			[Address(RVA = "0x107AC94", Offset = "0x107AC94", VA = "0x107AC94")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x60012B5")]
			[Address(RVA = "0x107AD34", Offset = "0x107AD34", VA = "0x107AD34", Slot = "8")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x107AD38", Offset = "0x107AD38", VA = "0x107AD38", Slot = "7")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040E")]
		public struct UnityWebRequestAsyncOperationAwaiter : IAwaiter<UnityWebRequest>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
		{
			[Token(Token = "0x4000C12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnityWebRequestAsyncOperation asyncOperation;

			[Token(Token = "0x4000C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Action<AsyncOperation> continuationAction;

			[Token(Token = "0x4000C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UnityWebRequest result;

			[Token(Token = "0x17000176")]
			public bool IsCompleted
			{
				[Token(Token = "0x60012B8")]
				[Address(RVA = "0x107A540", Offset = "0x107A540", VA = "0x107A540", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000177")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60012B9")]
				[Address(RVA = "0x107A550", Offset = "0x107A550", VA = "0x107A550", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60012B7")]
			[Address(RVA = "0x107A4E4", Offset = "0x107A4E4", VA = "0x107A4E4")]
			public UnityWebRequestAsyncOperationAwaiter(UnityWebRequestAsyncOperation asyncOperation)
			{
			}

			[Token(Token = "0x60012BA")]
			[Address(RVA = "0x107A558", Offset = "0x107A558", VA = "0x107A558", Slot = "4")]
			public UnityWebRequest GetResult()
			{
				return null;
			}

			[Token(Token = "0x60012BB")]
			[Address(RVA = "0x107A5D4", Offset = "0x107A5D4", VA = "0x107A5D4", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}

			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x107A5D8", Offset = "0x107A5D8", VA = "0x107A5D8", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x107A5DC", Offset = "0x107A5DC", VA = "0x107A5DC", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x200040F")]
		private class UnityWebRequestAsyncOperationConfiguredAwaiter : IAwaiter<UnityWebRequest>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IPlayerLoopItem
		{
			[Token(Token = "0x4000C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private UnityWebRequestAsyncOperation asyncOperation;

			[Token(Token = "0x4000C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IProgress<float> progress;

			[Token(Token = "0x4000C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CancellationToken cancellationToken;

			[Token(Token = "0x4000C19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AwaiterStatus status;

			[Token(Token = "0x4000C1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Action continuation;

			[Token(Token = "0x4000C1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest result;

			[Token(Token = "0x17000178")]
			public bool IsCompleted
			{
				[Token(Token = "0x60012BF")]
				[Address(RVA = "0x107A73C", Offset = "0x107A73C", VA = "0x107A73C", Slot = "6")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000179")]
			public AwaiterStatus Status
			{
				[Token(Token = "0x60012C0")]
				[Address(RVA = "0x107A74C", Offset = "0x107A74C", VA = "0x107A74C", Slot = "5")]
				get
				{
					return default(AwaiterStatus);
				}
			}

			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x107A69C", Offset = "0x107A69C", VA = "0x107A69C")]
			public UnityWebRequestAsyncOperationConfiguredAwaiter(UnityWebRequestAsyncOperation asyncOperation, IProgress<float> progress, CancellationToken cancellationToken)
			{
			}

			[Token(Token = "0x60012C1")]
			[Address(RVA = "0x107A754", Offset = "0x107A754", VA = "0x107A754", Slot = "7")]
			private void UniRx.Async.IAwaiter.GetResult()
			{
			}

			[Token(Token = "0x60012C2")]
			[Address(RVA = "0x107A758", Offset = "0x107A758", VA = "0x107A758", Slot = "4")]
			public UnityWebRequest GetResult()
			{
				return null;
			}

			[Token(Token = "0x60012C3")]
			[Address(RVA = "0x107A7C8", Offset = "0x107A7C8", VA = "0x107A7C8", Slot = "10")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012C4")]
			[Address(RVA = "0x107A8EC", Offset = "0x107A8EC", VA = "0x107A8EC")]
			private void InvokeContinuation(AwaiterStatus status)
			{
			}

			[Token(Token = "0x60012C5")]
			[Address(RVA = "0x107A98C", Offset = "0x107A98C", VA = "0x107A98C", Slot = "9")]
			public void OnCompleted(Action continuation)
			{
			}

			[Token(Token = "0x60012C6")]
			[Address(RVA = "0x107AA1C", Offset = "0x107AA1C", VA = "0x107AA1C", Slot = "8")]
			public void UnsafeOnCompleted(Action continuation)
			{
			}
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x10B2814", Offset = "0x10B2814", VA = "0x10B2814")]
		public static IAwaiter GetAwaiter(this JobHandle jobHandle)
		{
			return null;
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x10B2930", Offset = "0x10B2930", VA = "0x10B2930")]
		public static UniTask ToUniTask(this JobHandle jobHandle, [Optional] CancellationToken cancellation)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x10B2A14", Offset = "0x10B2A14", VA = "0x10B2A14")]
		public static UniTask ConfigureAwait(this JobHandle jobHandle, PlayerLoopTiming waitTiming, [Optional] CancellationToken cancellation)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x10B2AC4", Offset = "0x10B2AC4", VA = "0x10B2AC4")]
		public static AsyncOperationAwaiter GetAwaiter(this AsyncOperation asyncOperation)
		{
			return default(AsyncOperationAwaiter);
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x10B2B44", Offset = "0x10B2B44", VA = "0x10B2B44")]
		public static UniTask ToUniTask(this AsyncOperation asyncOperation)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x10B2BF4", Offset = "0x10B2BF4", VA = "0x10B2BF4")]
		public static UniTask ConfigureAwait(this AsyncOperation asyncOperation, [Optional] IProgress<float> progress, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellation)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x10B2CD0", Offset = "0x10B2CD0", VA = "0x10B2CD0")]
		public static ResourceRequestAwaiter GetAwaiter(this ResourceRequest resourceRequest)
		{
			return default(ResourceRequestAwaiter);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x10B2D50", Offset = "0x10B2D50", VA = "0x10B2D50")]
		public static UniTask<UnityEngine.Object> ToUniTask(this ResourceRequest resourceRequest)
		{
			return default(UniTask<UnityEngine.Object>);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x10B2E24", Offset = "0x10B2E24", VA = "0x10B2E24")]
		public static UniTask<UnityEngine.Object> ConfigureAwait(this ResourceRequest resourceRequest, [Optional] IProgress<float> progress, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellation)
		{
			return default(UniTask<UnityEngine.Object>);
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x10B2F30", Offset = "0x10B2F30", VA = "0x10B2F30")]
		public static IAwaiter GetAwaiter(this WWW www)
		{
			return null;
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x10B3034", Offset = "0x10B3034", VA = "0x10B3034")]
		public static UniTask ToUniTask(this WWW www)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x10B3138", Offset = "0x10B3138", VA = "0x10B3138")]
		public static UniTask ConfigureAwait(this WWW www, [Optional] IProgress<float> progress, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellation)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x10B3214", Offset = "0x10B3214", VA = "0x10B3214")]
		public static UnityWebRequestAsyncOperationAwaiter GetAwaiter(this UnityWebRequestAsyncOperation asyncOperation)
		{
			return default(UnityWebRequestAsyncOperationAwaiter);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x10B3294", Offset = "0x10B3294", VA = "0x10B3294")]
		public static UniTask<UnityWebRequest> ToUniTask(this UnityWebRequestAsyncOperation asyncOperation)
		{
			return default(UniTask<UnityWebRequest>);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x10B3368", Offset = "0x10B3368", VA = "0x10B3368")]
		public static UniTask<UnityWebRequest> ConfigureAwait(this UnityWebRequestAsyncOperation asyncOperation, [Optional] IProgress<float> progress, PlayerLoopTiming timing = PlayerLoopTiming.Update, [Optional] CancellationToken cancellation)
		{
			return default(UniTask<UnityWebRequest>);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x10B3474", Offset = "0x10B3474", VA = "0x10B3474")]
		public static AsyncUnityEventHandler GetAsyncEventHandler(this UnityEvent unityEvent, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x10B34E8", Offset = "0x10B34E8", VA = "0x10B34E8")]
		public static UniTask OnInvokeAsync(this UnityEvent unityEvent, CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x10B3568", Offset = "0x10B3568", VA = "0x10B3568")]
		public static IAsyncClickEventHandler GetAsyncClickEventHandler(this Button button)
		{
			return null;
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x10B35F8", Offset = "0x10B35F8", VA = "0x10B35F8")]
		public static IAsyncClickEventHandler GetAsyncClickEventHandler(this Button button, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x10B3678", Offset = "0x10B3678", VA = "0x10B3678")]
		public static UniTask OnClickAsync(this Button button)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x10B3710", Offset = "0x10B3710", VA = "0x10B3710")]
		public static UniTask OnClickAsync(this Button button, CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x10B3798", Offset = "0x10B3798", VA = "0x10B3798")]
		public static IAsyncValueChangedEventHandler<bool> GetAsyncValueChangedEventHandler(this Toggle toggle)
		{
			return null;
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x10B383C", Offset = "0x10B383C", VA = "0x10B383C")]
		public static IAsyncValueChangedEventHandler<bool> GetAsyncValueChangedEventHandler(this Toggle toggle, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x10B38D0", Offset = "0x10B38D0", VA = "0x10B38D0")]
		public static UniTask<bool> OnValueChangedAsync(this Toggle toggle)
		{
			return default(UniTask<bool>);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x10B3990", Offset = "0x10B3990", VA = "0x10B3990")]
		public static UniTask<bool> OnValueChangedAsync(this Toggle toggle, CancellationToken cancellationToken)
		{
			return default(UniTask<bool>);
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x10B3A40", Offset = "0x10B3A40", VA = "0x10B3A40")]
		public static IAsyncValueChangedEventHandler<float> GetAsyncValueChangedEventHandler(this Scrollbar scrollbar)
		{
			return null;
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x10B3AE4", Offset = "0x10B3AE4", VA = "0x10B3AE4")]
		public static IAsyncValueChangedEventHandler<float> GetAsyncValueChangedEventHandler(this Scrollbar scrollbar, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x10B3B78", Offset = "0x10B3B78", VA = "0x10B3B78")]
		public static UniTask<float> OnValueChangedAsync(this Scrollbar scrollbar)
		{
			return default(UniTask<float>);
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x10B3C38", Offset = "0x10B3C38", VA = "0x10B3C38")]
		public static UniTask<float> OnValueChangedAsync(this Scrollbar scrollbar, CancellationToken cancellationToken)
		{
			return default(UniTask<float>);
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x10B3CE8", Offset = "0x10B3CE8", VA = "0x10B3CE8")]
		public static IAsyncValueChangedEventHandler<Vector2> GetAsyncValueChangedEventHandler(this ScrollRect scrollRect)
		{
			return null;
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x10B3D8C", Offset = "0x10B3D8C", VA = "0x10B3D8C")]
		public static IAsyncValueChangedEventHandler<Vector2> GetAsyncValueChangedEventHandler(this ScrollRect scrollRect, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x10B3E20", Offset = "0x10B3E20", VA = "0x10B3E20")]
		public static UniTask<Vector2> OnValueChangedAsync(this ScrollRect scrollRect)
		{
			return default(UniTask<Vector2>);
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x10B3EE0", Offset = "0x10B3EE0", VA = "0x10B3EE0")]
		public static UniTask<Vector2> OnValueChangedAsync(this ScrollRect scrollRect, CancellationToken cancellationToken)
		{
			return default(UniTask<Vector2>);
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x10B3F90", Offset = "0x10B3F90", VA = "0x10B3F90")]
		public static IAsyncValueChangedEventHandler<float> GetAsyncValueChangedEventHandler(this Slider slider)
		{
			return null;
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x10B4034", Offset = "0x10B4034", VA = "0x10B4034")]
		public static IAsyncValueChangedEventHandler<float> GetAsyncValueChangedEventHandler(this Slider slider, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x10B40C8", Offset = "0x10B40C8", VA = "0x10B40C8")]
		public static UniTask<float> OnValueChangedAsync(this Slider slider)
		{
			return default(UniTask<float>);
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x10B4188", Offset = "0x10B4188", VA = "0x10B4188")]
		public static UniTask<float> OnValueChangedAsync(this Slider slider, CancellationToken cancellationToken)
		{
			return default(UniTask<float>);
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x10B4238", Offset = "0x10B4238", VA = "0x10B4238")]
		public static IAsyncEndEditEventHandler<string> GetAsyncEndEditEventHandler(this InputField inputField)
		{
			return null;
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x10B42DC", Offset = "0x10B42DC", VA = "0x10B42DC")]
		public static IAsyncEndEditEventHandler<string> GetAsyncEndEditEventHandler(this InputField inputField, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x10B4370", Offset = "0x10B4370", VA = "0x10B4370")]
		public static UniTask<string> OnEndEditAsync(this InputField inputField)
		{
			return default(UniTask<string>);
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x10B4430", Offset = "0x10B4430", VA = "0x10B4430")]
		public static UniTask<string> OnEndEditAsync(this InputField inputField, CancellationToken cancellationToken)
		{
			return default(UniTask<string>);
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x10B44E0", Offset = "0x10B44E0", VA = "0x10B44E0")]
		public static IAsyncValueChangedEventHandler<int> GetAsyncValueChangedEventHandler(this Dropdown dropdown)
		{
			return null;
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x10B4584", Offset = "0x10B4584", VA = "0x10B4584")]
		public static IAsyncValueChangedEventHandler<int> GetAsyncValueChangedEventHandler(this Dropdown dropdown, CancellationToken cancellationToken)
		{
			return null;
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x10B4618", Offset = "0x10B4618", VA = "0x10B4618")]
		public static UniTask<int> OnValueChanged(this Dropdown dropdown)
		{
			return default(UniTask<int>);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x10B46D8", Offset = "0x10B46D8", VA = "0x10B46D8")]
		public static UniTask<int> OnValueChanged(this Dropdown dropdown, CancellationToken cancellationToken)
		{
			return default(UniTask<int>);
		}
	}
	[Token(Token = "0x2000410")]
	public interface IAsyncClickEventHandler : IDisposable
	{
		[Token(Token = "0x60012C7")]
		UniTask OnClickAsync();

		[Token(Token = "0x60012C8")]
		UniTask<bool> OnClickAsyncSuppressCancellationThrow();
	}
	[Token(Token = "0x2000411")]
	public interface IAsyncValueChangedEventHandler<T> : IDisposable
	{
		[Token(Token = "0x60012C9")]
		UniTask<T> OnValueChangedAsync();

		[Token(Token = "0x60012CA")]
		UniTask<(bool, T)> OnValueChangedAsyncSuppressCancellationThrow();
	}
	[Token(Token = "0x2000412")]
	public interface IAsyncEndEditEventHandler<T> : IDisposable
	{
		[Token(Token = "0x60012CB")]
		UniTask<T> OnEndEditAsync();

		[Token(Token = "0x60012CC")]
		UniTask<(bool, T)> OnEndEditAsyncSuppressCancellationThrow();
	}
	[Token(Token = "0x2000413")]
	public class AsyncUnityEventHandler : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IDisposable, IAsyncClickEventHandler
	{
		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<object> cancellationCallback;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly UnityAction action;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly UnityEvent unityEvent;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action continuation;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CancellationTokenRegistration registration;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isDisposed;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool callOnce;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UniTask<bool>? suppressCancellationThrowTask;

		[Token(Token = "0x1700017A")]
		private bool UniRx.Async.IAwaiter.IsCompleted
		{
			[Token(Token = "0x60012D3")]
			[Address(RVA = "0x1184B20", Offset = "0x1184B20", VA = "0x1184B20", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017B")]
		private AwaiterStatus UniRx.Async.IAwaiter.Status
		{
			[Token(Token = "0x60012D4")]
			[Address(RVA = "0x1184B28", Offset = "0x1184B28", VA = "0x1184B28", Slot = "4")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x11847AC", Offset = "0x11847AC", VA = "0x11847AC")]
		public AsyncUnityEventHandler(UnityEvent unityEvent, CancellationToken cancellationToken, bool callOnce)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x118493C", Offset = "0x118493C", VA = "0x118493C")]
		public UniTask OnInvokeAsync()
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1184940", Offset = "0x1184940", VA = "0x1184940")]
		public UniTask<bool> OnInvokeAsyncSuppressCancellationThrow()
		{
			return default(UniTask<bool>);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1184A0C", Offset = "0x1184A0C", VA = "0x1184A0C")]
		private void Invoke()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1184A28", Offset = "0x1184A28", VA = "0x1184A28")]
		private static void CancellationCallback(object state)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x1184ACC", Offset = "0x1184ACC", VA = "0x1184ACC", Slot = "9")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x1184B3C", Offset = "0x1184B3C", VA = "0x1184B3C", Slot = "6")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x1184B94", Offset = "0x1184B94", VA = "0x1184B94", Slot = "8")]
		private void System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(Action action)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x1184C44", Offset = "0x1184C44", VA = "0x1184C44", Slot = "7")]
		private void System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x1184CD4", Offset = "0x1184CD4", VA = "0x1184CD4", Slot = "10")]
		private UniTask UniRx.Async.IAsyncClickEventHandler.OnClickAsync()
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x1184CD8", Offset = "0x1184CD8", VA = "0x1184CD8", Slot = "11")]
		private UniTask<bool> UniRx.Async.IAsyncClickEventHandler.OnClickAsyncSuppressCancellationThrow()
		{
			return default(UniTask<bool>);
		}
	}
	[Token(Token = "0x2000414")]
	public class AsyncUnityEventHandler<T> : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion, IDisposable, IAsyncValueChangedEventHandler<T>, IAsyncEndEditEventHandler<T>
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<object> cancellationCallback;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly UnityAction<T> action;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly UnityEvent<T> unityEvent;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action continuation;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CancellationTokenRegistration registration;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDisposed;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T eventValue;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool callOnce;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UniTask<(bool, T)>? suppressCancellationThrowTask;

		[Token(Token = "0x1700017C")]
		private bool UniRx.Async.IAwaiter.IsCompleted
		{
			[Token(Token = "0x60012E1")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017D")]
		private AwaiterStatus UniRx.Async.IAwaiter.Status
		{
			[Token(Token = "0x60012E2")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x60012DB")]
		public AsyncUnityEventHandler(UnityEvent<T> unityEvent, CancellationToken cancellationToken, bool callOnce)
		{
		}

		[Token(Token = "0x60012DC")]
		public UniTask<T> OnInvokeAsync()
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60012DD")]
		public UniTask<(bool, T)> OnInvokeAsyncSuppressCancellationThrow()
		{
			return default(UniTask<(bool, T)>);
		}

		[Token(Token = "0x60012DE")]
		private void Invoke(T value)
		{
		}

		[Token(Token = "0x60012DF")]
		private static void CancellationCallback(object state)
		{
		}

		[Token(Token = "0x60012E0")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60012E3")]
		private T UniRx.Async.IAwaiter<T>.GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x60012E4")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60012E5")]
		private void System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(Action action)
		{
		}

		[Token(Token = "0x60012E6")]
		private void System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60012E7")]
		private UniTask<T> UniRx.Async.IAsyncValueChangedEventHandler<T>.OnValueChangedAsync()
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60012E8")]
		private UniTask<(bool, T)> UniRx.Async.IAsyncValueChangedEventHandler<T>.OnValueChangedAsyncSuppressCancellationThrow()
		{
			return default(UniTask<(bool, T)>);
		}

		[Token(Token = "0x60012E9")]
		private UniTask<T> UniRx.Async.IAsyncEndEditEventHandler<T>.OnEndEditAsync()
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60012EA")]
		private UniTask<(bool, T)> UniRx.Async.IAsyncEndEditEventHandler<T>.OnEndEditAsyncSuppressCancellationThrow()
		{
			return default(UniTask<(bool, T)>);
		}
	}
}
namespace UniRx.Async.Triggers
{
	[Token(Token = "0x2000415")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B18BC", Offset = "0x8B18BC")]
	public class AsyncAnimatorTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<int> onAnimatorIK;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<int> onAnimatorIKs;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AsyncUnit> onAnimatorMove;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onAnimatorMoves;

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x117BCA4", Offset = "0x117BCA4", VA = "0x117BCA4", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x117BDB4", Offset = "0x117BDB4", VA = "0x117BDB4")]
		private void OnAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x117BE14", Offset = "0x117BE14", VA = "0x117BE14")]
		public UniTask OnAnimatorIKAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x117BE94", Offset = "0x117BE94", VA = "0x117BE94")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x117BF2C", Offset = "0x117BF2C", VA = "0x117BF2C")]
		public UniTask OnAnimatorMoveAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x117BFAC", Offset = "0x117BFAC", VA = "0x117BFAC")]
		public AsyncAnimatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000416")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B18CC", Offset = "0x8B18CC")]
	public class AsyncAwakeTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000417")]
		private class AwakeMonitor : IPlayerLoopItem
		{
			[Token(Token = "0x4000C33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly AsyncAwakeTrigger trigger;

			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x10BADF4", Offset = "0x10BADF4", VA = "0x10BADF4")]
			public AwakeMonitor(AsyncAwakeTrigger trigger)
			{
			}

			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x10BAE20", Offset = "0x10BAE20", VA = "0x10BAE20", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool called;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UniTaskCompletionSource promise;

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x117C018", Offset = "0x117C018", VA = "0x117C018")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x117C038", Offset = "0x117C038", VA = "0x117C038")]
		public UniTask AwakeAsync()
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x117C120", Offset = "0x117C120", VA = "0x117C120")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x117C134", Offset = "0x117C134", VA = "0x117C134")]
		public AsyncAwakeTrigger()
		{
		}
	}
	[Token(Token = "0x2000418")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B18DC", Offset = "0x8B18DC")]
	public class AsyncBeginDragTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onBeginDrag;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onBeginDrags;

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x117C13C", Offset = "0x117C13C", VA = "0x117C13C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x117C220", Offset = "0x117C220", VA = "0x117C220")]
		private void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x117C280", Offset = "0x117C280", VA = "0x117C280")]
		public UniTask OnBeginDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x117C300", Offset = "0x117C300", VA = "0x117C300")]
		public AsyncBeginDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000419")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B18EC", Offset = "0x8B18EC")]
	public class AsyncCancelTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onCancel;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onCancels;

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x117C364", Offset = "0x117C364", VA = "0x117C364", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x117C3CC", Offset = "0x117C3CC", VA = "0x117C3CC")]
		private void OnCancel(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x117C42C", Offset = "0x117C42C", VA = "0x117C42C")]
		public UniTask OnCancelAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x117C4AC", Offset = "0x117C4AC", VA = "0x117C4AC")]
		public AsyncCancelTrigger()
		{
		}
	}
	[Token(Token = "0x200041A")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B18FC", Offset = "0x8B18FC")]
	public class AsyncCanvasGroupChangedTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> onCanvasGroupChanged;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onCanvasGroupChangeds;

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x117C510", Offset = "0x117C510", VA = "0x117C510", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x117C578", Offset = "0x117C578", VA = "0x117C578")]
		private void OnCanvasGroupChanged()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x117C610", Offset = "0x117C610", VA = "0x117C610")]
		public UniTask OnCanvasGroupChangedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x117C690", Offset = "0x117C690", VA = "0x117C690")]
		public AsyncCanvasGroupChangedTrigger()
		{
		}
	}
	[Token(Token = "0x200041B")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B190C", Offset = "0x8B190C")]
	public class AsyncCollision2DTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<Collision2D> onCollisionEnter2D;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<Collision2D> onCollisionEnter2Ds;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<Collision2D> onCollisionExit2D;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<Collision2D> onCollisionExit2Ds;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<Collision2D> onCollisionStay2D;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<Collision2D> onCollisionStay2Ds;

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x117C6F4", Offset = "0x117C6F4", VA = "0x117C6F4", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x117C830", Offset = "0x117C830", VA = "0x117C830")]
		private void OnCollisionEnter2D(Collision2D coll)
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x117C890", Offset = "0x117C890", VA = "0x117C890")]
		public UniTask OnCollisionEnter2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x117C910", Offset = "0x117C910", VA = "0x117C910")]
		private void OnCollisionExit2D(Collision2D coll)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x117C970", Offset = "0x117C970", VA = "0x117C970")]
		public UniTask OnCollisionExit2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x117C9F0", Offset = "0x117C9F0", VA = "0x117C9F0")]
		private void OnCollisionStay2D(Collision2D coll)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x117CA50", Offset = "0x117CA50", VA = "0x117CA50")]
		public UniTask OnCollisionStay2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x117CAD0", Offset = "0x117CAD0", VA = "0x117CAD0")]
		public AsyncCollision2DTrigger()
		{
		}
	}
	[Token(Token = "0x200041C")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B191C", Offset = "0x8B191C")]
	public class AsyncCollisionTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<Collision> onCollisionEnter;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<Collision> onCollisionEnters;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<Collision> onCollisionExit;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<Collision> onCollisionExits;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<Collision> onCollisionStay;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<Collision> onCollisionStays;

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x117CB34", Offset = "0x117CB34", VA = "0x117CB34", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x117CBC4", Offset = "0x117CBC4", VA = "0x117CBC4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x117CC24", Offset = "0x117CC24", VA = "0x117CC24")]
		public UniTask OnCollisionEnterAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x117CCA4", Offset = "0x117CCA4", VA = "0x117CCA4")]
		private void OnCollisionExit(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x117CD04", Offset = "0x117CD04", VA = "0x117CD04")]
		public UniTask OnCollisionExitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x117CD84", Offset = "0x117CD84", VA = "0x117CD84")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x117CDE4", Offset = "0x117CDE4", VA = "0x117CDE4")]
		public UniTask OnCollisionStayAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x117CE64", Offset = "0x117CE64", VA = "0x117CE64")]
		public AsyncCollisionTrigger()
		{
		}
	}
	[Token(Token = "0x200041D")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B192C", Offset = "0x8B192C")]
	public class AsyncDeselectTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onDeselect;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onDeselects;

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x117CEC8", Offset = "0x117CEC8", VA = "0x117CEC8", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x117CF30", Offset = "0x117CF30", VA = "0x117CF30")]
		private void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x117CF90", Offset = "0x117CF90", VA = "0x117CF90")]
		public UniTask OnDeselectAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x117D010", Offset = "0x117D010", VA = "0x117D010")]
		public AsyncDeselectTrigger()
		{
		}
	}
	[Token(Token = "0x200041E")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B193C", Offset = "0x8B193C")]
	public class AsyncDestroyTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool called;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UniTaskCompletionSource promise;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object canellationTokenSourceOrQueue;

		[Token(Token = "0x1700017E")]
		public CancellationToken CancellationToken
		{
			[Token(Token = "0x6001318")]
			[Address(RVA = "0x117D074", Offset = "0x117D074", VA = "0x117D074")]
			get
			{
				return default(CancellationToken);
			}
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x117D0E8", Offset = "0x117D0E8", VA = "0x117D0E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x117D2B8", Offset = "0x117D2B8", VA = "0x117D2B8")]
		public UniTask OnDestroyAsync()
		{
			return default(UniTask);
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x117D364", Offset = "0x117D364", VA = "0x117D364")]
		public void AddCancellationTriggerOnDestory(CancellationTokenSource cts)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x117D644", Offset = "0x117D644", VA = "0x117D644")]
		public AsyncDestroyTrigger()
		{
		}
	}
	[Token(Token = "0x200041F")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B194C", Offset = "0x8B194C")]
	public class AsyncDragTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onDrag;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onDrags;

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x117D64C", Offset = "0x117D64C", VA = "0x117D64C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x117D6B4", Offset = "0x117D6B4", VA = "0x117D6B4")]
		private void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x117D714", Offset = "0x117D714", VA = "0x117D714")]
		public UniTask OnDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x117D794", Offset = "0x117D794", VA = "0x117D794")]
		public AsyncDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000420")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B195C", Offset = "0x8B195C")]
	public class AsyncDropTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onDrop;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onDrops;

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x117D7F8", Offset = "0x117D7F8", VA = "0x117D7F8", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x117D860", Offset = "0x117D860", VA = "0x117D860")]
		private void OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x117D8C0", Offset = "0x117D8C0", VA = "0x117D8C0")]
		public UniTask OnDropAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x117D940", Offset = "0x117D940", VA = "0x117D940")]
		public AsyncDropTrigger()
		{
		}
	}
	[Token(Token = "0x2000421")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B196C", Offset = "0x8B196C")]
	public class AsyncEnableDisableTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> onEnable;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onEnables;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AsyncUnit> onDisable;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onDisables;

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x117D9A4", Offset = "0x117D9A4", VA = "0x117D9A4", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x117DA20", Offset = "0x117DA20", VA = "0x117DA20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x117DAB8", Offset = "0x117DAB8", VA = "0x117DAB8")]
		public UniTask OnEnableAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x117DB38", Offset = "0x117DB38", VA = "0x117DB38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x117DBD0", Offset = "0x117DBD0", VA = "0x117DBD0")]
		public UniTask OnDisableAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x117DC50", Offset = "0x117DC50", VA = "0x117DC50")]
		public AsyncEnableDisableTrigger()
		{
		}
	}
	[Token(Token = "0x2000422")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B197C", Offset = "0x8B197C")]
	public class AsyncEndDragTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onEndDrag;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onEndDrags;

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x117DCB4", Offset = "0x117DCB4", VA = "0x117DCB4", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x117DD1C", Offset = "0x117DD1C", VA = "0x117DD1C")]
		private void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x117DD7C", Offset = "0x117DD7C", VA = "0x117DD7C")]
		public UniTask OnEndDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x117DDFC", Offset = "0x117DDFC", VA = "0x117DDFC")]
		public AsyncEndDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000423")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B198C", Offset = "0x8B198C")]
	public class AsyncEventTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onDeselect;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onDeselects;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AxisEventData> onMove;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AxisEventData> onMoves;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<PointerEventData> onPointerDown;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerDowns;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AsyncTriggerPromise<PointerEventData> onPointerEnter;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerEnters;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AsyncTriggerPromise<PointerEventData> onPointerExit;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerExits;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AsyncTriggerPromise<PointerEventData> onPointerUp;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerUps;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AsyncTriggerPromise<BaseEventData> onSelect;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onSelects;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AsyncTriggerPromise<PointerEventData> onPointerClick;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerClicks;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AsyncTriggerPromise<BaseEventData> onSubmit;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onSubmits;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AsyncTriggerPromise<PointerEventData> onDrag;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onDrags;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AsyncTriggerPromise<PointerEventData> onBeginDrag;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onBeginDrags;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AsyncTriggerPromise<PointerEventData> onEndDrag;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onEndDrags;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private AsyncTriggerPromise<PointerEventData> onDrop;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onDrops;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private AsyncTriggerPromise<BaseEventData> onUpdateSelected;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onUpdateSelecteds;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private AsyncTriggerPromise<PointerEventData> onInitializePotentialDrag;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onInitializePotentialDrags;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private AsyncTriggerPromise<BaseEventData> onCancel;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onCancels;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AsyncTriggerPromise<PointerEventData> onScroll;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onScrolls;

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x117DE60", Offset = "0x117DE60", VA = "0x117DE60", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x117E550", Offset = "0x117E550", VA = "0x117E550")]
		private void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x117E5B0", Offset = "0x117E5B0", VA = "0x117E5B0")]
		public UniTask OnDeselectAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x117E630", Offset = "0x117E630", VA = "0x117E630")]
		private void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x117E690", Offset = "0x117E690", VA = "0x117E690")]
		public UniTask OnMoveAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x117E710", Offset = "0x117E710", VA = "0x117E710")]
		private void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x117E770", Offset = "0x117E770", VA = "0x117E770")]
		public UniTask OnPointerDownAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x117E7F0", Offset = "0x117E7F0", VA = "0x117E7F0")]
		private void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x117E850", Offset = "0x117E850", VA = "0x117E850")]
		public UniTask OnPointerEnterAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x117E8D0", Offset = "0x117E8D0", VA = "0x117E8D0")]
		private void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x117E930", Offset = "0x117E930", VA = "0x117E930")]
		public UniTask OnPointerExitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x117E9B0", Offset = "0x117E9B0", VA = "0x117E9B0")]
		private void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x117EA10", Offset = "0x117EA10", VA = "0x117EA10")]
		public UniTask OnPointerUpAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x117EA90", Offset = "0x117EA90", VA = "0x117EA90")]
		private void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x117EAF0", Offset = "0x117EAF0", VA = "0x117EAF0")]
		public UniTask OnSelectAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x117EB70", Offset = "0x117EB70", VA = "0x117EB70")]
		private void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x117EBD0", Offset = "0x117EBD0", VA = "0x117EBD0")]
		public UniTask OnPointerClickAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x117EC50", Offset = "0x117EC50", VA = "0x117EC50")]
		private void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x117ECB0", Offset = "0x117ECB0", VA = "0x117ECB0")]
		public UniTask OnSubmitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x117ED30", Offset = "0x117ED30", VA = "0x117ED30")]
		private void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x117ED90", Offset = "0x117ED90", VA = "0x117ED90")]
		public UniTask OnDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x117EE10", Offset = "0x117EE10", VA = "0x117EE10")]
		private void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x117EE70", Offset = "0x117EE70", VA = "0x117EE70")]
		public UniTask OnBeginDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x117EEF0", Offset = "0x117EEF0", VA = "0x117EEF0")]
		private void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x117EF50", Offset = "0x117EF50", VA = "0x117EF50")]
		public UniTask OnEndDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x117EFD0", Offset = "0x117EFD0", VA = "0x117EFD0")]
		private void OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x117F030", Offset = "0x117F030", VA = "0x117F030")]
		public UniTask OnDropAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x117F0B0", Offset = "0x117F0B0", VA = "0x117F0B0")]
		private void OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x117F110", Offset = "0x117F110", VA = "0x117F110")]
		public UniTask OnUpdateSelectedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x117F190", Offset = "0x117F190", VA = "0x117F190")]
		private void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x117F1F0", Offset = "0x117F1F0", VA = "0x117F1F0")]
		public UniTask OnInitializePotentialDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x117F270", Offset = "0x117F270", VA = "0x117F270")]
		private void OnCancel(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x117F2D0", Offset = "0x117F2D0", VA = "0x117F2D0")]
		public UniTask OnCancelAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x117F350", Offset = "0x117F350", VA = "0x117F350")]
		private void OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x117F3B0", Offset = "0x117F3B0", VA = "0x117F3B0")]
		public UniTask OnScrollAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x117F430", Offset = "0x117F430", VA = "0x117F430")]
		public AsyncEventTrigger()
		{
		}
	}
	[Token(Token = "0x2000424")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B199C", Offset = "0x8B199C")]
	public class AsyncFixedUpdateTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> fixedUpdate;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> fixedUpdates;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x117F494", Offset = "0x117F494", VA = "0x117F494", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x117F4FC", Offset = "0x117F4FC", VA = "0x117F4FC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x117F594", Offset = "0x117F594", VA = "0x117F594")]
		public UniTask FixedUpdateAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x117F614", Offset = "0x117F614", VA = "0x117F614")]
		public AsyncFixedUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x2000425")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19AC", Offset = "0x8B19AC")]
	public class AsyncInitializePotentialDragTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onInitializePotentialDrag;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onInitializePotentialDrags;

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x117F678", Offset = "0x117F678", VA = "0x117F678", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x117F6E0", Offset = "0x117F6E0", VA = "0x117F6E0")]
		private void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x117F740", Offset = "0x117F740", VA = "0x117F740")]
		public UniTask OnInitializePotentialDragAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x117F7C0", Offset = "0x117F7C0", VA = "0x117F7C0")]
		public AsyncInitializePotentialDragTrigger()
		{
		}
	}
	[Token(Token = "0x2000426")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19BC", Offset = "0x8B19BC")]
	public class AsyncJointTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<float> onJointBreak;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<float> onJointBreaks;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<Joint2D> onJointBreak2D;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<Joint2D> onJointBreak2Ds;

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x117F824", Offset = "0x117F824", VA = "0x117F824", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x117F8A0", Offset = "0x117F8A0", VA = "0x117F8A0")]
		private void OnJointBreak(float breakForce)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x117F900", Offset = "0x117F900", VA = "0x117F900")]
		public UniTask OnJointBreakAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x117F980", Offset = "0x117F980", VA = "0x117F980")]
		private void OnJointBreak2D(Joint2D brokenJoint)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x117F9E0", Offset = "0x117F9E0", VA = "0x117F9E0")]
		public UniTask OnJointBreak2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x117FA60", Offset = "0x117FA60", VA = "0x117FA60")]
		public AsyncJointTrigger()
		{
		}
	}
	[Token(Token = "0x2000427")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19CC", Offset = "0x8B19CC")]
	public class AsyncLateUpdateTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> lateUpdate;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> lateUpdates;

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x117FAC4", Offset = "0x117FAC4", VA = "0x117FAC4", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x117FB2C", Offset = "0x117FB2C", VA = "0x117FB2C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x117FBC4", Offset = "0x117FBC4", VA = "0x117FBC4")]
		public UniTask LateUpdateAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x117FC44", Offset = "0x117FC44", VA = "0x117FC44")]
		public AsyncLateUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x2000428")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19DC", Offset = "0x8B19DC")]
	public class AsyncMoveTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AxisEventData> onMove;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AxisEventData> onMoves;

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x1180460", Offset = "0x1180460", VA = "0x1180460", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x11804C8", Offset = "0x11804C8", VA = "0x11804C8")]
		private void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x1180528", Offset = "0x1180528", VA = "0x1180528")]
		public UniTask OnMoveAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x11805A8", Offset = "0x11805A8", VA = "0x11805A8")]
		public AsyncMoveTrigger()
		{
		}
	}
	[Token(Token = "0x2000429")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19EC", Offset = "0x8B19EC")]
	public class AsyncParticleTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<GameObject> onParticleCollision;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<GameObject> onParticleCollisions;

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x118071C", Offset = "0x118071C", VA = "0x118071C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x1180784", Offset = "0x1180784", VA = "0x1180784")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x11807E4", Offset = "0x11807E4", VA = "0x11807E4")]
		public UniTask OnParticleCollisionAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x1180864", Offset = "0x1180864", VA = "0x1180864")]
		public AsyncParticleTrigger()
		{
		}
	}
	[Token(Token = "0x200042A")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B19FC", Offset = "0x8B19FC")]
	public class AsyncPointerClickTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onPointerClick;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerClicks;

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x11808C8", Offset = "0x11808C8", VA = "0x11808C8", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x1180930", Offset = "0x1180930", VA = "0x1180930")]
		private void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x1180990", Offset = "0x1180990", VA = "0x1180990")]
		public UniTask OnPointerClickAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x1180A10", Offset = "0x1180A10", VA = "0x1180A10")]
		public AsyncPointerClickTrigger()
		{
		}
	}
	[Token(Token = "0x200042B")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A0C", Offset = "0x8B1A0C")]
	public class AsyncPointerDownTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onPointerDown;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerDowns;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x1180A74", Offset = "0x1180A74", VA = "0x1180A74", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x1180ADC", Offset = "0x1180ADC", VA = "0x1180ADC")]
		private void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x1180B3C", Offset = "0x1180B3C", VA = "0x1180B3C")]
		public UniTask OnPointerDownAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x1180BBC", Offset = "0x1180BBC", VA = "0x1180BBC")]
		public AsyncPointerDownTrigger()
		{
		}
	}
	[Token(Token = "0x200042C")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A1C", Offset = "0x8B1A1C")]
	public class AsyncPointerEnterTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onPointerEnter;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerEnters;

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x1180C20", Offset = "0x1180C20", VA = "0x1180C20", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x1180C88", Offset = "0x1180C88", VA = "0x1180C88")]
		private void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x1180CE8", Offset = "0x1180CE8", VA = "0x1180CE8")]
		public UniTask OnPointerEnterAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x1180D68", Offset = "0x1180D68", VA = "0x1180D68")]
		public AsyncPointerEnterTrigger()
		{
		}
	}
	[Token(Token = "0x200042D")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A2C", Offset = "0x8B1A2C")]
	public class AsyncPointerExitTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onPointerExit;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerExits;

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x1180DCC", Offset = "0x1180DCC", VA = "0x1180DCC", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x1180E34", Offset = "0x1180E34", VA = "0x1180E34")]
		private void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1180E94", Offset = "0x1180E94", VA = "0x1180E94")]
		public UniTask OnPointerExitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x1180F14", Offset = "0x1180F14", VA = "0x1180F14")]
		public AsyncPointerExitTrigger()
		{
		}
	}
	[Token(Token = "0x200042E")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A3C", Offset = "0x8B1A3C")]
	public class AsyncPointerUpTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onPointerUp;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onPointerUps;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x1180F78", Offset = "0x1180F78", VA = "0x1180F78", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1180FE0", Offset = "0x1180FE0", VA = "0x1180FE0")]
		private void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x1181040", Offset = "0x1181040", VA = "0x1181040")]
		public UniTask OnPointerUpAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x11810C0", Offset = "0x11810C0", VA = "0x11810C0")]
		public AsyncPointerUpTrigger()
		{
		}
	}
	[Token(Token = "0x200042F")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A4C", Offset = "0x8B1A4C")]
	public class AsyncRectTransformTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> onRectTransformDimensionsChange;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onRectTransformDimensionsChanges;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AsyncUnit> onRectTransformRemoved;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onRectTransformRemoveds;

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x118189C", Offset = "0x118189C", VA = "0x118189C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x1181918", Offset = "0x1181918", VA = "0x1181918")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x11819B0", Offset = "0x11819B0", VA = "0x11819B0")]
		public UniTask OnRectTransformDimensionsChangeAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x1181A30", Offset = "0x1181A30", VA = "0x1181A30")]
		private void OnRectTransformRemoved()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x1181AC8", Offset = "0x1181AC8", VA = "0x1181AC8")]
		public UniTask OnRectTransformRemovedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x1181B48", Offset = "0x1181B48", VA = "0x1181B48")]
		public AsyncRectTransformTrigger()
		{
		}
	}
	[Token(Token = "0x2000430")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A5C", Offset = "0x8B1A5C")]
	public class AsyncScrollTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<PointerEventData> onScroll;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<PointerEventData> onScrolls;

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x1181BAC", Offset = "0x1181BAC", VA = "0x1181BAC", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x1181C14", Offset = "0x1181C14", VA = "0x1181C14")]
		private void OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x1181C74", Offset = "0x1181C74", VA = "0x1181C74")]
		public UniTask OnScrollAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x1181CF4", Offset = "0x1181CF4", VA = "0x1181CF4")]
		public AsyncScrollTrigger()
		{
		}
	}
	[Token(Token = "0x2000431")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A6C", Offset = "0x8B1A6C")]
	public class AsyncSelectTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onSelect;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onSelects;

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x1181D58", Offset = "0x1181D58", VA = "0x1181D58", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x1181DC0", Offset = "0x1181DC0", VA = "0x1181DC0")]
		private void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x1181E20", Offset = "0x1181E20", VA = "0x1181E20")]
		public UniTask OnSelectAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x1181EA0", Offset = "0x1181EA0", VA = "0x1181EA0")]
		public AsyncSelectTrigger()
		{
		}
	}
	[Token(Token = "0x2000432")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A7C", Offset = "0x8B1A7C")]
	public class AsyncStartTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000433")]
		private class AwakeMonitor : IPlayerLoopItem
		{
			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly AsyncStartTrigger trigger;

			[Token(Token = "0x6001394")]
			[Address(RVA = "0x10BB114", Offset = "0x10BB114", VA = "0x10BB114")]
			public AwakeMonitor(AsyncStartTrigger trigger)
			{
			}

			[Token(Token = "0x6001395")]
			[Address(RVA = "0x10BB140", Offset = "0x10BB140", VA = "0x10BB140", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool awakeCalled;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool called;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UniTaskCompletionSource promise;

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x1181F04", Offset = "0x1181F04", VA = "0x1181F04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x1181F10", Offset = "0x1181F10", VA = "0x1181F10")]
		private void Start()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x1181F30", Offset = "0x1181F30", VA = "0x1181F30")]
		public UniTask StartAsync()
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x1182020", Offset = "0x1182020", VA = "0x1182020")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x1182034", Offset = "0x1182034", VA = "0x1182034")]
		public AsyncStartTrigger()
		{
		}
	}
	[Token(Token = "0x2000434")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A8C", Offset = "0x8B1A8C")]
	public class AsyncSubmitTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onSubmit;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onSubmits;

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x118203C", Offset = "0x118203C", VA = "0x118203C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x11820A4", Offset = "0x11820A4", VA = "0x11820A4")]
		private void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x1182104", Offset = "0x1182104", VA = "0x1182104")]
		public UniTask OnSubmitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x1182184", Offset = "0x1182184", VA = "0x1182184")]
		public AsyncSubmitTrigger()
		{
		}
	}
	[Token(Token = "0x2000435")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1A9C", Offset = "0x8B1A9C")]
	public class AsyncTransformChangedTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> onBeforeTransformParentChanged;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onBeforeTransformParentChangeds;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AsyncUnit> onTransformParentChanged;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onTransformParentChangeds;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<AsyncUnit> onTransformChildrenChanged;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onTransformChildrenChangeds;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x11821E8", Offset = "0x11821E8", VA = "0x11821E8", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x1182278", Offset = "0x1182278", VA = "0x1182278")]
		private void OnBeforeTransformParentChanged()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x1182310", Offset = "0x1182310", VA = "0x1182310")]
		public UniTask OnBeforeTransformParentChangedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x1182390", Offset = "0x1182390", VA = "0x1182390")]
		private void OnTransformParentChanged()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x1182428", Offset = "0x1182428", VA = "0x1182428")]
		public UniTask OnTransformParentChangedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x11824A8", Offset = "0x11824A8", VA = "0x11824A8")]
		private void OnTransformChildrenChanged()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x1182540", Offset = "0x1182540", VA = "0x1182540")]
		public UniTask OnTransformChildrenChangedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x11825C0", Offset = "0x11825C0", VA = "0x11825C0")]
		public AsyncTransformChangedTrigger()
		{
		}
	}
	[Token(Token = "0x2000436")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1AAC", Offset = "0x8B1AAC")]
	public class AsyncTrigger2DTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<Collider2D> onTriggerEnter2D;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<Collider2D> onTriggerEnter2Ds;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<Collider2D> onTriggerExit2D;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<Collider2D> onTriggerExit2Ds;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<Collider2D> onTriggerStay2D;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<Collider2D> onTriggerStay2Ds;

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x1182624", Offset = "0x1182624", VA = "0x1182624", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x11826B4", Offset = "0x11826B4", VA = "0x11826B4")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x1182714", Offset = "0x1182714", VA = "0x1182714")]
		public UniTask OnTriggerEnter2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x1182794", Offset = "0x1182794", VA = "0x1182794")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x11827F4", Offset = "0x11827F4", VA = "0x11827F4")]
		public UniTask OnTriggerExit2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x1182874", Offset = "0x1182874", VA = "0x1182874")]
		private void OnTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x11828D4", Offset = "0x11828D4", VA = "0x11828D4")]
		public UniTask OnTriggerStay2DAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x1182954", Offset = "0x1182954", VA = "0x1182954")]
		public AsyncTrigger2DTrigger()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public interface ICancelablePromise
	{
		[Token(Token = "0x1700017F")]
		CancellationToken RegisteredCancellationToken
		{
			[Token(Token = "0x60013AA")]
			get;
		}

		[Token(Token = "0x60013AB")]
		bool TrySetCanceled();
	}
	[Token(Token = "0x2000438")]
	public class AsyncTriggerPromise<T> : ReusablePromise<T>, IPromise<T>, IResolvePromise<T>, IRejectPromise, ICancelPromise, ICancelablePromise
	{
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B38F4", Offset = "0x8B38F4")]
		private CancellationToken <RegisteredCancellationToken>k__BackingField;

		[Token(Token = "0x17000180")]
		public CancellationToken RegisteredCancellationToken
		{
			[Token(Token = "0x60013AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BCF78", Offset = "0x8BCF78")]
			get
			{
				return default(CancellationToken);
			}
			[Token(Token = "0x60013AD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BCF88", Offset = "0x8BCF88")]
			private set
			{
			}
		}

		[Token(Token = "0x60013AE")]
		public AsyncTriggerPromise()
		{
		}

		[Token(Token = "0x60013AF")]
		public AsyncTriggerPromise(CancellationToken cancellationToken)
		{
		}

		[Token(Token = "0x60013B0")]
		public override T GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x60013B1")]
		public override bool TrySetResult(T result)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B2")]
		public override bool TrySetCanceled()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000439")]
	public interface ICancellationTokenKeyDictionary
	{
		[Token(Token = "0x60013B3")]
		void Remove(CancellationToken token);
	}
	[Token(Token = "0x200043A")]
	public class AsyncTriggerPromiseDictionary<TPromiseType> : Dictionary<CancellationToken, AsyncTriggerPromise<TPromiseType>>, ICancellationTokenKeyDictionary, IEnumerable<ICancelablePromise>, IEnumerable
	{
		[Token(Token = "0x60013B4")]
		public AsyncTriggerPromiseDictionary()
		{
		}

		[Token(Token = "0x60013B5")]
		private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		private void UniRx.Async.Triggers.ICancellationTokenKeyDictionary.Remove(CancellationToken token)
		{
		}
	}
	[Token(Token = "0x200043B")]
	public abstract class AsyncTriggerBase : MonoBehaviour
	{
		[Token(Token = "0x200043C")]
		private class AwakeMonitor : IPlayerLoopItem
		{
			[Token(Token = "0x4000CB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly AsyncTriggerBase trigger;

			[Token(Token = "0x60013C4")]
			[Address(RVA = "0x10BDB78", Offset = "0x10BDB78", VA = "0x10BDB78")]
			public AwakeMonitor(AsyncTriggerBase trigger)
			{
			}

			[Token(Token = "0x60013C5")]
			[Address(RVA = "0x10BDBA4", Offset = "0x10BDBA4", VA = "0x10BDBA4", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200043D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1ABC", Offset = "0x8B1ABC")]
		private sealed class <Concat>d__6 : IEnumerable<ICancelablePromise>, IEnumerable, IEnumerator<ICancelablePromise>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ICancelablePromise <>2__current;

			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ICancelablePromise p1;

			[Token(Token = "0x4000CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ICancelablePromise <>3__p1;

			[Token(Token = "0x4000CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerable<ICancelablePromise> p1s;

			[Token(Token = "0x4000CB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IEnumerable<ICancelablePromise> <>3__p1s;

			[Token(Token = "0x4000CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<ICancelablePromise> <>7__wrap1;

			[Token(Token = "0x17000181")]
			private ICancelablePromise System.Collections.Generic.IEnumerator<UniRx.Async.Triggers.ICancelablePromise>.Current
			{
				[Token(Token = "0x60013CA")]
				[Address(RVA = "0x10BBAC8", Offset = "0x10BBAC8", VA = "0x10BBAC8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000182")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013CC")]
				[Address(RVA = "0x10BBB10", Offset = "0x10BBB10", VA = "0x10BBB10", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C6")]
			[Address(RVA = "0x10BB71C", Offset = "0x10BB71C", VA = "0x10BB71C")]
			[DebuggerHidden]
			public <Concat>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60013C7")]
			[Address(RVA = "0x10BB754", Offset = "0x10BB754", VA = "0x10BB754", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0x10BB82C", Offset = "0x10BB82C", VA = "0x10BB82C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013C9")]
			[Address(RVA = "0x10BB770", Offset = "0x10BB770", VA = "0x10BB770")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013CB")]
			[Address(RVA = "0x10BBAD0", Offset = "0x10BBAD0", VA = "0x10BBAD0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013CD")]
			[Address(RVA = "0x10BBB18", Offset = "0x10BBB18", VA = "0x10BBB18", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013CE")]
			[Address(RVA = "0x10BBBC8", Offset = "0x10BBBC8", VA = "0x10BBBC8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200043E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1ACC", Offset = "0x8B1ACC")]
		private sealed class <Concat>d__7 : IEnumerable<ICancelablePromise>, IEnumerable, IEnumerator<ICancelablePromise>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ICancelablePromise <>2__current;

			[Token(Token = "0x4000CBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ICancelablePromise p1;

			[Token(Token = "0x4000CBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ICancelablePromise <>3__p1;

			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerable<ICancelablePromise> p1s;

			[Token(Token = "0x4000CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IEnumerable<ICancelablePromise> <>3__p1s;

			[Token(Token = "0x4000CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ICancelablePromise p2;

			[Token(Token = "0x4000CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ICancelablePromise <>3__p2;

			[Token(Token = "0x4000CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerable<ICancelablePromise> p2s;

			[Token(Token = "0x4000CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public IEnumerable<ICancelablePromise> <>3__p2s;

			[Token(Token = "0x4000CC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private IEnumerator<ICancelablePromise> <>7__wrap1;

			[Token(Token = "0x17000183")]
			private ICancelablePromise System.Collections.Generic.IEnumerator<UniRx.Async.Triggers.ICancelablePromise>.Current
			{
				[Token(Token = "0x60013D4")]
				[Address(RVA = "0x10BC268", Offset = "0x10BC268", VA = "0x10BC268", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000184")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D6")]
				[Address(RVA = "0x10BC2B0", Offset = "0x10BC2B0", VA = "0x10BC2B0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013CF")]
			[Address(RVA = "0x10BBBCC", Offset = "0x10BBBCC", VA = "0x10BBBCC")]
			[DebuggerHidden]
			public <Concat>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60013D0")]
			[Address(RVA = "0x10BBC04", Offset = "0x10BBC04", VA = "0x10BBC04", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013D1")]
			[Address(RVA = "0x10BBE18", Offset = "0x10BBE18", VA = "0x10BBE18", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D2")]
			[Address(RVA = "0x10BBCA0", Offset = "0x10BBCA0", VA = "0x10BBCA0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0x10BBD5C", Offset = "0x10BBD5C", VA = "0x10BBD5C")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60013D5")]
			[Address(RVA = "0x10BC270", Offset = "0x10BC270", VA = "0x10BC270", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013D7")]
			[Address(RVA = "0x10BC2B8", Offset = "0x10BC2B8", VA = "0x10BC2B8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013D8")]
			[Address(RVA = "0x10BC378", Offset = "0x10BC378", VA = "0x10BC378", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200043F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1ADC", Offset = "0x8B1ADC")]
		private sealed class <Concat>d__8 : IEnumerable<ICancelablePromise>, IEnumerable, IEnumerator<ICancelablePromise>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ICancelablePromise <>2__current;

			[Token(Token = "0x4000CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ICancelablePromise p1;

			[Token(Token = "0x4000CC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ICancelablePromise <>3__p1;

			[Token(Token = "0x4000CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerable<ICancelablePromise> p1s;

			[Token(Token = "0x4000CCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IEnumerable<ICancelablePromise> <>3__p1s;

			[Token(Token = "0x4000CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ICancelablePromise p2;

			[Token(Token = "0x4000CCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ICancelablePromise <>3__p2;

			[Token(Token = "0x4000CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerable<ICancelablePromise> p2s;

			[Token(Token = "0x4000CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public IEnumerable<ICancelablePromise> <>3__p2s;

			[Token(Token = "0x4000CD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private ICancelablePromise p3;

			[Token(Token = "0x4000CD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public ICancelablePromise <>3__p3;

			[Token(Token = "0x4000CD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private IEnumerable<ICancelablePromise> p3s;

			[Token(Token = "0x4000CD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public IEnumerable<ICancelablePromise> <>3__p3s;

			[Token(Token = "0x4000CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private IEnumerator<ICancelablePromise> <>7__wrap1;

			[Token(Token = "0x17000185")]
			private ICancelablePromise System.Collections.Generic.IEnumerator<UniRx.Async.Triggers.ICancelablePromise>.Current
			{
				[Token(Token = "0x60013DF")]
				[Address(RVA = "0x10BCD04", Offset = "0x10BCD04", VA = "0x10BCD04", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000186")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E1")]
				[Address(RVA = "0x10BCD4C", Offset = "0x10BCD4C", VA = "0x10BCD4C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013D9")]
			[Address(RVA = "0x10BC37C", Offset = "0x10BC37C", VA = "0x10BC37C")]
			[DebuggerHidden]
			public <Concat>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60013DA")]
			[Address(RVA = "0x10BC3B4", Offset = "0x10BC3B4", VA = "0x10BC3B4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013DB")]
			[Address(RVA = "0x10BC6F0", Offset = "0x10BC6F0", VA = "0x10BC6F0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013DC")]
			[Address(RVA = "0x10BC4BC", Offset = "0x10BC4BC", VA = "0x10BC4BC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013DD")]
			[Address(RVA = "0x10BC578", Offset = "0x10BC578", VA = "0x10BC578")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x10BC634", Offset = "0x10BC634", VA = "0x10BC634")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x60013E0")]
			[Address(RVA = "0x10BCD0C", Offset = "0x10BCD0C", VA = "0x10BCD0C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013E2")]
			[Address(RVA = "0x10BCD54", Offset = "0x10BCD54", VA = "0x10BCD54", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0x10BCE24", Offset = "0x10BCE24", VA = "0x10BCE24", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000440")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1AEC", Offset = "0x8B1AEC")]
		private sealed class <Concat>d__9 : IEnumerable<ICancelablePromise>, IEnumerable, IEnumerator<ICancelablePromise>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ICancelablePromise <>2__current;

			[Token(Token = "0x4000CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ICancelablePromise p1;

			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ICancelablePromise <>3__p1;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerable<ICancelablePromise> p1s;

			[Token(Token = "0x4000CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IEnumerable<ICancelablePromise> <>3__p1s;

			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ICancelablePromise p2;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ICancelablePromise <>3__p2;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerable<ICancelablePromise> p2s;

			[Token(Token = "0x4000CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public IEnumerable<ICancelablePromise> <>3__p2s;

			[Token(Token = "0x4000CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private ICancelablePromise p3;

			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public ICancelablePromise <>3__p3;

			[Token(Token = "0x4000CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private IEnumerable<ICancelablePromise> p3s;

			[Token(Token = "0x4000CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public IEnumerable<ICancelablePromise> <>3__p3s;

			[Token(Token = "0x4000CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private ICancelablePromise p4;

			[Token(Token = "0x4000CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public ICancelablePromise <>3__p4;

			[Token(Token = "0x4000CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private IEnumerable<ICancelablePromise> p4s;

			[Token(Token = "0x4000CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public IEnumerable<ICancelablePromise> <>3__p4s;

			[Token(Token = "0x4000CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private IEnumerator<ICancelablePromise> <>7__wrap1;

			[Token(Token = "0x17000187")]
			private ICancelablePromise System.Collections.Generic.IEnumerator<UniRx.Async.Triggers.ICancelablePromise>.Current
			{
				[Token(Token = "0x60013EB")]
				[Address(RVA = "0x10BDA44", Offset = "0x10BDA44", VA = "0x10BDA44", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000188")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013ED")]
				[Address(RVA = "0x10BDA8C", Offset = "0x10BDA8C", VA = "0x10BDA8C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013E4")]
			[Address(RVA = "0x10BCE28", Offset = "0x10BCE28", VA = "0x10BCE28")]
			[DebuggerHidden]
			public <Concat>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60013E5")]
			[Address(RVA = "0x10BCE60", Offset = "0x10BCE60", VA = "0x10BCE60", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E6")]
			[Address(RVA = "0x10BD26C", Offset = "0x10BD26C", VA = "0x10BD26C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E7")]
			[Address(RVA = "0x10BCF7C", Offset = "0x10BCF7C", VA = "0x10BCF7C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013E8")]
			[Address(RVA = "0x10BD038", Offset = "0x10BD038", VA = "0x10BD038")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60013E9")]
			[Address(RVA = "0x10BD0F4", Offset = "0x10BD0F4", VA = "0x10BD0F4")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x60013EA")]
			[Address(RVA = "0x10BD1B0", Offset = "0x10BD1B0", VA = "0x10BD1B0")]
			private void <>m__Finally4()
			{
			}

			[Token(Token = "0x60013EC")]
			[Address(RVA = "0x10BDA4C", Offset = "0x10BDA4C", VA = "0x10BDA4C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013EE")]
			[Address(RVA = "0x10BDA94", Offset = "0x10BDA94", VA = "0x10BDA94", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013EF")]
			[Address(RVA = "0x10BDB74", Offset = "0x10BDB74", VA = "0x10BDB74", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000441")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1AFC", Offset = "0x8B1AFC")]
		private sealed class <Concat>d__10 : IEnumerable<ICancelablePromise>, IEnumerable, IEnumerator<ICancelablePromise>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ICancelablePromise <>2__current;

			[Token(Token = "0x4000CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private object[] promises;

			[Token(Token = "0x4000CED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public object[] <>3__promises;

			[Token(Token = "0x4000CEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private object[] <>7__wrap1;

			[Token(Token = "0x4000CEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x4000CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<ICancelablePromise> <>7__wrap3;

			[Token(Token = "0x17000189")]
			private ICancelablePromise System.Collections.Generic.IEnumerator<UniRx.Async.Triggers.ICancelablePromise>.Current
			{
				[Token(Token = "0x60013F4")]
				[Address(RVA = "0x10BB620", Offset = "0x10BB620", VA = "0x10BB620", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013F6")]
				[Address(RVA = "0x10BB668", Offset = "0x10BB668", VA = "0x10BB668", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F0")]
			[Address(RVA = "0x10BB1E0", Offset = "0x10BB1E0", VA = "0x10BB1E0")]
			[DebuggerHidden]
			public <Concat>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013F1")]
			[Address(RVA = "0x10BB218", Offset = "0x10BB218", VA = "0x10BB218", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F2")]
			[Address(RVA = "0x10BB2F0", Offset = "0x10BB2F0", VA = "0x10BB2F0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F3")]
			[Address(RVA = "0x10BB234", Offset = "0x10BB234", VA = "0x10BB234")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60013F5")]
			[Address(RVA = "0x10BB628", Offset = "0x10BB628", VA = "0x10BB628", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60013F7")]
			[Address(RVA = "0x10BB670", Offset = "0x10BB670", VA = "0x10BB670", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<ICancelablePromise> System.Collections.Generic.IEnumerable<UniRx.Async.Triggers.ICancelablePromise>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013F8")]
			[Address(RVA = "0x10BB718", Offset = "0x10BB718", VA = "0x10BB718", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Action<object> Callback;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool calledAwake;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool destroyCalled;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CancellationTokenRegistration[] registeredCancellations;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int registeredCancellationsCount;

		[Token(Token = "0x60013B7")]
		protected abstract IEnumerable<ICancelablePromise> GetPromises();

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x117C1A4", Offset = "0x117C1A4", VA = "0x117C1A4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BCF98", Offset = "0x8BCF98")]
		protected static IEnumerable<ICancelablePromise> Concat(ICancelablePromise p1, IEnumerable<ICancelablePromise> p1s)
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x117BD20", Offset = "0x117BD20", VA = "0x117BD20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BCFF8", Offset = "0x8BCFF8")]
		protected static IEnumerable<ICancelablePromise> Concat(ICancelablePromise p1, IEnumerable<ICancelablePromise> p1s, ICancelablePromise p2, IEnumerable<ICancelablePromise> p2s)
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x117C784", Offset = "0x117C784", VA = "0x117C784")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BD058", Offset = "0x8BD058")]
		protected static IEnumerable<ICancelablePromise> Concat(ICancelablePromise p1, IEnumerable<ICancelablePromise> p1s, ICancelablePromise p2, IEnumerable<ICancelablePromise> p2s, ICancelablePromise p3, IEnumerable<ICancelablePromise> p3s)
		{
			return null;
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x11829B8", Offset = "0x11829B8", VA = "0x11829B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BD0B8", Offset = "0x8BD0B8")]
		protected static IEnumerable<ICancelablePromise> Concat(ICancelablePromise p1, IEnumerable<ICancelablePromise> p1s, ICancelablePromise p2, IEnumerable<ICancelablePromise> p2s, ICancelablePromise p3, IEnumerable<ICancelablePromise> p3s, ICancelablePromise p4, IEnumerable<ICancelablePromise> p4s)
		{
			return null;
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x117E4E4", Offset = "0x117E4E4", VA = "0x117E4E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BD118", Offset = "0x8BD118")]
		protected static IEnumerable<ICancelablePromise> Concat(params object[] promises)
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		protected UniTask<T> GetOrAddPromise<T>(ref AsyncTriggerPromise<T> promise, ref AsyncTriggerPromiseDictionary<T> promises, CancellationToken cancellationToken)
		{
			return default(UniTask<T>);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1182A7C", Offset = "0x1182A7C", VA = "0x1182A7C")]
		private static void CancelCallback(object state)
		{
		}

		[Token(Token = "0x60013BF")]
		protected void TrySetResult<T>(ReusablePromise<T> promise, AsyncTriggerPromiseDictionary<T> promises, T value)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x1182C7C", Offset = "0x1182C7C", VA = "0x1182C7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x1182C88", Offset = "0x1182C88", VA = "0x1182C88")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x117C010", Offset = "0x117C010", VA = "0x117C010")]
		protected AsyncTriggerBase()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public static class AsyncTriggerExtensions
	{
		[Token(Token = "0x60013F9")]
		private static T GetOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x1183160", Offset = "0x1183160", VA = "0x1183160")]
		public static UniTask OnDestroyAsync(this GameObject gameObject)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x11831C8", Offset = "0x11831C8", VA = "0x11831C8")]
		public static UniTask OnDestroyAsync(this Component component)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x1183204", Offset = "0x1183204", VA = "0x1183204")]
		public static CancellationToken GetCancellationTokenOnDestroy(this GameObject gameObject)
		{
			return default(CancellationToken);
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x1183220", Offset = "0x1183220", VA = "0x1183220")]
		public static CancellationToken GetCancellationTokenOnDestroy(this Component component)
		{
			return default(CancellationToken);
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x118323C", Offset = "0x118323C", VA = "0x118323C")]
		public static UniTask StartAsync(this GameObject gameObject)
		{
			return default(UniTask);
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x11832A4", Offset = "0x11832A4", VA = "0x11832A4")]
		public static UniTask StartAsync(this Component component)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x11832E0", Offset = "0x11832E0", VA = "0x11832E0")]
		public static UniTask AwakeAsync(this GameObject gameObject)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x1183348", Offset = "0x1183348", VA = "0x1183348")]
		public static UniTask AwakeAsync(this Component component)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x1183384", Offset = "0x1183384", VA = "0x1183384")]
		public static AsyncAnimatorTrigger GetAsyncAnimatorTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x11833D0", Offset = "0x11833D0", VA = "0x11833D0")]
		public static AsyncAnimatorTrigger GetAsyncAnimatorTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x11832FC", Offset = "0x11832FC", VA = "0x11832FC")]
		public static AsyncAwakeTrigger GetAsyncAwakeTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x1183364", Offset = "0x1183364", VA = "0x1183364")]
		public static AsyncAwakeTrigger GetAsyncAwakeTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x11833F0", Offset = "0x11833F0", VA = "0x11833F0")]
		public static AsyncBeginDragTrigger GetAsyncBeginDragTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x118343C", Offset = "0x118343C", VA = "0x118343C")]
		public static AsyncBeginDragTrigger GetAsyncBeginDragTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x118345C", Offset = "0x118345C", VA = "0x118345C")]
		public static AsyncCancelTrigger GetAsyncCancelTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x11834A8", Offset = "0x11834A8", VA = "0x11834A8")]
		public static AsyncCancelTrigger GetAsyncCancelTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x11834C8", Offset = "0x11834C8", VA = "0x11834C8")]
		public static AsyncCanvasGroupChangedTrigger GetAsyncCanvasGroupChangedTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x1183514", Offset = "0x1183514", VA = "0x1183514")]
		public static AsyncCanvasGroupChangedTrigger GetAsyncCanvasGroupChangedTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x1183534", Offset = "0x1183534", VA = "0x1183534")]
		public static AsyncCollision2DTrigger GetAsyncCollision2DTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x1183580", Offset = "0x1183580", VA = "0x1183580")]
		public static AsyncCollision2DTrigger GetAsyncCollision2DTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x11835A0", Offset = "0x11835A0", VA = "0x11835A0")]
		public static AsyncCollisionTrigger GetAsyncCollisionTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x11835EC", Offset = "0x11835EC", VA = "0x11835EC")]
		public static AsyncCollisionTrigger GetAsyncCollisionTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x118360C", Offset = "0x118360C", VA = "0x118360C")]
		public static AsyncDeselectTrigger GetAsyncDeselectTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x1183658", Offset = "0x1183658", VA = "0x1183658")]
		public static AsyncDeselectTrigger GetAsyncDeselectTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x118317C", Offset = "0x118317C", VA = "0x118317C")]
		public static AsyncDestroyTrigger GetAsyncDestroyTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x11831E4", Offset = "0x11831E4", VA = "0x11831E4")]
		public static AsyncDestroyTrigger GetAsyncDestroyTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x1183678", Offset = "0x1183678", VA = "0x1183678")]
		public static AsyncDragTrigger GetAsyncDragTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x11836C4", Offset = "0x11836C4", VA = "0x11836C4")]
		public static AsyncDragTrigger GetAsyncDragTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x11836E4", Offset = "0x11836E4", VA = "0x11836E4")]
		public static AsyncDropTrigger GetAsyncDropTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x1183730", Offset = "0x1183730", VA = "0x1183730")]
		public static AsyncDropTrigger GetAsyncDropTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x1183750", Offset = "0x1183750", VA = "0x1183750")]
		public static AsyncEnableDisableTrigger GetAsyncEnableDisableTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x118379C", Offset = "0x118379C", VA = "0x118379C")]
		public static AsyncEnableDisableTrigger GetAsyncEnableDisableTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x11837BC", Offset = "0x11837BC", VA = "0x11837BC")]
		public static AsyncEndDragTrigger GetAsyncEndDragTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x1183808", Offset = "0x1183808", VA = "0x1183808")]
		public static AsyncEndDragTrigger GetAsyncEndDragTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x1183828", Offset = "0x1183828", VA = "0x1183828")]
		public static AsyncFixedUpdateTrigger GetAsyncFixedUpdateTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x1183874", Offset = "0x1183874", VA = "0x1183874")]
		public static AsyncFixedUpdateTrigger GetAsyncFixedUpdateTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x1183894", Offset = "0x1183894", VA = "0x1183894")]
		public static AsyncInitializePotentialDragTrigger GetAsyncInitializePotentialDragTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x11838E0", Offset = "0x11838E0", VA = "0x11838E0")]
		public static AsyncInitializePotentialDragTrigger GetAsyncInitializePotentialDragTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x1183900", Offset = "0x1183900", VA = "0x1183900")]
		public static AsyncJointTrigger GetAsyncJointTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x118394C", Offset = "0x118394C", VA = "0x118394C")]
		public static AsyncJointTrigger GetAsyncJointTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x118396C", Offset = "0x118396C", VA = "0x118396C")]
		public static AsyncLateUpdateTrigger GetAsyncLateUpdateTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x11839B8", Offset = "0x11839B8", VA = "0x11839B8")]
		public static AsyncLateUpdateTrigger GetAsyncLateUpdateTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x11839D8", Offset = "0x11839D8", VA = "0x11839D8")]
		public static AsyncMoveTrigger GetAsyncMoveTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x1183A24", Offset = "0x1183A24", VA = "0x1183A24")]
		public static AsyncMoveTrigger GetAsyncMoveTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x1183A44", Offset = "0x1183A44", VA = "0x1183A44")]
		public static AsyncParticleTrigger GetAsyncParticleTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x1183A90", Offset = "0x1183A90", VA = "0x1183A90")]
		public static AsyncParticleTrigger GetAsyncParticleTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x1183AB0", Offset = "0x1183AB0", VA = "0x1183AB0")]
		public static AsyncPointerClickTrigger GetAsyncPointerClickTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x1183AFC", Offset = "0x1183AFC", VA = "0x1183AFC")]
		public static AsyncPointerClickTrigger GetAsyncPointerClickTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x1183B1C", Offset = "0x1183B1C", VA = "0x1183B1C")]
		public static AsyncPointerDownTrigger GetAsyncPointerDownTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x1183B68", Offset = "0x1183B68", VA = "0x1183B68")]
		public static AsyncPointerDownTrigger GetAsyncPointerDownTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x1183B88", Offset = "0x1183B88", VA = "0x1183B88")]
		public static AsyncPointerEnterTrigger GetAsyncPointerEnterTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x1183BD4", Offset = "0x1183BD4", VA = "0x1183BD4")]
		public static AsyncPointerEnterTrigger GetAsyncPointerEnterTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x1183BF4", Offset = "0x1183BF4", VA = "0x1183BF4")]
		public static AsyncPointerExitTrigger GetAsyncPointerExitTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x1183C40", Offset = "0x1183C40", VA = "0x1183C40")]
		public static AsyncPointerExitTrigger GetAsyncPointerExitTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x1183C60", Offset = "0x1183C60", VA = "0x1183C60")]
		public static AsyncPointerUpTrigger GetAsyncPointerUpTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x1183CAC", Offset = "0x1183CAC", VA = "0x1183CAC")]
		public static AsyncPointerUpTrigger GetAsyncPointerUpTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x1183CCC", Offset = "0x1183CCC", VA = "0x1183CCC")]
		public static AsyncRectTransformTrigger GetAsyncRectTransformTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x1183D18", Offset = "0x1183D18", VA = "0x1183D18")]
		public static AsyncRectTransformTrigger GetAsyncRectTransformTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x1183D38", Offset = "0x1183D38", VA = "0x1183D38")]
		public static AsyncScrollTrigger GetAsyncScrollTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x1183D84", Offset = "0x1183D84", VA = "0x1183D84")]
		public static AsyncScrollTrigger GetAsyncScrollTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x1183DA4", Offset = "0x1183DA4", VA = "0x1183DA4")]
		public static AsyncSelectTrigger GetAsyncSelectTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x1183DF0", Offset = "0x1183DF0", VA = "0x1183DF0")]
		public static AsyncSelectTrigger GetAsyncSelectTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x1183258", Offset = "0x1183258", VA = "0x1183258")]
		public static AsyncStartTrigger GetAsyncStartTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x11832C0", Offset = "0x11832C0", VA = "0x11832C0")]
		public static AsyncStartTrigger GetAsyncStartTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x1183E10", Offset = "0x1183E10", VA = "0x1183E10")]
		public static AsyncSubmitTrigger GetAsyncSubmitTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x1183E5C", Offset = "0x1183E5C", VA = "0x1183E5C")]
		public static AsyncSubmitTrigger GetAsyncSubmitTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x1183E7C", Offset = "0x1183E7C", VA = "0x1183E7C")]
		public static AsyncTransformChangedTrigger GetAsyncTransformChangedTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x1183EC8", Offset = "0x1183EC8", VA = "0x1183EC8")]
		public static AsyncTransformChangedTrigger GetAsyncTransformChangedTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x1183EE8", Offset = "0x1183EE8", VA = "0x1183EE8")]
		public static AsyncTrigger2DTrigger GetAsyncTrigger2DTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x1183F34", Offset = "0x1183F34", VA = "0x1183F34")]
		public static AsyncTrigger2DTrigger GetAsyncTrigger2DTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x1183F54", Offset = "0x1183F54", VA = "0x1183F54")]
		public static AsyncTriggerTrigger GetAsyncTriggerTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x1183FA0", Offset = "0x1183FA0", VA = "0x1183FA0")]
		public static AsyncTriggerTrigger GetAsyncTriggerTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x1183FC0", Offset = "0x1183FC0", VA = "0x1183FC0")]
		public static AsyncUpdateSelectedTrigger GetAsyncUpdateSelectedTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x118400C", Offset = "0x118400C", VA = "0x118400C")]
		public static AsyncUpdateSelectedTrigger GetAsyncUpdateSelectedTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x118402C", Offset = "0x118402C", VA = "0x118402C")]
		public static AsyncUpdateTrigger GetAsyncUpdateTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x1184078", Offset = "0x1184078", VA = "0x1184078")]
		public static AsyncUpdateTrigger GetAsyncUpdateTrigger(this Component component)
		{
			return null;
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x1184098", Offset = "0x1184098", VA = "0x1184098")]
		public static AsyncVisibleTrigger GetAsyncVisibleTrigger(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x11840E4", Offset = "0x11840E4", VA = "0x11840E4")]
		public static AsyncVisibleTrigger GetAsyncVisibleTrigger(this Component component)
		{
			return null;
		}
	}
	[Token(Token = "0x2000443")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1B1C", Offset = "0x8B1B1C")]
	public class AsyncTriggerTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<Collider> onTriggerEnter;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<Collider> onTriggerEnters;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<Collider> onTriggerExit;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<Collider> onTriggerExits;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AsyncTriggerPromise<Collider> onTriggerStay;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncTriggerPromiseDictionary<Collider> onTriggerStays;

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x1184104", Offset = "0x1184104", VA = "0x1184104", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x1184194", Offset = "0x1184194", VA = "0x1184194")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x11841F4", Offset = "0x11841F4", VA = "0x11841F4")]
		public UniTask OnTriggerEnterAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x1184274", Offset = "0x1184274", VA = "0x1184274")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x11842D4", Offset = "0x11842D4", VA = "0x11842D4")]
		public UniTask OnTriggerExitAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x1184354", Offset = "0x1184354", VA = "0x1184354")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x11843B4", Offset = "0x11843B4", VA = "0x11843B4")]
		public UniTask OnTriggerStayAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x1184434", Offset = "0x1184434", VA = "0x1184434")]
		public AsyncTriggerTrigger()
		{
		}
	}
	[Token(Token = "0x2000444")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1B2C", Offset = "0x8B1B2C")]
	public class AsyncUpdateSelectedTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<BaseEventData> onUpdateSelected;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<BaseEventData> onUpdateSelecteds;

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x1184D80", Offset = "0x1184D80", VA = "0x1184D80", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x1184DE8", Offset = "0x1184DE8", VA = "0x1184DE8")]
		private void OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x1184E48", Offset = "0x1184E48", VA = "0x1184E48")]
		public UniTask OnUpdateSelectedAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x1184EC8", Offset = "0x1184EC8", VA = "0x1184EC8")]
		public AsyncUpdateSelectedTrigger()
		{
		}
	}
	[Token(Token = "0x2000445")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1B3C", Offset = "0x8B1B3C")]
	public class AsyncUpdateTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> update;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> updates;

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x1184F2C", Offset = "0x1184F2C", VA = "0x1184F2C", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x1184F94", Offset = "0x1184F94", VA = "0x1184F94")]
		private void Update()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x118502C", Offset = "0x118502C", VA = "0x118502C")]
		public UniTask UpdateAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x11850AC", Offset = "0x11850AC", VA = "0x11850AC")]
		public AsyncUpdateTrigger()
		{
		}
	}
	[Token(Token = "0x2000446")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1B4C", Offset = "0x8B1B4C")]
	public class AsyncVisibleTrigger : AsyncTriggerBase
	{
		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncTriggerPromise<AsyncUnit> onBecameInvisible;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onBecameInvisibles;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncTriggerPromise<AsyncUnit> onBecameVisible;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AsyncTriggerPromiseDictionary<AsyncUnit> onBecameVisibles;

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x1185110", Offset = "0x1185110", VA = "0x1185110", Slot = "4")]
		protected override IEnumerable<ICancelablePromise> GetPromises()
		{
			return null;
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x118518C", Offset = "0x118518C", VA = "0x118518C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x1185224", Offset = "0x1185224", VA = "0x1185224")]
		public UniTask OnBecameInvisibleAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x11852A4", Offset = "0x11852A4", VA = "0x11852A4")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x118533C", Offset = "0x118533C", VA = "0x118533C")]
		public UniTask OnBecameVisibleAsync([Optional] CancellationToken cancellationToken)
		{
			return default(UniTask);
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x11853BC", Offset = "0x11853BC", VA = "0x11853BC")]
		public AsyncVisibleTrigger()
		{
		}
	}
}
namespace UniRx.Async.Internal
{
	[Token(Token = "0x2000447")]
	public sealed class ArrayPool<T>
	{
		[Token(Token = "0x4000CFF")]
		private const int DefaultMaxNumberOfArraysPerBucket = 50;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly T[] EmptyArray;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ArrayPool<T> Shared;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly MinimumQueue<T[]>[] buckets;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SpinLock[] locks;

		[Token(Token = "0x600145E")]
		private ArrayPool()
		{
		}

		[Token(Token = "0x600145F")]
		public T[] Rent(int minimumLength)
		{
			return null;
		}

		[Token(Token = "0x6001460")]
		public void Return(T[] array, bool clearArray = false)
		{
		}

		[Token(Token = "0x6001461")]
		private static int CalculateSize(int size)
		{
			return default(int);
		}

		[Token(Token = "0x6001462")]
		private static int GetQueueIndex(int size)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000448")]
	public static class ArrayPoolUtil
	{
		[Token(Token = "0x2000449")]
		public struct RentArray<T> : IDisposable
		{
			[Token(Token = "0x4000D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly T[] Array;

			[Token(Token = "0x4000D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int Length;

			[Token(Token = "0x4000D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ArrayPool<T> pool;

			[Token(Token = "0x6001467")]
			public RentArray(T[] array, int length, ArrayPool<T> pool)
			{
			}

			[Token(Token = "0x6001468")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001469")]
			public void DisposeManually(bool clearArray)
			{
			}
		}

		[MethodImpl(256)]
		[Token(Token = "0x6001464")]
		public static void EnsureCapacity<T>(ref T[] array, int index, ArrayPool<T> pool)
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001465")]
		private static void EnsureCapacityCore<T>(ref T[] array, int index, ArrayPool<T> pool)
		{
		}

		[Token(Token = "0x6001466")]
		public static RentArray<T> Materialize<T>(IEnumerable<T> source)
		{
			return default(RentArray<T>);
		}
	}
	[Token(Token = "0x200044A")]
	public static class ArrayUtil
	{
		[MethodImpl(256)]
		[Token(Token = "0x600146A")]
		public static void EnsureCapacity<T>(ref T[] array, int index)
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x600146B")]
		private static void EnsureCore<T>(ref T[] array, int index)
		{
		}

		[Token(Token = "0x600146C")]
		public static (T[], int) Materialize<T>(IEnumerable<T> source)
		{
			return default((T[], int));
		}
	}
	[Token(Token = "0x200044B")]
	public static class CancellationTokenHelper
	{
		[Token(Token = "0x600146D")]
		[Address(RVA = "0x168BB7C", Offset = "0x168BB7C", VA = "0x168BB7C")]
		public static bool TrySetOrLinkCancellationToken(ref CancellationToken field, CancellationToken newCancellationToken)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200044C")]
	internal class ContinuationQueue
	{
		[Token(Token = "0x4000D07")]
		private const int MaxArrayLength = 2146435071;

		[Token(Token = "0x4000D08")]
		private const int InitialSize = 16;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SpinLock gate;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool dequing;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int actionListCount;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action[] actionList;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int waitingListCount;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Action[] waitingList;

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x168E044", Offset = "0x168E044", VA = "0x168E044")]
		public void Enqueue(Action continuation)
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x168E2D0", Offset = "0x168E2D0", VA = "0x168E2D0")]
		public void Run()
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x168E4CC", Offset = "0x168E4CC", VA = "0x168E4CC")]
		public ContinuationQueue()
		{
		}
	}
	[Token(Token = "0x200044D")]
	internal static class Error
	{
		[MethodImpl(256)]
		[Token(Token = "0x6001471")]
		public static void ThrowArgumentNullException<T>(T value, string paramName) where T : class
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001472")]
		[Address(RVA = "0x16921A0", Offset = "0x16921A0", VA = "0x16921A0")]
		private static void ThrowArgumentNullExceptionCore(string paramName)
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001473")]
		public static void ThrowArgumentException<T>(string message)
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001474")]
		[Address(RVA = "0x16921E8", Offset = "0x16921E8", VA = "0x16921E8")]
		public static void ThrowNotYetCompleted()
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001475")]
		public static T ThrowNotYetCompleted<T>()
		{
			return (T)null;
		}

		[MethodImpl(256)]
		[Token(Token = "0x6001476")]
		public static void ThrowWhenContinuationIsAlreadyRegistered<T>(T continuationField) where T : class
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001477")]
		[Address(RVA = "0x169223C", Offset = "0x169223C", VA = "0x169223C")]
		private static void ThrowInvalidOperationExceptionCore(string message)
		{
		}

		[MethodImpl(8)]
		[Token(Token = "0x6001478")]
		[Address(RVA = "0x1692284", Offset = "0x1692284", VA = "0x1692284")]
		public static void ThrowOperationCanceledException()
		{
		}
	}
	[Token(Token = "0x200044E")]
	internal static class FuncExtensions
	{
		[Token(Token = "0x6001479")]
		internal static Action<T> AsFuncOfT<T>(this Action action)
		{
			return null;
		}

		[Token(Token = "0x600147A")]
		private static void Invoke<T>(this Action action, T unused)
		{
		}
	}
	[Token(Token = "0x200044F")]
	internal sealed class LazyPromise : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Func<UniTask> factory;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UniTask value;

		[Token(Token = "0x1700018B")]
		public bool IsCompleted
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0x1697930", Offset = "0x1697930", VA = "0x1697930", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018C")]
		public AwaiterStatus Status
		{
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x1697958", Offset = "0x1697958", VA = "0x1697958", Slot = "4")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x16978A4", Offset = "0x16978A4", VA = "0x16978A4")]
		public LazyPromise(Func<UniTask> factory)
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x16978D0", Offset = "0x16978D0", VA = "0x16978D0")]
		private void Create()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x1697980", Offset = "0x1697980", VA = "0x1697980")]
		public void GetResult()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x16979A8", Offset = "0x16979A8", VA = "0x16979A8", Slot = "6")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x16979D0", Offset = "0x16979D0", VA = "0x16979D0", Slot = "7")]
		public void UnsafeOnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x1697A1C", Offset = "0x1697A1C", VA = "0x1697A1C", Slot = "8")]
		public void OnCompleted(Action continuation)
		{
		}
	}
	[Token(Token = "0x2000450")]
	internal sealed class LazyPromise<T> : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Func<UniTask<T>> factory;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UniTask<T> value;

		[Token(Token = "0x1700018D")]
		public bool IsCompleted
		{
			[Token(Token = "0x6001485")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018E")]
		public AwaiterStatus Status
		{
			[Token(Token = "0x6001486")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x6001483")]
		public LazyPromise(Func<UniTask<T>> factory)
		{
		}

		[Token(Token = "0x6001484")]
		private void Create()
		{
		}

		[Token(Token = "0x6001487")]
		public T GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x6001488")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x6001489")]
		public void UnsafeOnCompleted(Action continuation)
		{
		}

		[Token(Token = "0x600148A")]
		public void OnCompleted(Action continuation)
		{
		}
	}
	[Token(Token = "0x2000451")]
	public class MinimumQueue<T>
	{
		[Token(Token = "0x4000D13")]
		private const int MinimumGrow = 4;

		[Token(Token = "0x4000D14")]
		private const int GrowFactor = 200;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] array;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int head;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int tail;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x1700018F")]
		public int Count
		{
			[MethodImpl(256)]
			[Token(Token = "0x600148C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600148B")]
		public MinimumQueue(int capacity)
		{
		}

		[Token(Token = "0x600148D")]
		public T Peek()
		{
			return (T)null;
		}

		[MethodImpl(256)]
		[Token(Token = "0x600148E")]
		public void Enqueue(T item)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x600148F")]
		public T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6001490")]
		private void Grow()
		{
		}

		[Token(Token = "0x6001491")]
		private void SetCapacity(int capacity)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x6001492")]
		private void MoveNext(ref int index)
		{
		}

		[Token(Token = "0x6001493")]
		private void ThrowForEmptyQueue()
		{
		}
	}
	[Token(Token = "0x2000452")]
	internal sealed class PlayerLoopRunner
	{
		[Serializable]
		[Token(Token = "0x2000453")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1B6C", Offset = "0x8B1B6C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Exception> <>9__8_0;

			[Token(Token = "0x6001498")]
			[Address(RVA = "0x106C26C", Offset = "0x106C26C", VA = "0x106C26C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0x106C274", Offset = "0x106C274", VA = "0x106C274")]
			internal void <.ctor>b__8_0(Exception ex)
			{
			}
		}

		[Token(Token = "0x4000D19")]
		private const int InitialSize = 16;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object runningAndQueueLock;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly object arrayLock;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Action<Exception> unhandledExceptionCallback;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int tail;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool running;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IPlayerLoopItem[] loopItems;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MinimumQueue<IPlayerLoopItem> waitQueue;

		[Token(Token = "0x6001494")]
		[Address(RVA = "0x12C52E0", Offset = "0x12C52E0", VA = "0x12C52E0")]
		public PlayerLoopRunner()
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x12C5520", Offset = "0x12C5520", VA = "0x12C5520")]
		public void AddAction(IPlayerLoopItem item)
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x12C59CC", Offset = "0x12C59CC", VA = "0x12C59CC")]
		public void Run()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public static class PromiseHelper
	{
		[Token(Token = "0x600149A")]
		public static void TrySetResultAll<TPromise, T>(IEnumerable<TPromise> source, T value) where TPromise : class, IResolvePromise<T>
		{
		}
	}
	[Token(Token = "0x2000455")]
	public abstract class ReusablePromise : IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ExceptionDispatchInfo exception;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object continuation;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AwaiterStatus status;

		[Token(Token = "0x17000190")]
		public UniTask Task
		{
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x12C91F0", Offset = "0x12C91F0", VA = "0x12C91F0")]
			get
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x17000191")]
		public virtual bool IsCompleted
		{
			[Token(Token = "0x600149C")]
			[Address(RVA = "0x12C91F4", Offset = "0x12C91F4", VA = "0x12C91F4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000192")]
		public AwaiterStatus Status
		{
			[Token(Token = "0x600149E")]
			[Address(RVA = "0x12C9320", Offset = "0x12C9320", VA = "0x12C9320", Slot = "4")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x12C9204", Offset = "0x12C9204", VA = "0x12C9204", Slot = "10")]
		public virtual void GetResult()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x12C9328", Offset = "0x12C9328", VA = "0x12C9328", Slot = "6")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x12C59AC", Offset = "0x12C59AC", VA = "0x12C59AC")]
		public void ResetStatus(bool forceReset)
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x12C9334", Offset = "0x12C9334", VA = "0x12C9334", Slot = "11")]
		public virtual bool TrySetCanceled()
		{
			return default(bool);
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x12C9518", Offset = "0x12C9518", VA = "0x12C9518", Slot = "12")]
		public virtual bool TrySetException(Exception ex)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x12C9568", Offset = "0x12C9568", VA = "0x12C9568", Slot = "13")]
		public virtual bool TrySetResult()
		{
			return default(bool);
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x12C9364", Offset = "0x12C9364", VA = "0x12C9364")]
		private void TryInvokeContinuation()
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x12C95A0", Offset = "0x12C95A0", VA = "0x12C95A0", Slot = "8")]
		public void OnCompleted(Action action)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x12C95A4", Offset = "0x12C95A4", VA = "0x12C95A4", Slot = "7")]
		public void UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x12C5930", Offset = "0x12C5930", VA = "0x12C5930")]
		protected ReusablePromise()
		{
		}
	}
	[Token(Token = "0x2000456")]
	public abstract class ReusablePromise<T> : IAwaiter<T>, IAwaiter, ICriticalNotifyCompletion, INotifyCompletion
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T result;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ExceptionDispatchInfo exception;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object continuation;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private AwaiterStatus status;

		[Token(Token = "0x17000193")]
		public UniTask<T> Task
		{
			[Token(Token = "0x60014A8")]
			get
			{
				return default(UniTask<T>);
			}
		}

		[Token(Token = "0x17000194")]
		public virtual bool IsCompleted
		{
			[Token(Token = "0x60014A9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000195")]
		protected T RawResult
		{
			[Token(Token = "0x60014AA")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000196")]
		public AwaiterStatus Status
		{
			[Token(Token = "0x60014AD")]
			get
			{
				return default(AwaiterStatus);
			}
		}

		[Token(Token = "0x60014AB")]
		protected void ForceSetResult(T result)
		{
		}

		[Token(Token = "0x60014AC")]
		public virtual T GetResult()
		{
			return (T)null;
		}

		[Token(Token = "0x60014AE")]
		private void UniRx.Async.IAwaiter.GetResult()
		{
		}

		[Token(Token = "0x60014AF")]
		public void ResetStatus(bool forceReset)
		{
		}

		[Token(Token = "0x60014B0")]
		public virtual bool TrySetCanceled()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B1")]
		public virtual bool TrySetException(Exception ex)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B2")]
		public virtual bool TrySetResult(T result)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B3")]
		protected void TryInvokeContinuation()
		{
		}

		[Token(Token = "0x60014B4")]
		public void OnCompleted(Action action)
		{
		}

		[Token(Token = "0x60014B5")]
		public void UnsafeOnCompleted(Action action)
		{
		}

		[Token(Token = "0x60014B6")]
		protected ReusablePromise()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public abstract class PlayerLoopReusablePromiseBase : ReusablePromise, IPlayerLoopItem
	{
		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly PlayerLoopTiming timing;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly CancellationToken cancellationToken;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isRunning;

		[Token(Token = "0x17000197")]
		public override bool IsCompleted
		{
			[Token(Token = "0x60014B8")]
			[Address(RVA = "0x12C5938", Offset = "0x12C5938", VA = "0x12C5938", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x12C58F4", Offset = "0x12C58F4", VA = "0x12C58F4")]
		public PlayerLoopReusablePromiseBase(PlayerLoopTiming timing, CancellationToken cancellationToken, int skipTrackFrameCountAdditive)
		{
		}

		[Token(Token = "0x60014B9")]
		protected abstract void OnRunningStart();

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x12C59C4", Offset = "0x12C59C4", VA = "0x12C59C4")]
		protected void Complete()
		{
		}

		[Token(Token = "0x60014BB")]
		public abstract bool MoveNext();
	}
	[Token(Token = "0x2000458")]
	public abstract class PlayerLoopReusablePromiseBase<T> : ReusablePromise<T>, IPlayerLoopItem
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PlayerLoopTiming timing;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly CancellationToken cancellationToken;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isRunning;

		[Token(Token = "0x17000198")]
		public override bool IsCompleted
		{
			[Token(Token = "0x60014BD")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014BC")]
		public PlayerLoopReusablePromiseBase(PlayerLoopTiming timing, CancellationToken cancellationToken, int skipTrackFrameCountAdditive)
		{
		}

		[Token(Token = "0x60014BE")]
		protected abstract void OnRunningStart();

		[Token(Token = "0x60014BF")]
		protected void Complete()
		{
		}

		[Token(Token = "0x60014C0")]
		public abstract bool MoveNext();
	}
	[Token(Token = "0x2000459")]
	public static class RuntimeHelpersAbstraction
	{
		[Token(Token = "0x200045A")]
		private static class WellKnownNoReferenceContainsType<T>
		{
			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly bool IsWellKnownType;

			[Token(Token = "0x60014C3")]
			static WellKnownNoReferenceContainsType()
			{
			}
		}

		[Token(Token = "0x60014C1")]
		public static bool IsWellKnownNoReferenceContainsType<T>()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x12C9CE0", Offset = "0x12C9CE0", VA = "0x12C9CE0")]
		private static bool WellKnownNoReferenceContainsTypeInitialize(Type t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200045B")]
	public static class TaskTracker
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3904", Offset = "0x8B3904")]
		private static List<KeyValuePair<IAwaiter, (int, DateTime, string)>> listPool;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x8B3998", Offset = "0x8B3998")]
		private static readonly WeakDictionary<IAwaiter, (int, DateTime, string)> tracking;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool dirty;

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x14DC740", Offset = "0x14DC740", VA = "0x14DC740")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8BD8A8", Offset = "0x8BD8A8")]
		public static void TrackActiveTask(IAwaiter task, int skipFrame = 1)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x14DC744", Offset = "0x14DC744", VA = "0x14DC744")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8BD8E0", Offset = "0x8BD8E0")]
		public static void TrackActiveTask(IAwaiter task, string stackTrace)
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x14DC748", Offset = "0x14DC748", VA = "0x14DC748")]
		public static string CaptureStackTrace(int skipFrame)
		{
			return null;
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x14DC750", Offset = "0x14DC750", VA = "0x14DC750")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x8BD918", Offset = "0x8BD918")]
		public static void RemoveTracking(IAwaiter task)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x14DC754", Offset = "0x14DC754", VA = "0x14DC754")]
		public static bool CheckAndResetDirty()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x14DC7BC", Offset = "0x14DC7BC", VA = "0x14DC7BC")]
		public static void ForEachActiveTask(Action<int, string, AwaiterStatus, DateTime, string> action)
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class WeakDictionary<TKey, TValue> where TKey : class
	{
		[Token(Token = "0x200045D")]
		private class Entry
		{
			[Token(Token = "0x4000D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WeakReference<TKey> Key;

			[Token(Token = "0x4000D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TValue Value;

			[Token(Token = "0x4000D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Hash;

			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Entry Prev;

			[Token(Token = "0x4000D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Entry Next;

			[Token(Token = "0x60014D6")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x60014D7")]
			private int Count()
			{
				return default(int);
			}

			[Token(Token = "0x60014D8")]
			public Entry()
			{
			}
		}

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Entry[] buckets;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SpinLock gate;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly float loadFactor;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEqualityComparer<TKey> keyEqualityComparer;

		[Token(Token = "0x60014CB")]
		public WeakDictionary(int capacity = 4, float loadFactor = 0.75f, [Optional] IEqualityComparer<TKey> keyComparer)
		{
		}

		[Token(Token = "0x60014CC")]
		public bool TryAdd(TKey key, TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CD")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CE")]
		public bool TryRemove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CF")]
		private bool TryAddInternal(TKey key, TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D0")]
		private bool AddToBuckets(Entry[] targetBuckets, TKey newKey, TValue value, int keyHash)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D1")]
		private bool TryGetEntry(TKey key, out int hashIndex, out Entry entry)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D2")]
		private void Remove(int hashIndex, Entry entry)
		{
		}

		[Token(Token = "0x60014D3")]
		public List<KeyValuePair<TKey, TValue>> ToList()
		{
			return null;
		}

		[Token(Token = "0x60014D4")]
		public int ToList(ref List<KeyValuePair<TKey, TValue>> list, bool clear = true)
		{
			return default(int);
		}

		[Token(Token = "0x60014D5")]
		private static int CalculateCapacity(int collectionSize, float loadFactor)
		{
			return default(int);
		}
	}
}
namespace UniRx.Async.CompilerServices
{
	[Token(Token = "0x200045E")]
	public struct AsyncUniTaskMethodBuilder
	{
		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UniTaskCompletionSource promise;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Action moveNext;

		[Token(Token = "0x17000199")]
		[DebuggerHidden]
		public UniTask Task
		{
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0x11844A4", Offset = "0x11844A4", VA = "0x11844A4")]
			get
			{
				return default(UniTask);
			}
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x1184498", Offset = "0x1184498", VA = "0x1184498")]
		[DebuggerHidden]
		public static AsyncUniTaskMethodBuilder Create()
		{
			return default(AsyncUniTaskMethodBuilder);
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x118455C", Offset = "0x118455C", VA = "0x118455C")]
		[DebuggerHidden]
		public void SetException(Exception exception)
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x118464C", Offset = "0x118464C", VA = "0x118464C")]
		[DebuggerHidden]
		public void SetResult()
		{
		}

		[Token(Token = "0x60014DD")]
		[DebuggerHidden]
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014DE")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "SecuritySafeCriticalAttribute", RVA = "0x8BD990", Offset = "0x8BD990")]
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014DF")]
		[DebuggerHidden]
		public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x11846D4", Offset = "0x11846D4", VA = "0x11846D4")]
		[DebuggerHidden]
		public void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}
	[Token(Token = "0x200045F")]
	public struct AsyncUniTaskMethodBuilder<T>
	{
		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T result;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UniTaskCompletionSource<T> promise;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action moveNext;

		[Token(Token = "0x1700019A")]
		[DebuggerHidden]
		public UniTask<T> Task
		{
			[Token(Token = "0x60014E2")]
			get
			{
				return default(UniTask<T>);
			}
		}

		[Token(Token = "0x60014E1")]
		[DebuggerHidden]
		public static AsyncUniTaskMethodBuilder<T> Create()
		{
			return default(AsyncUniTaskMethodBuilder<T>);
		}

		[Token(Token = "0x60014E3")]
		[DebuggerHidden]
		public void SetException(Exception exception)
		{
		}

		[Token(Token = "0x60014E4")]
		[DebuggerHidden]
		public void SetResult(T result)
		{
		}

		[Token(Token = "0x60014E5")]
		[DebuggerHidden]
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014E6")]
		[AttributeAttribute(Name = "SecuritySafeCriticalAttribute", RVA = "0x8BDA28", Offset = "0x8BDA28")]
		[DebuggerHidden]
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014E7")]
		[DebuggerHidden]
		public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014E8")]
		[DebuggerHidden]
		public void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}
	[Token(Token = "0x2000460")]
	public struct AsyncUniTaskVoidMethodBuilder
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action moveNext;

		[Token(Token = "0x1700019B")]
		public UniTaskVoid Task
		{
			[Token(Token = "0x60014EA")]
			[Address(RVA = "0x11846E0", Offset = "0x11846E0", VA = "0x11846E0")]
			get
			{
				return default(UniTaskVoid);
			}
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x11846D8", Offset = "0x11846D8", VA = "0x11846D8")]
		[DebuggerHidden]
		public static AsyncUniTaskVoidMethodBuilder Create()
		{
			return default(AsyncUniTaskVoidMethodBuilder);
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x11846E8", Offset = "0x11846E8", VA = "0x11846E8")]
		[DebuggerHidden]
		public void SetException(Exception exception)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x118474C", Offset = "0x118474C", VA = "0x118474C")]
		[DebuggerHidden]
		public void SetResult()
		{
		}

		[Token(Token = "0x60014ED")]
		[DebuggerHidden]
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014EE")]
		[AttributeAttribute(Name = "SecuritySafeCriticalAttribute", RVA = "0x8BDAC0", Offset = "0x8BDAC0")]
		[DebuggerHidden]
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014EF")]
		[DebuggerHidden]
		public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1184750", Offset = "0x1184750", VA = "0x1184750")]
		[DebuggerHidden]
		public void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}
	[Token(Token = "0x2000461")]
	internal class MoveNextRunner<TStateMachine> where TStateMachine : IAsyncStateMachine
	{
		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TStateMachine StateMachine;

		[Token(Token = "0x60014F1")]
		[DebuggerHidden]
		public void Run()
		{
		}

		[Token(Token = "0x60014F2")]
		public MoveNextRunner()
		{
		}
	}
}
namespace SharpJson
{
	[Token(Token = "0x2000462")]
	internal class Lexer
	{
		[Token(Token = "0x2000463")]
		public enum Token
		{
			[Token(Token = "0x4000D4C")]
			None,
			[Token(Token = "0x4000D4D")]
			Null,
			[Token(Token = "0x4000D4E")]
			True,
			[Token(Token = "0x4000D4F")]
			False,
			[Token(Token = "0x4000D50")]
			Colon,
			[Token(Token = "0x4000D51")]
			Comma,
			[Token(Token = "0x4000D52")]
			String,
			[Token(Token = "0x4000D53")]
			Number,
			[Token(Token = "0x4000D54")]
			CurlyOpen,
			[Token(Token = "0x4000D55")]
			CurlyClose,
			[Token(Token = "0x4000D56")]
			SquaredOpen,
			[Token(Token = "0x4000D57")]
			SquaredClose
		}

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3A2C", Offset = "0x8B3A2C")]
		private int <lineNumber>k__BackingField;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3A3C", Offset = "0x8B3A3C")]
		private bool <parseNumbersAsFloat>k__BackingField;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private char[] json;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int index;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool success;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char[] stringBuffer;

		[Token(Token = "0x1700019C")]
		public bool hasError
		{
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0x1697A20", Offset = "0x1697A20", VA = "0x1697A20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019D")]
		public int lineNumber
		{
			[Token(Token = "0x60014F4")]
			[Address(RVA = "0x1697A30", Offset = "0x1697A30", VA = "0x1697A30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB28", Offset = "0x8BDB28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x1697A38", Offset = "0x1697A38", VA = "0x1697A38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB38", Offset = "0x8BDB38")]
			private set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool parseNumbersAsFloat
		{
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0x1697A40", Offset = "0x1697A40", VA = "0x1697A40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB48", Offset = "0x8BDB48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x1697A48", Offset = "0x1697A48", VA = "0x1697A48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB58", Offset = "0x8BDB58")]
			set
			{
			}
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x1696B00", Offset = "0x1696B00", VA = "0x1696B00")]
		public Lexer(string text)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x1697A54", Offset = "0x1697A54", VA = "0x1697A54")]
		public void Reset()
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x1697124", Offset = "0x1697124", VA = "0x1697124")]
		public string ParseString()
		{
			return null;
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x1697B48", Offset = "0x1697B48", VA = "0x1697B48")]
		private string GetNumberString()
		{
			return null;
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x1697720", Offset = "0x1697720", VA = "0x1697720")]
		public float ParseFloatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x16977C8", Offset = "0x16977C8", VA = "0x16977C8")]
		public double ParseDoubleNumber()
		{
			return default(double);
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x1697B94", Offset = "0x1697B94", VA = "0x1697B94")]
		private int GetLastIndexOfNumber(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x1697A68", Offset = "0x1697A68", VA = "0x1697A68")]
		private void SkipWhiteSpaces()
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0x1697050", Offset = "0x1697050", VA = "0x1697050")]
		public Token LookAhead()
		{
			return default(Token);
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x1697028", Offset = "0x1697028", VA = "0x1697028")]
		public Token NextToken()
		{
			return default(Token);
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x1697C20", Offset = "0x1697C20", VA = "0x1697C20")]
		private static Token NextToken(char[] json, ref int index)
		{
			return default(Token);
		}
	}
	[Token(Token = "0x2000464")]
	public class JsonDecoder
	{
		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3A4C", Offset = "0x8B3A4C")]
		private string <errorMessage>k__BackingField;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3A5C", Offset = "0x8B3A5C")]
		private bool <parseNumbersAsFloat>k__BackingField;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Lexer lexer;

		[Token(Token = "0x1700019F")]
		public string errorMessage
		{
			[Token(Token = "0x6001503")]
			[Address(RVA = "0x1696ADC", Offset = "0x1696ADC", VA = "0x1696ADC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB68", Offset = "0x8BDB68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001504")]
			[Address(RVA = "0x1696AE4", Offset = "0x1696AE4", VA = "0x1696AE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB78", Offset = "0x8BDB78")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool parseNumbersAsFloat
		{
			[Token(Token = "0x6001505")]
			[Address(RVA = "0x1696AEC", Offset = "0x1696AEC", VA = "0x1696AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB88", Offset = "0x8BDB88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001506")]
			[Address(RVA = "0x1696AF4", Offset = "0x1696AF4", VA = "0x1696AF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDB98", Offset = "0x8BDB98")]
			set
			{
			}
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x1696A30", Offset = "0x1696A30", VA = "0x1696A30")]
		public JsonDecoder()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x1696A5C", Offset = "0x1696A5C", VA = "0x1696A5C")]
		public object Decode(string text)
		{
			return null;
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x1696DB4", Offset = "0x1696DB4", VA = "0x1696DB4")]
		public static object DecodeText(string text)
		{
			return null;
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x1696E24", Offset = "0x1696E24", VA = "0x1696E24")]
		private IDictionary<string, object> ParseObject()
		{
			return null;
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x16975A0", Offset = "0x16975A0", VA = "0x16975A0")]
		private IList<object> ParseArray()
		{
			return null;
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x1696B9C", Offset = "0x1696B9C", VA = "0x1696B9C")]
		private object ParseValue()
		{
			return null;
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x1697084", Offset = "0x1697084", VA = "0x1697084")]
		private void TriggerError(string message)
		{
		}

		[Token(Token = "0x600150E")]
		private T EvalLexer<T>(T value)
		{
			return (T)null;
		}
	}
}
namespace Spine
{
	[Token(Token = "0x2000465")]
	public class Animation
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<Timeline> timelines;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float duration;

		[Token(Token = "0x170001A1")]
		public ExposedList<Timeline> Timelines
		{
			[Token(Token = "0x6001510")]
			[Address(RVA = "0x1177AB0", Offset = "0x1177AB0", VA = "0x1177AB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001511")]
			[Address(RVA = "0x1177AB8", Offset = "0x1177AB8", VA = "0x1177AB8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public float Duration
		{
			[Token(Token = "0x6001512")]
			[Address(RVA = "0x1177AC0", Offset = "0x1177AC0", VA = "0x1177AC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001513")]
			[Address(RVA = "0x1177AC8", Offset = "0x1177AC8", VA = "0x1177AC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public string Name
		{
			[Token(Token = "0x6001514")]
			[Address(RVA = "0x1177AD0", Offset = "0x1177AD0", VA = "0x1177AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x11779D4", Offset = "0x11779D4", VA = "0x11779D4")]
		public Animation(string name, ExposedList<Timeline> timelines, float duration)
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x1177AD8", Offset = "0x1177AD8", VA = "0x1177AD8")]
		public void Apply(Skeleton skeleton, float lastTime, float time, bool loop, ExposedList<Event> events, float alpha, MixBlend blend, MixDirection direction)
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x1177CD0", Offset = "0x1177CD0", VA = "0x1177CD0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x1177CD8", Offset = "0x1177CD8", VA = "0x1177CD8")]
		internal static int BinarySearch(float[] values, float target, int step)
		{
			return default(int);
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x1177D64", Offset = "0x1177D64", VA = "0x1177D64")]
		internal static int BinarySearch(float[] values, float target)
		{
			return default(int);
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x1177DE4", Offset = "0x1177DE4", VA = "0x1177DE4")]
		internal static int LinearSearch(float[] values, float target, int step)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000466")]
	public interface Timeline
	{
		[Token(Token = "0x170001A4")]
		int PropertyId
		{
			[Token(Token = "0x600151B")]
			get;
		}

		[Token(Token = "0x600151A")]
		void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> events, float alpha, MixBlend blend, MixDirection direction);
	}
	[Token(Token = "0x2000467")]
	public enum MixBlend
	{
		[Token(Token = "0x4000D5F")]
		Setup,
		[Token(Token = "0x4000D60")]
		First,
		[Token(Token = "0x4000D61")]
		Replace,
		[Token(Token = "0x4000D62")]
		Add
	}
	[Token(Token = "0x2000468")]
	public enum MixDirection
	{
		[Token(Token = "0x4000D64")]
		In,
		[Token(Token = "0x4000D65")]
		Out
	}
	[Token(Token = "0x2000469")]
	internal enum TimelineType
	{
		[Token(Token = "0x4000D67")]
		Rotate,
		[Token(Token = "0x4000D68")]
		Translate,
		[Token(Token = "0x4000D69")]
		Scale,
		[Token(Token = "0x4000D6A")]
		Shear,
		[Token(Token = "0x4000D6B")]
		Attachment,
		[Token(Token = "0x4000D6C")]
		Color,
		[Token(Token = "0x4000D6D")]
		Deform,
		[Token(Token = "0x4000D6E")]
		Event,
		[Token(Token = "0x4000D6F")]
		DrawOrder,
		[Token(Token = "0x4000D70")]
		IkConstraint,
		[Token(Token = "0x4000D71")]
		TransformConstraint,
		[Token(Token = "0x4000D72")]
		PathConstraintPosition,
		[Token(Token = "0x4000D73")]
		PathConstraintSpacing,
		[Token(Token = "0x4000D74")]
		PathConstraintMix,
		[Token(Token = "0x4000D75")]
		TwoColor
	}
	[Token(Token = "0x200046A")]
	public interface IBoneTimeline
	{
		[Token(Token = "0x170001A5")]
		int BoneIndex
		{
			[Token(Token = "0x600151C")]
			get;
		}
	}
	[Token(Token = "0x200046B")]
	public interface ISlotTimeline
	{
		[Token(Token = "0x170001A6")]
		int SlotIndex
		{
			[Token(Token = "0x600151D")]
			get;
		}
	}
	[Token(Token = "0x200046C")]
	public abstract class CurveTimeline : Timeline
	{
		[Token(Token = "0x4000D76")]
		protected const float LINEAR = 0f;

		[Token(Token = "0x4000D77")]
		protected const float STEPPED = 1f;

		[Token(Token = "0x4000D78")]
		protected const float BEZIER = 2f;

		[Token(Token = "0x4000D79")]
		protected const int BEZIER_SIZE = 19;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] curves;

		[Token(Token = "0x170001A7")]
		public int FrameCount
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0x168EC38", Offset = "0x168EC38", VA = "0x168EC38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A8")]
		public abstract int PropertyId
		{
			[Token(Token = "0x6001521")]
			get;
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x168C1F4", Offset = "0x168C1F4", VA = "0x168C1F4")]
		public CurveTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001520")]
		public abstract void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction);

		[Token(Token = "0x6001522")]
		[Address(RVA = "0x168EC70", Offset = "0x168EC70", VA = "0x168EC70")]
		public void SetLinear(int frameIndex)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0x168ECB4", Offset = "0x168ECB4", VA = "0x168ECB4")]
		public void SetStepped(int frameIndex)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0x168ECFC", Offset = "0x168ECFC", VA = "0x168ECFC")]
		public float GetCurveType(int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0x168ED68", Offset = "0x168ED68", VA = "0x168ED68")]
		public void SetCurve(int frameIndex, float cx1, float cy1, float cx2, float cy2)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0x168C7C0", Offset = "0x168C7C0", VA = "0x168C7C0")]
		public float GetCurvePercent(int frameIndex, float percent)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200046D")]
	public class RotateTimeline : CurveTimeline, IBoneTimeline
	{
		[Token(Token = "0x4000D7B")]
		public const int ENTRIES = 2;

		[Token(Token = "0x4000D7C")]
		internal const int PREV_TIME = -2;

		[Token(Token = "0x4000D7D")]
		internal const int PREV_ROTATION = -1;

		[Token(Token = "0x4000D7E")]
		internal const int ROTATION = 1;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int boneIndex;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001A9")]
		public override int PropertyId
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0x12C98B0", Offset = "0x12C98B0", VA = "0x12C98B0", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AA")]
		public int BoneIndex
		{
			[Token(Token = "0x600152A")]
			[Address(RVA = "0x12C9918", Offset = "0x12C9918", VA = "0x12C9918", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001529")]
			[Address(RVA = "0x12C98B8", Offset = "0x12C98B8", VA = "0x12C98B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float[] Frames
		{
			[Token(Token = "0x600152B")]
			[Address(RVA = "0x12C9920", Offset = "0x12C9920", VA = "0x12C9920")]
			get
			{
				return null;
			}
			[Token(Token = "0x600152C")]
			[Address(RVA = "0x12C9928", Offset = "0x12C9928", VA = "0x12C9928")]
			set
			{
			}
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0x12C9840", Offset = "0x12C9840", VA = "0x12C9840")]
		public RotateTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0x12C9930", Offset = "0x12C9930", VA = "0x12C9930")]
		public void SetFrame(int frameIndex, float time, float degrees)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x12C9994", Offset = "0x12C9994", VA = "0x12C9994", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class TranslateTimeline : CurveTimeline, IBoneTimeline
	{
		[Token(Token = "0x4000D81")]
		public const int ENTRIES = 3;

		[Token(Token = "0x4000D82")]
		protected const int PREV_TIME = -3;

		[Token(Token = "0x4000D83")]
		protected const int PREV_X = -2;

		[Token(Token = "0x4000D84")]
		protected const int PREV_Y = -1;

		[Token(Token = "0x4000D85")]
		protected const int X = 1;

		[Token(Token = "0x4000D86")]
		protected const int Y = 2;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int boneIndex;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001AC")]
		public override int PropertyId
		{
			[Token(Token = "0x6001530")]
			[Address(RVA = "0x10AD890", Offset = "0x10AD890", VA = "0x10AD890", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AD")]
		public int BoneIndex
		{
			[Token(Token = "0x6001532")]
			[Address(RVA = "0x10AD900", Offset = "0x10AD900", VA = "0x10AD900", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x10AD8A0", Offset = "0x10AD8A0", VA = "0x10AD8A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public float[] Frames
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x10AD908", Offset = "0x10AD908", VA = "0x10AD908")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001534")]
			[Address(RVA = "0x10AD910", Offset = "0x10AD910", VA = "0x10AD910")]
			set
			{
			}
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0x10AD820", Offset = "0x10AD820", VA = "0x10AD820")]
		public TranslateTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x10AD918", Offset = "0x10AD918", VA = "0x10AD918")]
		public void SetFrame(int frameIndex, float time, float x, float y)
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x10AD998", Offset = "0x10AD998", VA = "0x10AD998", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x200046F")]
	public class ScaleTimeline : TranslateTimeline, IBoneTimeline
	{
		[Token(Token = "0x170001AF")]
		public override int PropertyId
		{
			[Token(Token = "0x6001538")]
			[Address(RVA = "0x12CA1A8", Offset = "0x12CA1A8", VA = "0x12CA1A8", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x12CA1A0", Offset = "0x12CA1A0", VA = "0x12CA1A0")]
		public ScaleTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x12CA1B8", Offset = "0x12CA1B8", VA = "0x12CA1B8", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class ShearTimeline : TranslateTimeline, IBoneTimeline
	{
		[Token(Token = "0x170001B0")]
		public override int PropertyId
		{
			[Token(Token = "0x600153B")]
			[Address(RVA = "0x12CC034", Offset = "0x12CC034", VA = "0x12CC034", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x12CC02C", Offset = "0x12CC02C", VA = "0x12CC02C")]
		public ShearTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x12CC044", Offset = "0x12CC044", VA = "0x12CC044", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class ColorTimeline : CurveTimeline, ISlotTimeline
	{
		[Token(Token = "0x4000D89")]
		public const int ENTRIES = 5;

		[Token(Token = "0x4000D8A")]
		protected const int PREV_TIME = -5;

		[Token(Token = "0x4000D8B")]
		protected const int PREV_R = -4;

		[Token(Token = "0x4000D8C")]
		protected const int PREV_G = -3;

		[Token(Token = "0x4000D8D")]
		protected const int PREV_B = -2;

		[Token(Token = "0x4000D8E")]
		protected const int PREV_A = -1;

		[Token(Token = "0x4000D8F")]
		protected const int R = 1;

		[Token(Token = "0x4000D90")]
		protected const int G = 2;

		[Token(Token = "0x4000D91")]
		protected const int B = 3;

		[Token(Token = "0x4000D92")]
		protected const int A = 4;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int slotIndex;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001B1")]
		public override int PropertyId
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0x168C2B8", Offset = "0x168C2B8", VA = "0x168C2B8", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B2")]
		public int SlotIndex
		{
			[Token(Token = "0x6001540")]
			[Address(RVA = "0x168C328", Offset = "0x168C328", VA = "0x168C328", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600153F")]
			[Address(RVA = "0x168C2C8", Offset = "0x168C2C8", VA = "0x168C2C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public float[] Frames
		{
			[Token(Token = "0x6001541")]
			[Address(RVA = "0x168C330", Offset = "0x168C330", VA = "0x168C330")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001542")]
			[Address(RVA = "0x168C338", Offset = "0x168C338", VA = "0x168C338")]
			set
			{
			}
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x168C188", Offset = "0x168C188", VA = "0x168C188")]
		public ColorTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x168C340", Offset = "0x168C340", VA = "0x168C340")]
		public void SetFrame(int frameIndex, float time, float r, float g, float b, float a)
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x168C400", Offset = "0x168C400", VA = "0x168C400", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000472")]
	public class TwoColorTimeline : CurveTimeline, ISlotTimeline
	{
		[Token(Token = "0x4000D95")]
		public const int ENTRIES = 8;

		[Token(Token = "0x4000D96")]
		protected const int PREV_TIME = -8;

		[Token(Token = "0x4000D97")]
		protected const int PREV_R = -7;

		[Token(Token = "0x4000D98")]
		protected const int PREV_G = -6;

		[Token(Token = "0x4000D99")]
		protected const int PREV_B = -5;

		[Token(Token = "0x4000D9A")]
		protected const int PREV_A = -4;

		[Token(Token = "0x4000D9B")]
		protected const int PREV_R2 = -3;

		[Token(Token = "0x4000D9C")]
		protected const int PREV_G2 = -2;

		[Token(Token = "0x4000D9D")]
		protected const int PREV_B2 = -1;

		[Token(Token = "0x4000D9E")]
		protected const int R = 1;

		[Token(Token = "0x4000D9F")]
		protected const int G = 2;

		[Token(Token = "0x4000DA0")]
		protected const int B = 3;

		[Token(Token = "0x4000DA1")]
		protected const int A = 4;

		[Token(Token = "0x4000DA2")]
		protected const int R2 = 5;

		[Token(Token = "0x4000DA3")]
		protected const int G2 = 6;

		[Token(Token = "0x4000DA4")]
		protected const int B2 = 7;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int slotIndex;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001B4")]
		public override int PropertyId
		{
			[Token(Token = "0x6001546")]
			[Address(RVA = "0x10AF158", Offset = "0x10AF158", VA = "0x10AF158", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B5")]
		public int SlotIndex
		{
			[Token(Token = "0x6001548")]
			[Address(RVA = "0x10AF1C8", Offset = "0x10AF1C8", VA = "0x10AF1C8", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001547")]
			[Address(RVA = "0x10AF168", Offset = "0x10AF168", VA = "0x10AF168")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public float[] Frames
		{
			[Token(Token = "0x6001549")]
			[Address(RVA = "0x10AF1D0", Offset = "0x10AF1D0", VA = "0x10AF1D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x10AF0E8", Offset = "0x10AF0E8", VA = "0x10AF0E8")]
		public TwoColorTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x10AF1D8", Offset = "0x10AF1D8", VA = "0x10AF1D8")]
		public void SetFrame(int frameIndex, float time, float r, float g, float b, float a, float r2, float g2, float b2)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x10AF300", Offset = "0x10AF300", VA = "0x10AF300", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000473")]
	public class AttachmentTimeline : Timeline, ISlotTimeline
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int slotIndex;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float[] frames;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal string[] attachmentNames;

		[Token(Token = "0x170001B7")]
		public int PropertyId
		{
			[Token(Token = "0x600154D")]
			[Address(RVA = "0x118BA70", Offset = "0x118BA70", VA = "0x118BA70", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B8")]
		public int FrameCount
		{
			[Token(Token = "0x600154E")]
			[Address(RVA = "0x118BA80", Offset = "0x118BA80", VA = "0x118BA80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B9")]
		public int SlotIndex
		{
			[Token(Token = "0x6001550")]
			[Address(RVA = "0x118BAFC", Offset = "0x118BAFC", VA = "0x118BAFC", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600154F")]
			[Address(RVA = "0x118BA9C", Offset = "0x118BA9C", VA = "0x118BA9C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public float[] Frames
		{
			[Token(Token = "0x6001551")]
			[Address(RVA = "0x118BB04", Offset = "0x118BB04", VA = "0x118BB04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001552")]
			[Address(RVA = "0x118BB0C", Offset = "0x118BB0C", VA = "0x118BB0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public string[] AttachmentNames
		{
			[Token(Token = "0x6001553")]
			[Address(RVA = "0x118BB14", Offset = "0x118BB14", VA = "0x118BB14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001554")]
			[Address(RVA = "0x118BB1C", Offset = "0x118BB1C", VA = "0x118BB1C")]
			set
			{
			}
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x118B9E0", Offset = "0x118B9E0", VA = "0x118B9E0")]
		public AttachmentTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x118BB24", Offset = "0x118BB24", VA = "0x118BB24")]
		public void SetFrame(int frameIndex, float time, string attachmentName)
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x118BBBC", Offset = "0x118BBBC", VA = "0x118BBBC", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000474")]
	public class DeformTimeline : CurveTimeline, ISlotTimeline
	{
		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int slotIndex;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal VertexAttachment attachment;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float[] frames;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float[][] frameVertices;

		[Token(Token = "0x170001BC")]
		public override int PropertyId
		{
			[Token(Token = "0x6001558")]
			[Address(RVA = "0x168EF20", Offset = "0x168EF20", VA = "0x168EF20", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BD")]
		public int SlotIndex
		{
			[Token(Token = "0x600155A")]
			[Address(RVA = "0x168EFAC", Offset = "0x168EFAC", VA = "0x168EFAC", Slot = "8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001559")]
			[Address(RVA = "0x168EF4C", Offset = "0x168EF4C", VA = "0x168EF4C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public VertexAttachment Attachment
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0x168EFB4", Offset = "0x168EFB4", VA = "0x168EFB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600155C")]
			[Address(RVA = "0x168EFBC", Offset = "0x168EFBC", VA = "0x168EFBC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public float[] Frames
		{
			[Token(Token = "0x600155D")]
			[Address(RVA = "0x168EFC4", Offset = "0x168EFC4", VA = "0x168EFC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600155E")]
			[Address(RVA = "0x168EFCC", Offset = "0x168EFCC", VA = "0x168EFCC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public float[][] Vertices
		{
			[Token(Token = "0x600155F")]
			[Address(RVA = "0x168EFD4", Offset = "0x168EFD4", VA = "0x168EFD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001560")]
			[Address(RVA = "0x168EFDC", Offset = "0x168EFDC", VA = "0x168EFDC")]
			set
			{
			}
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x168EE90", Offset = "0x168EE90", VA = "0x168EE90")]
		public DeformTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0x168EFE4", Offset = "0x168EFE4", VA = "0x168EFE4")]
		public void SetFrame(int frameIndex, float time, float[] vertices)
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x168F07C", Offset = "0x168F07C", VA = "0x168F07C", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class EventTimeline : Timeline
	{
		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Event[] events;

		[Token(Token = "0x170001C1")]
		public int PropertyId
		{
			[Token(Token = "0x6001564")]
			[Address(RVA = "0x1693000", Offset = "0x1693000", VA = "0x1693000", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C2")]
		public int FrameCount
		{
			[Token(Token = "0x6001565")]
			[Address(RVA = "0x1693008", Offset = "0x1693008", VA = "0x1693008")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C3")]
		public float[] Frames
		{
			[Token(Token = "0x6001566")]
			[Address(RVA = "0x1693024", Offset = "0x1693024", VA = "0x1693024")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001567")]
			[Address(RVA = "0x169302C", Offset = "0x169302C", VA = "0x169302C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public Event[] Events
		{
			[Token(Token = "0x6001568")]
			[Address(RVA = "0x1693034", Offset = "0x1693034", VA = "0x1693034")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001569")]
			[Address(RVA = "0x169303C", Offset = "0x169303C", VA = "0x169303C")]
			set
			{
			}
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x1692F70", Offset = "0x1692F70", VA = "0x1692F70")]
		public EventTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x1693044", Offset = "0x1693044", VA = "0x1693044")]
		public void SetFrame(int frameIndex, Event e)
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x16930E0", Offset = "0x16930E0", VA = "0x16930E0", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000476")]
	public class DrawOrderTimeline : Timeline
	{
		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[][] drawOrders;

		[Token(Token = "0x170001C5")]
		public int PropertyId
		{
			[Token(Token = "0x600156D")]
			[Address(RVA = "0x1691CE8", Offset = "0x1691CE8", VA = "0x1691CE8", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C6")]
		public int FrameCount
		{
			[Token(Token = "0x600156E")]
			[Address(RVA = "0x1691CF0", Offset = "0x1691CF0", VA = "0x1691CF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C7")]
		public float[] Frames
		{
			[Token(Token = "0x600156F")]
			[Address(RVA = "0x1691D0C", Offset = "0x1691D0C", VA = "0x1691D0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001570")]
			[Address(RVA = "0x1691D14", Offset = "0x1691D14", VA = "0x1691D14")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public int[][] DrawOrders
		{
			[Token(Token = "0x6001571")]
			[Address(RVA = "0x1691D1C", Offset = "0x1691D1C", VA = "0x1691D1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001572")]
			[Address(RVA = "0x1691D24", Offset = "0x1691D24", VA = "0x1691D24")]
			set
			{
			}
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x1691C58", Offset = "0x1691C58", VA = "0x1691C58")]
		public DrawOrderTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0x1691D2C", Offset = "0x1691D2C", VA = "0x1691D2C")]
		public void SetFrame(int frameIndex, float time, int[] drawOrder)
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x1691DC4", Offset = "0x1691DC4", VA = "0x1691DC4", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000477")]
	public class IkConstraintTimeline : CurveTimeline
	{
		[Token(Token = "0x4000DB2")]
		public const int ENTRIES = 5;

		[Token(Token = "0x4000DB3")]
		private const int PREV_TIME = -5;

		[Token(Token = "0x4000DB4")]
		private const int PREV_MIX = -4;

		[Token(Token = "0x4000DB5")]
		private const int PREV_BEND_DIRECTION = -3;

		[Token(Token = "0x4000DB6")]
		private const int PREV_COMPRESS = -2;

		[Token(Token = "0x4000DB7")]
		private const int PREV_STRETCH = -1;

		[Token(Token = "0x4000DB8")]
		private const int MIX = 1;

		[Token(Token = "0x4000DB9")]
		private const int BEND_DIRECTION = 2;

		[Token(Token = "0x4000DBA")]
		private const int COMPRESS = 3;

		[Token(Token = "0x4000DBB")]
		private const int STRETCH = 4;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int ikConstraintIndex;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001C9")]
		public override int PropertyId
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0x16957AC", Offset = "0x16957AC", VA = "0x16957AC", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CA")]
		public int IkConstraintIndex
		{
			[Token(Token = "0x6001578")]
			[Address(RVA = "0x169581C", Offset = "0x169581C", VA = "0x169581C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001577")]
			[Address(RVA = "0x16957BC", Offset = "0x16957BC", VA = "0x16957BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		public float[] Frames
		{
			[Token(Token = "0x6001579")]
			[Address(RVA = "0x1695824", Offset = "0x1695824", VA = "0x1695824")]
			get
			{
				return null;
			}
			[Token(Token = "0x600157A")]
			[Address(RVA = "0x169582C", Offset = "0x169582C", VA = "0x169582C")]
			set
			{
			}
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0x1695740", Offset = "0x1695740", VA = "0x1695740")]
		public IkConstraintTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x1695834", Offset = "0x1695834", VA = "0x1695834")]
		public void SetFrame(int frameIndex, float time, float mix, int bendDirection, bool compress, bool stretch)
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x1695914", Offset = "0x1695914", VA = "0x1695914", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000478")]
	public class TransformConstraintTimeline : CurveTimeline
	{
		[Token(Token = "0x4000DBE")]
		public const int ENTRIES = 5;

		[Token(Token = "0x4000DBF")]
		private const int PREV_TIME = -5;

		[Token(Token = "0x4000DC0")]
		private const int PREV_ROTATE = -4;

		[Token(Token = "0x4000DC1")]
		private const int PREV_TRANSLATE = -3;

		[Token(Token = "0x4000DC2")]
		private const int PREV_SCALE = -2;

		[Token(Token = "0x4000DC3")]
		private const int PREV_SHEAR = -1;

		[Token(Token = "0x4000DC4")]
		private const int ROTATE = 1;

		[Token(Token = "0x4000DC5")]
		private const int TRANSLATE = 2;

		[Token(Token = "0x4000DC6")]
		private const int SCALE = 3;

		[Token(Token = "0x4000DC7")]
		private const int SHEAR = 4;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int transformConstraintIndex;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001CC")]
		public override int PropertyId
		{
			[Token(Token = "0x600157E")]
			[Address(RVA = "0x10AD330", Offset = "0x10AD330", VA = "0x10AD330", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CD")]
		public int TransformConstraintIndex
		{
			[Token(Token = "0x6001580")]
			[Address(RVA = "0x10AD3A0", Offset = "0x10AD3A0", VA = "0x10AD3A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600157F")]
			[Address(RVA = "0x10AD340", Offset = "0x10AD340", VA = "0x10AD340")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public float[] Frames
		{
			[Token(Token = "0x6001581")]
			[Address(RVA = "0x10AD3A8", Offset = "0x10AD3A8", VA = "0x10AD3A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001582")]
			[Address(RVA = "0x10AD3B0", Offset = "0x10AD3B0", VA = "0x10AD3B0")]
			set
			{
			}
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x10AD2C0", Offset = "0x10AD2C0", VA = "0x10AD2C0")]
		public TransformConstraintTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x10AD3B8", Offset = "0x10AD3B8", VA = "0x10AD3B8")]
		public void SetFrame(int frameIndex, float time, float rotateMix, float translateMix, float scaleMix, float shearMix)
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x10AD478", Offset = "0x10AD478", VA = "0x10AD478", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x2000479")]
	public class PathConstraintPositionTimeline : CurveTimeline
	{
		[Token(Token = "0x4000DCA")]
		public const int ENTRIES = 2;

		[Token(Token = "0x4000DCB")]
		protected const int PREV_TIME = -2;

		[Token(Token = "0x4000DCC")]
		protected const int PREV_VALUE = -1;

		[Token(Token = "0x4000DCD")]
		protected const int VALUE = 1;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int pathConstraintIndex;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001CF")]
		public override int PropertyId
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0x12C4118", Offset = "0x12C4118", VA = "0x12C4118", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D0")]
		public int PathConstraintIndex
		{
			[Token(Token = "0x6001588")]
			[Address(RVA = "0x12C4188", Offset = "0x12C4188", VA = "0x12C4188")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001587")]
			[Address(RVA = "0x12C4128", Offset = "0x12C4128", VA = "0x12C4128")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public float[] Frames
		{
			[Token(Token = "0x6001589")]
			[Address(RVA = "0x12C4190", Offset = "0x12C4190", VA = "0x12C4190")]
			get
			{
				return null;
			}
			[Token(Token = "0x600158A")]
			[Address(RVA = "0x12C4198", Offset = "0x12C4198", VA = "0x12C4198")]
			set
			{
			}
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x12C40A8", Offset = "0x12C40A8", VA = "0x12C40A8")]
		public PathConstraintPositionTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x12C41A0", Offset = "0x12C41A0", VA = "0x12C41A0")]
		public void SetFrame(int frameIndex, float time, float position)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x12C4204", Offset = "0x12C4204", VA = "0x12C4204", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x200047A")]
	public class PathConstraintSpacingTimeline : PathConstraintPositionTimeline
	{
		[Token(Token = "0x170001D2")]
		public override int PropertyId
		{
			[Token(Token = "0x600158E")]
			[Address(RVA = "0x12C4400", Offset = "0x12C4400", VA = "0x12C4400", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x12C43FC", Offset = "0x12C43FC", VA = "0x12C43FC")]
		public PathConstraintSpacingTimeline(int frameCount)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x12C4410", Offset = "0x12C4410", VA = "0x12C4410", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> events, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x200047B")]
	public class PathConstraintMixTimeline : CurveTimeline
	{
		[Token(Token = "0x4000DD0")]
		public const int ENTRIES = 3;

		[Token(Token = "0x4000DD1")]
		private const int PREV_TIME = -3;

		[Token(Token = "0x4000DD2")]
		private const int PREV_ROTATE = -2;

		[Token(Token = "0x4000DD3")]
		private const int PREV_TRANSLATE = -1;

		[Token(Token = "0x4000DD4")]
		private const int ROTATE = 1;

		[Token(Token = "0x4000DD5")]
		private const int TRANSLATE = 2;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int pathConstraintIndex;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float[] frames;

		[Token(Token = "0x170001D3")]
		public override int PropertyId
		{
			[Token(Token = "0x6001591")]
			[Address(RVA = "0x12C3D08", Offset = "0x12C3D08", VA = "0x12C3D08", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D4")]
		public int PathConstraintIndex
		{
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x12C3D78", Offset = "0x12C3D78", VA = "0x12C3D78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001592")]
			[Address(RVA = "0x12C3D18", Offset = "0x12C3D18", VA = "0x12C3D18")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public float[] Frames
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x12C3D80", Offset = "0x12C3D80", VA = "0x12C3D80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x12C3D88", Offset = "0x12C3D88", VA = "0x12C3D88")]
			set
			{
			}
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x12C3C98", Offset = "0x12C3C98", VA = "0x12C3C98")]
		public PathConstraintMixTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x12C3D90", Offset = "0x12C3D90", VA = "0x12C3D90")]
		public void SetFrame(int frameIndex, float time, float rotateMix, float translateMix)
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0x12C3E10", Offset = "0x12C3E10", VA = "0x12C3E10", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixBlend blend, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x200047C")]
	public class AnimationState
	{
		[Token(Token = "0x200047D")]
		public delegate void TrackEntryDelegate(TrackEntry trackEntry);

		[Token(Token = "0x200047E")]
		public delegate void TrackEntryEventDelegate(TrackEntry trackEntry, Event e);

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Animation EmptyAnimation;

		[Token(Token = "0x4000DD9")]
		internal const int Subsequent = 0;

		[Token(Token = "0x4000DDA")]
		internal const int First = 1;

		[Token(Token = "0x4000DDB")]
		internal const int Hold = 2;

		[Token(Token = "0x4000DDC")]
		internal const int HoldMix = 3;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected AnimationStateData data;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ExposedList<TrackEntry> tracks;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ExposedList<Event> events;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly EventQueue queue;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly HashSet<int> propertyIDs;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool animationsChanged;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float timeScale;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Pool<TrackEntry> trackEntryPool;

		[Token(Token = "0x170001D6")]
		public float TimeScale
		{
			[Token(Token = "0x60015C3")]
			[Address(RVA = "0x117B610", Offset = "0x117B610", VA = "0x117B610")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015C4")]
			[Address(RVA = "0x117B618", Offset = "0x117B618", VA = "0x117B618")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public AnimationStateData Data
		{
			[Token(Token = "0x60015C5")]
			[Address(RVA = "0x117B620", Offset = "0x117B620", VA = "0x117B620")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015C6")]
			[Address(RVA = "0x117B628", Offset = "0x117B628", VA = "0x117B628")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public ExposedList<TrackEntry> Tracks
		{
			[Token(Token = "0x60015C7")]
			[Address(RVA = "0x117B6A0", Offset = "0x117B6A0", VA = "0x117B6A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000002")]
		public event TrackEntryDelegate Start
		{
			[Token(Token = "0x600159E")]
			[Address(RVA = "0x1178218", Offset = "0x1178218", VA = "0x1178218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBA8", Offset = "0x8BDBA8")]
			add
			{
			}
			[Token(Token = "0x600159F")]
			[Address(RVA = "0x11782B8", Offset = "0x11782B8", VA = "0x11782B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBB8", Offset = "0x8BDBB8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event TrackEntryDelegate Interrupt
		{
			[Token(Token = "0x60015A0")]
			[Address(RVA = "0x1178358", Offset = "0x1178358", VA = "0x1178358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBC8", Offset = "0x8BDBC8")]
			add
			{
			}
			[Token(Token = "0x60015A1")]
			[Address(RVA = "0x11783F8", Offset = "0x11783F8", VA = "0x11783F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBD8", Offset = "0x8BDBD8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event TrackEntryDelegate End
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x1178498", Offset = "0x1178498", VA = "0x1178498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBE8", Offset = "0x8BDBE8")]
			add
			{
			}
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x1178538", Offset = "0x1178538", VA = "0x1178538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDBF8", Offset = "0x8BDBF8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event TrackEntryDelegate Dispose
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x11785D8", Offset = "0x11785D8", VA = "0x11785D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC08", Offset = "0x8BDC08")]
			add
			{
			}
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x1178678", Offset = "0x1178678", VA = "0x1178678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC18", Offset = "0x8BDC18")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event TrackEntryDelegate Complete
		{
			[Token(Token = "0x60015A6")]
			[Address(RVA = "0x1178718", Offset = "0x1178718", VA = "0x1178718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC28", Offset = "0x8BDC28")]
			add
			{
			}
			[Token(Token = "0x60015A7")]
			[Address(RVA = "0x11787B8", Offset = "0x11787B8", VA = "0x11787B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC38", Offset = "0x8BDC38")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event TrackEntryEventDelegate Event
		{
			[Token(Token = "0x60015A8")]
			[Address(RVA = "0x1178858", Offset = "0x1178858", VA = "0x1178858")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC48", Offset = "0x8BDC48")]
			add
			{
			}
			[Token(Token = "0x60015A9")]
			[Address(RVA = "0x11788F8", Offset = "0x11788F8", VA = "0x11788F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC58", Offset = "0x8BDC58")]
			remove
			{
			}
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x11781A0", Offset = "0x11781A0", VA = "0x11781A0")]
		internal void OnStart(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x11781B4", Offset = "0x11781B4", VA = "0x11781B4")]
		internal void OnInterrupt(TrackEntry entry)
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x11781C8", Offset = "0x11781C8", VA = "0x11781C8")]
		internal void OnEnd(TrackEntry entry)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x11781DC", Offset = "0x11781DC", VA = "0x11781DC")]
		internal void OnDispose(TrackEntry entry)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x11781F0", Offset = "0x11781F0", VA = "0x11781F0")]
		internal void OnComplete(TrackEntry entry)
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x1178204", Offset = "0x1178204", VA = "0x1178204")]
		internal void OnEvent(TrackEntry entry, Event e)
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x1178998", Offset = "0x1178998", VA = "0x1178998")]
		public AnimationState(AnimationStateData data)
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x1178BD4", Offset = "0x1178BD4", VA = "0x1178BD4")]
		public void Update(float delta)
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x1178FC8", Offset = "0x1178FC8", VA = "0x1178FC8")]
		private bool UpdateMixingFrom(TrackEntry to, float delta)
		{
			return default(bool);
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x11790B8", Offset = "0x11790B8", VA = "0x11790B8")]
		public bool Apply(Skeleton skeleton)
		{
			return default(bool);
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x11796C0", Offset = "0x11796C0", VA = "0x11796C0")]
		private float ApplyMixingFrom(TrackEntry to, Skeleton skeleton, MixBlend blend)
		{
			return default(float);
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x1179D6C", Offset = "0x1179D6C", VA = "0x1179D6C")]
		private static void ApplyRotateTimeline(RotateTimeline rotateTimeline, Skeleton skeleton, float time, float alpha, MixBlend blend, float[] timelinesRotation, int i, bool firstFrame)
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x117A2B8", Offset = "0x117A2B8", VA = "0x117A2B8")]
		private void QueueEvents(TrackEntry entry, float animationTime)
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x117A448", Offset = "0x117A448", VA = "0x117A448")]
		public void ClearTracks()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x117A508", Offset = "0x117A508", VA = "0x117A508")]
		public void ClearTrack(int trackIndex)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x1178DE8", Offset = "0x1178DE8", VA = "0x1178DE8")]
		private void SetCurrent(int index, TrackEntry current, bool interrupt)
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x117A6AC", Offset = "0x117A6AC", VA = "0x117A6AC")]
		public TrackEntry SetAnimation(int trackIndex, string animationName, bool loop)
		{
			return null;
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x117A778", Offset = "0x117A778", VA = "0x117A778")]
		public TrackEntry SetAnimation(int trackIndex, Animation animation, bool loop)
		{
			return null;
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x117AA14", Offset = "0x117AA14", VA = "0x117AA14")]
		public TrackEntry AddAnimation(int trackIndex, string animationName, bool loop, float delay)
		{
			return null;
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x117AAF0", Offset = "0x117AAF0", VA = "0x117AAF0")]
		public TrackEntry AddAnimation(int trackIndex, Animation animation, bool loop, float delay)
		{
			return null;
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x117AE1C", Offset = "0x117AE1C", VA = "0x117AE1C")]
		public TrackEntry SetEmptyAnimation(int trackIndex, float mixDuration)
		{
			return null;
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x117AEBC", Offset = "0x117AEBC", VA = "0x117AEBC")]
		public TrackEntry AddEmptyAnimation(int trackIndex, float mixDuration, float delay)
		{
			return null;
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x117AF70", Offset = "0x117AF70", VA = "0x117AF70")]
		public void SetEmptyAnimations(float mixDuration)
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x117A608", Offset = "0x117A608", VA = "0x117A608")]
		private TrackEntry ExpandToIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x117A924", Offset = "0x117A924", VA = "0x117A924")]
		private TrackEntry NewTrackEntry(int trackIndex, Animation animation, bool loop, TrackEntry last)
		{
			return null;
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x1178F70", Offset = "0x1178F70", VA = "0x1178F70")]
		private void DisposeNext(TrackEntry entry)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x11795CC", Offset = "0x11795CC", VA = "0x11795CC")]
		private void AnimationsChanged()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x117B038", Offset = "0x117B038", VA = "0x117B038")]
		private void SetTimelineModes(TrackEntry entry)
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x117B46C", Offset = "0x117B46C", VA = "0x117B46C")]
		private static bool HasTimeline(TrackEntry entry, int id)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x117B59C", Offset = "0x117B59C", VA = "0x117B59C")]
		public TrackEntry GetCurrent(int trackIndex)
		{
			return null;
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x117B5F4", Offset = "0x117B5F4", VA = "0x117B5F4")]
		public void ClearListenerNotifications()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x117B6A8", Offset = "0x117B6A8", VA = "0x117B6A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x117B8E0", Offset = "0x117B8E0", VA = "0x117B8E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC68", Offset = "0x8BDC68")]
		private void <.ctor>b__39_0()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class TrackEntry : Pool<TrackEntry>.IPoolable
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Animation animation;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal TrackEntry next;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TrackEntry mixingFrom;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal TrackEntry mixingTo;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int trackIndex;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal bool loop;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		internal bool holdPrevious;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal float eventThreshold;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal float attachmentThreshold;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal float drawOrderThreshold;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal float animationStart;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal float animationEnd;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal float animationLast;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal float nextAnimationLast;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal float delay;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal float trackTime;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal float trackLast;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal float nextTrackLast;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal float trackEnd;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal float timeScale;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal float alpha;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal float mixTime;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal float mixDuration;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal float interruptAlpha;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal float totalAlpha;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal MixBlend mixBlend;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal readonly ExposedList<int> timelineMode;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal readonly ExposedList<TrackEntry> timelineHoldMix;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal readonly ExposedList<float> timelinesRotation;

		[Token(Token = "0x170001D9")]
		public int TrackIndex
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x14DE9CC", Offset = "0x14DE9CC", VA = "0x14DE9CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DA")]
		public Animation Animation
		{
			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x14DE9D4", Offset = "0x14DE9D4", VA = "0x14DE9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DB")]
		public bool Loop
		{
			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x14DE9DC", Offset = "0x14DE9DC", VA = "0x14DE9DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x14DE9E4", Offset = "0x14DE9E4", VA = "0x14DE9E4")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public float Delay
		{
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x14DE9F0", Offset = "0x14DE9F0", VA = "0x14DE9F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x14DE9F8", Offset = "0x14DE9F8", VA = "0x14DE9F8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public float TrackTime
		{
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x14DEA00", Offset = "0x14DEA00", VA = "0x14DEA00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015ED")]
			[Address(RVA = "0x14DEA08", Offset = "0x14DEA08", VA = "0x14DEA08")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public float TrackEnd
		{
			[Token(Token = "0x60015EE")]
			[Address(RVA = "0x14DEA10", Offset = "0x14DEA10", VA = "0x14DEA10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015EF")]
			[Address(RVA = "0x14DEA18", Offset = "0x14DEA18", VA = "0x14DEA18")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public float AnimationStart
		{
			[Token(Token = "0x60015F0")]
			[Address(RVA = "0x14DEA20", Offset = "0x14DEA20", VA = "0x14DEA20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F1")]
			[Address(RVA = "0x14DEA28", Offset = "0x14DEA28", VA = "0x14DEA28")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public float AnimationEnd
		{
			[Token(Token = "0x60015F2")]
			[Address(RVA = "0x14DEA30", Offset = "0x14DEA30", VA = "0x14DEA30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F3")]
			[Address(RVA = "0x14DEA38", Offset = "0x14DEA38", VA = "0x14DEA38")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public float AnimationLast
		{
			[Token(Token = "0x60015F4")]
			[Address(RVA = "0x14DEA40", Offset = "0x14DEA40", VA = "0x14DEA40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F5")]
			[Address(RVA = "0x14DEA48", Offset = "0x14DEA48", VA = "0x14DEA48")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public float AnimationTime
		{
			[Token(Token = "0x60015F6")]
			[Address(RVA = "0x14DEA50", Offset = "0x14DEA50", VA = "0x14DEA50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E3")]
		public float TimeScale
		{
			[Token(Token = "0x60015F7")]
			[Address(RVA = "0x14DEB0C", Offset = "0x14DEB0C", VA = "0x14DEB0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F8")]
			[Address(RVA = "0x14DEB14", Offset = "0x14DEB14", VA = "0x14DEB14")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public float Alpha
		{
			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x14DEB1C", Offset = "0x14DEB1C", VA = "0x14DEB1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x14DEB24", Offset = "0x14DEB24", VA = "0x14DEB24")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public float EventThreshold
		{
			[Token(Token = "0x60015FB")]
			[Address(RVA = "0x14DEB2C", Offset = "0x14DEB2C", VA = "0x14DEB2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015FC")]
			[Address(RVA = "0x14DEB34", Offset = "0x14DEB34", VA = "0x14DEB34")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public float AttachmentThreshold
		{
			[Token(Token = "0x60015FD")]
			[Address(RVA = "0x14DEB3C", Offset = "0x14DEB3C", VA = "0x14DEB3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015FE")]
			[Address(RVA = "0x14DEB44", Offset = "0x14DEB44", VA = "0x14DEB44")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public float DrawOrderThreshold
		{
			[Token(Token = "0x60015FF")]
			[Address(RVA = "0x14DEB4C", Offset = "0x14DEB4C", VA = "0x14DEB4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001600")]
			[Address(RVA = "0x14DEB54", Offset = "0x14DEB54", VA = "0x14DEB54")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public TrackEntry Next
		{
			[Token(Token = "0x6001601")]
			[Address(RVA = "0x14DEB5C", Offset = "0x14DEB5C", VA = "0x14DEB5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public bool IsComplete
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0x14DEB64", Offset = "0x14DEB64", VA = "0x14DEB64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EA")]
		public float MixTime
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0x14DEB7C", Offset = "0x14DEB7C", VA = "0x14DEB7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001604")]
			[Address(RVA = "0x14DEB84", Offset = "0x14DEB84", VA = "0x14DEB84")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public float MixDuration
		{
			[Token(Token = "0x6001605")]
			[Address(RVA = "0x14DEB8C", Offset = "0x14DEB8C", VA = "0x14DEB8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001606")]
			[Address(RVA = "0x14DEB94", Offset = "0x14DEB94", VA = "0x14DEB94")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public MixBlend MixBlend
		{
			[Token(Token = "0x6001607")]
			[Address(RVA = "0x14DEB9C", Offset = "0x14DEB9C", VA = "0x14DEB9C")]
			get
			{
				return default(MixBlend);
			}
			[Token(Token = "0x6001608")]
			[Address(RVA = "0x14DEBA4", Offset = "0x14DEBA4", VA = "0x14DEBA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public TrackEntry MixingFrom
		{
			[Token(Token = "0x6001609")]
			[Address(RVA = "0x14DEBAC", Offset = "0x14DEBAC", VA = "0x14DEBAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		public TrackEntry MixingTo
		{
			[Token(Token = "0x600160A")]
			[Address(RVA = "0x14DEBB4", Offset = "0x14DEBB4", VA = "0x14DEBB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EF")]
		public bool HoldPrevious
		{
			[Token(Token = "0x600160B")]
			[Address(RVA = "0x14DEBBC", Offset = "0x14DEBBC", VA = "0x14DEBBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600160C")]
			[Address(RVA = "0x14DEBC4", Offset = "0x14DEBC4", VA = "0x14DEBC4")]
			set
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event AnimationState.TrackEntryDelegate Start
		{
			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x14DE0FC", Offset = "0x14DE0FC", VA = "0x14DE0FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC78", Offset = "0x8BDC78")]
			add
			{
			}
			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x14DE19C", Offset = "0x14DE19C", VA = "0x14DE19C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC88", Offset = "0x8BDC88")]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event AnimationState.TrackEntryDelegate Interrupt
		{
			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x14DE23C", Offset = "0x14DE23C", VA = "0x14DE23C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDC98", Offset = "0x8BDC98")]
			add
			{
			}
			[Token(Token = "0x60015D6")]
			[Address(RVA = "0x14DE2DC", Offset = "0x14DE2DC", VA = "0x14DE2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCA8", Offset = "0x8BDCA8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event AnimationState.TrackEntryDelegate End
		{
			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x14DE37C", Offset = "0x14DE37C", VA = "0x14DE37C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCB8", Offset = "0x8BDCB8")]
			add
			{
			}
			[Token(Token = "0x60015D8")]
			[Address(RVA = "0x14DE41C", Offset = "0x14DE41C", VA = "0x14DE41C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCC8", Offset = "0x8BDCC8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event AnimationState.TrackEntryDelegate Dispose
		{
			[Token(Token = "0x60015D9")]
			[Address(RVA = "0x14DE4BC", Offset = "0x14DE4BC", VA = "0x14DE4BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCD8", Offset = "0x8BDCD8")]
			add
			{
			}
			[Token(Token = "0x60015DA")]
			[Address(RVA = "0x14DE55C", Offset = "0x14DE55C", VA = "0x14DE55C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCE8", Offset = "0x8BDCE8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event AnimationState.TrackEntryDelegate Complete
		{
			[Token(Token = "0x60015DB")]
			[Address(RVA = "0x14DE5FC", Offset = "0x14DE5FC", VA = "0x14DE5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDCF8", Offset = "0x8BDCF8")]
			add
			{
			}
			[Token(Token = "0x60015DC")]
			[Address(RVA = "0x14DE69C", Offset = "0x14DE69C", VA = "0x14DE69C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD08", Offset = "0x8BDD08")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event AnimationState.TrackEntryEventDelegate Event
		{
			[Token(Token = "0x60015DD")]
			[Address(RVA = "0x14DE73C", Offset = "0x14DE73C", VA = "0x14DE73C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD18", Offset = "0x8BDD18")]
			add
			{
			}
			[Token(Token = "0x60015DE")]
			[Address(RVA = "0x14DE7DC", Offset = "0x14DE7DC", VA = "0x14DE7DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD28", Offset = "0x8BDD28")]
			remove
			{
			}
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x14DE87C", Offset = "0x14DE87C", VA = "0x14DE87C")]
		internal void OnStart()
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x14DE894", Offset = "0x14DE894", VA = "0x14DE894")]
		internal void OnInterrupt()
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x14DE8AC", Offset = "0x14DE8AC", VA = "0x14DE8AC")]
		internal void OnEnd()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x14DE8C4", Offset = "0x14DE8C4", VA = "0x14DE8C4")]
		internal void OnDispose()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x14DE8DC", Offset = "0x14DE8DC", VA = "0x14DE8DC")]
		internal void OnComplete()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x14DE8F4", Offset = "0x14DE8F4", VA = "0x14DE8F4")]
		internal void OnEvent(Event e)
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x14DE914", Offset = "0x14DE914", VA = "0x14DE914", Slot = "4")]
		public void Reset()
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0x14DEBD0", Offset = "0x14DEBD0", VA = "0x14DEBD0")]
		public void ResetRotationDirections()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0x14DEC28", Offset = "0x14DEC28", VA = "0x14DEC28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0x14DEC80", Offset = "0x14DEC80", VA = "0x14DEC80")]
		public TrackEntry()
		{
		}
	}
	[Token(Token = "0x2000480")]
	internal class EventQueue
	{
		[Token(Token = "0x2000481")]
		private struct EventQueueEntry
		{
			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EventType type;

			[Token(Token = "0x4000E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TrackEntry entry;

			[Token(Token = "0x4000E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Event e;

			[Token(Token = "0x600161B")]
			[Address(RVA = "0x10BF18C", Offset = "0x10BF18C", VA = "0x10BF18C")]
			public EventQueueEntry(EventType eventType, TrackEntry trackEntry, [Optional] Event e)
			{
			}
		}

		[Token(Token = "0x2000482")]
		private enum EventType
		{
			[Token(Token = "0x4000E17")]
			Start,
			[Token(Token = "0x4000E18")]
			Interrupt,
			[Token(Token = "0x4000E19")]
			End,
			[Token(Token = "0x4000E1A")]
			Dispose,
			[Token(Token = "0x4000E1B")]
			Complete,
			[Token(Token = "0x4000E1C")]
			Event
		}

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<EventQueueEntry> eventQueueEntries;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool drainDisabled;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AnimationState state;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Pool<TrackEntry> trackEntryPool;

		[Token(Token = "0x1400000E")]
		internal event Action AnimationsChanged
		{
			[Token(Token = "0x6001610")]
			[Address(RVA = "0x16926F4", Offset = "0x16926F4", VA = "0x16926F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD38", Offset = "0x8BDD38")]
			add
			{
			}
			[Token(Token = "0x6001611")]
			[Address(RVA = "0x1692794", Offset = "0x1692794", VA = "0x1692794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD48", Offset = "0x8BDD48")]
			remove
			{
			}
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x1692834", Offset = "0x1692834", VA = "0x1692834")]
		internal EventQueue(AnimationState state, Action HandleAnimationsChanged, Pool<TrackEntry> trackEntryPool)
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x16928E0", Offset = "0x16928E0", VA = "0x16928E0")]
		internal void Start(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x1692994", Offset = "0x1692994", VA = "0x1692994")]
		internal void Interrupt(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0x1692A38", Offset = "0x1692A38", VA = "0x1692A38")]
		internal void End(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x1692AEC", Offset = "0x1692AEC", VA = "0x1692AEC")]
		internal void Dispose(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x1692B90", Offset = "0x1692B90", VA = "0x1692B90")]
		internal void Complete(TrackEntry entry)
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x1692C34", Offset = "0x1692C34", VA = "0x1692C34")]
		internal void Event(TrackEntry entry, Event e)
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x1692CDC", Offset = "0x1692CDC", VA = "0x1692CDC")]
		internal void Drain()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0x1692F1C", Offset = "0x1692F1C", VA = "0x1692F1C")]
		internal void Clear()
		{
		}
	}
	[Token(Token = "0x2000483")]
	public class Pool<T> where T : class, new()
	{
		[Token(Token = "0x2000484")]
		public interface IPoolable
		{
			[Token(Token = "0x6001624")]
			void Reset();
		}

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int max;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Stack<T> freeObjects;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B3C", Offset = "0x8B3B3C")]
		private int <Peak>k__BackingField;

		[Token(Token = "0x170001F0")]
		public int Count
		{
			[Token(Token = "0x600161C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F1")]
		public int Peak
		{
			[Token(Token = "0x600161D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD58", Offset = "0x8BDD58")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600161E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD68", Offset = "0x8BDD68")]
			private set
			{
			}
		}

		[Token(Token = "0x600161F")]
		public Pool(int initialCapacity = 16, int max = int.MaxValue)
		{
		}

		[Token(Token = "0x6001620")]
		public T Obtain()
		{
			return null;
		}

		[Token(Token = "0x6001621")]
		public void Free(T obj)
		{
		}

		[Token(Token = "0x6001622")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001623")]
		protected void Reset(T obj)
		{
		}
	}
	[Token(Token = "0x2000485")]
	public class AnimationStateData
	{
		[Token(Token = "0x2000486")]
		public struct AnimationPair
		{
			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Animation a1;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly Animation a2;

			[Token(Token = "0x600162C")]
			[Address(RVA = "0x10BACB0", Offset = "0x10BACB0", VA = "0x10BACB0")]
			public AnimationPair(Animation a1, Animation a2)
			{
			}

			[Token(Token = "0x600162D")]
			[Address(RVA = "0x10BACB8", Offset = "0x10BACB8", VA = "0x10BACB8", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x2000487")]
		public class AnimationPairComparer : IEqualityComparer<AnimationPair>
		{
			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly AnimationPairComparer Instance;

			[Token(Token = "0x600162E")]
			[Address(RVA = "0x10BAD20", Offset = "0x10BAD20", VA = "0x10BAD20", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<Spine.AnimationStateData.AnimationPair>.Equals(AnimationPair x, AnimationPair y)
			{
				return default(bool);
			}

			[Token(Token = "0x600162F")]
			[Address(RVA = "0x10BAD38", Offset = "0x10BAD38", VA = "0x10BAD38", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<Spine.AnimationStateData.AnimationPair>.GetHashCode(AnimationPair obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001630")]
			[Address(RVA = "0x10BAD8C", Offset = "0x10BAD8C", VA = "0x10BAD8C")]
			public AnimationPairComparer()
			{
			}
		}

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SkeletonData skeletonData;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<AnimationPair, float> animationToMixTime;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float defaultMix;

		[Token(Token = "0x170001F2")]
		public SkeletonData SkeletonData
		{
			[Token(Token = "0x6001625")]
			[Address(RVA = "0x117B8EC", Offset = "0x117B8EC", VA = "0x117B8EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		public float DefaultMix
		{
			[Token(Token = "0x6001626")]
			[Address(RVA = "0x117B8F4", Offset = "0x117B8F4", VA = "0x117B8F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001627")]
			[Address(RVA = "0x117B8FC", Offset = "0x117B8FC", VA = "0x117B8FC")]
			set
			{
			}
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0x117B904", Offset = "0x117B904", VA = "0x117B904")]
		public AnimationStateData(SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0x117BA2C", Offset = "0x117BA2C", VA = "0x117BA2C")]
		public void SetMix(string fromName, string toName, float duration)
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0x117BB4C", Offset = "0x117BB4C", VA = "0x117BB4C")]
		public void SetMix(Animation from, Animation to, float duration)
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0x117ACE0", Offset = "0x117ACE0", VA = "0x117ACE0")]
		public float GetMix(Animation from, Animation to)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000488")]
	public class Atlas : IEnumerable<AtlasRegion>, IEnumerable
	{
		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<AtlasPage> pages;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<AtlasRegion> regions;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextureLoader textureLoader;

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x1185420", Offset = "0x1185420", VA = "0x1185420", Slot = "4")]
		public IEnumerator<AtlasRegion> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x11854B4", Offset = "0x11854B4", VA = "0x11854B4", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0x1185548", Offset = "0x1185548", VA = "0x1185548")]
		public Atlas(TextReader reader, string dir, TextureLoader textureLoader)
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0x1185FA8", Offset = "0x1185FA8", VA = "0x1185FA8")]
		public Atlas(List<AtlasPage> pages, List<AtlasRegion> regions)
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0x1185630", Offset = "0x1185630", VA = "0x1185630")]
		private void Load(TextReader reader, string imagesDir, TextureLoader textureLoader)
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x1186238", Offset = "0x1186238", VA = "0x1186238")]
		private static string ReadValue(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x1186084", Offset = "0x1186084", VA = "0x1186084")]
		private static int ReadTuple(TextReader reader, string[] tuple)
		{
			return default(int);
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x11862F8", Offset = "0x11862F8", VA = "0x11862F8")]
		public void FlipV()
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x11863C0", Offset = "0x11863C0", VA = "0x11863C0")]
		public AtlasRegion FindRegion(string name)
		{
			return null;
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x11864BC", Offset = "0x11864BC", VA = "0x11864BC")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public enum Format
	{
		[Token(Token = "0x4000E2A")]
		Alpha,
		[Token(Token = "0x4000E2B")]
		Intensity,
		[Token(Token = "0x4000E2C")]
		LuminanceAlpha,
		[Token(Token = "0x4000E2D")]
		RGB565,
		[Token(Token = "0x4000E2E")]
		RGBA4444,
		[Token(Token = "0x4000E2F")]
		RGB888,
		[Token(Token = "0x4000E30")]
		RGBA8888
	}
	[Token(Token = "0x200048A")]
	public enum TextureFilter
	{
		[Token(Token = "0x4000E32")]
		Nearest,
		[Token(Token = "0x4000E33")]
		Linear,
		[Token(Token = "0x4000E34")]
		MipMap,
		[Token(Token = "0x4000E35")]
		MipMapNearestNearest,
		[Token(Token = "0x4000E36")]
		MipMapLinearNearest,
		[Token(Token = "0x4000E37")]
		MipMapNearestLinear,
		[Token(Token = "0x4000E38")]
		MipMapLinearLinear
	}
	[Token(Token = "0x200048B")]
	public enum TextureWrap
	{
		[Token(Token = "0x4000E3A")]
		MirroredRepeat,
		[Token(Token = "0x4000E3B")]
		ClampToEdge,
		[Token(Token = "0x4000E3C")]
		Repeat
	}
	[Token(Token = "0x200048C")]
	public class AtlasPage
	{
		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Format format;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextureFilter minFilter;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureFilter magFilter;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextureWrap uWrap;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextureWrap vWrap;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public object rendererObject;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int width;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int height;

		[Token(Token = "0x600163C")]
		[Address(RVA = "0x1186B08", Offset = "0x1186B08", VA = "0x1186B08")]
		public AtlasPage Clone()
		{
			return null;
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0x118607C", Offset = "0x118607C", VA = "0x118607C")]
		public AtlasPage()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class AtlasRegion
	{
		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AtlasPage page;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int x;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int y;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int width;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int height;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float u;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float v;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float u2;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float v2;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float offsetX;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float offsetY;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int originalWidth;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int originalHeight;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int index;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool rotate;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int[] splits;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] pads;

		[Token(Token = "0x600163E")]
		[Address(RVA = "0x1186B90", Offset = "0x1186B90", VA = "0x1186B90")]
		public AtlasRegion Clone()
		{
			return null;
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x11862F0", Offset = "0x11862F0", VA = "0x11862F0")]
		public AtlasRegion()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public interface TextureLoader
	{
		[Token(Token = "0x6001640")]
		void Load(AtlasPage page, string path);

		[Token(Token = "0x6001641")]
		void Unload(object texture);
	}
	[Token(Token = "0x200048F")]
	public class AtlasAttachmentLoader : AttachmentLoader
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Atlas[] atlasArray;

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x1186600", Offset = "0x1186600", VA = "0x1186600")]
		public AtlasAttachmentLoader(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x1186678", Offset = "0x1186678", VA = "0x1186678", Slot = "4")]
		public RegionAttachment NewRegionAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x1186838", Offset = "0x1186838", VA = "0x1186838", Slot = "5")]
		public MeshAttachment NewMeshAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x1186988", Offset = "0x1186988", VA = "0x1186988", Slot = "6")]
		public BoundingBoxAttachment NewBoundingBoxAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x11869E8", Offset = "0x11869E8", VA = "0x11869E8", Slot = "7")]
		public PathAttachment NewPathAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0x1186A48", Offset = "0x1186A48", VA = "0x1186A48", Slot = "8")]
		public PointAttachment NewPointAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x1186AA8", Offset = "0x1186AA8", VA = "0x1186AA8", Slot = "9")]
		public ClippingAttachment NewClippingAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x11867B8", Offset = "0x11867B8", VA = "0x11867B8")]
		public AtlasRegion FindRegion(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x2000490")]
	public abstract class Attachment
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B4C", Offset = "0x8B3B4C")]
		private string <Name>k__BackingField;

		[Token(Token = "0x170001F4")]
		public string Name
		{
			[Token(Token = "0x600164A")]
			[Address(RVA = "0x118A340", Offset = "0x118A340", VA = "0x118A340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD78", Offset = "0x8BDD78")]
			get
			{
				return null;
			}
			[Token(Token = "0x600164B")]
			[Address(RVA = "0x118A348", Offset = "0x118A348", VA = "0x118A348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD88", Offset = "0x8BDD88")]
			private set
			{
			}
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x118A350", Offset = "0x118A350", VA = "0x118A350")]
		protected Attachment(string name)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x118A3DC", Offset = "0x118A3DC", VA = "0x118A3DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000491")]
	public interface IHasRendererObject
	{
		[Token(Token = "0x170001F5")]
		object RendererObject
		{
			[Token(Token = "0x600164E")]
			get;
			[Token(Token = "0x600164F")]
			set;
		}
	}
	[Token(Token = "0x2000492")]
	public interface AttachmentLoader
	{
		[Token(Token = "0x6001650")]
		RegionAttachment NewRegionAttachment(Skin skin, string name, string path);

		[Token(Token = "0x6001651")]
		MeshAttachment NewMeshAttachment(Skin skin, string name, string path);

		[Token(Token = "0x6001652")]
		BoundingBoxAttachment NewBoundingBoxAttachment(Skin skin, string name);

		[Token(Token = "0x6001653")]
		PathAttachment NewPathAttachment(Skin skin, string name);

		[Token(Token = "0x6001654")]
		PointAttachment NewPointAttachment(Skin skin, string name);

		[Token(Token = "0x6001655")]
		ClippingAttachment NewClippingAttachment(Skin skin, string name);
	}
	[Token(Token = "0x2000493")]
	public enum AttachmentType
	{
		[Token(Token = "0x4000E5B")]
		Region,
		[Token(Token = "0x4000E5C")]
		Boundingbox,
		[Token(Token = "0x4000E5D")]
		Mesh,
		[Token(Token = "0x4000E5E")]
		Linkedmesh,
		[Token(Token = "0x4000E5F")]
		Path,
		[Token(Token = "0x4000E60")]
		Point,
		[Token(Token = "0x4000E61")]
		Clipping
	}
	[Token(Token = "0x2000494")]
	public class BoundingBoxAttachment : VertexAttachment
	{
		[Token(Token = "0x6001656")]
		[Address(RVA = "0x1689E88", Offset = "0x1689E88", VA = "0x1689E88")]
		public BoundingBoxAttachment(string name)
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class ClippingAttachment : VertexAttachment
	{
		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal SlotData endSlot;

		[Token(Token = "0x170001F6")]
		public SlotData EndSlot
		{
			[Token(Token = "0x6001657")]
			[Address(RVA = "0x168BF80", Offset = "0x168BF80", VA = "0x168BF80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001658")]
			[Address(RVA = "0x168BF88", Offset = "0x168BF88", VA = "0x168BF88")]
			set
			{
			}
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0x168BF90", Offset = "0x168BF90", VA = "0x168BF90")]
		public ClippingAttachment(string name)
		{
		}
	}
	[Token(Token = "0x2000496")]
	public class MeshAttachment : VertexAttachment, IHasRendererObject
	{
		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float regionOffsetX;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float regionOffsetY;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float regionWidth;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float regionHeight;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float regionOriginalWidth;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float regionOriginalHeight;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MeshAttachment parentMesh;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float[] uvs;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float[] regionUVs;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int[] triangles;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal float r;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal float g;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal float b;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal float a;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal int hulllength;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal bool inheritDeform;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B5C", Offset = "0x8B3B5C")]
		private string <Path>k__BackingField;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B6C", Offset = "0x8B3B6C")]
		private object <RendererObject>k__BackingField;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B7C", Offset = "0x8B3B7C")]
		private float <RegionU>k__BackingField;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B8C", Offset = "0x8B3B8C")]
		private float <RegionV>k__BackingField;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3B9C", Offset = "0x8B3B9C")]
		private float <RegionU2>k__BackingField;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BAC", Offset = "0x8B3BAC")]
		private float <RegionV2>k__BackingField;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BBC", Offset = "0x8B3BBC")]
		private bool <RegionRotate>k__BackingField;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BCC", Offset = "0x8B3BCC")]
		private int[] <Edges>k__BackingField;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BDC", Offset = "0x8B3BDC")]
		private float <Width>k__BackingField;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BEC", Offset = "0x8B3BEC")]
		private float <Height>k__BackingField;

		[Token(Token = "0x170001F7")]
		public int HullLength
		{
			[Token(Token = "0x600165A")]
			[Address(RVA = "0x1750534", Offset = "0x1750534", VA = "0x1750534")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600165B")]
			[Address(RVA = "0x175053C", Offset = "0x175053C", VA = "0x175053C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public float[] RegionUVs
		{
			[Token(Token = "0x600165C")]
			[Address(RVA = "0x1750544", Offset = "0x1750544", VA = "0x1750544")]
			get
			{
				return null;
			}
			[Token(Token = "0x600165D")]
			[Address(RVA = "0x175054C", Offset = "0x175054C", VA = "0x175054C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public float[] UVs
		{
			[Token(Token = "0x600165E")]
			[Address(RVA = "0x1750554", Offset = "0x1750554", VA = "0x1750554")]
			get
			{
				return null;
			}
			[Token(Token = "0x600165F")]
			[Address(RVA = "0x175055C", Offset = "0x175055C", VA = "0x175055C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public int[] Triangles
		{
			[Token(Token = "0x6001660")]
			[Address(RVA = "0x1750564", Offset = "0x1750564", VA = "0x1750564")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001661")]
			[Address(RVA = "0x175056C", Offset = "0x175056C", VA = "0x175056C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public float R
		{
			[Token(Token = "0x6001662")]
			[Address(RVA = "0x1750574", Offset = "0x1750574", VA = "0x1750574")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001663")]
			[Address(RVA = "0x175057C", Offset = "0x175057C", VA = "0x175057C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public float G
		{
			[Token(Token = "0x6001664")]
			[Address(RVA = "0x1750584", Offset = "0x1750584", VA = "0x1750584")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001665")]
			[Address(RVA = "0x175058C", Offset = "0x175058C", VA = "0x175058C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public float B
		{
			[Token(Token = "0x6001666")]
			[Address(RVA = "0x1750594", Offset = "0x1750594", VA = "0x1750594")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001667")]
			[Address(RVA = "0x175059C", Offset = "0x175059C", VA = "0x175059C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public float A
		{
			[Token(Token = "0x6001668")]
			[Address(RVA = "0x17505A4", Offset = "0x17505A4", VA = "0x17505A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001669")]
			[Address(RVA = "0x17505AC", Offset = "0x17505AC", VA = "0x17505AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public string Path
		{
			[Token(Token = "0x600166A")]
			[Address(RVA = "0x17505B4", Offset = "0x17505B4", VA = "0x17505B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDD98", Offset = "0x8BDD98")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166B")]
			[Address(RVA = "0x17505BC", Offset = "0x17505BC", VA = "0x17505BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDA8", Offset = "0x8BDDA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public object RendererObject
		{
			[Token(Token = "0x600166C")]
			[Address(RVA = "0x17505C4", Offset = "0x17505C4", VA = "0x17505C4", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDB8", Offset = "0x8BDDB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166D")]
			[Address(RVA = "0x17505CC", Offset = "0x17505CC", VA = "0x17505CC", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDC8", Offset = "0x8BDDC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public float RegionU
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0x17505D4", Offset = "0x17505D4", VA = "0x17505D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDD8", Offset = "0x8BDDD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600166F")]
			[Address(RVA = "0x17505DC", Offset = "0x17505DC", VA = "0x17505DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDE8", Offset = "0x8BDDE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public float RegionV
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0x17505E4", Offset = "0x17505E4", VA = "0x17505E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDDF8", Offset = "0x8BDDF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001671")]
			[Address(RVA = "0x17505EC", Offset = "0x17505EC", VA = "0x17505EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE08", Offset = "0x8BDE08")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public float RegionU2
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0x17505F4", Offset = "0x17505F4", VA = "0x17505F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE18", Offset = "0x8BDE18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001673")]
			[Address(RVA = "0x17505FC", Offset = "0x17505FC", VA = "0x17505FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE28", Offset = "0x8BDE28")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public float RegionV2
		{
			[Token(Token = "0x6001674")]
			[Address(RVA = "0x1750604", Offset = "0x1750604", VA = "0x1750604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE38", Offset = "0x8BDE38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001675")]
			[Address(RVA = "0x175060C", Offset = "0x175060C", VA = "0x175060C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE48", Offset = "0x8BDE48")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public bool RegionRotate
		{
			[Token(Token = "0x6001676")]
			[Address(RVA = "0x1750614", Offset = "0x1750614", VA = "0x1750614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE58", Offset = "0x8BDE58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001677")]
			[Address(RVA = "0x175061C", Offset = "0x175061C", VA = "0x175061C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE68", Offset = "0x8BDE68")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public float RegionOffsetX
		{
			[Token(Token = "0x6001678")]
			[Address(RVA = "0x1750628", Offset = "0x1750628", VA = "0x1750628")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001679")]
			[Address(RVA = "0x1750630", Offset = "0x1750630", VA = "0x1750630")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public float RegionOffsetY
		{
			[Token(Token = "0x600167A")]
			[Address(RVA = "0x1750638", Offset = "0x1750638", VA = "0x1750638")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600167B")]
			[Address(RVA = "0x1750640", Offset = "0x1750640", VA = "0x1750640")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public float RegionWidth
		{
			[Token(Token = "0x600167C")]
			[Address(RVA = "0x1750648", Offset = "0x1750648", VA = "0x1750648")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600167D")]
			[Address(RVA = "0x1750650", Offset = "0x1750650", VA = "0x1750650")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public float RegionHeight
		{
			[Token(Token = "0x600167E")]
			[Address(RVA = "0x1750658", Offset = "0x1750658", VA = "0x1750658")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600167F")]
			[Address(RVA = "0x1750660", Offset = "0x1750660", VA = "0x1750660")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public float RegionOriginalWidth
		{
			[Token(Token = "0x6001680")]
			[Address(RVA = "0x1750668", Offset = "0x1750668", VA = "0x1750668")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001681")]
			[Address(RVA = "0x1750670", Offset = "0x1750670", VA = "0x1750670")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public float RegionOriginalHeight
		{
			[Token(Token = "0x6001682")]
			[Address(RVA = "0x1750678", Offset = "0x1750678", VA = "0x1750678")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001683")]
			[Address(RVA = "0x1750680", Offset = "0x1750680", VA = "0x1750680")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public bool InheritDeform
		{
			[Token(Token = "0x6001684")]
			[Address(RVA = "0x1750688", Offset = "0x1750688", VA = "0x1750688")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001685")]
			[Address(RVA = "0x1750690", Offset = "0x1750690", VA = "0x1750690")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public MeshAttachment ParentMesh
		{
			[Token(Token = "0x6001686")]
			[Address(RVA = "0x175069C", Offset = "0x175069C", VA = "0x175069C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001687")]
			[Address(RVA = "0x17506A4", Offset = "0x17506A4", VA = "0x17506A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public int[] Edges
		{
			[Token(Token = "0x6001688")]
			[Address(RVA = "0x17506F8", Offset = "0x17506F8", VA = "0x17506F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE78", Offset = "0x8BDE78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001689")]
			[Address(RVA = "0x1750700", Offset = "0x1750700", VA = "0x1750700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE88", Offset = "0x8BDE88")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public float Width
		{
			[Token(Token = "0x600168A")]
			[Address(RVA = "0x1750708", Offset = "0x1750708", VA = "0x1750708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDE98", Offset = "0x8BDE98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600168B")]
			[Address(RVA = "0x1750710", Offset = "0x1750710", VA = "0x1750710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDEA8", Offset = "0x8BDEA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public float Height
		{
			[Token(Token = "0x600168C")]
			[Address(RVA = "0x1750718", Offset = "0x1750718", VA = "0x1750718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDEB8", Offset = "0x8BDEB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600168D")]
			[Address(RVA = "0x1750720", Offset = "0x1750720", VA = "0x1750720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDEC8", Offset = "0x8BDEC8")]
			set
			{
			}
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x1750728", Offset = "0x1750728", VA = "0x1750728")]
		public MeshAttachment(string name)
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x17507A4", Offset = "0x17507A4", VA = "0x17507A4")]
		public void UpdateUVs()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x17509E8", Offset = "0x17509E8", VA = "0x17509E8", Slot = "4")]
		public override bool ApplyDeform(VertexAttachment sourceAttachment)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000497")]
	public class PathAttachment : VertexAttachment
	{
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float[] lengths;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool closed;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool constantSpeed;

		[Token(Token = "0x17000211")]
		public float[] Lengths
		{
			[Token(Token = "0x6001691")]
			[Address(RVA = "0x12C14D0", Offset = "0x12C14D0", VA = "0x12C14D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001692")]
			[Address(RVA = "0x12C14D8", Offset = "0x12C14D8", VA = "0x12C14D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public bool Closed
		{
			[Token(Token = "0x6001693")]
			[Address(RVA = "0x12C14E0", Offset = "0x12C14E0", VA = "0x12C14E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001694")]
			[Address(RVA = "0x12C14E8", Offset = "0x12C14E8", VA = "0x12C14E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public bool ConstantSpeed
		{
			[Token(Token = "0x6001695")]
			[Address(RVA = "0x12C14F4", Offset = "0x12C14F4", VA = "0x12C14F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001696")]
			[Address(RVA = "0x12C14FC", Offset = "0x12C14FC", VA = "0x12C14FC")]
			set
			{
			}
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x12C1508", Offset = "0x12C1508", VA = "0x12C1508")]
		public PathAttachment(string name)
		{
		}
	}
	[Token(Token = "0x2000498")]
	public class PointAttachment : Attachment
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float x;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float y;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float rotation;

		[Token(Token = "0x17000214")]
		public float X
		{
			[Token(Token = "0x6001698")]
			[Address(RVA = "0x12C6398", Offset = "0x12C6398", VA = "0x12C6398")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001699")]
			[Address(RVA = "0x12C63A0", Offset = "0x12C63A0", VA = "0x12C63A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public float Y
		{
			[Token(Token = "0x600169A")]
			[Address(RVA = "0x12C63A8", Offset = "0x12C63A8", VA = "0x12C63A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600169B")]
			[Address(RVA = "0x12C63B0", Offset = "0x12C63B0", VA = "0x12C63B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public float Rotation
		{
			[Token(Token = "0x600169C")]
			[Address(RVA = "0x12C63B8", Offset = "0x12C63B8", VA = "0x12C63B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600169D")]
			[Address(RVA = "0x12C63C0", Offset = "0x12C63C0", VA = "0x12C63C0")]
			set
			{
			}
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x12C63C8", Offset = "0x12C63C8", VA = "0x12C63C8")]
		public PointAttachment(string name)
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x12C63D0", Offset = "0x12C63D0", VA = "0x12C63D0")]
		public void ComputeWorldPosition(Bone bone, out float ox, out float oy)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x12C63F8", Offset = "0x12C63F8", VA = "0x12C63F8")]
		public float ComputeWorldRotation(Bone bone)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000499")]
	public class RegionAttachment : Attachment, IHasRendererObject
	{
		[Token(Token = "0x4000E83")]
		public const int BLX = 0;

		[Token(Token = "0x4000E84")]
		public const int BLY = 1;

		[Token(Token = "0x4000E85")]
		public const int ULX = 2;

		[Token(Token = "0x4000E86")]
		public const int ULY = 3;

		[Token(Token = "0x4000E87")]
		public const int URX = 4;

		[Token(Token = "0x4000E88")]
		public const int URY = 5;

		[Token(Token = "0x4000E89")]
		public const int BRX = 6;

		[Token(Token = "0x4000E8A")]
		public const int BRY = 7;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float x;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float y;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float rotation;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float scaleX;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float scaleY;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float width;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float height;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float regionOffsetX;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float regionOffsetY;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float regionWidth;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float regionHeight;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float regionOriginalWidth;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float regionOriginalHeight;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float[] offset;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float[] uvs;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float r;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float g;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal float b;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal float a;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3BFC", Offset = "0x8B3BFC")]
		private string <Path>k__BackingField;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C0C", Offset = "0x8B3C0C")]
		private object <RendererObject>k__BackingField;

		[Token(Token = "0x17000217")]
		public float X
		{
			[Token(Token = "0x60016A1")]
			[Address(RVA = "0x12C878C", Offset = "0x12C878C", VA = "0x12C878C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016A2")]
			[Address(RVA = "0x12C8794", Offset = "0x12C8794", VA = "0x12C8794")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public float Y
		{
			[Token(Token = "0x60016A3")]
			[Address(RVA = "0x12C879C", Offset = "0x12C879C", VA = "0x12C879C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016A4")]
			[Address(RVA = "0x12C87A4", Offset = "0x12C87A4", VA = "0x12C87A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public float Rotation
		{
			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x12C87AC", Offset = "0x12C87AC", VA = "0x12C87AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x12C87B4", Offset = "0x12C87B4", VA = "0x12C87B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public float ScaleX
		{
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x12C87BC", Offset = "0x12C87BC", VA = "0x12C87BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x12C87C4", Offset = "0x12C87C4", VA = "0x12C87C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public float ScaleY
		{
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x12C87CC", Offset = "0x12C87CC", VA = "0x12C87CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x12C87D4", Offset = "0x12C87D4", VA = "0x12C87D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public float Width
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x12C87DC", Offset = "0x12C87DC", VA = "0x12C87DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x12C87E4", Offset = "0x12C87E4", VA = "0x12C87E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public float Height
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x12C87EC", Offset = "0x12C87EC", VA = "0x12C87EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x12C87F4", Offset = "0x12C87F4", VA = "0x12C87F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public float R
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x12C87FC", Offset = "0x12C87FC", VA = "0x12C87FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x12C8804", Offset = "0x12C8804", VA = "0x12C8804")]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public float G
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x12C880C", Offset = "0x12C880C", VA = "0x12C880C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x12C8814", Offset = "0x12C8814", VA = "0x12C8814")]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public float B
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x12C881C", Offset = "0x12C881C", VA = "0x12C881C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x12C8824", Offset = "0x12C8824", VA = "0x12C8824")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public float A
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x12C882C", Offset = "0x12C882C", VA = "0x12C882C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B6")]
			[Address(RVA = "0x12C8834", Offset = "0x12C8834", VA = "0x12C8834")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public string Path
		{
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x12C883C", Offset = "0x12C883C", VA = "0x12C883C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDED8", Offset = "0x8BDED8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x12C8844", Offset = "0x12C8844", VA = "0x12C8844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDEE8", Offset = "0x8BDEE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public object RendererObject
		{
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x12C884C", Offset = "0x12C884C", VA = "0x12C884C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDEF8", Offset = "0x8BDEF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016BA")]
			[Address(RVA = "0x12C8854", Offset = "0x12C8854", VA = "0x12C8854", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF08", Offset = "0x8BDF08")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public float RegionOffsetX
		{
			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x12C885C", Offset = "0x12C885C", VA = "0x12C885C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x12C8864", Offset = "0x12C8864", VA = "0x12C8864")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public float RegionOffsetY
		{
			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x12C886C", Offset = "0x12C886C", VA = "0x12C886C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016BE")]
			[Address(RVA = "0x12C8874", Offset = "0x12C8874", VA = "0x12C8874")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public float RegionWidth
		{
			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x12C887C", Offset = "0x12C887C", VA = "0x12C887C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x12C8884", Offset = "0x12C8884", VA = "0x12C8884")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public float RegionHeight
		{
			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x12C888C", Offset = "0x12C888C", VA = "0x12C888C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016C2")]
			[Address(RVA = "0x12C8894", Offset = "0x12C8894", VA = "0x12C8894")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float RegionOriginalWidth
		{
			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x12C889C", Offset = "0x12C889C", VA = "0x12C889C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x12C88A4", Offset = "0x12C88A4", VA = "0x12C88A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public float RegionOriginalHeight
		{
			[Token(Token = "0x60016C5")]
			[Address(RVA = "0x12C88AC", Offset = "0x12C88AC", VA = "0x12C88AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016C6")]
			[Address(RVA = "0x12C88B4", Offset = "0x12C88B4", VA = "0x12C88B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public float[] Offset
		{
			[Token(Token = "0x60016C7")]
			[Address(RVA = "0x12C88BC", Offset = "0x12C88BC", VA = "0x12C88BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		public float[] UVs
		{
			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x12C88C4", Offset = "0x12C88C4", VA = "0x12C88C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x12C88CC", Offset = "0x12C88CC", VA = "0x12C88CC")]
		public RegionAttachment(string name)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x12C8958", Offset = "0x12C8958", VA = "0x12C8958")]
		public void UpdateOffset()
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0x12C8B68", Offset = "0x12C8B68", VA = "0x12C8B68")]
		public void SetUVs(float u, float v, float u2, float v2, bool rotate)
		{
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x12C8C2C", Offset = "0x12C8C2C", VA = "0x12C8C2C")]
		public void ComputeWorldVertices(Bone bone, float[] worldVertices, int offset, int stride = 2)
		{
		}
	}
	[Token(Token = "0x200049A")]
	public class VertexAttachment : Attachment
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int nextID;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object nextIdLock;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly int id;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int[] bones;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float[] vertices;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int worldVerticesLength;

		[Token(Token = "0x1700022C")]
		public int Id
		{
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x10B6C90", Offset = "0x10B6C90", VA = "0x10B6C90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022D")]
		public int[] Bones
		{
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x10B6C98", Offset = "0x10B6C98", VA = "0x10B6C98")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016CF")]
			[Address(RVA = "0x10B6CA0", Offset = "0x10B6CA0", VA = "0x10B6CA0")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public float[] Vertices
		{
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x10B6CA8", Offset = "0x10B6CA8", VA = "0x10B6CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x10B6CB0", Offset = "0x10B6CB0", VA = "0x10B6CB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public int WorldVerticesLength
		{
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x10B6CB8", Offset = "0x10B6CB8", VA = "0x10B6CB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x10B6CC0", Offset = "0x10B6CC0", VA = "0x10B6CC0")]
			set
			{
			}
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x10B6CC8", Offset = "0x10B6CC8", VA = "0x10B6CC8")]
		public VertexAttachment(string name)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x10B6E18", Offset = "0x10B6E18", VA = "0x10B6E18")]
		public void ComputeWorldVertices(Slot slot, float[] worldVertices)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x10B6E30", Offset = "0x10B6E30", VA = "0x10B6E30")]
		public void ComputeWorldVertices(Slot slot, int start, int count, float[] worldVertices, int offset, int stride = 2)
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x10B7260", Offset = "0x10B7260", VA = "0x10B7260", Slot = "4")]
		public virtual bool ApplyDeform(VertexAttachment sourceAttachment)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200049B")]
	public enum BlendMode
	{
		[Token(Token = "0x4000EA7")]
		Normal,
		[Token(Token = "0x4000EA8")]
		Additive,
		[Token(Token = "0x4000EA9")]
		Multiply,
		[Token(Token = "0x4000EAA")]
		Screen
	}
	[Token(Token = "0x200049C")]
	public class Bone : IUpdatable
	{
		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool yDown;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal BoneData data;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Skeleton skeleton;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Bone parent;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<Bone> children;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float x;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float y;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float rotation;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float scaleX;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float scaleY;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float shearX;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float shearY;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float ax;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float ay;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float arotation;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float ascaleX;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal float ascaleY;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float ashearX;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float ashearY;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal bool appliedValid;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal float a;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal float b;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal float worldX;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal float c;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal float d;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal float worldY;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal bool sorted;

		[Token(Token = "0x17000230")]
		public BoneData Data
		{
			[Token(Token = "0x60016D9")]
			[Address(RVA = "0x118C8CC", Offset = "0x118C8CC", VA = "0x118C8CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x60016DA")]
			[Address(RVA = "0x118C8D4", Offset = "0x118C8D4", VA = "0x118C8D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		public Bone Parent
		{
			[Token(Token = "0x60016DB")]
			[Address(RVA = "0x118C8DC", Offset = "0x118C8DC", VA = "0x118C8DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		public ExposedList<Bone> Children
		{
			[Token(Token = "0x60016DC")]
			[Address(RVA = "0x118C8E4", Offset = "0x118C8E4", VA = "0x118C8E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000234")]
		public float X
		{
			[Token(Token = "0x60016DD")]
			[Address(RVA = "0x118C8EC", Offset = "0x118C8EC", VA = "0x118C8EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016DE")]
			[Address(RVA = "0x118C8F4", Offset = "0x118C8F4", VA = "0x118C8F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public float Y
		{
			[Token(Token = "0x60016DF")]
			[Address(RVA = "0x118C8FC", Offset = "0x118C8FC", VA = "0x118C8FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0x118C904", Offset = "0x118C904", VA = "0x118C904")]
			set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public float Rotation
		{
			[Token(Token = "0x60016E1")]
			[Address(RVA = "0x118C90C", Offset = "0x118C90C", VA = "0x118C90C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016E2")]
			[Address(RVA = "0x118C914", Offset = "0x118C914", VA = "0x118C914")]
			set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public float ScaleX
		{
			[Token(Token = "0x60016E3")]
			[Address(RVA = "0x118C91C", Offset = "0x118C91C", VA = "0x118C91C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016E4")]
			[Address(RVA = "0x118C924", Offset = "0x118C924", VA = "0x118C924")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public float ScaleY
		{
			[Token(Token = "0x60016E5")]
			[Address(RVA = "0x118C92C", Offset = "0x118C92C", VA = "0x118C92C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016E6")]
			[Address(RVA = "0x118C934", Offset = "0x118C934", VA = "0x118C934")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public float ShearX
		{
			[Token(Token = "0x60016E7")]
			[Address(RVA = "0x118C93C", Offset = "0x118C93C", VA = "0x118C93C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x118C944", Offset = "0x118C944", VA = "0x118C944")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public float ShearY
		{
			[Token(Token = "0x60016E9")]
			[Address(RVA = "0x118C94C", Offset = "0x118C94C", VA = "0x118C94C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016EA")]
			[Address(RVA = "0x118C954", Offset = "0x118C954", VA = "0x118C954")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public float AppliedRotation
		{
			[Token(Token = "0x60016EB")]
			[Address(RVA = "0x118C95C", Offset = "0x118C95C", VA = "0x118C95C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016EC")]
			[Address(RVA = "0x118C964", Offset = "0x118C964", VA = "0x118C964")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public float AX
		{
			[Token(Token = "0x60016ED")]
			[Address(RVA = "0x118C96C", Offset = "0x118C96C", VA = "0x118C96C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016EE")]
			[Address(RVA = "0x118C974", Offset = "0x118C974", VA = "0x118C974")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public float AY
		{
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x118C97C", Offset = "0x118C97C", VA = "0x118C97C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x118C984", Offset = "0x118C984", VA = "0x118C984")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public float AScaleX
		{
			[Token(Token = "0x60016F1")]
			[Address(RVA = "0x118C98C", Offset = "0x118C98C", VA = "0x118C98C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016F2")]
			[Address(RVA = "0x118C994", Offset = "0x118C994", VA = "0x118C994")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public float AScaleY
		{
			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x118C99C", Offset = "0x118C99C", VA = "0x118C99C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x118C9A4", Offset = "0x118C9A4", VA = "0x118C9A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public float AShearX
		{
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x118C9AC", Offset = "0x118C9AC", VA = "0x118C9AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x118C9B4", Offset = "0x118C9B4", VA = "0x118C9B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public float AShearY
		{
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x118C9BC", Offset = "0x118C9BC", VA = "0x118C9BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x118C9C4", Offset = "0x118C9C4", VA = "0x118C9C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public float A
		{
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x118C9CC", Offset = "0x118C9CC", VA = "0x118C9CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000243")]
		public float B
		{
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x118C9D4", Offset = "0x118C9D4", VA = "0x118C9D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000244")]
		public float C
		{
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x118C9DC", Offset = "0x118C9DC", VA = "0x118C9DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000245")]
		public float D
		{
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x118C9E4", Offset = "0x118C9E4", VA = "0x118C9E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000246")]
		public float WorldX
		{
			[Token(Token = "0x60016FD")]
			[Address(RVA = "0x118C9EC", Offset = "0x118C9EC", VA = "0x118C9EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000247")]
		public float WorldY
		{
			[Token(Token = "0x60016FE")]
			[Address(RVA = "0x118C9F4", Offset = "0x118C9F4", VA = "0x118C9F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000248")]
		public float WorldRotationX
		{
			[Token(Token = "0x60016FF")]
			[Address(RVA = "0x118C9FC", Offset = "0x118C9FC", VA = "0x118C9FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000249")]
		public float WorldRotationY
		{
			[Token(Token = "0x6001700")]
			[Address(RVA = "0x118CA84", Offset = "0x118CA84", VA = "0x118CA84")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024A")]
		public float WorldScaleX
		{
			[Token(Token = "0x6001701")]
			[Address(RVA = "0x118CB0C", Offset = "0x118CB0C", VA = "0x118CB0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024B")]
		public float WorldScaleY
		{
			[Token(Token = "0x6001702")]
			[Address(RVA = "0x118CBA4", Offset = "0x118CBA4", VA = "0x118CBA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024C")]
		public float WorldToLocalRotationX
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0x118D9A0", Offset = "0x118D9A0", VA = "0x118D9A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024D")]
		public float WorldToLocalRotationY
		{
			[Token(Token = "0x600170C")]
			[Address(RVA = "0x118DA60", Offset = "0x118DA60", VA = "0x118DA60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x118CC3C", Offset = "0x118CC3C", VA = "0x118CC3C")]
		public Bone(BoneData data, Skeleton skeleton, Bone parent)
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x118CDC4", Offset = "0x118CDC4", VA = "0x118CDC4", Slot = "4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x118D578", Offset = "0x118D578", VA = "0x118D578")]
		public void UpdateWorldTransform()
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x118CDD8", Offset = "0x118CDD8", VA = "0x118CDD8")]
		public void UpdateWorldTransform(float x, float y, float rotation, float scaleX, float scaleY, float shearX, float shearY)
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x118CD74", Offset = "0x118CD74", VA = "0x118CD74")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x118D58C", Offset = "0x118D58C", VA = "0x118D58C")]
		internal void UpdateAppliedTransform()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x118D908", Offset = "0x118D908", VA = "0x118D908")]
		public void WorldToLocal(float worldX, float worldY, out float localX, out float localY)
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x118D964", Offset = "0x118D964", VA = "0x118D964")]
		public void LocalToWorld(float localX, float localY, out float worldX, out float worldY)
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x118DB20", Offset = "0x118DB20", VA = "0x118DB20")]
		public float WorldToLocalRotation(float worldRotation)
		{
			return default(float);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x118DBE8", Offset = "0x118DBE8", VA = "0x118DBE8")]
		public float LocalToWorldRotation(float localRotation)
		{
			return default(float);
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x118DCB0", Offset = "0x118DCB0", VA = "0x118DCB0")]
		public void RotateWorld(float degrees)
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x118DD74", Offset = "0x118DD74", VA = "0x118DD74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200049D")]
	public class BoneData
	{
		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int index;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string name;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal BoneData parent;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float length;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float x;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float y;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float rotation;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float scaleX;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float scaleY;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float shearX;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float shearY;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal TransformMode transformMode;

		[Token(Token = "0x1700024E")]
		public int Index
		{
			[Token(Token = "0x6001711")]
			[Address(RVA = "0x16882BC", Offset = "0x16882BC", VA = "0x16882BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024F")]
		public string Name
		{
			[Token(Token = "0x6001712")]
			[Address(RVA = "0x16882C4", Offset = "0x16882C4", VA = "0x16882C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000250")]
		public BoneData Parent
		{
			[Token(Token = "0x6001713")]
			[Address(RVA = "0x16882CC", Offset = "0x16882CC", VA = "0x16882CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000251")]
		public float Length
		{
			[Token(Token = "0x6001714")]
			[Address(RVA = "0x16882D4", Offset = "0x16882D4", VA = "0x16882D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001715")]
			[Address(RVA = "0x16882DC", Offset = "0x16882DC", VA = "0x16882DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public float X
		{
			[Token(Token = "0x6001716")]
			[Address(RVA = "0x16882E4", Offset = "0x16882E4", VA = "0x16882E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001717")]
			[Address(RVA = "0x16882EC", Offset = "0x16882EC", VA = "0x16882EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public float Y
		{
			[Token(Token = "0x6001718")]
			[Address(RVA = "0x16882F4", Offset = "0x16882F4", VA = "0x16882F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001719")]
			[Address(RVA = "0x16882FC", Offset = "0x16882FC", VA = "0x16882FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public float Rotation
		{
			[Token(Token = "0x600171A")]
			[Address(RVA = "0x1688304", Offset = "0x1688304", VA = "0x1688304")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600171B")]
			[Address(RVA = "0x168830C", Offset = "0x168830C", VA = "0x168830C")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public float ScaleX
		{
			[Token(Token = "0x600171C")]
			[Address(RVA = "0x1688314", Offset = "0x1688314", VA = "0x1688314")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600171D")]
			[Address(RVA = "0x168831C", Offset = "0x168831C", VA = "0x168831C")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public float ScaleY
		{
			[Token(Token = "0x600171E")]
			[Address(RVA = "0x1688324", Offset = "0x1688324", VA = "0x1688324")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600171F")]
			[Address(RVA = "0x168832C", Offset = "0x168832C", VA = "0x168832C")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public float ShearX
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x1688334", Offset = "0x1688334", VA = "0x1688334")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x168833C", Offset = "0x168833C", VA = "0x168833C")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public float ShearY
		{
			[Token(Token = "0x6001722")]
			[Address(RVA = "0x1688344", Offset = "0x1688344", VA = "0x1688344")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001723")]
			[Address(RVA = "0x168834C", Offset = "0x168834C", VA = "0x168834C")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public TransformMode TransformMode
		{
			[Token(Token = "0x6001724")]
			[Address(RVA = "0x1688354", Offset = "0x1688354", VA = "0x1688354")]
			get
			{
				return default(TransformMode);
			}
			[Token(Token = "0x6001725")]
			[Address(RVA = "0x168835C", Offset = "0x168835C", VA = "0x168835C")]
			set
			{
			}
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x1688364", Offset = "0x1688364", VA = "0x1688364")]
		public BoneData(int index, string name, BoneData parent)
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x1688458", Offset = "0x1688458", VA = "0x1688458", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200049E")]
	[Flags]
	public enum TransformMode
	{
		[Token(Token = "0x4000ED3")]
		Normal = 0,
		[Token(Token = "0x4000ED4")]
		OnlyTranslation = 7,
		[Token(Token = "0x4000ED5")]
		NoRotationOrReflection = 1,
		[Token(Token = "0x4000ED6")]
		NoScale = 2,
		[Token(Token = "0x4000ED7")]
		NoScaleOrReflection = 6
	}
	[Token(Token = "0x200049F")]
	public class Event
	{
		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly EventData data;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly float time;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int intValue;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float floatValue;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal string stringValue;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float volume;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float balance;

		[Token(Token = "0x1700025A")]
		public EventData Data
		{
			[Token(Token = "0x6001728")]
			[Address(RVA = "0x16922C4", Offset = "0x16922C4", VA = "0x16922C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025B")]
		public float Time
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0x16922CC", Offset = "0x16922CC", VA = "0x16922CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700025C")]
		public int Int
		{
			[Token(Token = "0x600172A")]
			[Address(RVA = "0x16922D4", Offset = "0x16922D4", VA = "0x16922D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600172B")]
			[Address(RVA = "0x16922DC", Offset = "0x16922DC", VA = "0x16922DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public float Float
		{
			[Token(Token = "0x600172C")]
			[Address(RVA = "0x16922E4", Offset = "0x16922E4", VA = "0x16922E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600172D")]
			[Address(RVA = "0x16922EC", Offset = "0x16922EC", VA = "0x16922EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public string String
		{
			[Token(Token = "0x600172E")]
			[Address(RVA = "0x16922F4", Offset = "0x16922F4", VA = "0x16922F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600172F")]
			[Address(RVA = "0x16922FC", Offset = "0x16922FC", VA = "0x16922FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public float Volume
		{
			[Token(Token = "0x6001730")]
			[Address(RVA = "0x1692304", Offset = "0x1692304", VA = "0x1692304")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001731")]
			[Address(RVA = "0x169230C", Offset = "0x169230C", VA = "0x169230C")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public float Balance
		{
			[Token(Token = "0x6001732")]
			[Address(RVA = "0x1692314", Offset = "0x1692314", VA = "0x1692314")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001733")]
			[Address(RVA = "0x169231C", Offset = "0x169231C", VA = "0x169231C")]
			set
			{
			}
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x1692324", Offset = "0x1692324", VA = "0x1692324")]
		public Event(float time, EventData data)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x16923C0", Offset = "0x16923C0", VA = "0x16923C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A0")]
	public class EventData
	{
		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C1C", Offset = "0x8B3C1C")]
		private int <Int>k__BackingField;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C2C", Offset = "0x8B3C2C")]
		private float <Float>k__BackingField;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C3C", Offset = "0x8B3C3C")]
		private string <String>k__BackingField;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C4C", Offset = "0x8B3C4C")]
		private string <AudioPath>k__BackingField;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C5C", Offset = "0x8B3C5C")]
		private float <Volume>k__BackingField;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C6C", Offset = "0x8B3C6C")]
		private float <Balance>k__BackingField;

		[Token(Token = "0x17000261")]
		public string Name
		{
			[Token(Token = "0x6001736")]
			[Address(RVA = "0x16923DC", Offset = "0x16923DC", VA = "0x16923DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public int Int
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0x16923E4", Offset = "0x16923E4", VA = "0x16923E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF18", Offset = "0x8BDF18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001738")]
			[Address(RVA = "0x16923EC", Offset = "0x16923EC", VA = "0x16923EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF28", Offset = "0x8BDF28")]
			set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public float Float
		{
			[Token(Token = "0x6001739")]
			[Address(RVA = "0x16923F4", Offset = "0x16923F4", VA = "0x16923F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF38", Offset = "0x8BDF38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600173A")]
			[Address(RVA = "0x16923FC", Offset = "0x16923FC", VA = "0x16923FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF48", Offset = "0x8BDF48")]
			set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public string String
		{
			[Token(Token = "0x600173B")]
			[Address(RVA = "0x1692404", Offset = "0x1692404", VA = "0x1692404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF58", Offset = "0x8BDF58")]
			get
			{
				return null;
			}
			[Token(Token = "0x600173C")]
			[Address(RVA = "0x169240C", Offset = "0x169240C", VA = "0x169240C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF68", Offset = "0x8BDF68")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public string AudioPath
		{
			[Token(Token = "0x600173D")]
			[Address(RVA = "0x1692414", Offset = "0x1692414", VA = "0x1692414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF78", Offset = "0x8BDF78")]
			get
			{
				return null;
			}
			[Token(Token = "0x600173E")]
			[Address(RVA = "0x169241C", Offset = "0x169241C", VA = "0x169241C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF88", Offset = "0x8BDF88")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public float Volume
		{
			[Token(Token = "0x600173F")]
			[Address(RVA = "0x1692424", Offset = "0x1692424", VA = "0x1692424")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDF98", Offset = "0x8BDF98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001740")]
			[Address(RVA = "0x169242C", Offset = "0x169242C", VA = "0x169242C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFA8", Offset = "0x8BDFA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public float Balance
		{
			[Token(Token = "0x6001741")]
			[Address(RVA = "0x1692434", Offset = "0x1692434", VA = "0x1692434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFB8", Offset = "0x8BDFB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001742")]
			[Address(RVA = "0x169243C", Offset = "0x169243C", VA = "0x169243C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFC8", Offset = "0x8BDFC8")]
			set
			{
			}
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x1692444", Offset = "0x1692444", VA = "0x1692444")]
		public EventData(string name)
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x16924D0", Offset = "0x16924D0", VA = "0x16924D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A1")]
	[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0x8B1B8C", Offset = "0x8B1B8C")]
	public class ExposedList<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20004A2")]
		public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExposedList<T> l;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int next;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int ver;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T current;

			[Token(Token = "0x17000269")]
			public T Current
			{
				[Token(Token = "0x600178F")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x1700026A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001791")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600178B")]
			internal Enumerator(ExposedList<T> l)
			{
			}

			[Token(Token = "0x600178C")]
			public void Dispose()
			{
			}

			[Token(Token = "0x600178D")]
			private void VerifyState()
			{
			}

			[Token(Token = "0x600178E")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001790")]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] Items;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Count;

		[Token(Token = "0x4000EE8")]
		private const int DefaultCapacity = 4;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly T[] EmptyArray;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int version;

		[Token(Token = "0x17000268")]
		public int Capacity
		{
			[Token(Token = "0x6001786")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001787")]
			set
			{
			}
		}

		[Token(Token = "0x6001745")]
		public ExposedList()
		{
		}

		[Token(Token = "0x6001746")]
		public ExposedList(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6001747")]
		public ExposedList(int capacity)
		{
		}

		[Token(Token = "0x6001748")]
		internal ExposedList(T[] data, int size)
		{
		}

		[Token(Token = "0x6001749")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x600174A")]
		public void GrowIfNeeded(int addedCount)
		{
		}

		[Token(Token = "0x600174B")]
		public ExposedList<T> Resize(int newSize)
		{
			return null;
		}

		[Token(Token = "0x600174C")]
		public void EnsureCapacity(int min)
		{
		}

		[Token(Token = "0x600174D")]
		private void CheckRange(int index, int count)
		{
		}

		[Token(Token = "0x600174E")]
		private void AddCollection(ICollection<T> collection)
		{
		}

		[Token(Token = "0x600174F")]
		private void AddEnumerable(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6001750")]
		public void AddRange(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6001751")]
		public int BinarySearch(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001752")]
		public int BinarySearch(T item, IComparer<T> comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001753")]
		public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001754")]
		public void Clear(bool clearArray = true)
		{
		}

		[Token(Token = "0x6001755")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001756")]
		public ExposedList<TOutput> ConvertAll<TOutput>(Converter<T, TOutput> converter)
		{
			return null;
		}

		[Token(Token = "0x6001757")]
		public void CopyTo(T[] array)
		{
		}

		[Token(Token = "0x6001758")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001759")]
		public void CopyTo(int index, T[] array, int arrayIndex, int count)
		{
		}

		[Token(Token = "0x600175A")]
		public bool Exists(Predicate<T> match)
		{
			return default(bool);
		}

		[Token(Token = "0x600175B")]
		public T Find(Predicate<T> match)
		{
			return (T)null;
		}

		[Token(Token = "0x600175C")]
		private static void CheckMatch(Predicate<T> match)
		{
		}

		[Token(Token = "0x600175D")]
		public ExposedList<T> FindAll(Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x600175E")]
		private ExposedList<T> FindAllList(Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x600175F")]
		public int FindIndex(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001760")]
		public int FindIndex(int startIndex, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001761")]
		public int FindIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001762")]
		private int GetIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001763")]
		public T FindLast(Predicate<T> match)
		{
			return (T)null;
		}

		[Token(Token = "0x6001764")]
		public int FindLastIndex(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001765")]
		public int FindLastIndex(int startIndex, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001766")]
		public int FindLastIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001767")]
		private int GetLastIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6001768")]
		public void ForEach(Action<T> action)
		{
		}

		[Token(Token = "0x6001769")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x600176A")]
		public ExposedList<T> GetRange(int index, int count)
		{
			return null;
		}

		[Token(Token = "0x600176B")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x600176C")]
		public int IndexOf(T item, int index)
		{
			return default(int);
		}

		[Token(Token = "0x600176D")]
		public int IndexOf(T item, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x600176E")]
		private void Shift(int start, int delta)
		{
		}

		[Token(Token = "0x600176F")]
		private void CheckIndex(int index)
		{
		}

		[Token(Token = "0x6001770")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6001771")]
		private void CheckCollection(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6001772")]
		public void InsertRange(int index, IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6001773")]
		private void InsertCollection(int index, ICollection<T> collection)
		{
		}

		[Token(Token = "0x6001774")]
		private void InsertEnumeration(int index, IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6001775")]
		public int LastIndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001776")]
		public int LastIndexOf(T item, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001777")]
		public int LastIndexOf(T item, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001778")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001779")]
		public int RemoveAll(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x600177A")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x600177B")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x600177C")]
		public void RemoveRange(int index, int count)
		{
		}

		[Token(Token = "0x600177D")]
		public void Reverse()
		{
		}

		[Token(Token = "0x600177E")]
		public void Reverse(int index, int count)
		{
		}

		[Token(Token = "0x600177F")]
		public void Sort()
		{
		}

		[Token(Token = "0x6001780")]
		public void Sort(IComparer<T> comparer)
		{
		}

		[Token(Token = "0x6001781")]
		public void Sort(Comparison<T> comparison)
		{
		}

		[Token(Token = "0x6001782")]
		public void Sort(int index, int count, IComparer<T> comparer)
		{
		}

		[Token(Token = "0x6001783")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6001784")]
		public void TrimExcess()
		{
		}

		[Token(Token = "0x6001785")]
		public bool TrueForAll(Predicate<T> match)
		{
			return default(bool);
		}

		[Token(Token = "0x6001788")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001789")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A3")]
	public interface IConstraint : IUpdatable
	{
		[Token(Token = "0x1700026B")]
		int Order
		{
			[Token(Token = "0x6001792")]
			get;
		}
	}
	[Token(Token = "0x20004A4")]
	public interface IUpdatable
	{
		[Token(Token = "0x6001793")]
		void Update();
	}
	[Token(Token = "0x20004A5")]
	public class IkConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IkConstraintData data;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Bone target;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int bendDirection;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal bool compress;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		internal bool stretch;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float mix;

		[Token(Token = "0x1700026C")]
		public int Order
		{
			[Token(Token = "0x6001798")]
			[Address(RVA = "0x1695510", Offset = "0x1695510", VA = "0x1695510", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026D")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0x169552C", Offset = "0x169552C", VA = "0x169552C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		public Bone Target
		{
			[Token(Token = "0x600179A")]
			[Address(RVA = "0x1695534", Offset = "0x1695534", VA = "0x1695534")]
			get
			{
				return null;
			}
			[Token(Token = "0x600179B")]
			[Address(RVA = "0x169553C", Offset = "0x169553C", VA = "0x169553C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public float Mix
		{
			[Token(Token = "0x600179C")]
			[Address(RVA = "0x1695544", Offset = "0x1695544", VA = "0x1695544")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600179D")]
			[Address(RVA = "0x169554C", Offset = "0x169554C", VA = "0x169554C")]
			set
			{
			}
		}

		[Token(Token = "0x17000270")]
		public int BendDirection
		{
			[Token(Token = "0x600179E")]
			[Address(RVA = "0x1695554", Offset = "0x1695554", VA = "0x1695554")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600179F")]
			[Address(RVA = "0x169555C", Offset = "0x169555C", VA = "0x169555C")]
			set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public bool Compress
		{
			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x1695564", Offset = "0x1695564", VA = "0x1695564")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017A1")]
			[Address(RVA = "0x169556C", Offset = "0x169556C", VA = "0x169556C")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public bool Stretch
		{
			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x1695578", Offset = "0x1695578", VA = "0x1695578")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017A3")]
			[Address(RVA = "0x1695580", Offset = "0x1695580", VA = "0x1695580")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public IkConstraintData Data
		{
			[Token(Token = "0x60017A4")]
			[Address(RVA = "0x169558C", Offset = "0x169558C", VA = "0x169558C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x169431C", Offset = "0x169431C", VA = "0x169431C")]
		public IkConstraint(IkConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x16945F8", Offset = "0x16945F8", VA = "0x16945F8")]
		public IkConstraint(IkConstraint constraint, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x1694920", Offset = "0x1694920", VA = "0x1694920")]
		public void Apply()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x1694924", Offset = "0x1694924", VA = "0x1694924", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x1695594", Offset = "0x1695594", VA = "0x1695594", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x16949E8", Offset = "0x16949E8", VA = "0x16949E8")]
		public static void Apply(Bone bone, float targetX, float targetY, bool compress, bool stretch, bool uniform, float alpha)
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x1694C38", Offset = "0x1694C38", VA = "0x1694C38")]
		public static void Apply(Bone parent, Bone child, float targetX, float targetY, int bendDir, bool stretch, float alpha)
		{
		}
	}
	[Token(Token = "0x20004A6")]
	public class IkConstraintData
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int order;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal List<BoneData> bones;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal BoneData target;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int bendDirection;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal bool compress;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		internal bool stretch;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		internal bool uniform;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float mix;

		[Token(Token = "0x17000274")]
		public string Name
		{
			[Token(Token = "0x60017A8")]
			[Address(RVA = "0x16955B0", Offset = "0x16955B0", VA = "0x16955B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000275")]
		public int Order
		{
			[Token(Token = "0x60017A9")]
			[Address(RVA = "0x16955B8", Offset = "0x16955B8", VA = "0x16955B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x16955C0", Offset = "0x16955C0", VA = "0x16955C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000276")]
		public List<BoneData> Bones
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x16955C8", Offset = "0x16955C8", VA = "0x16955C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		public BoneData Target
		{
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x16955D0", Offset = "0x16955D0", VA = "0x16955D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x16955D8", Offset = "0x16955D8", VA = "0x16955D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000278")]
		public float Mix
		{
			[Token(Token = "0x60017AE")]
			[Address(RVA = "0x16955E0", Offset = "0x16955E0", VA = "0x16955E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x16955E8", Offset = "0x16955E8", VA = "0x16955E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000279")]
		public int BendDirection
		{
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x16955F0", Offset = "0x16955F0", VA = "0x16955F0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x16955F8", Offset = "0x16955F8", VA = "0x16955F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700027A")]
		public bool Compress
		{
			[Token(Token = "0x60017B2")]
			[Address(RVA = "0x1695600", Offset = "0x1695600", VA = "0x1695600")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0x1695608", Offset = "0x1695608", VA = "0x1695608")]
			set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public bool Stretch
		{
			[Token(Token = "0x60017B4")]
			[Address(RVA = "0x1695614", Offset = "0x1695614", VA = "0x1695614")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017B5")]
			[Address(RVA = "0x169561C", Offset = "0x169561C", VA = "0x169561C")]
			set
			{
			}
		}

		[Token(Token = "0x1700027C")]
		public bool Uniform
		{
			[Token(Token = "0x60017B6")]
			[Address(RVA = "0x1695628", Offset = "0x1695628", VA = "0x1695628")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017B7")]
			[Address(RVA = "0x1695630", Offset = "0x1695630", VA = "0x1695630")]
			set
			{
			}
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x169563C", Offset = "0x169563C", VA = "0x169563C")]
		public IkConstraintData(string name)
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x1695738", Offset = "0x1695738", VA = "0x1695738", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A7")]
	public static class Json
	{
		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x16969A4", Offset = "0x16969A4", VA = "0x16969A4")]
		public static object Deserialize(TextReader text)
		{
			return null;
		}
	}
	[Token(Token = "0x20004A8")]
	public static class MathUtils
	{
		[Token(Token = "0x4000EFF")]
		public const float PI = (float)Math.PI;

		[Token(Token = "0x4000F00")]
		public const float PI2 = (float)Math.PI * 2f;

		[Token(Token = "0x4000F01")]
		public const float RadDeg = 180f / (float)Math.PI;

		[Token(Token = "0x4000F02")]
		public const float DegRad = (float)Math.PI / 180f;

		[Token(Token = "0x4000F03")]
		private const int SIN_BITS = 14;

		[Token(Token = "0x4000F04")]
		private const int SIN_MASK = 16383;

		[Token(Token = "0x4000F05")]
		private const int SIN_COUNT = 16384;

		[Token(Token = "0x4000F06")]
		private const float RadFull = (float)Math.PI * 2f;

		[Token(Token = "0x4000F07")]
		private const float DegFull = 360f;

		[Token(Token = "0x4000F08")]
		private const float RadToIndex = 8192f / (float)Math.PI;

		[Token(Token = "0x4000F09")]
		private const float DegToIndex = 45.511112f;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] sin;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static System.Random random;

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x174FD90", Offset = "0x174FD90", VA = "0x174FD90")]
		static MathUtils()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x174FF74", Offset = "0x174FF74", VA = "0x174FF74")]
		public static float Sin(float radians)
		{
			return default(float);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x1750020", Offset = "0x1750020", VA = "0x1750020")]
		public static float Cos(float radians)
		{
			return default(float);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x17500D8", Offset = "0x17500D8", VA = "0x17500D8")]
		public static float SinDeg(float degrees)
		{
			return default(float);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x1750184", Offset = "0x1750184", VA = "0x1750184")]
		public static float CosDeg(float degrees)
		{
			return default(float);
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x175023C", Offset = "0x175023C", VA = "0x175023C")]
		public static float Atan2(float y, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x175035C", Offset = "0x175035C", VA = "0x175035C")]
		public static float Clamp(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x1750378", Offset = "0x1750378", VA = "0x1750378")]
		public static float RandomTriangle(float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x17503F4", Offset = "0x17503F4", VA = "0x17503F4")]
		public static float RandomTriangle(float min, float max, float mode)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004A9")]
	public abstract class IInterpolation
	{
		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static IInterpolation Pow2;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static IInterpolation Pow2Out;

		[Token(Token = "0x60017C4")]
		protected abstract float Apply(float a);

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x169421C", Offset = "0x169421C", VA = "0x169421C")]
		public float Apply(float start, float end, float a)
		{
			return default(float);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x1694258", Offset = "0x1694258", VA = "0x1694258")]
		protected IInterpolation()
		{
		}
	}
	[Token(Token = "0x20004AA")]
	public class Pow : IInterpolation
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C7C", Offset = "0x8B3C7C")]
		private float <Power>k__BackingField;

		[Token(Token = "0x1700027D")]
		public float Power
		{
			[Token(Token = "0x60017C8")]
			[Address(RVA = "0x12C6CE4", Offset = "0x12C6CE4", VA = "0x12C6CE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFD8", Offset = "0x8BDFD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017C9")]
			[Address(RVA = "0x12C6CEC", Offset = "0x12C6CEC", VA = "0x12C6CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFE8", Offset = "0x8BDFE8")]
			set
			{
			}
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x12C6CF4", Offset = "0x12C6CF4", VA = "0x12C6CF4")]
		public Pow(float power)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x12C6D6C", Offset = "0x12C6D6C", VA = "0x12C6D6C", Slot = "4")]
		protected override float Apply(float a)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004AB")]
	public class PowOut : Pow
	{
		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x12C6E68", Offset = "0x12C6E68", VA = "0x12C6E68")]
		public PowOut(float power)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x12C6E6C", Offset = "0x12C6E6C", VA = "0x12C6E6C", Slot = "4")]
		protected override float Apply(float a)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004AC")]
	public class PathConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000F0F")]
		private const int NONE = -1;

		[Token(Token = "0x4000F10")]
		private const int BEFORE = -2;

		[Token(Token = "0x4000F11")]
		private const int AFTER = -3;

		[Token(Token = "0x4000F12")]
		private const float Epsilon = 1E-05f;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PathConstraintData data;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Slot target;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float position;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float spacing;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float rotateMix;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float translateMix;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal ExposedList<float> spaces;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal ExposedList<float> positions;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ExposedList<float> world;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ExposedList<float> curves;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal ExposedList<float> lengths;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float[] segments;

		[Token(Token = "0x1700027E")]
		public int Order
		{
			[Token(Token = "0x60017D6")]
			[Address(RVA = "0x12C3A5C", Offset = "0x12C3A5C", VA = "0x12C3A5C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700027F")]
		public float Position
		{
			[Token(Token = "0x60017D7")]
			[Address(RVA = "0x12C3A78", Offset = "0x12C3A78", VA = "0x12C3A78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017D8")]
			[Address(RVA = "0x12C3A80", Offset = "0x12C3A80", VA = "0x12C3A80")]
			set
			{
			}
		}

		[Token(Token = "0x17000280")]
		public float Spacing
		{
			[Token(Token = "0x60017D9")]
			[Address(RVA = "0x12C3A88", Offset = "0x12C3A88", VA = "0x12C3A88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017DA")]
			[Address(RVA = "0x12C3A90", Offset = "0x12C3A90", VA = "0x12C3A90")]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public float RotateMix
		{
			[Token(Token = "0x60017DB")]
			[Address(RVA = "0x12C3A98", Offset = "0x12C3A98", VA = "0x12C3A98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x12C3AA0", Offset = "0x12C3AA0", VA = "0x12C3AA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public float TranslateMix
		{
			[Token(Token = "0x60017DD")]
			[Address(RVA = "0x12C3AA8", Offset = "0x12C3AA8", VA = "0x12C3AA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x12C3AB0", Offset = "0x12C3AB0", VA = "0x12C3AB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000283")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x60017DF")]
			[Address(RVA = "0x12C3AB8", Offset = "0x12C3AB8", VA = "0x12C3AB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		public Slot Target
		{
			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x12C3AC0", Offset = "0x12C3AC0", VA = "0x12C3AC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017E1")]
			[Address(RVA = "0x12C3AC8", Offset = "0x12C3AC8", VA = "0x12C3AC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public PathConstraintData Data
		{
			[Token(Token = "0x60017E2")]
			[Address(RVA = "0x12C3AD0", Offset = "0x12C3AD0", VA = "0x12C3AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x12C157C", Offset = "0x12C157C", VA = "0x12C157C")]
		public PathConstraint(PathConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x12C1ADC", Offset = "0x12C1ADC", VA = "0x12C1ADC")]
		public PathConstraint(PathConstraint constraint, Skeleton skeleton)
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x12C1E94", Offset = "0x12C1E94", VA = "0x12C1E94")]
		public void Apply()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x12C1E98", Offset = "0x12C1E98", VA = "0x12C1E98", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x12C26B0", Offset = "0x12C26B0", VA = "0x12C26B0")]
		private float[] ComputeWorldPositions(PathAttachment path, int spacesCount, bool tangents, bool percentPosition, bool percentSpacing)
		{
			return null;
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x12C34F8", Offset = "0x12C34F8", VA = "0x12C34F8")]
		private static void AddBeforePosition(float p, float[] temp, int i, float[] output, int o)
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x12C3674", Offset = "0x12C3674", VA = "0x12C3674")]
		private static void AddAfterPosition(float p, float[] temp, int i, float[] output, int o)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x12C37F0", Offset = "0x12C37F0", VA = "0x12C37F0")]
		private static void AddCurvePosition(float p, float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2, float[] output, int o, bool tangents)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x12C3AD8", Offset = "0x12C3AD8", VA = "0x12C3AD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004AD")]
	public class PathConstraintData
	{
		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int order;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal SlotData target;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal PositionMode positionMode;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal SpacingMode spacingMode;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal RotateMode rotateMode;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float offsetRotation;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float position;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float spacing;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float rotateMix;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float translateMix;

		[Token(Token = "0x17000286")]
		public string Name
		{
			[Token(Token = "0x60017E4")]
			[Address(RVA = "0x12C3AF4", Offset = "0x12C3AF4", VA = "0x12C3AF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000287")]
		public int Order
		{
			[Token(Token = "0x60017E5")]
			[Address(RVA = "0x12C3AFC", Offset = "0x12C3AFC", VA = "0x12C3AFC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017E6")]
			[Address(RVA = "0x12C3B04", Offset = "0x12C3B04", VA = "0x12C3B04")]
			set
			{
			}
		}

		[Token(Token = "0x17000288")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x60017E7")]
			[Address(RVA = "0x12C3B0C", Offset = "0x12C3B0C", VA = "0x12C3B0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000289")]
		public SlotData Target
		{
			[Token(Token = "0x60017E8")]
			[Address(RVA = "0x12C3B14", Offset = "0x12C3B14", VA = "0x12C3B14")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017E9")]
			[Address(RVA = "0x12C3B1C", Offset = "0x12C3B1C", VA = "0x12C3B1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public PositionMode PositionMode
		{
			[Token(Token = "0x60017EA")]
			[Address(RVA = "0x12C3B24", Offset = "0x12C3B24", VA = "0x12C3B24")]
			get
			{
				return default(PositionMode);
			}
			[Token(Token = "0x60017EB")]
			[Address(RVA = "0x12C3B2C", Offset = "0x12C3B2C", VA = "0x12C3B2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028B")]
		public SpacingMode SpacingMode
		{
			[Token(Token = "0x60017EC")]
			[Address(RVA = "0x12C3B34", Offset = "0x12C3B34", VA = "0x12C3B34")]
			get
			{
				return default(SpacingMode);
			}
			[Token(Token = "0x60017ED")]
			[Address(RVA = "0x12C3B3C", Offset = "0x12C3B3C", VA = "0x12C3B3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028C")]
		public RotateMode RotateMode
		{
			[Token(Token = "0x60017EE")]
			[Address(RVA = "0x12C3B44", Offset = "0x12C3B44", VA = "0x12C3B44")]
			get
			{
				return default(RotateMode);
			}
			[Token(Token = "0x60017EF")]
			[Address(RVA = "0x12C3B4C", Offset = "0x12C3B4C", VA = "0x12C3B4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public float OffsetRotation
		{
			[Token(Token = "0x60017F0")]
			[Address(RVA = "0x12C3B54", Offset = "0x12C3B54", VA = "0x12C3B54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F1")]
			[Address(RVA = "0x12C3B5C", Offset = "0x12C3B5C", VA = "0x12C3B5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public float Position
		{
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0x12C3B64", Offset = "0x12C3B64", VA = "0x12C3B64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F3")]
			[Address(RVA = "0x12C3B6C", Offset = "0x12C3B6C", VA = "0x12C3B6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028F")]
		public float Spacing
		{
			[Token(Token = "0x60017F4")]
			[Address(RVA = "0x12C3B74", Offset = "0x12C3B74", VA = "0x12C3B74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F5")]
			[Address(RVA = "0x12C3B7C", Offset = "0x12C3B7C", VA = "0x12C3B7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000290")]
		public float RotateMix
		{
			[Token(Token = "0x60017F6")]
			[Address(RVA = "0x12C3B84", Offset = "0x12C3B84", VA = "0x12C3B84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x12C3B8C", Offset = "0x12C3B8C", VA = "0x12C3B8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public float TranslateMix
		{
			[Token(Token = "0x60017F8")]
			[Address(RVA = "0x12C3B94", Offset = "0x12C3B94", VA = "0x12C3B94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0x12C3B9C", Offset = "0x12C3B9C", VA = "0x12C3B9C")]
			set
			{
			}
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x12C3BA4", Offset = "0x12C3BA4", VA = "0x12C3BA4")]
		public PathConstraintData(string name)
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x12C3C90", Offset = "0x12C3C90", VA = "0x12C3C90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004AE")]
	public enum PositionMode
	{
		[Token(Token = "0x4000F2D")]
		Fixed,
		[Token(Token = "0x4000F2E")]
		Percent
	}
	[Token(Token = "0x20004AF")]
	public enum SpacingMode
	{
		[Token(Token = "0x4000F30")]
		Length,
		[Token(Token = "0x4000F31")]
		Fixed,
		[Token(Token = "0x4000F32")]
		Percent
	}
	[Token(Token = "0x20004B0")]
	public enum RotateMode
	{
		[Token(Token = "0x4000F34")]
		Tangent,
		[Token(Token = "0x4000F35")]
		Chain,
		[Token(Token = "0x4000F36")]
		ChainScale
	}
	[Token(Token = "0x20004B1")]
	public class Skeleton
	{
		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SkeletonData data;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<Slot> slots;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<Slot> drawOrder;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal ExposedList<IkConstraint> ikConstraints;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal ExposedList<TransformConstraint> transformConstraints;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal ExposedList<PathConstraint> pathConstraints;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ExposedList<IUpdatable> updateCache;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ExposedList<Bone> updateCacheReset;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Skin skin;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float r;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float g;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal float b;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal float a;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal float time;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal float scaleX;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal float scaleY;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal float x;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal float y;

		[Token(Token = "0x17000292")]
		public SkeletonData Data
		{
			[Token(Token = "0x60017FC")]
			[Address(RVA = "0x12CC7C0", Offset = "0x12CC7C0", VA = "0x12CC7C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000293")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x60017FD")]
			[Address(RVA = "0x12CC7C8", Offset = "0x12CC7C8", VA = "0x12CC7C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000294")]
		public ExposedList<IUpdatable> UpdateCacheList
		{
			[Token(Token = "0x60017FE")]
			[Address(RVA = "0x12CC7D0", Offset = "0x12CC7D0", VA = "0x12CC7D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000295")]
		public ExposedList<Slot> Slots
		{
			[Token(Token = "0x60017FF")]
			[Address(RVA = "0x12CC7D8", Offset = "0x12CC7D8", VA = "0x12CC7D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000296")]
		public ExposedList<Slot> DrawOrder
		{
			[Token(Token = "0x6001800")]
			[Address(RVA = "0x12CC7E0", Offset = "0x12CC7E0", VA = "0x12CC7E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000297")]
		public ExposedList<IkConstraint> IkConstraints
		{
			[Token(Token = "0x6001801")]
			[Address(RVA = "0x12CC7E8", Offset = "0x12CC7E8", VA = "0x12CC7E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000298")]
		public ExposedList<PathConstraint> PathConstraints
		{
			[Token(Token = "0x6001802")]
			[Address(RVA = "0x12CC7F0", Offset = "0x12CC7F0", VA = "0x12CC7F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000299")]
		public ExposedList<TransformConstraint> TransformConstraints
		{
			[Token(Token = "0x6001803")]
			[Address(RVA = "0x12CC7F8", Offset = "0x12CC7F8", VA = "0x12CC7F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public Skin Skin
		{
			[Token(Token = "0x6001804")]
			[Address(RVA = "0x12CC800", Offset = "0x12CC800", VA = "0x12CC800")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001805")]
			[Address(RVA = "0x12CC808", Offset = "0x12CC808", VA = "0x12CC808")]
			set
			{
			}
		}

		[Token(Token = "0x1700029B")]
		public float R
		{
			[Token(Token = "0x6001806")]
			[Address(RVA = "0x12CC810", Offset = "0x12CC810", VA = "0x12CC810")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001807")]
			[Address(RVA = "0x12CC818", Offset = "0x12CC818", VA = "0x12CC818")]
			set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public float G
		{
			[Token(Token = "0x6001808")]
			[Address(RVA = "0x12CC820", Offset = "0x12CC820", VA = "0x12CC820")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001809")]
			[Address(RVA = "0x12CC828", Offset = "0x12CC828", VA = "0x12CC828")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public float B
		{
			[Token(Token = "0x600180A")]
			[Address(RVA = "0x12CC830", Offset = "0x12CC830", VA = "0x12CC830")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600180B")]
			[Address(RVA = "0x12CC838", Offset = "0x12CC838", VA = "0x12CC838")]
			set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public float A
		{
			[Token(Token = "0x600180C")]
			[Address(RVA = "0x12CC840", Offset = "0x12CC840", VA = "0x12CC840")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600180D")]
			[Address(RVA = "0x12CC848", Offset = "0x12CC848", VA = "0x12CC848")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public float Time
		{
			[Token(Token = "0x600180E")]
			[Address(RVA = "0x12CC850", Offset = "0x12CC850", VA = "0x12CC850")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600180F")]
			[Address(RVA = "0x12CC858", Offset = "0x12CC858", VA = "0x12CC858")]
			set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public float X
		{
			[Token(Token = "0x6001810")]
			[Address(RVA = "0x12CC860", Offset = "0x12CC860", VA = "0x12CC860")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001811")]
			[Address(RVA = "0x12CC868", Offset = "0x12CC868", VA = "0x12CC868")]
			set
			{
			}
		}

		[Token(Token = "0x170002A1")]
		public float Y
		{
			[Token(Token = "0x6001812")]
			[Address(RVA = "0x12CC870", Offset = "0x12CC870", VA = "0x12CC870")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001813")]
			[Address(RVA = "0x12CC878", Offset = "0x12CC878", VA = "0x12CC878")]
			set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public float ScaleX
		{
			[Token(Token = "0x6001814")]
			[Address(RVA = "0x12CC880", Offset = "0x12CC880", VA = "0x12CC880")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001815")]
			[Address(RVA = "0x12CC888", Offset = "0x12CC888", VA = "0x12CC888")]
			set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public float ScaleY
		{
			[Token(Token = "0x6001816")]
			[Address(RVA = "0x12CC890", Offset = "0x12CC890", VA = "0x12CC890")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001817")]
			[Address(RVA = "0x12CC898", Offset = "0x12CC898", VA = "0x12CC898")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8BFD7C", Offset = "0x8BFD7C")]
		public bool FlipX
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0x12CC8A0", Offset = "0x12CC8A0", VA = "0x12CC8A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001819")]
			[Address(RVA = "0x12CC8B0", Offset = "0x12CC8B0", VA = "0x12CC8B0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8BFDB4", Offset = "0x8BFDB4")]
		public bool FlipY
		{
			[Token(Token = "0x600181A")]
			[Address(RVA = "0x12CC8D8", Offset = "0x12CC8D8", VA = "0x12CC8D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600181B")]
			[Address(RVA = "0x12CC8E8", Offset = "0x12CC8E8", VA = "0x12CC8E8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A6")]
		public Bone RootBone
		{
			[Token(Token = "0x600181C")]
			[Address(RVA = "0x12CC910", Offset = "0x12CC910", VA = "0x12CC910")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x12CC95C", Offset = "0x12CC95C", VA = "0x12CC95C")]
		public Skeleton(SkeletonData data)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x12CD4D0", Offset = "0x12CD4D0", VA = "0x12CD4D0")]
		public void UpdateCache()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x12CD8C0", Offset = "0x12CD8C0", VA = "0x12CD8C0")]
		private void SortIkConstraint(IkConstraint constraint)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x12CDC3C", Offset = "0x12CDC3C", VA = "0x12CDC3C")]
		private void SortPathConstraint(PathConstraint constraint)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x12CDA38", Offset = "0x12CDA38", VA = "0x12CDA38")]
		private void SortTransformConstraint(TransformConstraint constraint)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x12CDFD0", Offset = "0x12CDFD0", VA = "0x12CDFD0")]
		private void SortPathConstraintAttachment(Skin skin, int slotIndex, Bone slotBone)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x12CE130", Offset = "0x12CE130", VA = "0x12CE130")]
		private void SortPathConstraintAttachment(Attachment attachment, Bone slotBone)
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x12CDEAC", Offset = "0x12CDEAC", VA = "0x12CDEAC")]
		private void SortBone(Bone bone)
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x12CDF44", Offset = "0x12CDF44", VA = "0x12CDF44")]
		private static void SortReset(ExposedList<Bone> bones)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x12CD754", Offset = "0x12CD754", VA = "0x12CD754")]
		public void UpdateWorldTransform()
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x12CE2AC", Offset = "0x12CE2AC", VA = "0x12CE2AC")]
		public void UpdateWorldTransform(Bone parent)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x12CE590", Offset = "0x12CE590", VA = "0x12CE590")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x12CE5B4", Offset = "0x12CE5B4", VA = "0x12CE5B4")]
		public void SetBonesToSetupPose()
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x12CE780", Offset = "0x12CE780", VA = "0x12CE780")]
		public void SetSlotsToSetupPose()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x12C18D4", Offset = "0x12C18D4", VA = "0x12C18D4")]
		public Bone FindBone(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x12CE8A0", Offset = "0x12CE8A0", VA = "0x12CE8A0")]
		public int FindBoneIndex(string boneName)
		{
			return default(int);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x12C19D8", Offset = "0x12C19D8", VA = "0x12C19D8")]
		public Slot FindSlot(string slotName)
		{
			return null;
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x12C6770", Offset = "0x12C6770", VA = "0x12C6770")]
		public int FindSlotIndex(string slotName)
		{
			return default(int);
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x12CE9A4", Offset = "0x12CE9A4", VA = "0x12CE9A4")]
		public void SetSkin(string skinName)
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x12CEA4C", Offset = "0x12CEA4C", VA = "0x12CEA4C")]
		public void SetSkin(Skin newSkin)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x12CEB28", Offset = "0x12CEB28", VA = "0x12CEB28")]
		public Attachment GetAttachment(string slotName, string attachmentName)
		{
			return null;
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x12C6878", Offset = "0x12C6878", VA = "0x12C6878")]
		public Attachment GetAttachment(int slotIndex, string attachmentName)
		{
			return null;
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x12CEB68", Offset = "0x12CEB68", VA = "0x12CEB68")]
		public void SetAttachment(string slotName, string attachmentName)
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x12CED28", Offset = "0x12CED28", VA = "0x12CED28")]
		public IkConstraint FindIkConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x12CEE2C", Offset = "0x12CEE2C", VA = "0x12CEE2C")]
		public TransformConstraint FindTransformConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x12CEF30", Offset = "0x12CEF30", VA = "0x12CEF30")]
		public PathConstraint FindPathConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x12CF038", Offset = "0x12CF038", VA = "0x12CF038")]
		public void Update(float delta)
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x12CF048", Offset = "0x12CF048", VA = "0x12CF048")]
		public void GetBounds(out float x, out float y, out float width, out float height, ref float[] vertexBuffer)
		{
		}
	}
	[Token(Token = "0x20004B2")]
	public class SkeletonBinary
	{
		[Token(Token = "0x20004B3")]
		internal class Vertices
		{
			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] bones;

			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float[] vertices;

			[Token(Token = "0x600184F")]
			[Address(RVA = "0x1070334", Offset = "0x1070334", VA = "0x1070334")]
			public Vertices()
			{
			}
		}

		[Token(Token = "0x4000F4A")]
		public const int BONE_ROTATE = 0;

		[Token(Token = "0x4000F4B")]
		public const int BONE_TRANSLATE = 1;

		[Token(Token = "0x4000F4C")]
		public const int BONE_SCALE = 2;

		[Token(Token = "0x4000F4D")]
		public const int BONE_SHEAR = 3;

		[Token(Token = "0x4000F4E")]
		public const int SLOT_ATTACHMENT = 0;

		[Token(Token = "0x4000F4F")]
		public const int SLOT_COLOR = 1;

		[Token(Token = "0x4000F50")]
		public const int SLOT_TWO_COLOR = 2;

		[Token(Token = "0x4000F51")]
		public const int PATH_POSITION = 0;

		[Token(Token = "0x4000F52")]
		public const int PATH_SPACING = 1;

		[Token(Token = "0x4000F53")]
		public const int PATH_MIX = 2;

		[Token(Token = "0x4000F54")]
		public const int CURVE_LINEAR = 0;

		[Token(Token = "0x4000F55")]
		public const int CURVE_STEPPED = 1;

		[Token(Token = "0x4000F56")]
		public const int CURVE_BEZIER = 2;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C8C", Offset = "0x8B3C8C")]
		private float <Scale>k__BackingField;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AttachmentLoader attachmentLoader;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] buffer;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SkeletonJson.LinkedMesh> linkedMeshes;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TransformMode[] TransformModeValues;

		[Token(Token = "0x170002A7")]
		public float Scale
		{
			[Token(Token = "0x6001839")]
			[Address(RVA = "0x12CFC70", Offset = "0x12CFC70", VA = "0x12CFC70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BDFF8", Offset = "0x8BDFF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600183A")]
			[Address(RVA = "0x12CFC78", Offset = "0x12CFC78", VA = "0x12CFC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE008", Offset = "0x8BE008")]
			set
			{
			}
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x12CFC80", Offset = "0x12CFC80", VA = "0x12CFC80")]
		public SkeletonBinary(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x12CFCF0", Offset = "0x12CFCF0", VA = "0x12CFCF0")]
		public SkeletonBinary(AttachmentLoader attachmentLoader)
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x12CFDF4", Offset = "0x12CFDF4", VA = "0x12CFDF4")]
		public SkeletonData ReadSkeletonData(string path)
		{
			return null;
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x12D13A8", Offset = "0x12D13A8", VA = "0x12D13A8")]
		public static string GetVersionString(Stream input)
		{
			return null;
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x12CFFB4", Offset = "0x12CFFB4", VA = "0x12CFFB4")]
		public SkeletonData ReadSkeletonData(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0x12D1BF4", Offset = "0x12D1BF4", VA = "0x12D1BF4")]
		private Skin ReadSkin(Stream input, SkeletonData skeletonData, string skinName, bool nonessential)
		{
			return null;
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x12D39B4", Offset = "0x12D39B4", VA = "0x12D39B4")]
		private Attachment ReadAttachment(Stream input, SkeletonData skeletonData, Skin skin, int slotIndex, string attachmentName, bool nonessential)
		{
			return null;
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x12D45E4", Offset = "0x12D45E4", VA = "0x12D45E4")]
		private Vertices ReadVertices(Stream input, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x12D48F8", Offset = "0x12D48F8", VA = "0x12D48F8")]
		private float[] ReadFloatArray(Stream input, int n, float scale)
		{
			return null;
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x12D4A18", Offset = "0x12D4A18", VA = "0x12D4A18")]
		private int[] ReadShortArray(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x12D1DA4", Offset = "0x12D1DA4", VA = "0x12D1DA4")]
		private void ReadAnimation(string name, Stream input, SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x12D4B38", Offset = "0x12D4B38", VA = "0x12D4B38")]
		private void ReadCurve(Stream input, int frameIndex, CurveTimeline timeline)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x12D1B88", Offset = "0x12D1B88", VA = "0x12D1B88")]
		private static sbyte ReadSByte(Stream input)
		{
			return default(sbyte);
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x12D1AC4", Offset = "0x12D1AC4", VA = "0x12D1AC4")]
		private static bool ReadBoolean(Stream input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x12D198C", Offset = "0x12D198C", VA = "0x12D198C")]
		private float ReadFloat(Stream input)
		{
			return default(float);
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x12D1AF4", Offset = "0x12D1AF4", VA = "0x12D1AF4")]
		private static int ReadInt(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x12D16DC", Offset = "0x12D16DC", VA = "0x12D16DC")]
		private static int ReadVarint(Stream input, bool optimizePositive)
		{
			return default(int);
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x12D1850", Offset = "0x12D1850", VA = "0x12D1850")]
		private string ReadString(Stream input)
		{
			return null;
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x12D17A4", Offset = "0x12D17A4", VA = "0x12D17A4")]
		private static void ReadFully(Stream input, byte[] buffer, int offset, int length)
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public class SkeletonBounds
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ExposedList<Polygon> polygonPool;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float minX;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float minY;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float maxX;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float maxY;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3C9C", Offset = "0x8B3C9C")]
		private ExposedList<BoundingBoxAttachment> <BoundingBoxes>k__BackingField;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3CAC", Offset = "0x8B3CAC")]
		private ExposedList<Polygon> <Polygons>k__BackingField;

		[Token(Token = "0x170002A8")]
		public ExposedList<BoundingBoxAttachment> BoundingBoxes
		{
			[Token(Token = "0x6001850")]
			[Address(RVA = "0x15D8A80", Offset = "0x15D8A80", VA = "0x15D8A80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE018", Offset = "0x8BE018")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001851")]
			[Address(RVA = "0x15D8A88", Offset = "0x15D8A88", VA = "0x15D8A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE028", Offset = "0x8BE028")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A9")]
		public ExposedList<Polygon> Polygons
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0x15D8A90", Offset = "0x15D8A90", VA = "0x15D8A90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE038", Offset = "0x8BE038")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001853")]
			[Address(RVA = "0x15D8A98", Offset = "0x15D8A98", VA = "0x15D8A98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE048", Offset = "0x8BE048")]
			private set
			{
			}
		}

		[Token(Token = "0x170002AA")]
		public float MinX
		{
			[Token(Token = "0x6001854")]
			[Address(RVA = "0x15D8AA0", Offset = "0x15D8AA0", VA = "0x15D8AA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001855")]
			[Address(RVA = "0x15D8AA8", Offset = "0x15D8AA8", VA = "0x15D8AA8")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public float MinY
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0x15D8AB0", Offset = "0x15D8AB0", VA = "0x15D8AB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001857")]
			[Address(RVA = "0x15D8AB8", Offset = "0x15D8AB8", VA = "0x15D8AB8")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public float MaxX
		{
			[Token(Token = "0x6001858")]
			[Address(RVA = "0x15D8AC0", Offset = "0x15D8AC0", VA = "0x15D8AC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001859")]
			[Address(RVA = "0x15D8AC8", Offset = "0x15D8AC8", VA = "0x15D8AC8")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public float MaxY
		{
			[Token(Token = "0x600185A")]
			[Address(RVA = "0x15D8AD0", Offset = "0x15D8AD0", VA = "0x15D8AD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600185B")]
			[Address(RVA = "0x15D8AD8", Offset = "0x15D8AD8", VA = "0x15D8AD8")]
			set
			{
			}
		}

		[Token(Token = "0x170002AE")]
		public float Width
		{
			[Token(Token = "0x600185C")]
			[Address(RVA = "0x15D8AE0", Offset = "0x15D8AE0", VA = "0x15D8AE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002AF")]
		public float Height
		{
			[Token(Token = "0x600185D")]
			[Address(RVA = "0x15D8AF0", Offset = "0x15D8AF0", VA = "0x15D8AF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x15D8B00", Offset = "0x15D8B00", VA = "0x15D8B00")]
		public SkeletonBounds()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x15D8BDC", Offset = "0x15D8BDC", VA = "0x15D8BDC")]
		public void Update(Skeleton skeleton, bool updateAabb)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x15D8ED4", Offset = "0x15D8ED4", VA = "0x15D8ED4")]
		private void AabbCompute()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x15D9084", Offset = "0x15D9084", VA = "0x15D9084")]
		public bool AabbContainsPoint(float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x15D90C0", Offset = "0x15D90C0", VA = "0x15D90C0")]
		public bool AabbIntersectsSegment(float x1, float y1, float x2, float y2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x15D919C", Offset = "0x15D919C", VA = "0x15D919C")]
		public bool AabbIntersectsSkeleton(SkeletonBounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x15D91F8", Offset = "0x15D91F8", VA = "0x15D91F8")]
		public bool ContainsPoint(Polygon polygon, float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x15D92EC", Offset = "0x15D92EC", VA = "0x15D92EC")]
		public BoundingBoxAttachment ContainsPoint(float x, float y)
		{
			return null;
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x15D93AC", Offset = "0x15D93AC", VA = "0x15D93AC")]
		public BoundingBoxAttachment IntersectsSegment(float x1, float y1, float x2, float y2)
		{
			return null;
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x15D9484", Offset = "0x15D9484", VA = "0x15D9484")]
		public bool IntersectsSegment(Polygon polygon, float x1, float y1, float x2, float y2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x15D9600", Offset = "0x15D9600", VA = "0x15D9600")]
		public Polygon GetPolygon(BoundingBoxAttachment attachment)
		{
			return null;
		}
	}
	[Token(Token = "0x20004B5")]
	public class Polygon
	{
		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3CBC", Offset = "0x8B3CBC")]
		private float[] <Vertices>k__BackingField;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3CCC", Offset = "0x8B3CCC")]
		private int <Count>k__BackingField;

		[Token(Token = "0x170002B0")]
		public float[] Vertices
		{
			[Token(Token = "0x6001869")]
			[Address(RVA = "0x12C6C64", Offset = "0x12C6C64", VA = "0x12C6C64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE058", Offset = "0x8BE058")]
			get
			{
				return null;
			}
			[Token(Token = "0x600186A")]
			[Address(RVA = "0x12C6C6C", Offset = "0x12C6C6C", VA = "0x12C6C6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE068", Offset = "0x8BE068")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public int Count
		{
			[Token(Token = "0x600186B")]
			[Address(RVA = "0x12C6C74", Offset = "0x12C6C74", VA = "0x12C6C74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE078", Offset = "0x8BE078")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600186C")]
			[Address(RVA = "0x12C6C7C", Offset = "0x12C6C7C", VA = "0x12C6C7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE088", Offset = "0x8BE088")]
			set
			{
			}
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x12C6C84", Offset = "0x12C6C84", VA = "0x12C6C84")]
		public Polygon()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public class SkeletonClipping
	{
		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly Triangulator triangulator;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly ExposedList<float> clippingPolygon;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal readonly ExposedList<float> clipOutput;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal readonly ExposedList<float> clippedVertices;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal readonly ExposedList<int> clippedTriangles;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal readonly ExposedList<float> clippedUVs;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal readonly ExposedList<float> scratch;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ClippingAttachment clipAttachment;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ExposedList<ExposedList<float>> clippingPolygons;

		[Token(Token = "0x170002B2")]
		public ExposedList<float> ClippedVertices
		{
			[Token(Token = "0x600186E")]
			[Address(RVA = "0x15D96A8", Offset = "0x15D96A8", VA = "0x15D96A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B3")]
		public ExposedList<int> ClippedTriangles
		{
			[Token(Token = "0x600186F")]
			[Address(RVA = "0x15D96B0", Offset = "0x15D96B0", VA = "0x15D96B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		public ExposedList<float> ClippedUVs
		{
			[Token(Token = "0x6001870")]
			[Address(RVA = "0x15D96B8", Offset = "0x15D96B8", VA = "0x15D96B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B5")]
		public bool IsClipping
		{
			[Token(Token = "0x6001871")]
			[Address(RVA = "0x15D96C0", Offset = "0x15D96C0", VA = "0x15D96C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x15D96D0", Offset = "0x15D96D0", VA = "0x15D96D0")]
		public int ClipStart(Slot slot, ClippingAttachment clip)
		{
			return default(int);
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x15D9AB8", Offset = "0x15D9AB8", VA = "0x15D9AB8")]
		public void ClipEnd(Slot slot)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x15D9AE8", Offset = "0x15D9AE8", VA = "0x15D9AE8")]
		public void ClipEnd()
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x15D9B98", Offset = "0x15D9B98", VA = "0x15D9B98")]
		public void ClipTriangles(float[] vertices, int verticesLength, int[] triangles, int trianglesLength, float[] uvs)
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x15DA340", Offset = "0x15DA340", VA = "0x15DA340")]
		internal bool Clip(float x1, float y1, float x2, float y2, float x3, float y3, ExposedList<float> clippingArea, ExposedList<float> output)
		{
			return default(bool);
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x15D9948", Offset = "0x15D9948", VA = "0x15D9948")]
		public static void MakeClockwise(ExposedList<float> polygon)
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x15DA978", Offset = "0x15DA978", VA = "0x15DA978")]
		public SkeletonClipping()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public class SkeletonData
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<SlotData> slots;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<Skin> skins;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Skin defaultSkin;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal ExposedList<EventData> events;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal ExposedList<Animation> animations;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ExposedList<IkConstraintData> ikConstraints;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ExposedList<TransformConstraintData> transformConstraints;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal ExposedList<PathConstraintData> pathConstraints;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float width;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float height;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal string version;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal string hash;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal float fps;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal string imagesPath;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal string audioPath;

		[Token(Token = "0x170002B6")]
		public string Name
		{
			[Token(Token = "0x6001879")]
			[Address(RVA = "0x15DAAF0", Offset = "0x15DAAF0", VA = "0x15DAAF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600187A")]
			[Address(RVA = "0x15DAAF8", Offset = "0x15DAAF8", VA = "0x15DAAF8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x600187B")]
			[Address(RVA = "0x15DAB00", Offset = "0x15DAB00", VA = "0x15DAB00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B8")]
		public ExposedList<SlotData> Slots
		{
			[Token(Token = "0x600187C")]
			[Address(RVA = "0x15DAB08", Offset = "0x15DAB08", VA = "0x15DAB08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B9")]
		public ExposedList<Skin> Skins
		{
			[Token(Token = "0x600187D")]
			[Address(RVA = "0x15DAB10", Offset = "0x15DAB10", VA = "0x15DAB10")]
			get
			{
				return null;
			}
			[Token(Token = "0x600187E")]
			[Address(RVA = "0x15DAB18", Offset = "0x15DAB18", VA = "0x15DAB18")]
			set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public Skin DefaultSkin
		{
			[Token(Token = "0x600187F")]
			[Address(RVA = "0x15DAB20", Offset = "0x15DAB20", VA = "0x15DAB20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001880")]
			[Address(RVA = "0x15DAB28", Offset = "0x15DAB28", VA = "0x15DAB28")]
			set
			{
			}
		}

		[Token(Token = "0x170002BB")]
		public ExposedList<EventData> Events
		{
			[Token(Token = "0x6001881")]
			[Address(RVA = "0x15DAB30", Offset = "0x15DAB30", VA = "0x15DAB30")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001882")]
			[Address(RVA = "0x15DAB38", Offset = "0x15DAB38", VA = "0x15DAB38")]
			set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public ExposedList<Animation> Animations
		{
			[Token(Token = "0x6001883")]
			[Address(RVA = "0x15DAB40", Offset = "0x15DAB40", VA = "0x15DAB40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001884")]
			[Address(RVA = "0x15DAB48", Offset = "0x15DAB48", VA = "0x15DAB48")]
			set
			{
			}
		}

		[Token(Token = "0x170002BD")]
		public ExposedList<IkConstraintData> IkConstraints
		{
			[Token(Token = "0x6001885")]
			[Address(RVA = "0x15DAB50", Offset = "0x15DAB50", VA = "0x15DAB50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001886")]
			[Address(RVA = "0x15DAB58", Offset = "0x15DAB58", VA = "0x15DAB58")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public ExposedList<TransformConstraintData> TransformConstraints
		{
			[Token(Token = "0x6001887")]
			[Address(RVA = "0x15DAB60", Offset = "0x15DAB60", VA = "0x15DAB60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001888")]
			[Address(RVA = "0x15DAB68", Offset = "0x15DAB68", VA = "0x15DAB68")]
			set
			{
			}
		}

		[Token(Token = "0x170002BF")]
		public ExposedList<PathConstraintData> PathConstraints
		{
			[Token(Token = "0x6001889")]
			[Address(RVA = "0x15DAB70", Offset = "0x15DAB70", VA = "0x15DAB70")]
			get
			{
				return null;
			}
			[Token(Token = "0x600188A")]
			[Address(RVA = "0x15DAB78", Offset = "0x15DAB78", VA = "0x15DAB78")]
			set
			{
			}
		}

		[Token(Token = "0x170002C0")]
		public float Width
		{
			[Token(Token = "0x600188B")]
			[Address(RVA = "0x15DAB80", Offset = "0x15DAB80", VA = "0x15DAB80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600188C")]
			[Address(RVA = "0x15DAB88", Offset = "0x15DAB88", VA = "0x15DAB88")]
			set
			{
			}
		}

		[Token(Token = "0x170002C1")]
		public float Height
		{
			[Token(Token = "0x600188D")]
			[Address(RVA = "0x15DAB90", Offset = "0x15DAB90", VA = "0x15DAB90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600188E")]
			[Address(RVA = "0x15DAB98", Offset = "0x15DAB98", VA = "0x15DAB98")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public string Version
		{
			[Token(Token = "0x600188F")]
			[Address(RVA = "0x15DABA0", Offset = "0x15DABA0", VA = "0x15DABA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001890")]
			[Address(RVA = "0x15DABA8", Offset = "0x15DABA8", VA = "0x15DABA8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public string Hash
		{
			[Token(Token = "0x6001891")]
			[Address(RVA = "0x15DABB0", Offset = "0x15DABB0", VA = "0x15DABB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001892")]
			[Address(RVA = "0x15DABB8", Offset = "0x15DABB8", VA = "0x15DABB8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public string ImagesPath
		{
			[Token(Token = "0x6001893")]
			[Address(RVA = "0x15DABC0", Offset = "0x15DABC0", VA = "0x15DABC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001894")]
			[Address(RVA = "0x15DABC8", Offset = "0x15DABC8", VA = "0x15DABC8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public string AudioPath
		{
			[Token(Token = "0x6001895")]
			[Address(RVA = "0x15DABD0", Offset = "0x15DABD0", VA = "0x15DABD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001896")]
			[Address(RVA = "0x15DABD8", Offset = "0x15DABD8", VA = "0x15DABD8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public float Fps
		{
			[Token(Token = "0x6001897")]
			[Address(RVA = "0x15DABE0", Offset = "0x15DABE0", VA = "0x15DABE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001898")]
			[Address(RVA = "0x15DABE8", Offset = "0x15DABE8", VA = "0x15DABE8")]
			set
			{
			}
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x15DABF0", Offset = "0x15DABF0", VA = "0x15DABF0")]
		public BoneData FindBone(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x15DACEC", Offset = "0x15DACEC", VA = "0x15DACEC")]
		public int FindBoneIndex(string boneName)
		{
			return default(int);
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x15DADE8", Offset = "0x15DADE8", VA = "0x15DADE8")]
		public SlotData FindSlot(string slotName)
		{
			return null;
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x15DAEE4", Offset = "0x15DAEE4", VA = "0x15DAEE4")]
		public int FindSlotIndex(string slotName)
		{
			return default(int);
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x15DAFD8", Offset = "0x15DAFD8", VA = "0x15DAFD8")]
		public Skin FindSkin(string skinName)
		{
			return null;
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x15DB188", Offset = "0x15DB188", VA = "0x15DB188")]
		public EventData FindEvent(string eventDataName)
		{
			return null;
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x15DB338", Offset = "0x15DB338", VA = "0x15DB338")]
		public Animation FindAnimation(string animationName)
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x15DB434", Offset = "0x15DB434", VA = "0x15DB434")]
		public IkConstraintData FindIkConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x15DB530", Offset = "0x15DB530", VA = "0x15DB530")]
		public TransformConstraintData FindTransformConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x15DB62C", Offset = "0x15DB62C", VA = "0x15DB62C")]
		public PathConstraintData FindPathConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x15DB72C", Offset = "0x15DB72C", VA = "0x15DB72C")]
		public int FindPathConstraintIndex(string pathConstraintName)
		{
			return default(int);
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x15DB824", Offset = "0x15DB824", VA = "0x15DB824", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x15DB83C", Offset = "0x15DB83C", VA = "0x15DB83C")]
		public SkeletonData()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public class SkeletonJson
	{
		[Token(Token = "0x20004B9")]
		internal class LinkedMesh
		{
			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string parent;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal string skin;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int slotIndex;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MeshAttachment mesh;

			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x10707FC", Offset = "0x10707FC", VA = "0x10707FC")]
			public LinkedMesh(MeshAttachment mesh, string skin, int slotIndex, string parent)
			{
			}
		}

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B3CDC", Offset = "0x8B3CDC")]
		private float <Scale>k__BackingField;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AttachmentLoader attachmentLoader;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<LinkedMesh> linkedMeshes;

		[Token(Token = "0x170002C7")]
		public float Scale
		{
			[Token(Token = "0x60018A6")]
			[Address(RVA = "0x15E3C24", Offset = "0x15E3C24", VA = "0x15E3C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE098", Offset = "0x8BE098")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018A7")]
			[Address(RVA = "0x15E3C2C", Offset = "0x15E3C2C", VA = "0x15E3C2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE0A8", Offset = "0x8BE0A8")]
			set
			{
			}
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x15E3C34", Offset = "0x15E3C34", VA = "0x15E3C34")]
		public SkeletonJson(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x15DC730", Offset = "0x15DC730", VA = "0x15DC730")]
		public SkeletonJson(AttachmentLoader attachmentLoader)
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x15E3CA4", Offset = "0x15E3CA4", VA = "0x15E3CA4")]
		public SkeletonData ReadSkeletonData(string path)
		{
			return null;
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x15DC824", Offset = "0x15DC824", VA = "0x15DC824")]
		public SkeletonData ReadSkeletonData(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x15E4348", Offset = "0x15E4348", VA = "0x15E4348")]
		private Attachment ReadAttachment(Dictionary<string, object> map, Skin skin, int slotIndex, string name, SkeletonData skeletonData)
		{
			return null;
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x15EA248", Offset = "0x15EA248", VA = "0x15EA248")]
		private void ReadVertices(Dictionary<string, object> map, VertexAttachment attachment, int verticesLength)
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x15E5000", Offset = "0x15E5000", VA = "0x15E5000")]
		private void ReadAnimation(Dictionary<string, object> map, string name, SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x15EA978", Offset = "0x15EA978", VA = "0x15EA978")]
		private static void ReadCurve(Dictionary<string, object> valueMap, CurveTimeline timeline, int frameIndex)
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x15EA57C", Offset = "0x15EA57C", VA = "0x15EA57C")]
		private static float[] GetFloatArray(Dictionary<string, object> map, string name, float scale)
		{
			return null;
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x15EA7CC", Offset = "0x15EA7CC", VA = "0x15EA7CC")]
		private static int[] GetIntArray(Dictionary<string, object> map, string name)
		{
			return null;
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x15E3E90", Offset = "0x15E3E90", VA = "0x15E3E90")]
		private static float GetFloat(Dictionary<string, object> map, string name, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x15E4194", Offset = "0x15E4194", VA = "0x15E4194")]
		private static int GetInt(Dictionary<string, object> map, string name, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x15E426C", Offset = "0x15E426C", VA = "0x15E426C")]
		private static bool GetBoolean(Dictionary<string, object> map, string name, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x15E3F6C", Offset = "0x15E3F6C", VA = "0x15E3F6C")]
		private static string GetString(Dictionary<string, object> map, string name, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x15E4038", Offset = "0x15E4038", VA = "0x15E4038")]
		private static float ToColor(string hexString, int colorIndex, int expectedLength = 8)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004BA")]
	public class Skin
	{
		[Token(Token = "0x20004BB")]
		public struct AttachmentKeyTuple
		{
			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int slotIndex;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly string name;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal readonly int nameHashCode;

			[Token(Token = "0x60018C2")]
			[Address(RVA = "0x1073D18", Offset = "0x1073D18", VA = "0x1073D18")]
			public AttachmentKeyTuple(int slotIndex, string name)
			{
			}
		}

		[Token(Token = "0x20004BC")]
		private class AttachmentKeyTupleComparer : IEqualityComparer<AttachmentKeyTuple>
		{
			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly AttachmentKeyTupleComparer Instance;

			[Token(Token = "0x60018C3")]
			[Address(RVA = "0x1073D58", Offset = "0x1073D58", VA = "0x1073D58", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<Spine.Skin.AttachmentKeyTuple>.Equals(AttachmentKeyTuple o1, AttachmentKeyTuple o2)
			{
				return default(bool);
			}

			[Token(Token = "0x60018C4")]
			[Address(RVA = "0x1073D94", Offset = "0x1073D94", VA = "0x1073D94", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<Spine.Skin.AttachmentKeyTuple>.GetHashCode(AttachmentKeyTuple o)
			{
				return default(int);
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0x1073D9C", Offset = "0x1073D9C", VA = "0x1073D9C")]
			public AttachmentKeyTupleComparer()
			{
			}
		}

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<AttachmentKeyTuple, Attachment> attachments;

		[Token(Token = "0x170002C8")]
		public string Name
		{
			[Token(Token = "0x60018B8")]
			[Address(RVA = "0x14D711C", Offset = "0x14D711C", VA = "0x14D711C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C9")]
		public Dictionary<AttachmentKeyTuple, Attachment> Attachments
		{
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x14D7124", Offset = "0x14D7124", VA = "0x14D7124")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x14D712C", Offset = "0x14D712C", VA = "0x14D712C")]
		public Skin(string name)
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x14D7254", Offset = "0x14D7254", VA = "0x14D7254")]
		public void AddAttachment(int slotIndex, string name, Attachment attachment)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x14D3674", Offset = "0x14D3674", VA = "0x14D3674")]
		public Attachment GetAttachment(int slotIndex, string name)
		{
			return null;
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x14D7368", Offset = "0x14D7368", VA = "0x14D7368")]
		public void RemoveAttachment(int slotIndex, string name)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x14D746C", Offset = "0x14D746C", VA = "0x14D746C")]
		public void FindNamesForSlot(int slotIndex, List<string> names)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x14CF4E4", Offset = "0x14CF4E4", VA = "0x14CF4E4")]
		public void FindAttachmentsForSlot(int slotIndex, List<Attachment> attachments)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x14D7634", Offset = "0x14D7634", VA = "0x14D7634", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x14D763C", Offset = "0x14D763C", VA = "0x14D763C")]
		internal void AttachAll(Skeleton skeleton, Skin oldSkin)
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class Slot
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SlotData data;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Bone bone;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float r;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float g;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float b;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float a;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float r2;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float g2;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float b2;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal bool hasSecondColor;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Attachment attachment;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float attachmentTime;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ExposedList<float> attachmentVertices;

		[Token(Token = "0x170002CA")]
		public SlotData Data
		{
			[Token(Token = "0x60018C9")]
			[Address(RVA = "0x14D8940", Offset = "0x14D8940", VA = "0x14D8940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		public Bone Bone
		{
			[Token(Token = "0x60018CA")]
			[Address(RVA = "0x14D8948", Offset = "0x14D8948", VA = "0x14D8948")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CC")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x60018CB")]
			[Address(RVA = "0x14D8950", Offset = "0x14D8950", VA = "0x14D8950")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CD")]
		public float R
		{
			[Token(Token = "0x60018CC")]
			[Address(RVA = "0x14D896C", Offset = "0x14D896C", VA = "0x14D896C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018CD")]
			[Address(RVA = "0x14D8974", Offset = "0x14D8974", VA = "0x14D8974")]
			set
			{
			}
		}

		[Token(Token = "0x170002CE")]
		public float G
		{
			[Token(Token = "0x60018CE")]
			[Address(RVA = "0x14D897C", Offset = "0x14D897C", VA = "0x14D897C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018CF")]
			[Address(RVA = "0x14D8984", Offset = "0x14D8984", VA = "0x14D8984")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public float B
		{
			[Token(Token = "0x60018D0")]
			[Address(RVA = "0x14D898C", Offset = "0x14D898C", VA = "0x14D898C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D1")]
			[Address(RVA = "0x14D8994", Offset = "0x14D8994", VA = "0x14D8994")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		public float A
		{
			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x14D899C", Offset = "0x14D899C", VA = "0x14D899C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x14D89A4", Offset = "0x14D89A4", VA = "0x14D89A4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public float R2
		{
			[Token(Token = "0x60018D4")]
			[Address(RVA = "0x14D89AC", Offset = "0x14D89AC", VA = "0x14D89AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D5")]
			[Address(RVA = "0x14D89B4", Offset = "0x14D89B4", VA = "0x14D89B4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public float G2
		{
			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x14D89BC", Offset = "0x14D89BC", VA = "0x14D89BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x14D89C4", Offset = "0x14D89C4", VA = "0x14D89C4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public float B2
		{
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x14D89CC", Offset = "0x14D89CC", VA = "0x14D89CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x14D89D4", Offset = "0x14D89D4", VA = "0x14D89D4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public bool HasSecondColor
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x14D89DC", Offset = "0x14D89DC", VA = "0x14D89DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x14D89F8", Offset = "0x14D89F8", VA = "0x14D89F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public Attachment Attachment
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x14D8A18", Offset = "0x14D8A18", VA = "0x14D8A18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x14D7824", Offset = "0x14D7824", VA = "0x14D7824")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public float AttachmentTime
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0x14D8A20", Offset = "0x14D8A20", VA = "0x14D8A20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x14D8A50", Offset = "0x14D8A50", VA = "0x14D8A50")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public ExposedList<float> AttachmentVertices
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x14D8A80", Offset = "0x14D8A80", VA = "0x14D8A80")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x14D8A88", Offset = "0x14D8A88", VA = "0x14D8A88")]
			set
			{
			}
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x14D85D4", Offset = "0x14D85D4", VA = "0x14D85D4")]
		public Slot(SlotData data, Bone bone)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x14D87B4", Offset = "0x14D87B4", VA = "0x14D87B4")]
		public Slot(Slot slot, Bone bone)
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x14D870C", Offset = "0x14D870C", VA = "0x14D870C")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x14D8B00", Offset = "0x14D8B00", VA = "0x14D8B00", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004BE")]
	public class SlotData
	{
		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int index;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string name;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal BoneData boneData;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float r;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float g;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float b;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float a;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float r2;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float g2;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float b2;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal bool hasSecondColor;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal string attachmentName;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal BlendMode blendMode;

		[Token(Token = "0x170002D8")]
		public int Index
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x14D99BC", Offset = "0x14D99BC", VA = "0x14D99BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D9")]
		public string Name
		{
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x14D99C4", Offset = "0x14D99C4", VA = "0x14D99C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		public BoneData BoneData
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x14D99CC", Offset = "0x14D99CC", VA = "0x14D99CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DB")]
		public float R
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x14D99D4", Offset = "0x14D99D4", VA = "0x14D99D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x14D99DC", Offset = "0x14D99DC", VA = "0x14D99DC")]
			set
			{
			}
		}

		[Token(Token = "0x170002DC")]
		public float G
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x14D99E4", Offset = "0x14D99E4", VA = "0x14D99E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x14D99EC", Offset = "0x14D99EC", VA = "0x14D99EC")]
			set
			{
			}
		}

		[Token(Token = "0x170002DD")]
		public float B
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x14D99F4", Offset = "0x14D99F4", VA = "0x14D99F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x14D99FC", Offset = "0x14D99FC", VA = "0x14D99FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		public float A
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x14D9A04", Offset = "0x14D9A04", VA = "0x14D9A04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x14D9A0C", Offset = "0x14D9A0C", VA = "0x14D9A0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		public float R2
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x14D9A14", Offset = "0x14D9A14", VA = "0x14D9A14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0x14D9A1C", Offset = "0x14D9A1C", VA = "0x14D9A1C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		public float G2
		{
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0x14D9A24", Offset = "0x14D9A24", VA = "0x14D9A24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0x14D9A2C", Offset = "0x14D9A2C", VA = "0x14D9A2C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		public float B2
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0x14D9A34", Offset = "0x14D9A34", VA = "0x14D9A34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x14D9A3C", Offset = "0x14D9A3C", VA = "0x14D9A3C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E2")]
		public bool HasSecondColor
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x14D9A44", Offset = "0x14D9A44", VA = "0x14D9A44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x14D9A4C", Offset = "0x14D9A4C", VA = "0x14D9A4C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E3")]
		public string AttachmentName
		{
			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x14D9A58", Offset = "0x14D9A58", VA = "0x14D9A58")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018F8")]
			[Address(RVA = "0x14D9A60", Offset = "0x14D9A60", VA = "0x14D9A60")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public BlendMode BlendMode
		{
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x14D9A68", Offset = "0x14D9A68", VA = "0x14D9A68")]
			get
			{
				return default(BlendMode);
			}
			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x14D9A70", Offset = "0x14D9A70", VA = "0x14D9A70")]
			set
			{
			}
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x14D9A78", Offset = "0x14D9A78", VA = "0x14D9A78")]
		public SlotData(int index, string name, BoneData boneData)
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x14D9BA0", Offset = "0x14D9BA0", VA = "0x14D9BA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004BF")]
	public class TransformConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TransformConstraintData data;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Bone target;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float rotateMix;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float translateMix;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float scaleMix;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float shearMix;

		[Token(Token = "0x170002E5")]
		public int Order
		{
			[Token(Token = "0x6001905")]
			[Address(RVA = "0x14E01FC", Offset = "0x14E01FC", VA = "0x14E01FC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E6")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6001906")]
			[Address(RVA = "0x14E0218", Offset = "0x14E0218", VA = "0x14E0218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		public Bone Target
		{
			[Token(Token = "0x6001907")]
			[Address(RVA = "0x14E0220", Offset = "0x14E0220", VA = "0x14E0220")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001908")]
			[Address(RVA = "0x14E0228", Offset = "0x14E0228", VA = "0x14E0228")]
			set
			{
			}
		}

		[Token(Token = "0x170002E8")]
		public float RotateMix
		{
			[Token(Token = "0x6001909")]
			[Address(RVA = "0x14E0230", Offset = "0x14E0230", VA = "0x14E0230")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190A")]
			[Address(RVA = "0x14E0238", Offset = "0x14E0238", VA = "0x14E0238")]
			set
			{
			}
		}

		[Token(Token = "0x170002E9")]
		public float TranslateMix
		{
			[Token(Token = "0x600190B")]
			[Address(RVA = "0x14E0240", Offset = "0x14E0240", VA = "0x14E0240")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190C")]
			[Address(RVA = "0x14E0248", Offset = "0x14E0248", VA = "0x14E0248")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public float ScaleMix
		{
			[Token(Token = "0x600190D")]
			[Address(RVA = "0x14E0250", Offset = "0x14E0250", VA = "0x14E0250")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190E")]
			[Address(RVA = "0x14E0258", Offset = "0x14E0258", VA = "0x14E0258")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public float ShearMix
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0x14E0260", Offset = "0x14E0260", VA = "0x14E0260")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001910")]
			[Address(RVA = "0x14E0268", Offset = "0x14E0268", VA = "0x14E0268")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		public TransformConstraintData Data
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0x14E0270", Offset = "0x14E0270", VA = "0x14E0270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x14DED88", Offset = "0x14DED88", VA = "0x14DED88")]
		public TransformConstraint(TransformConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x14DF014", Offset = "0x14DF014", VA = "0x14DF014")]
		public TransformConstraint(TransformConstraint constraint, Skeleton skeleton)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x14DF308", Offset = "0x14DF308", VA = "0x14DF308")]
		public void Apply()
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x14DF30C", Offset = "0x14DF30C", VA = "0x14DF30C", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x14DFC60", Offset = "0x14DFC60", VA = "0x14DFC60")]
		private void ApplyAbsoluteWorld()
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x14DF758", Offset = "0x14DF758", VA = "0x14DF758")]
		private void ApplyRelativeWorld()
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x14DF50C", Offset = "0x14DF50C", VA = "0x14DF50C")]
		private void ApplyAbsoluteLocal()
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x14DF344", Offset = "0x14DF344", VA = "0x14DF344")]
		private void ApplyRelativeLocal()
		{
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x14E0278", Offset = "0x14E0278", VA = "0x14E0278", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004C0")]
	public class TransformConstraintData
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int order;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal BoneData target;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float rotateMix;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float translateMix;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float scaleMix;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float shearMix;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float offsetRotation;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float offsetX;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float offsetY;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float offsetScaleX;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float offsetScaleY;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float offsetShearY;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal bool relative;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		internal bool local;

		[Token(Token = "0x170002ED")]
		public string Name
		{
			[Token(Token = "0x6001913")]
			[Address(RVA = "0x10AD0D4", Offset = "0x10AD0D4", VA = "0x10AD0D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EE")]
		public int Order
		{
			[Token(Token = "0x6001914")]
			[Address(RVA = "0x10AD0DC", Offset = "0x10AD0DC", VA = "0x10AD0DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001915")]
			[Address(RVA = "0x10AD0E4", Offset = "0x10AD0E4", VA = "0x10AD0E4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0x10AD0EC", Offset = "0x10AD0EC", VA = "0x10AD0EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F0")]
		public BoneData Target
		{
			[Token(Token = "0x6001917")]
			[Address(RVA = "0x10AD0F4", Offset = "0x10AD0F4", VA = "0x10AD0F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001918")]
			[Address(RVA = "0x10AD0FC", Offset = "0x10AD0FC", VA = "0x10AD0FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public float RotateMix
		{
			[Token(Token = "0x6001919")]
			[Address(RVA = "0x10AD104", Offset = "0x10AD104", VA = "0x10AD104")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191A")]
			[Address(RVA = "0x10AD10C", Offset = "0x10AD10C", VA = "0x10AD10C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public float TranslateMix
		{
			[Token(Token = "0x600191B")]
			[Address(RVA = "0x10AD114", Offset = "0x10AD114", VA = "0x10AD114")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191C")]
			[Address(RVA = "0x10AD11C", Offset = "0x10AD11C", VA = "0x10AD11C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public float ScaleMix
		{
			[Token(Token = "0x600191D")]
			[Address(RVA = "0x10AD124", Offset = "0x10AD124", VA = "0x10AD124")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191E")]
			[Address(RVA = "0x10AD12C", Offset = "0x10AD12C", VA = "0x10AD12C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public float ShearMix
		{
			[Token(Token = "0x600191F")]
			[Address(RVA = "0x10AD134", Offset = "0x10AD134", VA = "0x10AD134")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001920")]
			[Address(RVA = "0x10AD13C", Offset = "0x10AD13C", VA = "0x10AD13C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		public float OffsetRotation
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0x10AD144", Offset = "0x10AD144", VA = "0x10AD144")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001922")]
			[Address(RVA = "0x10AD14C", Offset = "0x10AD14C", VA = "0x10AD14C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public float OffsetX
		{
			[Token(Token = "0x6001923")]
			[Address(RVA = "0x10AD154", Offset = "0x10AD154", VA = "0x10AD154")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001924")]
			[Address(RVA = "0x10AD15C", Offset = "0x10AD15C", VA = "0x10AD15C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public float OffsetY
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0x10AD164", Offset = "0x10AD164", VA = "0x10AD164")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001926")]
			[Address(RVA = "0x10AD16C", Offset = "0x10AD16C", VA = "0x10AD16C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public float OffsetScaleX
		{
			[Token(Token = "0x6001927")]
			[Address(RVA = "0x10AD174", Offset = "0x10AD174", VA = "0x10AD174")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001928")]
			[Address(RVA = "0x10AD17C", Offset = "0x10AD17C", VA = "0x10AD17C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public float OffsetScaleY
		{
			[Token(Token = "0x6001929")]
			[Address(RVA = "0x10AD184", Offset = "0x10AD184", VA = "0x10AD184")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600192A")]
			[Address(RVA = "0x10AD18C", Offset = "0x10AD18C", VA = "0x10AD18C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public float OffsetShearY
		{
			[Token(Token = "0x600192B")]
			[Address(RVA = "0x10AD194", Offset = "0x10AD194", VA = "0x10AD194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600192C")]
			[Address(RVA = "0x10AD19C", Offset = "0x10AD19C", VA = "0x10AD19C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public bool Relative
		{
			[Token(Token = "0x600192D")]
			[Address(RVA = "0x10AD1A4", Offset = "0x10AD1A4", VA = "0x10AD1A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600192E")]
			[Address(RVA = "0x10AD1AC", Offset = "0x10AD1AC", VA = "0x10AD1AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public bool Local
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0x10AD1B8", Offset = "0x10AD1B8", VA = "0x10AD1B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001930")]
			[Address(RVA = "0x10AD1C0", Offset = "0x10AD1C0", VA = "0x10AD1C0")]
			set
			{
			}
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x10AD1CC", Offset = "0x10AD1CC", VA = "0x10AD1CC")]
		public TransformConstraintData(string name)
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x10AD2B8", Offset = "0x10AD2B8", VA = "0x10AD2B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004C1")]
	public class Triangulator
	{
		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ExposedList<ExposedList<float>> convexPolygons;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ExposedList<ExposedList<int>> convexPolygonsIndices;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ExposedList<int> indicesArray;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ExposedList<bool> isConcaveArray;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ExposedList<int> triangles;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Pool<ExposedList<float>> polygonPool;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Pool<ExposedList<int>> polygonIndicesPool;

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x10ADC6C", Offset = "0x10ADC6C", VA = "0x10ADC6C")]
		public ExposedList<int> Triangulate(ExposedList<float> verticesArray)
		{
			return null;
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x10AE3CC", Offset = "0x10AE3CC", VA = "0x10AE3CC")]
		public ExposedList<ExposedList<float>> Decompose(ExposedList<float> verticesArray, ExposedList<int> triangles)
		{
			return null;
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x10AE27C", Offset = "0x10AE27C", VA = "0x10AE27C")]
		private static bool IsConcave(int index, int vertexCount, float[] vertices, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x10AE3A0", Offset = "0x10AE3A0", VA = "0x10AE3A0")]
		private static bool PositiveArea(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x10AEECC", Offset = "0x10AEECC", VA = "0x10AEECC")]
		private static int Winding(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y)
		{
			return default(int);
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x10AEF00", Offset = "0x10AEF00", VA = "0x10AEF00")]
		public Triangulator()
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public struct BoneMatrix
	{
		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float a;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float b;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float c;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float d;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x16891FC", Offset = "0x16891FC", VA = "0x16891FC")]
		public static BoneMatrix CalculateSetupWorld(BoneData boneData)
		{
			return default(BoneMatrix);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x1689290", Offset = "0x1689290", VA = "0x1689290")]
		private static BoneMatrix GetInheritedInternal(BoneData boneData, BoneMatrix parentMatrix)
		{
			return default(BoneMatrix);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x1689930", Offset = "0x1689930", VA = "0x1689930")]
		public BoneMatrix(BoneData boneData)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x1689A34", Offset = "0x1689A34", VA = "0x1689A34")]
		public BoneMatrix(Bone bone)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x1689B38", Offset = "0x1689B38", VA = "0x1689B38")]
		public BoneMatrix TransformMatrix(BoneMatrix local)
		{
			return default(BoneMatrix);
		}
	}
	[Token(Token = "0x20004C3")]
	public static class SkeletonExtensions
	{
		[Token(Token = "0x600193E")]
		[Address(RVA = "0x15DFFF0", Offset = "0x15DFFF0", VA = "0x15DFFF0")]
		public static bool IsWeighted(this VertexAttachment va)
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x15E0020", Offset = "0x15E0020", VA = "0x15E0020")]
		public static bool IsRenderable(this Attachment a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x15E0078", Offset = "0x15E0078", VA = "0x15E0078")]
		public static bool InheritsRotation(this TransformMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x15E0084", Offset = "0x15E0084", VA = "0x15E0084")]
		public static bool InheritsScale(this TransformMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x15E0090", Offset = "0x15E0090", VA = "0x15E0090")]
		internal static void SetPropertyToSetupPose(this Skeleton skeleton, int propertyID)
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x15E0540", Offset = "0x15E0540", VA = "0x15E0540")]
		public static void SetDrawOrderToSetupPose(this Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x15E05F4", Offset = "0x15E05F4", VA = "0x15E05F4")]
		public static void SetSlotAttachmentsToSetupPose(this Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x15E04E8", Offset = "0x15E04E8", VA = "0x15E04E8")]
		public static void SetColorToSetupPose(this Slot slot)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x15E06BC", Offset = "0x15E06BC", VA = "0x15E06BC")]
		public static void SetAttachmentToSetupPose(this Slot slot)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x15E043C", Offset = "0x15E043C", VA = "0x15E043C")]
		public static void SetSlotAttachmentToSetupPose(this Skeleton skeleton, int slotIndex)
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x15E0714", Offset = "0x15E0714", VA = "0x15E0714")]
		public static void PoseWithAnimation(this Skeleton skeleton, string animationName, float time, bool loop = false)
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x15E078C", Offset = "0x15E078C", VA = "0x15E078C")]
		public static void PoseSkeleton(this Animation animation, Skeleton skeleton, float time, bool loop = false)
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x15E07C0", Offset = "0x15E07C0", VA = "0x15E07C0")]
		public static void SetKeyedItemsToSetupPose(this Animation animation, Skeleton skeleton)
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x15E07F4", Offset = "0x15E07F4", VA = "0x15E07F4")]
		public static void AllowImmediateQueue(this TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x15E0818", Offset = "0x15E0818", VA = "0x15E0818")]
		public static void FindNamesForSlot(this Skin skin, string slotName, SkeletonData skeletonData, List<string> results)
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x15E085C", Offset = "0x15E085C", VA = "0x15E085C")]
		public static void FindAttachmentsForSlot(this Skin skin, string slotName, SkeletonData skeletonData, List<Attachment> results)
		{
		}
	}
}
namespace Spine.Unity
{
	[Token(Token = "0x20004C4")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x8B1BD4", Offset = "0x8B1BD4")]
	public class AnimationReferenceAsset : ScriptableObject, IHasSkeletonDataAsset
	{
		[Token(Token = "0x4000FCC")]
		private const bool QuietSkeletonData = true;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x8B3CFC", Offset = "0x8B3CFC")]
		[SerializeField]
		protected string animationName;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation animation;

		[Token(Token = "0x170002FD")]
		public SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x600194E")]
			[Address(RVA = "0x1177F7C", Offset = "0x1177F7C", VA = "0x1177F7C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FE")]
		public Animation Animation
		{
			[Token(Token = "0x600194F")]
			[Address(RVA = "0x1177F84", Offset = "0x1177F84", VA = "0x1177F84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x1177FB4", Offset = "0x1177FB4", VA = "0x1177FB4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x1178160", Offset = "0x1178160", VA = "0x1178160")]
		public static implicit operator Animation(AnimationReferenceAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x1178198", Offset = "0x1178198", VA = "0x1178198")]
		public AnimationReferenceAsset()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public abstract class AtlasAssetBase : ScriptableObject
	{
		[Token(Token = "0x170002FF")]
		public abstract Material PrimaryMaterial
		{
			[Token(Token = "0x6001953")]
			get;
		}

		[Token(Token = "0x17000300")]
		public abstract IEnumerable<Material> Materials
		{
			[Token(Token = "0x6001954")]
			get;
		}

		[Token(Token = "0x17000301")]
		public abstract int MaterialCount
		{
			[Token(Token = "0x6001955")]
			get;
		}

		[Token(Token = "0x17000302")]
		public abstract bool IsLoaded
		{
			[Token(Token = "0x6001956")]
			get;
		}

		[Token(Token = "0x6001957")]
		public abstract void Clear();

		[Token(Token = "0x6001958")]
		public abstract Atlas GetAtlas();

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x11865F8", Offset = "0x11865F8", VA = "0x11865F8")]
		protected AtlasAssetBase()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x8B1C18", Offset = "0x8B1C18")]
	public class BlendModeMaterialsAsset : SkeletonDataModifierAsset
	{
		[Token(Token = "0x20004C7")]
		private class AtlasMaterialCache : IDisposable
		{
			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Dictionary<KeyValuePair<AtlasPage, Material>, AtlasPage> cache;

			[Token(Token = "0x600195D")]
			[Address(RVA = "0x10BE484", Offset = "0x10BE484", VA = "0x10BE484")]
			public AtlasRegion CloneAtlasRegionWithMaterial(AtlasRegion originalRegion, Material materialTemplate)
			{
				return null;
			}

			[Token(Token = "0x600195E")]
			[Address(RVA = "0x10BE4E4", Offset = "0x10BE4E4", VA = "0x10BE4E4")]
			private AtlasPage GetAtlasPageWithMaterial(AtlasPage originalPage, Material materialTemplate)
			{
				return null;
			}

			[Token(Token = "0x600195F")]
			[Address(RVA = "0x10BE718", Offset = "0x10BE718", VA = "0x10BE718", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001960")]
			[Address(RVA = "0x10BE76C", Offset = "0x10BE76C", VA = "0x10BE76C")]
			public AtlasMaterialCache()
			{
			}
		}

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material multiplyMaterialTemplate;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material screenMaterialTemplate;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material additiveMaterialTemplate;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool applyAdditiveMaterial;

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x118C0F8", Offset = "0x118C0F8", VA = "0x118C0F8", Slot = "4")]
		public override void Apply(SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x118C110", Offset = "0x118C110", VA = "0x118C110")]
		public static void ApplyMaterials(SkeletonData skeletonData, Material multiplyTemplate, Material screenTemplate, Material additiveTemplate, bool includeAdditiveSlots)
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x118C8C4", Offset = "0x118C8C4", VA = "0x118C8C4")]
		public BlendModeMaterialsAsset()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x8B1C5C", Offset = "0x8B1C5C")]
	public class EventDataReferenceAsset : ScriptableObject
	{
		[Token(Token = "0x4000FD5")]
		private const bool QuietSkeletonData = true;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineEvent", RVA = "0x8B3D7C", Offset = "0x8B3D7C")]
		[SerializeField]
		protected string eventName;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EventData eventData;

		[Token(Token = "0x17000303")]
		public EventData EventData
		{
			[Token(Token = "0x6001961")]
			[Address(RVA = "0x16924D8", Offset = "0x16924D8", VA = "0x16924D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x1692508", Offset = "0x1692508", VA = "0x1692508")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x16926B4", Offset = "0x16926B4", VA = "0x16926B4")]
		public static implicit operator EventData(EventDataReferenceAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x16926EC", Offset = "0x16926EC", VA = "0x16926EC")]
		public EventDataReferenceAsset()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class RegionlessAttachmentLoader : AttachmentLoader
	{
		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AtlasRegion emptyRegion;

		[Token(Token = "0x17000304")]
		private static AtlasRegion EmptyRegion
		{
			[Token(Token = "0x6001965")]
			[Address(RVA = "0x12C8E00", Offset = "0x12C8E00", VA = "0x12C8E00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x12C8F90", Offset = "0x12C8F90", VA = "0x12C8F90", Slot = "4")]
		public RegionAttachment NewRegionAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x12C8FFC", Offset = "0x12C8FFC", VA = "0x12C8FFC", Slot = "5")]
		public MeshAttachment NewMeshAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x12C906C", Offset = "0x12C906C", VA = "0x12C906C", Slot = "6")]
		public BoundingBoxAttachment NewBoundingBoxAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x12C90CC", Offset = "0x12C90CC", VA = "0x12C90CC", Slot = "7")]
		public PathAttachment NewPathAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x12C9128", Offset = "0x12C9128", VA = "0x12C9128", Slot = "8")]
		public PointAttachment NewPointAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x12C9188", Offset = "0x12C9188", VA = "0x12C9188", Slot = "9")]
		public ClippingAttachment NewClippingAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x12C91E8", Offset = "0x12C91E8", VA = "0x12C91E8")]
		public RegionlessAttachmentLoader()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x8B1CA0", Offset = "0x8B1CA0")]
	public class SkeletonDataAsset : ScriptableObject
	{
		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AtlasAssetBase[] atlasAssets;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextAsset skeletonJSON;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B3DF0", Offset = "0x8B3DF0")]
		public List<SkeletonDataModifierAsset> skeletonDataModifiers;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x8B3E28", Offset = "0x8B3E28")]
		public string[] fromAnimation;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x8B3E84", Offset = "0x8B3E84")]
		public string[] toAnimation;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float[] duration;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float defaultMix;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RuntimeAnimatorController controller;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkeletonData skeletonData;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AnimationStateData stateData;

		[Token(Token = "0x17000305")]
		public bool IsLoaded
		{
			[Token(Token = "0x600196D")]
			[Address(RVA = "0x15DBA74", Offset = "0x15DBA74", VA = "0x15DBA74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x15DBA84", Offset = "0x15DBA84", VA = "0x15DBA84")]
		private void Reset()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x15DBA94", Offset = "0x15DBA94", VA = "0x15DBA94")]
		public static SkeletonDataAsset CreateRuntimeInstance(TextAsset skeletonDataFile, AtlasAssetBase atlasAsset, bool initialize, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x15DBB58", Offset = "0x15DBB58", VA = "0x15DBB58")]
		public static SkeletonDataAsset CreateRuntimeInstance(TextAsset skeletonDataFile, AtlasAssetBase[] atlasAssets, bool initialize, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x15DBA8C", Offset = "0x15DBA8C", VA = "0x15DBA8C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x15DC1D0", Offset = "0x15DC1D0", VA = "0x15DC1D0")]
		public AnimationStateData GetAnimationStateData()
		{
			return null;
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x15DBBF0", Offset = "0x15DBBF0", VA = "0x15DBBF0")]
		public SkeletonData GetSkeletonData(bool quiet)
		{
			return null;
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x15DC5D0", Offset = "0x15DC5D0", VA = "0x15DC5D0")]
		internal void InitializeWithData(SkeletonData sd)
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x15DC644", Offset = "0x15DC644", VA = "0x15DC644")]
		public void FillStateData()
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x15DC204", Offset = "0x15DC204", VA = "0x15DC204")]
		internal Atlas[] GetAtlasArray()
		{
			return null;
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x15DC370", Offset = "0x15DC370", VA = "0x15DC370")]
		internal static SkeletonData ReadSkeletonData(byte[] bytes, AttachmentLoader attachmentLoader, float scale)
		{
			return null;
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x15DC520", Offset = "0x15DC520", VA = "0x15DC520")]
		internal static SkeletonData ReadSkeletonData(string text, AttachmentLoader attachmentLoader, float scale)
		{
			return null;
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x15DFEE8", Offset = "0x15DFEE8", VA = "0x15DFEE8")]
		public SkeletonDataAsset()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	public abstract class SkeletonDataModifierAsset : ScriptableObject
	{
		[Token(Token = "0x600197A")]
		public abstract void Apply(SkeletonData skeletonData);

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x15DFFE8", Offset = "0x15DFFE8", VA = "0x15DFFE8")]
		protected SkeletonDataModifierAsset()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x8B1CEC", Offset = "0x8B1CEC")]
	public class SpineAtlasAsset : AtlasAssetBase
	{
		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextAsset atlasFile;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Atlas atlas;

		[Token(Token = "0x17000306")]
		public override bool IsLoaded
		{
			[Token(Token = "0x600197C")]
			[Address(RVA = "0x14D9C58", Offset = "0x14D9C58", VA = "0x14D9C58", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000307")]
		public override IEnumerable<Material> Materials
		{
			[Token(Token = "0x600197D")]
			[Address(RVA = "0x14D9C68", Offset = "0x14D9C68", VA = "0x14D9C68", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000308")]
		public override int MaterialCount
		{
			[Token(Token = "0x600197E")]
			[Address(RVA = "0x14D9C70", Offset = "0x14D9C70", VA = "0x14D9C70", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000309")]
		public override Material PrimaryMaterial
		{
			[Token(Token = "0x600197F")]
			[Address(RVA = "0x14D9C88", Offset = "0x14D9C88", VA = "0x14D9C88", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x14D9CBC", Offset = "0x14D9CBC", VA = "0x14D9CBC")]
		public static SpineAtlasAsset CreateRuntimeInstance(TextAsset atlasText, Material[] materials, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x14D9D58", Offset = "0x14D9D58", VA = "0x14D9D58")]
		public static SpineAtlasAsset CreateRuntimeInstance(TextAsset atlasText, Texture2D[] textures, Material materialPropertySource, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x14DA188", Offset = "0x14DA188", VA = "0x14DA188")]
		public static SpineAtlasAsset CreateRuntimeInstance(TextAsset atlasText, Texture2D[] textures, Shader shader, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x14D9D4C", Offset = "0x14D9D4C", VA = "0x14D9D4C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x14DA274", Offset = "0x14DA274", VA = "0x14DA274", Slot = "8")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x14DA27C", Offset = "0x14DA27C", VA = "0x14DA27C", Slot = "9")]
		public override Atlas GetAtlas()
		{
			return null;
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x14DA714", Offset = "0x14DA714", VA = "0x14DA714")]
		public Mesh GenerateMesh(string name, Mesh mesh, out Material material, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x14DAB44", Offset = "0x14DAB44", VA = "0x14DAB44")]
		public SpineAtlasAsset()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public class MaterialsTextureLoader : TextureLoader
	{
		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SpineAtlasAsset atlasAsset;

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x174FA58", Offset = "0x174FA58", VA = "0x174FA58")]
		public MaterialsTextureLoader(SpineAtlasAsset atlasAsset)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x174FA84", Offset = "0x174FA84", VA = "0x174FA84", Slot = "4")]
		public void Load(AtlasPage page, string path)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x174FD8C", Offset = "0x174FD8C", VA = "0x174FD8C", Slot = "5")]
		public void Unload(object texture)
		{
		}
	}
	[Token(Token = "0x20004CE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B1D38", Offset = "0x8B1D38")]
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x8B1D38", Offset = "0x8B1D38")]
	public class BoneFollower : MonoBehaviour
	{
		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B3EE0", Offset = "0x8B3EE0")]
		[SerializeField]
		public string boneName;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool followZPosition;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool followBoneRotation;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B3F50", Offset = "0x8B3F50")]
		public bool followSkeletonFlip;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B3F88", Offset = "0x8B3F88")]
		public bool followLocalScale;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x8B3FC0", Offset = "0x8B3FC0")]
		public bool initializeOnAwake;

		[NonSerialized]
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool valid;

		[NonSerialized]
		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Bone bone;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform skeletonTransform;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool skeletonTransformIsParent;

		[Token(Token = "0x1700030A")]
		public SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x600198B")]
			[Address(RVA = "0x1688460", Offset = "0x1688460", VA = "0x1688460")]
			get
			{
				return null;
			}
			[Token(Token = "0x600198C")]
			[Address(RVA = "0x1688468", Offset = "0x1688468", VA = "0x1688468")]
			set
			{
			}
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x1688618", Offset = "0x1688618", VA = "0x1688618")]
		public bool SetBone(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x16886F4", Offset = "0x16886F4", VA = "0x16886F4")]
		public void Awake()
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x1688704", Offset = "0x1688704", VA = "0x1688704")]
		public void HandleRebuildRenderer(SkeletonRenderer skeletonRenderer)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x1688470", Offset = "0x1688470", VA = "0x1688470")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x1688708", Offset = "0x1688708", VA = "0x1688708")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x16887F0", Offset = "0x16887F0", VA = "0x16887F0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x1688B88", Offset = "0x1688B88", VA = "0x1688B88")]
		public BoneFollower()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1D84", Offset = "0x8B1D84")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B1D84", Offset = "0x8B1D84")]
	public class PointFollower : MonoBehaviour, IHasSkeletonRenderer, IHasSkeletonComponent
	{
		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineSlot", RVA = "0x8B4008", Offset = "0x8B4008")]
		public string slotName;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpineAttachment", RVA = "0x8B4060", Offset = "0x8B4060")]
		public string pointAttachmentName;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool followRotation;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool followSkeletonFlip;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool followSkeletonZPosition;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform skeletonTransform;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool skeletonTransformIsParent;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PointAttachment point;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Bone bone;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool valid;

		[Token(Token = "0x1700030B")]
		public SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0x12C64C8", Offset = "0x12C64C8", VA = "0x12C64C8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030C")]
		public ISkeletonComponent SkeletonComponent
		{
			[Token(Token = "0x6001995")]
			[Address(RVA = "0x12C64D0", Offset = "0x12C64D0", VA = "0x12C64D0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030D")]
		public bool IsValid
		{
			[Token(Token = "0x6001996")]
			[Address(RVA = "0x12C64D8", Offset = "0x12C64D8", VA = "0x12C64D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x12C64E0", Offset = "0x12C64E0", VA = "0x12C64E0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x12C676C", Offset = "0x12C676C", VA = "0x12C676C")]
		private void HandleRebuildRenderer(SkeletonRenderer skeletonRenderer)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x12C6580", Offset = "0x12C6580", VA = "0x12C6580")]
		private void UpdateReferences()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x12C6950", Offset = "0x12C6950", VA = "0x12C6950")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x12C6C54", Offset = "0x12C6C54", VA = "0x12C6C54")]
		public PointFollower()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1DD0", Offset = "0x8B1DD0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B1DD0", Offset = "0x8B1DD0")]
	public class SkeletonAnimation : SkeletonRenderer, ISkeletonAnimation, IAnimationStateComponent
	{
		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AnimationState state;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x8B411C", Offset = "0x8B411C")]
		[SerializeField]
		private string _animationName;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool loop;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float timeScale;

		[Token(Token = "0x1700030E")]
		public AnimationState AnimationState
		{
			[Token(Token = "0x600199C")]
			[Address(RVA = "0x12CF380", Offset = "0x12CF380", VA = "0x12CF380", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030F")]
		public string AnimationName
		{
			[Token(Token = "0x60019A9")]
			[Address(RVA = "0x12CF760", Offset = "0x12CF760", VA = "0x12CF760")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019AA")]
			[Address(RVA = "0x12CF7AC", Offset = "0x12CF7AC", VA = "0x12CF7AC")]
			set
			{
			}
		}

		[Token(Token = "0x1400000F")]
		protected event UpdateBonesDelegate _UpdateLocal
		{
			[Token(Token = "0x600199D")]
			[Address(RVA = "0x12CF388", Offset = "0x12CF388", VA = "0x12CF388")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE1B8", Offset = "0x8BE1B8")]
			add
			{
			}
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x12CF428", Offset = "0x12CF428", VA = "0x12CF428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE1C8", Offset = "0x8BE1C8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		protected event UpdateBonesDelegate _UpdateWorld
		{
			[Token(Token = "0x600199F")]
			[Address(RVA = "0x12CF4C8", Offset = "0x12CF4C8", VA = "0x12CF4C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE1D8", Offset = "0x8BE1D8")]
			add
			{
			}
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x12CF568", Offset = "0x12CF568", VA = "0x12CF568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE1E8", Offset = "0x8BE1E8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		protected event UpdateBonesDelegate _UpdateComplete
		{
			[Token(Token = "0x60019A1")]
			[Address(RVA = "0x12CF608", Offset = "0x12CF608", VA = "0x12CF608")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE1F8", Offset = "0x8BE1F8")]
			add
			{
			}
			[Token(Token = "0x60019A2")]
			[Address(RVA = "0x12CF6A8", Offset = "0x12CF6A8", VA = "0x12CF6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE208", Offset = "0x8BE208")]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x60019A3")]
			[Address(RVA = "0x12CF748", Offset = "0x12CF748", VA = "0x12CF748", Slot = "11")]
			add
			{
			}
			[Token(Token = "0x60019A4")]
			[Address(RVA = "0x12CF74C", Offset = "0x12CF74C", VA = "0x12CF74C", Slot = "12")]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x12CF750", Offset = "0x12CF750", VA = "0x12CF750", Slot = "13")]
			add
			{
			}
			[Token(Token = "0x60019A6")]
			[Address(RVA = "0x12CF754", Offset = "0x12CF754", VA = "0x12CF754", Slot = "14")]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x12CF758", Offset = "0x12CF758", VA = "0x12CF758", Slot = "15")]
			add
			{
			}
			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x12CF75C", Offset = "0x12CF75C", VA = "0x12CF75C", Slot = "16")]
			remove
			{
			}
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x12CF85C", Offset = "0x12CF85C", VA = "0x12CF85C")]
		public static SkeletonAnimation AddToGameObject(GameObject gameObject, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x12CF8E4", Offset = "0x12CF8E4", VA = "0x12CF8E4")]
		public static SkeletonAnimation NewSkeletonAnimationGameObject(SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x12CF95C", Offset = "0x12CF95C", VA = "0x12CF95C", Slot = "8")]
		public override void ClearState()
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x12CF998", Offset = "0x12CF998", VA = "0x12CF998", Slot = "9")]
		public override void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x12CFAC8", Offset = "0x12CFAC8", VA = "0x12CFAC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x12CFAF0", Offset = "0x12CFAF0", VA = "0x12CFAF0")]
		public void Update(float deltaTime)
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x12CFBB4", Offset = "0x12CFBB4", VA = "0x12CFBB4")]
		public SkeletonAnimation()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B1E1C", Offset = "0x8B1E1C")]
	public class SkeletonMecanim : SkeletonRenderer, ISkeletonAnimation
	{
		[Serializable]
		[Token(Token = "0x20004D2")]
		public class MecanimTranslator
		{
			[Token(Token = "0x20004D3")]
			public enum MixMode
			{
				[Token(Token = "0x4001013")]
				AlwaysMix,
				[Token(Token = "0x4001014")]
				MixNext,
				[Token(Token = "0x4001015")]
				SpineStyle
			}

			[Token(Token = "0x20004D4")]
			protected class ClipInfos
			{
				[Token(Token = "0x4001016")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool isInterruptionActive;

				[Token(Token = "0x4001017")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
				public bool isLastFrameOfInterruption;

				[Token(Token = "0x4001018")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public int clipInfoCount;

				[Token(Token = "0x4001019")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int nextClipInfoCount;

				[Token(Token = "0x400101A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				public int interruptingClipInfoCount;

				[Token(Token = "0x400101B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public readonly List<AnimatorClipInfo> clipInfos;

				[Token(Token = "0x400101C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public readonly List<AnimatorClipInfo> nextClipInfos;

				[Token(Token = "0x400101D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public readonly List<AnimatorClipInfo> interruptingClipInfos;

				[Token(Token = "0x400101E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				public AnimatorStateInfo stateInfo;

				[Token(Token = "0x400101F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
				public AnimatorStateInfo nextStateInfo;

				[Token(Token = "0x4001020")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
				public AnimatorStateInfo interruptingStateInfo;

				[Token(Token = "0x4001021")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
				public float interruptingClipTimeAddition;

				[Token(Token = "0x60019CE")]
				[Address(RVA = "0x1FD2CB8", Offset = "0x1FD2CB8", VA = "0x1FD2CB8")]
				public ClipInfos()
				{
				}
			}

			[Token(Token = "0x20004D5")]
			private class AnimationClipEqualityComparer : IEqualityComparer<AnimationClip>
			{
				[Token(Token = "0x4001022")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				internal static readonly IEqualityComparer<AnimationClip> Instance;

				[Token(Token = "0x60019CF")]
				[Address(RVA = "0x1FD2BE8", Offset = "0x1FD2BE8", VA = "0x1FD2BE8", Slot = "4")]
				public bool Equals(AnimationClip x, AnimationClip y)
				{
					return default(bool);
				}

				[Token(Token = "0x60019D0")]
				[Address(RVA = "0x1FD2C34", Offset = "0x1FD2C34", VA = "0x1FD2C34", Slot = "5")]
				public int GetHashCode(AnimationClip o)
				{
					return default(int);
				}

				[Token(Token = "0x60019D1")]
				[Address(RVA = "0x1FD2C50", Offset = "0x1FD2C50", VA = "0x1FD2C50")]
				public AnimationClipEqualityComparer()
				{
				}
			}

			[Token(Token = "0x20004D6")]
			private class IntEqualityComparer : IEqualityComparer<int>
			{
				[Token(Token = "0x4001023")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				internal static readonly IEqualityComparer<int> Instance;

				[Token(Token = "0x60019D3")]
				[Address(RVA = "0x1FD2D68", Offset = "0x1FD2D68", VA = "0x1FD2D68", Slot = "4")]
				public bool Equals(int x, int y)
				{
					return default(bool);
				}

				[Token(Token = "0x60019D4")]
				[Address(RVA = "0x1FD2D74", Offset = "0x1FD2D74", VA = "0x1FD2D74", Slot = "5")]
				public int GetHashCode(int o)
				{
					return default(int);
				}

				[Token(Token = "0x60019D5")]
				[Address(RVA = "0x1FD2D7C", Offset = "0x1FD2D7C", VA = "0x1FD2D7C")]
				public IntEqualityComparer()
				{
				}
			}

			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool autoReset;

			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MixMode[] layerMixModes;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MixBlend[] layerBlendModes;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly Dictionary<int, Animation> animationTable;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly Dictionary<AnimationClip, int> clipNameHashCodeTable;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly List<Animation> previousAnimations;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected ClipInfos[] layerClipInfos;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Animator animator;

			[Token(Token = "0x17000311")]
			public Animator Animator
			{
				[Token(Token = "0x60019C2")]
				[Address(RVA = "0x107084C", Offset = "0x107084C", VA = "0x107084C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x1070854", Offset = "0x1070854", VA = "0x1070854")]
			public void Initialize(Animator animator, SkeletonDataAsset skeletonDataAsset)
			{
			}

			[Token(Token = "0x60019C4")]
			[Address(RVA = "0x1070C34", Offset = "0x1070C34", VA = "0x1070C34")]
			public void Apply(Skeleton skeleton)
			{
			}

			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x1072650", Offset = "0x1072650", VA = "0x1072650")]
			private static float AnimationTime(float normalizedTime, float clipLength, bool loop, bool reversed)
			{
				return default(float);
			}

			[Token(Token = "0x60019C6")]
			[Address(RVA = "0x107268C", Offset = "0x107268C", VA = "0x107268C")]
			private static float AnimationTime(float normalizedTime, float clipLength, bool reversed)
			{
				return default(float);
			}

			[Token(Token = "0x60019C7")]
			[Address(RVA = "0x1071FD4", Offset = "0x1071FD4", VA = "0x1071FD4")]
			private void InitClipInfosForLayers()
			{
			}

			[Token(Token = "0x60019C8")]
			[Address(RVA = "0x1070A74", Offset = "0x1070A74", VA = "0x1070A74")]
			private void ClearClipInfosForLayers()
			{
			}

			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x107212C", Offset = "0x107212C", VA = "0x107212C")]
			private void GetStateUpdatesFromAnimator(int layer)
			{
			}

			[Token(Token = "0x60019CA")]
			[Address(RVA = "0x1072424", Offset = "0x1072424", VA = "0x1072424")]
			private void GetAnimatorClipInfos(int layer, out bool isInterruptionActive, out int clipInfoCount, out int nextClipInfoCount, out int interruptingClipInfoCount, out IList<AnimatorClipInfo> clipInfo, out IList<AnimatorClipInfo> nextClipInfo, out IList<AnimatorClipInfo> interruptingClipInfo, out bool shallInterpolateWeightTo1)
			{
			}

			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x10725B8", Offset = "0x10725B8", VA = "0x10725B8")]
			private void GetAnimatorStateInfos(int layer, out bool isInterruptionActive, out AnimatorStateInfo stateInfo, out AnimatorStateInfo nextStateInfo, out AnimatorStateInfo interruptingStateInfo, out float interruptingClipTimeAddition)
			{
			}

			[Token(Token = "0x60019CC")]
			[Address(RVA = "0x10724BC", Offset = "0x10724BC", VA = "0x10724BC")]
			private Animation GetAnimation(AnimationClip clip)
			{
				return null;
			}

			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x10726B0", Offset = "0x10726B0", VA = "0x10726B0")]
			public MecanimTranslator()
			{
			}
		}

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		protected MecanimTranslator translator;

		[Token(Token = "0x17000310")]
		public MecanimTranslator Translator
		{
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0x15EAC70", Offset = "0x15EAC70", VA = "0x15EAC70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000015")]
		protected event UpdateBonesDelegate _UpdateLocal
		{
			[Token(Token = "0x60019B3")]
			[Address(RVA = "0x15EAC78", Offset = "0x15EAC78", VA = "0x15EAC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE218", Offset = "0x8BE218")]
			add
			{
			}
			[Token(Token = "0x60019B4")]
			[Address(RVA = "0x15EAD18", Offset = "0x15EAD18", VA = "0x15EAD18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE228", Offset = "0x8BE228")]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		protected event UpdateBonesDelegate _UpdateWorld
		{
			[Token(Token = "0x60019B5")]
			[Address(RVA = "0x15EADB8", Offset = "0x15EADB8", VA = "0x15EADB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE238", Offset = "0x8BE238")]
			add
			{
			}
			[Token(Token = "0x60019B6")]
			[Address(RVA = "0x15EAE58", Offset = "0x15EAE58", VA = "0x15EAE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE248", Offset = "0x8BE248")]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		protected event UpdateBonesDelegate _UpdateComplete
		{
			[Token(Token = "0x60019B7")]
			[Address(RVA = "0x15EAEF8", Offset = "0x15EAEF8", VA = "0x15EAEF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE258", Offset = "0x8BE258")]
			add
			{
			}
			[Token(Token = "0x60019B8")]
			[Address(RVA = "0x15EAF98", Offset = "0x15EAF98", VA = "0x15EAF98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE268", Offset = "0x8BE268")]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x60019B9")]
			[Address(RVA = "0x15EB038", Offset = "0x15EB038", VA = "0x15EB038", Slot = "11")]
			add
			{
			}
			[Token(Token = "0x60019BA")]
			[Address(RVA = "0x15EB03C", Offset = "0x15EB03C", VA = "0x15EB03C", Slot = "12")]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x60019BB")]
			[Address(RVA = "0x15EB040", Offset = "0x15EB040", VA = "0x15EB040", Slot = "13")]
			add
			{
			}
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0x15EB044", Offset = "0x15EB044", VA = "0x15EB044", Slot = "14")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x60019BD")]
			[Address(RVA = "0x15EB048", Offset = "0x15EB048", VA = "0x15EB048", Slot = "15")]
			add
			{
			}
			[Token(Token = "0x60019BE")]
			[Address(RVA = "0x15EB04C", Offset = "0x15EB04C", VA = "0x15EB04C", Slot = "16")]
			remove
			{
			}
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x15EB050", Offset = "0x15EB050", VA = "0x15EB050", Slot = "9")]
		public override void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x15EB12C", Offset = "0x15EB12C", VA = "0x15EB12C")]
		public void Update()
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x15EB1CC", Offset = "0x15EB1CC", VA = "0x15EB1CC")]
		public SkeletonMecanim()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1E7C", Offset = "0x8B1E7C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x8B1E7C", Offset = "0x8B1E7C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B1E7C", Offset = "0x8B1E7C")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1E7C", Offset = "0x8B1E7C")]
	public class SkeletonRenderer : MonoBehaviour, ISkeletonComponent, IHasSkeletonDataAsset
	{
		[Serializable]
		[Token(Token = "0x20004D8")]
		public class SpriteMaskInteractionMaterials
		{
			[Token(Token = "0x4001046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material[] materialsMaskDisabled;

			[Token(Token = "0x4001047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Material[] materialsInsideMask;

			[Token(Token = "0x4001048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Material[] materialsOutsideMask;

			[Token(Token = "0x60019F6")]
			[Address(RVA = "0x1073894", Offset = "0x1073894", VA = "0x1073894")]
			public SpriteMaskInteractionMaterials()
			{
			}
		}

		[Token(Token = "0x20004D9")]
		public delegate void InstructionDelegate(SkeletonRendererInstruction instruction);

		[Token(Token = "0x20004DA")]
		public delegate void SkeletonRendererDelegate(SkeletonRenderer skeletonRenderer);

		[Token(Token = "0x20004DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B1F50", Offset = "0x8B1F50")]
		private sealed class <>c__DisplayClass64_0
		{
			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string startsWith;

			[Token(Token = "0x60019FF")]
			[Address(RVA = "0x1073100", Offset = "0x1073100", VA = "0x1073100")]
			public <>c__DisplayClass64_0()
			{
			}

			[Token(Token = "0x6001A00")]
			[Address(RVA = "0x1073108", Offset = "0x1073108", VA = "0x1073108")]
			internal bool <FindAndApplySeparatorSlots>b__0(string slotName)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "SpineSkin", RVA = "0x8B41DC", Offset = "0x8B41DC")]
		public string initialSkinName;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool initialFlipX;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		public bool initialFlipY;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x8B4270", Offset = "0x8B4270")]
		[SerializeField]
		[AttributeAttribute(Name = "SpineSlot", RVA = "0x8B4270", Offset = "0x8B4270")]
		protected string[] separatorSlotNames;

		[NonSerialized]
		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly List<Slot> separatorSlots;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4308", Offset = "0x8B4308")]
		public float zSpacing;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useClipping;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool immutableTriangles;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool pmaVertexColors;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool clearStateOnDisable;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool tintBlack;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool singleSubmesh;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x8B4324", Offset = "0x8B4324")]
		public bool addNormals;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool calculateTangents;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public SpriteMaskInteraction maskInteraction;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpriteMaskInteractionMaterials maskMaterials;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int STENCIL_COMP_PARAM_ID;

		[Token(Token = "0x4001036")]
		public const CompareFunction STENCIL_COMP_MASKINTERACTION_NONE = CompareFunction.Disabled;

		[Token(Token = "0x4001037")]
		public const CompareFunction STENCIL_COMP_MASKINTERACTION_VISIBLE_INSIDE = CompareFunction.LessEqual;

		[Token(Token = "0x4001038")]
		public const CompareFunction STENCIL_COMP_MASKINTERACTION_VISIBLE_OUTSIDE = CompareFunction.Greater;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableRenderingOnOverride;

		[NonSerialized]
		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Dictionary<Material, Material> customMaterialOverride;

		[NonSerialized]
		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Dictionary<Slot, Material> customSlotMaterials;

		[NonSerialized]
		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly MeshGenerator meshGenerator;

		[NonSerialized]
		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly MeshRendererBuffers rendererBuffers;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MeshFilter meshFilter;

		[NonSerialized]
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool valid;

		[NonSerialized]
		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Skeleton skeleton;

		[Token(Token = "0x17000312")]
		public Dictionary<Material, Material> CustomMaterialOverride
		{
			[Token(Token = "0x60019DD")]
			[Address(RVA = "0x14D0974", Offset = "0x14D0974", VA = "0x14D0974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000313")]
		public Dictionary<Slot, Material> CustomSlotMaterials
		{
			[Token(Token = "0x60019DE")]
			[Address(RVA = "0x14D097C", Offset = "0x14D097C", VA = "0x14D097C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x60019DF")]
			[Address(RVA = "0x14D0984", Offset = "0x14D0984", VA = "0x14D0984", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x60019E2")]
			[Address(RVA = "0x14D0AF4", Offset = "0x14D0AF4", VA = "0x14D0AF4", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400001B")]
		private event InstructionDelegate generateMeshOverride
		{
			[Token(Token = "0x60019D7")]
			[Address(RVA = "0x14D06F4", Offset = "0x14D06F4", VA = "0x14D06F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE278", Offset = "0x8BE278")]
			add
			{
			}
			[Token(Token = "0x60019D8")]
			[Address(RVA = "0x14D0794", Offset = "0x14D0794", VA = "0x14D0794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE288", Offset = "0x8BE288")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event InstructionDelegate GenerateMeshOverride
		{
			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x14D01D0", Offset = "0x14D01D0", VA = "0x14D01D0")]
			add
			{
			}
			[Token(Token = "0x60019DA")]
			[Address(RVA = "0x14CFAA4", Offset = "0x14CFAA4", VA = "0x14CFAA4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event MeshGeneratorDelegate OnPostProcessVertices
		{
			[Token(Token = "0x60019DB")]
			[Address(RVA = "0x14D0834", Offset = "0x14D0834", VA = "0x14D0834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE298", Offset = "0x8BE298")]
			add
			{
			}
			[Token(Token = "0x60019DC")]
			[Address(RVA = "0x14D08D4", Offset = "0x14D08D4", VA = "0x14D08D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE2A8", Offset = "0x8BE2A8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event SkeletonRendererDelegate OnRebuild
		{
			[Token(Token = "0x60019E0")]
			[Address(RVA = "0x14D09B4", Offset = "0x14D09B4", VA = "0x14D09B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE2B8", Offset = "0x8BE2B8")]
			add
			{
			}
			[Token(Token = "0x60019E1")]
			[Address(RVA = "0x14D0A54", Offset = "0x14D0A54", VA = "0x14D0A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE2C8", Offset = "0x8BE2C8")]
			remove
			{
			}
		}

		[Token(Token = "0x60019E3")]
		public static T NewSpineGameObject<T>(SkeletonDataAsset skeletonDataAsset) where T : SkeletonRenderer
		{
			return null;
		}

		[Token(Token = "0x60019E4")]
		public static T AddSpineComponent<T>(GameObject gameObject, SkeletonDataAsset skeletonDataAsset) where T : SkeletonRenderer
		{
			return null;
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x14D0AFC", Offset = "0x14D0AFC", VA = "0x14D0AFC")]
		public void SetMeshSettings(MeshGenerator.Settings settings)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x14D0B5C", Offset = "0x14D0B5C", VA = "0x14D0B5C", Slot = "7")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x14D0B6C", Offset = "0x14D0B6C", VA = "0x14D0B6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x14D0B8C", Offset = "0x14D0B8C", VA = "0x14D0B8C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x14D0BC0", Offset = "0x14D0BC0", VA = "0x14D0BC0", Slot = "8")]
		public virtual void ClearState()
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x14D0D20", Offset = "0x14D0D20", VA = "0x14D0D20")]
		public void EnsureMeshGeneratorCapacity(int minimumVertexCount)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x14D0D48", Offset = "0x14D0D48", VA = "0x14D0D48", Slot = "9")]
		public virtual void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x14D10B4", Offset = "0x14D10B4", VA = "0x14D10B4", Slot = "10")]
		public virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x14D1AE4", Offset = "0x14D1AE4", VA = "0x14D1AE4")]
		public void FindAndApplySeparatorSlots(string startsWith, bool clearExistingSeparators = true, bool updateStringArray = false)
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x14D1BF0", Offset = "0x14D1BF0", VA = "0x14D1BF0")]
		public void FindAndApplySeparatorSlots(Func<string, bool> slotNamePredicate, bool clearExistingSeparators = true, bool updateStringArray = false)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x14D1FEC", Offset = "0x14D1FEC", VA = "0x14D1FEC")]
		public void ReapplySeparatorSlotNames()
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x14D191C", Offset = "0x14D191C", VA = "0x14D191C")]
		private void AssignSpriteMaskMaterials()
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x14D20E0", Offset = "0x14D20E0", VA = "0x14D20E0")]
		private bool InitSpriteMaskMaterialsInsideMask()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x14D210C", Offset = "0x14D210C", VA = "0x14D210C")]
		private bool InitSpriteMaskMaterialsOutsideMask()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0x14D2138", Offset = "0x14D2138", VA = "0x14D2138")]
		private bool InitSpriteMaskMaterialsForMaskType(CompareFunction maskFunction, ref Material[] materialsToFill)
		{
			return default(bool);
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x14D22C4", Offset = "0x14D22C4", VA = "0x14D22C4")]
		public SkeletonRenderer()
		{
		}
	}
	[Token(Token = "0x20004DC")]
	public delegate void UpdateBonesDelegate(ISkeletonAnimation animated);
	[Token(Token = "0x20004DD")]
	public interface ISkeletonAnimation
	{
		[Token(Token = "0x17000316")]
		Skeleton Skeleton
		{
			[Token(Token = "0x6001A0B")]
			get;
		}

		[Token(Token = "0x1400001F")]
		event UpdateBonesDelegate UpdateLocal;

		[Token(Token = "0x14000020")]
		event UpdateBonesDelegate UpdateWorld;

		[Token(Token = "0x14000021")]
		event UpdateBonesDelegate UpdateComplete;
	}
	[Token(Token = "0x20004DE")]
	public interface IHasSkeletonDataAsset
	{
		[Token(Token = "0x17000317")]
		SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x6001A0C")]
			get;
		}
	}
	[Token(Token = "0x20004DF")]
	public interface ISkeletonComponent
	{
		[Token(Token = "0x17000318")]
		SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x6001A0D")]
			get;
		}

		[Token(Token = "0x17000319")]
		Skeleton Skeleton
		{
			[Token(Token = "0x6001A0E")]
			get;
		}
	}
	[Token(Token = "0x20004E0")]
	public interface IAnimationStateComponent
	{
		[Token(Token = "0x1700031A")]
		AnimationState AnimationState
		{
			[Token(Token = "0x6001A0F")]
			get;
		}
	}
	[Token(Token = "0x20004E1")]
	public interface IHasSkeletonRenderer
	{
		[Token(Token = "0x1700031B")]
		SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x6001A10")]
			get;
		}
	}
	[Token(Token = "0x20004E2")]
	public interface IHasSkeletonComponent
	{
		[Token(Token = "0x1700031C")]
		ISkeletonComponent SkeletonComponent
		{
			[Token(Token = "0x6001A11")]
			get;
		}
	}
	[Token(Token = "0x20004E3")]
	public class DoubleBuffered<T> where T : new()
	{
		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T a;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T b;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool usingA;

		[Token(Token = "0x6001A12")]
		public T GetCurrent()
		{
			return (T)null;
		}

		[Token(Token = "0x6001A13")]
		public T GetNext()
		{
			return (T)null;
		}

		[Token(Token = "0x6001A14")]
		public DoubleBuffered()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public static class SpineMesh
	{
		[Token(Token = "0x400104D")]
		internal const HideFlags MeshHideflags = HideFlags.DontSaveInEditor | HideFlags.DontSaveInBuild;

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x14DB264", Offset = "0x14DB264", VA = "0x14DB264")]
		public static Mesh NewSkeletonMesh()
		{
			return null;
		}
	}
	[Token(Token = "0x20004E5")]
	public struct SubmeshInstruction
	{
		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Skeleton skeleton;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int startSlot;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int endSlot;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material material;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool forceSeparate;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int preActiveClippingSlotSource;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int rawTriangleCount;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int rawVertexCount;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int rawFirstVertexIndex;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool hasClipping;

		[Token(Token = "0x1700031D")]
		public int SlotCount
		{
			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x14DBD70", Offset = "0x14DBD70", VA = "0x14DBD70")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x14DBD7C", Offset = "0x14DBD7C", VA = "0x14DBD7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004E6")]
	public delegate void MeshGeneratorDelegate(MeshGeneratorBuffers buffers);
	[Token(Token = "0x20004E7")]
	public struct MeshGeneratorBuffers
	{
		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int vertexCount;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3[] vertexBuffer;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2[] uvBuffer;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color32[] colorBuffer;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshGenerator meshGenerator;
	}
	[Serializable]
	[Token(Token = "0x20004E8")]
	public class MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x20004E9")]
		public struct Settings
		{
			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool useClipping;

			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x8B438C", Offset = "0x8B438C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B438C", Offset = "0x8B438C")]
			public float zSpacing;

			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x8B43D0", Offset = "0x8B43D0")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B43D0", Offset = "0x8B43D0")]
			public bool pmaVertexColors;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool tintBlack;

			[Token(Token = "0x4001078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool calculateTangents;

			[Token(Token = "0x4001079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool addNormals;

			[Token(Token = "0x400107A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool immutableTriangles;

			[Token(Token = "0x17000320")]
			public static Settings Default
			{
				[Token(Token = "0x6001A34")]
				[Address(RVA = "0x1066F60", Offset = "0x1066F60", VA = "0x1066F60")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Settings settings;

		[Token(Token = "0x400105E")]
		private const float BoundsMinDefault = float.PositiveInfinity;

		[Token(Token = "0x400105F")]
		private const float BoundsMaxDefault = float.NegativeInfinity;

		[NonSerialized]
		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ExposedList<Vector3> vertexBuffer;

		[NonSerialized]
		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ExposedList<Vector2> uvBuffer;

		[NonSerialized]
		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ExposedList<Color32> colorBuffer;

		[NonSerialized]
		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ExposedList<ExposedList<int>> submeshes;

		[NonSerialized]
		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 meshBoundsMin;

		[NonSerialized]
		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 meshBoundsMax;

		[NonSerialized]
		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float meshBoundsThickness;

		[NonSerialized]
		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int submeshIndex;

		[NonSerialized]
		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkeletonClipping clipper;

		[NonSerialized]
		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] tempVerts;

		[NonSerialized]
		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int[] regionTriangles;

		[NonSerialized]
		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] normals;

		[NonSerialized]
		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector4[] tangents;

		[NonSerialized]
		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector2[] tempTanBuffer;

		[NonSerialized]
		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ExposedList<Vector2> uv2;

		[NonSerialized]
		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ExposedList<Vector2> uv3;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Vector3> AttachmentVerts;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Vector2> AttachmentUVs;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<Color32> AttachmentColors32;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<int> AttachmentIndices;

		[Token(Token = "0x1700031E")]
		public int VertexCount
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x1750A18", Offset = "0x1750A18", VA = "0x1750A18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031F")]
		public MeshGeneratorBuffers Buffers
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x1750A34", Offset = "0x1750A34", VA = "0x1750A34")]
			get
			{
				return default(MeshGeneratorBuffers);
			}
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x1750A7C", Offset = "0x1750A7C", VA = "0x1750A7C")]
		public MeshGenerator()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x1750CFC", Offset = "0x1750CFC", VA = "0x1750CFC")]
		public static void GenerateSingleSubmeshInstruction(SkeletonRendererInstruction instructionOutput, Skeleton skeleton, Material material)
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x1751038", Offset = "0x1751038", VA = "0x1751038")]
		public static void GenerateSkeletonRendererInstruction(SkeletonRendererInstruction instructionOutput, Skeleton skeleton, Dictionary<Slot, Material> customSlotMaterials, List<Slot> separatorSlots, bool generateMeshOverride, bool immutableTriangles = false)
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x17518F0", Offset = "0x17518F0", VA = "0x17518F0")]
		public static void TryReplaceMaterials(ExposedList<SubmeshInstruction> workingSubmeshInstructions, Dictionary<Material, Material> customMaterialOverride)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x17519D4", Offset = "0x17519D4", VA = "0x17519D4")]
		public void Begin()
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x1751AB0", Offset = "0x1751AB0", VA = "0x1751AB0")]
		public void AddSubmesh(SubmeshInstruction instruction, bool updateTriangles = true)
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x1752930", Offset = "0x1752930", VA = "0x1752930")]
		public void BuildMesh(SkeletonRendererInstruction instruction, bool updateTriangles)
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x17529D8", Offset = "0x17529D8", VA = "0x17529D8")]
		public void BuildMeshWithArrays(SkeletonRendererInstruction instruction, bool updateTriangles)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x1753D98", Offset = "0x1753D98", VA = "0x1753D98")]
		public void ScaleVertexData(float scale)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x1752754", Offset = "0x1752754", VA = "0x1752754")]
		private void AddAttachmentTintBlack(float r2, float g2, float b2, int vertexCount)
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x1753E28", Offset = "0x1753E28", VA = "0x1753E28")]
		public void FillVertexData(Mesh mesh)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x1754150", Offset = "0x1754150", VA = "0x1754150")]
		public void FillLateVertexData(Mesh mesh)
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x1754704", Offset = "0x1754704", VA = "0x1754704")]
		public void FillTriangles(Mesh mesh)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x17547B0", Offset = "0x17547B0", VA = "0x17547B0")]
		public void FillTrianglesSingle(Mesh mesh)
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x1754808", Offset = "0x1754808", VA = "0x1754808")]
		public void EnsureVertexCapacity(int minimumVertexCount, bool inlcudeTintBlack = false, bool includeTangents = false, bool includeNormals = false)
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x1754A54", Offset = "0x1754A54", VA = "0x1754A54")]
		public void TrimExcess()
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x1754330", Offset = "0x1754330", VA = "0x1754330")]
		internal static void SolveTangents2DEnsureSize(ref Vector4[] tangentBuffer, ref Vector2[] tempTanBuffer, int vertexCount, int vertexBufferLength)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x17543F4", Offset = "0x17543F4", VA = "0x17543F4")]
		internal static void SolveTangents2DTriangles(Vector2[] tempTanBuffer, int[] triangles, int triangleCount, Vector3[] vertices, Vector2[] uvs, int vertexCount)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x17545D4", Offset = "0x17545D4", VA = "0x17545D4")]
		internal static void SolveTangents2DBuffer(Vector4[] tangents, Vector2[] tempTanBuffer, int vertexCount)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x1754B88", Offset = "0x1754B88", VA = "0x1754B88")]
		public static void FillMeshLocal(Mesh mesh, RegionAttachment regionAttachment)
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x17550E8", Offset = "0x17550E8", VA = "0x17550E8")]
		public static void FillMeshLocal(Mesh mesh, MeshAttachment meshAttachment, SkeletonData skeletonData)
		{
		}
	}
	[Token(Token = "0x20004EA")]
	public class MeshRendererBuffers : IDisposable
	{
		[Token(Token = "0x20004EB")]
		public class SmartMesh : IDisposable
		{
			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Mesh mesh;

			[Token(Token = "0x400107F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SkeletonRendererInstruction instructionUsed;

			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x1066F6C", Offset = "0x1066F6C", VA = "0x1066F6C")]
			public void Clear()
			{
			}

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x1066FA8", Offset = "0x1066FA8", VA = "0x1066FA8", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x1067050", Offset = "0x1067050", VA = "0x1067050")]
			public SmartMesh()
			{
			}
		}

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DoubleBuffered<SmartMesh> doubleBufferedMesh;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly ExposedList<Material> submeshMaterials;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Material[] sharedMaterials;

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x1755C7C", Offset = "0x1755C7C", VA = "0x1755C7C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x1755D6C", Offset = "0x1755D6C", VA = "0x1755D6C")]
		public Material[] GetUpdatedSharedMaterialsArray()
		{
			return null;
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x1755E04", Offset = "0x1755E04", VA = "0x1755E04")]
		public bool MaterialsChangedInLastUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x1755E9C", Offset = "0x1755E9C", VA = "0x1755E9C")]
		public void UpdateSharedMaterials(ExposedList<SubmeshInstruction> instructions)
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x1755FD0", Offset = "0x1755FD0", VA = "0x1755FD0")]
		public SmartMesh GetNextMesh()
		{
			return null;
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x1756024", Offset = "0x1756024", VA = "0x1756024")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x17560A4", Offset = "0x17560A4", VA = "0x17560A4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x1756128", Offset = "0x1756128", VA = "0x1756128")]
		public MeshRendererBuffers()
		{
		}
	}
	[Token(Token = "0x20004EC")]
	public class SkeletonRendererInstruction
	{
		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ExposedList<SubmeshInstruction> submeshInstructions;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool immutableTriangles;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool hasActiveClipping;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int rawVertexCount;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ExposedList<Attachment> attachments;

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x14D0C94", Offset = "0x14D0C94", VA = "0x14D0C94")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x14D2FE0", Offset = "0x14D2FE0", VA = "0x14D2FE0")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x14D3038", Offset = "0x14D3038", VA = "0x14D3038")]
		public void SetWithSubset(ExposedList<SubmeshInstruction> instructions, int startSubmesh, int endSubmesh)
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x14D1744", Offset = "0x14D1744", VA = "0x14D1744")]
		public void Set(SkeletonRendererInstruction other)
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x14D158C", Offset = "0x14D158C", VA = "0x14D158C")]
		public static bool GeometryNotEqual(SkeletonRendererInstruction a, SkeletonRendererInstruction b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x14D24A4", Offset = "0x14D24A4", VA = "0x14D24A4")]
		public SkeletonRendererInstruction()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1F60", Offset = "0x8B1F60")]
	public class BoundingBoxFollower : MonoBehaviour
	{
		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool DebugMessages;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineSlot", RVA = "0x8B441C", Offset = "0x8B441C")]
		public string slotName;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isTrigger;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool clearStateOnDisable;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Slot slot;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoundingBoxAttachment currentAttachment;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string currentAttachmentName;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PolygonCollider2D currentCollider;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Dictionary<BoundingBoxAttachment, PolygonCollider2D> colliderTable;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly Dictionary<BoundingBoxAttachment, string> nameTable;

		[Token(Token = "0x17000321")]
		public Slot Slot
		{
			[Token(Token = "0x6001A46")]
			[Address(RVA = "0x1689EFC", Offset = "0x1689EFC", VA = "0x1689EFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		public BoundingBoxAttachment CurrentAttachment
		{
			[Token(Token = "0x6001A47")]
			[Address(RVA = "0x1689F04", Offset = "0x1689F04", VA = "0x1689F04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000323")]
		public string CurrentAttachmentName
		{
			[Token(Token = "0x6001A48")]
			[Address(RVA = "0x1689F0C", Offset = "0x1689F0C", VA = "0x1689F0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000324")]
		public PolygonCollider2D CurrentCollider
		{
			[Token(Token = "0x6001A49")]
			[Address(RVA = "0x1689F14", Offset = "0x1689F14", VA = "0x1689F14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000325")]
		public bool IsTrigger
		{
			[Token(Token = "0x6001A4A")]
			[Address(RVA = "0x1689F1C", Offset = "0x1689F1C", VA = "0x1689F1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x1689F24", Offset = "0x1689F24", VA = "0x1689F24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x168A364", Offset = "0x168A364", VA = "0x168A364")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x168A484", Offset = "0x168A484", VA = "0x168A484")]
		private void HandleRebuild(SkeletonRenderer sr)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x1689F2C", Offset = "0x1689F2C", VA = "0x1689F2C")]
		public void Initialize(bool overwrite = false)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x168A730", Offset = "0x168A730", VA = "0x168A730")]
		private void AddSkin(Skin skin, int slotIndex)
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x168AB00", Offset = "0x168AB00", VA = "0x168AB00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x168AB10", Offset = "0x168AB10", VA = "0x168AB10")]
		public void ClearState()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x168A48C", Offset = "0x168A48C", VA = "0x168A48C")]
		private void DisposeColliders()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x168AC54", Offset = "0x168AC54", VA = "0x168AC54")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x168AC74", Offset = "0x168AC74", VA = "0x168AC74")]
		private void MatchAttachment(Attachment attachment)
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x168AF88", Offset = "0x168AF88", VA = "0x168AF88")]
		public BoundingBoxFollower()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B1F70", Offset = "0x8B1F70")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1F70", Offset = "0x8B1F70")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1F70", Offset = "0x8B1F70")]
	public class BoneFollowerGraphic : MonoBehaviour
	{
		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkeletonGraphic skeletonGraphic;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool initializeOnAwake;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B4474", Offset = "0x8B4474")]
		[SerializeField]
		public string boneName;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool followBoneRotation;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B44E4", Offset = "0x8B44E4")]
		public bool followSkeletonFlip;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B451C", Offset = "0x8B451C")]
		public bool followLocalScale;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool followZPosition;

		[NonSerialized]
		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Bone bone;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform skeletonTransform;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool skeletonTransformIsParent;

		[NonSerialized]
		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool valid;

		[Token(Token = "0x17000326")]
		public SkeletonGraphic SkeletonGraphic
		{
			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x1688BA4", Offset = "0x1688BA4", VA = "0x1688BA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A58")]
			[Address(RVA = "0x1688BAC", Offset = "0x1688BAC", VA = "0x1688BAC")]
			set
			{
			}
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x1688CC4", Offset = "0x1688CC4", VA = "0x1688CC4")]
		public bool SetBone(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x1688DA0", Offset = "0x1688DA0", VA = "0x1688DA0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x1688BB4", Offset = "0x1688BB4", VA = "0x1688BB4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x1688DB0", Offset = "0x1688DB0", VA = "0x1688DB0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x16891E0", Offset = "0x16891E0", VA = "0x16891E0")]
		public BoneFollowerGraphic()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B1FCC", Offset = "0x8B1FCC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B1FCC", Offset = "0x8B1FCC")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B1FCC", Offset = "0x8B1FCC")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B1FCC", Offset = "0x8B1FCC")]
	public class SkeletonGraphic : MaskableGraphic, ISkeletonComponent, IAnimationStateComponent, ISkeletonAnimation, IHasSkeletonDataAsset
	{
		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "SpineSkin", RVA = "0x8B4554", Offset = "0x8B4554")]
		public string initialSkinName;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool initialFlipX;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool initialFlipY;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x8B45AC", Offset = "0x8B45AC")]
		public string startingAnimation;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool startingLoop;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float timeScale;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool freeze;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool unscaledTime;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Texture overrideTexture;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Skeleton skeleton;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected AnimationState state;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		protected MeshGenerator meshGenerator;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private DoubleBuffered<MeshRendererBuffers.SmartMesh> meshBuffers;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x17000327")]
		public SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x15E2794", Offset = "0x15E2794", VA = "0x15E2794", Slot = "75")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000328")]
		public Texture OverrideTexture
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x15E2C6C", Offset = "0x15E2C6C", VA = "0x15E2C6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x15E2C74", Offset = "0x15E2C74", VA = "0x15E2C74")]
			set
			{
			}
		}

		[Token(Token = "0x17000329")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x15E2CC8", Offset = "0x15E2CC8", VA = "0x15E2CC8", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032A")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x15E32B0", Offset = "0x15E32B0", VA = "0x15E32B0", Slot = "74")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x15E32B8", Offset = "0x15E32B8", VA = "0x15E32B8")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700032B")]
		public SkeletonData SkeletonData
		{
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x15E32C0", Offset = "0x15E32C0", VA = "0x15E32C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032C")]
		public bool IsValid
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x15E2E30", Offset = "0x15E2E30", VA = "0x15E2E30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032D")]
		public AnimationState AnimationState
		{
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x15E32D8", Offset = "0x15E32D8", VA = "0x15E32D8", Slot = "67")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032E")]
		public MeshGenerator MeshGenerator
		{
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x15E32E0", Offset = "0x15E32E0", VA = "0x15E32E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000022")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x15E3348", Offset = "0x15E3348", VA = "0x15E3348", Slot = "68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE338", Offset = "0x8BE338")]
			add
			{
			}
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x15E33EC", Offset = "0x15E33EC", VA = "0x15E33EC", Slot = "69")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE348", Offset = "0x8BE348")]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x15E3490", Offset = "0x15E3490", VA = "0x15E3490", Slot = "70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE358", Offset = "0x8BE358")]
			add
			{
			}
			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x15E3534", Offset = "0x15E3534", VA = "0x15E3534", Slot = "71")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE368", Offset = "0x8BE368")]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x15E35D8", Offset = "0x15E35D8", VA = "0x15E35D8", Slot = "72")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE378", Offset = "0x8BE378")]
			add
			{
			}
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x15E367C", Offset = "0x15E367C", VA = "0x15E367C", Slot = "73")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE388", Offset = "0x8BE388")]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event MeshGeneratorDelegate OnPostProcessVertices
		{
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x15E3720", Offset = "0x15E3720", VA = "0x15E3720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE398", Offset = "0x8BE398")]
			add
			{
			}
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x15E37C4", Offset = "0x15E37C4", VA = "0x15E37C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE3A8", Offset = "0x8BE3A8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x15E279C", Offset = "0x15E279C", VA = "0x15E279C")]
		public static SkeletonGraphic NewSkeletonGraphicGameObject(SkeletonDataAsset skeletonDataAsset, Transform parent, Material material)
		{
			return null;
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x15E28A0", Offset = "0x15E28A0", VA = "0x15E28A0")]
		public static SkeletonGraphic AddSkeletonGraphicComponent(GameObject gameObject, SkeletonDataAsset skeletonDataAsset, Material material)
		{
			return null;
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x15E2DD8", Offset = "0x15E2DD8", VA = "0x15E2DD8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x15E2E40", Offset = "0x15E2E40", VA = "0x15E2E40", Slot = "37")]
		public override void Rebuild(CanvasUpdate update)
		{
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x15E3178", Offset = "0x15E3178", VA = "0x15E3178", Slot = "76")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x15E31CC", Offset = "0x15E31CC", VA = "0x15E31CC", Slot = "77")]
		public virtual void Update(float deltaTime)
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x15E32A0", Offset = "0x15E32A0", VA = "0x15E32A0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x15E32E8", Offset = "0x15E32E8", VA = "0x15E32E8")]
		public Mesh GetLastMesh()
		{
			return null;
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x15E3868", Offset = "0x15E3868", VA = "0x15E3868")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x15E2980", Offset = "0x15E2980", VA = "0x15E2980")]
		public void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x15E2EA0", Offset = "0x15E2EA0", VA = "0x15E2EA0")]
		public void UpdateMesh()
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x15E3890", Offset = "0x15E3890", VA = "0x15E3890")]
		public SkeletonGraphic()
		{
		}
	}
	[Token(Token = "0x20004F0")]
	public class WaitForSpineAnimationComplete : IEnumerator
	{
		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_WasFired;

		[Token(Token = "0x1700032F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0x10B7744", Offset = "0x10B7744", VA = "0x10B7744", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x10B7520", Offset = "0x10B7520", VA = "0x10B7520")]
		public WaitForSpineAnimationComplete(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x10B7640", Offset = "0x10B7640", VA = "0x10B7640")]
		private void HandleComplete(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x10B7550", Offset = "0x10B7550", VA = "0x10B7550")]
		private void SafeSubscribe(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x10B765C", Offset = "0x10B765C", VA = "0x10B765C")]
		public WaitForSpineAnimationComplete NowWaitFor(TrackEntry trackEntry)
		{
			return null;
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x10B7680", Offset = "0x10B7680", VA = "0x10B7680", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x10B773C", Offset = "0x10B773C", VA = "0x10B773C", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	public class WaitForSpineEvent : IEnumerator
	{
		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private EventData m_TargetEvent;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_EventName;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimationState m_AnimationState;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_WasFired;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool m_unsubscribeAfterFiring;

		[Token(Token = "0x17000330")]
		public bool WillUnsubscribeAfterFiring
		{
			[Token(Token = "0x6001A8B")]
			[Address(RVA = "0x10B7CD8", Offset = "0x10B7CD8", VA = "0x10B7CD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A8C")]
			[Address(RVA = "0x10B7CE0", Offset = "0x10B7CE0", VA = "0x10B7CE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000331")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A92")]
			[Address(RVA = "0x10B804C", Offset = "0x10B804C", VA = "0x10B804C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x10B774C", Offset = "0x10B774C", VA = "0x10B774C")]
		private void Subscribe(AnimationState state, EventData eventDataReference, bool unsubscribe)
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x10B78A0", Offset = "0x10B78A0", VA = "0x10B78A0")]
		private void SubscribeByName(AnimationState state, string eventName, bool unsubscribe)
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x10B79EC", Offset = "0x10B79EC", VA = "0x10B79EC")]
		public WaitForSpineEvent(AnimationState state, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x10B7A34", Offset = "0x10B7A34", VA = "0x10B7A34")]
		public WaitForSpineEvent(SkeletonAnimation skeletonAnimation, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x10B7A84", Offset = "0x10B7A84", VA = "0x10B7A84")]
		public WaitForSpineEvent(AnimationState state, string eventName, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x10B7ACC", Offset = "0x10B7ACC", VA = "0x10B7ACC")]
		public WaitForSpineEvent(SkeletonAnimation skeletonAnimation, string eventName, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x10B7B1C", Offset = "0x10B7B1C", VA = "0x10B7B1C")]
		private void HandleAnimationStateEventByName(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x10B7C00", Offset = "0x10B7C00", VA = "0x10B7C00")]
		private void HandleAnimationStateEvent(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x10B7CEC", Offset = "0x10B7CEC", VA = "0x10B7CEC")]
		public WaitForSpineEvent NowWaitFor(AnimationState state, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
			return null;
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x10B7EA0", Offset = "0x10B7EA0", VA = "0x10B7EA0")]
		public WaitForSpineEvent NowWaitFor(AnimationState state, string eventName, bool unsubscribeAfterFiring = true)
		{
			return null;
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x10B7DD4", Offset = "0x10B7DD4", VA = "0x10B7DD4")]
		private void Clear(AnimationState state)
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x10B7F88", Offset = "0x10B7F88", VA = "0x10B7F88", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x10B8044", Offset = "0x10B8044", VA = "0x10B8044", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	public class WaitForSpineTrackEntryEnd : IEnumerator
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_WasFired;

		[Token(Token = "0x17000332")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A99")]
			[Address(RVA = "0x10B8268", Offset = "0x10B8268", VA = "0x10B8268", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x10B8054", Offset = "0x10B8054", VA = "0x10B8054")]
		public WaitForSpineTrackEntryEnd(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x10B8174", Offset = "0x10B8174", VA = "0x10B8174")]
		private void HandleEnd(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x10B8084", Offset = "0x10B8084", VA = "0x10B8084")]
		private void SafeSubscribe(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x10B8180", Offset = "0x10B8180", VA = "0x10B8180")]
		public WaitForSpineTrackEntryEnd NowWaitFor(TrackEntry trackEntry)
		{
			return null;
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x10B81A4", Offset = "0x10B81A4", VA = "0x10B81A4", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x10B8260", Offset = "0x10B8260", VA = "0x10B8260", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x20004F3")]
	public static class SkeletonExtensions
	{
		[Token(Token = "0x40010B5")]
		private const float ByteToFloat = 0.003921569f;

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x15E08A0", Offset = "0x15E08A0", VA = "0x15E08A0")]
		public static Color GetColor(this Skeleton s)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x15E08E0", Offset = "0x15E08E0", VA = "0x15E08E0")]
		public static Color GetColor(this RegionAttachment a)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x15E0920", Offset = "0x15E0920", VA = "0x15E0920")]
		public static Color GetColor(this MeshAttachment a)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x15E0960", Offset = "0x15E0960", VA = "0x15E0960")]
		public static Color GetColor(this Slot s)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x15E09A0", Offset = "0x15E09A0", VA = "0x15E09A0")]
		public static Color GetColorTintBlack(this Slot s)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x15E09E4", Offset = "0x15E09E4", VA = "0x15E09E4")]
		public static void SetColor(this Skeleton skeleton, Color color)
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x15E0A00", Offset = "0x15E0A00", VA = "0x15E0A00")]
		public static void SetColor(this Skeleton skeleton, Color32 color)
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x15E0A50", Offset = "0x15E0A50", VA = "0x15E0A50")]
		public static void SetColor(this Slot slot, Color color)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x15E0A6C", Offset = "0x15E0A6C", VA = "0x15E0A6C")]
		public static void SetColor(this Slot slot, Color32 color)
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x15E0ABC", Offset = "0x15E0ABC", VA = "0x15E0ABC")]
		public static void SetColor(this RegionAttachment attachment, Color color)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x15E0AD8", Offset = "0x15E0AD8", VA = "0x15E0AD8")]
		public static void SetColor(this RegionAttachment attachment, Color32 color)
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x15E0B28", Offset = "0x15E0B28", VA = "0x15E0B28")]
		public static void SetColor(this MeshAttachment attachment, Color color)
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x15E0B44", Offset = "0x15E0B44", VA = "0x15E0B44")]
		public static void SetColor(this MeshAttachment attachment, Color32 color)
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x15E0B94", Offset = "0x15E0B94", VA = "0x15E0B94")]
		public static void SetLocalScale(this Skeleton skeleton, Vector2 scale)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x15E0BAC", Offset = "0x15E0BAC", VA = "0x15E0BAC")]
		public static Matrix4x4 GetMatrix4x4(this Bone bone)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x15E0C0C", Offset = "0x15E0C0C", VA = "0x15E0C0C")]
		public static void SetLocalPosition(this Bone bone, Vector2 position)
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x15E0C24", Offset = "0x15E0C24", VA = "0x15E0C24")]
		public static void SetLocalPosition(this Bone bone, Vector3 position)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x15E0C3C", Offset = "0x15E0C3C", VA = "0x15E0C3C")]
		public static Vector2 GetLocalPosition(this Bone bone)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x15E0C54", Offset = "0x15E0C54", VA = "0x15E0C54")]
		public static Vector2 GetSkeletonSpacePosition(this Bone bone)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x15E0C70", Offset = "0x15E0C70", VA = "0x15E0C70")]
		public static Vector2 GetSkeletonSpacePosition(this Bone bone, Vector2 boneLocal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x15E0CAC", Offset = "0x15E0CAC", VA = "0x15E0CAC")]
		public static Vector3 GetWorldPosition(this Bone bone, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x15E0CDC", Offset = "0x15E0CDC", VA = "0x15E0CDC")]
		public static Vector3 GetWorldPosition(this Bone bone, Transform spineGameObjectTransform, float positionScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x15E0D14", Offset = "0x15E0D14", VA = "0x15E0D14")]
		public static Quaternion GetQuaternion(this Bone bone)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x15E0D8C", Offset = "0x15E0D8C", VA = "0x15E0D8C")]
		public static Quaternion GetLocalQuaternion(this Bone bone)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x15E0E08", Offset = "0x15E0E08", VA = "0x15E0E08")]
		public static Vector2 GetLocalScale(this Skeleton skeleton)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x15E0E20", Offset = "0x15E0E20", VA = "0x15E0E20")]
		public static void GetWorldToLocalMatrix(this Bone bone, out float ia, out float ib, out float ic, out float id)
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x15E0E70", Offset = "0x15E0E70", VA = "0x15E0E70")]
		public static Vector2 WorldToLocal(this Bone bone, Vector2 worldPosition)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x15E0EAC", Offset = "0x15E0EAC", VA = "0x15E0EAC")]
		public static Vector2 SetPositionSkeletonSpace(this Bone bone, Vector2 skeletonSpacePosition)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x15E0EE0", Offset = "0x15E0EE0", VA = "0x15E0EE0")]
		public static Material GetMaterial(this Attachment a)
		{
			return null;
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x15E1034", Offset = "0x15E1034", VA = "0x15E1034")]
		public static Vector2[] GetLocalVertices(this VertexAttachment va, Slot slot, Vector2[] buffer)
		{
			return null;
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x15E12D4", Offset = "0x15E12D4", VA = "0x15E12D4")]
		public static Vector2[] GetWorldVertices(this VertexAttachment a, Slot slot, Vector2[] buffer)
		{
			return null;
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x15E14AC", Offset = "0x15E14AC", VA = "0x15E14AC")]
		public static Vector3 GetWorldPosition(this PointAttachment attachment, Slot slot, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x15E1514", Offset = "0x15E1514", VA = "0x15E1514")]
		public static Vector3 GetWorldPosition(this PointAttachment attachment, Bone bone, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20004F4")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B20B0", Offset = "0x8B20B0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B20B0", Offset = "0x8B20B0")]
	public sealed class SkeletonUtility : MonoBehaviour
	{
		[Token(Token = "0x20004F5")]
		public delegate void SkeletonUtilityDelegate();

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform boneRoot;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x8B4660", Offset = "0x8B4660")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x8B4670", Offset = "0x8B4670")]
		public ISkeletonAnimation skeletonAnimation;

		[NonSerialized]
		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<SkeletonUtilityBone> boneComponents;

		[NonSerialized]
		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<SkeletonUtilityConstraint> constraintComponents;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool hasOverrideBones;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool hasConstraints;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool needToReprocessBones;

		[Token(Token = "0x14000026")]
		public event SkeletonUtilityDelegate OnReset
		{
			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0x14D3A34", Offset = "0x14D3A34", VA = "0x14D3A34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE5C8", Offset = "0x8BE5C8")]
			add
			{
			}
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0x14D3AD4", Offset = "0x14D3AD4", VA = "0x14D3AD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE5D8", Offset = "0x8BE5D8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x14D3334", Offset = "0x14D3334", VA = "0x14D3334")]
		public static PolygonCollider2D AddBoundingBoxGameObject(Skeleton skeleton, string skinName, string slotName, string attachmentName, Transform parent, bool isTrigger = true)
		{
			return null;
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x14D3720", Offset = "0x14D3720", VA = "0x14D3720")]
		public static PolygonCollider2D AddBoundingBoxGameObject(string name, BoundingBoxAttachment box, Slot slot, Transform parent, bool isTrigger = true)
		{
			return null;
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x14CF6A8", Offset = "0x14CF6A8", VA = "0x14CF6A8")]
		public static PolygonCollider2D AddBoundingBoxAsComponent(BoundingBoxAttachment box, Slot slot, GameObject gameObject, bool isTrigger = true)
		{
			return null;
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x14D3858", Offset = "0x14D3858", VA = "0x14D3858")]
		public static void SetColliderPointsLocal(PolygonCollider2D collider, Slot slot, BoundingBoxAttachment box)
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x14D3934", Offset = "0x14D3934", VA = "0x14D3934")]
		public static Bounds GetBoundingBoxBounds(BoundingBoxAttachment boundingBox, float depth = 0f)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x14CF750", Offset = "0x14CF750", VA = "0x14CF750")]
		public static Rigidbody2D AddBoneRigidbody2D(GameObject gameObject, bool isKinematic = true, float gravityScale = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x14D3B74", Offset = "0x14D3B74", VA = "0x14D3B74")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x14D3C28", Offset = "0x14D3C28", VA = "0x14D3C28")]
		public void ResubscribeEvents()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x14D3F00", Offset = "0x14D3F00", VA = "0x14D3F00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x14D47B4", Offset = "0x14D47B4", VA = "0x14D47B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x14D3C4C", Offset = "0x14D3C4C", VA = "0x14D3C4C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x14D47B8", Offset = "0x14D47B8", VA = "0x14D47B8")]
		private void HandleRendererReset(SkeletonRenderer r)
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x14D47E8", Offset = "0x14D47E8", VA = "0x14D47E8")]
		public void RegisterBone(SkeletonUtilityBone bone)
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x14D4884", Offset = "0x14D4884", VA = "0x14D4884")]
		public void UnregisterBone(SkeletonUtilityBone bone)
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x14D48E8", Offset = "0x14D48E8", VA = "0x14D48E8")]
		public void RegisterConstraint(SkeletonUtilityConstraint constraint)
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0x14D4984", Offset = "0x14D4984", VA = "0x14D4984")]
		public void UnregisterConstraint(SkeletonUtilityConstraint constraint)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x14D4204", Offset = "0x14D4204", VA = "0x14D4204")]
		public void CollectBones()
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x14D49E8", Offset = "0x14D49E8", VA = "0x14D49E8")]
		private void UpdateLocal(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x14D4BBC", Offset = "0x14D4BBC", VA = "0x14D4BBC")]
		private void UpdateWorld(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x14D4C78", Offset = "0x14D4C78", VA = "0x14D4C78")]
		private void UpdateComplete(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x14D4ABC", Offset = "0x14D4ABC", VA = "0x14D4ABC")]
		private void UpdateAllBones(SkeletonUtilityBone.UpdatePhase phase)
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x14D533C", Offset = "0x14D533C", VA = "0x14D533C")]
		public Transform GetBoneRoot()
		{
			return null;
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x14D5484", Offset = "0x14D5484", VA = "0x14D5484")]
		public GameObject SpawnRoot(SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x14D56B4", Offset = "0x14D56B4", VA = "0x14D56B4")]
		public GameObject SpawnHierarchy(SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x14D5740", Offset = "0x14D5740", VA = "0x14D5740")]
		public GameObject SpawnBoneRecursively(Bone bone, Transform parent, SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x14D5510", Offset = "0x14D5510", VA = "0x14D5510")]
		public GameObject SpawnBone(Bone bone, Transform parent, SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x14D59E4", Offset = "0x14D59E4", VA = "0x14D59E4")]
		public SkeletonUtility()
		{
		}
	}
	[Token(Token = "0x20004F6")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B2120", Offset = "0x8B2120")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B2120", Offset = "0x8B2120")]
	public class SkeletonUtilityBone : MonoBehaviour
	{
		[Token(Token = "0x20004F7")]
		public enum Mode
		{
			[Token(Token = "0x40010CF")]
			Follow,
			[Token(Token = "0x40010D0")]
			Override
		}

		[Token(Token = "0x20004F8")]
		public enum UpdatePhase
		{
			[Token(Token = "0x40010D2")]
			Local,
			[Token(Token = "0x40010D3")]
			World,
			[Token(Token = "0x40010D4")]
			Complete
		}

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string boneName;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform parentReference;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Mode mode;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool position;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool rotation;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool scale;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool zPosition;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4680", Offset = "0x8B4680")]
		public float overrideAlpha;

		[NonSerialized]
		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SkeletonUtility hierarchy;

		[NonSerialized]
		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Bone bone;

		[NonSerialized]
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool transformLerpComplete;

		[NonSerialized]
		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool valid;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform cachedTransform;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform skeletonTransform;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool incompatibleTransformMode;

		[Token(Token = "0x17000333")]
		public bool IncompatibleTransformMode
		{
			[Token(Token = "0x6001ADC")]
			[Address(RVA = "0x14D5A9C", Offset = "0x14D5A9C", VA = "0x14D5A9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x14D5838", Offset = "0x14D5838", VA = "0x14D5838")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x14D5AA4", Offset = "0x14D5AA4", VA = "0x14D5AA4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x14D5BC8", Offset = "0x14D5BC8", VA = "0x14D5BC8")]
		private void HandleOnReset()
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x14D5BCC", Offset = "0x14D5BCC", VA = "0x14D5BCC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x14D4C80", Offset = "0x14D4C80", VA = "0x14D4C80")]
		public void DoUpdate(UpdatePhase phase)
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x14D5CC0", Offset = "0x14D5CC0", VA = "0x14D5CC0")]
		public static bool BoneTransformModeIncompatible(Bone bone)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x14D5CF4", Offset = "0x14D5CF4", VA = "0x14D5CF4")]
		public void AddBoundingBox(string skinName, string slotName, string attachmentName)
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x14D5D80", Offset = "0x14D5D80", VA = "0x14D5D80")]
		public SkeletonUtilityBone()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B216C", Offset = "0x8B216C")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B216C", Offset = "0x8B216C")]
	public abstract class SkeletonUtilityConstraint : MonoBehaviour
	{
		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SkeletonUtilityBone bone;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SkeletonUtility hierarchy;

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x14D5D98", Offset = "0x14D5D98", VA = "0x14D5D98", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x14D5E28", Offset = "0x14D5E28", VA = "0x14D5E28", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001AE7")]
		public abstract void DoUpdate();

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x14D5E44", Offset = "0x14D5E44", VA = "0x14D5E44")]
		protected SkeletonUtilityConstraint()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x8B21DC", Offset = "0x8B21DC")]
	public abstract class SpineAttributeBase : PropertyAttribute
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string dataField;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string startsWith;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool includeNone;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool fallbackToTextField;

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x14D9BFC", Offset = "0x14D9BFC", VA = "0x14D9BFC")]
		protected SpineAttributeBase()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public class SpineBone : SpineAttributeBase
	{
		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x14DAD38", Offset = "0x14DAD38", VA = "0x14DAD38")]
		public SpineBone(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x14DAD8C", Offset = "0x14DAD8C", VA = "0x14DAD8C")]
		public static Bone GetBone(string boneName, SkeletonRenderer renderer)
		{
			return null;
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x14DADB8", Offset = "0x14DADB8", VA = "0x14DADB8")]
		public static BoneData GetBoneData(string boneName, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}
	}
	[Token(Token = "0x20004FC")]
	public class SpineSlot : SpineAttributeBase
	{
		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool containsBoundingBoxes;

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x14DB590", Offset = "0x14DB590", VA = "0x14DB590")]
		public SpineSlot(string startsWith = "", string dataField = "", bool containsBoundingBoxes = false, bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x20004FD")]
	public class SpineAnimation : SpineAttributeBase
	{
		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x14D9BA8", Offset = "0x14D9BA8", VA = "0x14D9BA8")]
		public SpineAnimation(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x20004FE")]
	public class SpineEvent : SpineAttributeBase
	{
		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool audioOnly;

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x14DADFC", Offset = "0x14DADFC", VA = "0x14DADFC")]
		public SpineEvent(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false, bool audioOnly = false)
		{
		}
	}
	[Token(Token = "0x20004FF")]
	public class SpineIkConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x14DB210", Offset = "0x14DB210", VA = "0x14DB210")]
		public SpineIkConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000500")]
	public class SpineTransformConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x14DB5F0", Offset = "0x14DB5F0", VA = "0x14DB5F0")]
		public SpineTransformConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000501")]
	public class SpinePathConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x14DB304", Offset = "0x14DB304", VA = "0x14DB304")]
		public SpinePathConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000502")]
	public class SpineSkin : SpineAttributeBase
	{
		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool defaultAsEmptyString;

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x14DB530", Offset = "0x14DB530", VA = "0x14DB530")]
		public SpineSkin(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false, bool defaultAsEmptyString = false)
		{
		}
	}
	[Token(Token = "0x2000503")]
	public class SpineAttachment : SpineAttributeBase
	{
		[Token(Token = "0x2000504")]
		public struct Hierarchy
		{
			[Token(Token = "0x40010E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string skin;

			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string slot;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0x1073E44", Offset = "0x1073E44", VA = "0x1073E44")]
			public Hierarchy(string fullPath)
			{
			}
		}

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool returnAttachmentPath;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool currentSkinOnly;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool placeholdersOnly;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string skinField;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string slotField;

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x14DAB78", Offset = "0x14DAB78", VA = "0x14DAB78")]
		public SpineAttachment(bool currentSkinOnly = true, bool returnAttachmentPath = false, bool placeholdersOnly = false, string slotField = "", string dataField = "", string skinField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x14DAC3C", Offset = "0x14DAC3C", VA = "0x14DAC3C")]
		public static Hierarchy GetHierarchy(string fullPath)
		{
			return default(Hierarchy);
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x14DAC54", Offset = "0x14DAC54", VA = "0x14DAC54")]
		public static Attachment GetAttachment(string attachmentPath, SkeletonData skeletonData)
		{
			return null;
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x14DACF8", Offset = "0x14DACF8", VA = "0x14DACF8")]
		public static Attachment GetAttachment(string attachmentPath, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}
	}
	[Token(Token = "0x2000505")]
	public class SpineAtlasRegion : PropertyAttribute
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string atlasAssetField;

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x14DAB4C", Offset = "0x14DAB4C", VA = "0x14DAB4C")]
		public SpineAtlasRegion(string atlasAssetField = "")
		{
		}
	}
}
namespace Spine.Unity.Playables
{
	[Token(Token = "0x2000506")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x8B2214", Offset = "0x8B2214")]
	public class SkeletonAnimationPlayableHandle : SpinePlayableHandleBase
	{
		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkeletonAnimation skeletonAnimation;

		[Token(Token = "0x17000334")]
		public override Skeleton Skeleton
		{
			[Token(Token = "0x6001AFA")]
			[Address(RVA = "0x12CFC20", Offset = "0x12CFC20", VA = "0x12CFC20", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		public override SkeletonData SkeletonData
		{
			[Token(Token = "0x6001AFB")]
			[Address(RVA = "0x12CFC3C", Offset = "0x12CFC3C", VA = "0x12CFC3C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x12CFC68", Offset = "0x12CFC68", VA = "0x12CFC68")]
		public SkeletonAnimationPlayableHandle()
		{
		}
	}
	[Token(Token = "0x2000507")]
	public delegate void SpineEventDelegate(Event e);
	[Token(Token = "0x2000508")]
	public abstract class SpinePlayableHandleBase : MonoBehaviour
	{
		[Token(Token = "0x17000336")]
		public abstract SkeletonData SkeletonData
		{
			[Token(Token = "0x6001B01")]
			get;
		}

		[Token(Token = "0x17000337")]
		public abstract Skeleton Skeleton
		{
			[Token(Token = "0x6001B02")]
			get;
		}

		[Token(Token = "0x14000027")]
		public event SpineEventDelegate AnimationEvents
		{
			[Token(Token = "0x6001B03")]
			[Address(RVA = "0x14DB358", Offset = "0x14DB358", VA = "0x14DB358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE5E8", Offset = "0x8BE5E8")]
			add
			{
			}
			[Token(Token = "0x6001B04")]
			[Address(RVA = "0x14DB3F8", Offset = "0x14DB3F8", VA = "0x14DB3F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE5F8", Offset = "0x8BE5F8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x14DB498", Offset = "0x14DB498", VA = "0x14DB498", Slot = "6")]
		public virtual void HandleEvents(ExposedList<Event> eventBuffer)
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x14DB528", Offset = "0x14DB528", VA = "0x14DB528")]
		protected SpinePlayableHandleBase()
		{
		}
	}
}
namespace Spine.Unity.Modules
{
	[Token(Token = "0x2000509")]
	public class AnimationMatchModifierAsset : SkeletonDataModifierAsset
	{
		[Token(Token = "0x200050A")]
		public static class AnimationTools
		{
			[Token(Token = "0x6001B09")]
			[Address(RVA = "0x10B88F8", Offset = "0x10B88F8", VA = "0x10B88F8")]
			public static void MatchAnimationTimelines(IEnumerable<Animation> animations, SkeletonData skeletonData)
			{
			}

			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0x10B95F0", Offset = "0x10B95F0", VA = "0x10B95F0")]
			private static Timeline GetFillerTimeline(Timeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0x10B9B18", Offset = "0x10B9B18", VA = "0x10B9B18")]
			private static RotateTimeline GetFillerTimeline(RotateTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B0C")]
			[Address(RVA = "0x10B9BA4", Offset = "0x10B9BA4", VA = "0x10B9BA4")]
			private static TranslateTimeline GetFillerTimeline(TranslateTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B0D")]
			[Address(RVA = "0x10B9C2C", Offset = "0x10B9C2C", VA = "0x10B9C2C")]
			private static ScaleTimeline GetFillerTimeline(ScaleTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B0E")]
			[Address(RVA = "0x10B9CB8", Offset = "0x10B9CB8", VA = "0x10B9CB8")]
			private static ShearTimeline GetFillerTimeline(ShearTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B0F")]
			[Address(RVA = "0x10B9D44", Offset = "0x10B9D44", VA = "0x10B9D44")]
			private static AttachmentTimeline GetFillerTimeline(AttachmentTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B10")]
			[Address(RVA = "0x10B9E18", Offset = "0x10B9E18", VA = "0x10B9E18")]
			private static ColorTimeline GetFillerTimeline(ColorTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B11")]
			[Address(RVA = "0x10B9EF0", Offset = "0x10B9EF0", VA = "0x10B9EF0")]
			private static TwoColorTimeline GetFillerTimeline(TwoColorTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B12")]
			[Address(RVA = "0x10B9FC8", Offset = "0x10B9FC8", VA = "0x10B9FC8")]
			private static DeformTimeline GetFillerTimeline(DeformTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B13")]
			[Address(RVA = "0x10BA0C0", Offset = "0x10BA0C0", VA = "0x10BA0C0")]
			private static DrawOrderTimeline GetFillerTimeline(DrawOrderTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B14")]
			[Address(RVA = "0x10BA13C", Offset = "0x10BA13C", VA = "0x10BA13C")]
			private static IkConstraintTimeline GetFillerTimeline(IkConstraintTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B15")]
			[Address(RVA = "0x10BA214", Offset = "0x10BA214", VA = "0x10BA214")]
			private static TransformConstraintTimeline GetFillerTimeline(TransformConstraintTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B16")]
			[Address(RVA = "0x10BA2DC", Offset = "0x10BA2DC", VA = "0x10BA2DC")]
			private static PathConstraintPositionTimeline GetFillerTimeline(PathConstraintPositionTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B17")]
			[Address(RVA = "0x10BA3A8", Offset = "0x10BA3A8", VA = "0x10BA3A8")]
			private static PathConstraintSpacingTimeline GetFillerTimeline(PathConstraintSpacingTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}

			[Token(Token = "0x6001B18")]
			[Address(RVA = "0x10BA474", Offset = "0x10BA474", VA = "0x10BA474")]
			private static PathConstraintMixTimeline GetFillerTimeline(PathConstraintMixTimeline timeline, SkeletonData skeletonData)
			{
				return null;
			}
		}

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool matchAllAnimations;

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x1177F44", Offset = "0x1177F44", VA = "0x1177F44", Slot = "4")]
		public override void Apply(SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x1177F6C", Offset = "0x1177F6C", VA = "0x1177F6C")]
		public AnimationMatchModifierAsset()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B224C", Offset = "0x8B224C")]
	public class SkeletonRendererCustomMaterials : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200050C")]
		public struct SlotMaterialOverride : IEquatable<SlotMaterialOverride>
		{
			[Token(Token = "0x40010ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overrideDisabled;

			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpineSlot", RVA = "0x8B46C8", Offset = "0x8B46C8")]
			public string slotName;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material material;

			[Token(Token = "0x6001B20")]
			[Address(RVA = "0x1073A00", Offset = "0x1073A00", VA = "0x1073A00", Slot = "4")]
			public bool Equals(SlotMaterialOverride other)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200050D")]
		public struct AtlasMaterialOverride : IEquatable<AtlasMaterialOverride>
		{
			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overrideDisabled;

			[Token(Token = "0x40010F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Material originalMaterial;

			[Token(Token = "0x40010F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material replacementMaterial;

			[Token(Token = "0x6001B21")]
			[Address(RVA = "0x1073910", Offset = "0x1073910", VA = "0x1073910", Slot = "4")]
			public bool Equals(AtlasMaterialOverride other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected List<SlotMaterialOverride> customSlotMaterials;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected List<AtlasMaterialOverride> customMaterialOverrides;

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x14D25D0", Offset = "0x14D25D0", VA = "0x14D25D0")]
		private void SetCustomSlotMaterials()
		{
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x14D2780", Offset = "0x14D2780", VA = "0x14D2780")]
		private void RemoveCustomSlotMaterials()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x14D2998", Offset = "0x14D2998", VA = "0x14D2998")]
		private void SetCustomMaterialOverrides()
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x14D2B14", Offset = "0x14D2B14", VA = "0x14D2B14")]
		private void RemoveCustomMaterialOverrides()
		{
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x14D2CFC", Offset = "0x14D2CFC", VA = "0x14D2CFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x14D2E54", Offset = "0x14D2E54", VA = "0x14D2E54")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x14D2F28", Offset = "0x14D2F28", VA = "0x14D2F28")]
		public SkeletonRendererCustomMaterials()
		{
		}
	}
	[Token(Token = "0x200050E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B225C", Offset = "0x8B225C")]
	public class SkeletonGhost : MonoBehaviour
	{
		[Token(Token = "0x40010F3")]
		private const HideFlags GhostHideFlags = HideFlags.HideInHierarchy;

		[Token(Token = "0x40010F4")]
		private const string GhostingShaderName = "Spine/Special/SkeletonGhost";

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B4728", Offset = "0x8B4728")]
		public bool ghostingEnabled;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4760", Offset = "0x8B4760")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x8B4760", Offset = "0x8B4760")]
		public float spawnInterval;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B47C0", Offset = "0x8B47C0")]
		public int maximumGhosts;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fadeSpeed;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B47F8", Offset = "0x8B47F8")]
		public Shader ghostShader;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color32 color;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4830", Offset = "0x8B4830")]
		public bool additive;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4868", Offset = "0x8B4868")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4868", Offset = "0x8B4868")]
		public float textureFade;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B48BC", Offset = "0x8B48BC")]
		public bool sortWithDistanceOnly;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float zOffset;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float nextSpawnTime;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SkeletonGhostRenderer[] pool;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int poolIndex;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Dictionary<Material, Material> materialTable;

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x15E1574", Offset = "0x15E1574", VA = "0x15E1574")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x15E157C", Offset = "0x15E157C", VA = "0x15E157C")]
		public void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x15E19B4", Offset = "0x15E19B4", VA = "0x15E19B4")]
		private void OnEvent(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x15E1BE0", Offset = "0x15E1BE0", VA = "0x15E1BE0")]
		private void Ghosting(float val)
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x15E1BF0", Offset = "0x15E1BF0", VA = "0x15E1BF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x15E2138", Offset = "0x15E2138", VA = "0x15E2138")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x15E1A6C", Offset = "0x15E1A6C", VA = "0x15E1A6C")]
		private static Color32 HexToColor(string hex)
		{
			return default(Color32);
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x15E2480", Offset = "0x15E2480", VA = "0x15E2480")]
		public SkeletonGhost()
		{
		}
	}
	[Token(Token = "0x200050F")]
	public class SkeletonGhostRenderer : MonoBehaviour
	{
		[Token(Token = "0x2000510")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B22BC", Offset = "0x8B22BC")]
		private sealed class <Fade>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400110E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400110F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonGhostRenderer <>4__this;

			[Token(Token = "0x4001111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Color32 <black>5__2;

			[Token(Token = "0x4001112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <t>5__3;

			[Token(Token = "0x4001113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <hardTimeLimit>5__4;

			[Token(Token = "0x17000338")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B34")]
				[Address(RVA = "0x107054C", Offset = "0x107054C", VA = "0x107054C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000339")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B36")]
				[Address(RVA = "0x1070594", Offset = "0x1070594", VA = "0x1070594", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B31")]
			[Address(RVA = "0x107033C", Offset = "0x107033C", VA = "0x107033C")]
			[DebuggerHidden]
			public <Fade>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0x1070368", Offset = "0x1070368", VA = "0x1070368", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B33")]
			[Address(RVA = "0x107036C", Offset = "0x107036C", VA = "0x107036C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B35")]
			[Address(RVA = "0x1070554", Offset = "0x1070554", VA = "0x1070554", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000511")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B22CC", Offset = "0x8B22CC")]
		private sealed class <FadeAdditive>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001115")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001116")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonGhostRenderer <>4__this;

			[Token(Token = "0x4001117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Color32 <black>5__2;

			[Token(Token = "0x4001118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <t>5__3;

			[Token(Token = "0x4001119")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <hardTimeLimit>5__4;

			[Token(Token = "0x1700033A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B3A")]
				[Address(RVA = "0x10707AC", Offset = "0x10707AC", VA = "0x10707AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3C")]
				[Address(RVA = "0x10707F4", Offset = "0x10707F4", VA = "0x10707F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0x107059C", Offset = "0x107059C", VA = "0x107059C")]
			[DebuggerHidden]
			public <FadeAdditive>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0x10705C8", Offset = "0x10705C8", VA = "0x10705C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B39")]
			[Address(RVA = "0x10705CC", Offset = "0x10705CC", VA = "0x10705CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0x10707B4", Offset = "0x10707B4", VA = "0x10707B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Color32 TransparentBlack;

		[Token(Token = "0x4001107")]
		private const string colorPropertyName = "_Color";

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float fadeSpeed;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Color32 startColor;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshFilter meshFilter;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MaterialPropertyBlock mpb;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int colorId;

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x15E2558", Offset = "0x15E2558", VA = "0x15E2558")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x15E1F9C", Offset = "0x15E1F9C", VA = "0x15E1F9C")]
		public void Initialize(Mesh mesh, Material[] materials, Color32 color, bool additive, float speed, int sortingLayerID, int sortingOrder)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x15E26A8", Offset = "0x15E26A8", VA = "0x15E26A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE608", Offset = "0x8BE608")]
		private IEnumerator Fade()
		{
			return null;
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x15E263C", Offset = "0x15E263C", VA = "0x15E263C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE668", Offset = "0x8BE668")]
		private IEnumerator FadeAdditive()
		{
			return null;
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x15E234C", Offset = "0x15E234C", VA = "0x15E234C")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x15E2714", Offset = "0x15E2714", VA = "0x15E2714")]
		public SkeletonGhostRenderer()
		{
		}
	}
	[Token(Token = "0x2000512")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B22DC", Offset = "0x8B22DC")]
	public class SkeletonRagdoll : MonoBehaviour
	{
		[Token(Token = "0x2000513")]
		public class LayerFieldAttribute : PropertyAttribute
		{
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0x1072CD8", Offset = "0x1072CD8", VA = "0x1072CD8")]
			public LayerFieldAttribute()
			{
			}
		}

		[Token(Token = "0x2000514")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B233C", Offset = "0x8B233C")]
		private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonRagdoll <>4__this;

			[Token(Token = "0x17000342")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B55")]
				[Address(RVA = "0x1072C88", Offset = "0x1072C88", VA = "0x1072C88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000343")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B57")]
				[Address(RVA = "0x1072CD0", Offset = "0x1072CD0", VA = "0x1072CD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B52")]
			[Address(RVA = "0x10729E8", Offset = "0x10729E8", VA = "0x10729E8")]
			[DebuggerHidden]
			public <Start>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001B53")]
			[Address(RVA = "0x1072A14", Offset = "0x1072A14", VA = "0x1072A14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B54")]
			[Address(RVA = "0x1072A18", Offset = "0x1072A18", VA = "0x1072A18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B56")]
			[Address(RVA = "0x1072C90", Offset = "0x1072C90", VA = "0x1072C90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000515")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B234C", Offset = "0x8B234C")]
		private sealed class <SmoothMixCoroutine>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonRagdoll <>4__this;

			[Token(Token = "0x4001137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float target;

			[Token(Token = "0x4001138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x4001139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startTime>5__2;

			[Token(Token = "0x400113A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startMix>5__3;

			[Token(Token = "0x17000344")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B5B")]
				[Address(RVA = "0x1072998", Offset = "0x1072998", VA = "0x1072998", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000345")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B5D")]
				[Address(RVA = "0x10729E0", Offset = "0x10729E0", VA = "0x10729E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B58")]
			[Address(RVA = "0x107289C", Offset = "0x107289C", VA = "0x107289C")]
			[DebuggerHidden]
			public <SmoothMixCoroutine>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6001B59")]
			[Address(RVA = "0x10728C8", Offset = "0x10728C8", VA = "0x10728C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B5A")]
			[Address(RVA = "0x10728CC", Offset = "0x10728CC", VA = "0x10728CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0x10729A0", Offset = "0x10729A0", VA = "0x10729A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform parentSpaceHelper;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B48F4", Offset = "0x8B48F4")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B48F4", Offset = "0x8B48F4")]
		public string startingBoneName;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B4978", Offset = "0x8B4978")]
		public List<string> stopBoneNames;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B49D4", Offset = "0x8B49D4")]
		public bool applyOnStart;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4A0C", Offset = "0x8B4A0C")]
		public bool disableIK;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool disableOtherConstraints;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4A44", Offset = "0x8B4A44")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x8B4A44", Offset = "0x8B4A44")]
		public bool pinStartBone;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4A94", Offset = "0x8B4A94")]
		public bool enableJointCollision;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool useGravity;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4ACC", Offset = "0x8B4ACC")]
		public float thickness;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4B04", Offset = "0x8B4B04")]
		public float rotationLimit;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootMass;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4B3C", Offset = "0x8B4B3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4B3C", Offset = "0x8B4B3C")]
		public float massFalloffFactor;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4B94", Offset = "0x8B4B94")]
		public int colliderLayer;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4BCC", Offset = "0x8B4BCC")]
		public float mix;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ISkeletonAnimation targetSkeletonComponent;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Skeleton skeleton;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Bone, Transform> boneTable;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform ragdollRoot;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B4BE4", Offset = "0x8B4BE4")]
		private Rigidbody <RootRigidbody>k__BackingField;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B4BF4", Offset = "0x8B4BF4")]
		private Bone <StartingBone>k__BackingField;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootOffset;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool isActive;

		[Token(Token = "0x1700033C")]
		public Rigidbody RootRigidbody
		{
			[Token(Token = "0x6001B3D")]
			[Address(RVA = "0x15EB8B8", Offset = "0x15EB8B8", VA = "0x15EB8B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE768", Offset = "0x8BE768")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B3E")]
			[Address(RVA = "0x15EB8C0", Offset = "0x15EB8C0", VA = "0x15EB8C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE778", Offset = "0x8BE778")]
			private set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public Bone StartingBone
		{
			[Token(Token = "0x6001B3F")]
			[Address(RVA = "0x15EB8C8", Offset = "0x15EB8C8", VA = "0x15EB8C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE788", Offset = "0x8BE788")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B40")]
			[Address(RVA = "0x15EB8D0", Offset = "0x15EB8D0", VA = "0x15EB8D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE798", Offset = "0x8BE798")]
			private set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public Vector3 RootOffset
		{
			[Token(Token = "0x6001B41")]
			[Address(RVA = "0x15EB8D8", Offset = "0x15EB8D8", VA = "0x15EB8D8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700033F")]
		public bool IsActive
		{
			[Token(Token = "0x6001B42")]
			[Address(RVA = "0x15EB8E4", Offset = "0x15EB8E4", VA = "0x15EB8E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000340")]
		public Rigidbody[] RigidbodyArray
		{
			[Token(Token = "0x6001B44")]
			[Address(RVA = "0x15EB958", Offset = "0x15EB958", VA = "0x15EB958")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000341")]
		public Vector3 EstimatedSkeletonPosition
		{
			[Token(Token = "0x6001B45")]
			[Address(RVA = "0x15EBB98", Offset = "0x15EBB98", VA = "0x15EBB98")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x15EB8EC", Offset = "0x15EB8EC", VA = "0x15EB8EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE7A8", Offset = "0x8BE7A8")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x15EBBDC", Offset = "0x15EBBDC", VA = "0x15EBBDC")]
		public void Apply()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x15ECBDC", Offset = "0x15ECBDC", VA = "0x15ECBDC")]
		public Coroutine SmoothMix(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x15ECC08", Offset = "0x15ECC08", VA = "0x15ECC08")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE808", Offset = "0x8BE808")]
		private IEnumerator SmoothMixCoroutine(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x15ECC88", Offset = "0x15ECC88", VA = "0x15ECC88")]
		public void SetSkeletonPosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x15ED344", Offset = "0x15ED344", VA = "0x15ED344")]
		public void Remove()
		{
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x15ED5FC", Offset = "0x15ED5FC", VA = "0x15ED5FC")]
		public Rigidbody GetRigidbody(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x15EC838", Offset = "0x15EC838", VA = "0x15EC838")]
		private void RecursivelyCreateBoneProxies(Bone b)
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x15ECED0", Offset = "0x15ECED0", VA = "0x15ECED0")]
		private void UpdateSpineSkeleton(ISkeletonAnimation skeletonRenderer)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x15ED6D4", Offset = "0x15ED6D4", VA = "0x15ED6D4")]
		private List<Collider> AttachBoundingBoxRagdollColliders(Bone b)
		{
			return null;
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x15ECBAC", Offset = "0x15ECBAC", VA = "0x15ECBAC")]
		private static float GetPropagatedRotation(Bone b)
		{
			return default(float);
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x15EDC70", Offset = "0x15EDC70", VA = "0x15EDC70")]
		public SkeletonRagdoll()
		{
		}
	}
	[Token(Token = "0x2000516")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B235C", Offset = "0x8B235C")]
	public class SkeletonRagdoll2D : MonoBehaviour
	{
		[Token(Token = "0x2000517")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B23BC", Offset = "0x8B23BC")]
		private sealed class <Start>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonRagdoll2D <>4__this;

			[Token(Token = "0x1700034C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B76")]
				[Address(RVA = "0x10730B0", Offset = "0x10730B0", VA = "0x10730B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B78")]
				[Address(RVA = "0x10730F8", Offset = "0x10730F8", VA = "0x10730F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x1072E2C", Offset = "0x1072E2C", VA = "0x1072E2C")]
			[DebuggerHidden]
			public <Start>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001B74")]
			[Address(RVA = "0x1072E58", Offset = "0x1072E58", VA = "0x1072E58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B75")]
			[Address(RVA = "0x1072E5C", Offset = "0x1072E5C", VA = "0x1072E5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B77")]
			[Address(RVA = "0x10730B8", Offset = "0x10730B8", VA = "0x10730B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000518")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B23CC", Offset = "0x8B23CC")]
		private sealed class <SmoothMixCoroutine>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkeletonRagdoll2D <>4__this;

			[Token(Token = "0x4001157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float target;

			[Token(Token = "0x4001158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x4001159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startTime>5__2;

			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startMix>5__3;

			[Token(Token = "0x1700034E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B7C")]
				[Address(RVA = "0x1072DDC", Offset = "0x1072DDC", VA = "0x1072DDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B7E")]
				[Address(RVA = "0x1072E24", Offset = "0x1072E24", VA = "0x1072E24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B79")]
			[Address(RVA = "0x1072CE0", Offset = "0x1072CE0", VA = "0x1072CE0")]
			[DebuggerHidden]
			public <SmoothMixCoroutine>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6001B7A")]
			[Address(RVA = "0x1072D0C", Offset = "0x1072D0C", VA = "0x1072D0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B7B")]
			[Address(RVA = "0x1072D10", Offset = "0x1072D10", VA = "0x1072D10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B7D")]
			[Address(RVA = "0x1072DE4", Offset = "0x1072DE4", VA = "0x1072DE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform parentSpaceHelper;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B4C04", Offset = "0x8B4C04")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B4C04", Offset = "0x8B4C04")]
		public string startingBoneName;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x8B4C88", Offset = "0x8B4C88")]
		public List<string> stopBoneNames;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x8B4CE4", Offset = "0x8B4CE4")]
		public bool applyOnStart;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4D1C", Offset = "0x8B4D1C")]
		public bool disableIK;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool disableOtherConstraints;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4D54", Offset = "0x8B4D54")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x8B4D54", Offset = "0x8B4D54")]
		public bool pinStartBone;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gravityScale;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4DA0", Offset = "0x8B4DA0")]
		public float thickness;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4DD8", Offset = "0x8B4DD8")]
		public float rotationLimit;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootMass;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4E10", Offset = "0x8B4E10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4E10", Offset = "0x8B4E10")]
		public float massFalloffFactor;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4E68", Offset = "0x8B4E68")]
		[AttributeAttribute(Name = "LayerFieldAttribute", RVA = "0x8B4E68", Offset = "0x8B4E68")]
		public int colliderLayer;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x8B4EB4", Offset = "0x8B4EB4")]
		public float mix;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ISkeletonAnimation targetSkeletonComponent;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Skeleton skeleton;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Bone, Transform> boneTable;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform ragdollRoot;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B4ECC", Offset = "0x8B4ECC")]
		private Rigidbody2D <RootRigidbody>k__BackingField;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B4EDC", Offset = "0x8B4EDC")]
		private Bone <StartingBone>k__BackingField;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 rootOffset;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool isActive;

		[Token(Token = "0x17000346")]
		public Rigidbody2D RootRigidbody
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0x14CD180", Offset = "0x14CD180", VA = "0x14CD180")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE908", Offset = "0x8BE908")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0x14CD188", Offset = "0x14CD188", VA = "0x14CD188")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE918", Offset = "0x8BE918")]
			private set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public Bone StartingBone
		{
			[Token(Token = "0x6001B60")]
			[Address(RVA = "0x14CD190", Offset = "0x14CD190", VA = "0x14CD190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE928", Offset = "0x8BE928")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B61")]
			[Address(RVA = "0x14CD198", Offset = "0x14CD198", VA = "0x14CD198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BE938", Offset = "0x8BE938")]
			private set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public Vector3 RootOffset
		{
			[Token(Token = "0x6001B62")]
			[Address(RVA = "0x14CD1A0", Offset = "0x14CD1A0", VA = "0x14CD1A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000349")]
		public bool IsActive
		{
			[Token(Token = "0x6001B63")]
			[Address(RVA = "0x14CD1AC", Offset = "0x14CD1AC", VA = "0x14CD1AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034A")]
		public Rigidbody2D[] RigidbodyArray
		{
			[Token(Token = "0x6001B65")]
			[Address(RVA = "0x14CD220", Offset = "0x14CD220", VA = "0x14CD220")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034B")]
		public Vector3 EstimatedSkeletonPosition
		{
			[Token(Token = "0x6001B66")]
			[Address(RVA = "0x14CD460", Offset = "0x14CD460", VA = "0x14CD460")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x14CD1B4", Offset = "0x14CD1B4", VA = "0x14CD1B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE948", Offset = "0x8BE948")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x14CD4A0", Offset = "0x14CD4A0", VA = "0x14CD4A0")]
		public void Apply()
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x14CE4F8", Offset = "0x14CE4F8", VA = "0x14CE4F8")]
		public Coroutine SmoothMix(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x14CE524", Offset = "0x14CE524", VA = "0x14CE524")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BE9A8", Offset = "0x8BE9A8")]
		private IEnumerator SmoothMixCoroutine(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x14CE5A4", Offset = "0x14CE5A4", VA = "0x14CE5A4")]
		public void SetSkeletonPosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x14CEC60", Offset = "0x14CEC60", VA = "0x14CEC60")]
		public void Remove()
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x14CEF18", Offset = "0x14CEF18", VA = "0x14CEF18")]
		public Rigidbody2D GetRigidbody(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x14CE0E4", Offset = "0x14CE0E4", VA = "0x14CE0E4")]
		private void RecursivelyCreateBoneProxies(Bone b)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x14CE7EC", Offset = "0x14CE7EC", VA = "0x14CE7EC")]
		private void UpdateSpineSkeleton(ISkeletonAnimation animatedSkeleton)
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x14CEFF0", Offset = "0x14CEFF0", VA = "0x14CEFF0")]
		private static List<Collider2D> AttachBoundingBoxRagdollColliders(Bone b, GameObject go, Skeleton skeleton, float gravityScale)
		{
			return null;
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x14CE4C8", Offset = "0x14CE4C8", VA = "0x14CE4C8")]
		private static float GetPropagatedRotation(Bone b)
		{
			return default(float);
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x14CF850", Offset = "0x14CF850", VA = "0x14CF850")]
		private static Vector3 FlipScale(bool flipX, bool flipY)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x14CF86C", Offset = "0x14CF86C", VA = "0x14CF86C")]
		public SkeletonRagdoll2D()
		{
		}
	}
	[Token(Token = "0x2000519")]
	public class SkeletonGraphicMirror : MonoBehaviour
	{
		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkeletonRenderer source;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mirrorOnStart;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool restoreOnDisable;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkeletonGraphic skeletonGraphic;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Skeleton originalSkeleton;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool originalFreeze;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture2D overrideTexture;

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x15E3928", Offset = "0x15E3928", VA = "0x15E3928")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x15E397C", Offset = "0x15E397C", VA = "0x15E397C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x15E3AF4", Offset = "0x15E3AF4", VA = "0x15E3AF4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x15E3B0C", Offset = "0x15E3B0C", VA = "0x15E3B0C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x15E398C", Offset = "0x15E398C", VA = "0x15E398C")]
		public void StartMirroring()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x15E3B74", Offset = "0x15E3B74", VA = "0x15E3B74")]
		public void UpdateTexture(Texture2D newOverrideTexture)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x15E3B1C", Offset = "0x15E3B1C", VA = "0x15E3B1C")]
		public void RestoreIndependentSkeleton()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x15E3C14", Offset = "0x15E3C14", VA = "0x15E3C14")]
		public SkeletonGraphicMirror()
		{
		}
	}
	[Token(Token = "0x200051A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B23DC", Offset = "0x8B23DC")]
	public class SkeletonPartsRenderer : MonoBehaviour
	{
		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshGenerator meshGenerator;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRendererBuffers buffers;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x17000350")]
		public MeshGenerator MeshGenerator
		{
			[Token(Token = "0x6001B87")]
			[Address(RVA = "0x15EB230", Offset = "0x15EB230", VA = "0x15EB230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000351")]
		public MeshRenderer MeshRenderer
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0x15EB364", Offset = "0x15EB364", VA = "0x15EB364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000352")]
		public MeshFilter MeshFilter
		{
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0x15EB388", Offset = "0x15EB388", VA = "0x15EB388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x15EB254", Offset = "0x15EB254", VA = "0x15EB254")]
		private void LazyIntialize()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x15EB3AC", Offset = "0x15EB3AC", VA = "0x15EB3AC")]
		public void ClearMesh()
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x15EB3E0", Offset = "0x15EB3E0", VA = "0x15EB3E0")]
		public void RenderParts(ExposedList<SubmeshInstruction> instructions, int startSubmesh, int endSubmesh)
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x15EB630", Offset = "0x15EB630", VA = "0x15EB630")]
		public void SetPropertyBlock(MaterialPropertyBlock block)
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x15EB668", Offset = "0x15EB668", VA = "0x15EB668")]
		public static SkeletonPartsRenderer NewPartsRendererGameObject(Transform parent, string name, int sortingOrder = 0)
		{
			return null;
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x15EB854", Offset = "0x15EB854", VA = "0x15EB854")]
		public SkeletonPartsRenderer()
		{
		}
	}
	[Token(Token = "0x200051B")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B2464", Offset = "0x8B2464")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x8B2464", Offset = "0x8B2464")]
	public class SkeletonRenderSeparator : MonoBehaviour
	{
		[Token(Token = "0x4001167")]
		public const int DefaultSortingOrderIncrement = 5;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer mainMeshRenderer;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool copyPropertyBlock;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4EFC", Offset = "0x8B4EFC")]
		public bool copyMeshRendererFlags;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<SkeletonPartsRenderer> partsRenderers;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MaterialPropertyBlock copiedBlock;

		[Token(Token = "0x17000353")]
		public SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x6001B90")]
			[Address(RVA = "0x14CF968", Offset = "0x14CF968", VA = "0x14CF968")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B91")]
			[Address(RVA = "0x14CF970", Offset = "0x14CF970", VA = "0x14CF970")]
			set
			{
			}
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x14CFB08", Offset = "0x14CFB08", VA = "0x14CFB08")]
		public static SkeletonRenderSeparator AddToSkeletonRenderer(SkeletonRenderer skeletonRenderer, int sortingLayerID = 0, int extraPartsRenderers = 0, int sortingOrderIncrement = 5, int baseSortingOrder = 0, bool addMinimumPartsRenderers = true)
		{
			return null;
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x14D0054", Offset = "0x14D0054", VA = "0x14D0054")]
		public SkeletonPartsRenderer AddPartsRenderer(int sortingOrderIncrement = 5, [Optional] string name)
		{
			return null;
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x14CFD44", Offset = "0x14CFD44", VA = "0x14CFD44")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x14D0234", Offset = "0x14D0234", VA = "0x14D0234")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x14D0404", Offset = "0x14D0404", VA = "0x14D0404")]
		private void HandleRender(SkeletonRendererInstruction instruction)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x14D0674", Offset = "0x14D0674", VA = "0x14D0674")]
		public SkeletonRenderSeparator()
		{
		}
	}
	[Token(Token = "0x200051C")]
	public class SkeletonUtilityEyeConstraint : SkeletonUtilityConstraint
	{
		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] eyes;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float radius;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform target;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 targetPosition;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float speed;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] origins;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 centerPoint;

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x14D5E4C", Offset = "0x14D5E4C", VA = "0x14D5E4C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x14D5FF8", Offset = "0x14D5FF8", VA = "0x14D5FF8", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x14D6030", Offset = "0x14D6030", VA = "0x14D6030", Slot = "6")]
		public override void DoUpdate()
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x14D627C", Offset = "0x14D627C", VA = "0x14D627C")]
		public SkeletonUtilityEyeConstraint()
		{
		}
	}
	[Token(Token = "0x200051D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x8B24B0", Offset = "0x8B24B0")]
	[AttributeAttribute(Name = "ExecuteAlways", RVA = "0x8B24B0", Offset = "0x8B24B0")]
	public class SkeletonUtilityGroundConstraint : SkeletonUtilityConstraint
	{
		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4F34", Offset = "0x8B4F34")]
		public LayerMask groundMask;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4F6C", Offset = "0x8B4F6C")]
		public bool use2D;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4FA4", Offset = "0x8B4FA4")]
		public bool useRadius;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B4FDC", Offset = "0x8B4FDC")]
		public float castRadius;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B5014", Offset = "0x8B5014")]
		public float castDistance;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B504C", Offset = "0x8B504C")]
		public float castOffset;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B5084", Offset = "0x8B5084")]
		public float groundOffset;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B50BC", Offset = "0x8B50BC")]
		public float adjustSpeed;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 rayOrigin;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 rayDir;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float hitY;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastHitY;

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x14D6294", Offset = "0x14D6294", VA = "0x14D6294", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x14D62D4", Offset = "0x14D62D4", VA = "0x14D62D4", Slot = "6")]
		public override void DoUpdate()
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x14D66EC", Offset = "0x14D66EC", VA = "0x14D66EC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x14D6828", Offset = "0x14D6828", VA = "0x14D6828")]
		public SkeletonUtilityGroundConstraint()
		{
		}
	}
	[Token(Token = "0x200051E")]
	public class SkeletonUtilityKinematicShadow : MonoBehaviour
	{
		[Token(Token = "0x200051F")]
		private struct TransformPair
		{
			[Token(Token = "0x4001187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform dest;

			[Token(Token = "0x4001188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform src;
		}

		[Token(Token = "0x2000520")]
		public enum PhysicsSystem
		{
			[Token(Token = "0x400118A")]
			Physics2D,
			[Token(Token = "0x400118B")]
			Physics3D
		}

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x8B50F4", Offset = "0x8B50F4")]
		public bool detachedShadow;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform parent;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool hideShadow;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PhysicsSystem physicsSystem;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject shadowRoot;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<TransformPair> shadowTable;

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x14D6854", Offset = "0x14D6854", VA = "0x14D6854")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x14D6DDC", Offset = "0x14D6DDC", VA = "0x14D6DDC")]
		private static void DestroyComponents(Component[] components)
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x14D6EA4", Offset = "0x14D6EA4", VA = "0x14D6EA4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x14D7098", Offset = "0x14D7098", VA = "0x14D7098")]
		public SkeletonUtilityKinematicShadow()
		{
		}
	}
	[Token(Token = "0x2000521")]
	[AttributeAttribute(Name = "DisallowMultipleComponent", RVA = "0x8B2520", Offset = "0x8B2520")]
	public class SlotBlendModes : MonoBehaviour
	{
		[Token(Token = "0x2000522")]
		public struct MaterialTexturePair
		{
			[Token(Token = "0x4001192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Texture2D texture2D;

			[Token(Token = "0x4001193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Material material;
		}

		[Token(Token = "0x2000523")]
		internal class MaterialWithRefcount
		{
			[Token(Token = "0x4001194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material materialClone;

			[Token(Token = "0x4001195")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int refcount;

			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0x1073E04", Offset = "0x1073E04", VA = "0x1073E04")]
			public MaterialWithRefcount(Material mat)
			{
			}
		}

		[Token(Token = "0x2000524")]
		internal struct SlotMaterialTextureTuple
		{
			[Token(Token = "0x4001196")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Slot slot;

			[Token(Token = "0x4001197")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Texture2D texture2D;

			[Token(Token = "0x4001198")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material material;

			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0x1073E38", Offset = "0x1073E38", VA = "0x1073E38")]
			public SlotMaterialTextureTuple(Slot slot, Material material, Texture2D texture)
			{
			}
		}

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<MaterialTexturePair, MaterialWithRefcount> materialTable;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material multiplyMaterialSource;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material screenMaterialSource;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D texture;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SlotMaterialTextureTuple[] slotsWithCustomMaterial;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B512C", Offset = "0x8B512C")]
		private bool <Applied>k__BackingField;

		[Token(Token = "0x17000354")]
		internal static Dictionary<MaterialTexturePair, MaterialWithRefcount> MaterialTable
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0x14D8B1C", Offset = "0x14D8B1C", VA = "0x14D8B1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000355")]
		public bool Applied
		{
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0x14D8F64", Offset = "0x14D8F64", VA = "0x14D8F64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BEAA8", Offset = "0x8BEAA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0x14D8F6C", Offset = "0x14D8F6C", VA = "0x14D8F6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8BEAB8", Offset = "0x8BEAB8")]
			private set
			{
			}
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x14D8BC0", Offset = "0x14D8BC0", VA = "0x14D8BC0")]
		internal static Material GetOrAddMaterialFor(Material materialSource, Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x14D8E00", Offset = "0x14D8E00", VA = "0x14D8E00")]
		internal static MaterialWithRefcount GetExistingMaterialFor(Material materialSource, Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x14D8EFC", Offset = "0x14D8EFC", VA = "0x14D8EFC")]
		internal static void RemoveMaterialFromTable(Material materialSource, Texture2D texture)
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x14D8F78", Offset = "0x14D8F78", VA = "0x14D8F78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x14D9558", Offset = "0x14D9558", VA = "0x14D9558")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x14D8F88", Offset = "0x14D8F88", VA = "0x14D8F88")]
		public void Apply()
		{
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x14D9568", Offset = "0x14D9568", VA = "0x14D9568")]
		public void Remove()
		{
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x14D977C", Offset = "0x14D977C", VA = "0x14D977C")]
		public void GetTexture()
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x14D9960", Offset = "0x14D9960", VA = "0x14D9960")]
		public SlotBlendModes()
		{
		}
	}
}
namespace Spine.Unity.Modules.AttachmentTools
{
	[Token(Token = "0x2000525")]
	public static class AttachmentRegionExtensions
	{
		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x1188A68", Offset = "0x1188A68", VA = "0x1188A68")]
		public static AtlasRegion GetRegion(this Attachment attachment)
		{
			return null;
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x118B284", Offset = "0x118B284", VA = "0x118B284")]
		public static AtlasRegion GetRegion(this RegionAttachment regionAttachment)
		{
			return null;
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x118B30C", Offset = "0x118B30C", VA = "0x118B30C")]
		public static AtlasRegion GetRegion(this MeshAttachment meshAttachment)
		{
			return null;
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x1188FAC", Offset = "0x1188FAC", VA = "0x1188FAC")]
		public static void SetRegion(this Attachment attachment, AtlasRegion region, bool updateOffset = true)
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x118B18C", Offset = "0x118B18C", VA = "0x118B18C")]
		public static void SetRegion(this RegionAttachment attachment, AtlasRegion region, bool updateOffset = true)
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x118AC1C", Offset = "0x118AC1C", VA = "0x118AC1C")]
		public static void SetRegion(this MeshAttachment attachment, AtlasRegion region, bool updateUVs = true)
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x118B394", Offset = "0x118B394", VA = "0x118B394")]
		public static RegionAttachment ToRegionAttachment(this Sprite sprite, Material material, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x118B41C", Offset = "0x118B41C", VA = "0x118B41C")]
		public static RegionAttachment ToRegionAttachment(this Sprite sprite, AtlasPage page, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x118B750", Offset = "0x118B750", VA = "0x118B750")]
		public static RegionAttachment ToRegionAttachmentPMAClone(this Sprite sprite, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x118B900", Offset = "0x118B900", VA = "0x118B900")]
		public static RegionAttachment ToRegionAttachmentPMAClone(this Sprite sprite, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x118B584", Offset = "0x118B584", VA = "0x118B584")]
		public static RegionAttachment ToRegionAttachment(this AtlasRegion region, string attachmentName, float scale = 0.01f, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x118B968", Offset = "0x118B968", VA = "0x118B968")]
		public static void SetScale(this RegionAttachment regionAttachment, Vector2 scale)
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0x118B980", Offset = "0x118B980", VA = "0x118B980")]
		public static void SetScale(this RegionAttachment regionAttachment, float x, float y)
		{
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x118B998", Offset = "0x118B998", VA = "0x118B998")]
		public static void SetPositionOffset(this RegionAttachment regionAttachment, Vector2 offset)
		{
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0x118B9B0", Offset = "0x118B9B0", VA = "0x118B9B0")]
		public static void SetPositionOffset(this RegionAttachment regionAttachment, float x, float y)
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0x118B9C8", Offset = "0x118B9C8", VA = "0x118B9C8")]
		public static void SetRotation(this RegionAttachment regionAttachment, float rotation)
		{
		}
	}
	[Token(Token = "0x2000526")]
	public static class AtlasUtilities
	{
		[Token(Token = "0x4001199")]
		internal const TextureFormat SpineTextureFormat = TextureFormat.RGBA32;

		[Token(Token = "0x400119A")]
		internal const float DefaultMipmapBias = -0.5f;

		[Token(Token = "0x400119B")]
		internal const bool UseMipMaps = false;

		[Token(Token = "0x400119C")]
		internal const float DefaultScale = 0.01f;

		[Token(Token = "0x400119D")]
		private const int NonrenderingRegion = -1;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<AtlasRegion, Texture2D> CachedRegionTextures;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Texture2D> CachedRegionTexturesList;

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x1186C18", Offset = "0x1186C18", VA = "0x1186C18")]
		public static AtlasRegion ToAtlasRegion(this Texture2D t, Material materialPropertySource, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0x1186CB8", Offset = "0x1186CB8", VA = "0x1186CB8")]
		public static AtlasRegion ToAtlasRegion(this Texture2D t, Shader shader, float scale = 0.01f, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x1187000", Offset = "0x1187000", VA = "0x1187000")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Texture2D t, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x11870A8", Offset = "0x11870A8", VA = "0x11870A8")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Texture2D t, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x1186EF4", Offset = "0x1186EF4", VA = "0x1186EF4")]
		public static AtlasPage ToSpineAtlasPage(this Material m)
		{
			return null;
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x11874A0", Offset = "0x11874A0", VA = "0x11874A0")]
		public static AtlasRegion ToAtlasRegion(this Sprite s, AtlasPage page)
		{
			return null;
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x1187910", Offset = "0x1187910", VA = "0x1187910")]
		public static AtlasRegion ToAtlasRegion(this Sprite s, Material material)
		{
			return null;
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x11879A0", Offset = "0x11879A0", VA = "0x11879A0")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Sprite s, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x1187A48", Offset = "0x1187A48", VA = "0x1187A48")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Sprite s, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x1187580", Offset = "0x1187580", VA = "0x1187580")]
		internal static AtlasRegion ToAtlasRegion(this Sprite s, bool isolatedTexture = false)
		{
			return null;
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x1187ED8", Offset = "0x1187ED8", VA = "0x1187ED8")]
		public static void GetRepackedAttachments(List<Attachment> sourceAttachments, List<Attachment> outputAttachments, Material materialPropertySource, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, string newAssetName = "Repacked Attachments", bool clearCache = false, bool useOriginalNonrenderables = true)
		{
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x1189280", Offset = "0x1189280", VA = "0x1189280")]
		public static Skin GetRepackedSkin(this Skin o, string newName, Material materialPropertySource, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, bool useOriginalNonrenderables = true)
		{
			return null;
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x1189384", Offset = "0x1189384", VA = "0x1189384")]
		public static Skin GetRepackedSkin(this Skin o, string newName, Shader shader, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource, bool clearCache = false, bool useOriginalNonrenderables = true)
		{
			return null;
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x1189DB8", Offset = "0x1189DB8", VA = "0x1189DB8")]
		public static Sprite ToSprite(this AtlasRegion ar, float pixelsPerUnit = 100f)
		{
			return null;
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x118909C", Offset = "0x118909C", VA = "0x118909C")]
		public static void ClearCache()
		{
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x1188B6C", Offset = "0x1188B6C", VA = "0x1188B6C")]
		public static Texture2D ToTexture(this AtlasRegion ar, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x1187C3C", Offset = "0x1187C3C", VA = "0x1187C3C")]
		private static Texture2D ToTexture(this Sprite s, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x11872A8", Offset = "0x11872A8", VA = "0x11872A8")]
		private static Texture2D GetClone(this Texture2D t, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x1189FF4", Offset = "0x1189FF4", VA = "0x1189FF4")]
		private static void CopyTexture(Texture2D source, Rect sourceRect, Texture2D destination)
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x1188818", Offset = "0x1188818", VA = "0x1188818")]
		private static bool IsRenderable(Attachment a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x1187D70", Offset = "0x1187D70", VA = "0x1187D70")]
		private static Rect SpineUnityFlipRect(this Rect rect, int textureHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x1189F00", Offset = "0x1189F00", VA = "0x1189F00")]
		private static Rect GetUnityRect(this AtlasRegion region)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x1189F7C", Offset = "0x1189F7C", VA = "0x1189F7C")]
		private static Rect GetUnityRect(this AtlasRegion region, int textureHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x118A14C", Offset = "0x118A14C", VA = "0x118A14C")]
		private static Rect GetSpineAtlasRect(this AtlasRegion region, bool includeRotate = true)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x118A1B8", Offset = "0x118A1B8", VA = "0x118A1B8")]
		private static Rect UVRectToTextureRect(Rect uvRect, int texWidth, int texHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x1187DE0", Offset = "0x1187DE0", VA = "0x1187DE0")]
		private static Rect TextureRectToUVRect(Rect textureRect, int texWidth, int texHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x1188DB4", Offset = "0x1188DB4", VA = "0x1188DB4")]
		private static AtlasRegion UVRectToAtlasRegion(Rect uvRect, string name, AtlasPage page, float offsetX, float offsetY, bool rotate)
		{
			return null;
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x1189E48", Offset = "0x1189E48", VA = "0x1189E48")]
		private static Texture2D GetMainTexture(this AtlasRegion region)
		{
			return null;
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x11873EC", Offset = "0x11873EC", VA = "0x11873EC")]
		private static void ApplyPMA(this Texture2D texture, bool applyImmediately = true)
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x1186FF0", Offset = "0x1186FF0", VA = "0x1186FF0")]
		private static float InverseLerp(float a, float b, float value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000527")]
	public static class SkinUtilities
	{
		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x14D78C0", Offset = "0x14D78C0", VA = "0x14D78C0")]
		public static Skin UnshareSkin(this Skeleton skeleton, bool includeDefaultSkin, bool unshareAttachments, [Optional] AnimationState state)
		{
			return null;
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x14D7978", Offset = "0x14D7978", VA = "0x14D7978")]
		public static Skin GetClonedSkin(this Skeleton skeleton, string newSkinName, bool includeDefaultSkin = false, bool cloneAttachments = false, bool cloneMeshesAsLinked = true)
		{
			return null;
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x14D80E4", Offset = "0x14D80E4", VA = "0x14D80E4")]
		public static Skin GetClone(this Skin original)
		{
			return null;
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x14D82E0", Offset = "0x14D82E0", VA = "0x14D82E0")]
		public static void SetAttachment(this Skin skin, string slotName, string keyName, Attachment attachment, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x14D83A8", Offset = "0x14D83A8", VA = "0x14D83A8")]
		public static void AddAttachments(this Skin skin, Skin otherSkin)
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x14D83CC", Offset = "0x14D83CC", VA = "0x14D83CC")]
		public static Attachment GetAttachment(this Skin skin, string slotName, string keyName, Skeleton skeleton)
		{
			return null;
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x14D848C", Offset = "0x14D848C", VA = "0x14D848C")]
		public static void SetAttachment(this Skin skin, int slotIndex, string keyName, Attachment attachment)
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x14D84A0", Offset = "0x14D84A0", VA = "0x14D84A0")]
		public static void RemoveAttachment(this Skin skin, string slotName, string keyName, SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x14D8560", Offset = "0x14D8560", VA = "0x14D8560")]
		public static void Clear(this Skin skin)
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x14D85B8", Offset = "0x14D85B8", VA = "0x14D85B8")]
		public static void Append(this Skin destination, Skin source)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x14D7A40", Offset = "0x14D7A40", VA = "0x14D7A40")]
		public static void CopyTo(this Skin source, Skin destination, bool overwrite, bool cloneAttachments, bool cloneMeshesAsLinked = true)
		{
		}
	}
	[Token(Token = "0x2000528")]
	public static class AttachmentCloneExtensions
	{
		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x1188870", Offset = "0x1188870", VA = "0x1188870")]
		public static Attachment GetClone(this Attachment o, bool cloneMeshesAsLinked)
		{
			return null;
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x118A3E4", Offset = "0x118A3E4", VA = "0x118A3E4")]
		public static RegionAttachment GetClone(this RegionAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x118A994", Offset = "0x118A994", VA = "0x118A994")]
		public static ClippingAttachment GetClone(this ClippingAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x118A904", Offset = "0x118A904", VA = "0x118A904")]
		public static PointAttachment GetClone(this PointAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x118A7C0", Offset = "0x118A7C0", VA = "0x118A7C0")]
		public static BoundingBoxAttachment GetClone(this BoundingBoxAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x118A71C", Offset = "0x118A71C", VA = "0x118A71C")]
		public static MeshAttachment GetLinkedClone(this MeshAttachment o, bool inheritDeform = true)
		{
			return null;
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x118A540", Offset = "0x118A540", VA = "0x118A540")]
		public static MeshAttachment GetClone(this MeshAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x118A840", Offset = "0x118A840", VA = "0x118A840")]
		public static PathAttachment GetClone(this PathAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x118AA20", Offset = "0x118AA20", VA = "0x118AA20")]
		private static void CloneVertexAttachment(VertexAttachment src, VertexAttachment dest)
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x118AAD0", Offset = "0x118AAD0", VA = "0x118AAD0")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, string newLinkedMeshName, AtlasRegion region, bool inheritDeform = true, bool copyOriginalProperties = false)
		{
			return null;
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x118AD08", Offset = "0x118AD08", VA = "0x118AD08")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, Sprite sprite, Shader shader, bool inheritDeform = true, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x118AE60", Offset = "0x118AE60", VA = "0x118AE60")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, Sprite sprite, Material materialPropertySource, bool inheritDeform = true)
		{
			return null;
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x118AEB8", Offset = "0x118AEB8", VA = "0x118AEB8")]
		public static Attachment GetRemappedClone(this Attachment o, Sprite sprite, Material sourceMaterial, bool premultiplyAlpha = true, bool cloneMeshAsLinked = true, bool useOriginalRegionSize = false)
		{
			return null;
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x118B008", Offset = "0x118B008", VA = "0x118B008")]
		public static Attachment GetRemappedClone(this Attachment o, AtlasRegion atlasRegion, bool cloneMeshAsLinked = true, bool useOriginalRegionSize = false, float scale = 0.01f)
		{
			return null;
		}
	}
}
namespace Unity.Linq
{
	[Token(Token = "0x2000529")]
	public static class GameObjectExtensions
	{
		[Token(Token = "0x200052A")]
		public struct ChildrenEnumerable : IEnumerable<GameObject>, IEnumerable
		{
			[Token(Token = "0x200052B")]
			public struct Enumerator : IEnumerator<GameObject>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40011A2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int childCount;

				[Token(Token = "0x40011A3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private readonly Transform originTransform;

				[Token(Token = "0x40011A4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly bool canRun;

				[Token(Token = "0x40011A5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
				private bool withSelf;

				[Token(Token = "0x40011A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				private int currentIndex;

				[Token(Token = "0x40011A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private GameObject current;

				[Token(Token = "0x17000356")]
				public GameObject Current
				{
					[Token(Token = "0x6001C38")]
					[Address(RVA = "0x1FD0134", Offset = "0x1FD0134", VA = "0x1FD0134", Slot = "4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000357")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001C39")]
					[Address(RVA = "0x1FD013C", Offset = "0x1FD013C", VA = "0x1FD013C", Slot = "7")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001C36")]
				[Address(RVA = "0x1FD0040", Offset = "0x1FD0040", VA = "0x1FD0040")]
				internal Enumerator(Transform originTransform, bool withSelf, bool canRun)
				{
				}

				[Token(Token = "0x6001C37")]
				[Address(RVA = "0x1FD00A4", Offset = "0x1FD00A4", VA = "0x1FD00A4", Slot = "6")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001C3A")]
				[Address(RVA = "0x1FD0144", Offset = "0x1FD0144", VA = "0x1FD0144", Slot = "5")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001C3B")]
				[Address(RVA = "0x1FD0148", Offset = "0x1FD0148", VA = "0x1FD0148", Slot = "8")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x200052C")]
			public struct OfComponentEnumerable<T> : IEnumerable<T>, IEnumerable where T : Component
			{
				[Token(Token = "0x40011A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private ChildrenEnumerable parent;

				[Token(Token = "0x6001C3C")]
				public OfComponentEnumerable(ref ChildrenEnumerable parent)
				{
				}

				[Token(Token = "0x6001C3D")]
				public OfComponentEnumerator<T> GetEnumerator()
				{
					return default(OfComponentEnumerator<T>);
				}

				[Token(Token = "0x6001C3E")]
				private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C3F")]
				private IEnumerator System.Collections.IEnumerable.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C40")]
				public void ForEach(Action<T> action)
				{
				}

				[Token(Token = "0x6001C41")]
				public T First()
				{
					return null;
				}

				[Token(Token = "0x6001C42")]
				public T FirstOrDefault()
				{
					return null;
				}

				[Token(Token = "0x6001C43")]
				public T[] ToArray()
				{
					return null;
				}

				[Token(Token = "0x6001C44")]
				public int ToArrayNonAlloc(ref T[] array)
				{
					return default(int);
				}
			}

			[Token(Token = "0x200052D")]
			public struct OfComponentEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : Component
			{
				[Token(Token = "0x40011A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private Enumerator enumerator;

				[Token(Token = "0x40011AA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private T current;

				[Token(Token = "0x17000358")]
				public T Current
				{
					[Token(Token = "0x6001C47")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000359")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001C48")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001C45")]
				public OfComponentEnumerator(ref ChildrenEnumerable parent)
				{
				}

				[Token(Token = "0x6001C46")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001C49")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001C4A")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40011A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GameObject origin;

			[Token(Token = "0x40011A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly bool withSelf;

			[Token(Token = "0x6001C21")]
			[Address(RVA = "0x1065140", Offset = "0x1065140", VA = "0x1065140")]
			public ChildrenEnumerable(GameObject origin, bool withSelf)
			{
			}

			[Token(Token = "0x6001C22")]
			public OfComponentEnumerable<T> OfComponent<T>() where T : Component
			{
				return default(OfComponentEnumerable<T>);
			}

			[Token(Token = "0x6001C23")]
			[Address(RVA = "0x1065150", Offset = "0x1065150", VA = "0x1065150")]
			public void Destroy(bool useDestroyImmediate = false, bool detachParent = false)
			{
			}

			[Token(Token = "0x6001C24")]
			[Address(RVA = "0x10652EC", Offset = "0x10652EC", VA = "0x10652EC")]
			public void Destroy(Func<GameObject, bool> predicate, bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001C25")]
			[Address(RVA = "0x1065220", Offset = "0x1065220", VA = "0x1065220")]
			public Enumerator GetEnumerator()
			{
				return default(Enumerator);
			}

			[Token(Token = "0x6001C26")]
			[Address(RVA = "0x10653BC", Offset = "0x10653BC", VA = "0x10653BC", Slot = "4")]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C27")]
			[Address(RVA = "0x1065430", Offset = "0x1065430", VA = "0x1065430", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C28")]
			[Address(RVA = "0x10654A4", Offset = "0x10654A4", VA = "0x10654A4")]
			private int GetChildrenSize()
			{
				return default(int);
			}

			[Token(Token = "0x6001C29")]
			[Address(RVA = "0x10654E8", Offset = "0x10654E8", VA = "0x10654E8")]
			public void ForEach(Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001C2A")]
			[Address(RVA = "0x1065594", Offset = "0x1065594", VA = "0x1065594")]
			public int ToArrayNonAlloc(ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2B")]
			[Address(RVA = "0x10656E0", Offset = "0x10656E0", VA = "0x10656E0")]
			public int ToArrayNonAlloc(Func<GameObject, bool> filter, ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2C")]
			public int ToArrayNonAlloc<T>(Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2D")]
			public int ToArrayNonAlloc<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2E")]
			public int ToArrayNonAlloc<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2F")]
			[Address(RVA = "0x1065840", Offset = "0x1065840", VA = "0x1065840")]
			public GameObject[] ToArray()
			{
				return null;
			}

			[Token(Token = "0x6001C30")]
			[Address(RVA = "0x10658F8", Offset = "0x10658F8", VA = "0x10658F8")]
			public GameObject[] ToArray(Func<GameObject, bool> filter)
			{
				return null;
			}

			[Token(Token = "0x6001C31")]
			public T[] ToArray<T>(Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C32")]
			public T[] ToArray<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C33")]
			public T[] ToArray<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C34")]
			[Address(RVA = "0x10659B8", Offset = "0x10659B8", VA = "0x10659B8")]
			public GameObject First()
			{
				return null;
			}

			[Token(Token = "0x6001C35")]
			[Address(RVA = "0x1065A48", Offset = "0x1065A48", VA = "0x1065A48")]
			public GameObject FirstOrDefault()
			{
				return null;
			}
		}

		[Token(Token = "0x200052E")]
		public struct AncestorsEnumerable : IEnumerable<GameObject>, IEnumerable
		{
			[Token(Token = "0x200052F")]
			public struct Enumerator : IEnumerator<GameObject>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40011AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly bool canRun;

				[Token(Token = "0x40011AE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private GameObject current;

				[Token(Token = "0x40011AF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private Transform currentTransform;

				[Token(Token = "0x40011B0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private bool withSelf;

				[Token(Token = "0x1700035A")]
				public GameObject Current
				{
					[Token(Token = "0x6001C61")]
					[Address(RVA = "0x1FCFD88", Offset = "0x1FCFD88", VA = "0x1FCFD88", Slot = "4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700035B")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001C62")]
					[Address(RVA = "0x1FCFD90", Offset = "0x1FCFD90", VA = "0x1FCFD90", Slot = "7")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001C5F")]
				[Address(RVA = "0x1FCFCAC", Offset = "0x1FCFCAC", VA = "0x1FCFCAC")]
				internal Enumerator(GameObject origin, Transform originTransform, bool withSelf, bool canRun)
				{
				}

				[Token(Token = "0x6001C60")]
				[Address(RVA = "0x1FCFCC4", Offset = "0x1FCFCC4", VA = "0x1FCFCC4", Slot = "6")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001C63")]
				[Address(RVA = "0x1FCFD98", Offset = "0x1FCFD98", VA = "0x1FCFD98", Slot = "5")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001C64")]
				[Address(RVA = "0x1FCFD9C", Offset = "0x1FCFD9C", VA = "0x1FCFD9C", Slot = "8")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x2000530")]
			public struct OfComponentEnumerable<T> : IEnumerable<T>, IEnumerable where T : Component
			{
				[Token(Token = "0x40011B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private AncestorsEnumerable parent;

				[Token(Token = "0x6001C65")]
				public OfComponentEnumerable(ref AncestorsEnumerable parent)
				{
				}

				[Token(Token = "0x6001C66")]
				public OfComponentEnumerator<T> GetEnumerator()
				{
					return default(OfComponentEnumerator<T>);
				}

				[Token(Token = "0x6001C67")]
				private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C68")]
				private IEnumerator System.Collections.IEnumerable.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C69")]
				public void ForEach(Action<T> action)
				{
				}

				[Token(Token = "0x6001C6A")]
				public T First()
				{
					return null;
				}

				[Token(Token = "0x6001C6B")]
				public T FirstOrDefault()
				{
					return null;
				}

				[Token(Token = "0x6001C6C")]
				public T[] ToArray()
				{
					return null;
				}

				[Token(Token = "0x6001C6D")]
				public int ToArrayNonAlloc(ref T[] array)
				{
					return default(int);
				}
			}

			[Token(Token = "0x2000531")]
			public struct OfComponentEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : Component
			{
				[Token(Token = "0x40011B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private Enumerator enumerator;

				[Token(Token = "0x40011B3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private T current;

				[Token(Token = "0x1700035C")]
				public T Current
				{
					[Token(Token = "0x6001C70")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700035D")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001C71")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001C6E")]
				public OfComponentEnumerator(ref AncestorsEnumerable parent)
				{
				}

				[Token(Token = "0x6001C6F")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001C72")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001C73")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40011AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GameObject origin;

			[Token(Token = "0x40011AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly bool withSelf;

			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0x10C1D48", Offset = "0x10C1D48", VA = "0x10C1D48")]
			public AncestorsEnumerable(GameObject origin, bool withSelf)
			{
			}

			[Token(Token = "0x6001C4C")]
			public OfComponentEnumerable<T> OfComponent<T>() where T : Component
			{
				return default(OfComponentEnumerable<T>);
			}

			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0x10C1D58", Offset = "0x10C1D58", VA = "0x10C1D58")]
			public void Destroy(bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0x10C1DCC", Offset = "0x10C1DCC", VA = "0x10C1DCC")]
			public void Destroy(Func<GameObject, bool> predicate, bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0x10BF920", Offset = "0x10BF920", VA = "0x10BF920")]
			public Enumerator GetEnumerator()
			{
				return default(Enumerator);
			}

			[Token(Token = "0x6001C50")]
			[Address(RVA = "0x10C1E9C", Offset = "0x10C1E9C", VA = "0x10C1E9C", Slot = "4")]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C51")]
			[Address(RVA = "0x10C1F10", Offset = "0x10C1F10", VA = "0x10C1F10", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C52")]
			[Address(RVA = "0x10C1F84", Offset = "0x10C1F84", VA = "0x10C1F84")]
			public void ForEach(Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001C53")]
			[Address(RVA = "0x10C2030", Offset = "0x10C2030", VA = "0x10C2030")]
			public int ToArrayNonAlloc(ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C54")]
			[Address(RVA = "0x10C2174", Offset = "0x10C2174", VA = "0x10C2174")]
			public int ToArrayNonAlloc(Func<GameObject, bool> filter, ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C55")]
			public int ToArrayNonAlloc<T>(Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C56")]
			public int ToArrayNonAlloc<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C57")]
			public int ToArrayNonAlloc<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C58")]
			[Address(RVA = "0x10C22CC", Offset = "0x10C22CC", VA = "0x10C22CC")]
			public GameObject[] ToArray()
			{
				return null;
			}

			[Token(Token = "0x6001C59")]
			[Address(RVA = "0x10C2378", Offset = "0x10C2378", VA = "0x10C2378")]
			public GameObject[] ToArray(Func<GameObject, bool> filter)
			{
				return null;
			}

			[Token(Token = "0x6001C5A")]
			public T[] ToArray<T>(Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C5B")]
			public T[] ToArray<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C5C")]
			public T[] ToArray<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C5D")]
			[Address(RVA = "0x10C242C", Offset = "0x10C242C", VA = "0x10C242C")]
			public GameObject First()
			{
				return null;
			}

			[Token(Token = "0x6001C5E")]
			[Address(RVA = "0x10C24C0", Offset = "0x10C24C0", VA = "0x10C24C0")]
			public GameObject FirstOrDefault()
			{
				return null;
			}
		}

		[Token(Token = "0x2000532")]
		public struct DescendantsEnumerable : IEnumerable<GameObject>, IEnumerable
		{
			[Token(Token = "0x2000533")]
			internal class InternalUnsafeRefStack
			{
				[Token(Token = "0x40011B8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static Queue<InternalUnsafeRefStack> RefStackPool;

				[Token(Token = "0x40011B9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int size;

				[Token(Token = "0x40011BA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public Enumerator[] array;

				[Token(Token = "0x6001C90")]
				[Address(RVA = "0x1FD0758", Offset = "0x1FD0758", VA = "0x1FD0758")]
				public InternalUnsafeRefStack(int initialStackDepth)
				{
				}

				[Token(Token = "0x6001C91")]
				[Address(RVA = "0x1FD057C", Offset = "0x1FD057C", VA = "0x1FD057C")]
				public void Push(ref Enumerator e)
				{
				}

				[Token(Token = "0x6001C92")]
				[Address(RVA = "0x1FD07C4", Offset = "0x1FD07C4", VA = "0x1FD07C4")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x2000534")]
			public struct Enumerator : IEnumerator<GameObject>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40011BB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int childCount;

				[Token(Token = "0x40011BC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private readonly Transform originTransform;

				[Token(Token = "0x40011BD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private bool canRun;

				[Token(Token = "0x40011BE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
				private bool withSelf;

				[Token(Token = "0x40011BF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				private int currentIndex;

				[Token(Token = "0x40011C0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private GameObject current;

				[Token(Token = "0x40011C1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private InternalUnsafeRefStack sharedStack;

				[Token(Token = "0x40011C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Func<Transform, bool> descendIntoChildren;

				[Token(Token = "0x1700035E")]
				public GameObject Current
				{
					[Token(Token = "0x6001C97")]
					[Address(RVA = "0x1FD0664", Offset = "0x1FD0664", VA = "0x1FD0664", Slot = "4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700035F")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001C98")]
					[Address(RVA = "0x1FD066C", Offset = "0x1FD066C", VA = "0x1FD066C", Slot = "7")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001C94")]
				[Address(RVA = "0x1FD01F8", Offset = "0x1FD01F8", VA = "0x1FD01F8")]
				internal Enumerator(Transform originTransform, bool withSelf, bool canRun, InternalUnsafeRefStack sharedStack, Func<Transform, bool> descendIntoChildren)
				{
				}

				[Token(Token = "0x6001C95")]
				[Address(RVA = "0x1FD0270", Offset = "0x1FD0270", VA = "0x1FD0270", Slot = "6")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001C96")]
				[Address(RVA = "0x1FD03C8", Offset = "0x1FD03C8", VA = "0x1FD03C8")]
				private bool MoveNextCore(bool peek, out GameObject current)
				{
					return default(bool);
				}

				[Token(Token = "0x6001C99")]
				[Address(RVA = "0x1FD0674", Offset = "0x1FD0674", VA = "0x1FD0674", Slot = "5")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001C9A")]
				[Address(RVA = "0x1FD0718", Offset = "0x1FD0718", VA = "0x1FD0718", Slot = "8")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x2000535")]
			public struct OfComponentEnumerable<T> : IEnumerable<T>, IEnumerable where T : Component
			{
				[Token(Token = "0x40011C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private DescendantsEnumerable parent;

				[Token(Token = "0x6001C9B")]
				public OfComponentEnumerable(ref DescendantsEnumerable parent)
				{
				}

				[Token(Token = "0x6001C9C")]
				public OfComponentEnumerator<T> GetEnumerator()
				{
					return default(OfComponentEnumerator<T>);
				}

				[Token(Token = "0x6001C9D")]
				private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C9E")]
				private IEnumerator System.Collections.IEnumerable.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001C9F")]
				public T First()
				{
					return null;
				}

				[Token(Token = "0x6001CA0")]
				public T FirstOrDefault()
				{
					return null;
				}

				[Token(Token = "0x6001CA1")]
				public void ForEach(Action<T> action)
				{
				}

				[Token(Token = "0x6001CA2")]
				public T[] ToArray()
				{
					return null;
				}

				[Token(Token = "0x6001CA3")]
				private void OfComponentDescendantsCore(ref Transform transform, ref Action<T> action)
				{
				}

				[Token(Token = "0x6001CA4")]
				private void OfComponentDescendantsCore(ref Transform transform, ref int index, ref T[] array)
				{
				}

				[Token(Token = "0x6001CA5")]
				public int ToArrayNonAlloc(ref T[] array)
				{
					return default(int);
				}
			}

			[Token(Token = "0x2000536")]
			public struct OfComponentEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : Component
			{
				[Token(Token = "0x40011C4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private Enumerator enumerator;

				[Token(Token = "0x40011C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private T current;

				[Token(Token = "0x17000360")]
				public T Current
				{
					[Token(Token = "0x6001CA8")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000361")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001CA9")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001CA6")]
				public OfComponentEnumerator(ref DescendantsEnumerable parent)
				{
				}

				[Token(Token = "0x6001CA7")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001CAA")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001CAB")]
				public void Reset()
				{
				}
			}

			[Serializable]
			[Token(Token = "0x2000537")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2580", Offset = "0x8B2580")]
			private sealed class <>c
			{
				[Token(Token = "0x40011C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x6001CAD")]
				[Address(RVA = "0x1FD01E8", Offset = "0x1FD01E8", VA = "0x1FD01E8")]
				public <>c()
				{
				}

				[Token(Token = "0x6001CAE")]
				[Address(RVA = "0x1FD01F0", Offset = "0x1FD01F0", VA = "0x1FD01F0")]
				internal bool <.cctor>b__36_0(Transform _)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x40011B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Func<Transform, bool> alwaysTrue;

			[Token(Token = "0x40011B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GameObject origin;

			[Token(Token = "0x40011B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly bool withSelf;

			[Token(Token = "0x40011B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Func<Transform, bool> descendIntoChildren;

			[Token(Token = "0x6001C74")]
			[Address(RVA = "0x1065A90", Offset = "0x1065A90", VA = "0x1065A90")]
			public DescendantsEnumerable(GameObject origin, bool withSelf, Func<Transform, bool> descendIntoChildren)
			{
			}

			[Token(Token = "0x6001C75")]
			public OfComponentEnumerable<T> OfComponent<T>() where T : Component
			{
				return default(OfComponentEnumerable<T>);
			}

			[Token(Token = "0x6001C76")]
			[Address(RVA = "0x1065B28", Offset = "0x1065B28", VA = "0x1065B28")]
			public void Destroy(bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001C77")]
			[Address(RVA = "0x1065D48", Offset = "0x1065D48", VA = "0x1065D48")]
			public void Destroy(Func<GameObject, bool> predicate, bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001C78")]
			[Address(RVA = "0x1065BA8", Offset = "0x1065BA8", VA = "0x1065BA8")]
			public Enumerator GetEnumerator()
			{
				return default(Enumerator);
			}

			[Token(Token = "0x6001C79")]
			[Address(RVA = "0x1065E24", Offset = "0x1065E24", VA = "0x1065E24", Slot = "4")]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0x1065EA8", Offset = "0x1065EA8", VA = "0x1065EA8", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C7B")]
			private void ResizeArray<T>(ref int index, ref T[] array)
			{
			}

			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0x1065F2C", Offset = "0x1065F2C", VA = "0x1065F2C")]
			private void DescendantsCore(ref Transform transform, ref Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001C7D")]
			[Address(RVA = "0x106603C", Offset = "0x106603C", VA = "0x106603C")]
			private void DescendantsCore(ref Transform transform, ref int index, ref GameObject[] array)
			{
			}

			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0x10661C4", Offset = "0x10661C4", VA = "0x10661C4")]
			private void DescendantsCore(ref Func<GameObject, bool> filter, ref Transform transform, ref int index, ref GameObject[] array)
			{
			}

			[Token(Token = "0x6001C7F")]
			private void DescendantsCore<T>(ref Func<GameObject, T> selector, ref Transform transform, ref int index, ref T[] array)
			{
			}

			[Token(Token = "0x6001C80")]
			private void DescendantsCore<T>(ref Func<GameObject, bool> filter, ref Func<GameObject, T> selector, ref Transform transform, ref int index, ref T[] array)
			{
			}

			[Token(Token = "0x6001C81")]
			private void DescendantsCore<TState, T>(ref Func<GameObject, TState> let, ref Func<TState, bool> filter, ref Func<TState, T> selector, ref Transform transform, ref int index, ref T[] array)
			{
			}

			[Token(Token = "0x6001C82")]
			[Address(RVA = "0x1066398", Offset = "0x1066398", VA = "0x1066398")]
			public void ForEach(Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001C83")]
			[Address(RVA = "0x1066438", Offset = "0x1066438", VA = "0x1066438")]
			public int ToArrayNonAlloc(ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C84")]
			[Address(RVA = "0x1066548", Offset = "0x1066548", VA = "0x1066548")]
			public int ToArrayNonAlloc(Func<GameObject, bool> filter, ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C85")]
			public int ToArrayNonAlloc<T>(Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C86")]
			public int ToArrayNonAlloc<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C87")]
			public int ToArrayNonAlloc<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001C88")]
			[Address(RVA = "0x106668C", Offset = "0x106668C", VA = "0x106668C")]
			public GameObject[] ToArray()
			{
				return null;
			}

			[Token(Token = "0x6001C89")]
			[Address(RVA = "0x1066738", Offset = "0x1066738", VA = "0x1066738")]
			public GameObject[] ToArray(Func<GameObject, bool> filter)
			{
				return null;
			}

			[Token(Token = "0x6001C8A")]
			public T[] ToArray<T>(Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C8B")]
			public T[] ToArray<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C8C")]
			public T[] ToArray<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0x10667EC", Offset = "0x10667EC", VA = "0x10667EC")]
			public GameObject First()
			{
				return null;
			}

			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0x10668D8", Offset = "0x10668D8", VA = "0x10668D8")]
			public GameObject FirstOrDefault()
			{
				return null;
			}
		}

		[Token(Token = "0x2000538")]
		public struct BeforeSelfEnumerable : IEnumerable<GameObject>, IEnumerable
		{
			[Token(Token = "0x2000539")]
			public struct Enumerator : IEnumerator<GameObject>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40011C9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int childCount;

				[Token(Token = "0x40011CA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private readonly Transform originTransform;

				[Token(Token = "0x40011CB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private bool canRun;

				[Token(Token = "0x40011CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
				private bool withSelf;

				[Token(Token = "0x40011CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				private int currentIndex;

				[Token(Token = "0x40011CE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private GameObject current;

				[Token(Token = "0x40011CF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private Transform parent;

				[Token(Token = "0x17000362")]
				public GameObject Current
				{
					[Token(Token = "0x6001CC5")]
					[Address(RVA = "0x1FCFFEC", Offset = "0x1FCFFEC", VA = "0x1FCFFEC", Slot = "4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000363")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001CC6")]
					[Address(RVA = "0x1FCFFF4", Offset = "0x1FCFFF4", VA = "0x1FCFFF4", Slot = "7")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001CC3")]
				[Address(RVA = "0x1FCFDDC", Offset = "0x1FCFDDC", VA = "0x1FCFDDC")]
				internal Enumerator(Transform originTransform, bool withSelf, bool canRun)
				{
				}

				[Token(Token = "0x6001CC4")]
				[Address(RVA = "0x1FCFEC0", Offset = "0x1FCFEC0", VA = "0x1FCFEC0", Slot = "6")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001CC7")]
				[Address(RVA = "0x1FCFFFC", Offset = "0x1FCFFFC", VA = "0x1FCFFFC", Slot = "5")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001CC8")]
				[Address(RVA = "0x1FD0000", Offset = "0x1FD0000", VA = "0x1FD0000", Slot = "8")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x200053A")]
			public struct OfComponentEnumerable<T> : IEnumerable<T>, IEnumerable where T : Component
			{
				[Token(Token = "0x40011D0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private BeforeSelfEnumerable parent;

				[Token(Token = "0x6001CC9")]
				public OfComponentEnumerable(ref BeforeSelfEnumerable parent)
				{
				}

				[Token(Token = "0x6001CCA")]
				public OfComponentEnumerator<T> GetEnumerator()
				{
					return default(OfComponentEnumerator<T>);
				}

				[Token(Token = "0x6001CCB")]
				private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001CCC")]
				private IEnumerator System.Collections.IEnumerable.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001CCD")]
				public void ForEach(Action<T> action)
				{
				}

				[Token(Token = "0x6001CCE")]
				public T First()
				{
					return null;
				}

				[Token(Token = "0x6001CCF")]
				public T FirstOrDefault()
				{
					return null;
				}

				[Token(Token = "0x6001CD0")]
				public T[] ToArray()
				{
					return null;
				}

				[Token(Token = "0x6001CD1")]
				public int ToArrayNonAlloc(ref T[] array)
				{
					return default(int);
				}
			}

			[Token(Token = "0x200053B")]
			public struct OfComponentEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : Component
			{
				[Token(Token = "0x40011D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private Enumerator enumerator;

				[Token(Token = "0x40011D2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private T current;

				[Token(Token = "0x17000364")]
				public T Current
				{
					[Token(Token = "0x6001CD4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000365")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001CD5")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001CD2")]
				public OfComponentEnumerator(ref BeforeSelfEnumerable parent)
				{
				}

				[Token(Token = "0x6001CD3")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001CD6")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001CD7")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40011C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GameObject origin;

			[Token(Token = "0x40011C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly bool withSelf;

			[Token(Token = "0x6001CAF")]
			[Address(RVA = "0x10C2508", Offset = "0x10C2508", VA = "0x10C2508")]
			public BeforeSelfEnumerable(GameObject origin, bool withSelf)
			{
			}

			[Token(Token = "0x6001CB0")]
			public OfComponentEnumerable<T> OfComponent<T>() where T : Component
			{
				return default(OfComponentEnumerable<T>);
			}

			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0x10C2518", Offset = "0x10C2518", VA = "0x10C2518")]
			public void Destroy(bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0x10C2670", Offset = "0x10C2670", VA = "0x10C2670")]
			public void Destroy(Func<GameObject, bool> predicate, bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001CB3")]
			[Address(RVA = "0x10C259C", Offset = "0x10C259C", VA = "0x10C259C")]
			public Enumerator GetEnumerator()
			{
				return default(Enumerator);
			}

			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0x10C2750", Offset = "0x10C2750", VA = "0x10C2750", Slot = "4")]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x10C27D0", Offset = "0x10C27D0", VA = "0x10C27D0", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0x10C2850", Offset = "0x10C2850", VA = "0x10C2850")]
			public void ForEach(Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0x10C290C", Offset = "0x10C290C", VA = "0x10C290C")]
			public int ToArrayNonAlloc(ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CB8")]
			[Address(RVA = "0x10C2A60", Offset = "0x10C2A60", VA = "0x10C2A60")]
			public int ToArrayNonAlloc(Func<GameObject, bool> filter, ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CB9")]
			public int ToArrayNonAlloc<T>(Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CBA")]
			public int ToArrayNonAlloc<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CBB")]
			public int ToArrayNonAlloc<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CBC")]
			[Address(RVA = "0x10C2BC8", Offset = "0x10C2BC8", VA = "0x10C2BC8")]
			public GameObject[] ToArray()
			{
				return null;
			}

			[Token(Token = "0x6001CBD")]
			[Address(RVA = "0x10C2C74", Offset = "0x10C2C74", VA = "0x10C2C74")]
			public GameObject[] ToArray(Func<GameObject, bool> filter)
			{
				return null;
			}

			[Token(Token = "0x6001CBE")]
			public T[] ToArray<T>(Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CBF")]
			public T[] ToArray<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CC0")]
			public T[] ToArray<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CC1")]
			[Address(RVA = "0x10C2D28", Offset = "0x10C2D28", VA = "0x10C2D28")]
			public GameObject First()
			{
				return null;
			}

			[Token(Token = "0x6001CC2")]
			[Address(RVA = "0x10C2DCC", Offset = "0x10C2DCC", VA = "0x10C2DCC")]
			public GameObject FirstOrDefault()
			{
				return null;
			}
		}

		[Token(Token = "0x200053C")]
		public struct AfterSelfEnumerable : IEnumerable<GameObject>, IEnumerable
		{
			[Token(Token = "0x200053D")]
			public struct Enumerator : IEnumerator<GameObject>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40011D5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private readonly int childCount;

				[Token(Token = "0x40011D6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private readonly Transform originTransform;

				[Token(Token = "0x40011D7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private readonly bool canRun;

				[Token(Token = "0x40011D8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
				private bool withSelf;

				[Token(Token = "0x40011D9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				private int currentIndex;

				[Token(Token = "0x40011DA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private GameObject current;

				[Token(Token = "0x40011DB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private Transform parent;

				[Token(Token = "0x17000366")]
				public GameObject Current
				{
					[Token(Token = "0x6001CEE")]
					[Address(RVA = "0x1FCFC58", Offset = "0x1FCFC58", VA = "0x1FCFC58", Slot = "4")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000367")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001CEF")]
					[Address(RVA = "0x1FCFC60", Offset = "0x1FCFC60", VA = "0x1FCFC60", Slot = "7")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001CEC")]
				[Address(RVA = "0x1FCFA9C", Offset = "0x1FCFA9C", VA = "0x1FCFA9C")]
				internal Enumerator(Transform originTransform, bool withSelf, bool canRun)
				{
				}

				[Token(Token = "0x6001CED")]
				[Address(RVA = "0x1FCFBC4", Offset = "0x1FCFBC4", VA = "0x1FCFBC4", Slot = "6")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001CF0")]
				[Address(RVA = "0x1FCFC68", Offset = "0x1FCFC68", VA = "0x1FCFC68", Slot = "5")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001CF1")]
				[Address(RVA = "0x1FCFC6C", Offset = "0x1FCFC6C", VA = "0x1FCFC6C", Slot = "8")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x200053E")]
			public struct OfComponentEnumerable<T> : IEnumerable<T>, IEnumerable where T : Component
			{
				[Token(Token = "0x40011DC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private AfterSelfEnumerable parent;

				[Token(Token = "0x6001CF2")]
				public OfComponentEnumerable(ref AfterSelfEnumerable parent)
				{
				}

				[Token(Token = "0x6001CF3")]
				public OfComponentEnumerator<T> GetEnumerator()
				{
					return default(OfComponentEnumerator<T>);
				}

				[Token(Token = "0x6001CF4")]
				private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001CF5")]
				private IEnumerator System.Collections.IEnumerable.GetEnumerator()
				{
					return null;
				}

				[Token(Token = "0x6001CF6")]
				public void ForEach(Action<T> action)
				{
				}

				[Token(Token = "0x6001CF7")]
				public T First()
				{
					return null;
				}

				[Token(Token = "0x6001CF8")]
				public T FirstOrDefault()
				{
					return null;
				}

				[Token(Token = "0x6001CF9")]
				public T[] ToArray()
				{
					return null;
				}

				[Token(Token = "0x6001CFA")]
				public int ToArrayNonAlloc(ref T[] array)
				{
					return default(int);
				}
			}

			[Token(Token = "0x200053F")]
			public struct OfComponentEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : Component
			{
				[Token(Token = "0x40011DD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private Enumerator enumerator;

				[Token(Token = "0x40011DE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private T current;

				[Token(Token = "0x17000368")]
				public T Current
				{
					[Token(Token = "0x6001CFD")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x17000369")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6001CFE")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001CFB")]
				public OfComponentEnumerator(ref AfterSelfEnumerable parent)
				{
				}

				[Token(Token = "0x6001CFC")]
				public bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6001CFF")]
				public void Dispose()
				{
				}

				[Token(Token = "0x6001D00")]
				public void Reset()
				{
				}
			}

			[Token(Token = "0x40011D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly GameObject origin;

			[Token(Token = "0x40011D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly bool withSelf;

			[Token(Token = "0x6001CD8")]
			[Address(RVA = "0x10C142C", Offset = "0x10C142C", VA = "0x10C142C")]
			public AfterSelfEnumerable(GameObject origin, bool withSelf)
			{
			}

			[Token(Token = "0x6001CD9")]
			public OfComponentEnumerable<T> OfComponent<T>() where T : Component
			{
				return default(OfComponentEnumerable<T>);
			}

			[Token(Token = "0x6001CDA")]
			[Address(RVA = "0x10C143C", Offset = "0x10C143C", VA = "0x10C143C")]
			public void Destroy(bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001CDB")]
			[Address(RVA = "0x10C1594", Offset = "0x10C1594", VA = "0x10C1594")]
			public void Destroy(Func<GameObject, bool> predicate, bool useDestroyImmediate = false)
			{
			}

			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0x10C14C0", Offset = "0x10C14C0", VA = "0x10C14C0")]
			public Enumerator GetEnumerator()
			{
				return default(Enumerator);
			}

			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0x10C1674", Offset = "0x10C1674", VA = "0x10C1674", Slot = "4")]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001CDE")]
			[Address(RVA = "0x10C16F4", Offset = "0x10C16F4", VA = "0x10C16F4", Slot = "5")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0x10C1774", Offset = "0x10C1774", VA = "0x10C1774")]
			public void ForEach(Action<GameObject> action)
			{
			}

			[Token(Token = "0x6001CE0")]
			[Address(RVA = "0x10C1830", Offset = "0x10C1830", VA = "0x10C1830")]
			public int ToArrayNonAlloc(ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CE1")]
			[Address(RVA = "0x10C1984", Offset = "0x10C1984", VA = "0x10C1984")]
			public int ToArrayNonAlloc(Func<GameObject, bool> filter, ref GameObject[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CE2")]
			public int ToArrayNonAlloc<T>(Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CE3")]
			public int ToArrayNonAlloc<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CE4")]
			public int ToArrayNonAlloc<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector, ref T[] array)
			{
				return default(int);
			}

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0x10C1AEC", Offset = "0x10C1AEC", VA = "0x10C1AEC")]
			public GameObject[] ToArray()
			{
				return null;
			}

			[Token(Token = "0x6001CE6")]
			[Address(RVA = "0x10C1B98", Offset = "0x10C1B98", VA = "0x10C1B98")]
			public GameObject[] ToArray(Func<GameObject, bool> filter)
			{
				return null;
			}

			[Token(Token = "0x6001CE7")]
			public T[] ToArray<T>(Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CE8")]
			public T[] ToArray<T>(Func<GameObject, bool> filter, Func<GameObject, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CE9")]
			public T[] ToArray<TState, T>(Func<GameObject, TState> let, Func<TState, bool> filter, Func<TState, T> selector)
			{
				return null;
			}

			[Token(Token = "0x6001CEA")]
			[Address(RVA = "0x10C1C4C", Offset = "0x10C1C4C", VA = "0x10C1C4C")]
			public GameObject First()
			{
				return null;
			}

			[Token(Token = "0x6001CEB")]
			[Address(RVA = "0x10C1CF0", Offset = "0x10C1CF0", VA = "0x10C1CF0")]
			public GameObject FirstOrDefault()
			{
				return null;
			}
		}

		[Token(Token = "0x2000540")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B2590", Offset = "0x8B2590")]
		private sealed class <Ancestors>d__0 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private AncestorsEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x1700036A")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D05")]
				[Address(RVA = "0x10BF9F8", Offset = "0x10BF9F8", VA = "0x10BF9F8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D07")]
				[Address(RVA = "0x10BFA40", Offset = "0x10BFA40", VA = "0x10BFA40", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D01")]
			[Address(RVA = "0x10BF52C", Offset = "0x10BF52C", VA = "0x10BF52C")]
			[DebuggerHidden]
			public <Ancestors>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001D02")]
			[Address(RVA = "0x10BF564", Offset = "0x10BF564", VA = "0x10BF564", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D03")]
			[Address(RVA = "0x10BF63C", Offset = "0x10BF63C", VA = "0x10BF63C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D04")]
			[Address(RVA = "0x10BF580", Offset = "0x10BF580", VA = "0x10BF580")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D06")]
			[Address(RVA = "0x10BFA00", Offset = "0x10BFA00", VA = "0x10BFA00", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D08")]
			[Address(RVA = "0x10BFA48", Offset = "0x10BFA48", VA = "0x10BFA48", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D09")]
			[Address(RVA = "0x10BFAF0", Offset = "0x10BFAF0", VA = "0x10BFAF0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000541")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25A0", Offset = "0x8B25A0")]
		private sealed class <AncestorsAndSelf>d__1 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x40011E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x40011EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x40011EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private AncestorsEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x1700036C")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D0E")]
				[Address(RVA = "0x10BFEE8", Offset = "0x10BFEE8", VA = "0x10BFEE8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D10")]
				[Address(RVA = "0x10BFF30", Offset = "0x10BFF30", VA = "0x10BFF30", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0x10BFAF4", Offset = "0x10BFAF4", VA = "0x10BFAF4")]
			[DebuggerHidden]
			public <AncestorsAndSelf>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0x10BFB2C", Offset = "0x10BFB2C", VA = "0x10BFB2C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D0C")]
			[Address(RVA = "0x10BFC04", Offset = "0x10BFC04", VA = "0x10BFC04", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D0D")]
			[Address(RVA = "0x10BFB48", Offset = "0x10BFB48", VA = "0x10BFB48")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0x10BFEF0", Offset = "0x10BFEF0", VA = "0x10BFEF0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D11")]
			[Address(RVA = "0x10BFF38", Offset = "0x10BFF38", VA = "0x10BFF38", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D12")]
			[Address(RVA = "0x10BFFE0", Offset = "0x10BFFE0", VA = "0x10BFFE0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000542")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25B0", Offset = "0x8B25B0")]
		private sealed class <Descendants>d__2 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x40011EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x40011F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x40011F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Func<Transform, bool> descendIntoChildren;

			[Token(Token = "0x40011F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Func<Transform, bool> <>3__descendIntoChildren;

			[Token(Token = "0x40011F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x40011F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private DescendantsEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x1700036E")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D17")]
				[Address(RVA = "0x10C0DFC", Offset = "0x10C0DFC", VA = "0x10C0DFC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D19")]
				[Address(RVA = "0x10C0E44", Offset = "0x10C0E44", VA = "0x10C0E44", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D13")]
			[Address(RVA = "0x10C09D4", Offset = "0x10C09D4", VA = "0x10C09D4")]
			[DebuggerHidden]
			public <Descendants>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001D14")]
			[Address(RVA = "0x10C0A0C", Offset = "0x10C0A0C", VA = "0x10C0A0C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D15")]
			[Address(RVA = "0x10C0AE4", Offset = "0x10C0AE4", VA = "0x10C0AE4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D16")]
			[Address(RVA = "0x10C0A28", Offset = "0x10C0A28", VA = "0x10C0A28")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D18")]
			[Address(RVA = "0x10C0E04", Offset = "0x10C0E04", VA = "0x10C0E04", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0x10C0E4C", Offset = "0x10C0E4C", VA = "0x10C0E4C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x10C0EFC", Offset = "0x10C0EFC", VA = "0x10C0EFC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000543")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25C0", Offset = "0x8B25C0")]
		private sealed class <DescendantsAndSelf>d__3 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x40011F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40011F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Func<Transform, bool> descendIntoChildren;

			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Func<Transform, bool> <>3__descendIntoChildren;

			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private DescendantsEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x17000370")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D20")]
				[Address(RVA = "0x10C1328", Offset = "0x10C1328", VA = "0x10C1328", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000371")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D22")]
				[Address(RVA = "0x10C1370", Offset = "0x10C1370", VA = "0x10C1370", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x10C0F00", Offset = "0x10C0F00", VA = "0x10C0F00")]
			[DebuggerHidden]
			public <DescendantsAndSelf>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0x10C0F38", Offset = "0x10C0F38", VA = "0x10C0F38", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0x10C1010", Offset = "0x10C1010", VA = "0x10C1010", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D1F")]
			[Address(RVA = "0x10C0F54", Offset = "0x10C0F54", VA = "0x10C0F54")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D21")]
			[Address(RVA = "0x10C1330", Offset = "0x10C1330", VA = "0x10C1330", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D23")]
			[Address(RVA = "0x10C1378", Offset = "0x10C1378", VA = "0x10C1378", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D24")]
			[Address(RVA = "0x10C1428", Offset = "0x10C1428", VA = "0x10C1428", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25D0", Offset = "0x8B25D0")]
		private sealed class <Children>d__4 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x4001201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x4001204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x4001205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ChildrenEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x17000372")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D29")]
				[Address(RVA = "0x10C03E0", Offset = "0x10C03E0", VA = "0x10C03E0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000373")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D2B")]
				[Address(RVA = "0x10C0428", Offset = "0x10C0428", VA = "0x10C0428", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D25")]
			[Address(RVA = "0x10BFFE4", Offset = "0x10BFFE4", VA = "0x10BFFE4")]
			[DebuggerHidden]
			public <Children>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001D26")]
			[Address(RVA = "0x10C001C", Offset = "0x10C001C", VA = "0x10C001C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D27")]
			[Address(RVA = "0x10C00F4", Offset = "0x10C00F4", VA = "0x10C00F4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D28")]
			[Address(RVA = "0x10C0038", Offset = "0x10C0038", VA = "0x10C0038")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D2A")]
			[Address(RVA = "0x10C03E8", Offset = "0x10C03E8", VA = "0x10C03E8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0x10C0430", Offset = "0x10C0430", VA = "0x10C0430", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0x10C04D8", Offset = "0x10C04D8", VA = "0x10C04D8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000545")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25E0", Offset = "0x8B25E0")]
		private sealed class <ChildrenAndSelf>d__5 : IEnumerable<GameObject>, IEnumerable, IEnumerator<GameObject>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject <>2__current;

			[Token(Token = "0x4001208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x400120A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x400120B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x400120C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ChildrenEnumerable.Enumerator <e>5__3;

			[Token(Token = "0x17000374")]
			private GameObject System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.Current
			{
				[Token(Token = "0x6001D32")]
				[Address(RVA = "0x10C08D8", Offset = "0x10C08D8", VA = "0x10C08D8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000375")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D34")]
				[Address(RVA = "0x10C0920", Offset = "0x10C0920", VA = "0x10C0920", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0x10C04DC", Offset = "0x10C04DC", VA = "0x10C04DC")]
			[DebuggerHidden]
			public <ChildrenAndSelf>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001D2F")]
			[Address(RVA = "0x10C0514", Offset = "0x10C0514", VA = "0x10C0514", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D30")]
			[Address(RVA = "0x10C05EC", Offset = "0x10C05EC", VA = "0x10C05EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D31")]
			[Address(RVA = "0x10C0530", Offset = "0x10C0530", VA = "0x10C0530")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D33")]
			[Address(RVA = "0x10C08E0", Offset = "0x10C08E0", VA = "0x10C08E0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D35")]
			[Address(RVA = "0x10C0928", Offset = "0x10C0928", VA = "0x10C0928", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<GameObject> System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D36")]
			[Address(RVA = "0x10C09D0", Offset = "0x10C09D0", VA = "0x10C09D0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000546")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x8B25F0", Offset = "0x8B25F0")]
		private sealed class <OfComponent>d__7<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable where T : Component
		{
			[Token(Token = "0x400120D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400120E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x400120F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<GameObject> source;

			[Token(Token = "0x4001211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<GameObject> <>3__source;

			[Token(Token = "0x4001212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<GameObject> <>7__wrap1;

			[Token(Token = "0x17000376")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6001D3B")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000377")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D3D")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D37")]
			[DebuggerHidden]
			public <OfComponent>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001D38")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D39")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D3A")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001D3C")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001D3E")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001D3F")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x1693748", Offset = "0x1693748", VA = "0x1693748")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BEEA8", Offset = "0x8BEEA8")]
		public static IEnumerable<GameObject> Ancestors(this IEnumerable<GameObject> source)
		{
			return null;
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x16937B4", Offset = "0x16937B4", VA = "0x16937B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BEF18", Offset = "0x8BEF18")]
		public static IEnumerable<GameObject> AncestorsAndSelf(this IEnumerable<GameObject> source)
		{
			return null;
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x1693820", Offset = "0x1693820", VA = "0x1693820")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BEF88", Offset = "0x8BEF88")]
		public static IEnumerable<GameObject> Descendants(this IEnumerable<GameObject> source, [Optional] Func<Transform, bool> descendIntoChildren)
		{
			return null;
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x169389C", Offset = "0x169389C", VA = "0x169389C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BEFF8", Offset = "0x8BEFF8")]
		public static IEnumerable<GameObject> DescendantsAndSelf(this IEnumerable<GameObject> source, [Optional] Func<Transform, bool> descendIntoChildren)
		{
			return null;
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x1693918", Offset = "0x1693918", VA = "0x1693918")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BF068", Offset = "0x8BF068")]
		public static IEnumerable<GameObject> Children(this IEnumerable<GameObject> source)
		{
			return null;
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x1693984", Offset = "0x1693984", VA = "0x1693984")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BF0D8", Offset = "0x8BF0D8")]
		public static IEnumerable<GameObject> ChildrenAndSelf(this IEnumerable<GameObject> source)
		{
			return null;
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x16939F0", Offset = "0x16939F0", VA = "0x16939F0")]
		public static void Destroy(this IEnumerable<GameObject> source, bool useDestroyImmediate = false, bool detachParent = false)
		{
		}

		[Token(Token = "0x6001C01")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x8BF158", Offset = "0x8BF158")]
		public static IEnumerable<T> OfComponent<T>(this IEnumerable<GameObject> source) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		public static int ToArrayNonAlloc<T>(this IEnumerable<T> source, ref T[] array)
		{
			return default(int);
		}

		[Token(Token = "0x6001C03")]
		private static GameObject GetGameObject<T>(T obj) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C04")]
		public static T Add<T>(this GameObject parent, T childOriginal, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C05")]
		public static T[] AddRange<T>(this GameObject parent, IEnumerable<T> childOriginals, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C06")]
		public static T AddFirst<T>(this GameObject parent, T childOriginal, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C07")]
		public static T[] AddFirstRange<T>(this GameObject parent, IEnumerable<T> childOriginals, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C08")]
		public static T AddBeforeSelf<T>(this GameObject parent, T childOriginal, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C09")]
		public static T[] AddBeforeSelfRange<T>(this GameObject parent, IEnumerable<T> childOriginals, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0A")]
		public static T AddAfterSelf<T>(this GameObject parent, T childOriginal, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0B")]
		public static T[] AddAfterSelfRange<T>(this GameObject parent, IEnumerable<T> childOriginals, TransformCloneType cloneType = TransformCloneType.KeepOriginal, [Optional] bool? setActive, [Optional] string specifiedName, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0C")]
		public static T MoveToLast<T>(this GameObject parent, T child, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0D")]
		public static T[] MoveToLastRange<T>(this GameObject parent, IEnumerable<T> childs, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0E")]
		public static T MoveToFirst<T>(this GameObject parent, T child, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C0F")]
		public static T[] MoveToFirstRange<T>(this GameObject parent, IEnumerable<T> childs, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C10")]
		public static T MoveToBeforeSelf<T>(this GameObject parent, T child, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C11")]
		public static T[] MoveToBeforeSelfRange<T>(this GameObject parent, IEnumerable<T> childs, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C12")]
		public static T MoveToAfterSelf<T>(this GameObject parent, T child, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C13")]
		public static T[] MoveToAfterSelfRange<T>(this GameObject parent, IEnumerable<T> childs, TransformMoveType moveType = TransformMoveType.DoNothing, [Optional] bool? setActive, bool setLayer = false) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x1693D64", Offset = "0x1693D64", VA = "0x1693D64")]
		public static void Destroy(this GameObject self, bool useDestroyImmediate = false, bool detachParent = false)
		{
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x1693E68", Offset = "0x1693E68", VA = "0x1693E68")]
		public static GameObject Parent(this GameObject origin)
		{
			return null;
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x1693F48", Offset = "0x1693F48", VA = "0x1693F48")]
		public static GameObject Child(this GameObject origin, string name)
		{
			return null;
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x169403C", Offset = "0x169403C", VA = "0x169403C")]
		public static ChildrenEnumerable Children(this GameObject origin)
		{
			return default(ChildrenEnumerable);
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x1694070", Offset = "0x1694070", VA = "0x1694070")]
		public static ChildrenEnumerable ChildrenAndSelf(this GameObject origin)
		{
			return default(ChildrenEnumerable);
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x16940A4", Offset = "0x16940A4", VA = "0x16940A4")]
		public static AncestorsEnumerable Ancestors(this GameObject origin)
		{
			return default(AncestorsEnumerable);
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x16940D8", Offset = "0x16940D8", VA = "0x16940D8")]
		public static AncestorsEnumerable AncestorsAndSelf(this GameObject origin)
		{
			return default(AncestorsEnumerable);
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x169410C", Offset = "0x169410C", VA = "0x169410C")]
		public static DescendantsEnumerable Descendants(this GameObject origin, [Optional] Func<Transform, bool> descendIntoChildren)
		{
			return default(DescendantsEnumerable);
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x169412C", Offset = "0x169412C", VA = "0x169412C")]
		public static DescendantsEnumerable DescendantsAndSelf(this GameObject origin, [Optional] Func<Transform, bool> descendIntoChildren)
		{
			return default(DescendantsEnumerable);
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x169414C", Offset = "0x169414C", VA = "0x169414C")]
		public static BeforeSelfEnumerable BeforeSelf(this GameObject origin)
		{
			return default(BeforeSelfEnumerable);
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x1694180", Offset = "0x1694180", VA = "0x1694180")]
		public static BeforeSelfEnumerable BeforeSelfAndSelf(this GameObject origin)
		{
			return default(BeforeSelfEnumerable);
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x16941B4", Offset = "0x16941B4", VA = "0x16941B4")]
		public static AfterSelfEnumerable AfterSelf(this GameObject origin)
		{
			return default(AfterSelfEnumerable);
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x16941E8", Offset = "0x16941E8", VA = "0x16941E8")]
		public static AfterSelfEnumerable AfterSelfAndSelf(this GameObject origin)
		{
			return default(AfterSelfEnumerable);
		}
	}
	[Token(Token = "0x2000547")]
	public enum TransformCloneType
	{
		[Token(Token = "0x4001214")]
		KeepOriginal,
		[Token(Token = "0x4001215")]
		FollowParent,
		[Token(Token = "0x4001216")]
		Origin,
		[Token(Token = "0x4001217")]
		DoNothing
	}
	[Token(Token = "0x2000548")]
	public enum TransformMoveType
	{
		[Token(Token = "0x4001219")]
		FollowParent,
		[Token(Token = "0x400121A")]
		Origin,
		[Token(Token = "0x400121B")]
		DoNothing
	}
}
