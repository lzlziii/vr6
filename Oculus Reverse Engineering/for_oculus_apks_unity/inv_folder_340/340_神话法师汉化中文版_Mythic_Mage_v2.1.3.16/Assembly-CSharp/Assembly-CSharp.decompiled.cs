using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using DAShooter;
using DungeonArchitect;
using DungeonArchitect.Builders.FloorPlan;
using DungeonArchitect.Builders.Grid;
using DungeonArchitect.Builders.GridFlow.Graphs.Abstract;
using DungeonArchitect.Builders.GridFlow.Graphs.Exec;
using DungeonArchitect.Builders.GridFlow.Graphs.Exec.NodeHandlers;
using DungeonArchitect.Builders.GridFlow.Tilemap;
using DungeonArchitect.Builders.SimpleCity;
using DungeonArchitect.Builders.Snap.Impl;
using DungeonArchitect.Grammar;
using DungeonArchitect.Graphs;
using DungeonArchitect.Graphs.SpatialConstraints;
using DungeonArchitect.Landscape;
using DungeonArchitect.MiniMaps;
using DungeonArchitect.Navigation;
using DungeonArchitect.RoadNetworks;
using DungeonArchitect.RuntimeGraphs;
using DungeonArchitect.SpatialConstraints;
using DungeonArchitect.Triangulator.Geometry;
using DungeonArchitect.UI;
using DungeonArchitect.UI.Widgets;
using DungeonArchitect.UI.Widgets.GraphEditors;
using DungeonArchitect.Utils;
using DungeonArchitect.Utils.Noise;
using Eppy;
using Facebook.WitAi;
using Facebook.WitAi.Lib;
using Fantasy.Combat.Player;
using Fantasy.Combat.Spells;
using Fantasy.General;
using Fantasy.Movement;
using Il2CppDummyDll;
using Microsoft.CodeAnalysis;
using Oculus.Platform;
using Oculus.Platform.Models;
using SharpNav;
using SharpNav.Collections;
using SharpNav.Collections.Generic;
using SharpNav.Crowds;
using SharpNav.Geometry;
using SharpNav.Pathfinding;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityStandardAssets.Effects;

[assembly: AssemblyVersion("0.0.0.0")]
namespace Microsoft.CodeAnalysis
{
	[Token(Token = "0x2000002")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B270", Offset = "0x50B270")]
	[Microsoft.CodeAnalysis.Embedded]
	internal sealed class EmbeddedAttribute : Attribute
	{
		[Token(Token = "0x6000001")]
		[Address(RVA = "0x7B3DBC", Offset = "0x7B3DBC", VA = "0x7B3DBC")]
		public EmbeddedAttribute()
		{
		}
	}
}
namespace System.Runtime.CompilerServices
{
	[Token(Token = "0x2000003")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B2A8", Offset = "0x50B2A8")]
	[Microsoft.CodeAnalysis.Embedded]
	internal sealed class IsReadOnlyAttribute : Attribute
	{
		[Token(Token = "0x6000002")]
		[Address(RVA = "0xCEC60C", Offset = "0xCEC60C", VA = "0xCEC60C")]
		public IsReadOnlyAttribute()
		{
		}
	}
}
[Token(Token = "0x2000004")]
public class SnapRotation : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RotationAmount;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationRatchet;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D378", Offset = "0x50D378")]
	public bool SnapRotate;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float SimulationRate;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float RotationScaleMultiplier;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x7EE314", Offset = "0x7EE314", VA = "0x7EE314")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x7EE5AC", Offset = "0x7EE5AC", VA = "0x7EE5AC")]
	public SnapRotation()
	{
	}
}
[Token(Token = "0x2000005")]
public class PlayRandomSound : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip[] _sounds;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _audioSource;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x99D278", Offset = "0x99D278", VA = "0x99D278")]
	private void Start()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x99D2D4", Offset = "0x99D2D4", VA = "0x99D2D4")]
	public void PlayRandomSoundEffect()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x99D3BC", Offset = "0x99D3BC", VA = "0x99D3BC")]
	public void PlayRandomSoundEffectFullVolume()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x99D2E0", Offset = "0x99D2E0", VA = "0x99D2E0")]
	public void PlayRandomSoundEffectWithVolumeScale(float volumeScale)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x99D3C4", Offset = "0x99D3C4", VA = "0x99D3C4")]
	public PlayRandomSound()
	{
	}
}
[Token(Token = "0x2000006")]
public class BossRoom : MonoBehaviour
{
	[Token(Token = "0x600000A")]
	[Address(RVA = "0x8D5A50", Offset = "0x8D5A50", VA = "0x8D5A50")]
	private void Start()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x8D5AEC", Offset = "0x8D5AEC", VA = "0x8D5AEC")]
	public BossRoom()
	{
	}
}
[Token(Token = "0x2000007")]
public class SnapConnection : MonoBehaviour
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject doorObject;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject wallObject;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string category;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x7EB8A0", Offset = "0x7EB8A0", VA = "0x7EB8A0")]
	public void UpdateDoorState(bool isDoor)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x7ED084", Offset = "0x7ED084", VA = "0x7ED084")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x7ED1D4", Offset = "0x7ED1D4", VA = "0x7ED1D4")]
	public SnapConnection()
	{
	}
}
[Token(Token = "0x2000008")]
public class SnapPaintTool : DungeonPaintMode
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material cursorMaterial;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material cursorDoorMaterial;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x7EE30C", Offset = "0x7EE30C", VA = "0x7EE30C")]
	public SnapPaintTool()
	{
	}
}
[Token(Token = "0x2000009")]
public class GridFlowItemMetadataResolver : DungeonEventListener
{
	[Token(Token = "0x6000010")]
	private T[] GetDungeonOwnedComponents<T>(Dungeon dungeon) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000011")]
	private T FindOrAddComponent<T>(GameObject gameObject) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xD3C458", Offset = "0xD3C458", VA = "0xD3C458", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xD3CB1C", Offset = "0xD3CB1C", VA = "0xD3CB1C")]
	public GridFlowItemMetadataResolver()
	{
	}
}
[Token(Token = "0x200000A")]
public class DungeonItemGroup : DungeonEventListener
{
	[Token(Token = "0x6000014")]
	[Address(RVA = "0x7A7C8C", Offset = "0x7A7C8C", VA = "0x7A7C8C", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x7A8F24", Offset = "0x7A8F24", VA = "0x7A8F24", Slot = "9")]
	public override void OnDungeonDestroyed(Dungeon dungeon)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x7A831C", Offset = "0x7A831C", VA = "0x7A831C")]
	private DungeonItemGroupInfo GroupItems(GameObject[] items, string groupName, Dungeon dungeon, int groupId)
	{
		return null;
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x7A85E0", Offset = "0x7A85E0", VA = "0x7A85E0")]
	private void DestroyOldGroupObjects(Dungeon dungeon)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x7A8F28", Offset = "0x7A8F28", VA = "0x7A8F28")]
	private void EditorDestroyObject(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x7A8718", Offset = "0x7A8718", VA = "0x7A8718")]
	private void PostInitializeForGridBuilder(Dungeon dungeon, GridDungeonModel gridModel)
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x7A8FC4", Offset = "0x7A8FC4", VA = "0x7A8FC4")]
	public DungeonItemGroup()
	{
	}
}
[Token(Token = "0x200000B")]
public class MeshMerger : DungeonEventListener
{
	[Token(Token = "0x200000C")]
	private class MergeMeshItem
	{
		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 transform;

		[Token(Token = "0x6000021")]
		[Address(RVA = "0xA3B7F4", Offset = "0xA3B7F4", VA = "0xA3B7F4")]
		public MergeMeshItem()
		{
		}
	}

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool mergeMeshes;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float mergePatchSize;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform mergedMeshParent;

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xC2E71C", Offset = "0xC2E71C", VA = "0xC2E71C")]
	private int GetMaterialHash(Material[] materials)
	{
		return default(int);
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xC2E854", Offset = "0xC2E854", VA = "0xC2E854", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xC2F730", Offset = "0xC2F730", VA = "0xC2F730")]
	private List<MergeMeshItem[]> SplitPerVertexLimit(List<MergeMeshItem> patchItems, int vertexLimit)
	{
		return null;
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xC2F45C", Offset = "0xC2F45C", VA = "0xC2F45C")]
	private Dictionary<IntVector2, List<MergeMeshItem>> SpatialPartitionByPatchSize(List<MergeMeshItem> items)
	{
		return null;
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xC2FA8C", Offset = "0xC2FA8C", VA = "0xC2FA8C")]
	private static Mesh CreateMergedMesh(MergeMeshItem[] items)
	{
		return null;
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xC2FDE0", Offset = "0xC2FDE0", VA = "0xC2FDE0")]
	public MeshMerger()
	{
	}
}
[Token(Token = "0x200000D")]
public class DungeonUtils
{
	[Token(Token = "0x6000022")]
	[Address(RVA = "0x7A819C", Offset = "0x7A819C", VA = "0x7A819C")]
	public static List<GameObject> GetDungeonObjects(Dungeon dungeon)
	{
		return null;
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x7B35DC", Offset = "0x7B35DC", VA = "0x7B35DC")]
	public static void DestroyObject(GameObject go)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x7B0110", Offset = "0x7B0110", VA = "0x7B0110")]
	public static Bounds GetDungeonBounds(Dungeon dungeon)
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x7B3678", Offset = "0x7B3678", VA = "0x7B3678")]
	public DungeonUtils()
	{
	}
}
[Token(Token = "0x200000E")]
public static class RandomExtensions
{
	[Token(Token = "0x6000026")]
	[Address(RVA = "0xDDBA94", Offset = "0xDDBA94", VA = "0xDDBA94")]
	public static float NextFloat(this System.Random random)
	{
		return default(float);
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xDDBABC", Offset = "0xDDBABC", VA = "0xDDBABC")]
	public static UnityEngine.Vector3 OnUnitSphere(this System.Random random)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xDDBB78", Offset = "0xDDBB78", VA = "0xDDBB78")]
	public static float Range(this System.Random random, float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xDDBBBC", Offset = "0xDDBBBC", VA = "0xDDBBBC")]
	public static int Range(this System.Random random, int a, int b)
	{
		return default(int);
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xDDBC0C", Offset = "0xDDBC0C", VA = "0xDDBC0C")]
	public static float value(this System.Random random)
	{
		return default(float);
	}
}
[Token(Token = "0x200000F")]
public class FloorPlanRoomMarkers : DungeonMarkerEmitter
{
	[Token(Token = "0x600002B")]
	[Address(RVA = "0x1480710", Offset = "0x1480710", VA = "0x1480710", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x14809B0", Offset = "0x14809B0", VA = "0x14809B0")]
	private void DecorateRoom(DungeonBuilder builder, FloorChunk roomChunk, UnityEngine.Vector3 gridSize)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x1480B84", Offset = "0x1480B84", VA = "0x1480B84")]
	private void EmitChunkMarker(DungeonBuilder builder, string markerName, UnityEngine.Vector3 gridPositionF, float angle, UnityEngine.Vector3 gridSize, int cellId)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x1480CC8", Offset = "0x1480CC8", VA = "0x1480CC8")]
	public FloorPlanRoomMarkers()
	{
	}
}
[Serializable]
[Token(Token = "0x2000010")]
public class SkyscraperRange
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float startDistance;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float endDistance;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string markerName;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x7E9D24", Offset = "0x7E9D24", VA = "0x7E9D24")]
	public SkyscraperRange()
	{
	}
}
[Token(Token = "0x2000011")]
public class CitySkyscraperInserter : DungeonEventListener
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkyscraperRange[] skyscraperRanges;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x8E6284", Offset = "0x8E6284", VA = "0x8E6284", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x8E66CC", Offset = "0x8E66CC", VA = "0x8E66CC")]
	public CitySkyscraperInserter()
	{
	}
}
[Token(Token = "0x2000012")]
public class SnapDemo_ProceduralLevelLayout : MonoBehaviour, IGrammarGraphBuildScript
{
	[Token(Token = "0x6000032")]
	[Address(RVA = "0x7ED1DC", Offset = "0x7ED1DC", VA = "0x7ED1DC", Slot = "4")]
	public void Generate(IGrammarGraphBuilder grammarBuilder)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x7ED708", Offset = "0x7ED708", VA = "0x7ED708")]
	public SnapDemo_ProceduralLevelLayout()
	{
	}
}
[Token(Token = "0x2000013")]
public class CliffTileRandomTransformer : TransformationRule
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tileWidth;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x8E69F8", Offset = "0x8E69F8", VA = "0x8E69F8", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x8E6AC4", Offset = "0x8E6AC4", VA = "0x8E6AC4")]
	public CliffTileRandomTransformer()
	{
	}
}
[Token(Token = "0x2000014")]
public class Pickup : MonoBehaviour
{
	[Token(Token = "0x6000036")]
	[Address(RVA = "0x99C9A8", Offset = "0x99C9A8", VA = "0x99C9A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x99C9AC", Offset = "0x99C9AC", VA = "0x99C9AC")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x99CAB8", Offset = "0x99CAB8", VA = "0x99CAB8")]
	public Pickup()
	{
	}
}
[Token(Token = "0x2000015")]
public class PickupWobbler : MonoBehaviour
{
	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector2 wobbleDirection;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float randomStartAngle;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 originalPosition;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x99CAC0", Offset = "0x99CAC0", VA = "0x99CAC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x99CB14", Offset = "0x99CB14", VA = "0x99CB14")]
	private void Update()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x99CBA4", Offset = "0x99CBA4", VA = "0x99CBA4")]
	public PickupWobbler()
	{
	}
}
[Token(Token = "0x2000016")]
public class PlayerCameraZoom : MonoBehaviour
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sensitivity;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zoomMultiplier;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxSpeed;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody2D rigidBody2D;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float startingZoom;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float targetZoom;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera cam;

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x99D3CC", Offset = "0x99D3CC", VA = "0x99D3CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x99D444", Offset = "0x99D444", VA = "0x99D444")]
	private void Update()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x99D500", Offset = "0x99D500", VA = "0x99D500")]
	public PlayerCameraZoom()
	{
	}
}
[Token(Token = "0x2000017")]
public class RotatorZ : MonoBehaviour
{
	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float frequency;

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xA96E84", Offset = "0xA96E84", VA = "0xA96E84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xA96EE8", Offset = "0xA96EE8", VA = "0xA96EE8")]
	public RotatorZ()
	{
	}
}
[Token(Token = "0x2000018")]
public class MiniMapCameraTracker : MonoBehaviour
{
	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform trackingTransform;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform baseDungeonTransform;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform dotTransform;

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xC30788", Offset = "0xC30788", VA = "0xC30788")]
	private void Start()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xC3078C", Offset = "0xC3078C", VA = "0xC3078C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xC3084C", Offset = "0xC3084C", VA = "0xC3084C")]
	public MiniMapCameraTracker()
	{
	}
}
[Token(Token = "0x2000019")]
public class MiniMapGenerator : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Graph> miniMapThemes;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject miniMapDungeonObject;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dungeon minimapDungeon;

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xC30DDC", Offset = "0xC30DDC", VA = "0xC30DDC")]
	public void BuildMiniMap(Dungeon baseDungeon)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xC31030", Offset = "0xC31030", VA = "0xC31030")]
	public void DestroyDungeon()
	{
	}

	[Token(Token = "0x6000046")]
	private void DisableComponent<T>(GameObject obj) where T : MonoBehaviour
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xC310C0", Offset = "0xC310C0", VA = "0xC310C0")]
	public MiniMapGenerator()
	{
	}
}
[Token(Token = "0x200001A")]
public class MiniMapRebuilder : DungeonEventListener
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MiniMapGenerator miniMap;

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xC310C8", Offset = "0xC310C8", VA = "0xC310C8", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xC310E0", Offset = "0xC310E0", VA = "0xC310E0", Slot = "9")]
	public override void OnDungeonDestroyed(Dungeon dungeon)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xC310F8", Offset = "0xC310F8", VA = "0xC310F8")]
	public MiniMapRebuilder()
	{
	}
}
[Token(Token = "0x200001B")]
public class MiniMapRenderer : MonoBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture miniMapRtt;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material miniMapMat;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int width;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int height;

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xC31100", Offset = "0xC31100", VA = "0xC31100")]
	private void Start()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xC31104", Offset = "0xC31104", VA = "0xC31104")]
	private void Update()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xC31108", Offset = "0xC31108", VA = "0xC31108")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xC3126C", Offset = "0xC3126C", VA = "0xC3126C")]
	public MiniMapRenderer()
	{
	}
}
[Token(Token = "0x200001C")]
public class BillboardGizmo : MonoBehaviour
{
	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string iconName;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x9BD9E0", Offset = "0x9BD9E0", VA = "0x9BD9E0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x9BDA54", Offset = "0x9BDA54", VA = "0x9BDA54")]
	public BillboardGizmo()
	{
	}
}
[Token(Token = "0x200001D")]
public class AdjacentCorridorTracker : MonoBehaviour
{
	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dungeon dungeon;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GridDungeonModel gridModel;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material materialCursor;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material materialCorridors;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material materialRooms;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<int> ConnectedCorridors;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> ConnectedRooms;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int cursorCellId;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x9ADC5C", Offset = "0x9ADC5C", VA = "0x9ADC5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x9ADD68", Offset = "0x9ADD68", VA = "0x9ADD68")]
	private Material CreateMaterial(Color color)
	{
		return null;
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x9ADED0", Offset = "0x9ADED0", VA = "0x9ADED0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x9AE4BC", Offset = "0x9AE4BC", VA = "0x9AE4BC")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x9AE580", Offset = "0x9AE580", VA = "0x9AE580")]
	private void DrawCells(List<int> cellIds, Material mat)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x9AE860", Offset = "0x9AE860", VA = "0x9AE860")]
	private void DrawQuad(UnityEngine.Vector3 start, UnityEngine.Vector3 size)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x9ADFC8", Offset = "0x9ADFC8", VA = "0x9ADFC8")]
	private DungeonArchitect.Builders.Grid.Cell FindCellAtMousePosition(Camera cam)
	{
		return null;
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x9AE8DC", Offset = "0x9AE8DC", VA = "0x9AE8DC")]
	public AdjacentCorridorTracker()
	{
	}
}
[Token(Token = "0x200001E")]
public class RemoveDuplicateMarkersWithinCell : DungeonEventListener
{
	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string markerName;

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xDE10E8", Offset = "0xDE10E8", VA = "0xDE10E8", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xDE166C", Offset = "0xDE166C", VA = "0xDE166C")]
	public RemoveDuplicateMarkersWithinCell()
	{
	}
}
[Token(Token = "0x200001F")]
public class VolumeSpawnExampleListener : DungeonEventListener
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Graph bossRoomTheme;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Graph spawnRoomTheme;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Graph[] roomThemes;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<GameObject> managedVolumes;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Volume themeVolumeTemplate;

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x7D0C38", Offset = "0x7D0C38", VA = "0x7D0C38", Slot = "4")]
	public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x7D13C0", Offset = "0x7D13C0", VA = "0x7D13C0", Slot = "9")]
	public override void OnDungeonDestroyed(Dungeon dungeon)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x7D10D8", Offset = "0x7D10D8", VA = "0x7D10D8")]
	private void DecorateRoom(Dungeon dungeon, GridDungeonModel gridModel, DungeonArchitect.Builders.Grid.Cell cell, Graph theme)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x7D1360", Offset = "0x7D1360", VA = "0x7D1360")]
	private Graph GetRandomTheme()
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x7D102C", Offset = "0x7D102C", VA = "0x7D102C")]
	private void FindStartEndRooms(GridDungeonModel gridModel, out DungeonArchitect.Builders.Grid.Cell spawnCell, out DungeonArchitect.Builders.Grid.Cell finalBossCell)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x7D0E8C", Offset = "0x7D0E8C", VA = "0x7D0E8C")]
	private void DestroyManagedVolumes()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x7D13C4", Offset = "0x7D13C4", VA = "0x7D13C4")]
	public VolumeSpawnExampleListener()
	{
	}
}
[Token(Token = "0x2000020")]
public class DemoHUD : MonoBehaviour
{
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIStyle guiStyle;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xA58F8C", Offset = "0xA58F8C", VA = "0xA58F8C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xA59048", Offset = "0xA59048", VA = "0xA59048")]
	public DemoHUD()
	{
	}
}
[Token(Token = "0x2000021")]
public class RegenerateDungeonLayout : MonoBehaviour
{
	[Token(Token = "0x2000022")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B2F0", Offset = "0x50B2F0")]
	private sealed class <RebuildDungeon>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RegenerateDungeonLayout <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600006B")]
			[Address(RVA = "0xA42CA8", Offset = "0xA42CA8", VA = "0xA42CA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006D")]
			[Address(RVA = "0xA42CF0", Offset = "0xA42CF0", VA = "0xA42CF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xA42AE4", Offset = "0xA42AE4", VA = "0xA42AE4")]
		[DebuggerHidden]
		public <RebuildDungeon>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xA42B10", Offset = "0xA42B10", VA = "0xA42B10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xA42B14", Offset = "0xA42B14", VA = "0xA42B14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0xA42CB0", Offset = "0xA42CB0", VA = "0xA42CB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dungeon dungeon;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool performCleanRebuild;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xDDED2C", Offset = "0xDDED2C", VA = "0xDDED2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xDDEDD0", Offset = "0xDDEDD0", VA = "0xDDEDD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xDDED58", Offset = "0xDDED58", VA = "0xDDED58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5137B0", Offset = "0x5137B0")]
	private IEnumerator RebuildDungeon()
	{
		return null;
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xDDEE1C", Offset = "0xDDEE1C", VA = "0xDDEE1C")]
	public RegenerateDungeonLayout()
	{
	}
}
[Token(Token = "0x2000023")]
internal class CellSpatialConfig3D
{
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string MarkerName;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] NeighborConfig;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RotationOffsetZ;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool StopOnFound;

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x8E2A08", Offset = "0x8E2A08", VA = "0x8E2A08")]
	public CellSpatialConfig3D()
	{
	}
}
[Token(Token = "0x2000024")]
public class CornerEmitter3D : DungeonMarkerEmitter
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<CellSpatialConfig3D> CornerConfigs;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool mergeRoomCorridor;

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xA4C8A0", Offset = "0xA4C8A0", VA = "0xA4C8A0")]
	private void RegisterConfig(string MarkerName, int[] NeighborConfig)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xA4C8A8", Offset = "0xA4C8A8", VA = "0xA4C8A8")]
	private void RegisterConfig(string MarkerName, int[] NeighborConfig, bool StopOnFound)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xA4CA10", Offset = "0xA4CA10", VA = "0xA4CA10")]
	private int[] Rotate90(int[] NeighborConfig)
	{
		return null;
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xA4CB54", Offset = "0xA4CB54", VA = "0xA4CB54", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xA4D374", Offset = "0xA4D374", VA = "0xA4D374")]
	private void EmitForPoint(DungeonBuilder builder, GridDungeonModel model, IntVector point)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xA4D508", Offset = "0xA4D508", VA = "0xA4D508")]
	private bool ConfigMatches(GridDungeonModel Model, IntVector Point, CellSpatialConfig3D Config)
	{
		return default(bool);
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xA4D908", Offset = "0xA4D908", VA = "0xA4D908")]
	private bool IsRoomCorridor(CellType type0, CellType type1)
	{
		return default(bool);
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xA4D744", Offset = "0xA4D744", VA = "0xA4D744")]
	private void EmitCornerMarker(DungeonBuilder builder, GridDungeonModel model, IntVector point, float angleY, string markerName)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xA4CF04", Offset = "0xA4CF04", VA = "0xA4CF04")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xA4D964", Offset = "0xA4D964", VA = "0xA4D964")]
	public CornerEmitter3D()
	{
	}
}
[Token(Token = "0x2000025")]
public class GaiaLandscapeModifier : DungeonEventListener
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Terrain terrain;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int corridorTextureIndex;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int roadBlurDistance;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float corridorBlurThreshold;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool modifyTextures;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool modifyDetails;

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x1484B5C", Offset = "0x1484B5C", VA = "0x1484B5C", Slot = "4")]
	public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x1484D64", Offset = "0x1484D64", VA = "0x1484D64")]
	private void UpdateTerrainDetails(GridDungeonModel model)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x1484C18", Offset = "0x1484C18", VA = "0x1484C18")]
	private void UpdateTerrainTextures(GridDungeonModel model)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x1484EE4", Offset = "0x1484EE4", VA = "0x1484EE4")]
	private void UpdateDetailTexture(GridDungeonModel model, int[,] map)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x14851D4", Offset = "0x14851D4", VA = "0x14851D4")]
	private void UpdateBaseTexture(GridDungeonModel model, float[,,] map)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x14856B0", Offset = "0x14856B0", VA = "0x14856B0")]
	public GaiaLandscapeModifier()
	{
	}
}
[Token(Token = "0x2000026")]
public class MarkerTerrainClampListener : DungeonEventListener
{
	[Token(Token = "0x600007F")]
	[Address(RVA = "0xC24AA0", Offset = "0xC24AA0", VA = "0xC24AA0", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xC24D68", Offset = "0xC24D68", VA = "0xC24D68")]
	private UnityEngine.Vector3 GetClampedPosition(ref Matrix4x4 mat, Terrain terrain)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xC24DB4", Offset = "0xC24DB4", VA = "0xC24DB4")]
	public MarkerTerrainClampListener()
	{
	}
}
[Token(Token = "0x2000027")]
public class RoomMidEmitter : DungeonMarkerEmitter
{
	[Token(Token = "0x6000082")]
	[Address(RVA = "0xA969B4", Offset = "0xA969B4", VA = "0xA969B4", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xA96D18", Offset = "0xA96D18", VA = "0xA96D18")]
	public RoomMidEmitter()
	{
	}
}
[Token(Token = "0x2000028")]
public class AlternateSelectionRule : SelectorRule
{
	[Token(Token = "0x6000084")]
	[Address(RVA = "0x9AF128", Offset = "0x9AF128", VA = "0x9AF128", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x9AF150", Offset = "0x9AF150", VA = "0x9AF150")]
	public AlternateSelectionRule()
	{
	}
}
[Token(Token = "0x2000029")]
public class BrokenTilesTransformRule : TransformationRule
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxAngle;

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x8D6F6C", Offset = "0x8D6F6C", VA = "0x8D6F6C", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x8D7024", Offset = "0x8D7024", VA = "0x8D7024")]
	public BrokenTilesTransformRule()
	{
	}
}
[Token(Token = "0x200002A")]
public class ClampToGroundTransformRule : TransformationRule
{
	[Token(Token = "0x6000088")]
	[Address(RVA = "0x8E66D4", Offset = "0x8E66D4", VA = "0x8E66D4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x8E68BC", Offset = "0x8E68BC", VA = "0x8E68BC")]
	public ClampToGroundTransformRule()
	{
	}
}
[Token(Token = "0x200002B")]
public class ClampToTerrainTransformRule : TransformationRule
{
	[Token(Token = "0x600008A")]
	[Address(RVA = "0x8E68C4", Offset = "0x8E68C4", VA = "0x8E68C4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x8E69F0", Offset = "0x8E69F0", VA = "0x8E69F0")]
	public ClampToTerrainTransformRule()
	{
	}
}
[Token(Token = "0x200002C")]
public class NonDoorTileSelectionRule : SelectorRule
{
	[Token(Token = "0x600008C")]
	[Address(RVA = "0xE94E88", Offset = "0xE94E88", VA = "0xE94E88", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xE94FD4", Offset = "0xE94FD4", VA = "0xE94FD4")]
	public NonDoorTileSelectionRule()
	{
	}
}
[Token(Token = "0x200002D")]
public class NonStairRoomTileSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x600008E")]
	[Address(RVA = "0xE957CC", Offset = "0xE957CC", VA = "0xE957CC", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xE95A18", Offset = "0xE95A18", VA = "0xE95A18")]
	public NonStairRoomTileSelectorRule()
	{
	}
}
[Token(Token = "0x200002E")]
public class NonStairTileSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x6000090")]
	[Address(RVA = "0xE95A84", Offset = "0xE95A84", VA = "0xE95A84", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xE95BAC", Offset = "0xE95BAC", VA = "0xE95BAC")]
	public NonStairTileSelectorRule()
	{
	}
}
[Token(Token = "0x200002F")]
public class NonViewBlockingPillarSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x6000092")]
	[Address(RVA = "0xE95C10", Offset = "0xE95C10", VA = "0xE95C10", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xE95D40", Offset = "0xE95D40", VA = "0xE95D40")]
	public NonViewBlockingPillarSelectorRule()
	{
	}
}
[Token(Token = "0x2000030")]
public class NonViewBlockingSelectionRule : SelectorRule
{
	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static UnityEngine.Vector3[] validDirections;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xE958F0", Offset = "0xE958F0", VA = "0xE958F0", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xE95A7C", Offset = "0xE95A7C", VA = "0xE95A7C")]
	public NonViewBlockingSelectionRule()
	{
	}
}
[Token(Token = "0x2000031")]
public class RandomCliffTransformRule : TransformationRule
{
	[Token(Token = "0x6000097")]
	[Address(RVA = "0xDDB9E4", Offset = "0xDDB9E4", VA = "0xDDB9E4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xDDBB70", Offset = "0xDDBB70", VA = "0xDDBB70")]
	public RandomCliffTransformRule()
	{
	}
}
[Token(Token = "0x2000032")]
public class RandomRotY90TransformRule : TransformationRule
{
	[Token(Token = "0x6000099")]
	[Address(RVA = "0xDDBCA4", Offset = "0xDDBCA4", VA = "0xDDBCA4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xDDBD1C", Offset = "0xDDBD1C", VA = "0xDDBD1C")]
	public RandomRotY90TransformRule()
	{
	}
}
[Token(Token = "0x2000033")]
public class RandomRotYTransformRule : TransformationRule
{
	[Token(Token = "0x600009B")]
	[Address(RVA = "0xDDBD24", Offset = "0xDDBD24", VA = "0xDDBD24", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xDDBDA8", Offset = "0xDDBDA8", VA = "0xDDBDA8")]
	public RandomRotYTransformRule()
	{
	}
}
[Token(Token = "0x2000034")]
public class RoomSelectionRule : SelectorRule
{
	[Token(Token = "0x600009D")]
	[Address(RVA = "0xA96D20", Offset = "0xA96D20", VA = "0xA96D20", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xA96DD0", Offset = "0xA96DD0", VA = "0xA96DD0")]
	public RoomSelectionRule()
	{
	}
}
[Token(Token = "0x2000035")]
public class SmallYTransformRule : TransformationRule
{
	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float angleVariation;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x7E9E84", Offset = "0x7E9E84", VA = "0x7E9E84", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x7E9F0C", Offset = "0x7E9F0C", VA = "0x7E9F0C")]
	public SmallYTransformRule()
	{
	}
}
[Token(Token = "0x2000036")]
public class ZFightingFixTransformRule : TransformationRule
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float movementDistance;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x7D641C", Offset = "0x7D641C", VA = "0x7D641C", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x7D6490", Offset = "0x7D6490", VA = "0x7D6490")]
	public ZFightingFixTransformRule()
	{
	}
}
[Token(Token = "0x2000037")]
public class CameraMovement : MonoBehaviour
{
	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x8E16A0", Offset = "0x8E16A0", VA = "0x8E16A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x8E16A4", Offset = "0x8E16A4", VA = "0x8E16A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x8E1848", Offset = "0x8E1848", VA = "0x8E1848")]
	public CameraMovement()
	{
	}
}
[Token(Token = "0x2000038")]
public class DestroyOnStart : MonoBehaviour
{
	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xA592B8", Offset = "0xA592B8", VA = "0xA592B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xA59330", Offset = "0xA59330", VA = "0xA59330")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xA59334", Offset = "0xA59334", VA = "0xA59334")]
	public DestroyOnStart()
	{
	}
}
[Token(Token = "0x2000039")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x50B300", Offset = "0x50B300")]
public class SimpleSmoothMouseLook : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector2 _mouseAbsolute;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector2 _smoothMouse;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector2 clampInDegrees;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool lockCursor;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Vector2 sensitivity;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UnityEngine.Vector2 smoothing;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public UnityEngine.Vector2 targetDirection;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public UnityEngine.Vector2 targetCharacterDirection;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject characterBody;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x7E91BC", Offset = "0x7E91BC", VA = "0x7E91BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x7E92A0", Offset = "0x7E92A0", VA = "0x7E92A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x7E96BC", Offset = "0x7E96BC", VA = "0x7E96BC")]
	public SimpleSmoothMouseLook()
	{
	}
}
[Token(Token = "0x200003A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B338", Offset = "0x50B338")]
public class InputManager : MonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public KeyMap[] KeyMapping;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator GolemAnimator;

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xCE80C8", Offset = "0xCE80C8", VA = "0xCE80C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xCE8124", Offset = "0xCE8124", VA = "0xCE8124")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xCE8268", Offset = "0xCE8268", VA = "0xCE8268")]
	public InputManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200003B")]
public struct KeyMap
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public KeyCode key;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string triggerName;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EventTypeG type;
}
[Serializable]
[Token(Token = "0x200003C")]
public enum EventTypeG
{
	[Token(Token = "0x4000065")]
	Trigger,
	[Token(Token = "0x4000066")]
	Boolean
}
[Token(Token = "0x200003D")]
public class RotateOverTime : MonoBehaviour
{
	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 DegreesPerFrame;

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xA96DE0", Offset = "0xA96DE0", VA = "0xA96DE0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xA96E18", Offset = "0xA96E18", VA = "0xA96E18")]
	public RotateOverTime()
	{
	}
}
[Token(Token = "0x200003E")]
public class DemoKeyCommands : MonoBehaviour
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject canvas;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xA59050", Offset = "0xA59050", VA = "0xA59050")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xA59054", Offset = "0xA59054", VA = "0xA59054")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xA590B4", Offset = "0xA590B4", VA = "0xA590B4")]
	public DemoKeyCommands()
	{
	}
}
[Serializable]
[Token(Token = "0x200003F")]
public class DemoWardrobe
{
	[Serializable]
	[Token(Token = "0x2000040")]
	public class WardrobeItem
	{
		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject wardrobe;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool active;

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x7DC5F4", Offset = "0x7DC5F4", VA = "0x7DC5F4")]
		public WardrobeItem()
		{
		}
	}

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<WardrobeItem> wardrobeObjects;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xA590BC", Offset = "0xA590BC", VA = "0xA590BC")]
	public DemoWardrobe()
	{
	}
}
[Token(Token = "0x2000041")]
public class IPBR_EnvironmentWarning : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string folderPath;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject panel;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xCE580C", Offset = "0xCE580C", VA = "0xCE580C")]
	public IPBR_EnvironmentWarning()
	{
	}
}
[Token(Token = "0x2000042")]
public class IPBR_SupportAndReview : MonoBehaviour
{
	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string url;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject panel;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xCE5868", Offset = "0xCE5868", VA = "0xCE5868")]
	public IPBR_SupportAndReview()
	{
	}
}
[Token(Token = "0x2000043")]
public class SFB_AnubisDemo : MonoBehaviour
{
	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject anubis;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform spawnPos;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject spawnObj;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xA986D4", Offset = "0xA986D4", VA = "0xA986D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xA98738", Offset = "0xA98738", VA = "0xA98738")]
	public void Locomotion(float newValue)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xA987A0", Offset = "0xA987A0", VA = "0xA987A0")]
	public void Cast()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xA9889C", Offset = "0xA9889C", VA = "0xA9889C")]
	public SFB_AnubisDemo()
	{
	}
}
[Token(Token = "0x2000044")]
public class SFB_CameraFocus : MonoBehaviour
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] targets;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SFB_CameraRotate_v2 cameraRotate;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SFB_StayWithTarget stayWithTarget;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xA9E570", Offset = "0xA9E570", VA = "0xA9E570")]
	public void SelectTarget(int newTarget)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xA9E614", Offset = "0xA9E614", VA = "0xA9E614")]
	public SFB_CameraFocus()
	{
	}
}
[Token(Token = "0x2000045")]
public class photoController : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string photoName;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int superSize;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject target;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas canvas;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x7D87B8", Offset = "0x7D87B8", VA = "0x7D87B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x7D89B4", Offset = "0x7D89B4", VA = "0x7D89B4")]
	public photoController()
	{
	}
}
[Token(Token = "0x2000046")]
public class MagicProjectileScript : MonoBehaviour
{
	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzleParticle;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] trailParticles;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public UnityEngine.Vector3 impactNormal;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool hasCollided;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x9EA6E8", Offset = "0x9EA6E8", VA = "0x9EA6E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x9EA930", Offset = "0x9EA930", VA = "0x9EA930")]
	private void OnCollisionEnter(Collision hit)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x9EAD50", Offset = "0x9EAD50", VA = "0x9EAD50")]
	public MagicProjectileScript()
	{
	}
}
[Token(Token = "0x2000047")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private UnityEngine.Vector3 headPos;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion headRot;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xC4A1BC", Offset = "0xC4A1BC", VA = "0xC4A1BC")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xC4A320", Offset = "0xC4A320", VA = "0xC4A320")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xC4A6BC", Offset = "0xC4A6BC", VA = "0xC4A6BC")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xC4A860", Offset = "0xC4A860", VA = "0xC4A860", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xC4A88C", Offset = "0xC4A88C", VA = "0xC4A88C")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x2000048")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xDD2E9C", Offset = "0xDD2E9C", VA = "0xDD2E9C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xDD2F24", Offset = "0xDD2F24", VA = "0xDD2F24")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xDD3098", Offset = "0xDD3098", VA = "0xDD3098")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x2000049")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000003")]
	public bool IsVisible
	{
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x77EBA4", Offset = "0x77EBA4", VA = "0x77EBA4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x77EBAC", Offset = "0x77EBAC", VA = "0x77EBAC")]
		set
		{
		}
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x77ECE8", Offset = "0x77ECE8", VA = "0x77ECE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x77EEB0", Offset = "0x77EEB0", VA = "0x77EEB0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x77EEB8", Offset = "0x77EEB8", VA = "0x77EEB8")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x200004A")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x200004B")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xA42CF8", Offset = "0xA42CF8", VA = "0xA42CF8")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200004C")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50D400", Offset = "0x50D400")]
		public float FakeLatencyMax;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50D418", Offset = "0x50D418")]
		public float FakeLatencyMin;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50D430", Offset = "0x50D430")]
		public float LatencyWeight;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50D448", Offset = "0x50D448")]
		public int MaxSamples;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0xA42D00", Offset = "0xA42D00", VA = "0xA42D00")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0xA42E38", Offset = "0xA42E38", VA = "0xA42E38")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xDE04D0", Offset = "0xDE04D0", VA = "0xDE04D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xDE0628", Offset = "0xDE0628", VA = "0xDE0628")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xDE0A0C", Offset = "0xDE0A0C", VA = "0xDE0A0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xDE0958", Offset = "0xDE0958", VA = "0xDE0958")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xDE0D3C", Offset = "0xDE0D3C", VA = "0xDE0D3C")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xDE1024", Offset = "0xDE1024", VA = "0xDE1024")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x200004D")]
public class P2PManager
{
	[Token(Token = "0x200004E")]
	private enum MessageType : byte
	{
		[Token(Token = "0x4000098")]
		Update = 1
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xC4B400", Offset = "0xC4B400", VA = "0xC4B400")]
	public P2PManager()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xC4B4E0", Offset = "0xC4B4E0", VA = "0xC4B4E0")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xC4B5C4", Offset = "0xC4B5C4", VA = "0xC4B5C4")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xC4B644", Offset = "0xC4B644", VA = "0xC4B644")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xC4B7B4", Offset = "0xC4B7B4", VA = "0xC4B7B4")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xC4B9F4", Offset = "0xC4B9F4", VA = "0xC4B9F4")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xC4BDE4", Offset = "0xC4BDE4", VA = "0xC4BDE4")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xC4C0A0", Offset = "0xC4C0A0", VA = "0xC4C0A0")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xC4BBC0", Offset = "0xC4BBC0", VA = "0xC4BBC0")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xC4BFD4", Offset = "0xC4BFD4", VA = "0xC4BFD4")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xC4BCA4", Offset = "0xC4BCA4", VA = "0xC4BCA4")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xC4C2D8", Offset = "0xC4C2D8", VA = "0xC4C2D8")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xC4BC08", Offset = "0xC4BC08", VA = "0xC4BC08")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xC4C018", Offset = "0xC4C018", VA = "0xC4C018")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xC4BD48", Offset = "0xC4BD48", VA = "0xC4BD48")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xC4C360", Offset = "0xC4C360", VA = "0xC4C360")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x200004F")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x99D51C", Offset = "0x99D51C", VA = "0x99D51C", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x99D560", Offset = "0x99D560", VA = "0x99D560", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x99D598", Offset = "0x99D598", VA = "0x99D598", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x99D5C0", Offset = "0x99D5C0", VA = "0x99D5C0")]
	private void checkInput()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x99D75C", Offset = "0x99D75C", VA = "0x99D75C")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x99D7DC", Offset = "0x99D7DC", VA = "0x99D7DC")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x99D830", Offset = "0x99D830", VA = "0x99D830")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x2000050")]
public class RemotePlayer
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector3 receivedRootPosition;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UnityEngine.Vector3 receivedRootPositionPrior;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xDE10E0", Offset = "0xDE10E0", VA = "0xDE10E0")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x2000051")]
public class RoomManager
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xA957E4", Offset = "0xA957E4", VA = "0xA957E4")]
	public RoomManager()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xA958E8", Offset = "0xA958E8", VA = "0xA958E8")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xA95A68", Offset = "0xA95A68", VA = "0xA95A68")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xA95BA4", Offset = "0xA95BA4", VA = "0xA95BA4")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xA95C78", Offset = "0xA95C78", VA = "0xA95C78")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xA95DB4", Offset = "0xA95DB4", VA = "0xA95DB4")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xA95A98", Offset = "0xA95A98", VA = "0xA95A98")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xA95E3C", Offset = "0xA95E3C", VA = "0xA95E3C")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xA965E8", Offset = "0xA965E8", VA = "0xA965E8")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xA9693C", Offset = "0xA9693C", VA = "0xA9693C")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xA96170", Offset = "0xA96170", VA = "0xA96170")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x2000052")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x2000053")]
	public enum State
	{
		[Token(Token = "0x40000D0")]
		INITIALIZING,
		[Token(Token = "0x40000D1")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x40000D2")]
		CREATING_A_ROOM,
		[Token(Token = "0x40000D3")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x40000D4")]
		JOINING_A_ROOM,
		[Token(Token = "0x40000D5")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x40000D6")]
		LEAVING_A_ROOM,
		[Token(Token = "0x40000D7")]
		SHUTDOWN
	}

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly UnityEngine.Vector3 START_ROTATION_ONE;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly UnityEngine.Vector3 START_POSITION_ONE;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly UnityEngine.Vector3 START_ROTATION_TWO;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly UnityEngine.Vector3 START_POSITION_TWO;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly UnityEngine.Vector3 START_ROTATION_THREE;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly UnityEngine.Vector3 START_POSITION_THREE;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly UnityEngine.Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly UnityEngine.Vector3 START_POSITION_FOUR;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x17000004")]
	public static State CurrentState
	{
		[Token(Token = "0x6000108")]
		[Address(RVA = "0x7F0768", Offset = "0x7F0768", VA = "0x7F0768")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000005")]
	public static ulong MyID
	{
		[Token(Token = "0x6000109")]
		[Address(RVA = "0x7F07D8", Offset = "0x7F07D8", VA = "0x7F07D8")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000006")]
	public static string MyOculusID
	{
		[Token(Token = "0x600010A")]
		[Address(RVA = "0x7F08B8", Offset = "0x7F08B8", VA = "0x7F08B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x7EE8C4", Offset = "0x7EE8C4", VA = "0x7EE8C4", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x7EEC68", Offset = "0x7EEC68", VA = "0x7EEC68", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x7EF3D8", Offset = "0x7EF3D8", VA = "0x7EF3D8")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x7EF6F8", Offset = "0x7EF6F8", VA = "0x7EF6F8", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x7EF6FC", Offset = "0x7EF6FC", VA = "0x7EF6FC")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x7EF81C", Offset = "0x7EF81C", VA = "0x7EF81C")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x7EFF70", Offset = "0x7EFF70", VA = "0x7EFF70")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x7F0364", Offset = "0x7F0364", VA = "0x7F0364")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x7F0574", Offset = "0x7F0574", VA = "0x7F0574")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x7F06FC", Offset = "0x7F06FC", VA = "0x7F06FC")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x7EF064", Offset = "0x7EF064", VA = "0x7EF064")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x7EF580", Offset = "0x7EF580", VA = "0x7EF580")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x7EF118", Offset = "0x7EF118", VA = "0x7EF118")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x7F09E0", Offset = "0x7F09E0", VA = "0x7F09E0")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x7F0B5C", Offset = "0x7F0B5C", VA = "0x7F0B5C")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x7F0C40", Offset = "0x7F0C40", VA = "0x7F0C40")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x7F0D9C", Offset = "0x7F0D9C", VA = "0x7F0D9C")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x7F0E80", Offset = "0x7F0E80", VA = "0x7F0E80")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x7EF638", Offset = "0x7EF638", VA = "0x7EF638")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x7F13C8", Offset = "0x7F13C8", VA = "0x7F13C8")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x7F145C", Offset = "0x7F145C", VA = "0x7F145C")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x7F11B4", Offset = "0x7F11B4", VA = "0x7F11B4")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x7F1668", Offset = "0x7F1668", VA = "0x7F1668")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x7EE840", Offset = "0x7EE840", VA = "0x7EE840")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x513860", Offset = "0x513860")]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x7F17AC", Offset = "0x7F17AC", VA = "0x7F17AC")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x7F1888", Offset = "0x7F1888", VA = "0x7F1888")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x2000054")]
public class VoipManager
{
	[Token(Token = "0x600011A")]
	[Address(RVA = "0x7CFCCC", Offset = "0x7CFCCC", VA = "0x7CFCCC")]
	public VoipManager()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x7CFDAC", Offset = "0x7CFDAC", VA = "0x7CFDAC")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x7CFE90", Offset = "0x7CFE90", VA = "0x7CFE90")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x7CFF10", Offset = "0x7CFF10", VA = "0x7CFF10")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x7D0080", Offset = "0x7D0080", VA = "0x7D0080")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x2000055")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x77E860", Offset = "0x77E860", VA = "0x77E860")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x77E8E8", Offset = "0x77E8E8", VA = "0x77E8E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x77EA5C", Offset = "0x77EA5C", VA = "0x77EA5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x77EAC0", Offset = "0x77EAC0", VA = "0x77EAC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x77E924", Offset = "0x77E924", VA = "0x77E924")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x77EB84", Offset = "0x77EB84", VA = "0x77EB84")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, UnityEngine.Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x77EB9C", Offset = "0x77EB9C", VA = "0x77EB9C")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x2000056")]
public class AvatarLayer
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x9B5090", Offset = "0x9B5090", VA = "0x9B5090")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000057")]
public class PacketRecordSettings
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xC3E3E4", Offset = "0xC3E3E4", VA = "0xC3E3E4")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x2000058")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x2000059")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x600015C")]
		[Address(RVA = "0xA3C370", Offset = "0xA3C370", VA = "0xA3C370")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x200005A")]
	public enum HandType
	{
		[Token(Token = "0x4000139")]
		Right,
		[Token(Token = "0x400013A")]
		Left,
		[Token(Token = "0x400013B")]
		Max
	}

	[Token(Token = "0x200005B")]
	public enum HandJoint
	{
		[Token(Token = "0x400013D")]
		HandBase,
		[Token(Token = "0x400013E")]
		IndexBase,
		[Token(Token = "0x400013F")]
		IndexTip,
		[Token(Token = "0x4000140")]
		ThumbBase,
		[Token(Token = "0x4000141")]
		ThumbTip,
		[Token(Token = "0x4000142")]
		Max
	}

	[Token(Token = "0x200005C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B398", Offset = "0x50B398")]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000160")]
			[Address(RVA = "0xA3C320", Offset = "0xA3C320", VA = "0xA3C320", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000162")]
			[Address(RVA = "0xA3C368", Offset = "0xA3C368", VA = "0xA3C368", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0xA3C144", Offset = "0xA3C144", VA = "0xA3C144")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0xA3C170", Offset = "0xA3C170", VA = "0xA3C170", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0xA3C174", Offset = "0xA3C174", VA = "0xA3C174", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0xA3C328", Offset = "0xA3C328", VA = "0xA3C328", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D460", Offset = "0x50D460")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D498", Offset = "0x50D498")]
	public bool EnableBody;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D4D0", Offset = "0x50D4D0")]
	public bool RecordPackets;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D508", Offset = "0x50D508")]
	public bool StartWithControllers;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D540", Offset = "0x50D540")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D540", Offset = "0x50D540")]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D5B0", Offset = "0x50D5B0")]
	private bool CombineMeshes;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D5E8", Offset = "0x50D5E8")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D620", Offset = "0x50D620")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x50D658", Offset = "0x50D658")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D690", Offset = "0x50D690")]
	public bool EnableLaughter;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x4000119")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly UnityEngine.Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x400011B")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x400011C")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x400011D")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x400011E")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x400011F")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static UnityEngine.Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xC37AA0", Offset = "0xC37AA0", VA = "0xC37AA0")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xC37F40", Offset = "0xC37F40", VA = "0xC37F40")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xC37FD4", Offset = "0xC37FD4", VA = "0xC37FD4")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xC3803C", Offset = "0xC3803C", VA = "0xC3803C")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xC3816C", Offset = "0xC3816C", VA = "0xC3816C")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xC383D4", Offset = "0xC383D4", VA = "0xC383D4")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xC38608", Offset = "0xC38608", VA = "0xC38608")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xC38C3C", Offset = "0xC38C3C", VA = "0xC38C3C")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xC38D18", Offset = "0xC38D18", VA = "0xC38D18")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xC38D90", Offset = "0xC38D90", VA = "0xC38D90")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xC38E78", Offset = "0xC38E78", VA = "0xC38E78")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xC38F04", Offset = "0xC38F04", VA = "0xC38F04")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(UnityEngine.Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xC38F8C", Offset = "0xC38F8C", VA = "0xC38F8C")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, UnityEngine.Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xC38FA4", Offset = "0xC38FA4", VA = "0xC38FA4")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x6000136")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xC39454", Offset = "0xC39454", VA = "0xC39454")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xC397D4", Offset = "0xC397D4", VA = "0xC397D4")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xC399C0", Offset = "0xC399C0", VA = "0xC399C0")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xC39C0C", Offset = "0xC39C0C", VA = "0xC39C0C")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xC39D00", Offset = "0xC39D00", VA = "0xC39D00")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xC3A814", Offset = "0xC3A814", VA = "0xC3A814")]
	private void Start()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xC3AC2C", Offset = "0xC3AC2C", VA = "0xC3AC2C")]
	private void Update()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xC3B6BC", Offset = "0xC3B6BC", VA = "0xC3B6BC")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xC3B710", Offset = "0xC3B710", VA = "0xC3B710")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xC39FA8", Offset = "0xC39FA8", VA = "0xC39FA8")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xC3A04C", Offset = "0xC3A04C", VA = "0xC3A04C")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xC3B740", Offset = "0xC3B740", VA = "0xC3B740")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xC3AFF8", Offset = "0xC3AFF8", VA = "0xC3AFF8")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xC3B9B0", Offset = "0xC3B9B0", VA = "0xC3B9B0")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xC3B7A4", Offset = "0xC3B7A4", VA = "0xC3B7A4")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xC3C13C", Offset = "0xC3C13C", VA = "0xC3C13C")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xC3C5B8", Offset = "0xC3C5B8", VA = "0xC3C5B8")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xC3C9BC", Offset = "0xC3C9BC", VA = "0xC3C9BC")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xC3CB10", Offset = "0xC3CB10", VA = "0xC3CB10")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xC3CCF4", Offset = "0xC3CCF4", VA = "0xC3CCF4")]
	public void GetPointingDirection(HandType hand, ref UnityEngine.Vector3 forward, ref UnityEngine.Vector3 up)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xC3B23C", Offset = "0xC3B23C", VA = "0xC3B23C")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xC3CDC8", Offset = "0xC3CDC8", VA = "0xC3CDC8")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xC3B008", Offset = "0xC3B008", VA = "0xC3B008")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xC3CEB8", Offset = "0xC3CEB8", VA = "0xC3CEB8")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xC3D56C", Offset = "0xC3D56C", VA = "0xC3D56C")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xC3DA50", Offset = "0xC3DA50", VA = "0xC3DA50")]
	private static ovrAvatarLight CreateLightDirectional(uint id, UnityEngine.Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xC3DA78", Offset = "0xC3DA78", VA = "0xC3DA78")]
	private static ovrAvatarLight CreateLightPoint(uint id, UnityEngine.Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xC3DAA0", Offset = "0xC3DAA0", VA = "0xC3DAA0")]
	private static ovrAvatarLight CreateLightSpot(uint id, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xC3B548", Offset = "0xC3B548", VA = "0xC3B548")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xC3CF88", Offset = "0xC3CF88", VA = "0xC3CF88")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xC3DED0", Offset = "0xC3DED0", VA = "0xC3DED0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5138C0", Offset = "0x5138C0")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xC3DF48", Offset = "0xC3DF48", VA = "0xC3DF48")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xC3DD90", Offset = "0xC3DD90", VA = "0xC3DD90")]
	public GameObject CreateHelperObject(Transform parent, UnityEngine.Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xC3E00C", Offset = "0xC3E00C", VA = "0xC3E00C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xC3E0F4", Offset = "0xC3E0F4", VA = "0xC3E0F4")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xC3DADC", Offset = "0xC3DADC", VA = "0xC3DADC")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xC3E1DC", Offset = "0xC3E1DC", VA = "0xC3E1DC")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x200005D")]
public class OvrAvatarAsset
{
	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xC3E3F8", Offset = "0xC3E3F8", VA = "0xC3E3F8")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x200005E")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xC3E4C8", Offset = "0xC3E4C8", VA = "0xC3E4C8")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xC3F780", Offset = "0xC3F780", VA = "0xC3F780")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xC3F354", Offset = "0xC3F354", VA = "0xC3F354")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xC3F0D8", Offset = "0xC3F0D8", VA = "0xC3F0D8")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xC3F1C0", Offset = "0xC3F1C0", VA = "0xC3F1C0")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xC3FA10", Offset = "0xC3FA10", VA = "0xC3FA10")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x200005F")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x400014B")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xC3FFD8", Offset = "0xC3FFD8", VA = "0xC3FFD8")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x2000060")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xC40254", Offset = "0xC40254", VA = "0xC40254")]
	private void Update()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xC406A4", Offset = "0xC406A4", VA = "0xC406A4")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x2000061")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xC3C84C", Offset = "0xC3C84C", VA = "0xC3C84C")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xC407D4", Offset = "0xC407D4", VA = "0xC407D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xC40904", Offset = "0xC40904", VA = "0xC40904")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x2000062")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xC40964", Offset = "0xC40964", VA = "0xC40964")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xC40384", Offset = "0xC40384", VA = "0xC40384")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xC40FB4", Offset = "0xC40FB4", VA = "0xC40FB4")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xC41014", Offset = "0xC41014", VA = "0xC41014")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xC417C8", Offset = "0xC417C8", VA = "0xC417C8")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xC40704", Offset = "0xC40704", VA = "0xC40704")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x2000063")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x2000064")]
	public enum PacketMode
	{
		[Token(Token = "0x400015F")]
		SDK,
		[Token(Token = "0x4000160")]
		Unity
	}

	[Token(Token = "0x2000065")]
	public struct ControllerPose
	{
		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Vector2 joystickPosition;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x600017D")]
		[Address(RVA = "0xA3C3F0", Offset = "0xA3C3F0", VA = "0xA3C3F0")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x2000066")]
	public struct PoseFrame
	{
		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector3 headPosition;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 handLeftPosition;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 handRightPosition;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x600017E")]
		[Address(RVA = "0xA3C4CC", Offset = "0xA3C4CC", VA = "0xA3C4CC")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xC430F8", Offset = "0xC430F8", VA = "0xC430F8")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x6000178")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xC43108", Offset = "0xC43108", VA = "0xC43108")]
	private void Start()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xC3A0F0", Offset = "0xC3A0F0", VA = "0xC3A0F0")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xC43190", Offset = "0xC43190", VA = "0xC43190")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xC43198", Offset = "0xC43198", VA = "0xC43198")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x2000067")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xC431A8", Offset = "0xC431A8", VA = "0xC431A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xC43318", Offset = "0xC43318", VA = "0xC43318")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x2000068")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private UnityEngine.Vector3 centerEyePosition;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xC43380", Offset = "0xC43380", VA = "0xC43380")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xC434E4", Offset = "0xC434E4", VA = "0xC434E4")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xC43880", Offset = "0xC43880", VA = "0xC43880")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xC43AA4", Offset = "0xC43AA4", VA = "0xC43AA4", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xC43AD0", Offset = "0xC43AD0", VA = "0xC43AD0")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x2000069")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x200006A")]
	public enum TextureType
	{
		[Token(Token = "0x4000196")]
		DiffuseTextures,
		[Token(Token = "0x4000197")]
		NormalMaps,
		[Token(Token = "0x4000198")]
		RoughnessMaps,
		[Token(Token = "0x4000199")]
		Count
	}

	[Token(Token = "0x200006B")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x200006C")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x200006D")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x200006E")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x6000195")]
		[Address(RVA = "0xA3CF10", Offset = "0xA3CF10", VA = "0xA3CF10")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x200006F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B3A8", Offset = "0x50B3A8")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000199")]
			[Address(RVA = "0xA3CEC0", Offset = "0xA3CEC0", VA = "0xA3CEC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600019B")]
			[Address(RVA = "0xA3CF08", Offset = "0xA3CF08", VA = "0xA3CF08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0xA3C7D0", Offset = "0xA3C7D0", VA = "0xA3C7D0")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0xA3C7FC", Offset = "0xA3C7FC", VA = "0xA3C7FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0xA3C800", Offset = "0xA3C800", VA = "0xA3C800", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0xA3CEC8", Offset = "0xA3CEC8", VA = "0xA3CEC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x4000191")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x4000192")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x4000193")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x4000194")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xC43B1C", Offset = "0xC43B1C", VA = "0xC43B1C")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xC43CFC", Offset = "0xC43CFC", VA = "0xC43CFC")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xC43D3C", Offset = "0xC43D3C", VA = "0xC43D3C")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xC444D0", Offset = "0xC444D0", VA = "0xC444D0")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xC447B8", Offset = "0xC447B8", VA = "0xC447B8")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xC43DD8", Offset = "0xC43DD8", VA = "0xC43DD8")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xC448A4", Offset = "0xC448A4", VA = "0xC448A4")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xC4422C", Offset = "0xC4422C", VA = "0xC4422C")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xC44B34", Offset = "0xC44B34", VA = "0xC44B34")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xC44DD8", Offset = "0xC44DD8", VA = "0xC44DD8")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xC44F00", Offset = "0xC44F00", VA = "0xC44F00")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xC44F38", Offset = "0xC44F38", VA = "0xC44F38")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xC4443C", Offset = "0xC4443C", VA = "0xC4443C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513970", Offset = "0x513970")]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xC45EA0", Offset = "0xC45EA0", VA = "0xC45EA0")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x2000070")]
public class OvrAvatarPacket
{
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x1700000B")]
	public float Duration
	{
		[Token(Token = "0x600019C")]
		[Address(RVA = "0xC3BE34", Offset = "0xC3BE34", VA = "0xC3BE34")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700000C")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0xC3BF80", Offset = "0xC3BF80", VA = "0xC3BF80")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xC3C010", Offset = "0xC3C010", VA = "0xC3C010")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xC3BC68", Offset = "0xC3BC68", VA = "0xC3BC68")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xC464DC", Offset = "0xC464DC", VA = "0xC464DC")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xC3BEA8", Offset = "0xC3BEA8", VA = "0xC3BEA8")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xC46648", Offset = "0xC46648", VA = "0xC46648")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xC46878", Offset = "0xC46878", VA = "0xC46878")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xC46B54", Offset = "0xC46B54", VA = "0xC46B54")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x2000071")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x9BDEB0", Offset = "0x9BDEB0", VA = "0x9BDEB0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x9BDFC4", Offset = "0x9BDFC4", VA = "0x9BDFC4")]
	public static void Write(this BinaryWriter writer, UnityEngine.Vector3 vec3)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x9BE170", Offset = "0x9BE170", VA = "0x9BE170")]
	public static void Write(this BinaryWriter writer, UnityEngine.Vector2 vec2)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x9BE034", Offset = "0x9BE034", VA = "0x9BE034")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x9BE0C8", Offset = "0x9BE0C8", VA = "0x9BE0C8")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x2000072")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x9BDAB0", Offset = "0x9BDAB0", VA = "0x9BDAB0")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x9BDE54", Offset = "0x9BDE54", VA = "0x9BDE54")]
	public static UnityEngine.Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x9BDC50", Offset = "0x9BDC50", VA = "0x9BDC50")]
	public static UnityEngine.Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x9BDCC8", Offset = "0x9BDCC8", VA = "0x9BDCC8")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x9BDD64", Offset = "0x9BDD64", VA = "0x9BDD64")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x2000073")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x40001BB")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x40001BC")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xC46D7C", Offset = "0xC46D7C", VA = "0xC46D7C")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xC46E04", Offset = "0xC46E04", VA = "0xC46E04", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xC46E20", Offset = "0xC46E20", VA = "0xC46E20")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xC46FC4", Offset = "0xC46FC4", VA = "0xC46FC4")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xC471B0", Offset = "0xC471B0", VA = "0xC471B0")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x2000074")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xC47254", Offset = "0xC47254", VA = "0xC47254")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xC47338", Offset = "0xC47338", VA = "0xC47338")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xC4752C", Offset = "0xC4752C", VA = "0xC4752C")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xC478E4", Offset = "0xC478E4", VA = "0xC478E4")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xC479F0", Offset = "0xC479F0", VA = "0xC479F0")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x2000075")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x40001C5")]
	Body = 1,
	[Token(Token = "0x40001C6")]
	Hands = 2,
	[Token(Token = "0x40001C7")]
	Base = 4,
	[Token(Token = "0x40001C8")]
	BodyTilt = 0x10,
	[Token(Token = "0x40001C9")]
	Expressive = 0x20,
	[Token(Token = "0x40001CA")]
	All = -1
}
[Token(Token = "0x2000076")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x40001CC")]
	AvatarSpecification,
	[Token(Token = "0x40001CD")]
	AssetLoaded,
	[Token(Token = "0x40001CE")]
	Count
}
[Token(Token = "0x2000077")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x2000078")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x2000079")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x40001D4")]
	Mesh,
	[Token(Token = "0x40001D5")]
	Texture,
	[Token(Token = "0x40001D6")]
	Pose,
	[Token(Token = "0x40001D7")]
	Material,
	[Token(Token = "0x40001D8")]
	CombinedMesh,
	[Token(Token = "0x40001D9")]
	PBSMaterial,
	[Token(Token = "0x40001DA")]
	FailedLoad,
	[Token(Token = "0x40001DB")]
	Count
}
[Token(Token = "0x200007A")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x200007B")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x200007C")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x200007D")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x200007E")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x200007F")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x4000210")]
	RGB24,
	[Token(Token = "0x4000211")]
	DXT1,
	[Token(Token = "0x4000212")]
	DXT5,
	[Token(Token = "0x4000213")]
	ASTC_RGB_6x6,
	[Token(Token = "0x4000214")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x4000215")]
	Count
}
[Token(Token = "0x2000080")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x2000081")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x400021D")]
	SkinnedMeshRender,
	[Token(Token = "0x400021E")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x400021F")]
	ProjectorRender,
	[Token(Token = "0x4000220")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x4000221")]
	Count
}
[Token(Token = "0x2000082")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x4000223")]
	Unknown,
	[Token(Token = "0x4000224")]
	Default,
	[Token(Token = "0x4000225")]
	Verbose,
	[Token(Token = "0x4000226")]
	Debug,
	[Token(Token = "0x4000227")]
	Info,
	[Token(Token = "0x4000228")]
	Warn,
	[Token(Token = "0x4000229")]
	Error,
	[Token(Token = "0x400022A")]
	Fatal,
	[Token(Token = "0x400022B")]
	Silent
}
[Token(Token = "0x2000083")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 scale;
}
[Token(Token = "0x2000084")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x4000230")]
	One = 1,
	[Token(Token = "0x4000231")]
	Two = 2,
	[Token(Token = "0x4000232")]
	Three = 4,
	[Token(Token = "0x4000233")]
	Joystick = 8
}
[Token(Token = "0x2000085")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x4000235")]
	One = 1,
	[Token(Token = "0x4000236")]
	Two = 2,
	[Token(Token = "0x4000237")]
	Joystick = 4,
	[Token(Token = "0x4000238")]
	ThumbRest = 8,
	[Token(Token = "0x4000239")]
	Index = 0x10,
	[Token(Token = "0x400023A")]
	Pointing = 0x40,
	[Token(Token = "0x400023B")]
	ThumbUp = 0x80
}
[Token(Token = "0x2000086")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x2000087")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x2000088")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x2000089")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 basePosition;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200008A")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200008B")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x200008C")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200008D")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x200008E")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x400025B")]
	Add,
	[Token(Token = "0x400025C")]
	Multiply,
	[Token(Token = "0x400025D")]
	Count
}
[Token(Token = "0x200008F")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x400025F")]
	Color,
	[Token(Token = "0x4000260")]
	Texture,
	[Token(Token = "0x4000261")]
	TextureSingleChannel,
	[Token(Token = "0x4000262")]
	Parallax,
	[Token(Token = "0x4000263")]
	Count
}
[Token(Token = "0x2000090")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x4000265")]
	None,
	[Token(Token = "0x4000266")]
	Positional,
	[Token(Token = "0x4000267")]
	ViewReflection,
	[Token(Token = "0x4000268")]
	Fresnel,
	[Token(Token = "0x4000269")]
	Pulse,
	[Token(Token = "0x400026A")]
	Count
}
[Token(Token = "0x2000091")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x400026C")]
	Touch,
	[Token(Token = "0x400026D")]
	Malibu,
	[Token(Token = "0x400026E")]
	Go,
	[Token(Token = "0x400026F")]
	Quest,
	[Token(Token = "0x4000270")]
	Count
}
[Token(Token = "0x2000092")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x4000272")]
	Lowest = 1,
	[Token(Token = "0x4000273")]
	Medium = 3,
	[Token(Token = "0x4000274")]
	Highest = 5
}
[Token(Token = "0x2000093")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x4000276")]
	Unknown = -1,
	[Token(Token = "0x4000277")]
	One,
	[Token(Token = "0x4000278")]
	Two
}
[Token(Token = "0x2000094")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x7D7AB0", Offset = "0x7D7AB0", VA = "0x7D7AB0")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x7D7AE0", Offset = "0x7D7AE0", VA = "0x7D7AE0", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x7D7CFC", Offset = "0x7D7CFC", VA = "0x7D7CFC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000095")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x7D7DE0", Offset = "0x7D7DE0", VA = "0x7D7DE0")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x7D7E10", Offset = "0x7D7E10", VA = "0x7D7E10", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x7D81AC", Offset = "0x7D81AC", VA = "0x7D81AC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000096")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x7D7040", Offset = "0x7D7040", VA = "0x7D7040")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x7D7070", Offset = "0x7D7070", VA = "0x7D7070", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x7D7300", Offset = "0x7D7300", VA = "0x7D7300", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000097")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x7D8314", Offset = "0x7D8314", VA = "0x7D8314")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x7D8344", Offset = "0x7D8344", VA = "0x7D8344", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x7D8534", Offset = "0x7D8534", VA = "0x7D8534", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000098")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xC3E400", Offset = "0xC3E400", VA = "0xC3E400")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x2000099")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x200009A")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x40002AD")]
	FirstPerson = 1,
	[Token(Token = "0x40002AE")]
	ThirdPerson = 2,
	[Token(Token = "0x40002AF")]
	SelfOccluding = 4
}
[Token(Token = "0x200009B")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200009C")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200009D")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x200009E")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x200009F")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x40002C5")]
	Default,
	[Token(Token = "0x40002C6")]
	GripSphere,
	[Token(Token = "0x40002C7")]
	GripCube,
	[Token(Token = "0x40002C8")]
	Count
}
[Token(Token = "0x20000A0")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x40002CA")]
	Body,
	[Token(Token = "0x40002CB")]
	Clothing,
	[Token(Token = "0x40002CC")]
	Eyewear,
	[Token(Token = "0x40002CD")]
	Hair,
	[Token(Token = "0x40002CE")]
	Beard,
	[Token(Token = "0x40002CF")]
	Count
}
[Token(Token = "0x20000A1")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x20000A2")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x20000A3")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x20000A4")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x20000A5")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x40002D9")]
	AvatarHead,
	[Token(Token = "0x40002DA")]
	AvatarHand,
	[Token(Token = "0x40002DB")]
	Object,
	[Token(Token = "0x40002DC")]
	ObjectStatic,
	[Token(Token = "0x40002DD")]
	Count
}
[Token(Token = "0x20000A6")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public UnityEngine.Vector3 worldPosition;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x20000A7")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x20000A8")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x20000A9")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x20000AA")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x40002E9")]
	Point,
	[Token(Token = "0x40002EA")]
	Direction,
	[Token(Token = "0x40002EB")]
	Spot,
	[Token(Token = "0x40002EC")]
	Count
}
[Token(Token = "0x20000AB")]
public struct ovrAvatarLight
{
	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector3 worldDirection;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 worldPosition;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x20000AC")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x20000AD")]
public struct ovrAvatarLights
{
	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x20000AE")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x20000AF")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x4000302")]
	None = 0u,
	[Token(Token = "0x4000303")]
	GazeTarget = 1u,
	[Token(Token = "0x4000304")]
	Any = uint.MaxValue
}
[Token(Token = "0x20000B0")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 startPoint;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector3 endPoint;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 color;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x20000B1")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x20000B2")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x20000B3")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x20000B4")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x20000B5")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x20000B6")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xA3CF18", Offset = "0xA3CF18", VA = "0xA3CF18")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x4000319")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x1700000D")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0xC3A358", Offset = "0xC3A358", VA = "0xC3A358")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xC47A00", Offset = "0xC47A00", VA = "0xC47A00")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xC47D50", Offset = "0xC47D50", VA = "0xC47D50")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xC47DC0", Offset = "0xC47DC0", VA = "0xC47DC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xC48790", Offset = "0xC48790", VA = "0xC48790")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xC487E4", Offset = "0xC487E4", VA = "0xC487E4")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xC3ABC8", Offset = "0xC3ABC8", VA = "0xC3ABC8")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xC3B1D8", Offset = "0xC3B1D8", VA = "0xC3B1D8")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xC3AB38", Offset = "0xC3AB38", VA = "0xC3AB38")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xC48590", Offset = "0xC48590", VA = "0xC48590")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xC3A5CC", Offset = "0xC3A5CC", VA = "0xC3A5CC")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xC3A720", Offset = "0xC3A720", VA = "0xC3A720")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xC3A550", Offset = "0xC3A550", VA = "0xC3A550")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xC48884", Offset = "0xC48884", VA = "0xC48884")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xC47D04", Offset = "0xC47D04", VA = "0xC47D04")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xC44530", Offset = "0xC44530", VA = "0xC44530")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xC48964", Offset = "0xC48964", VA = "0xC48964")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x20000B7")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x1700000E")]
	public static string AppID
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0xC48924", Offset = "0xC48924", VA = "0xC48924")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xC48AD4", Offset = "0xC48AD4", VA = "0xC48AD4")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public static string MobileAppID
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xC48944", Offset = "0xC48944", VA = "0xC48944")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xC48B04", Offset = "0xC48B04", VA = "0xC48B04")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xC4897C", Offset = "0xC4897C", VA = "0xC4897C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xC48B34", Offset = "0xC48B34", VA = "0xC48B34")]
		set
		{
		}
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xC48B88", Offset = "0xC48B88", VA = "0xC48B88")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x20000B8")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xC38248", Offset = "0xC38248", VA = "0xC38248")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xC4096C", Offset = "0xC4096C", VA = "0xC4096C")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xC4A034", Offset = "0xC4A034", VA = "0xC4A034")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xC4A19C", Offset = "0xC4A19C", VA = "0xC4A19C")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x20000B9")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xC384AC", Offset = "0xC384AC", VA = "0xC384AC")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xC40BA8", Offset = "0xC40BA8", VA = "0xC40BA8")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xC4A1AC", Offset = "0xC4A1AC", VA = "0xC4A1AC")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x20000BA")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x4000330")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x4000331")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x4000332")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xC387E8", Offset = "0xC387E8", VA = "0xC387E8")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xC40D78", Offset = "0xC40D78", VA = "0xC40D78")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xC497B8", Offset = "0xC497B8", VA = "0xC497B8")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xC48ED0", Offset = "0xC48ED0", VA = "0xC48ED0")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xC48BF4", Offset = "0xC48BF4", VA = "0xC48BF4")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xC48D58", Offset = "0xC48D58", VA = "0xC48D58")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xC4A024", Offset = "0xC4A024", VA = "0xC4A024")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x20000BB")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000BC")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x20000BD")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xA3D614", Offset = "0xA3D614", VA = "0xA3D614")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x20000BE")]
	public struct TextureSet
	{
		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x600020C")]
		[Address(RVA = "0xA3D670", Offset = "0xA3D670", VA = "0xA3D670")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B428", Offset = "0x50B428")]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000210")]
			[Address(RVA = "0xA3D5C4", Offset = "0xA3D5C4", VA = "0xA3D5C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000212")]
			[Address(RVA = "0xA3D60C", Offset = "0xA3D60C", VA = "0xA3D60C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xA3CF94", Offset = "0xA3CF94", VA = "0xA3CF94")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0xA3CFC0", Offset = "0xA3CFC0", VA = "0xA3CFC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xA3CFC4", Offset = "0xA3CFC4", VA = "0xA3CFC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xA3D5CC", Offset = "0xA3D5CC", VA = "0xA3D5CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x4000336")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x4000337")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x400033A")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x400033B")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x400033C")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x400033D")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x400033E")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x400033F")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x4000340")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xC4A8D8", Offset = "0xC4A8D8", VA = "0xC4A8D8")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xC4ADB8", Offset = "0xC4ADB8", VA = "0xC4ADB8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xC4AFB8", Offset = "0xC4AFB8", VA = "0xC4AFB8")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xC44988", Offset = "0xC44988", VA = "0xC44988")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xC4AF2C", Offset = "0xC4AF2C", VA = "0xC4AF2C")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xC445B0", Offset = "0xC445B0", VA = "0xC445B0")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xC44800", Offset = "0xC44800", VA = "0xC44800")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xC4B004", Offset = "0xC4B004", VA = "0xC4B004")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513AC0", Offset = "0x513AC0")]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xC48838", Offset = "0xC48838", VA = "0xC48838")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xC4B0B0", Offset = "0xC4B0B0", VA = "0xC4B0B0")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x20000C0")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xC4B228", Offset = "0xC4B228", VA = "0xC4B228")]
	private void Update()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xC4B398", Offset = "0xC4B398", VA = "0xC4B398")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x20000C1")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x20000C2")]
	public delegate void OnClick();

	[Token(Token = "0x20000C3")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x20000C4")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x20000C5")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B438", Offset = "0x50B438")]
	private sealed class <>c__DisplayClass38_0
	{
		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnClick handler;

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x7DB9CC", Offset = "0x7DB9CC", VA = "0x7DB9CC")]
		public <>c__DisplayClass38_0()
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x7DB9D4", Offset = "0x7DB9D4", VA = "0x7DB9D4")]
		internal void <AddButton>b__0()
		{
		}
	}

	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B448", Offset = "0x50B448")]
	private sealed class <>c__DisplayClass40_0
	{
		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnSlider onValueChanged;

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x7DBBF8", Offset = "0x7DBBF8", VA = "0x7DBBF8")]
		public <>c__DisplayClass40_0()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x7DBC00", Offset = "0x7DBC00", VA = "0x7DBC00")]
		internal void <AddSlider>b__0(float f)
		{
		}
	}

	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B458", Offset = "0x50B458")]
	private sealed class <>c__DisplayClass42_0
	{
		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x7DBE4C", Offset = "0x7DBE4C", VA = "0x7DBE4C")]
		public <>c__DisplayClass42_0()
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x7DBE54", Offset = "0x7DBE54", VA = "0x7DBE54")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B468", Offset = "0x50B468")]
	private sealed class <>c__DisplayClass43_0
	{
		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x7DC1E8", Offset = "0x7DC1E8", VA = "0x7DC1E8")]
		public <>c__DisplayClass43_0()
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x7DC1F0", Offset = "0x7DC1F0", VA = "0x7DC1F0")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B478", Offset = "0x50B478")]
	private sealed class <>c__DisplayClass44_0
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange handler;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle tb;

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x7DC210", Offset = "0x7DC210", VA = "0x7DC210")]
		public <>c__DisplayClass44_0()
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x7DC218", Offset = "0x7DC218", VA = "0x7DC218")]
		internal void <AddRadio>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x4000352")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x4000353")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x4000354")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x4000363")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x4000364")]
	public const float marginH = 16f;

	[Token(Token = "0x4000365")]
	public const float marginV = 16f;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private UnityEngine.Vector2[] insertPositions;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private UnityEngine.Vector3 menuOffset;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private OVRCameraRig rig;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LaserPointer lp;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private LineRenderer lr;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public bool isHorizontal;

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xA540D0", Offset = "0xA540D0", VA = "0xA540D0")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xA54600", Offset = "0xA54600", VA = "0xA54600")]
	public void Show()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xA54BFC", Offset = "0xA54BFC", VA = "0xA54BFC")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xA549B8", Offset = "0xA549B8", VA = "0xA549B8")]
	private void Relayout()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xA54DB8", Offset = "0xA54DB8", VA = "0xA54DB8")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xA550D8", Offset = "0xA550D8", VA = "0xA550D8")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xA554A0", Offset = "0xA554A0", VA = "0xA554A0")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xA555A4", Offset = "0xA555A4", VA = "0xA555A4")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xA55788", Offset = "0xA55788", VA = "0xA55788")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xA5582C", Offset = "0xA5582C", VA = "0xA5582C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xA55A1C", Offset = "0xA55A1C", VA = "0xA55A1C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xA55C24", Offset = "0xA55C24", VA = "0xA55C24")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xA55F28", Offset = "0xA55F28", VA = "0xA55F28")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xA56024", Offset = "0xA56024", VA = "0xA56024")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xA560D0", Offset = "0xA560D0", VA = "0xA560D0")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x20000CB")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xD48474", Offset = "0xD48474", VA = "0xD48474")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xD48524", Offset = "0xD48524", VA = "0xD48524")]
	private void Update()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xD485E4", Offset = "0xD485E4", VA = "0xD485E4")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xD48620", Offset = "0xD48620", VA = "0xD48620")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x20000CC")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x20000CD")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x4000383")]
		On,
		[Token(Token = "0x4000384")]
		Off,
		[Token(Token = "0x4000385")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private UnityEngine.Vector3 _startPoint;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 _forward;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 _endPoint;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000013")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000243")]
		[Address(RVA = "0x9E0774", Offset = "0x9E0774", VA = "0x9E0774")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000242")]
		[Address(RVA = "0x9E0730", Offset = "0x9E0730", VA = "0x9E0730")]
		set
		{
		}
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x9E077C", Offset = "0x9E077C", VA = "0x9E077C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x9E07D8", Offset = "0x9E07D8", VA = "0x9E07D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x9E091C", Offset = "0x9E091C", VA = "0x9E091C", Slot = "5")]
	public override void SetCursorStartDest(UnityEngine.Vector3 start, UnityEngine.Vector3 dest, UnityEngine.Vector3 normal)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x9E0938", Offset = "0x9E0938", VA = "0x9E0938", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x9E098C", Offset = "0x9E098C", VA = "0x9E098C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x9E0B48", Offset = "0x9E0B48", VA = "0x9E0B48")]
	private void UpdateLaserBeam(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x9E0C5C", Offset = "0x9E0C5C", VA = "0x9E0C5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x9E0CEC", Offset = "0x9E0CEC", VA = "0x9E0CEC")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x9E0DB8", Offset = "0x9E0DB8", VA = "0x9E0DB8")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x9E0E6C", Offset = "0x9E0E6C", VA = "0x9E0E6C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x9E0F58", Offset = "0x9E0F58", VA = "0x9E0F58")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x20000CE")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x4000386")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x4000387")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x4000388")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D7A8", Offset = "0x50D7A8")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D7E0", Offset = "0x50D7E0")]
	public LayerMask CollideLayers;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D818", Offset = "0x50D818")]
	public float HeightOffset;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D850", Offset = "0x50D850")]
	public float MinimumHeight;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D888", Offset = "0x50D888")]
	public float MaximumHeight;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x8E2A18", Offset = "0x8E2A18", VA = "0x8E2A18")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x8E2A20", Offset = "0x8E2A20", VA = "0x8E2A20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x8E2AAC", Offset = "0x8E2AAC", VA = "0x8E2AAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x8E2B40", Offset = "0x8E2B40", VA = "0x8E2B40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x8E2BD4", Offset = "0x8E2BD4", VA = "0x8E2BD4")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x8E2F00", Offset = "0x8E2F00", VA = "0x8E2F00")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x8E3130", Offset = "0x8E3130", VA = "0x8E3130")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000CF")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x9E4940", Offset = "0x9E4940", VA = "0x9E4940")]
	private void Start()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x9E4A0C", Offset = "0x9E4A0C", VA = "0x9E4A0C")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000D0")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x20000D1")]
	public enum States
	{
		[Token(Token = "0x40003B6")]
		Ready,
		[Token(Token = "0x40003B7")]
		Aim,
		[Token(Token = "0x40003B8")]
		CancelAim,
		[Token(Token = "0x40003B9")]
		PreTeleport,
		[Token(Token = "0x40003BA")]
		CancelTeleport,
		[Token(Token = "0x40003BB")]
		Teleporting,
		[Token(Token = "0x40003BC")]
		PostTeleport
	}

	[Token(Token = "0x20000D2")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40003BE")]
		None,
		[Token(Token = "0x40003BF")]
		Aim,
		[Token(Token = "0x40003C0")]
		PreTeleport,
		[Token(Token = "0x40003C1")]
		Teleport
	}

	[Token(Token = "0x20000D3")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40003C3")]
		Point,
		[Token(Token = "0x40003C4")]
		Sphere,
		[Token(Token = "0x40003C5")]
		Capsule
	}

	[Token(Token = "0x20000D4")]
	public class AimData
	{
		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Vector3? Destination;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50DCA0", Offset = "0x50DCA0")]
		private List<UnityEngine.Vector3> <Points>k__BackingField;

		[Token(Token = "0x17000017")]
		public List<UnityEngine.Vector3> Points
		{
			[Token(Token = "0x600028D")]
			[Address(RVA = "0x7E5394", Offset = "0x7E5394", VA = "0x7E5394")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513FE8", Offset = "0x513FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600028E")]
			[Address(RVA = "0x7E539C", Offset = "0x7E539C", VA = "0x7E539C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513FF8", Offset = "0x513FF8")]
			private set
			{
			}
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x7E5310", Offset = "0x7E5310", VA = "0x7E5310")]
		public AimData()
		{
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x7E53A4", Offset = "0x7E53A4", VA = "0x7E53A4")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B488", Offset = "0x50B488")]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000293")]
			[Address(RVA = "0x7E515C", Offset = "0x7E515C", VA = "0x7E515C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000295")]
			[Address(RVA = "0x7E51A4", Offset = "0x7E51A4", VA = "0x7E51A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x7E5020", Offset = "0x7E5020", VA = "0x7E5020")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x7E504C", Offset = "0x7E504C", VA = "0x7E504C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x7E5050", Offset = "0x7E5050", VA = "0x7E5050", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x7E5164", Offset = "0x7E5164", VA = "0x7E5164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B498", Offset = "0x50B498")]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000299")]
			[Address(RVA = "0x7E4A8C", Offset = "0x7E4A8C", VA = "0x7E4A8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600029B")]
			[Address(RVA = "0x7E4AD4", Offset = "0x7E4AD4", VA = "0x7E4AD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x7E4904", Offset = "0x7E4904", VA = "0x7E4904")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x7E4930", Offset = "0x7E4930", VA = "0x7E4930", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x7E4934", Offset = "0x7E4934", VA = "0x7E4934", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x7E4A94", Offset = "0x7E4A94", VA = "0x7E4A94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4A8", Offset = "0x50B4A8")]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600029F")]
			[Address(RVA = "0x7E4BB8", Offset = "0x7E4BB8", VA = "0x7E4BB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A1")]
			[Address(RVA = "0x7E4C00", Offset = "0x7E4C00", VA = "0x7E4C00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x7E4ADC", Offset = "0x7E4ADC", VA = "0x7E4ADC")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x7E4B08", Offset = "0x7E4B08", VA = "0x7E4B08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x7E4B0C", Offset = "0x7E4B0C", VA = "0x7E4B0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x7E4BC0", Offset = "0x7E4BC0", VA = "0x7E4BC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4B8", Offset = "0x50B4B8")]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0x7E4FD0", Offset = "0x7E4FD0", VA = "0x7E4FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A7")]
			[Address(RVA = "0x7E5018", Offset = "0x7E5018", VA = "0x7E5018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x7E4EB4", Offset = "0x7E4EB4", VA = "0x7E4EB4")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x7E4EE0", Offset = "0x7E4EE0", VA = "0x7E4EE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x7E4EE4", Offset = "0x7E4EE4", VA = "0x7E4EE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x7E4FD8", Offset = "0x7E4FD8", VA = "0x7E4FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4C8", Offset = "0x50B4C8")]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002AB")]
			[Address(RVA = "0x7E4CE4", Offset = "0x7E4CE4", VA = "0x7E4CE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002AD")]
			[Address(RVA = "0x7E4D2C", Offset = "0x7E4D2C", VA = "0x7E4D2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x7E4C08", Offset = "0x7E4C08", VA = "0x7E4C08")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x7E4C34", Offset = "0x7E4C34", VA = "0x7E4C34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x7E4C38", Offset = "0x7E4C38", VA = "0x7E4C38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x7E4CEC", Offset = "0x7E4CEC", VA = "0x7E4CEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4D8", Offset = "0x50B4D8")]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B1")]
			[Address(RVA = "0x7E52C0", Offset = "0x7E52C0", VA = "0x7E52C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B3")]
			[Address(RVA = "0x7E5308", Offset = "0x7E5308", VA = "0x7E5308", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x7E51AC", Offset = "0x7E51AC", VA = "0x7E51AC")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x7E51D8", Offset = "0x7E51D8", VA = "0x7E51D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x7E51DC", Offset = "0x7E51DC", VA = "0x7E51DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x7E52C8", Offset = "0x7E52C8", VA = "0x7E52C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4E8", Offset = "0x50B4E8")]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B7")]
			[Address(RVA = "0x7E4E64", Offset = "0x7E4E64", VA = "0x7E4E64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B9")]
			[Address(RVA = "0x7E4EAC", Offset = "0x7E4EAC", VA = "0x7E4EAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x7E4D34", Offset = "0x7E4D34", VA = "0x7E4D34")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x7E4D60", Offset = "0x7E4D60", VA = "0x7E4D60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x7E4D64", Offset = "0x7E4D64", VA = "0x7E4D64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x7E4E6C", Offset = "0x7E4E6C", VA = "0x7E4E6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D8C0", Offset = "0x50D8C0")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D8F8", Offset = "0x50D8F8")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D930", Offset = "0x50D930")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D968", Offset = "0x50D968")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D9A0", Offset = "0x50D9A0")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50D9D8", Offset = "0x50D9D8")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DA10", Offset = "0x50DA10")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DA48", Offset = "0x50DA48")]
	public bool EnableRotationDuringPostTeleport;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50DA80", Offset = "0x50DA80")]
	private States <CurrentState>k__BackingField;

	[NonSerialized]
	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DA90", Offset = "0x50DA90")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DAC8", Offset = "0x50DAC8")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50DB10", Offset = "0x50DB10")]
	private LocomotionController <LocomotionController>k__BackingField;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DB20", Offset = "0x50DB20")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DB58", Offset = "0x50DB58")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DB90", Offset = "0x50DB90")]
	public float AimCollisionRadius;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DBC8", Offset = "0x50DBC8")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000014")]
	public States CurrentState
	{
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x9E5508", Offset = "0x9E5508", VA = "0x9E5508")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513B70", Offset = "0x513B70")]
		get
		{
			return default(States);
		}
		[Token(Token = "0x600025B")]
		[Address(RVA = "0x9E5510", Offset = "0x9E5510", VA = "0x9E5510")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513B80", Offset = "0x513B80")]
		private set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x600025F")]
		[Address(RVA = "0x9E5734", Offset = "0x9E5734", VA = "0x9E5734")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000016")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x6000260")]
		[Address(RVA = "0x9E575C", Offset = "0x9E575C", VA = "0x9E575C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513BB0", Offset = "0x513BB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000261")]
		[Address(RVA = "0x9E5764", Offset = "0x9E5764", VA = "0x9E5764")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513BC0", Offset = "0x513BC0")]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, UnityEngine.Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x9E5518", Offset = "0x9E5518", VA = "0x9E5518")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513B90", Offset = "0x513B90")]
		add
		{
		}
		[Token(Token = "0x600025D")]
		[Address(RVA = "0x9E55B8", Offset = "0x9E55B8", VA = "0x9E55B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513BA0", Offset = "0x513BA0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x9E5DA4", Offset = "0x9E5DA4", VA = "0x9E5DA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513C08", Offset = "0x513C08")]
		add
		{
		}
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x9E5E44", Offset = "0x9E5E44", VA = "0x9E5E44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513C18", Offset = "0x513C18")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x9E5EE4", Offset = "0x9E5EE4", VA = "0x9E5EE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513C88", Offset = "0x513C88")]
		add
		{
		}
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x9E5F84", Offset = "0x9E5F84", VA = "0x9E5F84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513C98", Offset = "0x513C98")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x9E6024", Offset = "0x9E6024", VA = "0x9E6024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513CA8", Offset = "0x513CA8")]
		add
		{
		}
		[Token(Token = "0x6000271")]
		[Address(RVA = "0x9E60C4", Offset = "0x9E60C4", VA = "0x9E60C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513CB8", Offset = "0x513CB8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x9E61D4", Offset = "0x9E61D4", VA = "0x9E61D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513CC8", Offset = "0x513CC8")]
		add
		{
		}
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x9E6274", Offset = "0x9E6274", VA = "0x9E6274")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513CD8", Offset = "0x513CD8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x9E638C", Offset = "0x9E638C", VA = "0x9E638C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513D48", Offset = "0x513D48")]
		add
		{
		}
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x9E642C", Offset = "0x9E642C", VA = "0x9E642C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513D58", Offset = "0x513D58")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x9E6544", Offset = "0x9E6544", VA = "0x9E6544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513DC8", Offset = "0x513DC8")]
		add
		{
		}
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x9E65E4", Offset = "0x9E65E4", VA = "0x9E65E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513DD8", Offset = "0x513DD8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x9E66FC", Offset = "0x9E66FC", VA = "0x9E66FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513E48", Offset = "0x513E48")]
		add
		{
		}
		[Token(Token = "0x600027D")]
		[Address(RVA = "0x9E679C", Offset = "0x9E679C", VA = "0x9E679C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513E58", Offset = "0x513E58")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x600027F")]
		[Address(RVA = "0x9E68B4", Offset = "0x9E68B4", VA = "0x9E68B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513EC8", Offset = "0x513EC8")]
		add
		{
		}
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x9E6954", Offset = "0x9E6954", VA = "0x9E6954")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513ED8", Offset = "0x513ED8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x9E6A6C", Offset = "0x9E6A6C", VA = "0x9E6A6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513F48", Offset = "0x513F48")]
		add
		{
		}
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x9E6B0C", Offset = "0x9E6B0C", VA = "0x9E6B0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513F58", Offset = "0x513F58")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, UnityEngine.Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x9E6C24", Offset = "0x9E6C24", VA = "0x9E6C24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513FC8", Offset = "0x513FC8")]
		add
		{
		}
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x9E6CC4", Offset = "0x9E6CC4", VA = "0x9E6CC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x513FD8", Offset = "0x513FD8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x9E51B4", Offset = "0x9E51B4", VA = "0x9E51B4")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x9E51D8", Offset = "0x9E51D8", VA = "0x9E51D8")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x9E5658", Offset = "0x9E5658", VA = "0x9E5658")]
	public void OnUpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x9E576C", Offset = "0x9E576C", VA = "0x9E576C")]
	public bool AimCollisionTest(UnityEngine.Vector3 start, UnityEngine.Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x9E59B8", Offset = "0x9E59B8", VA = "0x9E59B8")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x513BD0", Offset = "0x513BD0")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x9E5A6C", Offset = "0x9E5A6C", VA = "0x9E5A6C")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x9E5B6C", Offset = "0x9E5B6C", VA = "0x9E5B6C")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x9E5B88", Offset = "0x9E5B88", VA = "0x9E5B88")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x9E5C4C", Offset = "0x9E5C4C", VA = "0x9E5C4C")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x9E5C90", Offset = "0x9E5C90", VA = "0x9E5C90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x9E5CF4", Offset = "0x9E5CF4", VA = "0x9E5CF4", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x9E5D9C", Offset = "0x9E5D9C", VA = "0x9E5D9C", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x9E5D24", Offset = "0x9E5D24", VA = "0x9E5D24")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513C28", Offset = "0x513C28")]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x9E6164", Offset = "0x9E6164", VA = "0x9E6164")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x9E6314", Offset = "0x9E6314", VA = "0x9E6314")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513CE8", Offset = "0x513CE8")]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x9E64CC", Offset = "0x9E64CC", VA = "0x9E64CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513D68", Offset = "0x513D68")]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x9E6684", Offset = "0x9E6684", VA = "0x9E6684")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513DE8", Offset = "0x513DE8")]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x9E683C", Offset = "0x9E683C", VA = "0x9E683C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513E68", Offset = "0x513E68")]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x9E69F4", Offset = "0x9E69F4", VA = "0x9E69F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513EE8", Offset = "0x513EE8")]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x9E6BAC", Offset = "0x9E6BAC", VA = "0x9E6BAC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x513F68", Offset = "0x513F68")]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x9E6D64", Offset = "0x9E6D64", VA = "0x9E6D64")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x9E6EA4", Offset = "0x9E6EA4", VA = "0x9E6EA4")]
	public UnityEngine.Vector3 GetCharacterPosition()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x9E6ED8", Offset = "0x9E6ED8", VA = "0x9E6ED8")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x9E6FA0", Offset = "0x9E6FA0", VA = "0x9E6FA0")]
	public void DoWarp(UnityEngine.Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x9E7098", Offset = "0x9E7098", VA = "0x9E7098")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000DC")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xAA59D8", Offset = "0xAA59D8", VA = "0xAA59D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514238", Offset = "0x514238")]
		add
		{
		}
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xAA5A78", Offset = "0xAA5A78", VA = "0xAA5A78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514248", Offset = "0x514248")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xAA5B18", Offset = "0xAA5B18", VA = "0xAA5B18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514258", Offset = "0x514258")]
		add
		{
		}
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xAA5BB8", Offset = "0xAA5BB8", VA = "0xAA5BB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514268", Offset = "0x514268")]
		remove
		{
		}
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xAA5C58", Offset = "0xAA5C58", VA = "0xAA5C58")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xAA5D44", Offset = "0xAA5D44", VA = "0xAA5D44")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xAA5D48", Offset = "0xAA5D48", VA = "0xAA5D48")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xAA5DBC", Offset = "0xAA5DBC", VA = "0xAA5DBC")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xAA5EE0", Offset = "0xAA5EE0", VA = "0xAA5EE0")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xAA60C8", Offset = "0xAA60C8", VA = "0xAA60C8")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xAA62D0", Offset = "0xAA62D0", VA = "0xAA62D0")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000DD")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xD765DC", Offset = "0xD765DC", VA = "0xD765DC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xD7667C", Offset = "0xD7667C", VA = "0xD7667C", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60002C7")]
	public abstract void GetPoints(List<UnityEngine.Vector3> points);

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xD7676C", Offset = "0xD7676C", VA = "0xD7676C")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000DE")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DCD0", Offset = "0x50DCD0")]
	public float Range;

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xD7677C", Offset = "0xD7677C", VA = "0xD7677C", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xD76878", Offset = "0xD76878", VA = "0xD76878")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000DF")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DD08", Offset = "0x50DD08")]
	public float Range;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DD40", Offset = "0x50DD40")]
	public float MinimumElevation;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DD78", Offset = "0x50DD78")]
	public float Gravity;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50DDB0", Offset = "0x50DDB0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DDB0", Offset = "0x50DDB0")]
	public float AimVelocity;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50DE0C", Offset = "0x50DE0C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DE0C", Offset = "0x50DE0C")]
	public float AimStep;

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xD76888", Offset = "0xD76888", VA = "0xD76888", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xD76A18", Offset = "0xD76A18", VA = "0xD76A18")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000E0")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DE64", Offset = "0x50DE64")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] _linePoints;

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xD76A2C", Offset = "0xD76A2C", VA = "0xD76A2C")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xD76B68", Offset = "0xD76B68", VA = "0xD76B68")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xD76B98", Offset = "0xD76B98", VA = "0xD76B98")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xD76BC8", Offset = "0xD76BC8", VA = "0xD76BC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xD76C78", Offset = "0xD76C78", VA = "0xD76C78", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xD76CE4", Offset = "0xD76CE4", VA = "0xD76CE4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xD76D4C", Offset = "0xD76D4C", VA = "0xD76D4C")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000E1")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50DE9C", Offset = "0x50DE9C")]
	private bool <IsValidDestination>k__BackingField;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DEAC", Offset = "0x50DEAC")]
	public Transform PositionIndicator;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DEE4", Offset = "0x50DEE4")]
	public Transform OrientationIndicator;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DF1C", Offset = "0x50DF1C")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, UnityEngine.Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000026")]
	public bool IsValidDestination
	{
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xD76E70", Offset = "0xD76E70", VA = "0xD76E70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514278", Offset = "0x514278")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xD76E78", Offset = "0xD76E78", VA = "0xD76E78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514288", Offset = "0x514288")]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xD77034", Offset = "0xD77034", VA = "0xD77034")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514298", Offset = "0x514298")]
		add
		{
		}
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xD770D4", Offset = "0xD770D4", VA = "0xD770D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5142A8", Offset = "0x5142A8")]
		remove
		{
		}
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xD76E84", Offset = "0xD76E84", VA = "0xD76E84")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xD76F1C", Offset = "0xD76F1C", VA = "0xD76F1C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xD76FF0", Offset = "0xD76FF0", VA = "0xD76FF0")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xD77030", Offset = "0xD77030", VA = "0xD77030")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xD77174", Offset = "0xD77174", VA = "0xD77174")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xD771D8", Offset = "0xD771D8", VA = "0xD771D8")]
	public void Recycle()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xD771F8", Offset = "0xD771F8", VA = "0xD771F8", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000E2")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B4F8", Offset = "0x50B4F8")]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002EB")]
			[Address(RVA = "0xA46888", Offset = "0xA46888", VA = "0xA46888", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0xA468D0", Offset = "0xA468D0", VA = "0xA468D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xA467C0", Offset = "0xA467C0", VA = "0xA467C0")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xA467EC", Offset = "0xA467EC", VA = "0xA467EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xA467F0", Offset = "0xA467F0", VA = "0xA467F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xA46890", Offset = "0xA46890", VA = "0xA46890", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B508", Offset = "0x50B508")]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002F1")]
			[Address(RVA = "0xA46770", Offset = "0xA46770", VA = "0xA46770", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F3")]
			[Address(RVA = "0xA467B8", Offset = "0xA467B8", VA = "0xA467B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xA466A4", Offset = "0xA466A4", VA = "0xA466A4")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xA466D0", Offset = "0xA466D0", VA = "0xA466D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xA466D4", Offset = "0xA466D4", VA = "0xA466D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xA46778", Offset = "0xA46778", VA = "0xA46778", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xD77404", Offset = "0xD77404", VA = "0xD77404")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xD774D8", Offset = "0xD774D8", VA = "0xD774D8", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xD77538", Offset = "0xD77538", VA = "0xD77538", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xD775F8", Offset = "0xD775F8", VA = "0xD775F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5142B8", Offset = "0x5142B8")]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xD77670", Offset = "0xD77670", VA = "0xD77670")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514318", Offset = "0x514318")]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x60002E5")]
	public abstract void GetAimData(out Ray aimRay);

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xD776E8", Offset = "0xD776E8", VA = "0xD776E8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514378", Offset = "0x514378")]
	private void <.ctor>b__2_0()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xD77714", Offset = "0xD77714", VA = "0xD77714")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514388", Offset = "0x514388")]
	private void <.ctor>b__2_1()
	{
	}
}
[Token(Token = "0x20000E5")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50DF64", Offset = "0x50DF64")]
	private Transform <Pointer>k__BackingField;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DF74", Offset = "0x50DF74")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DFAC", Offset = "0x50DFAC")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50DFE4", Offset = "0x50DFE4")]
	public bool FastTeleport;

	[Token(Token = "0x1700002B")]
	public Transform Pointer
	{
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xD77740", Offset = "0xD77740", VA = "0xD77740")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514438", Offset = "0x514438")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xD77748", Offset = "0xD77748", VA = "0xD77748")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514448", Offset = "0x514448")]
		private set
		{
		}
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xD77750", Offset = "0xD77750", VA = "0xD77750", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xD778A8", Offset = "0xD778A8", VA = "0xD778A8", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xD77960", Offset = "0xD77960", VA = "0xD77960")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000E6")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x20000E7")]
	public enum InputModes
	{
		[Token(Token = "0x4000416")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4000417")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000418")]
		ThumbstickTeleport,
		[Token(Token = "0x4000419")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x20000E8")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x400041B")]
		A,
		[Token(Token = "0x400041C")]
		B,
		[Token(Token = "0x400041D")]
		LeftTrigger,
		[Token(Token = "0x400041E")]
		LeftThumbstick,
		[Token(Token = "0x400041F")]
		RightTrigger,
		[Token(Token = "0x4000420")]
		RightThumbstick,
		[Token(Token = "0x4000421")]
		X,
		[Token(Token = "0x4000422")]
		Y
	}

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E01C", Offset = "0x50E01C")]
	public InputModes InputMode;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E054", Offset = "0x50E054")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E08C", Offset = "0x50E08C")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E0C4", Offset = "0x50E0C4")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xD77964", Offset = "0xD77964", VA = "0xD77964")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xD77968", Offset = "0xD77968", VA = "0xD77968", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xD77D50", Offset = "0xD77D50", VA = "0xD77D50", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xD77E10", Offset = "0xD77E10", VA = "0xD77E10")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000E9")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x20000EA")]
	public enum OrientationModes
	{
		[Token(Token = "0x4000427")]
		HeadRelative,
		[Token(Token = "0x4000428")]
		ForwardFacing
	}

	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B518", Offset = "0x50B518")]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000309")]
			[Address(RVA = "0xA469B8", Offset = "0xA469B8", VA = "0xA469B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030B")]
			[Address(RVA = "0xA46A00", Offset = "0xA46A00", VA = "0xA46A00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xA468D8", Offset = "0xA468D8", VA = "0xA468D8")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xA46904", Offset = "0xA46904", VA = "0xA46904", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xA46908", Offset = "0xA46908", VA = "0xA46908", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xA469C0", Offset = "0xA469C0", VA = "0xA469C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xD77EF4", Offset = "0xD77EF4", VA = "0xD77EF4")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xD77FE8", Offset = "0xD77FE8", VA = "0xD77FE8")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xD77FF0", Offset = "0xD77FF0", VA = "0xD77FF0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xD7803C", Offset = "0xD7803C", VA = "0xD7803C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xD78084", Offset = "0xD78084", VA = "0xD78084")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514458", Offset = "0x514458")]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000302")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x6000303")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xD780FC", Offset = "0xD780FC", VA = "0xD780FC")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xD781B8", Offset = "0xD781B8", VA = "0xD781B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5144B8", Offset = "0x5144B8")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000EC")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x600030C")]
	[Address(RVA = "0xD781E4", Offset = "0xD781E4", VA = "0xD781E4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xD781E8", Offset = "0xD781E8", VA = "0xD781E8", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xD78264", Offset = "0xD78264", VA = "0xD78264")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000ED")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E0FC", Offset = "0x50E0FC")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E134", Offset = "0x50E134")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E16C", Offset = "0x50E16C")]
	public float AimDistanceThreshold;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E1A4", Offset = "0x50E1A4")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xD78268", Offset = "0xD78268", VA = "0xD78268", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xD78294", Offset = "0xD78294", VA = "0xD78294", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xD78644", Offset = "0xD78644", VA = "0xD78644")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000EE")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E1DC", Offset = "0x50E1DC")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E214", Offset = "0x50E214")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E24C", Offset = "0x50E24C")]
	public float RotateStickThreshold;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector2 _lastValidDirection;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xD78648", Offset = "0xD78648", VA = "0xD78648", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xD7868C", Offset = "0xD7868C", VA = "0xD7868C", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xD78A34", Offset = "0xD78A34", VA = "0xD78A34")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000EF")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xD78A44", Offset = "0xD78A44", VA = "0xD78A44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xD78A48", Offset = "0xD78A48", VA = "0xD78A48")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xD78A50", Offset = "0xD78A50", VA = "0xD78A50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xD78B0C", Offset = "0xD78B0C", VA = "0xD78B0C")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xD78B34", Offset = "0xD78B34", VA = "0xD78B34")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000F0")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E284", Offset = "0x50E284")]
	private LocomotionTeleport <LocomotionTeleport>k__BackingField;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x1700002E")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x600031A")]
		[Address(RVA = "0xD78FD0", Offset = "0xD78FD0", VA = "0xD78FD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514518", Offset = "0x514518")]
		get
		{
			return null;
		}
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xD78FD8", Offset = "0xD78FD8", VA = "0xD78FD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514528", Offset = "0x514528")]
		private set
		{
		}
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xD76610", Offset = "0xD76610", VA = "0xD76610", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xD76738", Offset = "0xD76738", VA = "0xD76738", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xD78FE0", Offset = "0xD78FE0", VA = "0xD78FE0")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x514538", Offset = "0x514538")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xD76CD8", Offset = "0xD76CD8", VA = "0xD76CD8", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xD76D44", Offset = "0xD76D44", VA = "0xD76D44", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xD76774", Offset = "0xD76774", VA = "0xD76774")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000F1")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B528", Offset = "0x50B528")]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600032D")]
			[Address(RVA = "0xA46E60", Offset = "0xA46E60", VA = "0xA46E60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600032F")]
			[Address(RVA = "0xA46EA8", Offset = "0xA46EA8", VA = "0xA46EA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xA46B90", Offset = "0xA46B90", VA = "0xA46B90")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xA46BBC", Offset = "0xA46BBC", VA = "0xA46BBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xA46BC0", Offset = "0xA46BC0", VA = "0xA46BC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xA46E68", Offset = "0xA46E68", VA = "0xA46E68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E294", Offset = "0x50E294")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<UnityEngine.Vector3> _aimPoints;

	[Token(Token = "0x4000442")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xD790BC", Offset = "0xD790BC", VA = "0xD790BC")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xD791CC", Offset = "0xD791CC", VA = "0xD791CC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xD791F8", Offset = "0xD791F8", VA = "0xD791F8", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xD79220", Offset = "0xD79220", VA = "0xD79220")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514570", Offset = "0x514570")]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xD79298", Offset = "0xD79298", VA = "0xD79298", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x6000327")]
	protected abstract bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end);

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xD792B4", Offset = "0xD792B4", VA = "0xD792B4", Slot = "10")]
	public virtual UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xD793D4", Offset = "0xD793D4", VA = "0xD793D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5145D0", Offset = "0x5145D0")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000F3")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xD79400", Offset = "0xD79400", VA = "0xD79400")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xD79464", Offset = "0xD79464", VA = "0xD79464", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xD7955C", Offset = "0xD7955C", VA = "0xD7955C", Slot = "10")]
	public override UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xD79654", Offset = "0xD79654", VA = "0xD79654")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x514630", Offset = "0x514630")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xD79658", Offset = "0xD79658", VA = "0xD79658")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000F4")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E2CC", Offset = "0x50E2CC")]
	public float LOSOffset;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E304", Offset = "0x50E304")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xD79664", Offset = "0xD79664", VA = "0xD79664", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xD79870", Offset = "0xD79870", VA = "0xD79870")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000F5")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x6000337")]
	[Address(RVA = "0xD7987C", Offset = "0xD7987C", VA = "0xD7987C", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xD79974", Offset = "0xD79974", VA = "0xD79974")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000F6")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x6000339")]
	[Address(RVA = "0xD79978", Offset = "0xD79978", VA = "0xD79978", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xD79A0C", Offset = "0xD79A0C", VA = "0xD79A0C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600033B")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xD79A9C", Offset = "0xD79A9C", VA = "0xD79A9C")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000F7")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B538", Offset = "0x50B538")]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000343")]
			[Address(RVA = "0xA46FE8", Offset = "0xA46FE8", VA = "0xA46FE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000345")]
			[Address(RVA = "0xA47030", Offset = "0xA47030", VA = "0xA47030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xA46EB0", Offset = "0xA46EB0", VA = "0xA46EB0")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xA46EDC", Offset = "0xA46EDC", VA = "0xA46EDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xA46EE0", Offset = "0xA46EE0", VA = "0xA46EE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xA46FF0", Offset = "0xA46FF0", VA = "0xA46FF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E33C", Offset = "0x50E33C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50E33C", Offset = "0x50E33C")]
	public float TransitionDuration;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50E394", Offset = "0x50E394")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E394", Offset = "0x50E394")]
	public float TeleportDelay;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E3E8", Offset = "0x50E3E8")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xD79AA4", Offset = "0xD79AA4", VA = "0xD79AA4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xD79AD0", Offset = "0xD79AD0", VA = "0xD79AD0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514668", Offset = "0x514668")]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xD79B48", Offset = "0xD79B48", VA = "0xD79B48")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000F9")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000346")]
	[Address(RVA = "0xD79CF4", Offset = "0xD79CF4", VA = "0xD79CF4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xD79D10", Offset = "0xD79D10", VA = "0xD79D10")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000FA")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B548", Offset = "0x50B548")]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <startPosition>5__2;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0xA471A4", Offset = "0xA471A4", VA = "0xA471A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000350")]
			[Address(RVA = "0xA471EC", Offset = "0xA471EC", VA = "0xA471EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xA47038", Offset = "0xA47038", VA = "0xA47038")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xA47064", Offset = "0xA47064", VA = "0xA47064", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xA47068", Offset = "0xA47068", VA = "0xA47068", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xA471AC", Offset = "0xA471AC", VA = "0xA471AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E420", Offset = "0x50E420")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50E420", Offset = "0x50E420")]
	public float TransitionDuration;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xD79D18", Offset = "0xD79D18", VA = "0xD79D18", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xD79D44", Offset = "0xD79D44", VA = "0xD79D44")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514718", Offset = "0x514718")]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xD79DBC", Offset = "0xD79DBC", VA = "0xD79DBC")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000FC")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x20000FD")]
	public enum PlabackState
	{
		[Token(Token = "0x4000472")]
		Idle = 1,
		[Token(Token = "0x4000473")]
		Preparing,
		[Token(Token = "0x4000474")]
		Buffering,
		[Token(Token = "0x4000475")]
		Ready,
		[Token(Token = "0x4000476")]
		Ended
	}

	[Token(Token = "0x20000FE")]
	public enum StereoMode
	{
		[Token(Token = "0x4000478")]
		Unknown = -1,
		[Token(Token = "0x4000479")]
		Mono,
		[Token(Token = "0x400047A")]
		TopBottom,
		[Token(Token = "0x400047B")]
		LeftRight,
		[Token(Token = "0x400047C")]
		Mesh
	}

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000035")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000351")]
		[Address(RVA = "0xC34664", Offset = "0xC34664", VA = "0xC34664")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000036")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000352")]
		[Address(RVA = "0xC34994", Offset = "0xC34994", VA = "0xC34994")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000037")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000353")]
		[Address(RVA = "0xC31B24", Offset = "0xC31B24", VA = "0xC31B24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000038")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000354")]
		[Address(RVA = "0xC33320", Offset = "0xC33320", VA = "0xC33320")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000039")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000355")]
		[Address(RVA = "0xC34C64", Offset = "0xC34C64", VA = "0xC34C64")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700003A")]
	public static long Duration
	{
		[Token(Token = "0x6000356")]
		[Address(RVA = "0xC33544", Offset = "0xC33544", VA = "0xC33544")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700003B")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x6000357")]
		[Address(RVA = "0xC3214C", Offset = "0xC3214C", VA = "0xC3214C")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x1700003C")]
	public static int VideoWidth
	{
		[Token(Token = "0x6000358")]
		[Address(RVA = "0xC31F24", Offset = "0xC31F24", VA = "0xC31F24")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003D")]
	public static int VideoHeight
	{
		[Token(Token = "0x6000359")]
		[Address(RVA = "0xC32038", Offset = "0xC32038", VA = "0xC32038")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003E")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600035A")]
		[Address(RVA = "0xC33430", Offset = "0xC33430", VA = "0xC33430")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600035B")]
		[Address(RVA = "0xC32A04", Offset = "0xC32A04", VA = "0xC32A04")]
		set
		{
		}
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xC34D78", Offset = "0xC34D78", VA = "0xC34D78")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xC33914", Offset = "0xC33914", VA = "0xC33914")]
	public static void Stop()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xC32650", Offset = "0xC32650", VA = "0xC32650")]
	public static void Play()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xC327F0", Offset = "0xC327F0", VA = "0xC327F0")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xC3370C", Offset = "0xC3370C", VA = "0xC3370C")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xC34FA4", Offset = "0xC34FA4", VA = "0xC34FA4")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xC33130", Offset = "0xC33130", VA = "0xC33130")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000FF")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000364")]
		[Address(RVA = "0x8D8ACC", Offset = "0x8D8ACC", VA = "0x8D8ACC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5147C8", Offset = "0x5147C8")]
		add
		{
		}
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x8D8B6C", Offset = "0x8D8B6C", VA = "0x8D8B6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5147D8", Offset = "0x5147D8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x8D8C0C", Offset = "0x8D8C0C", VA = "0x8D8C0C", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x8D8C20", Offset = "0x8D8C20", VA = "0x8D8C20")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x2000100")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x2000101")]
	public enum ButtonType
	{
		[Token(Token = "0x4000480")]
		Play,
		[Token(Token = "0x4000481")]
		Pause,
		[Token(Token = "0x4000482")]
		FastForward,
		[Token(Token = "0x4000483")]
		Rewind,
		[Token(Token = "0x4000484")]
		SkipForward,
		[Token(Token = "0x4000485")]
		SkipBack,
		[Token(Token = "0x4000486")]
		Stop
	}

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x1700003F")]
	public ButtonType buttonType
	{
		[Token(Token = "0x6000368")]
		[Address(RVA = "0xC29570", Offset = "0xC29570", VA = "0xC29570")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000369")]
		[Address(RVA = "0xC29578", Offset = "0xC29578", VA = "0xC29578")]
		set
		{
		}
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xC2959C", Offset = "0xC2959C", VA = "0xC2959C", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xC2AA34", Offset = "0xC2AA34", VA = "0xC2AA34")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x2000102")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x2000103")]
	public enum VideoShape
	{
		[Token(Token = "0x400049B")]
		_360,
		[Token(Token = "0x400049C")]
		_180,
		[Token(Token = "0x400049D")]
		Quad
	}

	[Token(Token = "0x2000104")]
	public enum VideoStereo
	{
		[Token(Token = "0x400049F")]
		Mono,
		[Token(Token = "0x40004A0")]
		TopBottom,
		[Token(Token = "0x40004A1")]
		LeftRight,
		[Token(Token = "0x40004A2")]
		BottomTop
	}

	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B558", Offset = "0x50B558")]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000382")]
			[Address(RVA = "0xA3BAE8", Offset = "0xA3BAE8", VA = "0xA3BAE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000384")]
			[Address(RVA = "0xA3BB30", Offset = "0xA3BB30", VA = "0xA3BB30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xA3B8F4", Offset = "0xA3B8F4", VA = "0xA3B8F4")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xA3B920", Offset = "0xA3B920", VA = "0xA3B920", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xA3B924", Offset = "0xA3B924", VA = "0xA3B924", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xA3BAF0", Offset = "0xA3BAF0", VA = "0xA3BAF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B568", Offset = "0x50B568")]
	private sealed class <>c__DisplayClass34_0
	{
		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string moviePath;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string drmLicencesUrl;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xA3B7FC", Offset = "0xA3B7FC", VA = "0xA3B7FC")]
		public <>c__DisplayClass34_0()
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xA3B804", Offset = "0xA3B804", VA = "0xA3B804")]
		internal void <Play>b__0()
		{
		}
	}

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E4A8", Offset = "0x50E4A8")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E4B8", Offset = "0x50E4B8")]
	private long <Duration>k__BackingField;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E4C8", Offset = "0x50E4C8")]
	private long <PlaybackPosition>k__BackingField;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000040")]
	public bool IsPlaying
	{
		[Token(Token = "0x600036C")]
		[Address(RVA = "0xC31848", Offset = "0xC31848", VA = "0xC31848")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5147E8", Offset = "0x5147E8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600036D")]
		[Address(RVA = "0xC31850", Offset = "0xC31850", VA = "0xC31850")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5147F8", Offset = "0x5147F8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public long Duration
	{
		[Token(Token = "0x600036E")]
		[Address(RVA = "0xC3185C", Offset = "0xC3185C", VA = "0xC3185C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514808", Offset = "0x514808")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600036F")]
		[Address(RVA = "0xC31864", Offset = "0xC31864", VA = "0xC31864")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514818", Offset = "0x514818")]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public long PlaybackPosition
	{
		[Token(Token = "0x6000370")]
		[Address(RVA = "0xC3186C", Offset = "0xC3186C", VA = "0xC3186C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514828", Offset = "0x514828")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000371")]
		[Address(RVA = "0xC31874", Offset = "0xC31874", VA = "0xC31874")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514838", Offset = "0x514838")]
		private set
		{
		}
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xC3187C", Offset = "0xC3187C", VA = "0xC3187C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xC31B94", Offset = "0xC31B94", VA = "0xC31B94")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xC31BF8", Offset = "0xC31BF8", VA = "0xC31BF8")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xC32260", Offset = "0xC32260", VA = "0xC32260")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514848", Offset = "0x514848")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xC322D8", Offset = "0xC322D8", VA = "0xC322D8")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xC325C0", Offset = "0xC325C0", VA = "0xC325C0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xC32764", Offset = "0xC32764", VA = "0xC32764")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xC32904", Offset = "0xC32904", VA = "0xC32904")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xC32B78", Offset = "0xC32B78", VA = "0xC32B78")]
	private void Update()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xC33658", Offset = "0xC33658", VA = "0xC33658")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xC33888", Offset = "0xC33888", VA = "0xC33888")]
	public void Stop()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xC33A28", Offset = "0xC33A28", VA = "0xC33A28")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xC33B14", Offset = "0xC33B14", VA = "0xC33B14")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x2000107")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x2000108")]
	private enum PlaybackState
	{
		[Token(Token = "0x40004BF")]
		Playing,
		[Token(Token = "0x40004C0")]
		Paused,
		[Token(Token = "0x40004C1")]
		Rewinding,
		[Token(Token = "0x40004C2")]
		FastForwarding
	}

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xC33B24", Offset = "0xC33B24", VA = "0xC33B24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xC33E78", Offset = "0xC33E78", VA = "0xC33E78")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xC34054", Offset = "0xC34054", VA = "0xC34054")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xC34188", Offset = "0xC34188", VA = "0xC34188")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xC34290", Offset = "0xC34290", VA = "0xC34290")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xC3415C", Offset = "0xC3415C", VA = "0xC3415C")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xC342F0", Offset = "0xC342F0", VA = "0xC342F0")]
	private void Update()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xC33D64", Offset = "0xC33D64", VA = "0xC33D64")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xC34654", Offset = "0xC34654", VA = "0xC34654")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x2000109")]
public static class VectorUtil
{
	[Token(Token = "0x6000390")]
	[Address(RVA = "0x7CF918", Offset = "0x7CF918", VA = "0x7CF918")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x200010A")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40004C4")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x9B21D8", Offset = "0x9B21D8", VA = "0x9B21D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x9B25EC", Offset = "0x9B25EC", VA = "0x9B25EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x9B2878", Offset = "0x9B2878", VA = "0x9B2878")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x9B29E0", Offset = "0x9B29E0", VA = "0x9B29E0")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x9B2B4C", Offset = "0x9B2B4C", VA = "0x9B2B4C")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x9B2CDC", Offset = "0x9B2CDC", VA = "0x9B2CDC")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x200010B")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40004CD")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xA521E0", Offset = "0xA521E0", VA = "0xA521E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xA52234", Offset = "0xA52234", VA = "0xA52234")]
	private void Start()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xA52238", Offset = "0xA52238", VA = "0xA52238")]
	private void Update()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xA5223C", Offset = "0xA5223C", VA = "0xA5223C")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xA524B0", Offset = "0xA524B0", VA = "0xA524B0")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xA526E0", Offset = "0xA526E0", VA = "0xA526E0")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x200010C")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xA56154", Offset = "0xA56154", VA = "0xA56154")]
	private void Start()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xA56670", Offset = "0xA56670", VA = "0xA56670")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xA56730", Offset = "0xA56730", VA = "0xA56730")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xA569B0", Offset = "0xA569B0", VA = "0xA569B0")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xA56A90", Offset = "0xA56A90", VA = "0xA56A90")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xA56B74", Offset = "0xA56B74", VA = "0xA56B74")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xA56BE8", Offset = "0xA56BE8", VA = "0xA56BE8")]
	public DebugUISample()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xA56BF0", Offset = "0xA56BF0", VA = "0xA56BF0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514908", Offset = "0x514908")]
	private void <Start>b__2_0(Toggle t)
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xA56C54", Offset = "0xA56C54", VA = "0xA56C54")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514918", Offset = "0x514918")]
	private void <Start>b__2_1(Toggle t)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xA56CB8", Offset = "0xA56CB8", VA = "0xA56CB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514928", Offset = "0x514928")]
	private void <Start>b__2_2(Toggle t)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xA56D1C", Offset = "0xA56D1C", VA = "0xA56D1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514938", Offset = "0x514938")]
	private void <Start>b__2_3(Toggle t)
	{
	}
}
[Token(Token = "0x200010D")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x9AF158", Offset = "0x9AF158", VA = "0x9AF158")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x200010E")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xAA3678", Offset = "0xAA3678", VA = "0xAA3678")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xAA371C", Offset = "0xAA371C", VA = "0xAA371C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xAA3808", Offset = "0xAA3808", VA = "0xAA3808")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xAA3868", Offset = "0xAA3868", VA = "0xAA3868")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x200010F")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x7FB7D0", Offset = "0x7FB7D0", VA = "0x7FB7D0")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x2000110")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B588", Offset = "0x50B588")]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000045")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0x7E3810", Offset = "0x7E3810", VA = "0x7E3810", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0x7E3858", Offset = "0x7E3858", VA = "0x7E3858", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x7E3694", Offset = "0x7E3694", VA = "0x7E3694")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x7E36C0", Offset = "0x7E36C0", VA = "0x7E36C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x7E36C4", Offset = "0x7E36C4", VA = "0x7E36C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x7E3818", Offset = "0x7E3818", VA = "0x7E3818", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xD48628", Offset = "0xD48628", VA = "0xD48628")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xD48744", Offset = "0xD48744", VA = "0xD48744")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xD486CC", Offset = "0xD486CC", VA = "0xD486CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514948", Offset = "0x514948")]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xD488F0", Offset = "0xD488F0", VA = "0xD488F0")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x2000112")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50E4F8", Offset = "0x50E4F8")]
	public int SubdivisionsU;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50E514", Offset = "0x50E514")]
	public int SubdivisionsV;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3[] _vertices;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x8E35FC", Offset = "0x8E35FC", VA = "0x8E35FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x8E4044", Offset = "0x8E4044", VA = "0x8E4044")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x2000113")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000047")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x9E4A14", Offset = "0x9E4A14", VA = "0x9E4A14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x9E4A68", Offset = "0x9E4A68", VA = "0x9E4A68")]
	public void Start()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x9E4E90", Offset = "0x9E4E90", VA = "0x9E4E90")]
	public void Update()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x9E4F7C", Offset = "0x9E4F7C", VA = "0x9E4F7C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x5149F8", Offset = "0x5149F8")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60003BE")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003BF")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x60003C0")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60003C1")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60003C2")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60003C3")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60003C4")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60003C5")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x9E4FE0", Offset = "0x9E4FE0", VA = "0x9E4FE0")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x9E501C", Offset = "0x9E501C", VA = "0x9E501C")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x9E508C", Offset = "0x9E508C", VA = "0x9E508C")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x9E51FC", Offset = "0x9E51FC", VA = "0x9E51FC")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x9E52D8", Offset = "0x9E52D8", VA = "0x9E52D8")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x9E4D88", Offset = "0x9E4D88", VA = "0x9E4D88")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x9E53A0", Offset = "0x9E53A0", VA = "0x9E53A0")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x9E5408", Offset = "0x9E5408", VA = "0x9E5408")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x9E5500", Offset = "0x9E5500", VA = "0x9E5500")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x2000114")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B5A8", Offset = "0x50B5A8")]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x2000115")]
	public enum DrawMode
	{
		[Token(Token = "0x40004FC")]
		Opaque,
		[Token(Token = "0x40004FD")]
		OpaqueWithClip,
		[Token(Token = "0x40004FE")]
		TransparentDefaultAlpha,
		[Token(Token = "0x40004FF")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000048")]
	public bool overlayEnabled
	{
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xE974AC", Offset = "0xE974AC", VA = "0xE974AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xE9753C", Offset = "0xE9753C", VA = "0xE9753C")]
		set
		{
		}
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xE95F28", Offset = "0xE95F28", VA = "0xE95F28")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xE96B18", Offset = "0xE96B18", VA = "0xE96B18")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xE96B98", Offset = "0xE96B98", VA = "0xE96B98")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xE96C88", Offset = "0xE96C88", VA = "0xE96C88")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xE96D78", Offset = "0xE96D78", VA = "0xE96D78", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xE96F84", Offset = "0xE96F84", VA = "0xE96F84")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xE97608", Offset = "0xE97608", VA = "0xE97608")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x2000116")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x9B4D08", Offset = "0x9B4D08", VA = "0x9B4D08")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x9B4EF0", Offset = "0x9B4EF0", VA = "0x9B4EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x9B5078", Offset = "0x9B5078", VA = "0x9B5078")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x9B5080", Offset = "0x9B5080", VA = "0x9B5080")]
	public void Release()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x9B5068", Offset = "0x9B5068", VA = "0x9B5068")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x9B5088", Offset = "0x9B5088", VA = "0x9B5088")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x2000117")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B608", Offset = "0x50B608")]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x7D974C", Offset = "0x7D974C", VA = "0x7D974C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003EB")]
			[Address(RVA = "0x7D9794", Offset = "0x7D9794", VA = "0x7D9794", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x7D961C", Offset = "0x7D961C", VA = "0x7D961C")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x7D9648", Offset = "0x7D9648", VA = "0x7D9648", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x7D964C", Offset = "0x7D964C", VA = "0x7D964C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x7D9754", Offset = "0x7D9754", VA = "0x7D9754", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B618", Offset = "0x50B618")]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003EF")]
			[Address(RVA = "0x7D9954", Offset = "0x7D9954", VA = "0x7D9954", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003F1")]
			[Address(RVA = "0x7D999C", Offset = "0x7D999C", VA = "0x7D999C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x7D979C", Offset = "0x7D979C", VA = "0x7D979C")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x7D97C8", Offset = "0x7D97C8", VA = "0x7D97C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x7D97CC", Offset = "0x7D97CC", VA = "0x7D97CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x7D995C", Offset = "0x7D995C", VA = "0x7D995C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x8D7034", Offset = "0x8D7034", VA = "0x8D7034")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x8D7308", Offset = "0x8D7308", VA = "0x8D7308")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x8D7364", Offset = "0x8D7364", VA = "0x8D7364")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x8D74E4", Offset = "0x8D74E4", VA = "0x8D74E4")]
	public void Release()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x8D75B8", Offset = "0x8D75B8", VA = "0x8D75B8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514A30", Offset = "0x514A30")]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x8D7420", Offset = "0x8D7420", VA = "0x8D7420")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514A90", Offset = "0x514A90")]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x8D7654", Offset = "0x8D7654", VA = "0x8D7654")]
	public BrushController()
	{
	}
}
[Token(Token = "0x200011A")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x7B3DC4", Offset = "0x7B3DC4", VA = "0x7B3DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x7B3E24", Offset = "0x7B3E24", VA = "0x7B3E24")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x200011B")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x147A2EC", Offset = "0x147A2EC", VA = "0x147A2EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x147A420", Offset = "0x147A420", VA = "0x147A420")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x147A4B4", Offset = "0x147A4B4", VA = "0x147A4B4")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x147A51C", Offset = "0x147A51C", VA = "0x147A51C")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x200011C")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B628", Offset = "0x50B628")]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000404")]
			[Address(RVA = "0x7DE2C0", Offset = "0x7DE2C0", VA = "0x7DE2C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000406")]
			[Address(RVA = "0x7DE308", Offset = "0x7DE308", VA = "0x7DE308", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x7DE0B4", Offset = "0x7DE0B4", VA = "0x7DE0B4")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x7DE0E0", Offset = "0x7DE0E0", VA = "0x7DE0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x7DE0E4", Offset = "0x7DE0E4", VA = "0x7DE0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x7DE2C8", Offset = "0x7DE2C8", VA = "0x7DE2C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 localPosition;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x147A524", Offset = "0x147A524", VA = "0x147A524")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x147A808", Offset = "0x147A808", VA = "0x147A808")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x147AB58", Offset = "0x147AB58", VA = "0x147AB58")]
	private void FindHands()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x147AEB4", Offset = "0x147AEB4", VA = "0x147AEB4")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x147B1B8", Offset = "0x147B1B8", VA = "0x147B1B8")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x147B2AC", Offset = "0x147B2AC", VA = "0x147B2AC")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x147B478", Offset = "0x147B478", VA = "0x147B478")]
	public void Release()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x147B3C4", Offset = "0x147B3C4", VA = "0x147B3C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514B90", Offset = "0x514B90")]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x147B560", Offset = "0x147B560", VA = "0x147B560")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x200011E")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x200011F")]
	public enum ManipulationType
	{
		[Token(Token = "0x4000534")]
		Default,
		[Token(Token = "0x4000535")]
		ForcedHand,
		[Token(Token = "0x4000536")]
		DollyHand,
		[Token(Token = "0x4000537")]
		DollyAttached,
		[Token(Token = "0x4000538")]
		HorizontalScaled,
		[Token(Token = "0x4000539")]
		VerticalScaled,
		[Token(Token = "0x400053A")]
		Menu
	}

	[Token(Token = "0x2000120")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x2000121")]
	public delegate void ReleasedObject();

	[Token(Token = "0x2000122")]
	public delegate void SetCursorPosition(UnityEngine.Vector3 cursorPosition);

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x50E5A0", Offset = "0x50E5A0")]
	public string ObjectName;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x50E5B0", Offset = "0x50E5B0")]
	public string ObjectInstructions;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x77F044", Offset = "0x77F044", VA = "0x77F044")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x77F0A0", Offset = "0x77F0A0", VA = "0x77F0A0")]
	public void Release()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x77F0B4", Offset = "0x77F0B4", VA = "0x77F0B4")]
	public void CursorPos(UnityEngine.Vector3 cursorPos)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x77F0C8", Offset = "0x77F0C8", VA = "0x77F0C8")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x2000123")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E5D0", Offset = "0x50E5D0")]
	public int radialDivisions;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E608", Offset = "0x50E608")]
	public float borderSize;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E640", Offset = "0x50E640")]
	public float fingerTaper;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E678", Offset = "0x50E678")]
	public float fingerTipLength;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50E6B0", Offset = "0x50E6B0")]
	public float webOffset;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] handVertices;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.Vector2[] handUVs;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xD44010", Offset = "0xD44010", VA = "0xD44010")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xD44210", Offset = "0xD44210", VA = "0xD44210")]
	private void Update()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xD4441C", Offset = "0xD4441C", VA = "0xD4441C")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xD44AA0", Offset = "0xD44AA0", VA = "0xD44AA0")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, UnityEngine.Vector3 point1, UnityEngine.Vector3 point2)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xD450D0", Offset = "0xD450D0", VA = "0xD450D0")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xD4774C", Offset = "0xD4774C", VA = "0xD4774C")]
	private void AddVertex(UnityEngine.Vector3 position, UnityEngine.Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xD47808", Offset = "0xD47808", VA = "0xD47808")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x2000124")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xD4782C", Offset = "0xD4782C", VA = "0xD4782C")]
	private void Start()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xD47B64", Offset = "0xD47B64", VA = "0xD47B64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xD478D4", Offset = "0xD478D4", VA = "0xD478D4")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xD47F54", Offset = "0xD47F54", VA = "0xD47F54")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xD48444", Offset = "0xD48444", VA = "0xD48444")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x2000125")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B638", Offset = "0x50B638")]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000432")]
			[Address(RVA = "0xA3C0F4", Offset = "0xA3C0F4", VA = "0xA3C0F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000434")]
			[Address(RVA = "0xA3C13C", Offset = "0xA3C13C", VA = "0xA3C13C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xA3BE24", Offset = "0xA3BE24", VA = "0xA3BE24")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xA3BE50", Offset = "0xA3BE50", VA = "0xA3BE50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xA3BE54", Offset = "0xA3BE54", VA = "0xA3BE54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xA3C0FC", Offset = "0xA3C0FC", VA = "0xA3C0FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 localGrabOffset;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 camGrabPosition;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector3 handGrabPosition;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xE98B38", Offset = "0xE98B38", VA = "0xE98B38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xE98D70", Offset = "0xE98D70", VA = "0xE98D70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xE999C0", Offset = "0xE999C0", VA = "0xE999C0")]
	private void GrabHoverObject(GameObject grbObj, UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xE9A5C8", Offset = "0xE9A5C8", VA = "0xE9A5C8")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xE98CF8", Offset = "0xE98CF8", VA = "0xE98CF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514C40", Offset = "0x514C40")]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xE98FDC", Offset = "0xE98FDC", VA = "0xE98FDC")]
	private void FindHoverObject(UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xE99C84", Offset = "0xE99C84", VA = "0xE99C84")]
	private void ManipulateObject(GameObject obj, UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xE9A88C", Offset = "0xE9A88C", VA = "0xE9A88C")]
	private void ClampGrabOffset(ref UnityEngine.Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xE9A918", Offset = "0xE9A918", VA = "0xE9A918")]
	private UnityEngine.Vector3 ClampScale(UnityEngine.Vector3 localScale, UnityEngine.Vector2 thumb)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xE9A948", Offset = "0xE9A948", VA = "0xE9A948")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xE9A754", Offset = "0xE9A754", VA = "0xE9A754")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xE9AA6C", Offset = "0xE9AA6C", VA = "0xE9AA6C")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x2000127")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xC37838", Offset = "0xC37838", VA = "0xC37838")]
	private void Start()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xC379D0", Offset = "0xC379D0", VA = "0xC379D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xC37A98", Offset = "0xC37A98", VA = "0xC37A98")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x2000128")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x2000129")]
	public enum BrushState
	{
		[Token(Token = "0x4000577")]
		Idle,
		[Token(Token = "0x4000578")]
		Inking
	}

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UnityEngine.Vector3> inkPositions;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x99469C", Offset = "0x99469C", VA = "0x99469C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x9946A4", Offset = "0x9946A4", VA = "0x9946A4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x99498C", Offset = "0x99498C", VA = "0x99498C")]
	private void StartLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x994B84", Offset = "0x994B84", VA = "0x994B84")]
	private void UpdateLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x994D2C", Offset = "0x994D2C", VA = "0x994D2C")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x994898", Offset = "0x994898", VA = "0x994898")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x994E08", Offset = "0x994E08", VA = "0x994E08")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x200012A")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x994EA0", Offset = "0x994EA0", VA = "0x994EA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x995038", Offset = "0x995038", VA = "0x995038")]
	private void Update()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x99519C", Offset = "0x99519C", VA = "0x99519C")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x200012B")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x9951A4", Offset = "0x9951A4", VA = "0x9951A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x9953B8", Offset = "0x9953B8", VA = "0x9953B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x995588", Offset = "0x995588", VA = "0x995588")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x200012C")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B648", Offset = "0x50B648")]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000457")]
			[Address(RVA = "0xA3DAD8", Offset = "0xA3DAD8", VA = "0xA3DAD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000459")]
			[Address(RVA = "0xA3DB20", Offset = "0xA3DB20", VA = "0xA3DB20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xA3D8F4", Offset = "0xA3D8F4", VA = "0xA3D8F4")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xA3D920", Offset = "0xA3D920", VA = "0xA3D920", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xA3D924", Offset = "0xA3D924", VA = "0xA3D924", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xA3DAE0", Offset = "0xA3DAE0", VA = "0xA3DAE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B658", Offset = "0x50B658")]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045D")]
			[Address(RVA = "0xA3DD4C", Offset = "0xA3DD4C", VA = "0xA3DD4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045F")]
			[Address(RVA = "0xA3DD94", Offset = "0xA3DD94", VA = "0xA3DD94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xA3DB28", Offset = "0xA3DB28", VA = "0xA3DB28")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xA3DB54", Offset = "0xA3DB54", VA = "0xA3DB54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xA3DB58", Offset = "0xA3DB58", VA = "0xA3DB58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xA3DD54", Offset = "0xA3DD54", VA = "0xA3DD54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] compactObjects;

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x995590", Offset = "0x995590", VA = "0x995590")]
	private void Start()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x9958C8", Offset = "0x9958C8", VA = "0x9958C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x995B20", Offset = "0x995B20", VA = "0x995B20")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x995CA4", Offset = "0x995CA4", VA = "0x995CA4")]
	public void Release()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x995C1C", Offset = "0x995C1C", VA = "0x995C1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514CF0", Offset = "0x514CF0")]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x995D94", Offset = "0x995D94", VA = "0x995D94")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x514D50", Offset = "0x514D50")]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x995E1C", Offset = "0x995E1C", VA = "0x995E1C")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x995E3C", Offset = "0x995E3C", VA = "0x995E3C")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x995E5C", Offset = "0x995E5C", VA = "0x995E5C")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x995E7C", Offset = "0x995E7C", VA = "0x995E7C")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x99584C", Offset = "0x99584C", VA = "0x99584C")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x995EE0", Offset = "0x995EE0", VA = "0x995EE0")]
	public void Cursor(UnityEngine.Vector3 cP)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x995EEC", Offset = "0x995EEC", VA = "0x995EEC")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x9958E0", Offset = "0x9958E0", VA = "0x9958E0")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x995EF8", Offset = "0x995EF8", VA = "0x995EF8")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x200012F")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x995F3C", Offset = "0x995F3C", VA = "0x995F3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x995FFC", Offset = "0x995FFC", VA = "0x995FFC")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000130")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xAA2858", Offset = "0xAA2858", VA = "0xAA2858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xAA2A9C", Offset = "0xAA2A9C", VA = "0xAA2A9C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xAA2AF4", Offset = "0xAA2AF4", VA = "0xAA2AF4")]
	public void Release()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xAA2B40", Offset = "0xAA2B40", VA = "0xAA2B40")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000131")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xAA3E58", Offset = "0xAA3E58", VA = "0xAA3E58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xAA3ED0", Offset = "0xAA3ED0", VA = "0xAA3ED0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xAA41F4", Offset = "0xAA41F4", VA = "0xAA41F4")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000132")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xAA4F4C", Offset = "0xAA4F4C", VA = "0xAA4F4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xAA53D4", Offset = "0xAA53D4", VA = "0xAA53D4")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x2000133")]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong anchorHandle_;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas canvas_;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform pivot_;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject anchorMenu_;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isSelected_;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isHovered_;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI anchorName_;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject saveIcon_;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Image labelImage_;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color labelBaseColor_;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Color labelHighlightColor_;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Color labelSelectedColor_;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AnchorUIManager uiManager_;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MeshRenderer[] renderers_;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int menuIndex_;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<Button> buttonList_;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Button selectedButton_;

	[Token(Token = "0x17000055")]
	public ulong anchorHandle
	{
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x9AF160", Offset = "0x9AF160", VA = "0x9AF160")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x9AF168", Offset = "0x9AF168", VA = "0x9AF168")]
	private void Awake()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x9AF250", Offset = "0x9AF250", VA = "0x9AF250")]
	private void Update()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x9AF4B8", Offset = "0x9AF4B8", VA = "0x9AF4B8")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x9AF520", Offset = "0x9AF520", VA = "0x9AF520")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x9AF584", Offset = "0x9AF584", VA = "0x9AF584")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x9AF5E8", Offset = "0x9AF5E8", VA = "0x9AF5E8")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x9AF6F0", Offset = "0x9AF6F0", VA = "0x9AF6F0")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x9AF810", Offset = "0x9AF810", VA = "0x9AF810")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x9AF944", Offset = "0x9AF944", VA = "0x9AF944")]
	public void SetAnchorHandle(ulong handle)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x9AF9D8", Offset = "0x9AF9D8", VA = "0x9AF9D8")]
	public void ShowSaveIcon()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x9AF294", Offset = "0x9AF294", VA = "0x9AF294")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x9AF3A8", Offset = "0x9AF3A8", VA = "0x9AF3A8")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x9AF9F8", Offset = "0x9AF9F8", VA = "0x9AF9F8")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x9AFB10", Offset = "0x9AFB10", VA = "0x9AFB10")]
	public Anchor()
	{
	}
}
[Token(Token = "0x2000134")]
public class AnchorHelpers
{
	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Camera camera;

	[Token(Token = "0x17000056")]
	private static Camera MainCamera
	{
		[Token(Token = "0x600047A")]
		[Address(RVA = "0x9AFB18", Offset = "0x9AFB18", VA = "0x9AFB18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x9AFBD0", Offset = "0x9AFBD0", VA = "0x9AFBD0")]
	public static OVRPlugin.Posef UnityWorldSpacePoseToTrackingSpacePose(Transform pose)
	{
		return default(OVRPlugin.Posef);
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x9AFC4C", Offset = "0x9AFC4C", VA = "0x9AFC4C")]
	public static OVRPose TrackingSpacePoseToUnityWorldSpacePose(OVRPlugin.Posef pose)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x9AFCC0", Offset = "0x9AFCC0", VA = "0x9AFCC0")]
	public static OVRPose getTransformUnityWorldFromDevice()
	{
		return default(OVRPose);
	}

	[Token(Token = "0x600047E")]
	public static T ByteArrayToStruct<T>(byte[] bytes) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x9AFD18", Offset = "0x9AFD18", VA = "0x9AFD18")]
	public static string UuidToString(byte[] encodedMessage)
	{
		return null;
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x9AFFBC", Offset = "0x9AFFBC", VA = "0x9AFFBC")]
	public static byte[] StringToUuid(string str)
	{
		return null;
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x9B0134", Offset = "0x9B0134", VA = "0x9B0134")]
	private static int GetHexVal(char hex)
	{
		return default(int);
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x9B01F8", Offset = "0x9B01F8", VA = "0x9B01F8")]
	public AnchorHelpers()
	{
	}
}
[Token(Token = "0x2000135")]
public abstract class AnchorSession : MonoBehaviour
{
	[Token(Token = "0x2000136")]
	public enum StorageLocation
	{
		[Token(Token = "0x40005C0")]
		LOCAL
	}

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSession Instance;

	[Token(Token = "0x40005BA")]
	public const ulong kInvalidHandle = ulong.MaxValue;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<ulong, Anchor> handleToAnchor;

	[Token(Token = "0x40005BC")]
	protected const int maxEvents = 5;

	[Token(Token = "0x40005BD")]
	protected const float eventPollingRate = 0.1f;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected GameObject anchorPrefab_;

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x9B0200", Offset = "0x9B0200", VA = "0x9B0200", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x9AFF2C", Offset = "0x9AFF2C", VA = "0x9AFF2C")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x9B0308", Offset = "0x9B0308", VA = "0x9B0308")]
	protected static bool isFlagSet(uint bitset, uint flag)
	{
		return default(bool);
	}

	[Token(Token = "0x6000486")]
	public abstract ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor);

	[Token(Token = "0x6000487")]
	public abstract void DestroyAnchor(ulong anchorHandle);

	[Token(Token = "0x6000488")]
	public abstract void SaveAnchor(ulong anchorHandle, StorageLocation location);

	[Token(Token = "0x6000489")]
	public abstract void EraseAnchor(ulong anchorHandle);

	[Token(Token = "0x600048A")]
	public abstract void QueryAllLocalAnchors();

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x9B0314", Offset = "0x9B0314", VA = "0x9B0314")]
	protected AnchorSession()
	{
	}
}
[Token(Token = "0x2000137")]
public class AnchorSpawner : MonoBehaviour
{
	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSpawner Instance;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject anchorPrefab_;

	[Token(Token = "0x17000057")]
	public GameObject AnchorPrefab
	{
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x9B0398", Offset = "0x9B0398", VA = "0x9B0398")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x9B03A0", Offset = "0x9B03A0", VA = "0x9B03A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x9B04A0", Offset = "0x9B04A0", VA = "0x9B04A0")]
	public void PlaceAnchorAtTransform(Transform transform)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x9B06D4", Offset = "0x9B06D4", VA = "0x9B06D4")]
	public AnchorSpawner()
	{
	}
}
[Token(Token = "0x2000138")]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x2000139")]
	public enum AnchorMode
	{
		[Token(Token = "0x40005D6")]
		Create,
		[Token(Token = "0x40005D7")]
		Select
	}

	[Token(Token = "0x200013A")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject mainMenu_;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject createModeButton_;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject selectModeButton_;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform trackedDevice_;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform raycastOrigin_;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool drawRaycast_;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LineRenderer lineRenderer_;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor hoveredAnchor_;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Anchor selectedAnchor_;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnchorMode mode_;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<Button> buttonList_;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int menuIndex_;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Button selectedButton_;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject placementPreview_;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform anchorPlacementTransform_;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate primaryPressDelegate_;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool isFocused_;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x9B06DC", Offset = "0x9B06DC", VA = "0x9B06DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x9B07B4", Offset = "0x9B07B4", VA = "0x9B07B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x9B0920", Offset = "0x9B0920", VA = "0x9B0920")]
	private void Update()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x9B0D74", Offset = "0x9B0D74", VA = "0x9B0D74")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x9B0DE4", Offset = "0x9B0DE4", VA = "0x9B0DE4")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x9B08A8", Offset = "0x9B08A8", VA = "0x9B08A8")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x9B0E6C", Offset = "0x9B0E6C", VA = "0x9B0E6C")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x9B0EF4", Offset = "0x9B0EF4", VA = "0x9B0EF4")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x9B0F20", Offset = "0x9B0F20", VA = "0x9B0F20")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x9B0E40", Offset = "0x9B0E40", VA = "0x9B0E40")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x9B0C64", Offset = "0x9B0C64", VA = "0x9B0C64")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x9B105C", Offset = "0x9B105C", VA = "0x9B105C")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x9B0FA8", Offset = "0x9B0FA8", VA = "0x9B0FA8")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x9B0FC8", Offset = "0x9B0FC8", VA = "0x9B0FC8")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x9B1174", Offset = "0x9B1174", VA = "0x9B1174")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x9B0FE8", Offset = "0x9B0FE8", VA = "0x9B0FE8")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x9B1024", Offset = "0x9B1024", VA = "0x9B1024")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x9B0A2C", Offset = "0x9B0A2C", VA = "0x9B0A2C")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x9B11D0", Offset = "0x9B11D0", VA = "0x9B11D0")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x9B1204", Offset = "0x9B1204", VA = "0x9B1204")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x9B12A0", Offset = "0x9B12A0", VA = "0x9B12A0")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x9B141C", Offset = "0x9B141C", VA = "0x9B141C")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x200013B")]
public class SpatialAnchorSession : AnchorSession
{
	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<ulong, ulong> locateAnchorRequest;

	[Token(Token = "0x40005D9")]
	private const string numUuids = "numUuids";

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x7F1BB8", Offset = "0x7F1BB8", VA = "0x7F1BB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x7F1E04", Offset = "0x7F1E04", VA = "0x7F1E04")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x7F2050", Offset = "0x7F2050", VA = "0x7F2050")]
	private void SpatialEntitySetComponentEnabled(ulong requestId, bool result, OVRPlugin.SpatialEntityComponentType componentType, ulong space)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x7F2260", Offset = "0x7F2260", VA = "0x7F2260")]
	private void SpatialAnchorSaved(ulong requestId, ulong space, bool result, OVRPlugin.SpatialEntityUuid uuid)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x7F2750", Offset = "0x7F2750", VA = "0x7F2750")]
	private void SpatialEntityStorageErase(ulong requestId, bool result, OVRPlugin.SpatialEntityUuid uuid, OVRPlugin.SpatialEntityStorageLocation location)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x7F2A80", Offset = "0x7F2A80", VA = "0x7F2A80")]
	private void SpatialEntityQueryResults(ulong requestId, int numResults, OVRPlugin.SpatialEntityQueryResult[] results)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x7F31A4", Offset = "0x7F31A4", VA = "0x7F31A4")]
	private void SpatialEntityQueryComplete(ulong requestId, bool result, int numFound)
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x7F2674", Offset = "0x7F2674", VA = "0x7F2674")]
	private string GetUuidString(OVRPlugin.SpatialEntityUuid uuid)
	{
		return null;
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x7F2D68", Offset = "0x7F2D68", VA = "0x7F2D68")]
	private void tryEnableComponent(ulong anchorHandle, OVRPlugin.SpatialEntityComponentType type)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x7F2140", Offset = "0x7F2140", VA = "0x7F2140")]
	private void CreateAnchorGameobject(ulong anchorHandle)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x7F33F8", Offset = "0x7F33F8", VA = "0x7F33F8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x7F36A8", Offset = "0x7F36A8", VA = "0x7F36A8", Slot = "5")]
	public override ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor)
	{
		return default(ulong);
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x7F3848", Offset = "0x7F3848", VA = "0x7F3848", Slot = "6")]
	public override void DestroyAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x7F3A04", Offset = "0x7F3A04", VA = "0x7F3A04", Slot = "8")]
	public override void EraseAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x7F3BD0", Offset = "0x7F3BD0", VA = "0x7F3BD0")]
	public void QueryAnchorByUuid()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x7F3EC8", Offset = "0x7F3EC8", VA = "0x7F3EC8", Slot = "9")]
	public override void QueryAllLocalAnchors()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x7F3FB8", Offset = "0x7F3FB8", VA = "0x7F3FB8", Slot = "7")]
	public override void SaveAnchor(ulong anchorHandle, StorageLocation location)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x7F4128", Offset = "0x7F4128", VA = "0x7F4128")]
	public SpatialAnchorSession()
	{
	}
}
[Token(Token = "0x200013C")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B668", Offset = "0x50B668")]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sceneIndex;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartMenu <>4__this;

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xA444B4", Offset = "0xA444B4", VA = "0xA444B4")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xA444BC", Offset = "0xA444BC", VA = "0xA444BC")]
		internal void <Start>b__0()
		{
		}
	}

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x7FB7D8", Offset = "0x7FB7D8", VA = "0x7FB7D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x7FB9F4", Offset = "0x7FB9F4", VA = "0x7FB9F4")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x7FBB04", Offset = "0x7FBB04", VA = "0x7FBB04")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x200013E")]
public class PressTriggerToStart : MonoBehaviour
{
	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xDD30A0", Offset = "0xDD30A0", VA = "0xDD30A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xDD31F8", Offset = "0xDD31F8", VA = "0xDD31F8")]
	public PressTriggerToStart()
	{
	}
}
[Token(Token = "0x200013F")]
public class CameraController : MonoBehaviour
{
	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject cameraTarget;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rotateSpeed;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rotate;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float offsetDistance;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float offsetHeight;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float smoothing;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 offset;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool following;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 lastPosition;

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x8E106C", Offset = "0x8E106C", VA = "0x8E106C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x8E11CC", Offset = "0x8E11CC", VA = "0x8E11CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x8E1488", Offset = "0x8E1488", VA = "0x8E1488")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x8E14C4", Offset = "0x8E14C4", VA = "0x8E14C4")]
	public CameraController()
	{
	}
}
[Token(Token = "0x2000140")]
public static class FABRIKSolver
{
	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x1479258", Offset = "0x1479258", VA = "0x1479258")]
	public static void SolveFabrik(ref UnityEngine.Vector3[] positions, ref float[] boneLengths, UnityEngine.Vector3 ikTarget, float ikChainLength, byte iterationNumbers, float errorDistToStopSolving = 0.01f)
	{
	}
}
[Token(Token = "0x2000141")]
public class PerfectLookAt : MonoBehaviour
{
	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 m_gameObjectScale;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_TargetObject;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector3 m_UpVector;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_Weight;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_LookAtBlendSpeed;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_BlendSpeed;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_LegStabilizerMinDistanceToStartSolving;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public byte LegStabilizerMaxIterations;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool m_DrawDebugLookAtLines;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool m_IsValid;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PerfectLookAtData[] m_LookAtBones;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion[] m_BlendedRotations;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion[] m_LastFrameRotations;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PerfectLookAtLegStabilizer[] m_legStabilizers;

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x999690", Offset = "0x999690", VA = "0x999690")]
	public float GetLookAtWeight()
	{
		return default(float);
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x999698", Offset = "0x999698", VA = "0x999698")]
	public void SetLookAtWeight(float weight)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x9996CC", Offset = "0x9996CC", VA = "0x9996CC")]
	public void EnablePerfectLookat(float time, bool cancelCurrentTransition = true)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x999774", Offset = "0x999774", VA = "0x999774")]
	public void DisablePerfectLookat(float time, bool cancelCurrentTransition = true)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x999810", Offset = "0x999810", VA = "0x999810")]
	public bool IsInTransition()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x999870", Offset = "0x999870", VA = "0x999870")]
	public float GetTimeToFinishTransition()
	{
		return default(float);
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x9998F4", Offset = "0x9998F4", VA = "0x9998F4")]
	public static Quaternion GetWorldLookAtRotation(UnityEngine.Vector3 targetVector, UnityEngine.Vector3 fwdVectorInWorldSpace)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x999AAC", Offset = "0x999AAC", VA = "0x999AAC")]
	private Quaternion PerfectLookAtSlerp(Quaternion a, Quaternion b, float weight)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x999A14", Offset = "0x999A14", VA = "0x999A14")]
	public static Quaternion QuaternionFromAngleAxis(ref UnityEngine.Vector3 rotationAxis, float angleRad)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x999BAC", Offset = "0x999BAC", VA = "0x999BAC")]
	private void CheckForForceDefaultRotation()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x999CB0", Offset = "0x999CB0", VA = "0x999CB0")]
	private bool CheckValidity()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x999DFC", Offset = "0x999DFC", VA = "0x999DFC")]
	private float GetAngleFromQuaternionDeg(ref Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x999E24", Offset = "0x999E24", VA = "0x999E24")]
	private float GetAngleFromQuaternionDeg(Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x999E4C", Offset = "0x999E4C", VA = "0x999E4C")]
	private float GetAngleFromQuaternionRad(Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x999E68", Offset = "0x999E68", VA = "0x999E68")]
	private float GetAngleFromQuaternionRad(ref Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x999E84", Offset = "0x999E84", VA = "0x999E84")]
	private UnityEngine.Vector3 GetForwardVector(ref Transform inputTr, FwdDirection inputAxis)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x999F38", Offset = "0x999F38", VA = "0x999F38")]
	private UnityEngine.Vector3 BlendTowardTargetVector(ref Transform inputTr, FwdDirection inputAxis)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x999FEC", Offset = "0x999FEC", VA = "0x999FEC")]
	private void CheckIfCharacterScaleChanged()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x99A2B8", Offset = "0x99A2B8", VA = "0x99A2B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x99A5AC", Offset = "0x99A5AC", VA = "0x99A5AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x99A7C8", Offset = "0x99A7C8", VA = "0x99A7C8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x99C280", Offset = "0x99C280", VA = "0x99C280")]
	public PerfectLookAt()
	{
	}
}
[Token(Token = "0x2000142")]
public enum FwdDirection
{
	[Token(Token = "0x40005F7")]
	X_AXIS,
	[Token(Token = "0x40005F8")]
	Y_AXIS,
	[Token(Token = "0x40005F9")]
	Z_AXIS,
	[Token(Token = "0x40005FA")]
	MINUS_X_AXIS,
	[Token(Token = "0x40005FB")]
	MINUS_Y_AXIS,
	[Token(Token = "0x40005FC")]
	MINUS_Z_AXIS
}
[Serializable]
[Token(Token = "0x2000143")]
public class PerfectLookAtData
{
	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Quaternion m_DefaultRotation;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_Bone;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_RotationLimit;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_RotateAroundUpVectorWeight;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FwdDirection m_ForwardAxis;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public FwdDirection m_ParentBoneForwardAxis;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_ResetToDefaultRotation;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PerfecLookAtLinkedBones[] m_LinkedBones;

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x99C2DC", Offset = "0x99C2DC", VA = "0x99C2DC")]
	public void SetDefaultRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x99C2E8", Offset = "0x99C2E8", VA = "0x99C2E8")]
	public Quaternion GetDefaultRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x99A4FC", Offset = "0x99A4FC", VA = "0x99A4FC")]
	public void CheckJointRotation()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x99C2F4", Offset = "0x99C2F4", VA = "0x99C2F4")]
	public PerfectLookAtData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000144")]
public class PerfecLookAtLinkedBones
{
	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Quaternion m_DefaultRotation;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Quaternion m_LastFrameRotation;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform m_Bone;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_ResetToDefaultRotation;

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x999658", Offset = "0x999658", VA = "0x999658")]
	public void SetDefaultRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x999664", Offset = "0x999664", VA = "0x999664")]
	public Quaternion GetDefaultRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x999670", Offset = "0x999670", VA = "0x999670")]
	public void SetLastFrameRotation(Quaternion rotation)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x99967C", Offset = "0x99967C", VA = "0x99967C")]
	public Quaternion GetLastFrameRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x999688", Offset = "0x999688", VA = "0x999688")]
	public PerfecLookAtLinkedBones()
	{
	}
}
[Serializable]
[Token(Token = "0x2000145")]
public class PerfectLookAtLegStabilizer
{
	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform m_FootBone;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion m_footRotBeforeLookAt;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 m_footPosBeforeLookAt;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 m_middleBonePosBeforeLookAt;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3 m_firstBonePosBeforeLookAt;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Vector3 m_originalSwivelDir;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.Vector3 m_afterSolvingSwivelDir;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float m_iKWeight;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] m_BoneLengths;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_IKChainLength;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public uint m_BonesCount;

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x99C304", Offset = "0x99C304", VA = "0x99C304")]
	private UnityEngine.Vector3 FindProjectionVector(UnityEngine.Vector3 startingPoint, UnityEngine.Vector3 middlePoint, UnityEngine.Vector3 endingPoint)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x99C3DC", Offset = "0x99C3DC", VA = "0x99C3DC")]
	private void FixSwivelAngle(ref UnityEngine.Vector3[] positions)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x99C650", Offset = "0x99C650", VA = "0x99C650")]
	public UnityEngine.Vector3 GetMiddleBonePos()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x99C6B4", Offset = "0x99C6B4", VA = "0x99C6B4")]
	public UnityEngine.Vector3 GetFirstBonePos()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x99A0D8", Offset = "0x99A0D8", VA = "0x99A0D8")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x99BA30", Offset = "0x99BA30", VA = "0x99BA30")]
	public void CacheBones()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x99BBA8", Offset = "0x99BBA8", VA = "0x99BBA8")]
	public void FixLeg(byte iterations, float minErrorToStartSolving)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x99C71C", Offset = "0x99C71C", VA = "0x99C71C")]
	public PerfectLookAtLegStabilizer()
	{
	}
}
[Token(Token = "0x2000146")]
public class Gravity : MonoBehaviour
{
	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform planet;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x790A04", Offset = "0x790A04", VA = "0x790A04")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x790B8C", Offset = "0x790B8C", VA = "0x790B8C")]
	public Gravity()
	{
	}
}
[Token(Token = "0x2000147")]
public class SimpleStateMachine : MonoBehaviour
{
	[Token(Token = "0x2000148")]
	public class State
	{
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action DoUpdate;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action DoFixedUpdate;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action DoLateUpdate;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action DoManualUpdate;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action enterState;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action exitState;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Enum currentState;

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xA43774", Offset = "0xA43774", VA = "0xA43774")]
		public State()
		{
		}
	}

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DebugGui;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector2 DebugGuiPosition;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string DebugGuiTitle;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Enum queueCommand;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float timeEnteredState;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public State state;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Enum lastState;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<Enum, Dictionary<string, Delegate>> _cache;

	[Token(Token = "0x17000058")]
	public Enum currentState
	{
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x7E97F0", Offset = "0x7E97F0", VA = "0x7E97F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x7E980C", Offset = "0x7E980C", VA = "0x7E980C")]
		set
		{
		}
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x7E96DC", Offset = "0x7E96DC", VA = "0x7E96DC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x7E986C", Offset = "0x7E986C", VA = "0x7E986C")]
	private void ChangingState()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x7E98B0", Offset = "0x7E98B0", VA = "0x7E98B0")]
	private void ConfigureCurrentState()
	{
	}

	[Token(Token = "0x60004F6")]
	private T ConfigureDelegate<T>(string methodRoot, T Default) where T : class
	{
		return null;
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x7E9B98", Offset = "0x7E9B98", VA = "0x7E9B98")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x7E9BE8", Offset = "0x7E9BE8", VA = "0x7E9BE8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x7E9C10", Offset = "0x7E9C10", VA = "0x7E9C10")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x7E9C38", Offset = "0x7E9C38", VA = "0x7E9C38", Slot = "4")]
	protected virtual void EarlyGlobalSuperUpdate()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x7E9C3C", Offset = "0x7E9C3C", VA = "0x7E9C3C", Slot = "5")]
	protected virtual void LateGlobalSuperUpdate()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x7E9C40", Offset = "0x7E9C40", VA = "0x7E9C40")]
	private static void DoNothing()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x7E9C44", Offset = "0x7E9C44", VA = "0x7E9C44")]
	public SimpleStateMachine()
	{
	}
}
[Token(Token = "0x2000149")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B678", Offset = "0x50B678")]
public class BSPTree : MonoBehaviour
{
	[Token(Token = "0x200014A")]
	public class Node
	{
		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 partitionPoint;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 partitionNormal;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Node positiveChild;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Node negativeChild;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] triangles;

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x7D94D4", Offset = "0x7D94D4", VA = "0x7D94D4")]
		public Node()
		{
		}
	}

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool drawMeshTreeOnStart;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int triangleCount;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int vertexCount;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3[] vertices;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int[] tris;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3[] triangleNormals;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Mesh mesh;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Node tree;

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x9BAFAC", Offset = "0x9BAFAC", VA = "0x9BAFAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x9BB3F4", Offset = "0x9BB3F4", VA = "0x9BB3F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x9BB404", Offset = "0x9BB404", VA = "0x9BB404")]
	public UnityEngine.Vector3 ClosestPointOn(UnityEngine.Vector3 to, float radius)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x9BB54C", Offset = "0x9BB54C", VA = "0x9BB54C")]
	private void FindClosestTriangles(Node node, UnityEngine.Vector3 to, float radius, List<int> triangles)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x9BB654", Offset = "0x9BB654", VA = "0x9BB654")]
	private UnityEngine.Vector3 ClosestPointOnTriangle(int[] triangles, UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x9BB2E4", Offset = "0x9BB2E4", VA = "0x9BB2E4")]
	private void BuildTriangleTree()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x9BBACC", Offset = "0x9BBACC", VA = "0x9BBACC")]
	private void RecursivePartition(List<int> triangles, int depth, Node parent)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x9BCAA0", Offset = "0x9BCAA0", VA = "0x9BCAA0")]
	private void Split(List<int> triangles, UnityEngine.Vector3 partitionPoint, UnityEngine.Vector3 partitionNormal, out List<int> positiveTriangles, out List<int> negativeTriangles)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x9BB870", Offset = "0x9BB870", VA = "0x9BB870")]
	private bool PointAbovePlane(UnityEngine.Vector3 planeOrigin, UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x9BB840", Offset = "0x9BB840", VA = "0x9BB840")]
	private float PointDistanceFromPlane(UnityEngine.Vector3 planeOrigin, UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 point)
	{
		return default(float);
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x9BB8A4", Offset = "0x9BB8A4", VA = "0x9BB8A4")]
	public static void ClosestPointOnTriangleToPoint(ref UnityEngine.Vector3 vertex1, ref UnityEngine.Vector3 vertex2, ref UnityEngine.Vector3 vertex3, ref UnityEngine.Vector3 point, out UnityEngine.Vector3 result)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x9BCEA0", Offset = "0x9BCEA0", VA = "0x9BCEA0")]
	private void DrawTriangleSet(int[] triangles, Color color)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x9BD024", Offset = "0x9BD024", VA = "0x9BD024")]
	public BSPTree()
	{
	}
}
[Token(Token = "0x200014B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B6D8", Offset = "0x50B6D8")]
public class BruteForceMesh : MonoBehaviour
{
	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int triangleCount;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector3[] vertices;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] tris;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Vector3[] triangleNormals;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Mesh mesh;

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x8D765C", Offset = "0x8D765C", VA = "0x8D765C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x8D7960", Offset = "0x8D7960", VA = "0x8D7960")]
	public UnityEngine.Vector3 ClosestPointOn(UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x8D79F4", Offset = "0x8D79F4", VA = "0x8D79F4")]
	private UnityEngine.Vector3 ClosestPointOnTriangle(int[] triangles, UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x8D7BE4", Offset = "0x8D7BE4", VA = "0x8D7BE4")]
	private void ClosestPointOnTriangleToPoint(ref UnityEngine.Vector3 vertex1, ref UnityEngine.Vector3 vertex2, ref UnityEngine.Vector3 vertex3, ref UnityEngine.Vector3 point, out UnityEngine.Vector3 result)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x8D7E0C", Offset = "0x8D7E0C", VA = "0x8D7E0C")]
	public BruteForceMesh()
	{
	}
}
[Token(Token = "0x200014C")]
public class SuperCharacterController : MonoBehaviour
{
	[Token(Token = "0x200014D")]
	[SerializeField]
	public struct Ground
	{
		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E9B8", Offset = "0x50E9B8")]
		private RaycastHit <hit>k__BackingField;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E9C8", Offset = "0x50E9C8")]
		private RaycastHit <nearHit>k__BackingField;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E9D8", Offset = "0x50E9D8")]
		private RaycastHit <farHit>k__BackingField;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E9E8", Offset = "0x50E9E8")]
		private RaycastHit <secondaryHit>k__BackingField;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E9F8", Offset = "0x50E9F8")]
		private SuperCollisionType <collisionType>k__BackingField;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA08", Offset = "0x50EA08")]
		private Transform <transform>k__BackingField;

		[Token(Token = "0x17000065")]
		public RaycastHit hit
		{
			[Token(Token = "0x6000540")]
			[Address(RVA = "0xA444E0", Offset = "0xA444E0", VA = "0xA444E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F90", Offset = "0x514F90")]
			readonly get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000541")]
			[Address(RVA = "0xA444F4", Offset = "0xA444F4", VA = "0xA444F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514FC8", Offset = "0x514FC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public RaycastHit nearHit
		{
			[Token(Token = "0x6000542")]
			[Address(RVA = "0xA44510", Offset = "0xA44510", VA = "0xA44510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514FD8", Offset = "0x514FD8")]
			readonly get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000543")]
			[Address(RVA = "0xA44528", Offset = "0xA44528", VA = "0xA44528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515010", Offset = "0x515010")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public RaycastHit farHit
		{
			[Token(Token = "0x6000544")]
			[Address(RVA = "0xA44548", Offset = "0xA44548", VA = "0xA44548")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515020", Offset = "0x515020")]
			readonly get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000545")]
			[Address(RVA = "0xA44560", Offset = "0xA44560", VA = "0xA44560")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515058", Offset = "0x515058")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public RaycastHit secondaryHit
		{
			[Token(Token = "0x6000546")]
			[Address(RVA = "0xA44580", Offset = "0xA44580", VA = "0xA44580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515068", Offset = "0x515068")]
			readonly get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000547")]
			[Address(RVA = "0xA44598", Offset = "0xA44598", VA = "0xA44598")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5150A0", Offset = "0x5150A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public SuperCollisionType collisionType
		{
			[Token(Token = "0x6000548")]
			[Address(RVA = "0xA445B8", Offset = "0xA445B8", VA = "0xA445B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5150B0", Offset = "0x5150B0")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000549")]
			[Address(RVA = "0xA445C0", Offset = "0xA445C0", VA = "0xA445C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5150E8", Offset = "0x5150E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public Transform transform
		{
			[Token(Token = "0x600054A")]
			[Address(RVA = "0xA445C8", Offset = "0xA445C8", VA = "0xA445C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5150F8", Offset = "0x5150F8")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x600054B")]
			[Address(RVA = "0xA445D0", Offset = "0xA445D0", VA = "0xA445D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515130", Offset = "0x515130")]
			set
			{
			}
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xA445D8", Offset = "0xA445D8", VA = "0xA445D8")]
		public Ground(RaycastHit hit, RaycastHit nearHit, RaycastHit farHit, RaycastHit secondaryHit, SuperCollisionType superCollisionType, Transform hitTransform)
		{
		}
	}

	[Token(Token = "0x200014E")]
	public delegate void UpdateDelegate();

	[Token(Token = "0x200014F")]
	protected struct IgnoredCollider
	{
		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider collider;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int layer;

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xA4467C", Offset = "0xA4467C", VA = "0xA4467C")]
		public IgnoredCollider(Collider collider, int layer)
		{
		}
	}

	[Token(Token = "0x2000150")]
	public class SuperGround
	{
		[Token(Token = "0x2000151")]
		private class GroundHit
		{
			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA38", Offset = "0x50EA38")]
			private UnityEngine.Vector3 <point>k__BackingField;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA48", Offset = "0x50EA48")]
			private UnityEngine.Vector3 <normal>k__BackingField;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA58", Offset = "0x50EA58")]
			private float <distance>k__BackingField;

			[Token(Token = "0x1700006D")]
			public UnityEngine.Vector3 point
			{
				[Token(Token = "0x6000560")]
				[Address(RVA = "0xA4920C", Offset = "0xA4920C", VA = "0xA4920C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515180", Offset = "0x515180")]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000561")]
				[Address(RVA = "0xA49218", Offset = "0xA49218", VA = "0xA49218")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515190", Offset = "0x515190")]
				private set
				{
				}
			}

			[Token(Token = "0x1700006E")]
			public UnityEngine.Vector3 normal
			{
				[Token(Token = "0x6000562")]
				[Address(RVA = "0xA49224", Offset = "0xA49224", VA = "0xA49224")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5151A0", Offset = "0x5151A0")]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000563")]
				[Address(RVA = "0xA49230", Offset = "0xA49230", VA = "0xA49230")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5151B0", Offset = "0x5151B0")]
				private set
				{
				}
			}

			[Token(Token = "0x1700006F")]
			public float distance
			{
				[Token(Token = "0x6000564")]
				[Address(RVA = "0xA4923C", Offset = "0xA4923C", VA = "0xA4923C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5151C0", Offset = "0x5151C0")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000565")]
				[Address(RVA = "0xA49244", Offset = "0xA49244", VA = "0xA49244")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5151D0", Offset = "0x5151D0")]
				private set
				{
				}
			}

			[Token(Token = "0x6000566")]
			[Address(RVA = "0xA45760", Offset = "0xA45760", VA = "0xA45760")]
			public GroundHit(UnityEngine.Vector3 point, UnityEngine.Vector3 normal, float distance)
			{
			}
		}

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LayerMask walkable;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SuperCharacterController controller;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private QueryTriggerInteraction triggerInteraction;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GroundHit primaryGround;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GroundHit nearGround;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GroundHit farGround;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GroundHit stepGround;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GroundHit flushGround;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA18", Offset = "0x50EA18")]
		private SuperCollisionType <superCollisionType>k__BackingField;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EA28", Offset = "0x50EA28")]
		private Transform <transform>k__BackingField;

		[Token(Token = "0x400066C")]
		private const float groundingUpperBoundAngle = 60f;

		[Token(Token = "0x400066D")]
		private const float groundingMaxPercentFromCenter = 0.85f;

		[Token(Token = "0x400066E")]
		private const float groundingMinPercentFromcenter = 0.5f;

		[Token(Token = "0x1700006B")]
		public SuperCollisionType superCollisionType
		{
			[Token(Token = "0x6000553")]
			[Address(RVA = "0xA446F8", Offset = "0xA446F8", VA = "0xA446F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515140", Offset = "0x515140")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000554")]
			[Address(RVA = "0xA44700", Offset = "0xA44700", VA = "0xA44700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515150", Offset = "0x515150")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public Transform transform
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0xA44708", Offset = "0xA44708", VA = "0xA44708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515160", Offset = "0x515160")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000556")]
			[Address(RVA = "0xA44710", Offset = "0xA44710", VA = "0xA44710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515170", Offset = "0x515170")]
			private set
			{
			}
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xA446A8", Offset = "0xA446A8", VA = "0xA446A8")]
		public SuperGround(LayerMask walkable, SuperCharacterController controller, QueryTriggerInteraction triggerInteraction)
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0xA44718", Offset = "0xA44718", VA = "0xA44718")]
		public void ProbeGround(UnityEngine.Vector3 origin, int iter)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xA453D8", Offset = "0xA453D8", VA = "0xA453D8")]
		private void ResetGrounds()
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xA457D0", Offset = "0xA457D0", VA = "0xA457D0")]
		public bool IsGrounded(bool currentlyGrounded, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xA45800", Offset = "0xA45800", VA = "0xA45800")]
		public bool IsGrounded(bool currentlyGrounded, float distance, out UnityEngine.Vector3 groundNormal)
		{
			return default(bool);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xA45A68", Offset = "0xA45A68", VA = "0xA45A68")]
		private bool OnSteadyGround(UnityEngine.Vector3 normal, UnityEngine.Vector3 point)
		{
			return default(bool);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xA45C34", Offset = "0xA45C34", VA = "0xA45C34")]
		public UnityEngine.Vector3 PrimaryNormal()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xA45C54", Offset = "0xA45C54", VA = "0xA45C54")]
		public float Distance()
		{
			return default(float);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xA45C70", Offset = "0xA45C70", VA = "0xA45C70")]
		public void DebugGround(bool primary, bool near, bool far, bool flush, bool step)
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xA4543C", Offset = "0xA4543C", VA = "0xA4543C")]
		private bool SimulateSphereCast(UnityEngine.Vector3 groundNormal, out RaycastHit hit)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.Vector3 debugMove;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private QueryTriggerInteraction triggerInteraction;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool fixedTimeStep;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int fixedUpdatesPerSecond;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool clampToMovingGround;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool debugSpheres;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[SerializeField]
	private bool debugGrounding;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	[SerializeField]
	private bool debugPushbackMesssages;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CollisionSphere[] spheres;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LayerMask Walkable;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Collider ownCollider;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public float radius;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E918", Offset = "0x50E918")]
	private float <deltaTime>k__BackingField;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E928", Offset = "0x50E928")]
	private SuperGround <currentGround>k__BackingField;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E938", Offset = "0x50E938")]
	private CollisionSphere <feet>k__BackingField;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E948", Offset = "0x50E948")]
	private CollisionSphere <head>k__BackingField;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E958", Offset = "0x50E958")]
	private List<SuperCollision> <collisionData>k__BackingField;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E968", Offset = "0x50E968")]
	private Transform <currentlyClampedTo>k__BackingField;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E978", Offset = "0x50E978")]
	private float <heightScale>k__BackingField;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E988", Offset = "0x50E988")]
	private float <radiusScale>k__BackingField;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50E998", Offset = "0x50E998")]
	private bool <manualUpdateOnly>k__BackingField;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UnityEngine.Vector3 initialPosition;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private UnityEngine.Vector3 groundOffset;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private UnityEngine.Vector3 lastGroundPosition;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool clamping;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool slopeLimiting;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<Collider> ignoredColliders;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<IgnoredCollider> ignoredColliderStack;

	[Token(Token = "0x4000653")]
	private const float Tolerance = 0.1f;

	[Token(Token = "0x4000654")]
	private const float TinyTolerance = 0.01f;

	[Token(Token = "0x4000655")]
	private const string TemporaryLayer = "TempCast";

	[Token(Token = "0x4000656")]
	private const int MaxPushbackIterations = 2;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int TemporaryLayerIndex;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float fixedDeltaTime;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SuperCollisionType defaultCollisionType;

	[Token(Token = "0x17000059")]
	public float deltaTime
	{
		[Token(Token = "0x6000512")]
		[Address(RVA = "0xD7260C", Offset = "0xD7260C", VA = "0xD7260C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514E50", Offset = "0x514E50")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000513")]
		[Address(RVA = "0xD72614", Offset = "0xD72614", VA = "0xD72614")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514E60", Offset = "0x514E60")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public SuperGround currentGround
	{
		[Token(Token = "0x6000514")]
		[Address(RVA = "0xD7261C", Offset = "0xD7261C", VA = "0xD7261C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514E70", Offset = "0x514E70")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000515")]
		[Address(RVA = "0xD72624", Offset = "0xD72624", VA = "0xD72624")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514E80", Offset = "0x514E80")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public CollisionSphere feet
	{
		[Token(Token = "0x6000516")]
		[Address(RVA = "0xD7262C", Offset = "0xD7262C", VA = "0xD7262C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514E90", Offset = "0x514E90")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000517")]
		[Address(RVA = "0xD72634", Offset = "0xD72634", VA = "0xD72634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514EA0", Offset = "0x514EA0")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public CollisionSphere head
	{
		[Token(Token = "0x6000518")]
		[Address(RVA = "0xD7263C", Offset = "0xD7263C", VA = "0xD7263C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514EB0", Offset = "0x514EB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000519")]
		[Address(RVA = "0xD72644", Offset = "0xD72644", VA = "0xD72644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514EC0", Offset = "0x514EC0")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public float height
	{
		[Token(Token = "0x600051A")]
		[Address(RVA = "0xD7264C", Offset = "0xD7264C", VA = "0xD7264C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700005E")]
	public UnityEngine.Vector3 up
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0xD72760", Offset = "0xD72760", VA = "0xD72760")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x1700005F")]
	public UnityEngine.Vector3 down
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xD72784", Offset = "0xD72784", VA = "0xD72784")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000060")]
	public List<SuperCollision> collisionData
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0xD727B8", Offset = "0xD727B8", VA = "0xD727B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514ED0", Offset = "0x514ED0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600051E")]
		[Address(RVA = "0xD727C0", Offset = "0xD727C0", VA = "0xD727C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514EE0", Offset = "0x514EE0")]
		private set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public Transform currentlyClampedTo
	{
		[Token(Token = "0x600051F")]
		[Address(RVA = "0xD727C8", Offset = "0xD727C8", VA = "0xD727C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514EF0", Offset = "0x514EF0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000520")]
		[Address(RVA = "0xD727D0", Offset = "0xD727D0", VA = "0xD727D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F00", Offset = "0x514F00")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public float heightScale
	{
		[Token(Token = "0x6000521")]
		[Address(RVA = "0xD727D8", Offset = "0xD727D8", VA = "0xD727D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F10", Offset = "0x514F10")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000522")]
		[Address(RVA = "0xD727E0", Offset = "0xD727E0", VA = "0xD727E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F20", Offset = "0x514F20")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public float radiusScale
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xD727E8", Offset = "0xD727E8", VA = "0xD727E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F30", Offset = "0x514F30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xD727F0", Offset = "0xD727F0", VA = "0xD727F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F40", Offset = "0x514F40")]
		set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public bool manualUpdateOnly
	{
		[Token(Token = "0x6000525")]
		[Address(RVA = "0xD727F8", Offset = "0xD727F8", VA = "0xD727F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F50", Offset = "0x514F50")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000526")]
		[Address(RVA = "0xD72800", Offset = "0xD72800", VA = "0xD72800")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F60", Offset = "0x514F60")]
		set
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event UpdateDelegate AfterSingleUpdate
	{
		[Token(Token = "0x6000527")]
		[Address(RVA = "0xD7280C", Offset = "0xD7280C", VA = "0xD7280C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F70", Offset = "0x514F70")]
		add
		{
		}
		[Token(Token = "0x6000528")]
		[Address(RVA = "0xD728AC", Offset = "0xD728AC", VA = "0xD728AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x514F80", Offset = "0x514F80")]
		remove
		{
		}
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xD7294C", Offset = "0xD7294C", VA = "0xD7294C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xD72EA4", Offset = "0xD72EA4", VA = "0xD72EA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xD7330C", Offset = "0xD7330C", VA = "0xD7330C")]
	public void ManualUpdate(float deltaTime)
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xD72F28", Offset = "0xD72F28", VA = "0xD72F28")]
	private void SingleUpdate()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xD73314", Offset = "0xD73314", VA = "0xD73314")]
	private void ProbeGround(int iter)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xD7399C", Offset = "0xD7399C", VA = "0xD7399C")]
	private bool SlopeLimit()
	{
		return default(bool);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xD73D74", Offset = "0xD73D74", VA = "0xD73D74")]
	private void ClampToGround()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xD74024", Offset = "0xD74024", VA = "0xD74024")]
	public void EnableClamping()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xD74030", Offset = "0xD74030", VA = "0xD74030")]
	public void DisableClamping()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xD74038", Offset = "0xD74038", VA = "0xD74038")]
	public void EnableSlopeLimit()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xD74044", Offset = "0xD74044", VA = "0xD74044")]
	public void DisableSlopeLimit()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xD7404C", Offset = "0xD7404C", VA = "0xD7404C")]
	public bool IsClamping()
	{
		return default(bool);
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xD73368", Offset = "0xD73368", VA = "0xD73368")]
	private void RecursivePushback(int depth, int maxDepth)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xD73E08", Offset = "0xD73E08", VA = "0xD73E08")]
	private void PushIgnoredColliders()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xD73F4C", Offset = "0xD73F4C", VA = "0xD73F4C")]
	private void PopIgnoredColliders()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xD743EC", Offset = "0xD743EC", VA = "0xD743EC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xD726C4", Offset = "0xD726C4", VA = "0xD726C4")]
	public UnityEngine.Vector3 SpherePosition(CollisionSphere sphere)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xD744E0", Offset = "0xD744E0", VA = "0xD744E0")]
	public bool PointBelowHead(UnityEngine.Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xD74564", Offset = "0xD74564", VA = "0xD74564")]
	public bool PointAboveFeet(UnityEngine.Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xD72E40", Offset = "0xD72E40", VA = "0xD72E40")]
	public void IgnoreCollider(Collider col)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xD745E8", Offset = "0xD745E8", VA = "0xD745E8")]
	public void RemoveIgnoredCollider(Collider col)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xD7464C", Offset = "0xD7464C", VA = "0xD7464C")]
	public void ClearIgnoredColliders()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xD746A0", Offset = "0xD746A0", VA = "0xD746A0")]
	public SuperCharacterController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000152")]
public class CollisionSphere
{
	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float offset;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool isFeet;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool isHead;

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x8E7058", Offset = "0x8E7058", VA = "0x8E7058")]
	public CollisionSphere(float offset, bool isFeet, bool isHead)
	{
	}
}
[Token(Token = "0x2000153")]
public struct SuperCollision
{
	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public CollisionSphere collisionSphere;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public SuperCollisionType superCollisionType;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject gameObject;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 point;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Vector3 normal;
}
[Token(Token = "0x2000154")]
public static class SuperCollider
{
	[Token(Token = "0x6000568")]
	[Address(RVA = "0xD74054", Offset = "0xD74054", VA = "0xD74054")]
	public static bool ClosestPointOnSurface(Collider collider, UnityEngine.Vector3 to, float radius, out UnityEngine.Vector3 closestPointOnSurface)
	{
		return default(bool);
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xD74A74", Offset = "0xD74A74", VA = "0xD74A74")]
	public static UnityEngine.Vector3 ClosestPointOnSurface(SphereCollider collider, UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xD74864", Offset = "0xD74864", VA = "0xD74864")]
	public static UnityEngine.Vector3 ClosestPointOnSurface(BoxCollider collider, UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xD74BB4", Offset = "0xD74BB4", VA = "0xD74BB4")]
	public static UnityEngine.Vector3 ClosestPointOnSurface(CapsuleCollider collider, UnityEngine.Vector3 to)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xD74DEC", Offset = "0xD74DEC", VA = "0xD74DEC")]
	public static UnityEngine.Vector3 ClosestPointOnSurface(TerrainCollider collider, UnityEngine.Vector3 to, float radius, bool debug = false)
	{
		return default(UnityEngine.Vector3);
	}
}
[Token(Token = "0x2000155")]
public class SuperCollisionType : MonoBehaviour
{
	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float StandAngle;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SlopeLimit;

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xD754F0", Offset = "0xD754F0", VA = "0xD754F0")]
	public SuperCollisionType()
	{
	}
}
[Token(Token = "0x2000156")]
public static class SuperMath
{
	[Token(Token = "0x600056E")]
	[Address(RVA = "0xD75504", Offset = "0xD75504", VA = "0xD75504")]
	public static UnityEngine.Vector3 ClampAngleOnPlane(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, float angle, UnityEngine.Vector3 planeNormal)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xD75600", Offset = "0xD75600", VA = "0xD75600")]
	public static float BoundedInterpolation(float[] bounds, float[] values, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xD75694", Offset = "0xD75694", VA = "0xD75694")]
	public static bool PointAbovePlane(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint, UnityEngine.Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xD756E8", Offset = "0xD756E8", VA = "0xD756E8")]
	public static bool Timer(float startTime, float duration)
	{
		return default(bool);
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xD7571C", Offset = "0xD7571C", VA = "0xD7571C")]
	public static float ClampAngle(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xD75748", Offset = "0xD75748", VA = "0xD75748")]
	public static float CalculateJumpSpeed(float jumpHeight, float gravity)
	{
		return default(float);
	}
}
[Token(Token = "0x2000157")]
public class SuperStateMachine : MonoBehaviour
{
	[Token(Token = "0x2000158")]
	public class State
	{
		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action DoSuperUpdate;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action enterState;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action exitState;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Enum currentState;

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xA460DC", Offset = "0xA460DC", VA = "0xA460DC")]
		public State()
		{
		}
	}

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float timeEnteredState;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public State state;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Enum lastState;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Enum, Dictionary<string, Delegate>> _cache;

	[Token(Token = "0x17000070")]
	public Enum currentState
	{
		[Token(Token = "0x6000574")]
		[Address(RVA = "0xD75768", Offset = "0xD75768", VA = "0xD75768")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000575")]
		[Address(RVA = "0xD75784", Offset = "0xD75784", VA = "0xD75784")]
		set
		{
		}
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xD757E4", Offset = "0xD757E4", VA = "0xD757E4")]
	private void ChangingState()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xD75828", Offset = "0xD75828", VA = "0xD75828")]
	private void ConfigureCurrentState()
	{
	}

	[Token(Token = "0x6000578")]
	private T ConfigureDelegate<T>(string methodRoot, T Default) where T : class
	{
		return null;
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xD759FC", Offset = "0xD759FC", VA = "0xD759FC")]
	private void SuperUpdate()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xD75A4C", Offset = "0xD75A4C", VA = "0xD75A4C", Slot = "4")]
	protected virtual void EarlyGlobalSuperUpdate()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xD75A50", Offset = "0xD75A50", VA = "0xD75A50", Slot = "5")]
	protected virtual void LateGlobalSuperUpdate()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xD75A54", Offset = "0xD75A54", VA = "0xD75A54")]
	private static void DoNothing()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xD75A58", Offset = "0xD75A58", VA = "0xD75A58")]
	public SuperStateMachine()
	{
	}
}
[Token(Token = "0x2000159")]
public static class DebugDraw
{
	[Token(Token = "0x600057F")]
	[Address(RVA = "0xA52E74", Offset = "0xA52E74", VA = "0xA52E74")]
	public static void DrawMarker(UnityEngine.Vector3 position, float size, Color color, float duration, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xA530E8", Offset = "0xA530E8", VA = "0xA530E8")]
	public static void DrawPlane(UnityEngine.Vector3 position, UnityEngine.Vector3 normal, float size, Color color, float duration, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xA53470", Offset = "0xA53470", VA = "0xA53470")]
	public static void DrawVector(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, float raySize, float markerSize, Color color, float duration, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xA535A0", Offset = "0xA535A0", VA = "0xA535A0")]
	public static void DrawTriangle(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, Color color)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xA536E0", Offset = "0xA536E0", VA = "0xA536E0")]
	public static void DrawTriangle(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, Color color, Transform t)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xA53894", Offset = "0xA53894", VA = "0xA53894")]
	public static void DrawMesh(Mesh mesh, Color color, Transform t)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xA53A80", Offset = "0xA53A80", VA = "0xA53A80")]
	public static Color RandomColor()
	{
		return default(Color);
	}
}
[Token(Token = "0x200015A")]
public class Math3d : MonoBehaviour
{
	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform tempChild;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Transform tempParent;

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xC24DBC", Offset = "0xC24DBC", VA = "0xC24DBC")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xC24FC0", Offset = "0xC24FC0", VA = "0xC24FC0")]
	public static UnityEngine.Vector3 AddVectorLength(UnityEngine.Vector3 vector, float size)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xC25084", Offset = "0xC25084", VA = "0xC25084")]
	public static UnityEngine.Vector3 SetVectorLength(UnityEngine.Vector3 vector, float size)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xC250B4", Offset = "0xC250B4", VA = "0xC250B4")]
	public static Quaternion SubtractRotation(Quaternion B, Quaternion A)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xC25110", Offset = "0xC25110", VA = "0xC25110")]
	public static bool PlanePlaneIntersection(out UnityEngine.Vector3 linePoint, out UnityEngine.Vector3 lineVec, UnityEngine.Vector3 plane1Normal, UnityEngine.Vector3 plane1Position, UnityEngine.Vector3 plane2Normal, UnityEngine.Vector3 plane2Position)
	{
		return default(bool);
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xC25264", Offset = "0xC25264", VA = "0xC25264")]
	public static bool LinePlaneIntersection(out UnityEngine.Vector3 intersection, UnityEngine.Vector3 linePoint, UnityEngine.Vector3 lineVec, UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint)
	{
		return default(bool);
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xC253A8", Offset = "0xC253A8", VA = "0xC253A8")]
	public static bool LineLineIntersection(out UnityEngine.Vector3 intersection, UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 lineVec1, UnityEngine.Vector3 linePoint2, UnityEngine.Vector3 lineVec2)
	{
		return default(bool);
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xC25570", Offset = "0xC25570", VA = "0xC25570")]
	public static bool ClosestPointsOnTwoLines(out UnityEngine.Vector3 closestPointLine1, out UnityEngine.Vector3 closestPointLine2, UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 lineVec1, UnityEngine.Vector3 linePoint2, UnityEngine.Vector3 lineVec2)
	{
		return default(bool);
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xC256F8", Offset = "0xC256F8", VA = "0xC256F8")]
	public static UnityEngine.Vector3 ProjectPointOnLine(UnityEngine.Vector3 linePoint, UnityEngine.Vector3 lineVec, UnityEngine.Vector3 point)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xC2573C", Offset = "0xC2573C", VA = "0xC2573C")]
	public static UnityEngine.Vector3 ProjectPointOnLineSegment(UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 linePoint2, UnityEngine.Vector3 point)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xC25950", Offset = "0xC25950", VA = "0xC25950")]
	public static UnityEngine.Vector3 ProjectPointOnPlane(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint, UnityEngine.Vector3 point)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xC25A6C", Offset = "0xC25A6C", VA = "0xC25A6C")]
	public static UnityEngine.Vector3 ProjectVectorOnPlane(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 vector)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xC25A40", Offset = "0xC25A40", VA = "0xC25A40")]
	public static float SignedDistancePlanePoint(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint, UnityEngine.Vector3 point)
	{
		return default(float);
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xC25A9C", Offset = "0xC25A9C", VA = "0xC25A9C")]
	public static float SignedDotProduct(UnityEngine.Vector3 vectorA, UnityEngine.Vector3 vectorB, UnityEngine.Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xC25B00", Offset = "0xC25B00", VA = "0xC25B00")]
	public static float SignedVectorAngle(UnityEngine.Vector3 referenceVector, UnityEngine.Vector3 otherVector, UnityEngine.Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xC25BC4", Offset = "0xC25BC4", VA = "0xC25BC4")]
	public static float AngleVectorPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xC25C78", Offset = "0xC25C78", VA = "0xC25C78")]
	public static float DotProductAngle(UnityEngine.Vector3 vec1, UnityEngine.Vector3 vec2)
	{
		return default(float);
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xC25D34", Offset = "0xC25D34", VA = "0xC25D34")]
	public static void PlaneFrom3Points(out UnityEngine.Vector3 planeNormal, out UnityEngine.Vector3 planePoint, UnityEngine.Vector3 pointA, UnityEngine.Vector3 pointB, UnityEngine.Vector3 pointC)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xC25F20", Offset = "0xC25F20", VA = "0xC25F20")]
	public static UnityEngine.Vector3 GetForwardVector(Quaternion q)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xC25F78", Offset = "0xC25F78", VA = "0xC25F78")]
	public static UnityEngine.Vector3 GetUpVector(Quaternion q)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xC25FD0", Offset = "0xC25FD0", VA = "0xC25FD0")]
	public static UnityEngine.Vector3 GetRightVector(Quaternion q)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xC26028", Offset = "0xC26028", VA = "0xC26028")]
	public static Quaternion QuaternionFromMatrix(Matrix4x4 m)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xC260A8", Offset = "0xC260A8", VA = "0xC260A8")]
	public static UnityEngine.Vector3 PositionFromMatrix(Matrix4x4 m)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xC260B4", Offset = "0xC260B4", VA = "0xC260B4")]
	public static void LookRotationExtended(ref GameObject gameObjectInOut, UnityEngine.Vector3 alignWithVector, UnityEngine.Vector3 alignWithNormal, UnityEngine.Vector3 customForward, UnityEngine.Vector3 customUp)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xC261A4", Offset = "0xC261A4", VA = "0xC261A4")]
	public static void TransformWithParent(out Quaternion childRotation, out UnityEngine.Vector3 childPosition, Quaternion parentRotation, UnityEngine.Vector3 parentPosition, Quaternion startParentRotation, UnityEngine.Vector3 startParentPosition, Quaternion startChildRotation, UnityEngine.Vector3 startChildPosition)
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xC263C0", Offset = "0xC263C0", VA = "0xC263C0")]
	public static void PreciseAlign(ref GameObject gameObjectInOut, UnityEngine.Vector3 alignWithVector, UnityEngine.Vector3 alignWithNormal, UnityEngine.Vector3 alignWithPosition, UnityEngine.Vector3 triangleForward, UnityEngine.Vector3 triangleNormal, UnityEngine.Vector3 trianglePosition)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xC26558", Offset = "0xC26558", VA = "0xC26558")]
	private void VectorsToTransform(ref GameObject gameObjectInOut, UnityEngine.Vector3 positionVector, UnityEngine.Vector3 directionVector, UnityEngine.Vector3 normalVector)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xC258B4", Offset = "0xC258B4", VA = "0xC258B4")]
	public static int PointOnWhichSideOfLineSegment(UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 linePoint2, UnityEngine.Vector3 point)
	{
		return default(int);
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xC26620", Offset = "0xC26620", VA = "0xC26620")]
	public static float MouseDistanceToLine(UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 linePoint2)
	{
		return default(float);
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xC26780", Offset = "0xC26780", VA = "0xC26780")]
	public static float MouseDistanceToCircle(UnityEngine.Vector3 point, float radius)
	{
		return default(float);
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xC26840", Offset = "0xC26840", VA = "0xC26840")]
	public static bool IsLineInRectangle(UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 linePoint2, UnityEngine.Vector3 rectA, UnityEngine.Vector3 rectB, UnityEngine.Vector3 rectC, UnityEngine.Vector3 rectD)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xC26B18", Offset = "0xC26B18", VA = "0xC26B18")]
	public static bool IsPointInRectangle(UnityEngine.Vector3 point, UnityEngine.Vector3 rectA, UnityEngine.Vector3 rectC, UnityEngine.Vector3 rectB, UnityEngine.Vector3 rectD)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xC26D78", Offset = "0xC26D78", VA = "0xC26D78")]
	public static bool AreLineSegmentsCrossing(UnityEngine.Vector3 pointA1, UnityEngine.Vector3 pointA2, UnityEngine.Vector3 pointB1, UnityEngine.Vector3 pointB2)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xC26F74", Offset = "0xC26F74", VA = "0xC26F74")]
	public Math3d()
	{
	}
}
[Token(Token = "0x200015B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B748", Offset = "0x50B748")]
public class RandomizePitch : MonoBehaviour
{
	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float _minPitch;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float _maxPitch;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _audio;

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xDDBED4", Offset = "0xDDBED4", VA = "0xDDBED4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xDDBF64", Offset = "0xDDBF64", VA = "0xDDBF64")]
	public RandomizePitch()
	{
	}
}
[Token(Token = "0x200015C")]
public class ReviewPrompt : MonoBehaviour
{
	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xDE1818", Offset = "0xDE1818", VA = "0xDE1818")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xDE181C", Offset = "0xDE181C", VA = "0xDE181C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xDE1820", Offset = "0xDE1820", VA = "0xDE1820")]
	public ReviewPrompt()
	{
	}
}
[Token(Token = "0x200015D")]
public class SFB_DemoBoneDragon : MonoBehaviour
{
	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator charAnim;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isAir;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isDying;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool isDyingEnd;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Vector3 groundPos;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] breathParticles;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] breathLights;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material[] matLimbs;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material[] matSpine;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xA9E878", Offset = "0xA9E878", VA = "0xA9E878")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xA9E8D4", Offset = "0xA9E8D4", VA = "0xA9E8D4")]
	public void UpdateGroundLocomotion(float newValue)
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xA9E93C", Offset = "0xA9E93C", VA = "0xA9E93C")]
	public void CallTrigger(string newValue)
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xA9EB88", Offset = "0xA9EB88", VA = "0xA9EB88")]
	public void StartDeath()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xA9EB94", Offset = "0xA9EB94", VA = "0xA9EB94")]
	private void Update()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xA9ED90", Offset = "0xA9ED90", VA = "0xA9ED90")]
	public void SetAir()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xA9EDA0", Offset = "0xA9EDA0", VA = "0xA9EDA0")]
	public void SetDying()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xA9EAE8", Offset = "0xA9EAE8", VA = "0xA9EAE8")]
	public void GoAir()
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xA9EB44", Offset = "0xA9EB44", VA = "0xA9EB44")]
	public void GoGround()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xA9ED2C", Offset = "0xA9ED2C", VA = "0xA9ED2C")]
	public void DeathEnd()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xA9EDAC", Offset = "0xA9EDAC", VA = "0xA9EDAC")]
	public void StartBreath()
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xA9EE9C", Offset = "0xA9EE9C", VA = "0xA9EE9C")]
	public void StopBreath()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xA9EF8C", Offset = "0xA9EF8C", VA = "0xA9EF8C")]
	public void SetMaterials(int id)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xA9F0A0", Offset = "0xA9F0A0", VA = "0xA9F0A0")]
	public SFB_DemoBoneDragon()
	{
	}
}
[Token(Token = "0x200015E")]
public class SFBDemo_CameraTools : MonoBehaviour
{
	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject rotateTarget;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] rotateTargets;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotateTargetOffset;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotateSpeed;

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xA97E2C", Offset = "0xA97E2C", VA = "0xA97E2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xA97F80", Offset = "0xA97F80", VA = "0xA97F80")]
	private GameObject FindNewTarget()
	{
		return null;
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xA98018", Offset = "0xA98018", VA = "0xA98018")]
	public void SetRotationSpeed(float newSpeed)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xA98020", Offset = "0xA98020", VA = "0xA98020")]
	public void SetCameraHeight(float newValue)
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xA980A8", Offset = "0xA980A8", VA = "0xA980A8")]
	public SFBDemo_CameraTools()
	{
	}
}
[Token(Token = "0x200015F")]
public class SFBDemo_DemoControl : MonoBehaviour
{
	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xA980BC", Offset = "0xA980BC", VA = "0xA980BC")]
	public void SetTimescale(float newValue)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xA980C4", Offset = "0xA980C4", VA = "0xA980C4")]
	public SFBDemo_DemoControl()
	{
	}
}
[Token(Token = "0x2000160")]
public class SFBDemo_Locomotion : MonoBehaviour
{
	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string stringName;

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xA980CC", Offset = "0xA980CC", VA = "0xA980CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xA98184", Offset = "0xA98184", VA = "0xA98184")]
	public void SetLocomotion(float newValue)
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xA98228", Offset = "0xA98228", VA = "0xA98228")]
	public SFBDemo_Locomotion()
	{
	}
}
[Token(Token = "0x2000161")]
public class SFBDemo_Mimics : MonoBehaviour
{
	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem[] castWarmup;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem[] castSpell;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string locomotionName;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xA98284", Offset = "0xA98284", VA = "0xA98284")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xA983C8", Offset = "0xA983C8", VA = "0xA983C8")]
	public void UpdateLocomotion(float newValue)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xA9846C", Offset = "0xA9846C", VA = "0xA9846C")]
	public void StartWarmup()
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xA984D8", Offset = "0xA984D8", VA = "0xA984D8")]
	public void StartCast()
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xA98588", Offset = "0xA98588", VA = "0xA98588")]
	public void StopCast()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xA985F4", Offset = "0xA985F4", VA = "0xA985F4")]
	public SFBDemo_Mimics()
	{
	}
}
[Token(Token = "0x2000162")]
public class SFBDemo_StayWithTarget : MonoBehaviour
{
	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float verticalOffset;

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xA98650", Offset = "0xA98650", VA = "0xA98650")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xA986CC", Offset = "0xA986CC", VA = "0xA986CC")]
	public SFBDemo_StayWithTarget()
	{
	}
}
[Token(Token = "0x2000163")]
public class SFB_AudioManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000164")]
	public class SFB_AudioClips
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] audioClips;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int chanceOfPlaying;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float volume;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool volumeBySpeed;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float minVolume;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool pitchBySpeed;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minPitch;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxPitch;

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xA43010", Offset = "0xA43010", VA = "0xA43010")]
		public SFB_AudioClips()
		{
		}
	}

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SFB_AudioClips> audioClips;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SFB_AudioClips> audioLoops;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool pitchByTimescale;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator animator;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool pitchBySpeed;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool volumeBySpeed;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float pitchMin;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float pitchMax;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float desiredPitch;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float volumeMin;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float volumeMax;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float volumeSpeed;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float desiredMin;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float desiredMax;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool loopPlaying;

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xA988A4", Offset = "0xA988A4", VA = "0xA988A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xA989BC", Offset = "0xA989BC", VA = "0xA989BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xA98A04", Offset = "0xA98A04", VA = "0xA98A04")]
	private void UpdatePitch()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xA98B34", Offset = "0xA98B34", VA = "0xA98B34")]
	private void UpdateVolume()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xA98C9C", Offset = "0xA98C9C", VA = "0xA98C9C")]
	private void PlayAudio(string name)
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xA9907C", Offset = "0xA9907C", VA = "0xA9907C")]
	public void StartLoop(string name)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xA9941C", Offset = "0xA9941C", VA = "0xA9941C")]
	public void StopLoop()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xA98F48", Offset = "0xA98F48", VA = "0xA98F48")]
	private int AudioClipIndex(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xA992E8", Offset = "0xA992E8", VA = "0xA992E8")]
	private int AudioLoopIndex(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xA99428", Offset = "0xA99428", VA = "0xA99428")]
	public SFB_AudioManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000165")]
public class SFB_BlendShapesManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000166")]
	public class SFB_InspectorObject
	{
		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int objectID;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int shapeID;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int blendShapeID;

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xA43154", Offset = "0xA43154", VA = "0xA43154")]
		public SFB_InspectorObject()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000167")]
	public class SFB_BlendShapeObject
	{
		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh meshObject;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer renderer;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SFB_BlendShape> blendShapes;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int primaryShapes;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool expandedInspector;

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xA430D0", Offset = "0xA430D0", VA = "0xA430D0")]
		public SFB_BlendShapeObject()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000168")]
	public class SFB_BlendShape
	{
		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string fullName;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isMinus;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isPlus;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int inspectorID;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int id;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float minValue;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxValue;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float value;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sliderValue;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float changeDuration;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isVisible;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SFB_BlendMatch> blendMatches;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool presetExport;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int presetExportValue;

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xA43040", Offset = "0xA43040", VA = "0xA43040")]
		public SFB_BlendShape()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000169")]
	public class SFB_BlendMatch
	{
		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int objectID;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int shapeID;

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xA43038", Offset = "0xA43038", VA = "0xA43038")]
		public SFB_BlendMatch()
		{
		}
	}

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SFB_BlendShapeObject> blendShapeObjects;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SFB_InspectorObject> inspectorObjects;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<TextAsset> presetObjects;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool showWireframe;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string presetName;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showPresets;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool showShapes;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool showData;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool showScripting;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int selectedShape;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float globalRangeModifier;

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xA994F4", Offset = "0xA994F4", VA = "0xA994F4")]
	public void SFB_BS_ToggleRange(int value)
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xA99648", Offset = "0xA99648", VA = "0xA99648")]
	public void RandomizeAll()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xA997AC", Offset = "0xA997AC", VA = "0xA997AC")]
	public void SFB_BS_SetRandom(SFB_BlendShape blendShape)
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xA9A1AC", Offset = "0xA9A1AC", VA = "0xA9A1AC")]
	public void SFB_BS_TogglePresets(bool value)
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xA9A2F8", Offset = "0xA9A2F8", VA = "0xA9A2F8")]
	public void SFB_BS_TogglePresetsValue(int objectID, int value)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xA9A440", Offset = "0xA9A440", VA = "0xA9A440")]
	public void SFB_BS_ShowWireframe(bool value)
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xA9A444", Offset = "0xA9A444", VA = "0xA9A444")]
	public void SetSelectedShape(int newValue)
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xA9A44C", Offset = "0xA9A44C", VA = "0xA9A44C")]
	public void SetValueUI(float newValue)
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xA99A0C", Offset = "0xA99A0C", VA = "0xA99A0C")]
	public void SetValue(int objectID, int shapeID, int blendShapeID, float value)
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xA9A6F0", Offset = "0xA9A6F0", VA = "0xA9A6F0")]
	public int AddToInspectorObjects(int newObjectID, int newShapeID, int newBlendShapeID)
	{
		return default(int);
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xA9A894", Offset = "0xA9A894", VA = "0xA9A894")]
	public void AddObject(Mesh newMesh, SkinnedMeshRenderer newRenderer)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xA9A004", Offset = "0xA9A004", VA = "0xA9A004")]
	public int GetMinusShapeID(string plusName)
	{
		return default(int);
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xA99E5C", Offset = "0xA99E5C", VA = "0xA99E5C")]
	public int GetMinusShapeObject(string plusName)
	{
		return default(int);
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xA9B5E8", Offset = "0xA9B5E8", VA = "0xA9B5E8")]
	public int VisibleBlendShapes(Mesh newMesh)
	{
		return default(int);
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xA9B674", Offset = "0xA9B674", VA = "0xA9B674")]
	public int MatchedBlendShapes(Mesh newMesh)
	{
		return default(int);
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xA9B1E4", Offset = "0xA9B1E4", VA = "0xA9B1E4")]
	public string GetHumanName(string blendShapeName)
	{
		return null;
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xA9B92C", Offset = "0xA9B92C", VA = "0xA9B92C")]
	public string GetHumanNameMatch(string blendShapeName)
	{
		return null;
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xA9B700", Offset = "0xA9B700", VA = "0xA9B700")]
	public bool MatchThisBlendshape(string blendShapeName)
	{
		return default(bool);
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xA9B3E0", Offset = "0xA9B3E0", VA = "0xA9B3E0")]
	public bool DisplayThisBlendshape(string blendShapeName)
	{
		return default(bool);
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xA9BB40", Offset = "0xA9BB40", VA = "0xA9BB40")]
	public void ReloadBlendShapes()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xA9BFB4", Offset = "0xA9BFB4", VA = "0xA9BFB4")]
	public void AddMatchToNamedShape(string humanName, string matchName, int matchObjectID, int matchShapeID)
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xA9C484", Offset = "0xA9C484", VA = "0xA9C484")]
	public void FindMatches(string name, int id, int shapeID, int objectID)
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xA9C610", Offset = "0xA9C610", VA = "0xA9C610")]
	public void CheckMatch(int matchObjectID, Mesh newMesh, SkinnedMeshRenderer newRenderer, string matchName, int shapeID, int objectID)
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xA9CA94", Offset = "0xA9CA94", VA = "0xA9CA94")]
	public void SFB_BS_ExportPreset()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xA9D060", Offset = "0xA9D060", VA = "0xA9D060")]
	public void SFB_BS_ExportRanges()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xA9D544", Offset = "0xA9D544", VA = "0xA9D544")]
	public void SFB_BS_LoadRanges(TextAsset presetFile)
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xA9DAB0", Offset = "0xA9DAB0", VA = "0xA9DAB0")]
	public void SFB_BS_ImportPresetFile(TextAsset presetFile)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xA9D7F0", Offset = "0xA9D7F0", VA = "0xA9D7F0")]
	public int GetBlendShapeObjectIndex(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xA9D910", Offset = "0xA9D910", VA = "0xA9D910")]
	public int GetBlendShapesIndex(int objectIndex, string name)
	{
		return default(int);
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xA9DDF4", Offset = "0xA9DDF4", VA = "0xA9DDF4")]
	public void GetBlendShapesIndex(string objectName, string name)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xA9DE24", Offset = "0xA9DE24", VA = "0xA9DE24")]
	public void SFB_BS_ResetAll()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xA9E0C8", Offset = "0xA9E0C8", VA = "0xA9E0C8")]
	public void ResetAllObjects(SFB_BlendShapeObject bsObject)
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xA9E278", Offset = "0xA9E278", VA = "0xA9E278")]
	public int GetObjectID(SFB_BlendShapeObject blendShapeObject)
	{
		return default(int);
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xA9CF68", Offset = "0xA9CF68", VA = "0xA9CF68")]
	public int SFB_BS_GetNewFileNumber(string path, string fileName)
	{
		return default(int);
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xA9E3E0", Offset = "0xA9E3E0", VA = "0xA9E3E0")]
	public void SFB_BS_RemovePreset(int presetID)
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xA9E444", Offset = "0xA9E444", VA = "0xA9E444")]
	public SFB_BlendShapesManager()
	{
	}
}
[Token(Token = "0x200016A")]
public class SFB_CameraRotate_v2 : MonoBehaviour
{
	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float targetOffset;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float mouseSpeed;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private UnityEngine.Vector2 lastMousePosition;

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xA9E61C", Offset = "0xA9E61C", VA = "0xA9E61C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xA9E738", Offset = "0xA9E738", VA = "0xA9E738")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xA9E854", Offset = "0xA9E854", VA = "0xA9E854")]
	public void SetSpeed(float newValue)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xA9E85C", Offset = "0xA9E85C", VA = "0xA9E85C")]
	public SFB_CameraRotate_v2()
	{
	}
}
[Token(Token = "0x200016B")]
public class SFB_DemoControl_v2 : MonoBehaviour
{
	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cameraObject;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float mouseSensitivityY;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float mouseSensitivityX;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2 lastMousePosition;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Slider heightBar;

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xA9F0C0", Offset = "0xA9F0C0", VA = "0xA9F0C0")]
	public void SetCameraHeight(float newValue)
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xA9F158", Offset = "0xA9F158", VA = "0xA9F158")]
	public void SetTimescale(float newValue)
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xA9F160", Offset = "0xA9F160", VA = "0xA9F160")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xA9F210", Offset = "0xA9F210", VA = "0xA9F210")]
	public SFB_DemoControl_v2()
	{
	}
}
[Token(Token = "0x200016C")]
public class SFB_HumanDemoControl : MonoBehaviour
{
	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator[] animators;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform cameraFollow;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform male;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform female;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] maleBody;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material[] maleHead;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material[] femaleBody;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material[] femaleHead;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SkinnedMeshRenderer maleRenderer;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SkinnedMeshRenderer femaleRenderer;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color[] hairColors;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material hairShader;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int hairColor;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int wardrobeIndex;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Button[] hairButtonsMale;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Button[] hairButtonsFemale;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<DemoWardrobe> wardrobe;

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xAA08F4", Offset = "0xAA08F4", VA = "0xAA08F4")]
	public void Update()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xAA0A18", Offset = "0xAA0A18", VA = "0xAA0A18")]
	public void SetRightHandWeight(float newValue)
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xAA0A98", Offset = "0xAA0A98", VA = "0xAA0A98")]
	public void SetLeftHandWeight(float newValue)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xAA0B18", Offset = "0xAA0B18", VA = "0xAA0B18")]
	public void SetLocomotion(float newValue)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xAA0BC8", Offset = "0xAA0BC8", VA = "0xAA0BC8")]
	public void TriggerAnimation(string newTrigger)
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xAA0C44", Offset = "0xAA0C44", VA = "0xAA0C44")]
	public void FollowMale()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xAA0CC4", Offset = "0xAA0CC4", VA = "0xAA0CC4")]
	public void FollowFemale()
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xAA0930", Offset = "0xAA0930", VA = "0xAA0930")]
	public void SuperRandom()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xAA11F4", Offset = "0xAA11F4", VA = "0xAA11F4")]
	public void UpdateHairStyleMale(int i)
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xAA1240", Offset = "0xAA1240", VA = "0xAA1240")]
	public void UpdateHairStyleFemale(int i)
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xAA0C4C", Offset = "0xAA0C4C", VA = "0xAA0C4C")]
	public void Follow(Transform target)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xAA128C", Offset = "0xAA128C", VA = "0xAA128C")]
	public void NextHair()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xAA1298", Offset = "0xAA1298", VA = "0xAA1298")]
	public void PrevHair()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xAA12A4", Offset = "0xAA12A4", VA = "0xAA12A4")]
	public void NextWardrobe()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xAA12B0", Offset = "0xAA12B0", VA = "0xAA12B0")]
	public void PrevWardrobe()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xAA1040", Offset = "0xAA1040", VA = "0xAA1040")]
	public void UpdateWardrobe(int i)
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xAA0EAC", Offset = "0xAA0EAC", VA = "0xAA0EAC")]
	public void UpdateHairColor(int i)
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xAA0CCC", Offset = "0xAA0CCC", VA = "0xAA0CCC")]
	public void UpdateBodyTextures(int i = 0)
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xAA12BC", Offset = "0xAA12BC", VA = "0xAA12BC")]
	public SFB_HumanDemoControl()
	{
	}
}
[Token(Token = "0x200016D")]
public class SFB_HumanDemoModel : MonoBehaviour
{
	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject daggerBody;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject daggerLeftHand;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject daggerRightHand;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject particleGeneric1;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject positionGeneric1;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] particlesGeneric2;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] lightsGeneric2;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] particlesGeneric3;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject[] lightsGeneric3;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject particleBarbarian1;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject positionBarbarian1;

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xAA1340", Offset = "0xAA1340", VA = "0xAA1340")]
	public void TakeDaggerOut(string hand)
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xAA143C", Offset = "0xAA143C", VA = "0xAA143C")]
	public void PutBackDagger(string hand)
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xAA1494", Offset = "0xAA1494", VA = "0xAA1494")]
	public void StartCastGeneric1()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xAA14EC", Offset = "0xAA14EC", VA = "0xAA14EC")]
	public void StopCastGeneric1()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xAA153C", Offset = "0xAA153C", VA = "0xAA153C")]
	public void CastGeneric1()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xAA1694", Offset = "0xAA1694", VA = "0xAA1694")]
	public void StartCastGeneric2()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xAA1784", Offset = "0xAA1784", VA = "0xAA1784")]
	public void StopCastGeneric2()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xAA1874", Offset = "0xAA1874", VA = "0xAA1874")]
	public void StartCastGeneric3()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xAA1964", Offset = "0xAA1964", VA = "0xAA1964")]
	public void StopCastGeneric3()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xAA1A54", Offset = "0xAA1A54", VA = "0xAA1A54")]
	public void StartCastBarbarian1()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xAA1AB0", Offset = "0xAA1AB0", VA = "0xAA1AB0")]
	public void StopCastBarbarian1()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xAA1B00", Offset = "0xAA1B00", VA = "0xAA1B00")]
	public void CastBarbarian1()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xAA1C58", Offset = "0xAA1C58", VA = "0xAA1C58")]
	public SFB_HumanDemoModel()
	{
	}
}
[Token(Token = "0x200016E")]
public class SFB_LightRandomHeight : MonoBehaviour
{
	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector2 heightRange;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light lightComp;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float lightMaxIntensity;

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xAA2184", Offset = "0xAA2184", VA = "0xAA2184")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xAA21D4", Offset = "0xAA21D4", VA = "0xAA21D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xAA22B0", Offset = "0xAA22B0", VA = "0xAA22B0")]
	public SFB_LightRandomHeight()
	{
	}
}
[Token(Token = "0x200016F")]
public class SFB_ShotFollowTarget : MonoBehaviour
{
	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float turnSpeed;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xAA2508", Offset = "0xAA2508", VA = "0xAA2508")]
	private void Start()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xAA25B0", Offset = "0xAA25B0", VA = "0xAA25B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xAA2734", Offset = "0xAA2734", VA = "0xAA2734")]
	public SFB_ShotFollowTarget()
	{
	}
}
[Token(Token = "0x2000170")]
public class SFB_StayWithTarget : MonoBehaviour
{
	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xAA2748", Offset = "0xAA2748", VA = "0xAA2748")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xAA27A0", Offset = "0xAA27A0", VA = "0xAA27A0")]
	public SFB_StayWithTarget()
	{
	}
}
[Token(Token = "0x2000171")]
public class SFB_ToggleOpposite : MonoBehaviour
{
	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objectToWatch;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject objectToSwitch;

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xAA27A8", Offset = "0xAA27A8", VA = "0xAA27A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xAA27AC", Offset = "0xAA27AC", VA = "0xAA27AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xAA27F4", Offset = "0xAA27F4", VA = "0xAA27F4")]
	public SFB_ToggleOpposite()
	{
	}
}
[Token(Token = "0x2000172")]
public class SFB_TurnOffIfOn : MonoBehaviour
{
	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objectToWatch;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject objectToSwitch;

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xAA27FC", Offset = "0xAA27FC", VA = "0xAA27FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xAA2800", Offset = "0xAA2800", VA = "0xAA2800")]
	private void Update()
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xAA2850", Offset = "0xAA2850", VA = "0xAA2850")]
	public SFB_TurnOffIfOn()
	{
	}
}
[Token(Token = "0x2000173")]
public class SFB_DemoGargoyle : MonoBehaviour
{
	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform ballPoint;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform beamPoint;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ballPrefab;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject beamPrefab;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ballSpell;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject beamSpell;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject flightSpell;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Vector3 flightSpellOffset;

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xA9F224", Offset = "0xA9F224", VA = "0xA9F224")]
	private void Start()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xA9F280", Offset = "0xA9F280", VA = "0xA9F280")]
	public void Locomotion(float newValue)
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xA9F2E8", Offset = "0xA9F2E8", VA = "0xA9F2E8")]
	public void PrecastStart()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xA9F424", Offset = "0xA9F424", VA = "0xA9F424")]
	public void CastStart()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xA9F550", Offset = "0xA9F550", VA = "0xA9F550")]
	public void CastEnd()
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xA9FA44", Offset = "0xA9FA44", VA = "0xA9FA44")]
	public void FlightCast()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xA9FBCC", Offset = "0xA9FBCC", VA = "0xA9FBCC")]
	public SFB_DemoGargoyle()
	{
	}
}
[Token(Token = "0x2000174")]
public class SFB_LightAutoOff : MonoBehaviour
{
	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fadeLimit;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadePassed;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeSpeed;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xAA1C60", Offset = "0xAA1C60", VA = "0xAA1C60")]
	private void Update()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xAA1CB8", Offset = "0xAA1CB8", VA = "0xAA1CB8")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xAA1DDC", Offset = "0xAA1DDC", VA = "0xAA1DDC")]
	public SFB_LightAutoOff()
	{
	}
}
[Token(Token = "0x2000175")]
public class SFB_LightAutoOn : MonoBehaviour
{
	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fadeLimit;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadePassed;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeSpeed;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxIntensity;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool done;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxTime;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float timePassed;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xAA1DF0", Offset = "0xAA1DF0", VA = "0xAA1DF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xAA1E8C", Offset = "0xAA1E8C", VA = "0xAA1E8C")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xAA1F6C", Offset = "0xAA1F6C", VA = "0xAA1F6C")]
	public SFB_LightAutoOn()
	{
	}
}
[Token(Token = "0x2000176")]
public class SFB_LightColorChange : MonoBehaviour
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color[] colors;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minTime;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxTime;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float curTime;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color curColor;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool everyFrame;

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xAA1F88", Offset = "0xAA1F88", VA = "0xAA1F88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xAA2098", Offset = "0xAA2098", VA = "0xAA2098")]
	public SFB_LightColorChange()
	{
	}
}
[Token(Token = "0x2000177")]
public class SFB_LightFlicker : MonoBehaviour
{
	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float flickerMin;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float flickerMax;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float flickerCount;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float intensityMin;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float intensityMax;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xAA20AC", Offset = "0xAA20AC", VA = "0xAA20AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xAA2164", Offset = "0xAA2164", VA = "0xAA2164")]
	public SFB_LightFlicker()
	{
	}
}
[Token(Token = "0x2000178")]
public class SFB_MoveOverTime : MonoBehaviour
{
	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 travelDirection;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delay;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool isMoving;

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xAA22CC", Offset = "0xAA22CC", VA = "0xAA22CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xAA2320", Offset = "0xAA2320", VA = "0xAA2320")]
	public void StartMoving()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xAA232C", Offset = "0xAA232C", VA = "0xAA232C")]
	private void Update()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xAA23C8", Offset = "0xAA23C8", VA = "0xAA23C8")]
	public SFB_MoveOverTime()
	{
	}
}
[Token(Token = "0x2000179")]
public class SFB_ParticleGrowOverTime : MonoBehaviour
{
	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 growth;

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xAA23D8", Offset = "0xAA23D8", VA = "0xAA23D8")]
	private void Update()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xAA2464", Offset = "0xAA2464", VA = "0xAA2464")]
	public SFB_ParticleGrowOverTime()
	{
	}
}
[Token(Token = "0x200017A")]
public class SFB_ParticleTrailRotation : MonoBehaviour
{
	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 rotationSpeed;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool local;

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xAA246C", Offset = "0xAA246C", VA = "0xAA246C")]
	private void Update()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xAA24F8", Offset = "0xAA24F8", VA = "0xAA24F8")]
	public SFB_ParticleTrailRotation()
	{
	}
}
[Token(Token = "0x200017B")]
public class SFB_DemoSerpentWarrior : MonoBehaviour
{
	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftHandSpawnPos;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightHandSpawnPos;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform dustSpot;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject rightHandParticle;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject leftHandParticle;

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xA9FBD4", Offset = "0xA9FBD4", VA = "0xA9FBD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xA9FC30", Offset = "0xA9FC30", VA = "0xA9FC30")]
	public void Locomotion(float newValue)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xA9FC98", Offset = "0xA9FC98", VA = "0xA9FC98")]
	public void RightHandCast()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xA9FE0C", Offset = "0xA9FE0C", VA = "0xA9FE0C")]
	public void LeftHandCast()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xA9FF98", Offset = "0xA9FF98", VA = "0xA9FF98")]
	public SFB_DemoSerpentWarrior()
	{
	}
}
[Token(Token = "0x200017C")]
public class SFB_DemoWeeper : MonoBehaviour
{
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B7A8", Offset = "0x50B7A8")]
	private sealed class <Explode>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SFB_DemoWeeper <>4__this;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject obj;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000664")]
			[Address(RVA = "0xA43328", Offset = "0xA43328", VA = "0xA43328", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000666")]
			[Address(RVA = "0xA43370", Offset = "0xA43370", VA = "0xA43370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xA4315C", Offset = "0xA4315C", VA = "0xA4315C")]
		[DebuggerHidden]
		public <Explode>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xA43188", Offset = "0xA43188", VA = "0xA43188", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xA4318C", Offset = "0xA4318C", VA = "0xA4318C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xA43330", Offset = "0xA43330", VA = "0xA43330", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject spell1;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] spell2;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject spell3;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] spell4;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float cast1SpawnSpeed;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject weeperExplosion;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform spell1Pos;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform spell3Pos;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject latestSpell1;

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xA9FFA0", Offset = "0xA9FFA0", VA = "0xA9FFA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xA9FFFC", Offset = "0xA9FFFC", VA = "0xA9FFFC")]
	public void Locomotion(float newValue)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xAA0064", Offset = "0xAA0064", VA = "0xAA0064")]
	public void CastSpell1()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xAA027C", Offset = "0xAA027C", VA = "0xAA027C")]
	public void CastSpell3()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xAA0378", Offset = "0xAA0378", VA = "0xAA0378")]
	public void StartCast1()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xAA03D0", Offset = "0xAA03D0", VA = "0xAA03D0")]
	public void EndCast1()
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xAA01D8", Offset = "0xAA01D8", VA = "0xAA01D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5151E0", Offset = "0x5151E0")]
	private IEnumerator Explode(GameObject obj, float delay)
	{
		return null;
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xAA0420", Offset = "0xAA0420", VA = "0xAA0420")]
	public void StartCast4()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xAA0550", Offset = "0xAA0550", VA = "0xAA0550")]
	public void StopCast4()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xAA0680", Offset = "0xAA0680", VA = "0xAA0680")]
	public void StartCast2()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xAA07B0", Offset = "0xAA07B0", VA = "0xAA07B0")]
	public void StopCast2()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xAA08E0", Offset = "0xAA08E0", VA = "0xAA08E0")]
	public SFB_DemoWeeper()
	{
	}
}
[Token(Token = "0x200017E")]
public class MenuSceneLoader : MonoBehaviour
{
	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject menuUI;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject m_Go;

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xC2B0B8", Offset = "0xC2B0B8", VA = "0xC2B0B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xC2B190", Offset = "0xC2B190", VA = "0xC2B190")]
	public MenuSceneLoader()
	{
	}
}
[Token(Token = "0x200017F")]
public class PauseMenu : MonoBehaviour
{
	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Toggle m_MenuToggle;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_TimeScaleRef;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_VolumeRef;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_Paused;

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x998778", Offset = "0x998778", VA = "0x998778")]
	private void Awake()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x9987D4", Offset = "0x9987D4", VA = "0x9987D4")]
	private void MenuOn()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x998828", Offset = "0x998828", VA = "0x998828")]
	public void MenuOff()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x998860", Offset = "0x998860", VA = "0x998860")]
	public void OnMenuStatusChange()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x9988C8", Offset = "0x9988C8", VA = "0x9988C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x998930", Offset = "0x998930", VA = "0x998930")]
	public PauseMenu()
	{
	}
}
[Token(Token = "0x2000180")]
public class SceneAndURLLoader : MonoBehaviour
{
	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PauseMenu m_PauseMenu;

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xAA3D64", Offset = "0xAA3D64", VA = "0xAA3D64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xAA3DC0", Offset = "0xAA3DC0", VA = "0xAA3DC0")]
	public void SceneLoad(string sceneName)
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xAA3E44", Offset = "0xAA3E44", VA = "0xAA3E44")]
	public void LoadURL(string url)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xAA3E50", Offset = "0xAA3E50", VA = "0xAA3E50")]
	public SceneAndURLLoader()
	{
	}
}
[Token(Token = "0x2000181")]
public class CameraSwitch : MonoBehaviour
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objects;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text text;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_CurrentActiveObject;

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x8E1858", Offset = "0x8E1858", VA = "0x8E1858")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x8E18CC", Offset = "0x8E18CC", VA = "0x8E18CC")]
	public void NextCamera()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x8E19A4", Offset = "0x8E19A4", VA = "0x8E19A4")]
	public CameraSwitch()
	{
	}
}
[Token(Token = "0x2000182")]
public class LevelReset : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
{
	[Token(Token = "0x6000676")]
	[Address(RVA = "0x9E28C0", Offset = "0x9E28C0", VA = "0x9E28C0", Slot = "4")]
	public void OnPointerClick(PointerEventData data)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x9E2940", Offset = "0x9E2940", VA = "0x9E2940")]
	private void Update()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x9E2944", Offset = "0x9E2944", VA = "0x9E2944")]
	public LevelReset()
	{
	}
}
[Token(Token = "0x2000183")]
public class ShopSaveData : MonoBehaviour
{
	[Token(Token = "0x6000679")]
	[Address(RVA = "0xAA5984", Offset = "0xAA5984", VA = "0xAA5984")]
	private void Start()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xAA59D0", Offset = "0xAA59D0", VA = "0xAA59D0")]
	public ShopSaveData()
	{
	}
}
[Token(Token = "0x2000184")]
public class SimpleLODClickObject : MonoBehaviour
{
	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light emphasisLight;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool sendNullInstead;

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x7E773C", Offset = "0x7E773C", VA = "0x7E773C")]
	private void Start()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x7E77D0", Offset = "0x7E77D0", VA = "0x7E77D0")]
	private void OnMouseEnter()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x7E7864", Offset = "0x7E7864", VA = "0x7E7864")]
	private void OnMouseExit()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x7E78F8", Offset = "0x7E78F8", VA = "0x7E78F8")]
	private void OnMouseUpAsButton()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x7E7B5C", Offset = "0x7E7B5C", VA = "0x7E7B5C")]
	public SimpleLODClickObject()
	{
	}
}
[Token(Token = "0x2000185")]
public class SimpleLODDemo : MonoBehaviour
{
	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] scenes;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string[] sceneStrings;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentScene;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int lodSetting;

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x7E7B64", Offset = "0x7E7B64", VA = "0x7E7B64")]
	private void Start()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x7E7BFC", Offset = "0x7E7BFC", VA = "0x7E7BFC")]
	private void SetScene(int aScene)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x7E7E2C", Offset = "0x7E7E2C", VA = "0x7E7E2C")]
	private void SetLOD(int aLod)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x7E7F18", Offset = "0x7E7F18", VA = "0x7E7F18")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x7E8334", Offset = "0x7E8334", VA = "0x7E8334")]
	public SimpleLODDemo()
	{
	}
}
[Token(Token = "0x2000186")]
public class SimpleLODDemoCamera : MonoBehaviour
{
	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scrollSpeed;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityX;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float sensitivityY;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minimumY;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maximumY;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float manualRotationAcceleration;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 startPosition;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3 targetPosition;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentScene;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject clickedObject;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int totTriangles;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int totSubMeshes;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int frameCount;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float frameTotTime;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float fps;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float displayFPS;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int lodLevel;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float rotationX;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float rotationY;

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x7E84B4", Offset = "0x7E84B4", VA = "0x7E84B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x7E7D00", Offset = "0x7E7D00", VA = "0x7E7D00")]
	public void SetCurrentScene(GameObject aGO)
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x7E799C", Offset = "0x7E799C", VA = "0x7E799C")]
	public void SetClickedObject(GameObject aGO)
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x7E8538", Offset = "0x7E8538", VA = "0x7E8538")]
	private void GetStats()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x7E8720", Offset = "0x7E8720", VA = "0x7E8720")]
	private void Update()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x7E8B2C", Offset = "0x7E8B2C", VA = "0x7E8B2C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x7E8E58", Offset = "0x7E8E58", VA = "0x7E8E58")]
	public SimpleLODDemoCamera()
	{
	}
}
[Token(Token = "0x2000187")]
public class SimpleLODShowInfo : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LODSwitcher lodSwitcher;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float offsetY;

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x7E8E98", Offset = "0x7E8E98", VA = "0x7E8E98")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x7E90CC", Offset = "0x7E90CC", VA = "0x7E90CC")]
	public SimpleLODShowInfo()
	{
	}
}
[Token(Token = "0x2000188")]
public class SimpleLODTredMill : MonoBehaviour
{
	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 startPosition;

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x7E90DC", Offset = "0x7E90DC", VA = "0x7E90DC")]
	private void Start()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x7E9118", Offset = "0x7E9118", VA = "0x7E9118")]
	private void Update()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x7E91B4", Offset = "0x7E91B4", VA = "0x7E91B4")]
	public SimpleLODTredMill()
	{
	}
}
[Token(Token = "0x2000189")]
public static class LODMaker
{
	[Token(Token = "0x6000691")]
	[Address(RVA = "0xCEED04", Offset = "0xCEED04", VA = "0xCEED04")]
	public static Mesh MakeLODMesh(Mesh orig, float aMaxWeight, bool recalcNormals = true, float removeSmallParts = 1f, bool reuseOldMesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xCEED20", Offset = "0xCEED20", VA = "0xCEED20")]
	public static Mesh MakeLODMesh(Mesh orig, float aMaxWeight, float removeSmallParts, float protectNormals, float protectUvs, float smallTrianglesFirst, float protectSubMeshesAndSharpEdges, bool recalcNormals, bool reuseOldMesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xCEEEA4", Offset = "0xCEEEA4", VA = "0xCEEEA4")]
	private static void GetWeights(float aMaxWeight, float removeSmallParts, float protectNormals, float protectUvs, float smallTrianglesFirst, float protectSubMeshesAndSharpEdges, out float sideLengthWeight, out float oldAngleWeight, out float newAngleWeight, out float uvWeight, out float areaDiffWeight, out float normalWeight, out float vertexWeight, out float centerDistanceWeight)
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xCEFC28", Offset = "0xCEFC28", VA = "0xCEFC28")]
	public static void MakeLODMeshInBackground(object data)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xCEEF48", Offset = "0xCEEF48", VA = "0xCEEF48")]
	private static Mesh MakeLODMesh(Mesh orig, float maxWeight, float removeSmallParts, float sideLengthWeight, float oldAngleWeight, float newAngleWeight, float uvWeight, float areaDiffWeight, float normalWeight, float vertexWeight, float centerDistanceWeight, bool recalcNormals, bool reuseOldMesh)
	{
		return null;
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xCF10C4", Offset = "0xCF10C4", VA = "0xCF10C4")]
	private static void MakeLODMesh(UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, UnityEngine.Vector2[] uv1s, UnityEngine.Vector2[] uv2s, UnityEngine.Vector2[] uv3s, UnityEngine.Vector2[] uv4s, Color32[] colors32, int[] ts, ref Matrix4x4[] bindposes, BoneWeight[] bws, ref int[] subMeshOffsets, Bounds meshBounds, float maxWeight, float removeSmallParts, float sideLengthWeight, float oldAngleWeight, float newAngleWeight, float uvWeight, float areaDiffWeight, float normalWeight, float vertexWeight, float centerDistanceWeight, out List<UnityEngine.Vector3> newVs, out List<UnityEngine.Vector3> newNs, out List<UnityEngine.Vector2> newUv1s, out List<UnityEngine.Vector2> newUv2s, out List<UnityEngine.Vector2> newUv3s, out List<UnityEngine.Vector2> newUv4s, out List<Color32> newColors32, out List<int> newTs, out List<BoneWeight> newBws)
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xCF4D64", Offset = "0xCF4D64", VA = "0xCF4D64")]
	private static bool AnyWeightOK(float[] weights, float aMaxWeight)
	{
		return default(bool);
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xCF4604", Offset = "0xCF4604", VA = "0xCF4604")]
	private static int[] GetAdjacentTriangles(int[] ts, int tIdx, List<List<int>> trianglesPerVertex, int[] uniqueVs, int[] triangleGroups, List<List<int>> trianglesPerGroup)
	{
		return null;
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xCF80B4", Offset = "0xCF80B4", VA = "0xCF80B4")]
	private static void SetTriangleGroup(int tIdx0, int tIdx1, int[] triangleGroups, List<List<int>> trianglesPerGroup)
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xCF4DC0", Offset = "0xCF4DC0", VA = "0xCF4DC0")]
	private static void GetTotalAngleAndCenterDistanceForCorner(int[] ts, UnityEngine.Vector3[] vs, int[] movedVs, int vertexIdx, UnityEngine.Vector3[] centerDistances, ref float totalAngle, ref UnityEngine.Vector3 totalCenterDist)
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xCF52CC", Offset = "0xCF52CC", VA = "0xCF52CC")]
	private static void GetTotalAngleAndCenterDistanceForNewCorner(int[] ts, UnityEngine.Vector3[] vs, int[] movedVs, int[] uniqueVs, int vertexIdx, int newIdx, UnityEngine.Vector3[] centerDistances, float maxWeight, ref float totalAngle, ref UnityEngine.Vector3 totalCenterDist, ref bool flipsTriangles)
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xCF59A0", Offset = "0xCF59A0", VA = "0xCF59A0")]
	private static void GetUVStretchAndAreaForCorner(int[] ts, UnityEngine.Vector3[] vs, int[] movedVs, int[] uniqueVs, UnityEngine.Vector2[] uvs, int cFrom, int cTo, ref float affectedUvAreaDiff, ref float affectedAreaDiff, ref float totalUvAreaDiff, ref float totalAreaDiff)
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xCF458C", Offset = "0xCF458C", VA = "0xCF458C")]
	private static float GetNormalDiffForCorners(UnityEngine.Vector3[] ns, int corner1, int corner2)
	{
		return default(float);
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xCF60A8", Offset = "0xCF60A8", VA = "0xCF60A8")]
	private static void MergeVertices(ref int oldV, int newV, bool[] hasTwinVS, UnityEngine.Vector3[] vs, int[] triangles, UnityEngine.Vector2[] uv1s, UnityEngine.Vector2[] uv2s, UnityEngine.Vector2[] uv3s, UnityEngine.Vector2[] uv4s, Color32[] colors32, bool[] deletedVertices, int[] movedVs, int[] uniqueVs, int[] movedUv1s, int[] movedUv2s, int[] movedUv3s, int[] movedUv4s, int[] movedColors, List<List<int>> trianglesPerVertex, bool logYN)
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xCF8498", Offset = "0xCF8498", VA = "0xCF8498")]
	private static void MoveVertex(int oldV, int newV, int[] movedVs, int[] uniqueVs, int[] movedUv1s, int[] movedUv2s, int[] movedUv3s, int[] movedUv4s, int[] movedColors)
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xCF6478", Offset = "0xCF6478", VA = "0xCF6478")]
	private static void FillNewMeshArray(UnityEngine.Vector3[] vs, bool[] vdel, int[] movedVs, UnityEngine.Vector3[] ns, UnityEngine.Vector2[] uv1s, int[] movedUv1s, UnityEngine.Vector2[] uv2s, int[] movedUv2s, UnityEngine.Vector2[] uv3s, int[] movedUv3s, UnityEngine.Vector2[] uv4s, int[] movedUv4s, Color32[] colors32, int[] movedColors, BoneWeight[] bws, List<UnityEngine.Vector3> newVs, List<UnityEngine.Vector3> newNs, List<UnityEngine.Vector2> newUv1s, List<UnityEngine.Vector2> newUv2s, List<UnityEngine.Vector2> newUv3s, List<UnityEngine.Vector2> newUv4s, List<Color32> newColors32, List<BoneWeight> newBws, int[] o2n)
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xCF6B30", Offset = "0xCF6B30", VA = "0xCF6B30")]
	private static void FillNewMeshTriangles(int[] oldTriangles, int[] o2n, List<int> newTriangles, int[] subMeshOffsets, int[] triangleGroups, List<int> newTGrps)
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xCF7B90", Offset = "0xCF7B90", VA = "0xCF7B90")]
	public static void RemoveUnusedVertices(List<UnityEngine.Vector3> vs, List<UnityEngine.Vector3> ns, List<UnityEngine.Vector2> uv1s, List<UnityEngine.Vector2> uv2s, List<UnityEngine.Vector2> uv3s, List<UnityEngine.Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, List<int> ts)
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xCF862C", Offset = "0xCF862C", VA = "0xCF862C")]
	public static void RemoveUnusedVertices(List<UnityEngine.Vector3> vs, List<UnityEngine.Vector3> ns, List<UnityEngine.Vector2> uv1s, List<UnityEngine.Vector2> uv2s, List<UnityEngine.Vector2> uv3s, List<UnityEngine.Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, List<List<int>> subMeshes)
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xCF8CEC", Offset = "0xCF8CEC", VA = "0xCF8CEC")]
	public static void RemoveUnusedVertices(List<UnityEngine.Vector3> vs, List<UnityEngine.Vector3> ns, List<UnityEngine.Vector2> uv1s, List<UnityEngine.Vector2> uv2s, List<UnityEngine.Vector2> uv3s, List<UnityEngine.Vector2> uv4s, List<Color32> colors32, List<BoneWeight> bws, Dictionary<Material, List<int>> subMeshes)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xCF6DC8", Offset = "0xCF6DC8", VA = "0xCF6DC8")]
	private static void RemoveEmptyTriangles(List<UnityEngine.Vector3> newVs, List<UnityEngine.Vector3> newNs, List<UnityEngine.Vector2> newUv1s, List<UnityEngine.Vector2> newUv2s, List<UnityEngine.Vector2> newUv3s, List<UnityEngine.Vector2> newUv4s, List<Color32> newColors32, List<int> newTs, List<BoneWeight> newBws, int[] subMeshOffsets, List<int> newTGrps)
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xCF751C", Offset = "0xCF751C", VA = "0xCF751C")]
	private static void RemoveMiniTriangleGroups(float removeSmallParts, UnityEngine.Vector3 sizeMultiplier, float aMaxWeight, List<UnityEngine.Vector3> newVs, List<int> newTs, int[] subMeshOffsets, List<int> newTGrps)
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xCF3FF4", Offset = "0xCF3FF4", VA = "0xCF3FF4")]
	public static Mesh CreateNewMesh(UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, UnityEngine.Vector2[] uv1s, UnityEngine.Vector2[] uv2s, UnityEngine.Vector2[] uv3s, UnityEngine.Vector2[] uv4s, Color32[] colors32, int[] ts, BoneWeight[] bws, Matrix4x4[] bindposes, int[] subMeshOffsets, bool recalcNormals)
	{
		return null;
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xCF3CFC", Offset = "0xCF3CFC", VA = "0xCF3CFC")]
	public static void FillMesh(Mesh mesh, UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, UnityEngine.Vector2[] uv1s, UnityEngine.Vector2[] uv2s, UnityEngine.Vector2[] uv3s, UnityEngine.Vector2[] uv4s, Color32[] colors32, int[] ts, BoneWeight[] bws, Matrix4x4[] bindposes, int[] subMeshOffsets, bool recalcNormals)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xCF58D8", Offset = "0xCF58D8", VA = "0xCF58D8")]
	private static float AngleCornerDiff(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xCF5954", Offset = "0xCF5954", VA = "0xCF5954")]
	private static float AngleDiff(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xCF44AC", Offset = "0xCF44AC", VA = "0xCF44AC")]
	private static float Area(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
	{
		return default(float);
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xCF9568", Offset = "0xCF9568", VA = "0xCF9568")]
	private static int GetVertexEqualTo(UnityEngine.Vector3 v, List<int> orderedVertices, UnityEngine.Vector3[] vs)
	{
		return default(int);
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xCF4308", Offset = "0xCF4308", VA = "0xCF4308")]
	private static List<int> GetVerticesEqualTo(UnityEngine.Vector3 v, List<int> orderedVertices, UnityEngine.Vector3[] vs)
	{
		return null;
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xCF97B4", Offset = "0xCF97B4", VA = "0xCF97B4")]
	private static List<int> GetVerticesWithinBox(UnityEngine.Vector3 from, UnityEngine.Vector3 to, List<int> orderedVertices, UnityEngine.Vector3[] vs)
	{
		return null;
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xCF40CC", Offset = "0xCF40CC", VA = "0xCF40CC")]
	private static int GetLastVertexWithYSmaller(float y, List<int> orderedVertices, UnityEngine.Vector3[] vs, int limitSearchRange)
	{
		return default(int);
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xCF9A78", Offset = "0xCF9A78", VA = "0xCF9A78")]
	private static bool IsVertexObscured(UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, int[] ts, bool[] vObscured, int[] uniqueVs, UnityEngine.Vector3 vertexBoxSize, List<int> orderedVertices, List<List<int>> trianglesPerVertex, int[] subMeshIdxPerVertex, float maxObscureDist, bool hiddenByOtherSubmesh, UnityEngine.Vector3 vertex, UnityEngine.Vector3 normal, int i)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xCFA044", Offset = "0xCFA044", VA = "0xCFA044")]
	public static float FindCollision(UnityEngine.Vector3 fromPos, UnityEngine.Vector3 direction, UnityEngine.Vector3 pointOnPlane, UnityEngine.Vector3 normalPlane)
	{
		return default(float);
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xCF3BFC", Offset = "0xCF3BFC", VA = "0xCF3BFC")]
	private static void Log(string msg)
	{
	}
}
[Token(Token = "0x200018A")]
public class LODSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh[] lodMeshes;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] lodGameObjects;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] lodScreenSizes;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float deactivateAtDistance;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Camera customCamera;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshFilter meshFilter;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 centerOffset;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float pixelsPerMeter;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float objectSize;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int fixedLODLevel;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int lodLevel;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int frameOffset;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int frameInterval;

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x9DA230", Offset = "0x9DA230", VA = "0x9DA230")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x9DA710", Offset = "0x9DA710", VA = "0x9DA710")]
	public void ComputeDimensions()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x9DAC30", Offset = "0x9DAC30", VA = "0x9DAC30")]
	public void SetCustomCamera(Camera aCamera)
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x9DAC58", Offset = "0x9DAC58", VA = "0x9DAC58")]
	public void SetFixedLODLevel(int aLevel)
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x9DACBC", Offset = "0x9DACBC", VA = "0x9DACBC")]
	public void ReleaseFixedLODLevel()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x9DACC8", Offset = "0x9DACC8", VA = "0x9DACC8")]
	public int GetLODLevel()
	{
		return default(int);
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x9DACA4", Offset = "0x9DACA4", VA = "0x9DACA4")]
	public int MaxLODLevel()
	{
		return default(int);
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x9DACD0", Offset = "0x9DACD0", VA = "0x9DACD0")]
	public Mesh GetMesh(int aLevel)
	{
		return null;
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x9DAD10", Offset = "0x9DAD10", VA = "0x9DAD10")]
	public void SetMesh(Mesh aMesh, int aLevel)
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x9DAEC4", Offset = "0x9DAEC4", VA = "0x9DAEC4")]
	public void SetRelativeScreenSize(float aValue, int aLevel)
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x9DB024", Offset = "0x9DB024", VA = "0x9DB024")]
	private void Update()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x9DB06C", Offset = "0x9DB06C", VA = "0x9DB06C")]
	public UnityEngine.Vector3 NearestCameraPositionForLOD(int aLevel)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x9DB254", Offset = "0x9DB254", VA = "0x9DB254")]
	public float ScreenPortion()
	{
		return default(float);
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x9DAA78", Offset = "0x9DAA78", VA = "0x9DAA78")]
	private void ComputeLODLevel()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x9DAB34", Offset = "0x9DAB34", VA = "0x9DAB34")]
	private void GetMeshFilter()
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x9DA474", Offset = "0x9DA474", VA = "0x9DA474")]
	public void SetLODLevel(int newLodLevel)
	{
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x9DB3B0", Offset = "0x9DB3B0", VA = "0x9DB3B0")]
	public LODSwitcher()
	{
	}
}
[Token(Token = "0x200018B")]
public class StartText : MonoBehaviour
{
	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x7FBB0C", Offset = "0x7FBB0C", VA = "0x7FBB0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x7FBC08", Offset = "0x7FBC08", VA = "0x7FBC08")]
	public StartText()
	{
	}
}
[Token(Token = "0x200018C")]
public class TutorialFinished : MonoBehaviour
{
	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xBE4F68", Offset = "0xBE4F68", VA = "0xBE4F68")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xBE4FB4", Offset = "0xBE4FB4", VA = "0xBE4FB4")]
	public TutorialFinished()
	{
	}
}
[Token(Token = "0x200018D")]
public class VRCamera : MonoBehaviour
{
	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xBE691C", Offset = "0xBE691C", VA = "0xBE691C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xBE6920", Offset = "0xBE6920", VA = "0xBE6920")]
	private void Update()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xBE6924", Offset = "0xBE6924", VA = "0xBE6924")]
	public VRCamera()
	{
	}
}
[Token(Token = "0x200018E")]
public class VRSettingsSetup : MonoBehaviour
{
	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xBE692C", Offset = "0xBE692C", VA = "0xBE692C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xBE69F0", Offset = "0xBE69F0", VA = "0xBE69F0")]
	public VRSettingsSetup()
	{
	}
}
namespace Sigtrap.VrTunnellingPro
{
	[Token(Token = "0x200018F")]
	public class Tunnelling : TunnellingImageBase
	{
		[Token(Token = "0x17000073")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0xBDDB8C", Offset = "0xBDDB8C", VA = "0xBDDB8C", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xBDDB94", Offset = "0xBDDB94", VA = "0xBDDB94")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xBDE07C", Offset = "0xBDE07C", VA = "0xBDE07C")]
		public Tunnelling()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public abstract class TunnellingBase : MonoBehaviour
	{
		[Token(Token = "0x2000191")]
		public enum BackgroundMode
		{
			[Token(Token = "0x40007DB")]
			COLOR,
			[Token(Token = "0x40007DC")]
			SKYBOX,
			[Token(Token = "0x40007DD")]
			CAGE_COLOR,
			[Token(Token = "0x40007DE")]
			CAGE_SKYBOX,
			[Token(Token = "0x40007DF")]
			CAGE_ONLY,
			[Token(Token = "0x40007E0")]
			BLUR
		}

		[Token(Token = "0x2000192")]
		public enum MaskMode
		{
			[Token(Token = "0x40007E2")]
			OFF,
			[Token(Token = "0x40007E3")]
			MASK,
			[Token(Token = "0x40007E4")]
			WINDOW,
			[Token(Token = "0x40007E5")]
			PORTAL
		}

		[Token(Token = "0x2000193")]
		public enum MSAA
		{
			[Token(Token = "0x40007E7")]
			AUTO,
			[Token(Token = "0x40007E8")]
			OFF,
			[Token(Token = "0x40007E9")]
			X2,
			[Token(Token = "0x40007EA")]
			X4,
			[Token(Token = "0x40007EB")]
			X8
		}

		[Token(Token = "0x400077E")]
		public const string VRTP_VERSION = "1.2.1";

		[Token(Token = "0x400077F")]
		public const int VRTP_VERSION_MAJOR = 1;

		[Token(Token = "0x4000780")]
		public const int VRTP_VERSION_MINOR = 2;

		[Token(Token = "0x4000781")]
		public const int VRTP_VERSION_PATCH = 1;

		[Token(Token = "0x4000782")]
		public const string VRTP_VERSION_BETA = "";

		[Token(Token = "0x4000783")]
		public const string GLOBAL_PROP_FOGCOLOR = "_VRTP_Cage_FogColor";

		[Token(Token = "0x4000784")]
		public const string GLOBAL_PROP_FOGDENSITY = "_VRTP_Cage_FogDensity";

		[Token(Token = "0x4000785")]
		public const string GLOBAL_PROP_FOGPOWER = "_VRTP_Cage_FogPower";

		[Token(Token = "0x4000786")]
		public const string GLOBAL_PROP_FOGBLEND = "_VRTP_Cage_FogBlend";

		[Token(Token = "0x4000787")]
		protected const string PATH_SHADERS = "Hidden/VrTunnellingPro/";

		[Token(Token = "0x4000788")]
		protected const string PATH_MESHES = "Meshes/";

		[Token(Token = "0x4000789")]
		protected const string PATH_IRISMESH = "Iris";

		[Token(Token = "0x400078A")]
		protected const string PROP_OUTER = "_FxOuter";

		[Token(Token = "0x400078B")]
		protected const string PROP_INNER = "_FxInner";

		[Token(Token = "0x400078C")]
		protected const string PROP_COLOR = "_Color";

		[Token(Token = "0x400078D")]
		protected const string PROP_SKYBOX = "_Skybox";

		[Token(Token = "0x400078E")]
		protected const string PROP_EYEPRJ = "_EyeProjection";

		[Token(Token = "0x400078F")]
		protected const string PROP_EYEMAT = "_EyeToWorld";

		[Token(Token = "0x4000790")]
		protected const string KEYWORD_BKG = "TUNNEL_BKG";

		[Token(Token = "0x4000791")]
		protected const string KEYWORD_SKYBOX = "TUNNEL_SKYBOX";

		[Token(Token = "0x4000792")]
		protected const string KEYWORD_OVERLAY = "TUNNEL_OVERLAY";

		[Token(Token = "0x4000793")]
		public const float FEATHER_MAX = 0.5f;

		[Token(Token = "0x4000794")]
		public const float MOTION_STRENGTH_MAX = 2f;

		[Token(Token = "0x4000795")]
		public const float COUNTER_STRENGTH_MAX = 2f;

		[Token(Token = "0x4000796")]
		public const int FPSDIV_MAX = 60;

		[Token(Token = "0x4000797")]
		private const float COVERAGE_MIN = 0.65f;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _propFxInner;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected int _propFxOuter;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _propEyeProjection;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _propEyeToWorld;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int _globPropFogColor;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int _globPropFogDensity;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int _globPropFogPower;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int _globPropFogBlend;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Matrix4x4[] _eyeToWorld;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Matrix4x4[] _eyeProjection;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EAC8", Offset = "0x50EAC8")]
		public Transform motionTarget;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EB00", Offset = "0x50EB00")]
		public Color effectColor;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EB38", Offset = "0x50EB38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EB38", Offset = "0x50EB38")]
		public float effectCoverage;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EB8C", Offset = "0x50EB8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EB8C", Offset = "0x50EB8C")]
		public float effectFeather;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Cubemap effectSkybox;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool applyColorToBackground;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EBE0", Offset = "0x50EBE0")]
		public bool useAngularVelocity;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EC18", Offset = "0x50EC18")]
		public float angularVelocityStrength;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float angularVelocityMin;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float angularVelocityMax;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float angularVelocitySmoothing;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EC30", Offset = "0x50EC30")]
		public bool useAcceleration;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EC68", Offset = "0x50EC68")]
		public float accelerationStrength;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float accelerationMin;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float accelerationMax;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float accelerationSmoothing;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EC80", Offset = "0x50EC80")]
		public bool useVelocity;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50ECB8", Offset = "0x50ECB8")]
		public float velocityStrength;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float velocityMin;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float velocityMax;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float velocitySmoothing;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50ECD0", Offset = "0x50ECD0")]
		public Transform motionEffectTarget;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50ED08", Offset = "0x50ED08")]
		public bool useCounterMotion;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50ED40", Offset = "0x50ED40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50ED40", Offset = "0x50ED40")]
		public float counterRotationStrength;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50ED94", Offset = "0x50ED94")]
		public UnityEngine.Vector3 counterRotationPerAxis;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EDCC", Offset = "0x50EDCC")]
		public bool useArtificialTilt;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EE04", Offset = "0x50EE04")]
		public float tiltStrength;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EE3C", Offset = "0x50EE3C")]
		public UnityEngine.Vector2 tiltMaxAngles;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EE74", Offset = "0x50EE74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EE74", Offset = "0x50EE74")]
		public float tiltSmoothTime;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EEC8", Offset = "0x50EEC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EEC8", Offset = "0x50EEC8")]
		public int framerateDivision;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public bool divideTranslation;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		public bool divideRotation;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion _lastRot;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private UnityEngine.Vector3 _lastFwd;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private UnityEngine.Vector3 _lastPos;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float _lastSpeed;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private UnityEngine.Vector3 _lastVel;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Quaternion _cmRot;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float _avSmoothed;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float _avSlew;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _speedSmoothed;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _speedSlew;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float _accelSmoothed;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _accelSlew;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform _prevMotionEffectTarget;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _prevUseTilt;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private UnityEngine.Vector3 _tiltAccelSmoothed;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private UnityEngine.Vector3 _tiltAccelSlew;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Angle3 _tiltInit;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int _lastFpsDivision;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private UnityEngine.Vector3 _mfxTgtLocalPosInit;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Quaternion _mfxTgtLocalRotInit;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Camera _cam;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected bool _hasDrawnThisFrame;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private UnityEngine.Vector3 _fpsPosition;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion _fpsRotation;

		[Token(Token = "0x17000074")]
		public bool usingMotionEffectTarget
		{
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0xBDE228", Offset = "0xBDE228", VA = "0xBDE228")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xBDE248", Offset = "0xBDE248", VA = "0xBDE248", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xBDE3C8", Offset = "0xBDE3C8", VA = "0xBDE3C8", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xBDE438", Offset = "0xBDE438", VA = "0xBDE438")]
		protected void ApplyPresetBase(TunnellingPresetBase p)
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xBDE858", Offset = "0xBDE858", VA = "0xBDE858")]
		protected void FillMaskBuffer(CommandBuffer cb, List<Renderer> rs, Material m)
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xBDE3CC", Offset = "0xBDE3CC", VA = "0xBDE3CC")]
		protected void ResetMotion()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xBDEA28", Offset = "0xBDEA28", VA = "0xBDEA28", Slot = "6")]
		public virtual void ResetCounterMotion()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xBDEA78", Offset = "0xBDEA78", VA = "0xBDEA78")]
		private float RemapRadius(float radius)
		{
			return default(float);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xBDEA98", Offset = "0xBDEA98", VA = "0xBDEA98")]
		protected float CalculateMotion(float dT)
		{
			return default(float);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xBDF310", Offset = "0xBDF310", VA = "0xBDF310")]
		public static UnityEngine.Vector3 SmoothDampAngle(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 vel, float smoothTime, float maxSpeed, float dT)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xBDF410", Offset = "0xBDF410", VA = "0xBDF410", Slot = "7")]
		protected virtual void UpdateCounterMotion(UnityEngine.Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xBDF474", Offset = "0xBDF474", VA = "0xBDF474")]
		protected Quaternion GetCounterRotationDelta(Quaternion deltaRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xBDF510", Offset = "0xBDF510", VA = "0xBDF510")]
		protected void UpdateEyeMatrices()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xBDFA2C", Offset = "0xBDFA2C", VA = "0xBDFA2C", Slot = "8")]
		protected virtual void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xBDFA30", Offset = "0xBDFA30", VA = "0xBDFA30")]
		protected void ApplyEyeMatrices(Material m)
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xBDFA7C", Offset = "0xBDFA7C", VA = "0xBDFA7C")]
		protected TunnellingBase()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public struct Angle
	{
		[Token(Token = "0x2000195")]
		public enum AngleType
		{
			[Token(Token = "0x40007EE")]
			ANGLE,
			[Token(Token = "0x40007EF")]
			ACUTE,
			[Token(Token = "0x40007F0")]
			REFLEX
		}

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float _angle;

		[Token(Token = "0x17000075")]
		public float angle
		{
			[Token(Token = "0x60006E0")]
			[Address(RVA = "0x9B142C", Offset = "0x9B142C", VA = "0x9B142C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000076")]
		public float acute
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0x9B1434", Offset = "0x9B1434", VA = "0x9B1434")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000077")]
		public float reflex
		{
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0x9B14EC", Offset = "0x9B14EC", VA = "0x9B14EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x9B152C", Offset = "0x9B152C", VA = "0x9B152C")]
		public Angle(float a)
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x9B155C", Offset = "0x9B155C", VA = "0x9B155C")]
		public Angle(Angle a)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x9B158C", Offset = "0x9B158C", VA = "0x9B158C")]
		public float ToFloat(AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x9B1474", Offset = "0x9B1474", VA = "0x9B1474")]
		public static float ToAngle(float a, AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x9B1598", Offset = "0x9B1598", VA = "0x9B1598", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x9B1620", Offset = "0x9B1620", VA = "0x9B1620")]
		public static bool operator <(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x9B162C", Offset = "0x9B162C", VA = "0x9B162C")]
		public static bool operator >(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x9B1638", Offset = "0x9B1638", VA = "0x9B1638")]
		public static bool operator <=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x9B1644", Offset = "0x9B1644", VA = "0x9B1644")]
		public static bool operator >=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x9B1650", Offset = "0x9B1650", VA = "0x9B1650")]
		public static Angle operator +(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x9B1668", Offset = "0x9B1668", VA = "0x9B1668")]
		public static Angle operator -(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x9B1680", Offset = "0x9B1680", VA = "0x9B1680")]
		public static bool operator ==(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x9B168C", Offset = "0x9B168C", VA = "0x9B168C")]
		public static bool operator !=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x9B1698", Offset = "0x9B1698", VA = "0x9B1698", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x9B175C", Offset = "0x9B175C", VA = "0x9B175C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x9B1764", Offset = "0x9B1764", VA = "0x9B1764")]
		public static bool operator <(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x9B17A0", Offset = "0x9B17A0", VA = "0x9B17A0")]
		public static bool operator >(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x9B17DC", Offset = "0x9B17DC", VA = "0x9B17DC")]
		public static bool operator <=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x9B1818", Offset = "0x9B1818", VA = "0x9B1818")]
		public static bool operator >=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x9B1854", Offset = "0x9B1854", VA = "0x9B1854")]
		public static Angle operator +(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x9B1894", Offset = "0x9B1894", VA = "0x9B1894")]
		public static Angle operator -(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x9B18D4", Offset = "0x9B18D4", VA = "0x9B18D4")]
		public static Angle operator *(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x9B18EC", Offset = "0x9B18EC", VA = "0x9B18EC")]
		public static Angle operator /(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x9B1904", Offset = "0x9B1904", VA = "0x9B1904")]
		public static bool operator <(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x9B1928", Offset = "0x9B1928", VA = "0x9B1928")]
		public static bool operator >(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x9B194C", Offset = "0x9B194C", VA = "0x9B194C")]
		public static bool operator <=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x9B1970", Offset = "0x9B1970", VA = "0x9B1970")]
		public static bool operator >=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x9B1994", Offset = "0x9B1994", VA = "0x9B1994")]
		public static Angle operator +(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x9B19D0", Offset = "0x9B19D0", VA = "0x9B19D0")]
		public static Angle operator -(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x9B1A0C", Offset = "0x9B1A0C", VA = "0x9B1A0C")]
		public static implicit operator Angle(float f)
		{
			return default(Angle);
		}
	}
	[Token(Token = "0x2000196")]
	public struct Angle3
	{
		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Angle x;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Angle y;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Angle z;

		[Token(Token = "0x17000078")]
		public UnityEngine.Vector3 eulerAngles
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0x9B1A1C", Offset = "0x9B1A1C", VA = "0x9B1A1C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000079")]
		public UnityEngine.Vector3 eulerAcute
		{
			[Token(Token = "0x6000702")]
			[Address(RVA = "0x9B1A28", Offset = "0x9B1A28", VA = "0x9B1A28")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700007A")]
		public UnityEngine.Vector3 eulerReflex
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0x9B1AD8", Offset = "0x9B1AD8", VA = "0x9B1AD8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700007B")]
		public Angle angle
		{
			[Token(Token = "0x6000704")]
			[Address(RVA = "0x9B1B88", Offset = "0x9B1B88", VA = "0x9B1B88")]
			get
			{
				return default(Angle);
			}
		}

		[Token(Token = "0x1700007C")]
		public UnityEngine.Vector3 axis
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0x9B1C30", Offset = "0x9B1C30", VA = "0x9B1C30")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x9B1C68", Offset = "0x9B1C68", VA = "0x9B1C68")]
		public Angle3(float x, float y, float z)
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x9B1CDC", Offset = "0x9B1CDC", VA = "0x9B1CDC")]
		public Angle3(Angle x, Angle y, Angle z)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x9B1CE0", Offset = "0x9B1CE0", VA = "0x9B1CE0")]
		public Angle3(UnityEngine.Vector3 euler)
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x9B1CE4", Offset = "0x9B1CE4", VA = "0x9B1CE4")]
		public Angle3(Quaternion rotation)
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x9B1BBC", Offset = "0x9B1BBC", VA = "0x9B1BBC")]
		public void ToAxisAngle(out UnityEngine.Vector3 axis, out Angle angle)
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x9B1D24", Offset = "0x9B1D24", VA = "0x9B1D24")]
		public UnityEngine.Vector3 ToEuler(Angle.AngleType type)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x9B1D8C", Offset = "0x9B1D8C", VA = "0x9B1D8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x9B1E54", Offset = "0x9B1E54", VA = "0x9B1E54")]
		public static Angle3 operator +(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x9B1EF8", Offset = "0x9B1EF8", VA = "0x9B1EF8")]
		public static Angle3 operator -(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x9B1F9C", Offset = "0x9B1F9C", VA = "0x9B1F9C")]
		public static Angle3 operator *(Angle3 a, float b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x9B203C", Offset = "0x9B203C", VA = "0x9B203C")]
		public static bool operator ==(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x9B2060", Offset = "0x9B2060", VA = "0x9B2060")]
		public static bool operator !=(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x9B2084", Offset = "0x9B2084", VA = "0x9B2084", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x9B2174", Offset = "0x9B2174", VA = "0x9B2174", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x9B21A8", Offset = "0x9B21A8", VA = "0x9B21A8")]
		public static implicit operator Angle3(UnityEngine.Vector3 v)
		{
			return default(Angle3);
		}
	}
	[Token(Token = "0x2000197")]
	public abstract class TunnellingImageBase : TunnellingBase
	{
		[Token(Token = "0x2000198")]
		public enum BlurKernel
		{
			[Token(Token = "0x400084F")]
			FIVE,
			[Token(Token = "0x4000850")]
			NINE,
			[Token(Token = "0x4000851")]
			THIRTEEN
		}

		[Token(Token = "0x2000199")]
		public enum CounterVelocityMode
		{
			[Token(Token = "0x4000853")]
			OFF,
			[Token(Token = "0x4000854")]
			SHADER,
			[Token(Token = "0x4000855")]
			REAL
		}

		[Token(Token = "0x40007F4")]
		private const string KEYWORD_MASK = "TUNNEL_MASK";

		[Token(Token = "0x40007F5")]
		private const string KEYWORD_CONSTANT = "TUNNEL_CONSTANT";

		[Token(Token = "0x40007F6")]
		private const string KEYWORD_INVERT = "TUNNEL_INVERT_MASK";

		[Token(Token = "0x40007F7")]
		private const string KEYWORD_BLUR = "TUNNEL_BLUR";

		[Token(Token = "0x40007F8")]
		private const string PATH_TUNNELSHADER = "Tunnelling";

		[Token(Token = "0x40007F9")]
		private const string PATH_MASKSHADER = "Mask";

		[Token(Token = "0x40007FA")]
		private const string PATH_WINDOWSHADER = "Window";

		[Token(Token = "0x40007FB")]
		private const string PATH_COPYSHADER = "BlitA";

		[Token(Token = "0x40007FC")]
		private const string PATH_BLURSHADER = "SeparableBlur";

		[Token(Token = "0x40007FD")]
		private const string PATH_IRISSHADER = "TunnellingVertexZ";

		[Token(Token = "0x40007FE")]
		private const string PATH_SKYSPHERESHADER = "Skysphere";

		[Token(Token = "0x40007FF")]
		private const string PATH_SKYSPHEREMESH = "Skysphere";

		[Token(Token = "0x4000800")]
		private const string PROP_FEATHER = "_Feather";

		[Token(Token = "0x4000801")]
		private const string PROP_BKGRT = "_BkgTex";

		[Token(Token = "0x4000802")]
		private const string PROP_MASKRT = "_MaskTex";

		[Token(Token = "0x4000803")]
		private const string PROP_BLUR = "_Blur";

		[Token(Token = "0x4000804")]
		private const string PROP_OVERLAY = "_Overlay";

		[Token(Token = "0x4000805")]
		private const string PROP_BLUR_OFFSETS = "_Offsets";

		[Token(Token = "0x4000806")]
		private const float BLUR_OFFSET_1 = 1.3333334f;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] BLUR_OFFSETS_9;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly float[] BLUR_OFFSETS_13;

		[Token(Token = "0x4000809")]
		public const string GLOBAL_PROP_WORLD2CAGE = "_VRTP_WorldToCage";

		[Token(Token = "0x400080A")]
		public const string GLOBAL_PROP_WORLD2CAGE_NORMAL = "_VRTP_WorldToCageNormal";

		[Token(Token = "0x400080B")]
		public const string GLOBAL_PROP_CAGEPOS = "_VRTP_CagePos";

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50EF20", Offset = "0x50EF20")]
		private static TunnellingImageBase <instance>k__BackingField;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EF30", Offset = "0x50EF30")]
		public BackgroundMode backgroundMode;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50EF68", Offset = "0x50EF68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EF68", Offset = "0x50EF68")]
		public float effectOverlay;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50EFBC", Offset = "0x50EFBC")]
		[SerializeField]
		private GameObject _cageParent;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F008", Offset = "0x50F008")]
		public int cageDownsample;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public MSAA cageAntiAliasing;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool cageUpdateEveryFrame;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F020", Offset = "0x50F020")]
		public float cageFogDensity;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F040", Offset = "0x50F040")]
		public float cageFogPower;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F058", Offset = "0x50F058")]
		public float cageFogBlend;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public MaskMode maskMode;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F070", Offset = "0x50F070")]
		public int blurDownsample;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F088", Offset = "0x50F088")]
		public float blurDistance;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F0A0", Offset = "0x50F0A0")]
		public int blurPasses;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public BlurKernel blurSamples;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F0B8", Offset = "0x50F0B8")]
		public bool irisZRejection;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public CounterVelocityMode counterVelocityMode;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F0F0", Offset = "0x50F0F0")]
		public float counterVelocityResetDistance;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F128", Offset = "0x50F128")]
		public float counterVelocityResetTime;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F160", Offset = "0x50F160")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F160", Offset = "0x50F160")]
		public float counterVelocityStrength;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F1B4", Offset = "0x50F1B4")]
		public UnityEngine.Vector3 counterVelocityPerAxis;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private CommandBuffer _maskCmd;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Material _matTunnel;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Material _matMask;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material _matWindow;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material _matCopyAlpha;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material _matBlur;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Material _matSkysphere;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Mesh _meshSkysphere;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private MeshRenderer[] _cageMrs;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private List<MeshFilter> _cageMfs;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private List<Renderer> _maskObjects;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private RenderTexture _cageRt;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private RenderTexture _maskRt;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private RenderTexture _blurRt0;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private RenderTexture _blurRt1;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int _rtX;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private int _rtY;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int _rtA;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private CommandBuffer _irisCmd;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Material _matIris;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Mesh _meshIris;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Vector4[] _blurOffsets;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private MaskMode _lastMaskMode;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private MSAA _lastCageMsaa;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private bool _camHasMaskBuffer;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private int _lastCageDownsample;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private int _lastBlurDownsample;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private float _lastBlurRadius;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private BlurKernel _lastBlurKernel;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private bool _wasDrawingIrisEarly;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E5")]
		private bool _camHasIrisBuffer;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private CounterVelocityMode _lastCvMode;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private UnityEngine.Vector3 _cmPos;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private UnityEngine.Vector3 _cageInitialPosLocal;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		private float _timeToResetCounterVelocity;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private int _propColor;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private int _propBkgRt;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private int _propMaskRt;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private int _propSkybox;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private int _propOverlay;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private int _propBlur;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private int _propBlurOffsets;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private int _globPropWorld2Cage;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private int _globPropWorld2CageNormal;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private int _globPropCagePos;

		[Token(Token = "0x1700007D")]
		public static TunnellingImageBase instance
		{
			[Token(Token = "0x6000715")]
			[Address(RVA = "0xBDFB8C", Offset = "0xBDFB8C", VA = "0xBDFB8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x515290", Offset = "0x515290")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000716")]
			[Address(RVA = "0xBDFBF0", Offset = "0xBDFBF0", VA = "0xBDFBF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5152A0", Offset = "0x5152A0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public bool usingMask
		{
			[Token(Token = "0x6000717")]
			[Address(RVA = "0xBDFC5C", Offset = "0xBDFC5C", VA = "0xBDFC5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007F")]
		public bool usingCage
		{
			[Token(Token = "0x6000718")]
			[Address(RVA = "0xBDFC6C", Offset = "0xBDFC6C", VA = "0xBDFC6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000080")]
		private bool _usingCageRt
		{
			[Token(Token = "0x6000719")]
			[Address(RVA = "0xBDFC90", Offset = "0xBDFC90", VA = "0xBDFC90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000081")]
		private bool _canDrawIris
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0xBDFCA4", Offset = "0xBDFCA4", VA = "0xBDFCA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000082")]
		private bool _drawIris
		{
			[Token(Token = "0x600071B")]
			[Address(RVA = "0xBDFCD8", Offset = "0xBDFCD8", VA = "0xBDFCD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		protected abstract CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x600071C")]
			get;
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xBDFD14", Offset = "0xBDFD14", VA = "0xBDFD14", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xBE06F8", Offset = "0xBE06F8", VA = "0xBE06F8", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xBE0AC4", Offset = "0xBE0AC4", VA = "0xBE0AC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xBE0B48", Offset = "0xBE0B48", VA = "0xBE0B48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xBE0D68", Offset = "0xBE0D68", VA = "0xBE0D68")]
		private void ReleaseRT(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xBE0E08", Offset = "0xBE0E08", VA = "0xBE0E08")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xBE10EC", Offset = "0xBE10EC", VA = "0xBE10EC")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xBE0788", Offset = "0xBE0788", VA = "0xBE0788")]
		public void UpdateCage()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xBE11E4", Offset = "0xBE11E4", VA = "0xBE11E4", Slot = "6")]
		public override void ResetCounterMotion()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xBE12A8", Offset = "0xBE12A8", VA = "0xBE12A8")]
		public void ApplyPreset(TunnellingPreset p)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xBE16DC", Offset = "0xBE16DC", VA = "0xBE16DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xBE1D24", Offset = "0xBE1D24", VA = "0xBE1D24")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xBDDB98", Offset = "0xBDDB98", VA = "0xBDDB98")]
		protected void Draw(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xBE2524", Offset = "0xBE2524", VA = "0xBE2524", Slot = "8")]
		protected override void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xBE25A4", Offset = "0xBE25A4", VA = "0xBE25A4", Slot = "7")]
		protected override void UpdateCounterMotion(UnityEngine.Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xBE0420", Offset = "0xBE0420", VA = "0xBE0420")]
		private void UpdateKeywords()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xBE1A38", Offset = "0xBE1A38", VA = "0xBE1A38")]
		private void UpdateBlurKernel()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xBE276C", Offset = "0xBE276C", VA = "0xBE276C")]
		private int GetMsaa(MSAA m, int srcMsaa)
		{
			return default(int);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xBE1EC4", Offset = "0xBE1EC4", VA = "0xBE1EC4")]
		private void UpdateRenderTextures(int srcX, int srcY, int srcMsaa)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xBE0F00", Offset = "0xBE0F00", VA = "0xBE0F00")]
		private void ResetMaskCommandBuffer()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xBE09FC", Offset = "0xBE09FC", VA = "0xBE09FC")]
		private void ToggleMaskCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xBE0A6C", Offset = "0xBE0A6C", VA = "0xBE0A6C")]
		private void ToggleIrisCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xBDE0DC", Offset = "0xBDE0DC", VA = "0xBDE0DC")]
		protected TunnellingImageBase()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B7B8", Offset = "0x50B7B8")]
	public class TunnellingMaskObject : MonoBehaviour
	{
		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xBE2880", Offset = "0xBE2880", VA = "0xBE2880")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xBE28DC", Offset = "0xBE28DC", VA = "0xBE28DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xBE28E8", Offset = "0xBE28E8", VA = "0xBE28E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xBE2AA8", Offset = "0xBE2AA8", VA = "0xBE2AA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xBE2C50", Offset = "0xBE2C50", VA = "0xBE2C50")]
		public TunnellingMaskObject()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B818", Offset = "0x50B818")]
	public class TunnellingMaskObjectMobile : MonoBehaviour
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xBE2C58", Offset = "0xBE2C58", VA = "0xBE2C58")]
		private void Awake()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xBE2CB4", Offset = "0xBE2CB4", VA = "0xBE2CB4")]
		private void Start()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xBE2CC0", Offset = "0xBE2CC0", VA = "0xBE2CC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xBE324C", Offset = "0xBE324C", VA = "0xBE324C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xBE3534", Offset = "0xBE3534", VA = "0xBE3534")]
		public TunnellingMaskObjectMobile()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class TunnellingMobile : TunnellingBase
	{
		[Token(Token = "0x400085C")]
		public const string GLOBAL_PROP_STENCILREF = "_VRTP_Stencil_Ref";

		[Token(Token = "0x400085D")]
		public const string GLOBAL_PROP_STENCILMASK = "_VRTP_Stencil_Mask";

		[Token(Token = "0x400085E")]
		public const string GLOBAL_PROP_STENCILBIAS = "_VRTP_Stencil_Bias";

		[Token(Token = "0x400085F")]
		private const string PROP_WRITEZ = "_WriteZ";

		[Token(Token = "0x4000860")]
		private const string PATH_SHADER = "TunnellingVertex";

		[Token(Token = "0x4000861")]
		private const string PATH_STENCILSHADER = "TunnellingMobileStencil";

		[Token(Token = "0x4000862")]
		private const CameraEvent CEVENT_FX = CameraEvent.BeforeImageEffects;

		[Token(Token = "0x4000863")]
		private const CameraEvent CEVENT_Z = CameraEvent.BeforeForwardOpaque;

		[Token(Token = "0x4000864")]
		private const int RQUEUE_FIRST = 1;

		[Token(Token = "0x4000865")]
		private const int RQUEUE_MASK = 2499;

		[Token(Token = "0x4000866")]
		private const int RQUEUE_OPAQUE = 2501;

		[Token(Token = "0x4000867")]
		private const int RQUEUE_LAST = 5000;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50F1EC", Offset = "0x50F1EC")]
		private static TunnellingMobile <instance>k__BackingField;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material _stencilMat;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F1FC", Offset = "0x50F1FC")]
		public bool drawSkybox;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F234", Offset = "0x50F234")]
		public bool useMask;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F26C", Offset = "0x50F26C")]
		public bool drawBeforeTransparent;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F2A4", Offset = "0x50F2A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F2A4", Offset = "0x50F2A4")]
		public int stencilReference;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F2FC", Offset = "0x50F2FC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F2FC", Offset = "0x50F2FC")]
		public int stencilMask;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x50F354", Offset = "0x50F354")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F354", Offset = "0x50F354")]
		public float stencilBias;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private int _propColor;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private int _propSkybox;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private int _propWriteZ;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int _globPropStencilRef;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int _globPropStencilMask;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private int _globPropStencilBias;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Material _irisMatOuter;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Material _irisMatInner;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Mesh _irisMesh;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Dictionary<Renderer, MeshFilter> _maskObjects;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Stack<Mesh> _skinnedMeshPool;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Stack<Mesh> _skinnedMeshesRendering;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private List<UnityEngine.Object> _toDestroy;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private List<MeshRenderer> _tempMeshChildren;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private List<SkinnedMeshRenderer> _tempSkinnedMeshChildren;

		[Token(Token = "0x17000084")]
		public static TunnellingMobile instance
		{
			[Token(Token = "0x600073F")]
			[Address(RVA = "0xBE353C", Offset = "0xBE353C", VA = "0xBE353C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5152B0", Offset = "0x5152B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000740")]
			[Address(RVA = "0xBE3588", Offset = "0xBE3588", VA = "0xBE3588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5152C0", Offset = "0x5152C0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public static Material stencilMat
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0xBE35DC", Offset = "0xBE35DC", VA = "0xBE35DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public bool irisZRejectionEnabled
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0xBE36E4", Offset = "0xBE36E4", VA = "0xBE36E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xBE3704", Offset = "0xBE3704", VA = "0xBE3704")]
		public void ApplyPreset(TunnellingPresetMobile p)
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xBE2E10", Offset = "0xBE2E10", VA = "0xBE2E10")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xBE3384", Offset = "0xBE3384", VA = "0xBE3384")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xBE37BC", Offset = "0xBE37BC", VA = "0xBE37BC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xBE3B84", Offset = "0xBE3B84", VA = "0xBE3B84")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xBE3F84", Offset = "0xBE3F84", VA = "0xBE3F84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xBE470C", Offset = "0xBE470C", VA = "0xBE470C")]
		private void DrawIris(Material m, int submesh, int opaqueQueue, int camLayer)
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xBE499C", Offset = "0xBE499C", VA = "0xBE499C")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xBE49D0", Offset = "0xBE49D0", VA = "0xBE49D0")]
		public TunnellingMobile()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class TunnellingOpaque : TunnellingImageBase
	{
		[Token(Token = "0x17000087")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x600074C")]
			[Address(RVA = "0xBE4BC4", Offset = "0xBE4BC4", VA = "0xBE4BC4", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xBE4BCC", Offset = "0xBE4BCC", VA = "0xBE4BCC")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xBE4BD0", Offset = "0xBE4BD0", VA = "0xBE4BD0")]
		public TunnellingOpaque()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x50B878", Offset = "0x50B878")]
	public class TunnellingPreset : TunnellingPresetBase
	{
		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F3A8", Offset = "0x50F3A8")]
		private float _effectOverlay;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private bool _overrideEffectOverlay;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TunnellingBase.BackgroundMode _backgroundMode;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private bool _overrideBackgroundMode;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F418", Offset = "0x50F418")]
		[SerializeField]
		private int _cageDownsample;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private bool _overrideCageDownsample;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private TunnellingBase.MSAA _cageAntiAliasing;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private bool _overrideCageAntiAliasing;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		[SerializeField]
		private bool _cageUpdateEveryFrame;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[SerializeField]
		private bool _overrideCageUpdateEveryFrame;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F4A8", Offset = "0x50F4A8")]
		[SerializeField]
		private float _cageFogDensity;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private bool _overrideCageFogDensity;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F500", Offset = "0x50F500")]
		private float _cageFogPower;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool _overrideCageFogPower;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F550", Offset = "0x50F550")]
		private float _cageFogBlend;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool _overrideCageFogBlend;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TunnellingBase.MaskMode _maskMode;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool _overrideMaskMode;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F5C0", Offset = "0x50F5C0")]
		[SerializeField]
		private int _blurDownsample;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private bool _overrideBlurDownsample;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F610", Offset = "0x50F610")]
		[SerializeField]
		private float _blurDistance;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool _overrideBlurDistance;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F660", Offset = "0x50F660")]
		private int _blurPasses;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private bool _overrideBlurPasses;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private TunnellingImageBase.BlurKernel _blurSamples;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private bool _overrideBlurSamples;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private TunnellingImageBase.CounterVelocityMode _counterVelocityMode;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private bool _overrideCounterVelocityMode;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private float _counterVelocityResetDistance;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private bool _overrideCounterVelocityResetDistance;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float _counterVelocityResetTime;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private bool _overrideCounterVelocityResetTime;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F730", Offset = "0x50F730")]
		private float _counterVelocityStrength;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private bool _overrideCounterVelocityStrength;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private UnityEngine.Vector3 _counterVelocityPerAxis;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		private bool _overrideCounterVelocityPerAxis;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		[SerializeField]
		private bool _irisZRejection;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
		[SerializeField]
		private bool _overrideIrisZRejection;

		[Token(Token = "0x17000088")]
		public float effectOverlay
		{
			[Token(Token = "0x600074F")]
			[Address(RVA = "0xBE4C30", Offset = "0xBE4C30", VA = "0xBE4C30")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000089")]
		public bool overrideEffectOverlay
		{
			[Token(Token = "0x6000750")]
			[Address(RVA = "0xBE4C38", Offset = "0xBE4C38", VA = "0xBE4C38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008A")]
		public TunnellingBase.BackgroundMode backgroundMode
		{
			[Token(Token = "0x6000751")]
			[Address(RVA = "0xBE4C40", Offset = "0xBE4C40", VA = "0xBE4C40")]
			get
			{
				return default(TunnellingBase.BackgroundMode);
			}
		}

		[Token(Token = "0x1700008B")]
		public bool overrideBackgroundMode
		{
			[Token(Token = "0x6000752")]
			[Address(RVA = "0xBE149C", Offset = "0xBE149C", VA = "0xBE149C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		public int cageDownsample
		{
			[Token(Token = "0x6000753")]
			[Address(RVA = "0xBE4C48", Offset = "0xBE4C48", VA = "0xBE4C48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008D")]
		public bool overrideCageDownsample
		{
			[Token(Token = "0x6000754")]
			[Address(RVA = "0xBE14BC", Offset = "0xBE14BC", VA = "0xBE14BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008E")]
		public TunnellingBase.MSAA cageAntiAliasing
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0xBE4C50", Offset = "0xBE4C50", VA = "0xBE4C50")]
			get
			{
				return default(TunnellingBase.MSAA);
			}
		}

		[Token(Token = "0x1700008F")]
		public bool overrideCageAntiAliasing
		{
			[Token(Token = "0x6000756")]
			[Address(RVA = "0xBE14DC", Offset = "0xBE14DC", VA = "0xBE14DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000090")]
		public bool cageUpdateEveryFrame
		{
			[Token(Token = "0x6000757")]
			[Address(RVA = "0xBE4C58", Offset = "0xBE4C58", VA = "0xBE4C58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000091")]
		public bool overrideCageUpdateEveryFrame
		{
			[Token(Token = "0x6000758")]
			[Address(RVA = "0xBE14FC", Offset = "0xBE14FC", VA = "0xBE14FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000092")]
		public float cageFogDensity
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0xBE4C60", Offset = "0xBE4C60", VA = "0xBE4C60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000093")]
		public bool overrideCageFogDensity
		{
			[Token(Token = "0x600075A")]
			[Address(RVA = "0xBE151C", Offset = "0xBE151C", VA = "0xBE151C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000094")]
		public float cageFogPower
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0xBE4C68", Offset = "0xBE4C68", VA = "0xBE4C68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000095")]
		public bool overrideCageFogPower
		{
			[Token(Token = "0x600075C")]
			[Address(RVA = "0xBE153C", Offset = "0xBE153C", VA = "0xBE153C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000096")]
		public float cageFogBlend
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0xBE4C70", Offset = "0xBE4C70", VA = "0xBE4C70")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000097")]
		public bool overrideCageFogBlend
		{
			[Token(Token = "0x600075E")]
			[Address(RVA = "0xBE155C", Offset = "0xBE155C", VA = "0xBE155C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000098")]
		public TunnellingBase.MaskMode maskMode
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0xBE4C78", Offset = "0xBE4C78", VA = "0xBE4C78")]
			get
			{
				return default(TunnellingBase.MaskMode);
			}
		}

		[Token(Token = "0x17000099")]
		public bool overrideMaskMode
		{
			[Token(Token = "0x6000760")]
			[Address(RVA = "0xBE157C", Offset = "0xBE157C", VA = "0xBE157C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009A")]
		public int blurDownsample
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xBE4C80", Offset = "0xBE4C80", VA = "0xBE4C80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009B")]
		public bool overrideBlurDownsample
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xBE159C", Offset = "0xBE159C", VA = "0xBE159C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		public float blurDistance
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xBE4C88", Offset = "0xBE4C88", VA = "0xBE4C88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700009D")]
		public bool overrideBlurDistance
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0xBE15BC", Offset = "0xBE15BC", VA = "0xBE15BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009E")]
		public int blurPasses
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xBE4C90", Offset = "0xBE4C90", VA = "0xBE4C90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009F")]
		public bool overrideBlurPasses
		{
			[Token(Token = "0x6000766")]
			[Address(RVA = "0xBE15DC", Offset = "0xBE15DC", VA = "0xBE15DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A0")]
		public TunnellingImageBase.BlurKernel blurSamples
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0xBE4C98", Offset = "0xBE4C98", VA = "0xBE4C98")]
			get
			{
				return default(TunnellingImageBase.BlurKernel);
			}
		}

		[Token(Token = "0x170000A1")]
		public bool overrideBlurSamples
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0xBE15FC", Offset = "0xBE15FC", VA = "0xBE15FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A2")]
		public TunnellingImageBase.CounterVelocityMode counterVelocityMode
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0xBE4CA0", Offset = "0xBE4CA0", VA = "0xBE4CA0")]
			get
			{
				return default(TunnellingImageBase.CounterVelocityMode);
			}
		}

		[Token(Token = "0x170000A3")]
		public bool overrideCounterVelocityMode
		{
			[Token(Token = "0x600076A")]
			[Address(RVA = "0xBE161C", Offset = "0xBE161C", VA = "0xBE161C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A4")]
		public float counterVelocityResetDistance
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0xBE4CA8", Offset = "0xBE4CA8", VA = "0xBE4CA8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A5")]
		public bool overrideCounterVelocityResetDistance
		{
			[Token(Token = "0x600076C")]
			[Address(RVA = "0xBE163C", Offset = "0xBE163C", VA = "0xBE163C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A6")]
		public float counterVelocityResetTime
		{
			[Token(Token = "0x600076D")]
			[Address(RVA = "0xBE4CB0", Offset = "0xBE4CB0", VA = "0xBE4CB0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A7")]
		public bool overrideCounterVelocityResetTime
		{
			[Token(Token = "0x600076E")]
			[Address(RVA = "0xBE165C", Offset = "0xBE165C", VA = "0xBE165C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A8")]
		public float counterVelocityStrength
		{
			[Token(Token = "0x600076F")]
			[Address(RVA = "0xBE4CB8", Offset = "0xBE4CB8", VA = "0xBE4CB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A9")]
		public bool overrideCounterVelocityStrength
		{
			[Token(Token = "0x6000770")]
			[Address(RVA = "0xBE167C", Offset = "0xBE167C", VA = "0xBE167C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AA")]
		public UnityEngine.Vector3 counterVelocityPerAxis
		{
			[Token(Token = "0x6000771")]
			[Address(RVA = "0xBE4CC0", Offset = "0xBE4CC0", VA = "0xBE4CC0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000AB")]
		public bool overrideCounterVelocityPerAxis
		{
			[Token(Token = "0x6000772")]
			[Address(RVA = "0xBE169C", Offset = "0xBE169C", VA = "0xBE169C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		public bool irisZRejection
		{
			[Token(Token = "0x6000773")]
			[Address(RVA = "0xBE4CD0", Offset = "0xBE4CD0", VA = "0xBE4CD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AD")]
		public bool overrideIrisZRejection
		{
			[Token(Token = "0x6000774")]
			[Address(RVA = "0xBE16BC", Offset = "0xBE16BC", VA = "0xBE16BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xBE4CD8", Offset = "0xBE4CD8", VA = "0xBE4CD8")]
		public TunnellingPreset()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public abstract class TunnellingPresetBase : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20001A0")]
		public class MotionSettings
		{
			[Token(Token = "0x40008C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private bool _use;

			[Token(Token = "0x40008C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FA84", Offset = "0x50FA84")]
			private float _strength;

			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private float _min;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private float _max;

			[Token(Token = "0x40008C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private float _smoothing;

			[Token(Token = "0x170000CD")]
			public bool use
			{
				[Token(Token = "0x6000796")]
				[Address(RVA = "0xA48CB0", Offset = "0xA48CB0", VA = "0xA48CB0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000CE")]
			public float strength
			{
				[Token(Token = "0x6000797")]
				[Address(RVA = "0xA48CB8", Offset = "0xA48CB8", VA = "0xA48CB8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000CF")]
			public float min
			{
				[Token(Token = "0x6000798")]
				[Address(RVA = "0xA48CC0", Offset = "0xA48CC0", VA = "0xA48CC0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000D0")]
			public float max
			{
				[Token(Token = "0x6000799")]
				[Address(RVA = "0xA48CC8", Offset = "0xA48CC8", VA = "0xA48CC8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000D1")]
			public float smoothing
			{
				[Token(Token = "0x600079A")]
				[Address(RVA = "0xA48CD0", Offset = "0xA48CD0", VA = "0xA48CD0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600079B")]
			[Address(RVA = "0xA48CD8", Offset = "0xA48CD8", VA = "0xA48CD8")]
			public MotionSettings()
			{
			}
		}

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _overrideAll;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F7D0", Offset = "0x50F7D0")]
		private float _effectCoverage;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _overrideEffectCoverage;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color _effectColor;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool _overrideEffectColor;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F840", Offset = "0x50F840")]
		private float _effectFeather;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool _overrideEffectFeather;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool _applyColorToBackground;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[SerializeField]
		private bool _overrideApplyColorToBackground;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Cubemap _skybox;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool _overrideSkybox;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MotionSettings _angularVelocity;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool _overrideAngularVelocity;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MotionSettings _acceleration;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool _overrideAcceleration;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private MotionSettings _velocity;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _overrideVelocity;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool _useCounterMotion;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		[SerializeField]
		private bool _overrideUseCounterMotion;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F950", Offset = "0x50F950")]
		[SerializeField]
		private float _counterRotationStrength;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private bool _overrideCounterRotationStrength;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private UnityEngine.Vector3 _counterRotationPerAxis;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool _overrideCounterRotationPerAxis;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[SerializeField]
		private bool _useArtificialTilt;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[SerializeField]
		private bool _overrideUseArtificialTilt;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50F9E0", Offset = "0x50F9E0")]
		private int _framerateDivision;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private bool _overrideFramerateDivision;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[SerializeField]
		private bool _divideTranslation;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		[SerializeField]
		private bool _overrideDivideTranslation;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		[SerializeField]
		private bool _divideRotation;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private bool _overrideDivideRotation;

		[Token(Token = "0x170000AE")]
		protected bool overrideAll
		{
			[Token(Token = "0x6000776")]
			[Address(RVA = "0xBE4E38", Offset = "0xBE4E38", VA = "0xBE4E38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		public float effectCoverage
		{
			[Token(Token = "0x6000777")]
			[Address(RVA = "0xBE4E40", Offset = "0xBE4E40", VA = "0xBE4E40")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B0")]
		public bool overrideEffectCoverage
		{
			[Token(Token = "0x6000778")]
			[Address(RVA = "0xBDE698", Offset = "0xBDE698", VA = "0xBDE698")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B1")]
		public Color effectColor
		{
			[Token(Token = "0x6000779")]
			[Address(RVA = "0xBE4E48", Offset = "0xBE4E48", VA = "0xBE4E48")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170000B2")]
		public bool overrideEffectColor
		{
			[Token(Token = "0x600077A")]
			[Address(RVA = "0xBDE6B8", Offset = "0xBDE6B8", VA = "0xBDE6B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		public float effectFeather
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0xBE4E54", Offset = "0xBE4E54", VA = "0xBE4E54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B4")]
		public bool overrideEffectFeather
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xBDE6D8", Offset = "0xBDE6D8", VA = "0xBDE6D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B5")]
		public bool applyColorToBackground
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xBE4E5C", Offset = "0xBE4E5C", VA = "0xBE4E5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B6")]
		public bool overrideApplyColorToBackground
		{
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xBDE6F8", Offset = "0xBDE6F8", VA = "0xBDE6F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B7")]
		public Cubemap skybox
		{
			[Token(Token = "0x600077F")]
			[Address(RVA = "0xBE4E64", Offset = "0xBE4E64", VA = "0xBE4E64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		public bool overrideSkybox
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xBDE718", Offset = "0xBDE718", VA = "0xBDE718")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B9")]
		public MotionSettings angularVelocity
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xBE4E6C", Offset = "0xBE4E6C", VA = "0xBE4E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public bool overrideAngularVelocity
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xBDE738", Offset = "0xBDE738", VA = "0xBDE738")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BB")]
		public MotionSettings acceleration
		{
			[Token(Token = "0x6000783")]
			[Address(RVA = "0xBE4E74", Offset = "0xBE4E74", VA = "0xBE4E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		public bool overrideAcceleration
		{
			[Token(Token = "0x6000784")]
			[Address(RVA = "0xBDE758", Offset = "0xBDE758", VA = "0xBDE758")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		public MotionSettings velocity
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0xBE4E7C", Offset = "0xBE4E7C", VA = "0xBE4E7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		public bool overrideVelocity
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0xBDE778", Offset = "0xBDE778", VA = "0xBDE778")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BF")]
		public bool useCounterMotion
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0xBE4E84", Offset = "0xBE4E84", VA = "0xBE4E84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C0")]
		public bool overrideUseCounterMotion
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xBDE798", Offset = "0xBDE798", VA = "0xBDE798")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C1")]
		public float counterRotationStrength
		{
			[Token(Token = "0x6000789")]
			[Address(RVA = "0xBE4E8C", Offset = "0xBE4E8C", VA = "0xBE4E8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C2")]
		public bool overrideCounterRotationStrength
		{
			[Token(Token = "0x600078A")]
			[Address(RVA = "0xBE4E94", Offset = "0xBE4E94", VA = "0xBE4E94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C3")]
		public UnityEngine.Vector3 counterRotationPerAxis
		{
			[Token(Token = "0x600078B")]
			[Address(RVA = "0xBE4EB4", Offset = "0xBE4EB4", VA = "0xBE4EB4")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000C4")]
		public bool overrideCounterRotationPerAxis
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xBDE7B8", Offset = "0xBDE7B8", VA = "0xBDE7B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C5")]
		public bool useArtificialTilt
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xBE4EC0", Offset = "0xBE4EC0", VA = "0xBE4EC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C6")]
		public bool overrideUseArtificialTilt
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xBDE7D8", Offset = "0xBDE7D8", VA = "0xBDE7D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C7")]
		public int framerateDivision
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0xBE4EC8", Offset = "0xBE4EC8", VA = "0xBE4EC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C8")]
		public bool overrideFramerateDivision
		{
			[Token(Token = "0x6000790")]
			[Address(RVA = "0xBDE7F8", Offset = "0xBDE7F8", VA = "0xBDE7F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C9")]
		public bool divideTranslation
		{
			[Token(Token = "0x6000791")]
			[Address(RVA = "0xBE4ED0", Offset = "0xBE4ED0", VA = "0xBE4ED0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		public bool overrideDivideTranslation
		{
			[Token(Token = "0x6000792")]
			[Address(RVA = "0xBDE818", Offset = "0xBDE818", VA = "0xBDE818")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		public bool divideRotation
		{
			[Token(Token = "0x6000793")]
			[Address(RVA = "0xBE4ED8", Offset = "0xBE4ED8", VA = "0xBE4ED8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		public bool overrideDividerotation
		{
			[Token(Token = "0x6000794")]
			[Address(RVA = "0xBDE838", Offset = "0xBDE838", VA = "0xBDE838")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xBE4D90", Offset = "0xBE4D90", VA = "0xBE4D90")]
		protected TunnellingPresetBase()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x50B8C4", Offset = "0x50B8C4")]
	public class TunnellingPresetMobile : TunnellingPresetBase
	{
		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[SerializeField]
		private bool _drawSkybox;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		[SerializeField]
		private bool _overrideDrawSkybox;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
		[SerializeField]
		private bool _drawBeforeTransparent;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private bool _overrideDrawBeforeTransparent;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[SerializeField]
		private bool _useMask;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[SerializeField]
		private bool _overrideUseMask;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FB54", Offset = "0x50FB54")]
		private int _stencilReference;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool _overrideStencilReference;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FBA8", Offset = "0x50FBA8")]
		private int _stencilMask;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private bool _overrideStencilMask;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FBFC", Offset = "0x50FBFC")]
		private int _stencilBias;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private bool _overrideStencilBias;

		[Token(Token = "0x170000D2")]
		public bool drawSkybox
		{
			[Token(Token = "0x600079C")]
			[Address(RVA = "0xBE4EE0", Offset = "0xBE4EE0", VA = "0xBE4EE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D3")]
		public bool overrideDrawSkybox
		{
			[Token(Token = "0x600079D")]
			[Address(RVA = "0xBE379C", Offset = "0xBE379C", VA = "0xBE379C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D4")]
		public bool drawBeforeTransparent
		{
			[Token(Token = "0x600079E")]
			[Address(RVA = "0xBE4EE8", Offset = "0xBE4EE8", VA = "0xBE4EE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D5")]
		public bool overrideDrawBeforeTransparent
		{
			[Token(Token = "0x600079F")]
			[Address(RVA = "0xBE4EF0", Offset = "0xBE4EF0", VA = "0xBE4EF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D6")]
		public bool useMask
		{
			[Token(Token = "0x60007A0")]
			[Address(RVA = "0xBE4EF8", Offset = "0xBE4EF8", VA = "0xBE4EF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D7")]
		public bool overrideUseMask
		{
			[Token(Token = "0x60007A1")]
			[Address(RVA = "0xBE4F00", Offset = "0xBE4F00", VA = "0xBE4F00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		public int stencilReference
		{
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xBE4F08", Offset = "0xBE4F08", VA = "0xBE4F08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D9")]
		public bool overrideStencilReference
		{
			[Token(Token = "0x60007A3")]
			[Address(RVA = "0xBE4F10", Offset = "0xBE4F10", VA = "0xBE4F10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DA")]
		public int stencilMask
		{
			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xBE4F18", Offset = "0xBE4F18", VA = "0xBE4F18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DB")]
		public bool overrideStencilMask
		{
			[Token(Token = "0x60007A5")]
			[Address(RVA = "0xBE4F20", Offset = "0xBE4F20", VA = "0xBE4F20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public int stencilBias
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0xBE4F28", Offset = "0xBE4F28", VA = "0xBE4F28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DD")]
		public bool overrideStencilBias
		{
			[Token(Token = "0x60007A7")]
			[Address(RVA = "0xBE4F30", Offset = "0xBE4F30", VA = "0xBE4F30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xBE4F38", Offset = "0xBE4F38", VA = "0xBE4F38")]
		public TunnellingPresetMobile()
		{
		}
	}
}
namespace Sigtrap.VrTunnellingPro.Examples
{
	[Token(Token = "0x20001A2")]
	public class VRTP_ExampleMovement : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001A3")]
		private struct Preset
		{
			[Token(Token = "0x40008E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public KeyCode key;

			[Token(Token = "0x40008E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject[] worldObjects;

			[Token(Token = "0x40008E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TunnellingPreset postPreset;
		}

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _disableModes;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _rotSensitivity;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _movSensitivity;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Cubemap[] _skyboxes;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject[] _cages;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Preset[] _modePresets;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _currentMode;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool _hasWarnedInput;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tunnelling _tunnelling;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController _char;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _currentSkybox;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentCage;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 _speedCurrent;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 _speedSlew;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private float _speedSmoothing;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _rotCurrent;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _rotSlew;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private float _rotSmoothing;

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xBE82D0", Offset = "0xBE82D0", VA = "0xBE82D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xBE835C", Offset = "0xBE835C", VA = "0xBE835C")]
		private void Update()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xBE87B8", Offset = "0xBE87B8", VA = "0xBE87B8")]
		private void SetPreset(int i)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xBE890C", Offset = "0xBE890C", VA = "0xBE890C")]
		public VRTP_ExampleMovement()
		{
		}
	}
}
namespace OrbCreationExtensions
{
	[Token(Token = "0x20001A4")]
	public static class FloatExtensions
	{
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x147B5AC", Offset = "0x147B5AC", VA = "0x147B5AC")]
		public static string MakeString(this float aFloat)
		{
			return null;
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x147B608", Offset = "0x147B608", VA = "0x147B608")]
		public static string MakeString(this float aFloat, int decimals)
		{
			return null;
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x147B720", Offset = "0x147B720", VA = "0x147B720")]
		public static float To180Angle(this float f)
		{
			return default(float);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x147B76C", Offset = "0x147B76C", VA = "0x147B76C")]
		public static float To360Angle(this float f)
		{
			return default(float);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x147B7B0", Offset = "0x147B7B0", VA = "0x147B7B0")]
		public static float RadToCompassAngle(this float rad)
		{
			return default(float);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x147B80C", Offset = "0x147B80C", VA = "0x147B80C")]
		public static float DegreesToCompassAngle(this float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x147B85C", Offset = "0x147B85C", VA = "0x147B85C")]
		public static float Distance(this float f1, float f2)
		{
			return default(float);
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x147B864", Offset = "0x147B864", VA = "0x147B864")]
		public static float RelativePositionBetweenAngles(this float angle, float from, float to)
		{
			return default(float);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x147B9A4", Offset = "0x147B9A4", VA = "0x147B9A4")]
		public static float Round(this float f, int decimals)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001A5")]
	public static class GameObjectExtensions
	{
		[Token(Token = "0x20001A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B934", Offset = "0x50B934")]
		private sealed class <SetUpLODLevelsWithLODSwitcherInBackground>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x40008ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] maxWeights;

			[Token(Token = "0x40008EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float removeSmallParts;

			[Token(Token = "0x40008EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool recalcNormals;

			[Token(Token = "0x40008F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float[] lodScreenSizes;

			[Token(Token = "0x40008F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Mesh <mesh>5__2;

			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private LODSwitcher <lodSwitcher>5__3;

			[Token(Token = "0x40008F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Mesh <mesh0>5__4;

			[Token(Token = "0x40008F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Mesh[] <lodMeshes>5__5;

			[Token(Token = "0x40008F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__6;

			[Token(Token = "0x40008F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Hashtable <lodInfo>5__7;

			[Token(Token = "0x170000DE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007E1")]
				[Address(RVA = "0x7E11D4", Offset = "0x7E11D4", VA = "0x7E11D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007E3")]
				[Address(RVA = "0x7E121C", Offset = "0x7E121C", VA = "0x7E121C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007DE")]
			[Address(RVA = "0x7DFDC8", Offset = "0x7DFDC8", VA = "0x7DFDC8")]
			[DebuggerHidden]
			public <SetUpLODLevelsWithLODSwitcherInBackground>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x60007DF")]
			[Address(RVA = "0x7DFDF4", Offset = "0x7DFDF4", VA = "0x7DFDF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007E0")]
			[Address(RVA = "0x7DFDF8", Offset = "0x7DFDF8", VA = "0x7DFDF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007E2")]
			[Address(RVA = "0x7E11DC", Offset = "0x7E11DC", VA = "0x7E11DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B944", Offset = "0x50B944")]
		private sealed class <GetSimplifiedMeshInBackground>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject go;

			[Token(Token = "0x40008FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxWeight;

			[Token(Token = "0x40008FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float removeSmallParts;

			[Token(Token = "0x40008FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<Mesh> result;

			[Token(Token = "0x40008FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool recalcNormals;

			[Token(Token = "0x40008FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Hashtable <lodInfo>5__2;

			[Token(Token = "0x170000E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007E7")]
				[Address(RVA = "0x7DFD78", Offset = "0x7DFD78", VA = "0x7DFD78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007E9")]
				[Address(RVA = "0x7DFDC0", Offset = "0x7DFDC0", VA = "0x7DFDC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007E4")]
			[Address(RVA = "0x7DEEE4", Offset = "0x7DEEE4", VA = "0x7DEEE4")]
			[DebuggerHidden]
			public <GetSimplifiedMeshInBackground>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x60007E5")]
			[Address(RVA = "0x7DEF10", Offset = "0x7DEF10", VA = "0x7DEF10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007E6")]
			[Address(RVA = "0x7DEF14", Offset = "0x7DEF14", VA = "0x7DEF14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007E8")]
			[Address(RVA = "0x7DFD80", Offset = "0x7DFD80", VA = "0x7DFD80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1485F80", Offset = "0x1485F80", VA = "0x1485F80")]
		public static Bounds GetWorldBounds(this GameObject go)
		{
			return default(Bounds);
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x1486180", Offset = "0x1486180", VA = "0x1486180")]
		public static UnityEngine.Vector3[] GetBoundsCorners(this Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x14862A0", Offset = "0x14862A0", VA = "0x14862A0")]
		public static UnityEngine.Vector3[] GetBoundsCenterAndCorners(this Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x14863DC", Offset = "0x14863DC", VA = "0x14863DC")]
		public static UnityEngine.Vector3[] GetWorldBoundsCorners(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x1486404", Offset = "0x1486404", VA = "0x1486404")]
		public static UnityEngine.Vector3[] GetWorldBoundsCenterAndCorners(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x148642C", Offset = "0x148642C", VA = "0x148642C")]
		public static float GetModelComplexity(this GameObject go)
		{
			return default(float);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1486588", Offset = "0x1486588", VA = "0x1486588")]
		public static string GetModelInfoString(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x1486830", Offset = "0x1486830", VA = "0x1486830")]
		public static GameObject TopParent(this GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x14868F0", Offset = "0x14868F0", VA = "0x14868F0")]
		public static GameObject FindParentWithName(this GameObject go, string parentName)
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x14869D8", Offset = "0x14869D8", VA = "0x14869D8")]
		public static GameObject FindMutualParent(this GameObject go1, GameObject go2)
		{
			return null;
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1486B94", Offset = "0x1486B94", VA = "0x1486B94")]
		public static GameObject FindFirstChildWithName(this GameObject go, string childName)
		{
			return null;
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x1486CB4", Offset = "0x1486CB4", VA = "0x1486CB4")]
		public static bool IsChildWithNameUnique(this GameObject go, string childName)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1486CE4", Offset = "0x1486CE4", VA = "0x1486CE4")]
		public static void CountChildrenWithName(this GameObject go, string childName, ref int total)
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1486FC0", Offset = "0x1486FC0", VA = "0x1486FC0")]
		public static GameObject GetGameObjectNamed(this GameObject go, string aStr, GameObject parentGO)
		{
			return null;
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x14870C0", Offset = "0x14870C0", VA = "0x14870C0")]
		public static void DestroyChildren(this GameObject go, bool disabledOnly)
		{
		}

		[Token(Token = "0x60007C5")]
		public static T GetFirstComponentInParents<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60007C6")]
		public static T GetFirstComponentInChildren<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x14874E4", Offset = "0x14874E4", VA = "0x14874E4")]
		public static Mesh[] GetMeshes(this GameObject aGo)
		{
			return null;
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x14874EC", Offset = "0x14874EC", VA = "0x14874EC")]
		public static Mesh[] GetMeshes(this GameObject aGo, bool includeDisabled)
		{
			return null;
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x1487700", Offset = "0x1487700", VA = "0x1487700")]
		public static int GetTotalVertexCount(this GameObject aGo)
		{
			return default(int);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x14878E4", Offset = "0x14878E4", VA = "0x14878E4")]
		public static Mesh Get1stSharedMesh(this GameObject aGo)
		{
			return null;
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1487AE8", Offset = "0x1487AE8", VA = "0x1487AE8")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x148800C", Offset = "0x148800C", VA = "0x148800C")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes, int lodLevel)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x1487AF4", Offset = "0x1487AF4", VA = "0x1487AF4")]
		public static void SetMeshes(this GameObject aGo, Mesh[] meshes, bool includeDisabled, int lodLevel)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x1488018", Offset = "0x1488018", VA = "0x1488018")]
		public static Material[] GetMaterials(this GameObject aGo, bool includeDisabled)
		{
			return null;
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x14881E0", Offset = "0x14881E0", VA = "0x14881E0")]
		public static Mesh[] CombineMeshes(this GameObject aGO)
		{
			return null;
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x1488238", Offset = "0x1488238", VA = "0x1488238")]
		public static Mesh[] CombineMeshes(this GameObject aGO, string[] skipSubmeshNames)
		{
			return null;
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x148C2C4", Offset = "0x148C2C4", VA = "0x148C2C4")]
		private static int GiveUniqueNameIfNeeded(GameObject aGo, GameObject topGO, int uniqueId)
		{
			return default(int);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x148C3A4", Offset = "0x148C3A4", VA = "0x148C3A4")]
		public static void SetUpLODLevels(this GameObject go)
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x148C3AC", Offset = "0x148C3AC", VA = "0x148C3AC")]
		public static void SetUpLODLevels(this GameObject go, float maxWeight)
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x148C498", Offset = "0x148C498", VA = "0x148C498")]
		public static void SetUpLODLevels(this GameObject go, float[] lodScreenSizes, float[] maxWeights)
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x148C594", Offset = "0x148C594", VA = "0x148C594")]
		public static Mesh[] SetUpLODLevelsWithLODSwitcher(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x148CA7C", Offset = "0x148CA7C", VA = "0x148CA7C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515560", Offset = "0x515560")]
		public static IEnumerator SetUpLODLevelsWithLODSwitcherInBackground(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f)
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x148CB48", Offset = "0x148CB48", VA = "0x148CB48")]
		public static Mesh[] SetUpLODLevelsAndChildrenWithLODSwitcher(this GameObject go, float[] lodScreenSizes, float[] maxWeights, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x148D5FC", Offset = "0x148D5FC", VA = "0x148D5FC")]
		public static Mesh[] SetUpLODLevelsAndChildrenWithLODGroup(this GameObject go, float[] relativeTransitionHeights, float[] maxWeights, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x148E224", Offset = "0x148E224", VA = "0x148E224")]
		public static Mesh GetSimplifiedMesh(this GameObject go, float maxWeight, bool recalcNormals, float removeSmallParts, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x148E590", Offset = "0x148E590", VA = "0x148E590")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515600", Offset = "0x515600")]
		public static IEnumerator GetSimplifiedMeshInBackground(this GameObject go, float maxWeight, bool recalcNormals, float removeSmallParts, Action<Mesh> result)
		{
			return null;
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x148A770", Offset = "0x148A770", VA = "0x148A770")]
		private static bool MergeMeshInto(Mesh fromMesh, Transform[] fromBones, Material[] fromMaterials, List<UnityEngine.Vector3> vertices, List<UnityEngine.Vector3> normals, List<UnityEngine.Vector2> uv1s, List<UnityEngine.Vector2> uv2s, List<UnityEngine.Vector2> uv3s, List<UnityEngine.Vector2> uv4s, List<Color32> colors32, List<BoneWeight> boneWeights, List<Transform> bones, List<Matrix4x4> bindposes, Dictionary<Material, List<int>> subMeshes, bool usesNegativeScale, Vector4 lightmapScaleOffset, Transform fromTransform, Transform topTransform, string submeshName, string[] skipSubmeshNames)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x148E644", Offset = "0x148E644", VA = "0x148E644")]
		private static UnityEngine.Vector3 ApplyBindPose(UnityEngine.Vector3 vertex, Transform bone, Matrix4x4 bindpose, float boneWeight)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x148E758", Offset = "0x148E758", VA = "0x148E758")]
		private static UnityEngine.Vector3 UnApplyBindPose(UnityEngine.Vector3 vertex, Transform bone, Matrix4x4 bindpose, float boneWeight)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x20001A8")]
	public static class MeshExtensions
	{
		[Token(Token = "0x20001A9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B964", Offset = "0x50B964")]
		private sealed class <MakeLODMeshInBackground>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000900")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000901")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float maxWeight;

			[Token(Token = "0x4000902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float removeSmallParts;

			[Token(Token = "0x4000903")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Mesh mesh;

			[Token(Token = "0x4000904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<Mesh> result;

			[Token(Token = "0x4000905")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool recalcNormals;

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Hashtable <lodInfo>5__2;

			[Token(Token = "0x170000E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000801")]
				[Address(RVA = "0x7E63DC", Offset = "0x7E63DC", VA = "0x7E63DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000803")]
				[Address(RVA = "0x7E6424", Offset = "0x7E6424", VA = "0x7E6424", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007FE")]
			[Address(RVA = "0x7E56B8", Offset = "0x7E56B8", VA = "0x7E56B8")]
			[DebuggerHidden]
			public <MakeLODMeshInBackground>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60007FF")]
			[Address(RVA = "0x7E56E4", Offset = "0x7E56E4", VA = "0x7E56E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000800")]
			[Address(RVA = "0x7E56E8", Offset = "0x7E56E8", VA = "0x7E56E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000802")]
			[Address(RVA = "0x7E63E4", Offset = "0x7E63E4", VA = "0x7E63E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xC2B198", Offset = "0xC2B198", VA = "0xC2B198")]
		public static void RecalculateTangents(this Mesh mesh)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xC2B684", Offset = "0xC2B684", VA = "0xC2B684")]
		public static Mesh ScaledRotatedTranslatedMesh(this Mesh mesh, UnityEngine.Vector3 scale, Quaternion rotate, UnityEngine.Vector3 translate)
		{
			return null;
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xC2B91C", Offset = "0xC2B91C", VA = "0xC2B91C")]
		public static bool IsSkinnedMesh(this Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xC2B984", Offset = "0xC2B984", VA = "0xC2B984")]
		public static int GetTriangleCount(this Mesh orig)
		{
			return default(int);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xC2B9C4", Offset = "0xC2B9C4", VA = "0xC2B9C4")]
		public static Mesh MakeLODMesh(this Mesh orig, float aMaxWeight, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f)
		{
			return null;
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xC2B9D4", Offset = "0xC2B9D4", VA = "0xC2B9D4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515760", Offset = "0x515760")]
		public static IEnumerator MakeLODMeshInBackground(this Mesh mesh, float maxWeight, bool recalcNormals, float removeSmallParts, Action<Mesh> result)
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xC2BA88", Offset = "0xC2BA88", VA = "0xC2BA88")]
		public static Mesh[] MakeLODMeshes(this Mesh mesh, float[] maxWeights, bool recalcNormals, float removeSmallParts = 1f, float protectNormals = 1f, float protectUvs = 1f, float protectSubMeshesAndSharpEdges = 1f, float smallTrianglesFirst = 1f, int nrOfSteps = 1)
		{
			return null;
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xC2BC9C", Offset = "0xC2BC9C", VA = "0xC2BC9C")]
		public static Vector4 GetUvRange(this Mesh mesh)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xC2BD84", Offset = "0xC2BD84", VA = "0xC2BD84")]
		public static bool CheckUvsWithin01Range(this Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xC2BE1C", Offset = "0xC2BE1C", VA = "0xC2BE1C")]
		public static void ClampUvs(this Mesh mesh)
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xC2BED4", Offset = "0xC2BED4", VA = "0xC2BED4")]
		public static void WrapUvs(this Mesh mesh)
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xC2BFD0", Offset = "0xC2BFD0", VA = "0xC2BFD0")]
		public static void SetAtlasRectForSubmesh(this Mesh mesh, Rect atlasRect, int submeshIndex)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xC2C2B8", Offset = "0xC2C2B8", VA = "0xC2C2B8")]
		public static void MergeSubmeshInto(this Mesh mesh, int from, int to)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xC2C4F8", Offset = "0xC2C4F8", VA = "0xC2C4F8")]
		public static Mesh CopyAndRemoveSubmeshes(this Mesh orig, int[] submeshesToRemove)
		{
			return null;
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xC2CD74", Offset = "0xC2CD74", VA = "0xC2CD74")]
		public static Mesh CopyAndRemoveHiddenTriangles(this Mesh orig, int subMeshIdx, Matrix4x4 localToWorldMatrix, Mesh[] hidingMeshes, int[] hidingSubMeshes, Matrix4x4[] hidingLocalToWorldMatrices, float maxRemoveDistance = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xC2DE4C", Offset = "0xC2DE4C", VA = "0xC2DE4C")]
		private static bool IsTriangleHidden(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, float maxDistance, List<UnityEngine.Vector3> triMinCorners, List<UnityEngine.Vector3> triMaxCorners, List<UnityEngine.Vector3> hidingVs, List<int> hidingTs)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xC2E334", Offset = "0xC2E334", VA = "0xC2E334")]
		private static bool IsHidden(UnityEngine.Vector3 v, UnityEngine.Vector3 n, float maxDistance, List<UnityEngine.Vector3> hidingVs, List<int> hidingTs, List<int> trianglesToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xC2E08C", Offset = "0xC2E08C", VA = "0xC2E08C")]
		private static List<int> GetTrianglesWithinRange(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, float maxDistance, List<UnityEngine.Vector3> triMinCorners, List<UnityEngine.Vector3> triMaxCorners)
		{
			return null;
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xC2E63C", Offset = "0xC2E63C", VA = "0xC2E63C")]
		public static float DistanceToPlane(UnityEngine.Vector3 fromPos, UnityEngine.Vector3 direction, UnityEngine.Vector3 pointOnPlane, UnityEngine.Vector3 normalPlane)
		{
			return default(float);
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xC2E02C", Offset = "0xC2E02C", VA = "0xC2E02C")]
		public static UnityEngine.Vector3 GetNormal(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x20001AA")]
	public static class RectExtensions
	{
		[Token(Token = "0x6000804")]
		[Address(RVA = "0xDDDEA4", Offset = "0xDDDEA4", VA = "0xDDDEA4")]
		public static bool MouseInRect(this Rect rect, UnityEngine.Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xDDDEDC", Offset = "0xDDDEDC", VA = "0xDDDEDC")]
		public static bool MouseInRect(this Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xDDDF58", Offset = "0xDDDF58", VA = "0xDDDF58")]
		public static bool MouseInRect(this Rect rect, Rect parentRect, UnityEngine.Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xDDE00C", Offset = "0xDDE00C", VA = "0xDDE00C")]
		public static bool MouseInRect(this Rect rect, Rect parentRect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xDDE0A8", Offset = "0xDDE0A8", VA = "0xDDE0A8")]
		public static bool MouseInRect(this Rect rect, Rect parentRect1, Rect parentRect2, UnityEngine.Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xDDE1BC", Offset = "0xDDE1BC", VA = "0xDDE1BC")]
		public static bool MouseInRect(this Rect rect, Rect parentRect1, Rect parentRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xDDE268", Offset = "0xDDE268", VA = "0xDDE268")]
		public static UnityEngine.Vector2 RelativeMousePosInRect(this Rect rect, UnityEngine.Vector2 point)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xDDE33C", Offset = "0xDDE33C", VA = "0xDDE33C")]
		public static UnityEngine.Vector2 RelativeMousePosInRect(this Rect rect)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xDDE3A8", Offset = "0xDDE3A8", VA = "0xDDE3A8")]
		public static Rect RelativeRectInImage(this Rect r, Texture2D img)
		{
			return default(Rect);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xDDE4DC", Offset = "0xDDE4DC", VA = "0xDDE4DC")]
		public static float MaxExtents(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xDDE540", Offset = "0xDDE540", VA = "0xDDE540")]
		public static float MaxSize(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xDDE5A4", Offset = "0xDDE5A4", VA = "0xDDE5A4")]
		public static float MinExtents(this Bounds b)
		{
			return default(float);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xDDE608", Offset = "0xDDE608", VA = "0xDDE608")]
		public static float MinSize(this Bounds b)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001AB")]
	public static class Texture2DExtensions
	{
		[Token(Token = "0x6000811")]
		[Address(RVA = "0xD7A49C", Offset = "0xD7A49C", VA = "0xD7A49C")]
		public static Texture2D GetCopy(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xD7A61C", Offset = "0xD7A61C", VA = "0xD7A61C")]
		public static Texture2D GetCopy(this Texture2D tex, int x, int y, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xD7A684", Offset = "0xD7A684", VA = "0xD7A684")]
		public static Texture2D GetSection(this Texture2D tex, int x, int y, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xD7A514", Offset = "0xD7A514", VA = "0xD7A514")]
		public static Texture2D GetCopy(this Texture2D tex, int x, int y, int w, int h, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xD7A770", Offset = "0xD7A770", VA = "0xD7A770")]
		public static Texture2D ScaledCopy(this Texture2D tex, int width, int height, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xD7AD58", Offset = "0xD7AD58", VA = "0xD7AD58")]
		public static void CopyFrom(this Texture2D tex, Texture2D fromTex, int toX, int toY, int fromX, int fromY, int width, int height)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xD7AFE8", Offset = "0xD7AFE8", VA = "0xD7AFE8")]
		public static void Scale(this Texture2D tex, int width, int height)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xD7AEDC", Offset = "0xD7AEDC", VA = "0xD7AEDC")]
		public static void MakeFormatWritable(this Texture2D tex)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xD7A6EC", Offset = "0xD7A6EC", VA = "0xD7A6EC")]
		public static TextureFormat GetWritableFormat(TextureFormat format)
		{
			return default(TextureFormat);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xD7B148", Offset = "0xD7B148", VA = "0xD7B148")]
		public static Color GetAverageColor(this Texture2D tex)
		{
			return default(Color);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xD7B2C4", Offset = "0xD7B2C4", VA = "0xD7B2C4")]
		public static Color GetAverageColor(this Texture2D tex, Color useThisColorForAlpha)
		{
			return default(Color);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xD7B4C4", Offset = "0xD7B4C4", VA = "0xD7B4C4")]
		public static bool IsReadable(this Texture2D tex)
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xD7B588", Offset = "0xD7B588", VA = "0xD7B588")]
		public static bool HasTransparency(this Texture2D tex)
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xD7B6D4", Offset = "0xD7B6D4", VA = "0xD7B6D4")]
		public static bool IsNormalMap(this Texture2D aTexture)
		{
			return default(bool);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xD7A930", Offset = "0xD7A930", VA = "0xD7A930")]
		private static Color[] ScaledPixels(Color[] originalPixels, int oldWidth, int oldHeight, int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xD7B734", Offset = "0xD7B734", VA = "0xD7B734")]
		public static Texture2D GetUnityNormalMap(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xD7B984", Offset = "0xD7B984", VA = "0xD7B984")]
		public static Texture2D FromUnityNormalMap(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xD7BBE0", Offset = "0xD7BBE0", VA = "0xD7BBE0")]
		public static void Fill(this Texture2D tex, Color aColor)
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public static class TransformExtensions
	{
		[Token(Token = "0x6000823")]
		[Address(RVA = "0xBDB468", Offset = "0xBDB468", VA = "0xBDB468")]
		public static bool IsPartOf(this Transform trans, Transform aTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xBDB590", Offset = "0xBDB590", VA = "0xBDB590")]
		public static Transform FindFirstChildWithName(this Transform trans, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xBDB8C4", Offset = "0xBDB8C4", VA = "0xBDB8C4")]
		public static Transform FindFirstChildWhereNameContains(this Transform trans, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		public static T GetFirstComponentInParents<T>(this Transform trans) where T : MonoBehaviour
		{
			return null;
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xBDBBFC", Offset = "0xBDBBFC", VA = "0xBDBBFC")]
		public static UnityEngine.Vector3 PointToWorldSpace(this Transform trans, UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xBDBC14", Offset = "0xBDBC14", VA = "0xBDBC14")]
		public static UnityEngine.Vector3 PointToLocalSpace(this Transform trans, UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x20001AD")]
	public static class Vector3Extensions
	{
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x7CEA30", Offset = "0x7CEA30", VA = "0x7CEA30")]
		public static string MakeString(this UnityEngine.Vector3 v)
		{
			return null;
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x7CECC4", Offset = "0x7CECC4", VA = "0x7CECC4")]
		public static string MakeString(this UnityEngine.Vector3 v, int decimals)
		{
			return null;
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x7CF1C4", Offset = "0x7CF1C4", VA = "0x7CF1C4")]
		public static UnityEngine.Vector3 Product(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x7CF1D4", Offset = "0x7CF1D4", VA = "0x7CF1D4")]
		public static float Sum(this UnityEngine.Vector3 v1)
		{
			return default(float);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x7CF1E0", Offset = "0x7CF1E0", VA = "0x7CF1E0")]
		public static float InProduct(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(float);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x7CF1F8", Offset = "0x7CF1F8", VA = "0x7CF1F8")]
		public static UnityEngine.Vector3 Abs(this UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x7CF208", Offset = "0x7CF208", VA = "0x7CF208")]
		public static UnityEngine.Vector3 VectorMax(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x7CF280", Offset = "0x7CF280", VA = "0x7CF280")]
		public static bool IsEqual(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x7CF2A8", Offset = "0x7CF2A8", VA = "0x7CF2A8")]
		public static bool DiffBetween(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, float from, float to)
		{
			return default(bool);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x7CF2F4", Offset = "0x7CF2F4", VA = "0x7CF2F4")]
		public static bool IsDiffSmallEnough(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, float maxDiff)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x7CF344", Offset = "0x7CF344", VA = "0x7CF344")]
		public static bool IsAllSmaller(this UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x7CF36C", Offset = "0x7CF36C", VA = "0x7CF36C")]
		public static UnityEngine.Vector2 Barycentric(this UnityEngine.Vector3 p, UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x7CF43C", Offset = "0x7CF43C", VA = "0x7CF43C")]
		public static UnityEngine.Vector3 To180Angle(this UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x7CF498", Offset = "0x7CF498", VA = "0x7CF498")]
		public static UnityEngine.Vector3 To360Angle(this UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x20001AE")]
	public static class Vector2Extensions
	{
		[Token(Token = "0x6000837")]
		[Address(RVA = "0xBE972C", Offset = "0xBE972C", VA = "0xBE972C")]
		public static string MakeString(this UnityEngine.Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xBE9930", Offset = "0xBE9930", VA = "0xBE9930")]
		public static string MakeString(this UnityEngine.Vector2 v, int decimals)
		{
			return null;
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xBE9CF8", Offset = "0xBE9CF8", VA = "0xBE9CF8")]
		public static UnityEngine.Vector2 Product(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xBE9D04", Offset = "0xBE9D04", VA = "0xBE9D04")]
		public static float InProduct(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2)
		{
			return default(float);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xBE9D14", Offset = "0xBE9D14", VA = "0xBE9D14")]
		public static UnityEngine.Vector2 Abs(this UnityEngine.Vector2 v)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xBE9D20", Offset = "0xBE9D20", VA = "0xBE9D20")]
		public static bool IsEqual(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xBE9D38", Offset = "0xBE9D38", VA = "0xBE9D38")]
		public static bool DiffBetween(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2, float from, float to)
		{
			return default(bool);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xBE9D70", Offset = "0xBE9D70", VA = "0xBE9D70")]
		public static bool IsDiffSmallEnough(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2, float maxDiff)
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xBE9DA8", Offset = "0xBE9DA8", VA = "0xBE9DA8")]
		public static bool IsAllSmaller(this UnityEngine.Vector2 v1, UnityEngine.Vector2 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xBE9DC0", Offset = "0xBE9DC0", VA = "0xBE9DC0")]
		public static bool IsBarycentricInTriangle(this UnityEngine.Vector2 v)
		{
			return default(bool);
		}
	}
}
namespace UnityStandardAssets.SceneUtils
{
	[Token(Token = "0x20001AF")]
	public class ParticleSceneControls : MonoBehaviour
	{
		[Token(Token = "0x20001B0")]
		public enum Mode
		{
			[Token(Token = "0x400091A")]
			Activate,
			[Token(Token = "0x400091B")]
			Instantiate,
			[Token(Token = "0x400091C")]
			Trail
		}

		[Token(Token = "0x20001B1")]
		public enum AlignMode
		{
			[Token(Token = "0x400091E")]
			Normal,
			[Token(Token = "0x400091F")]
			Up
		}

		[Serializable]
		[Token(Token = "0x20001B2")]
		public class DemoParticleSystem
		{
			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Mode mode;

			[Token(Token = "0x4000922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public AlignMode align;

			[Token(Token = "0x4000923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int maxCount;

			[Token(Token = "0x4000924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float minDist;

			[Token(Token = "0x4000925")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int camOffset;

			[Token(Token = "0x4000926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string instructionText;

			[Token(Token = "0x600084B")]
			[Address(RVA = "0xA3D8DC", Offset = "0xA3D8DC", VA = "0xA3D8DC")]
			public DemoParticleSystem()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B3")]
		public class DemoParticleSystemList
		{
			[Token(Token = "0x4000927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DemoParticleSystem[] items;

			[Token(Token = "0x600084C")]
			[Address(RVA = "0xA3D8EC", Offset = "0xA3D8EC", VA = "0xA3D8EC")]
			public DemoParticleSystemList()
			{
			}
		}

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoParticleSystemList demoParticles;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spawnOffset;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float multiply;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool clearOnChange;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text titleText;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform sceneCamera;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Text instructionText;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button previousButton;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button nextButton;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GraphicRaycaster graphicRaycaster;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EventSystem eventSystem;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ParticleSystemMultiplier m_ParticleMultiplier;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<Transform> m_CurrentParticleList;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform m_Instance;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_SelectedIndex;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.Vector3 m_CamOffsetVelocity;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private UnityEngine.Vector3 m_LastPos;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static DemoParticleSystem s_Selected;

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x9935FC", Offset = "0x9935FC", VA = "0x9935FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x993AA8", Offset = "0x993AA8", VA = "0x993AA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x993B94", Offset = "0x993B94", VA = "0x993B94")]
		private void Previous()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x993C84", Offset = "0x993C84", VA = "0x993C84")]
		public void Next()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x993D68", Offset = "0x993D68", VA = "0x993D68")]
		private void Update()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x9944A0", Offset = "0x9944A0", VA = "0x9944A0")]
		private void KeyboardInput()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x9944F4", Offset = "0x9944F4", VA = "0x9944F4")]
		private bool CheckForGuiCollision()
		{
			return default(bool);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x993728", Offset = "0x993728", VA = "0x993728")]
		private void Select(int i)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x9945F8", Offset = "0x9945F8", VA = "0x9945F8")]
		public ParticleSceneControls()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class PlaceTargetWithMouse : MonoBehaviour
	{
		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float surfaceOffset;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject setTargetOn;

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x99CF3C", Offset = "0x99CF3C", VA = "0x99CF3C")]
		private void Update()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x99D0D4", Offset = "0x99D0D4", VA = "0x99D0D4")]
		public PlaceTargetWithMouse()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class SlowMoButton : MonoBehaviour
	{
		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite FullSpeedTex;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite SlowSpeedTex;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fullSpeed;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slowSpeed;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button button;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_SlowMo;

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x7E9D2C", Offset = "0x7E9D2C", VA = "0x7E9D2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x7E9D34", Offset = "0x7E9D34", VA = "0x7E9D34")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x7E9D40", Offset = "0x7E9D40", VA = "0x7E9D40")]
		public void ChangeSpeed()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x7E9E70", Offset = "0x7E9E70", VA = "0x7E9E70")]
		public SlowMoButton()
		{
		}
	}
}
namespace RPGCharacterAnims
{
	[Token(Token = "0x20001B6")]
	public class GUIControls : MonoBehaviour
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RPGCharacterController rpgCharacterController;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RPGCharacterMovementController rpgCharacterMovementController;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RPGCharacterWeaponController rpgCharacterWeaponController;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool blockGui;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float charge;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool useHips;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool useDual;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool useCrouch;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool useSprint;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool useInstant;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool hipsToggle;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		private bool dualToggle;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		private bool blockToggle;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool instantToggle;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private readonly bool crouchToggle;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private readonly bool sprintToggle;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public bool useNavAgent;

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x14811EC", Offset = "0x14811EC", VA = "0x14811EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x14812A8", Offset = "0x14812A8", VA = "0x14812A8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1484864", Offset = "0x1484864", VA = "0x1484864")]
		public GUIControls()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public class IKHands : MonoBehaviour
	{
		[Token(Token = "0x20001B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50B9C4", Offset = "0x50B9C4")]
		private sealed class <_BlendIK>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400094A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int weapon;

			[Token(Token = "0x400094B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IKHands <>4__this;

			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float delay;

			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool blendOn;

			[Token(Token = "0x400094E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float timeToBlend;

			[Token(Token = "0x400094F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__2;

			[Token(Token = "0x4000950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <blendTo>5__3;

			[Token(Token = "0x4000951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <blendFrom>5__4;

			[Token(Token = "0x170000E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600085E")]
				[Address(RVA = "0x7E41D4", Offset = "0x7E41D4", VA = "0x7E41D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000860")]
				[Address(RVA = "0x7E421C", Offset = "0x7E421C", VA = "0x7E421C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600085B")]
			[Address(RVA = "0x7E3FF4", Offset = "0x7E3FF4", VA = "0x7E3FF4")]
			[DebuggerHidden]
			public <_BlendIK>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600085C")]
			[Address(RVA = "0x7E4020", Offset = "0x7E4020", VA = "0x7E4020", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600085D")]
			[Address(RVA = "0x7E4024", Offset = "0x7E4024", VA = "0x7E4024", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600085F")]
			[Address(RVA = "0x7E41DC", Offset = "0x7E41DC", VA = "0x7E41DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RPGCharacterWeaponController rpgCharacterWeaponController;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHandObj;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform attachLeft;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FCDC", Offset = "0x50FCDC")]
		public float leftHandPositionWeight;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x50FCF4", Offset = "0x50FCF4")]
		public float leftHandRotationWeight;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform blendToTransform;

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xCE54E8", Offset = "0xCE54E8", VA = "0xCE54E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xCE5574", Offset = "0xCE5574", VA = "0xCE5574")]
		private void OnAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xCE5674", Offset = "0xCE5674", VA = "0xCE5674")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515C60", Offset = "0x515C60")]
		public IEnumerator _BlendIK(bool blendOn, float delay, float timeToBlend, int weapon)
		{
			return null;
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xCE5720", Offset = "0xCE5720", VA = "0xCE5720")]
		private void GetCurrentWeaponAttachPoint(int weapon)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xCE5804", Offset = "0xCE5804", VA = "0xCE5804")]
		public IKHands()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B9D4", Offset = "0x50B9D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B9D4", Offset = "0x50B9D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50B9D4", Offset = "0x50B9D4")]
	public class RPGCharacterController : MonoBehaviour
	{
		[Token(Token = "0x20001BA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BA9C", Offset = "0x50BA9C")]
		private sealed class <_Turning>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int direction;

			[Token(Token = "0x4000976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000E6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000899")]
				[Address(RVA = "0xA3F558", Offset = "0xA3F558", VA = "0xA3F558", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600089B")]
				[Address(RVA = "0xA3F5A0", Offset = "0xA3F5A0", VA = "0xA3F5A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000896")]
			[Address(RVA = "0xA3F3F8", Offset = "0xA3F3F8", VA = "0xA3F3F8")]
			[DebuggerHidden]
			public <_Turning>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6000897")]
			[Address(RVA = "0xA3F424", Offset = "0xA3F424", VA = "0xA3F424", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000898")]
			[Address(RVA = "0xA3F428", Offset = "0xA3F428", VA = "0xA3F428", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600089A")]
			[Address(RVA = "0xA3F560", Offset = "0xA3F560", VA = "0xA3F560", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BAAC", Offset = "0x50BAAC")]
		private sealed class <_Dodge>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x400097A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int direction;

			[Token(Token = "0x170000E8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600089F")]
				[Address(RVA = "0xA3ECD0", Offset = "0xA3ECD0", VA = "0xA3ECD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A1")]
				[Address(RVA = "0xA3ED18", Offset = "0xA3ED18", VA = "0xA3ED18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600089C")]
			[Address(RVA = "0xA3EB5C", Offset = "0xA3EB5C", VA = "0xA3EB5C")]
			[DebuggerHidden]
			public <_Dodge>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x600089D")]
			[Address(RVA = "0xA3EB88", Offset = "0xA3EB88", VA = "0xA3EB88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600089E")]
			[Address(RVA = "0xA3EB8C", Offset = "0xA3EB8C", VA = "0xA3EB8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A0")]
			[Address(RVA = "0xA3ECD8", Offset = "0xA3ECD8", VA = "0xA3ECD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BABC", Offset = "0x50BABC")]
		private sealed class <_ClimbLadder>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400097B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400097C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000EA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A5")]
				[Address(RVA = "0xA3EB0C", Offset = "0xA3EB0C", VA = "0xA3EB0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A7")]
				[Address(RVA = "0xA3EB54", Offset = "0xA3EB54", VA = "0xA3EB54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A2")]
			[Address(RVA = "0xA3E7D0", Offset = "0xA3E7D0", VA = "0xA3E7D0")]
			[DebuggerHidden]
			public <_ClimbLadder>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x60008A3")]
			[Address(RVA = "0xA3E7FC", Offset = "0xA3E7FC", VA = "0xA3E7FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xA3E800", Offset = "0xA3E800", VA = "0xA3E800", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A6")]
			[Address(RVA = "0xA3EB14", Offset = "0xA3EB14", VA = "0xA3EB14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BACC", Offset = "0x50BACC")]
		private sealed class <_ResetIdleTimer>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008AB")]
				[Address(RVA = "0xA3F3A8", Offset = "0xA3F3A8", VA = "0xA3F3A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008AD")]
				[Address(RVA = "0xA3F3F0", Offset = "0xA3F3F0", VA = "0xA3F3F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xA3F28C", Offset = "0xA3F28C", VA = "0xA3F28C")]
			[DebuggerHidden]
			public <_ResetIdleTimer>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xA3F2B8", Offset = "0xA3F2B8", VA = "0xA3F2B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xA3F2BC", Offset = "0xA3F2BC", VA = "0xA3F2BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008AC")]
			[Address(RVA = "0xA3F3B0", Offset = "0xA3F3B0", VA = "0xA3F3B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BADC", Offset = "0x50BADC")]
		private sealed class <_GetCurrentAnimationLength>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008B1")]
				[Address(RVA = "0xA3EE80", Offset = "0xA3EE80", VA = "0xA3EE80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008B3")]
				[Address(RVA = "0xA3EEC8", Offset = "0xA3EEC8", VA = "0xA3EEC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008AE")]
			[Address(RVA = "0xA3ED20", Offset = "0xA3ED20", VA = "0xA3ED20")]
			[DebuggerHidden]
			public <_GetCurrentAnimationLength>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xA3ED4C", Offset = "0xA3ED4C", VA = "0xA3ED4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xA3ED50", Offset = "0xA3ED50", VA = "0xA3ED50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008B2")]
			[Address(RVA = "0xA3EE88", Offset = "0xA3EE88", VA = "0xA3EE88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BAEC", Offset = "0x50BAEC")]
		private sealed class <_Lock>d__77 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool lockMovement;

			[Token(Token = "0x4000988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool lockAction;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool timed;

			[Token(Token = "0x400098B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lockTime;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008B7")]
				[Address(RVA = "0xA3F068", Offset = "0xA3F068", VA = "0xA3F068", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008B9")]
				[Address(RVA = "0xA3F0B0", Offset = "0xA3F0B0", VA = "0xA3F0B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xA3EED0", Offset = "0xA3EED0", VA = "0xA3EED0")]
			[DebuggerHidden]
			public <_Lock>d__77(int <>1__state)
			{
			}

			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xA3EEFC", Offset = "0xA3EEFC", VA = "0xA3EEFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008B6")]
			[Address(RVA = "0xA3EF00", Offset = "0xA3EF00", VA = "0xA3EF00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008B8")]
			[Address(RVA = "0xA3F070", Offset = "0xA3F070", VA = "0xA3F070", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BAFC", Offset = "0x50BAFC")]
		private sealed class <_BlockBreak>d__80 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400098C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008BD")]
				[Address(RVA = "0xA3E780", Offset = "0xA3E780", VA = "0xA3E780", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008BF")]
				[Address(RVA = "0xA3E7C8", Offset = "0xA3E7C8", VA = "0xA3E7C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008BA")]
			[Address(RVA = "0xA3E648", Offset = "0xA3E648", VA = "0xA3E648")]
			[DebuggerHidden]
			public <_BlockBreak>d__80(int <>1__state)
			{
			}

			[Token(Token = "0x60008BB")]
			[Address(RVA = "0xA3E674", Offset = "0xA3E674", VA = "0xA3E674", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008BC")]
			[Address(RVA = "0xA3E678", Offset = "0xA3E678", VA = "0xA3E678", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008BE")]
			[Address(RVA = "0xA3E788", Offset = "0xA3E788", VA = "0xA3E788", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB0C", Offset = "0x50BB0C")]
		private sealed class <_PlayConversationClip>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterController <>4__this;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008C3")]
				[Address(RVA = "0xA3F23C", Offset = "0xA3F23C", VA = "0xA3F23C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008C5")]
				[Address(RVA = "0xA3F284", Offset = "0xA3F284", VA = "0xA3F284", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008C0")]
			[Address(RVA = "0xA3F0B8", Offset = "0xA3F0B8", VA = "0xA3F0B8")]
			[DebuggerHidden]
			public <_PlayConversationClip>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xA3F0E4", Offset = "0xA3F0E4", VA = "0xA3F0E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008C2")]
			[Address(RVA = "0xA3F0E8", Offset = "0xA3F0E8", VA = "0xA3F0E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008C4")]
			[Address(RVA = "0xA3F244", Offset = "0xA3F244", VA = "0xA3F244", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public RPGCharacterMovementController rpgCharacterMovementController;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public RPGCharacterWeaponController rpgCharacterWeaponController;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public RPGCharacterInputController rpgCharacterInputController;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public IKHands ikHands;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Weapon weapon;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject target;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PerfectLookAt headLookController;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public bool isDead;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[HideInInspector]
		public bool isBlocking;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[HideInInspector]
		public bool canAction;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[HideInInspector]
		public bool isSitting;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[HideInInspector]
		public bool isClimbing;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		[HideInInspector]
		public bool isNearLadder;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		[HideInInspector]
		public bool isNearCliff;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public GameObject ladder;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GameObject cliff;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public bool isCasting;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[HideInInspector]
		public bool isAiming;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[HideInInspector]
		public bool isStrafing;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[HideInInspector]
		public bool injured;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool hipShooting;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int specialAttack;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float aimHorizontal;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float aimVertical;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float bowPull;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool headLook;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool isHeadlook;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int numberOfConversationClips;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int currentConversation;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float idleTimer;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float idleTrigger;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float animationSpeed;

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xDD3318", Offset = "0xDD3318", VA = "0xDD3318")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xDD3624", Offset = "0xDD3624", VA = "0xDD3624")]
		private void Start()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xDD3700", Offset = "0xDD3700", VA = "0xDD3700")]
		private void Update()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xDD4F60", Offset = "0xDD4F60", VA = "0xDD4F60")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xDD3DE8", Offset = "0xDD3DE8", VA = "0xDD3DE8")]
		private void UpdateAnimationSpeed()
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xDD424C", Offset = "0xDD424C", VA = "0xDD424C")]
		private void DirectionalAiming()
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xDD5050", Offset = "0xDD5050", VA = "0xDD5050")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515D10", Offset = "0x515D10")]
		public IEnumerator _Turning(int direction)
		{
			return null;
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xDD50D8", Offset = "0xDD50D8", VA = "0xDD50D8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515D70", Offset = "0x515D70")]
		public IEnumerator _Dodge(int direction)
		{
			return null;
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xDD4848", Offset = "0xDD4848", VA = "0xDD4848")]
		public void Attack(int attackSide)
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xDD5208", Offset = "0xDD5208", VA = "0xDD5208")]
		private void RunningAttack(int attackSide)
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xDD538C", Offset = "0xDD538C", VA = "0xDD538C")]
		private void AirAttack()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xDD4BD8", Offset = "0xDD4BD8", VA = "0xDD4BD8")]
		public void AttackKick(int kickSide)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xDD5594", Offset = "0xDD5594", VA = "0xDD5594")]
		public void Special(int special)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xDD5760", Offset = "0xDD5760", VA = "0xDD5760")]
		public void Cast(int attackSide, string type)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xDD3EF0", Offset = "0xDD3EF0", VA = "0xDD3EF0")]
		public void Blocking()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xDD3FFC", Offset = "0xDD3FFC", VA = "0xDD3FFC")]
		private void Strafing()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xDD4434", Offset = "0xDD4434", VA = "0xDD4434")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xDD4540", Offset = "0xDD4540", VA = "0xDD4540")]
		private void Rolling()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xDD4580", Offset = "0xDD4580", VA = "0xDD4580")]
		public void GetHit()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xDD47C4", Offset = "0xDD47C4", VA = "0xDD47C4")]
		public void Death()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xDD3E74", Offset = "0xDD3E74", VA = "0xDD3E74")]
		public void Revive()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xDD5E10", Offset = "0xDD5E10", VA = "0xDD5E10")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515DD0", Offset = "0x515DD0")]
		public IEnumerator _ClimbLadder()
		{
			return null;
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xDD5E88", Offset = "0xDD5E88", VA = "0xDD5E88")]
		public void EndClimbingLadder()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xDD5F10", Offset = "0xDD5F10", VA = "0xDD5F10")]
		private void LockAction()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xDD56F4", Offset = "0xDD56F4", VA = "0xDD56F4")]
		private void UnLock(bool movement, bool actions)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xDD5F48", Offset = "0xDD5F48", VA = "0xDD5F48")]
		public void Sit()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xDD6060", Offset = "0xDD6060", VA = "0xDD6060")]
		public void Sleep()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xDD60F8", Offset = "0xDD60F8", VA = "0xDD60F8")]
		public void Stand()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xDD61C0", Offset = "0xDD61C0", VA = "0xDD61C0")]
		public void Pickup()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xDD6264", Offset = "0xDD6264", VA = "0xDD6264")]
		public void Activate()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xDD6308", Offset = "0xDD6308", VA = "0xDD6308")]
		public void Drink()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xDD63A8", Offset = "0xDD63A8", VA = "0xDD63A8")]
		public void Bow()
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xDD645C", Offset = "0xDD645C", VA = "0xDD645C")]
		public void No()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xDD64E0", Offset = "0xDD64E0", VA = "0xDD64E0")]
		public void Yes()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xDD6564", Offset = "0xDD6564", VA = "0xDD6564")]
		public void Boost()
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xDD6604", Offset = "0xDD6604", VA = "0xDD6604")]
		public void Hit()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xDD6608", Offset = "0xDD6608", VA = "0xDD6608")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xDD660C", Offset = "0xDD660C", VA = "0xDD660C")]
		public void FootR()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xDD6610", Offset = "0xDD6610", VA = "0xDD6610")]
		public void FootL()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xDD6614", Offset = "0xDD6614", VA = "0xDD6614")]
		public void Land()
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xDD4130", Offset = "0xDD4130", VA = "0xDD4130")]
		private void RandomIdle()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xDD35AC", Offset = "0xDD35AC", VA = "0xDD35AC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515E30", Offset = "0x515E30")]
		private IEnumerator _ResetIdleTimer()
		{
			return null;
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xDD6618", Offset = "0xDD6618", VA = "0xDD6618")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515E90", Offset = "0x515E90")]
		private IEnumerator _GetCurrentAnimationLength()
		{
			return null;
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xDD5160", Offset = "0xDD5160", VA = "0xDD5160")]
		public void Lock(bool lockMovement, bool lockAction, bool timed, float delayTime, float lockTime)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xDD6690", Offset = "0xDD6690", VA = "0xDD6690")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515EF0", Offset = "0x515EF0")]
		public IEnumerator _Lock(bool lockMovement, bool lockAction, bool timed, float delayTime, float lockTime)
		{
			return null;
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xDD6754", Offset = "0xDD6754", VA = "0xDD6754")]
		private void SetAnimator(int weapon, int weaponSwitch, int Lweapon, int Rweapon, int weaponSide)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xDD6C7C", Offset = "0xDD6C7C", VA = "0xDD6C7C")]
		public void SetWeaponState(int weaponNumber)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xDD4CF0", Offset = "0xDD4CF0", VA = "0xDD4CF0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515F50", Offset = "0x515F50")]
		public IEnumerator _BlockBreak()
		{
			return null;
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xDD6DDC", Offset = "0xDD6DDC", VA = "0xDD6DDC")]
		public void StartConversation()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xDD6F04", Offset = "0xDD6F04", VA = "0xDD6F04")]
		public void StopConversation()
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xDD6E8C", Offset = "0xDD6E8C", VA = "0xDD6E8C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x515FB0", Offset = "0x515FB0")]
		private IEnumerator _PlayConversationClip()
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xDD6F88", Offset = "0xDD6F88", VA = "0xDD6F88")]
		public void AnimatorDebug()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xDD79F8", Offset = "0xDD79F8", VA = "0xDD79F8")]
		public RPGCharacterController()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class RPGCharacterInputController : MonoBehaviour
	{
		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool inputJump;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool inputLightHit;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[HideInInspector]
		public bool inputDeath;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[HideInInspector]
		public bool inputAttackL;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public bool inputAttackR;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[HideInInspector]
		public bool inputCastL;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		[HideInInspector]
		public bool inputCastR;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public float inputSwitchUpDown;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public float inputSwitchLeftRight;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool inputStrafe;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float inputTargetBlock;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float inputAimVertical;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float inputAimHorizontal;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float inputHorizontal;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public float inputVertical;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool inputAiming;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[HideInInspector]
		public bool inputRoll;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[HideInInspector]
		public bool inputShield;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[HideInInspector]
		public bool inputRelax;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public bool allowedInput;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public UnityEngine.Vector3 moveInput;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public UnityEngine.Vector2 aimInput;

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xDD7A18", Offset = "0xDD7A18", VA = "0xDD7A18")]
		private void Inputs()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xDD7D10", Offset = "0xDD7D10", VA = "0xDD7D10")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xDD7D1C", Offset = "0xDD7D1C", VA = "0xDD7D1C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xDD7D58", Offset = "0xDD7D58", VA = "0xDD7D58")]
		private UnityEngine.Vector3 CameraRelativeInput(float inputX, float inputZ)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xDD7E40", Offset = "0xDD7E40", VA = "0xDD7E40")]
		public bool HasAnyInput()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xDD7EEC", Offset = "0xDD7EEC", VA = "0xDD7EEC")]
		public bool HasMoveInput()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xDD5AE4", Offset = "0xDD5AE4", VA = "0xDD5AE4")]
		public bool HasAimInput()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xDD7F54", Offset = "0xDD7F54", VA = "0xDD7F54")]
		public RPGCharacterInputController()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public enum RPGCharacterState
	{
		[Token(Token = "0x40009A9")]
		Idle,
		[Token(Token = "0x40009AA")]
		Move,
		[Token(Token = "0x40009AB")]
		Jump,
		[Token(Token = "0x40009AC")]
		DoubleJump,
		[Token(Token = "0x40009AD")]
		Fall,
		[Token(Token = "0x40009AE")]
		Swim,
		[Token(Token = "0x40009AF")]
		Block,
		[Token(Token = "0x40009B0")]
		ClimbLadder,
		[Token(Token = "0x40009B1")]
		Roll
	}
	[Token(Token = "0x20001C4")]
	public class RPGCharacterMovementController : SuperStateMachine
	{
		[Token(Token = "0x20001C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB1C", Offset = "0x50BB1C")]
		private sealed class <_Roll>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterMovementController <>4__this;

			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int roll;

			[Token(Token = "0x170000F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008FD")]
				[Address(RVA = "0xA3FAAC", Offset = "0xA3FAAC", VA = "0xA3FAAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008FF")]
				[Address(RVA = "0xA3FAF4", Offset = "0xA3FAF4", VA = "0xA3FAF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xA3F870", Offset = "0xA3F870", VA = "0xA3F870")]
			[DebuggerHidden]
			public <_Roll>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xA3F89C", Offset = "0xA3F89C", VA = "0xA3F89C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xA3F8A0", Offset = "0xA3F8A0", VA = "0xA3F8A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xA3FAB4", Offset = "0xA3FAB4", VA = "0xA3FAB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001C6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB2C", Offset = "0x50BB2C")]
		private sealed class <_Knockback>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterMovementController <>4__this;

			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 knockDirection;

			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int knockBackAmount;

			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int variableAmount;

			[Token(Token = "0x170000F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000903")]
				[Address(RVA = "0xA3F6CC", Offset = "0xA3F6CC", VA = "0xA3F6CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000905")]
				[Address(RVA = "0xA3F714", Offset = "0xA3F714", VA = "0xA3F714", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000900")]
			[Address(RVA = "0xA3F5A8", Offset = "0xA3F5A8", VA = "0xA3F5A8")]
			[DebuggerHidden]
			public <_Knockback>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6000901")]
			[Address(RVA = "0xA3F5D4", Offset = "0xA3F5D4", VA = "0xA3F5D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000902")]
			[Address(RVA = "0xA3F5D8", Offset = "0xA3F5D8", VA = "0xA3F5D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000904")]
			[Address(RVA = "0xA3F6D4", Offset = "0xA3F6D4", VA = "0xA3F6D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB3C", Offset = "0x50BB3C")]
		private sealed class <_KnockbackForce>d__76 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterMovementController <>4__this;

			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 knockDirection;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int knockBackAmount;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int variableAmount;

			[Token(Token = "0x170000FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000909")]
				[Address(RVA = "0xA3F820", Offset = "0xA3F820", VA = "0xA3F820", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600090B")]
				[Address(RVA = "0xA3F868", Offset = "0xA3F868", VA = "0xA3F868", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000906")]
			[Address(RVA = "0xA3F71C", Offset = "0xA3F71C", VA = "0xA3F71C")]
			[DebuggerHidden]
			public <_KnockbackForce>d__76(int <>1__state)
			{
			}

			[Token(Token = "0x6000907")]
			[Address(RVA = "0xA3F748", Offset = "0xA3F748", VA = "0xA3F748", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000908")]
			[Address(RVA = "0xA3F74C", Offset = "0xA3F74C", VA = "0xA3F74C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600090A")]
			[Address(RVA = "0xA3F828", Offset = "0xA3F828", VA = "0xA3F828", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public NavMeshAgent navMeshAgent;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SuperCharacterController superCharacterController;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RPGCharacterController rpgCharacterController;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RPGCharacterInputController rpgCharacterInputController;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CapsuleCollider capCollider;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RPGCharacterState rpgCharacterState;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public bool useMeshNav;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50FFAC", Offset = "0x50FFAC")]
		private UnityEngine.Vector3 <lookDirection>k__BackingField;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[HideInInspector]
		public bool isKnockback;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float knockbackMultiplier;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[HideInInspector]
		public bool canJump;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[HideInInspector]
		public bool canDoubleJump;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
		private bool doublejumped;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float gravity;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float jumpAcceleration;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float jumpHeight;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float doubleJumpHeight;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public UnityEngine.Vector3 currentVelocity;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public bool isMoving;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		[HideInInspector]
		public bool canMove;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		[HideInInspector]
		public bool crouch;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		[HideInInspector]
		public bool isSprinting;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float movementAcceleration;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float walkSpeed;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float runSpeed;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float sprintSpeed;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly float rotationSpeed;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float groundFriction;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public bool isRolling;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float rollSpeed;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float rollduration;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int rollNumber;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float inAirSpeed;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float swimSpeed;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float waterFriction;

		[Token(Token = "0x170000F6")]
		[HideInInspector]
		public UnityEngine.Vector3 lookDirection
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xDD7F64", Offset = "0xDD7F64", VA = "0xDD7F64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516290", Offset = "0x516290")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60008CF")]
			[Address(RVA = "0xDD7F70", Offset = "0xDD7F70", VA = "0xDD7F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5162A0", Offset = "0x5162A0")]
			private set
			{
			}
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xDD7F7C", Offset = "0xDD7F7C", VA = "0xDD7F7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xDD819C", Offset = "0xDD819C", VA = "0xDD819C", Slot = "4")]
		protected override void EarlyGlobalSuperUpdate()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xDD81A0", Offset = "0xDD81A0", VA = "0xDD81A0", Slot = "5")]
		protected override void LateGlobalSuperUpdate()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xDD8A1C", Offset = "0xDD8A1C", VA = "0xDD8A1C")]
		private bool AcquiringGround()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xDD3E44", Offset = "0xDD3E44", VA = "0xDD3E44")]
		public bool MaintainingGround()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xDD8A50", Offset = "0xDD8A50", VA = "0xDD8A50")]
		public void RotateGravity(UnityEngine.Vector3 up)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xDD8ACC", Offset = "0xDD8ACC", VA = "0xDD8ACC")]
		private UnityEngine.Vector3 LocalMovement()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xDD8AEC", Offset = "0xDD8AEC", VA = "0xDD8AEC")]
		private float CalculateJumpSpeed(float jumpHeight, float gravity)
		{
			return default(float);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xDD8B0C", Offset = "0xDD8B0C", VA = "0xDD8B0C")]
		private void Idle_EnterState()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xDD8B94", Offset = "0xDD8B94", VA = "0xDD8B94")]
		private void Idle_SuperUpdate()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xDD8CD8", Offset = "0xDD8CD8", VA = "0xDD8CD8")]
		private void Idle_ExitState()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xDD8CDC", Offset = "0xDD8CDC", VA = "0xDD8CDC")]
		private void Move_SuperUpdate()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xDD8F5C", Offset = "0xDD8F5C", VA = "0xDD8F5C")]
		private void Jump_EnterState()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xDD90D4", Offset = "0xDD90D4", VA = "0xDD90D4")]
		private void Jump_SuperUpdate()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xDD93C0", Offset = "0xDD93C0", VA = "0xDD93C0")]
		private void DoubleJump_EnterState()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xDD94CC", Offset = "0xDD94CC", VA = "0xDD94CC")]
		private void DoubleJump_SuperUpdate()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xDD931C", Offset = "0xDD931C", VA = "0xDD931C")]
		private void DoubleJump()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xDD94D0", Offset = "0xDD94D0", VA = "0xDD94D0")]
		private void Fall_EnterState()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xDD9588", Offset = "0xDD9588", VA = "0xDD9588")]
		private void Fall_SuperUpdate()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xDD96F0", Offset = "0xDD96F0", VA = "0xDD96F0")]
		private void Swim_EnterState()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xDD9948", Offset = "0xDD9948", VA = "0xDD9948")]
		private void Swim_ExitState()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xDD99FC", Offset = "0xDD99FC", VA = "0xDD99FC")]
		private void Swim_SuperUpdate()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xDD9BE4", Offset = "0xDD9BE4", VA = "0xDD9BE4")]
		public void SwimAscend()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xDD9AE8", Offset = "0xDD9AE8", VA = "0xDD9AE8")]
		public void SwimDescent()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xDD9CB4", Offset = "0xDD9CB4", VA = "0xDD9CB4")]
		private void Roll_SuperUpdate()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xDD5B40", Offset = "0xDD5B40", VA = "0xDD5B40")]
		public void DirectionalRoll()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xDD9E94", Offset = "0xDD9E94", VA = "0xDD9E94")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5162B0", Offset = "0x5162B0")]
		public IEnumerator _Roll(int roll)
		{
			return null;
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xDD9F1C", Offset = "0xDD9F1C", VA = "0xDD9F1C")]
		private void ClimbLadder_EnterState()
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xDD9FB8", Offset = "0xDD9FB8", VA = "0xDD9FB8")]
		private void ClimbLadder_ExitState()
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xDDA05C", Offset = "0xDDA05C", VA = "0xDDA05C")]
		public void SwitchCollisionOff()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xDD363C", Offset = "0xDD363C", VA = "0xDD363C")]
		public void SwitchCollisionOn()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xDD87D4", Offset = "0xDD87D4", VA = "0xDD87D4")]
		private void RotateTowardsMovementDir()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xDDA11C", Offset = "0xDDA11C", VA = "0xDDA11C")]
		private void RotateTowardsTarget(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xDD8504", Offset = "0xDD8504", VA = "0xDD8504")]
		private void Aiming()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xDD8920", Offset = "0xDD8920", VA = "0xDD8920")]
		private void Strafing(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xDD5D60", Offset = "0xDD5D60", VA = "0xDD5D60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516310", Offset = "0x516310")]
		public IEnumerator _Knockback(UnityEngine.Vector3 knockDirection, int knockBackAmount, int variableAmount)
		{
			return null;
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xDDA250", Offset = "0xDDA250", VA = "0xDDA250")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516370", Offset = "0x516370")]
		private IEnumerator _KnockbackForce(UnityEngine.Vector3 knockDirection, int knockBackAmount, int variableAmount)
		{
			return null;
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xDDA300", Offset = "0xDDA300", VA = "0xDDA300")]
		private void OnTriggerEnter(Collider collide)
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xDDA4EC", Offset = "0xDDA4EC", VA = "0xDDA4EC")]
		private void OnTriggerExit(Collider collide)
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xDD5FE0", Offset = "0xDD5FE0", VA = "0xDD5FE0")]
		public void LockMovement()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xDD5F1C", Offset = "0xDD5F1C", VA = "0xDD5F1C")]
		public void UnlockMovement()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xDDA6DC", Offset = "0xDDA6DC", VA = "0xDDA6DC")]
		public RPGCharacterMovementController()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public enum Weapon
	{
		[Token(Token = "0x40009E8")]
		UNARMED = 0,
		[Token(Token = "0x40009E9")]
		TWOHANDSWORD = 1,
		[Token(Token = "0x40009EA")]
		TWOHANDSPEAR = 2,
		[Token(Token = "0x40009EB")]
		TWOHANDAXE = 3,
		[Token(Token = "0x40009EC")]
		TWOHANDBOW = 4,
		[Token(Token = "0x40009ED")]
		TWOHANDCROSSBOW = 5,
		[Token(Token = "0x40009EE")]
		STAFF = 6,
		[Token(Token = "0x40009EF")]
		ARMED = 7,
		[Token(Token = "0x40009F0")]
		RELAX = 8,
		[Token(Token = "0x40009F1")]
		RIFLE = 9,
		[Token(Token = "0x40009F2")]
		SHIELD = 11,
		[Token(Token = "0x40009F3")]
		ARMEDSHIELD = 12
	}
	[Token(Token = "0x20001C9")]
	public class RPGCharacterWeaponController : MonoBehaviour
	{
		[Token(Token = "0x20001CA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB4C", Offset = "0x50BB4C")]
		private sealed class <_SwitchWeapon>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int weaponNumber;

			[Token(Token = "0x170000FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000928")]
				[Address(RVA = "0xA42034", Offset = "0xA42034", VA = "0xA42034", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600092A")]
				[Address(RVA = "0xA4207C", Offset = "0xA4207C", VA = "0xA4207C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xA41A90", Offset = "0xA41A90", VA = "0xA41A90")]
			[DebuggerHidden]
			public <_SwitchWeapon>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6000926")]
			[Address(RVA = "0xA41ABC", Offset = "0xA41ABC", VA = "0xA41ABC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000927")]
			[Address(RVA = "0xA41AC0", Offset = "0xA41AC0", VA = "0xA41AC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000929")]
			[Address(RVA = "0xA4203C", Offset = "0xA4203C", VA = "0xA4203C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB5C", Offset = "0x50BB5C")]
		private sealed class <_UnSheathWeapon>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int weaponNumber;

			[Token(Token = "0x170000FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600092E")]
				[Address(RVA = "0xA425D0", Offset = "0xA425D0", VA = "0xA425D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000100")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000930")]
				[Address(RVA = "0xA42618", Offset = "0xA42618", VA = "0xA42618", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600092B")]
			[Address(RVA = "0xA42084", Offset = "0xA42084", VA = "0xA42084")]
			[DebuggerHidden]
			public <_UnSheathWeapon>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600092C")]
			[Address(RVA = "0xA420B0", Offset = "0xA420B0", VA = "0xA420B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600092D")]
			[Address(RVA = "0xA420B4", Offset = "0xA420B4", VA = "0xA420B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600092F")]
			[Address(RVA = "0xA425D8", Offset = "0xA425D8", VA = "0xA425D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB6C", Offset = "0x50BB6C")]
		private sealed class <_SheathWeapon>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int weaponNumber;

			[Token(Token = "0x4000A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int weaponTo;

			[Token(Token = "0x17000101")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000934")]
				[Address(RVA = "0xA41A40", Offset = "0xA41A40", VA = "0xA41A40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000102")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000936")]
				[Address(RVA = "0xA41A88", Offset = "0xA41A88", VA = "0xA41A88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000931")]
			[Address(RVA = "0xA411F4", Offset = "0xA411F4", VA = "0xA411F4")]
			[DebuggerHidden]
			public <_SheathWeapon>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000932")]
			[Address(RVA = "0xA41220", Offset = "0xA41220", VA = "0xA41220", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000933")]
			[Address(RVA = "0xA41224", Offset = "0xA41224", VA = "0xA41224", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000935")]
			[Address(RVA = "0xA41A48", Offset = "0xA41A48", VA = "0xA41A48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB7C", Offset = "0x50BB7C")]
		private sealed class <_DualUnSheath>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int weaponNumber;

			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x17000103")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600093A")]
				[Address(RVA = "0xA404F8", Offset = "0xA404F8", VA = "0xA404F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000104")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600093C")]
				[Address(RVA = "0xA40540", Offset = "0xA40540", VA = "0xA40540", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000937")]
			[Address(RVA = "0xA3FFE8", Offset = "0xA3FFE8", VA = "0xA3FFE8")]
			[DebuggerHidden]
			public <_DualUnSheath>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000938")]
			[Address(RVA = "0xA40014", Offset = "0xA40014", VA = "0xA40014", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000939")]
			[Address(RVA = "0xA40018", Offset = "0xA40018", VA = "0xA40018", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600093B")]
			[Address(RVA = "0xA40500", Offset = "0xA40500", VA = "0xA40500", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB8C", Offset = "0x50BB8C")]
		private sealed class <_DualSheath>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int weaponNumber;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int weaponTo;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x17000105")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000940")]
				[Address(RVA = "0xA3FF98", Offset = "0xA3FF98", VA = "0xA3FF98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000106")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000942")]
				[Address(RVA = "0xA3FFE0", Offset = "0xA3FFE0", VA = "0xA3FFE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600093D")]
			[Address(RVA = "0xA3FAFC", Offset = "0xA3FAFC", VA = "0xA3FAFC")]
			[DebuggerHidden]
			public <_DualSheath>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x600093E")]
			[Address(RVA = "0xA3FB28", Offset = "0xA3FB28", VA = "0xA3FB28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600093F")]
			[Address(RVA = "0xA3FB2C", Offset = "0xA3FB2C", VA = "0xA3FB2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000941")]
			[Address(RVA = "0xA3FFA0", Offset = "0xA3FFA0", VA = "0xA3FFA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BB9C", Offset = "0x50BB9C")]
		private sealed class <_InstantWeaponSwitch>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int weaponNumber;

			[Token(Token = "0x17000107")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000946")]
				[Address(RVA = "0xA411A4", Offset = "0xA411A4", VA = "0xA411A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000108")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000948")]
				[Address(RVA = "0xA411EC", Offset = "0xA411EC", VA = "0xA411EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000943")]
			[Address(RVA = "0xA40C8C", Offset = "0xA40C8C", VA = "0xA40C8C")]
			[DebuggerHidden]
			public <_InstantWeaponSwitch>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000944")]
			[Address(RVA = "0xA40CB8", Offset = "0xA40CB8", VA = "0xA40CB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000945")]
			[Address(RVA = "0xA40CBC", Offset = "0xA40CBC", VA = "0xA40CBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000947")]
			[Address(RVA = "0xA411AC", Offset = "0xA411AC", VA = "0xA411AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BBAC", Offset = "0x50BBAC")]
		private sealed class <_HideAllWeapons>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool timed;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool resetToUnarmed;

			[Token(Token = "0x17000109")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600094C")]
				[Address(RVA = "0xA40C3C", Offset = "0xA40C3C", VA = "0xA40C3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600094E")]
				[Address(RVA = "0xA40C84", Offset = "0xA40C84", VA = "0xA40C84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000949")]
			[Address(RVA = "0xA40548", Offset = "0xA40548", VA = "0xA40548")]
			[DebuggerHidden]
			public <_HideAllWeapons>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x600094A")]
			[Address(RVA = "0xA40574", Offset = "0xA40574", VA = "0xA40574", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600094B")]
			[Address(RVA = "0xA40578", Offset = "0xA40578", VA = "0xA40578", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600094D")]
			[Address(RVA = "0xA40C44", Offset = "0xA40C44", VA = "0xA40C44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BBBC", Offset = "0x50BBBC")]
		private sealed class <_WeaponVisibility>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RPGCharacterWeaponController <>4__this;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int weaponNumber;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool visible;

			[Token(Token = "0x4000A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
			public bool dual;

			[Token(Token = "0x1700010B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000952")]
				[Address(RVA = "0xA428FC", Offset = "0xA428FC", VA = "0xA428FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000954")]
				[Address(RVA = "0xA42944", Offset = "0xA42944", VA = "0xA42944", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0xA42620", Offset = "0xA42620", VA = "0xA42620")]
			[DebuggerHidden]
			public <_WeaponVisibility>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6000950")]
			[Address(RVA = "0xA4264C", Offset = "0xA4264C", VA = "0xA4264C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000951")]
			[Address(RVA = "0xA42650", Offset = "0xA42650", VA = "0xA42650", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000953")]
			[Address(RVA = "0xA42904", Offset = "0xA42904", VA = "0xA42904", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RPGCharacterController rpgCharacterController;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int rightWeapon;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public int leftWeapon;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool isSwitchingFinished;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[HideInInspector]
		public bool isWeaponSwitching;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[HideInInspector]
		public bool instantWeaponSwitch;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[HideInInspector]
		public bool dualSwitch;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject twoHandAxe;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject twoHandSword;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject twoHandSpear;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject twoHandBow;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject twoHandCrossbow;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject staff;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject swordL;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject swordR;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject maceL;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject maceR;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject daggerL;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject daggerR;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject itemL;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject itemR;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject shield;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject pistolL;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject pistolR;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject rifle;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject spear;

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xDDA738", Offset = "0xDDA738", VA = "0xDDA738")]
		private void Awake()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xDD4ED8", Offset = "0xDD4ED8", VA = "0xDD4ED8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5164C0", Offset = "0x5164C0")]
		public IEnumerator _SwitchWeapon(int weaponNumber)
		{
			return null;
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xDDA7E4", Offset = "0xDDA7E4", VA = "0xDDA7E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516520", Offset = "0x516520")]
		public IEnumerator _UnSheathWeapon(int weaponNumber)
		{
			return null;
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xDDA86C", Offset = "0xDDA86C", VA = "0xDDA86C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516580", Offset = "0x516580")]
		public IEnumerator _SheathWeapon(int weaponNumber, int weaponTo)
		{
			return null;
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xDDA8F8", Offset = "0xDDA8F8", VA = "0xDDA8F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5165E0", Offset = "0x5165E0")]
		private IEnumerator _DualUnSheath(int weaponNumber)
		{
			return null;
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xDDA980", Offset = "0xDDA980", VA = "0xDDA980")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516640", Offset = "0x516640")]
		private IEnumerator _DualSheath(int weaponNumber, int weaponTo)
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xDDAA0C", Offset = "0xDDAA0C", VA = "0xDDAA0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5166A0", Offset = "0x5166A0")]
		private IEnumerator _InstantWeaponSwitch(int weaponNumber)
		{
			return null;
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xDDAA94", Offset = "0xDDAA94", VA = "0xDDAA94")]
		private void DoWeaponSwitch(int weaponSwitch, int weaponVisibility, int weaponNumber, int leftRight, bool sheath)
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xDD4D68", Offset = "0xDD4D68", VA = "0xDD4D68")]
		public void SwitchWeaponTwoHand(int upDown)
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xDD4E2C", Offset = "0xDD4E2C", VA = "0xDD4E2C")]
		public void SwitchWeaponLeftRight(int leftRight)
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xDDAEE8", Offset = "0xDDAEE8", VA = "0xDDAEE8")]
		public void WeaponSwitch()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xDDAEF8", Offset = "0xDDAEF8", VA = "0xDDAEF8")]
		public void SetSheathLocation(int location)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xDD98B0", Offset = "0xDD98B0", VA = "0xDD98B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516700", Offset = "0x516700")]
		public IEnumerator _HideAllWeapons(bool timed, bool resetToUnarmed)
		{
			return null;
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xDDAF60", Offset = "0xDDAF60", VA = "0xDDAF60")]
		private void SetAnimator(int weapon, int weaponSwitch, int Lweapon, int Rweapon, int weaponSide)
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xDDAE40", Offset = "0xDDAE40", VA = "0xDDAE40")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516760", Offset = "0x516760")]
		public IEnumerator _WeaponVisibility(int weaponNumber, bool visible, bool dual)
		{
			return null;
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xDDB47C", Offset = "0xDDB47C", VA = "0xDDB47C")]
		public bool IsNoWeapon(int weaponNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xDDB488", Offset = "0xDDB488", VA = "0xDDB488")]
		public bool IsLeftWeapon(int weaponNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xDD5424", Offset = "0xDD5424", VA = "0xDD5424")]
		public bool HasLeftWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xDDB4B8", Offset = "0xDDB4B8", VA = "0xDDB4B8")]
		public bool IsRightWeapon(int weaponNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xDD54A0", Offset = "0xDD54A0", VA = "0xDD54A0")]
		public bool HasRightWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xDD5518", Offset = "0xDD5518", VA = "0xDD5518")]
		public bool HasDualWeapons()
		{
			return default(bool);
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xDD5554", Offset = "0xDD5554", VA = "0xDD5554")]
		public bool HasTwoHandedWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xDDAE18", Offset = "0xDDAE18", VA = "0xDDAE18")]
		public bool Is2HandedWeapon(int weaponNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xDD6DBC", Offset = "0xDD6DBC", VA = "0xDD6DBC")]
		public bool Is1HandedWeapon(int weaponNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xDDB4EC", Offset = "0xDDB4EC", VA = "0xDDB4EC")]
		public RPGCharacterWeaponController()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x20001D2")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700010D")]
		public bool Highlight
		{
			[Token(Token = "0x6000955")]
			[Address(RVA = "0x8E7C64", Offset = "0x8E7C64", VA = "0x8E7C64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000956")]
			[Address(RVA = "0x8E7C6C", Offset = "0x8E7C6C", VA = "0x8E7C6C")]
			set
			{
			}
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x8E7C78", Offset = "0x8E7C78", VA = "0x8E7C78")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x8E7E40", Offset = "0x8E7E40", VA = "0x8E7E40", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x8E7E68", Offset = "0x8E7E68", VA = "0x8E7E68", Slot = "5")]
		public override void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x8E7E90", Offset = "0x8E7E90", VA = "0x8E7E90")]
		private void Awake()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x8E7D40", Offset = "0x8E7D40", VA = "0x8E7D40")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x8E8164", Offset = "0x8E8164", VA = "0x8E8164")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700010E")]
		public bool InRange
		{
			[Token(Token = "0x600095E")]
			[Address(RVA = "0xA5A658", Offset = "0xA5A658", VA = "0xA5A658")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600095F")]
			[Address(RVA = "0xA5A660", Offset = "0xA5A660", VA = "0xA5A660")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public bool Targeted
		{
			[Token(Token = "0x6000960")]
			[Address(RVA = "0xA5A7DC", Offset = "0xA5A7DC", VA = "0xA5A7DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000961")]
			[Address(RVA = "0xA5A7E4", Offset = "0xA5A7E4", VA = "0xA5A7E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xA5A7F0", Offset = "0xA5A7F0", VA = "0xA5A7F0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xA5A66C", Offset = "0xA5A66C", VA = "0xA5A66C")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xA5A95C", Offset = "0xA5A95C", VA = "0xA5A95C")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50BBCC", Offset = "0x50BBCC")]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x17000110")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000965")]
			[Address(RVA = "0x79FEE0", Offset = "0x79FEE0", VA = "0x79FEE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000966")]
			[Address(RVA = "0x79FEE8", Offset = "0x79FEE8", VA = "0x79FEE8")]
			set
			{
			}
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x79FF04", Offset = "0x79FF04", VA = "0x79FF04", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x7A0144", Offset = "0x7A0144", VA = "0x7A0144", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x7A0A5C", Offset = "0x7A0A5C", VA = "0x7A0A5C", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x7A0EF0", Offset = "0x7A0EF0", VA = "0x7A0EF0", Slot = "8")]
		protected override void MoveGrabbedObject(UnityEngine.Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x7A11B0", Offset = "0x7A11B0", VA = "0x7A11B0")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x7A03B8", Offset = "0x7A03B8", VA = "0x7A03B8")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x7A12A0", Offset = "0x7A12A0", VA = "0x7A12A0")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x7A16FC", Offset = "0x7A16FC", VA = "0x7A16FC", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x7A1714", Offset = "0x7A1714", VA = "0x7A1714", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x7A171C", Offset = "0x7A171C", VA = "0x7A171C")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x77EECC", Offset = "0x77EECC", VA = "0x77EECC")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x77EF84", Offset = "0x77EF84", VA = "0x77EF84")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x77F03C", Offset = "0x77F03C", VA = "0x77F03C")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x20001D7")]
		public enum CrosshairState
		{
			[Token(Token = "0x4000A56")]
			Disabled,
			[Token(Token = "0x4000A57")]
			Enabled,
			[Token(Token = "0x4000A58")]
			Targeted
		}

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x77F0FC", Offset = "0x77F0FC", VA = "0x77F0FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x77F168", Offset = "0x77F168", VA = "0x77F168")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x77F204", Offset = "0x77F204", VA = "0x77F204")]
		private void Update()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x77F24C", Offset = "0x77F24C", VA = "0x77F24C")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6000978")]
		[Address(RVA = "0x99954C", Offset = "0x99954C", VA = "0x99954C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x999638", Offset = "0x999638", VA = "0x999638")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x999644", Offset = "0x999644", VA = "0x999644")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x999650", Offset = "0x999650", VA = "0x999650")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x8D45D0", Offset = "0x8D45D0", VA = "0x8D45D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x8D4624", Offset = "0x8D4624", VA = "0x8D4624")]
		private void Update()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x8D4990", Offset = "0x8D4990", VA = "0x8D4990")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x8D4A94", Offset = "0x8D4A94", VA = "0x8D4A94")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x8D4628", Offset = "0x8D4628", VA = "0x8D4628")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x8D4B98", Offset = "0x8D4B98", VA = "0x8D4B98")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x20001DB")]
		public enum ContactTest
		{
			[Token(Token = "0x4000A6B")]
			PerpenTest,
			[Token(Token = "0x4000A6C")]
			BackwardsPress
		}

		[Token(Token = "0x4000A5C")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x4000A5D")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private UnityEngine.Vector3 _localButtonDirection;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5101DC", Offset = "0x5101DC")]
		private InteractableState <CurrentButtonState>k__BackingField;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x17000111")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0x8D7E14", Offset = "0x8D7E14", VA = "0x8D7E14", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000112")]
		public UnityEngine.Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6000983")]
			[Address(RVA = "0x8D7E1C", Offset = "0x8D7E1C", VA = "0x8D7E1C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000113")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6000984")]
			[Address(RVA = "0x8D7E28", Offset = "0x8D7E28", VA = "0x8D7E28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A40", Offset = "0x516A40")]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6000985")]
			[Address(RVA = "0x8D7E30", Offset = "0x8D7E30", VA = "0x8D7E30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A50", Offset = "0x516A50")]
			private set
			{
			}
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x8D7E38", Offset = "0x8D7E38", VA = "0x8D7E38", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x8D7F4C", Offset = "0x8D7F4C", VA = "0x8D7F4C")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x8D8164", Offset = "0x8D8164", VA = "0x8D8164", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x8D8718", Offset = "0x8D8718", VA = "0x8D8718")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x8D87C4", Offset = "0x8D87C4", VA = "0x8D87C4")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x8D8630", Offset = "0x8D8630", VA = "0x8D8630")]
		private bool IsValidContact(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x8D88CC", Offset = "0x8D88CC", VA = "0x8D88CC")]
		private bool PassEntryTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x8D8950", Offset = "0x8D8950", VA = "0x8D8950")]
		private bool PassPerpTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x8D89DC", Offset = "0x8D89DC", VA = "0x8D89DC")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5101FC", Offset = "0x5101FC")]
		private Collider <Collider>k__BackingField;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x51020C", Offset = "0x51020C")]
		private Interactable <ParentInteractable>k__BackingField;

		[Token(Token = "0x17000114")]
		public Collider Collider
		{
			[Token(Token = "0x600098F")]
			[Address(RVA = "0x8D8C28", Offset = "0x8D8C28", VA = "0x8D8C28", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A60", Offset = "0x516A60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000990")]
			[Address(RVA = "0x8D8C30", Offset = "0x8D8C30", VA = "0x8D8C30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A70", Offset = "0x516A70")]
			private set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000991")]
			[Address(RVA = "0x8D8C38", Offset = "0x8D8C38", VA = "0x8D8C38", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A80", Offset = "0x516A80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000992")]
			[Address(RVA = "0x8D8C40", Offset = "0x8D8C40", VA = "0x8D8C40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516A90", Offset = "0x516A90")]
			private set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000993")]
			[Address(RVA = "0x8D8C48", Offset = "0x8D8C48", VA = "0x8D8C48", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x8D8C98", Offset = "0x8D8C98", VA = "0x8D8C98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x8D8D2C", Offset = "0x8D8D2C", VA = "0x8D8D2C")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000117")]
		Collider Collider
		{
			[Token(Token = "0x6000996")]
			get;
		}

		[Token(Token = "0x17000118")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000997")]
			get;
		}

		[Token(Token = "0x17000119")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000998")]
			get;
		}
	}
	[Token(Token = "0x20001DE")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x8D80AC", Offset = "0x8D80AC", VA = "0x8D80AC")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public enum InteractionType
	{
		[Token(Token = "0x4000A75")]
		Enter,
		[Token(Token = "0x4000A76")]
		Stay,
		[Token(Token = "0x4000A77")]
		Exit
	}
	[Token(Token = "0x20001E0")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x20001E1")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4000A89")]
			Mesh,
			[Token(Token = "0x4000A8A")]
			Skeleton,
			[Token(Token = "0x4000A8B")]
			Both
		}

		[Token(Token = "0x20001E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC2C", Offset = "0x50BC2C")]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000125")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009BB")]
				[Address(RVA = "0x7E3AF4", Offset = "0x7E3AF4", VA = "0x7E3AF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009BD")]
				[Address(RVA = "0x7E3B3C", Offset = "0x7E3B3C", VA = "0x7E3B3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009B8")]
			[Address(RVA = "0x7E3860", Offset = "0x7E3860", VA = "0x7E3860")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x60009B9")]
			[Address(RVA = "0x7E388C", Offset = "0x7E388C", VA = "0x7E388C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009BA")]
			[Address(RVA = "0x7E3890", Offset = "0x7E3890", VA = "0x7E3890", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009BC")]
			[Address(RVA = "0x7E3AFC", Offset = "0x7E3AFC", VA = "0x7E3AFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A78")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x51023C", Offset = "0x51023C")]
		private static HandsManager <Instance>k__BackingField;

		[Token(Token = "0x1700011A")]
		public OVRHand RightHand
		{
			[Token(Token = "0x600099A")]
			[Address(RVA = "0xD488F8", Offset = "0xD488F8", VA = "0xD488F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099B")]
			[Address(RVA = "0xD48930", Offset = "0xD48930", VA = "0xD48930")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x600099C")]
			[Address(RVA = "0xD489A0", Offset = "0xD489A0", VA = "0xD489A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099D")]
			[Address(RVA = "0xD489D8", Offset = "0xD489D8", VA = "0xD489D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x600099E")]
			[Address(RVA = "0xD48A48", Offset = "0xD48A48", VA = "0xD48A48")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099F")]
			[Address(RVA = "0xD48A80", Offset = "0xD48A80", VA = "0xD48A80")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xD48AF0", Offset = "0xD48AF0", VA = "0xD48AF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0xD48B28", Offset = "0xD48B28", VA = "0xD48B28")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xD48B98", Offset = "0xD48B98", VA = "0xD48B98")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A3")]
			[Address(RVA = "0xD48BD0", Offset = "0xD48BD0", VA = "0xD48BD0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x60009A4")]
			[Address(RVA = "0xD48C40", Offset = "0xD48C40", VA = "0xD48C40")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xD48C74", Offset = "0xD48C74", VA = "0xD48C74")]
			private set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xD48CE0", Offset = "0xD48CE0", VA = "0xD48CE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0xD48D14", Offset = "0xD48D14", VA = "0xD48D14")]
			private set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0xD48D80", Offset = "0xD48D80", VA = "0xD48D80")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A9")]
			[Address(RVA = "0xD48DB4", Offset = "0xD48DB4", VA = "0xD48DB4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0xD48E20", Offset = "0xD48E20", VA = "0xD48E20")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xD48E54", Offset = "0xD48E54", VA = "0xD48E54")]
			private set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0xD48EC0", Offset = "0xD48EC0", VA = "0xD48EC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0xD48EF4", Offset = "0xD48EF4", VA = "0xD48EF4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public static HandsManager Instance
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xD48F60", Offset = "0xD48F60", VA = "0xD48F60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516AA0", Offset = "0x516AA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009AF")]
			[Address(RVA = "0xD48FAC", Offset = "0xD48FAC", VA = "0xD48FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516AB0", Offset = "0x516AB0")]
			private set
			{
			}
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xD49000", Offset = "0xD49000", VA = "0xD49000")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xD493D4", Offset = "0xD493D4", VA = "0xD493D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xD4935C", Offset = "0xD4935C", VA = "0xD4935C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516AC0", Offset = "0x516AC0")]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xD4945C", Offset = "0xD4945C", VA = "0xD4945C")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xD49540", Offset = "0xD49540", VA = "0xD49540")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xD49720", Offset = "0xD49720", VA = "0xD49720")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xD4995C", Offset = "0xD4995C", VA = "0xD4995C")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xD49AE8", Offset = "0xD49AE8", VA = "0xD49AE8")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E4")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x60009CF")]
			[Address(RVA = "0x7E4350", Offset = "0x7E4350", VA = "0x7E4350")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000127")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xCE8F5C", Offset = "0xCE8F5C", VA = "0xCE8F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xCE8F64", Offset = "0xCE8F64", VA = "0xCE8F64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xCE8F6C", Offset = "0xCE8F6C", VA = "0xCE8F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0xCE8F74", Offset = "0xCE8F74", VA = "0xCE8F74", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000011")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xCE8F7C", Offset = "0xCE8F7C", VA = "0xCE8F7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516B70", Offset = "0x516B70")]
			add
			{
			}
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xCE901C", Offset = "0xCE901C", VA = "0xCE901C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516B80", Offset = "0x516B80")]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xCE912C", Offset = "0xCE912C", VA = "0xCE912C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516B90", Offset = "0x516B90")]
			add
			{
			}
			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xCE91CC", Offset = "0xCE91CC", VA = "0xCE91CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516BA0", Offset = "0x516BA0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xCE92DC", Offset = "0xCE92DC", VA = "0xCE92DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516BB0", Offset = "0x516BB0")]
			add
			{
			}
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xCE937C", Offset = "0xCE937C", VA = "0xCE937C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516BC0", Offset = "0x516BC0")]
			remove
			{
			}
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xCE90BC", Offset = "0xCE90BC", VA = "0xCE90BC", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xCE926C", Offset = "0xCE926C", VA = "0xCE926C", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xCE941C", Offset = "0xCE941C", VA = "0xCE941C", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x60009CB")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xCE948C", Offset = "0xCE948C", VA = "0xCE948C", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xCE95B8", Offset = "0xCE95B8", VA = "0xCE95B8", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xCE96E4", Offset = "0xCE96E4", VA = "0xCE96E4")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4000A97")]
		None,
		[Token(Token = "0x4000A98")]
		Proximity,
		[Token(Token = "0x4000A99")]
		Contact,
		[Token(Token = "0x4000A9A")]
		Action
	}
	[Token(Token = "0x20001E6")]
	public enum InteractableState
	{
		[Token(Token = "0x4000A9C")]
		Default,
		[Token(Token = "0x4000A9D")]
		ProximityState,
		[Token(Token = "0x4000A9E")]
		ContactState,
		[Token(Token = "0x4000A9F")]
		ActionState
	}
	[Token(Token = "0x20001E7")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xCE983C", Offset = "0xCE983C", VA = "0xCE983C")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x1700012B")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xCE9744", Offset = "0xCE9744", VA = "0xCE9744")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xCE94EC", Offset = "0xCE94EC", VA = "0xCE94EC")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xCE9618", Offset = "0xCE9618", VA = "0xCE9618")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xCE97A8", Offset = "0xCE97A8", VA = "0xCE97A8")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x20001EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC3C", Offset = "0x50BC3C")]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4000AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x4000AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4000AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x1700012C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009DE")]
				[Address(RVA = "0x7E48B4", Offset = "0x7E48B4", VA = "0x7E48B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009E0")]
				[Address(RVA = "0x7E48FC", Offset = "0x7E48FC", VA = "0x7E48FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009DA")]
			[Address(RVA = "0x7E439C", Offset = "0x7E439C", VA = "0x7E439C")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60009DB")]
			[Address(RVA = "0x7E43C8", Offset = "0x7E43C8", VA = "0x7E43C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009DC")]
			[Address(RVA = "0x7E4438", Offset = "0x7E4438", VA = "0x7E4438", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009DD")]
			[Address(RVA = "0x7E43E4", Offset = "0x7E43E4", VA = "0x7E43E4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60009DF")]
			[Address(RVA = "0x7E48BC", Offset = "0x7E48BC", VA = "0x7E48BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xCEA5C0", Offset = "0xCEA5C0", VA = "0xCEA5C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xCEA63C", Offset = "0xCEA63C", VA = "0xCEA63C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516BD0", Offset = "0x516BD0")]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xCEA6DC", Offset = "0xCEA6DC", VA = "0xCEA6DC")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xCEA7C4", Offset = "0xCEA7C4", VA = "0xCEA7C4")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700012E")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0xCEA7CC", Offset = "0xCEA7CC", VA = "0xCEA7CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xCEA94C", Offset = "0xCEA94C", VA = "0xCEA94C")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xCEA9F4", Offset = "0xCEA9F4", VA = "0xCEA9F4")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xCEAA9C", Offset = "0xCEAA9C", VA = "0xCEAA9C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xCEAD64", Offset = "0xCEAD64", VA = "0xCEAD64")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xCEADAC", Offset = "0xCEADAC", VA = "0xCEADAC")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xCEB05C", Offset = "0xCEB05C", VA = "0xCEB05C")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xCEB1A8", Offset = "0xCEB1A8", VA = "0xCEB1A8")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x20001ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC4C", Offset = "0x50BC4C")]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x17000133")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009FA")]
				[Address(RVA = "0x7DE064", Offset = "0x7DE064", VA = "0x7DE064", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000134")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009FC")]
				[Address(RVA = "0x7DE0AC", Offset = "0x7DE0AC", VA = "0x7DE0AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x7DDC30", Offset = "0x7DDC30", VA = "0x7DDC30")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x7DDC5C", Offset = "0x7DDC5C", VA = "0x7DDC5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x7DDC60", Offset = "0x7DDC60", VA = "0x7DDC60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009FB")]
			[Address(RVA = "0x7DE06C", Offset = "0x7DE06C", VA = "0x7DE06C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AB8")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3[] _velocityFrames;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 _position;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700012F")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0x147983C", Offset = "0x147983C", VA = "0x147983C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000130")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0x1479844", Offset = "0x1479844", VA = "0x1479844", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000131")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0x147984C", Offset = "0x147984C", VA = "0x147984C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000132")]
		public override bool EnableState
		{
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0x1479854", Offset = "0x1479854", VA = "0x1479854", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009ED")]
			[Address(RVA = "0x1479880", Offset = "0x1479880", VA = "0x1479880", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x14798BC", Offset = "0x14798BC", VA = "0x14798BC", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x1479974", Offset = "0x1479974", VA = "0x1479974")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516C80", Offset = "0x516C80")]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x14799EC", Offset = "0x14799EC", VA = "0x14799EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x1479C8C", Offset = "0x1479C8C", VA = "0x1479C8C")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x1479E18", Offset = "0x1479E18", VA = "0x1479E18")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x1479F10", Offset = "0x1479F10", VA = "0x1479F10", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x147A208", Offset = "0x147A208", VA = "0x147A208", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x147A20C", Offset = "0x147A20C", VA = "0x147A20C", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x147A210", Offset = "0x147A210", VA = "0x147A210")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5102CC", Offset = "0x5102CC")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5102DC", Offset = "0x5102DC")]
		private bool <ToolActivateState>k__BackingField;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5102EC", Offset = "0x5102EC")]
		private float <SphereRadius>k__BackingField;

		[Token(Token = "0x17000135")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x147A228", Offset = "0x147A228", VA = "0x147A228", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D30", Offset = "0x516D30")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x147A230", Offset = "0x147A230", VA = "0x147A230")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D40", Offset = "0x516D40")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public bool EnableState
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x147A238", Offset = "0x147A238", VA = "0x147A238", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x147A254", Offset = "0x147A254", VA = "0x147A254", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x147A274", Offset = "0x147A274", VA = "0x147A274", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D50", Offset = "0x516D50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x147A27C", Offset = "0x147A27C", VA = "0x147A27C", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D60", Offset = "0x516D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public float SphereRadius
		{
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0x147A288", Offset = "0x147A288", VA = "0x147A288")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D70", Offset = "0x516D70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x147A290", Offset = "0x147A290", VA = "0x147A290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D80", Offset = "0x516D80")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x147A298", Offset = "0x147A298", VA = "0x147A298")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x147A2E0", Offset = "0x147A2E0", VA = "0x147A2E0", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x147A2E4", Offset = "0x147A2E4", VA = "0x147A2E4")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4000ACB")]
		None = 0,
		[Token(Token = "0x4000ACC")]
		Ray = 1,
		[Token(Token = "0x4000ACD")]
		Poke = 4,
		[Token(Token = "0x4000ACE")]
		All = -1
	}
	[Token(Token = "0x20001F0")]
	public enum ToolInputState
	{
		[Token(Token = "0x4000AD0")]
		Inactive,
		[Token(Token = "0x4000AD1")]
		PrimaryInputDown,
		[Token(Token = "0x4000AD2")]
		PrimaryInputDownStay,
		[Token(Token = "0x4000AD3")]
		PrimaryInputUp
	}
	[Token(Token = "0x20001F1")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xCE96EC", Offset = "0xCE96EC", VA = "0xCE96EC")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5102FC", Offset = "0x5102FC")]
		private bool <IsRightHandedTool>k__BackingField;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x51030C", Offset = "0x51030C")]
		private UnityEngine.Vector3 <Velocity>k__BackingField;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x51031C", Offset = "0x51031C")]
		private UnityEngine.Vector3 <InteractionPosition>k__BackingField;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000139")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0xCE9900", Offset = "0xCE9900", VA = "0xCE9900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0xCE9908", Offset = "0xCE9908", VA = "0xCE9908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516D90", Offset = "0x516D90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0xCE9910", Offset = "0xCE9910", VA = "0xCE9910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DA0", Offset = "0x516DA0")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000A0C")]
			get;
		}

		[Token(Token = "0x1700013C")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6000A0D")]
			get;
		}

		[Token(Token = "0x1700013D")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6000A0E")]
			get;
		}

		[Token(Token = "0x1700013E")]
		public UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0xCE991C", Offset = "0xCE991C", VA = "0xCE991C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DB0", Offset = "0x516DB0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0xCE9928", Offset = "0xCE9928", VA = "0xCE9928")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DC0", Offset = "0x516DC0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public UnityEngine.Vector3 InteractionPosition
		{
			[Token(Token = "0x6000A11")]
			[Address(RVA = "0xCE9934", Offset = "0xCE9934", VA = "0xCE9934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DD0", Offset = "0x516DD0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xCE9940", Offset = "0xCE9940", VA = "0xCE9940")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DE0", Offset = "0x516DE0")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6000A17")]
			get;
			[Token(Token = "0x6000A18")]
			set;
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xCE994C", Offset = "0xCE994C", VA = "0xCE994C")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000A14")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6000A15")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6000A16")]
		public abstract void DeFocus();

		[Token(Token = "0x6000A19")]
		public abstract void Initialize();

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xCE9954", Offset = "0xCE9954", VA = "0xCE9954")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xCE99A0", Offset = "0xCE99A0", VA = "0xCE99A0")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xCE99F4", Offset = "0xCE99F4", VA = "0xCE99F4", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xCE9CA4", Offset = "0xCE9CA4", VA = "0xCE9CA4", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xCEA430", Offset = "0xCEA430", VA = "0xCEA430")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public interface InteractableToolView
	{
		[Token(Token = "0x17000141")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6000A1F")]
			get;
		}

		[Token(Token = "0x17000142")]
		bool EnableState
		{
			[Token(Token = "0x6000A21")]
			get;
			[Token(Token = "0x6000A22")]
			set;
		}

		[Token(Token = "0x17000143")]
		bool ToolActivateState
		{
			[Token(Token = "0x6000A23")]
			get;
			[Token(Token = "0x6000A24")]
			set;
		}

		[Token(Token = "0x6000A20")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x20001F4")]
	public class PinchStateModule
	{
		[Token(Token = "0x20001F5")]
		private enum PinchState
		{
			[Token(Token = "0x4000AE4")]
			None,
			[Token(Token = "0x4000AE5")]
			PinchDown,
			[Token(Token = "0x4000AE6")]
			PinchStay,
			[Token(Token = "0x4000AE7")]
			PinchUp
		}

		[Token(Token = "0x4000AE0")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000144")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0x99CBDC", Offset = "0x99CBDC", VA = "0x99CBDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000145")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0x99CC64", Offset = "0x99CC64", VA = "0x99CC64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000146")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0x99CCEC", Offset = "0x99CCEC", VA = "0x99CCEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x99CD74", Offset = "0x99CD74", VA = "0x99CD74")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x99CDA8", Offset = "0x99CDA8", VA = "0x99CDA8")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4000AE8")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4000AE9")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4000AEA")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4000AEB")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4000AEC")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x51033C", Offset = "0x51033C")]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000147")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xDDC41C", Offset = "0xDDC41C", VA = "0xDDC41C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000148")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xDDC424", Offset = "0xDDC424", VA = "0xDDC424", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000149")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xDDC498", Offset = "0xDDC498", VA = "0xDDC498", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014A")]
		public override bool EnableState
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xDDC4A0", Offset = "0xDDC4A0", VA = "0xDDC4A0", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xDDC4E4", Offset = "0xDDC4E4", VA = "0xDDC4E4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xDDC558", Offset = "0xDDC558", VA = "0xDDC558", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xDDC5C0", Offset = "0xDDC5C0", VA = "0xDDC5C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xDDC664", Offset = "0xDDC664", VA = "0xDDC664")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xDDC928", Offset = "0xDDC928", VA = "0xDDC928")]
		private UnityEngine.Vector3 GetRayCastOrigin()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xDDC9B0", Offset = "0xDDC9B0", VA = "0xDDC9B0", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xDDCD80", Offset = "0xDDCD80", VA = "0xDDCD80")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xDDCE90", Offset = "0xDDCE90", VA = "0xDDCE90")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xDDCFB4", Offset = "0xDDCFB4", VA = "0xDDCFB4")]
		private Interactable FindPrimaryRaycastHit(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xDDD2B8", Offset = "0xDDD2B8", VA = "0xDDD2B8")]
		private Interactable FindInteractableViaConeTest(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xDDD64C", Offset = "0xDDD64C", VA = "0xDDD64C", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xDDD734", Offset = "0xDDD734", VA = "0xDDD734", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xDDD770", Offset = "0xDDD770", VA = "0xDDD770")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000AF8")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4000AF9")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3[] linePositions;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5103B0", Offset = "0x5103B0")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x1700014B")]
		public bool EnableState
		{
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xDDC4C8", Offset = "0xDDC4C8", VA = "0xDDC4C8", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xDDC500", Offset = "0xDDC500", VA = "0xDDC500", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0xDDD868", Offset = "0xDDD868", VA = "0xDDD868", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0xDDC8EC", Offset = "0xDDC8EC", VA = "0xDDC8EC", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xDDDAC8", Offset = "0xDDDAC8", VA = "0xDDDAC8", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516DF0", Offset = "0x516DF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0xDDDAD0", Offset = "0xDDDAD0", VA = "0xDDDAD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516E00", Offset = "0x516E00")]
			set
			{
			}
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xDDD870", Offset = "0xDDD870", VA = "0xDDD870")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xDDD688", Offset = "0xDDD688", VA = "0xDDD688", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xDDDAD8", Offset = "0xDDDAD8", VA = "0xDDDAD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xDDDD4C", Offset = "0xDDDD4C", VA = "0xDDDD4C")]
		public static UnityEngine.Vector3 GetPointOnBezierCurve(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, float t)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xDDDE3C", Offset = "0xDDDE3C", VA = "0xDDDE3C")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x1700014E")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0x7A173C", Offset = "0x7A173C", VA = "0x7A173C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0x7A1744", Offset = "0x7A1744", VA = "0x7A1744")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0x7A17CC", Offset = "0x7A17CC", VA = "0x7A17CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0x7A17D4", Offset = "0x7A17D4", VA = "0x7A17D4")]
			set
			{
			}
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x7A1840", Offset = "0x7A1840", VA = "0x7A1840")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x7A1B04", Offset = "0x7A1B04", VA = "0x7A1B04")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x7A1B14", Offset = "0x7A1B14", VA = "0x7A1B14")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x7A1B24", Offset = "0x7A1B24", VA = "0x7A1B24")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xA4C660", Offset = "0xA4C660", VA = "0xA4C660")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xA4C664", Offset = "0xA4C664", VA = "0xA4C664")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xA4C69C", Offset = "0xA4C69C", VA = "0xA4C69C")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xA4C6D4", Offset = "0xA4C6D4", VA = "0xA4C6D4")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xA4C70C", Offset = "0xA4C70C", VA = "0xA4C70C")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xA4C744", Offset = "0xA4C744", VA = "0xA4C744")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xA4C77C", Offset = "0xA4C77C", VA = "0xA4C77C")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xA4C7B4", Offset = "0xA4C7B4", VA = "0xA4C7B4")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xA4C828", Offset = "0xA4C828", VA = "0xA4C828")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xA4C898", Offset = "0xA4C898", VA = "0xA4C898")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xA4DAE0", Offset = "0xA4DAE0", VA = "0xA4DAE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xA4DAE4", Offset = "0xA4DAE4", VA = "0xA4DAE4")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xA4C85C", Offset = "0xA4C85C", VA = "0xA4C85C")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xA4DB24", Offset = "0xA4DB24", VA = "0xA4DB24")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x20001FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC6C", Offset = "0x50BC6C")]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4000B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityEngine.Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4000B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4000B18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x17000150")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A64")]
				[Address(RVA = "0xA3D88C", Offset = "0xA3D88C", VA = "0xA3D88C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000151")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A66")]
				[Address(RVA = "0xA3D8D4", Offset = "0xA3D8D4", VA = "0xA3D8D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A61")]
			[Address(RVA = "0xA3D6A0", Offset = "0xA3D6A0", VA = "0xA3D6A0")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xA3D6CC", Offset = "0xA3D6CC", VA = "0xA3D6CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xA3D6D0", Offset = "0xA3D6D0", VA = "0xA3D6D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xA3D894", Offset = "0xA3D894", VA = "0xA3D894", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B09")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4000B0A")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 _panelInitialPosition;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 _prevPos;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private UnityEngine.Vector3 _lastMovedToPos;

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xC4C6F8", Offset = "0xC4C6F8", VA = "0xC4C6F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xC4C7A4", Offset = "0xC4C7A4", VA = "0xC4C7A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xC4C9F4", Offset = "0xC4C9F4", VA = "0xC4C9F4")]
		private UnityEngine.Vector3 CalculateIdealAnchorPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xC4C97C", Offset = "0xC4C97C", VA = "0xC4C97C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516E10", Offset = "0x516E10")]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC4CA40", Offset = "0xC4CA40", VA = "0xC4CA40")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x20001FE")]
		public enum SelectionState
		{
			[Token(Token = "0x4000B20")]
			Off,
			[Token(Token = "0x4000B21")]
			Selected,
			[Token(Token = "0x4000B22")]
			Highlighted
		}

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x17000152")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xAA4A5C", Offset = "0xAA4A5C", VA = "0xAA4A5C")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xAA4A64", Offset = "0xAA4A64", VA = "0xAA4A64")]
			set
			{
			}
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xAA4BE8", Offset = "0xAA4BE8", VA = "0xAA4BE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xAA4DEC", Offset = "0xAA4DEC", VA = "0xAA4DEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xAA4AEC", Offset = "0xAA4AEC", VA = "0xAA4AEC")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xAA4ED8", Offset = "0xAA4ED8", VA = "0xAA4ED8")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000200")]
		public enum SegmentType
		{
			[Token(Token = "0x4000B31")]
			Straight,
			[Token(Token = "0x4000B32")]
			LeftTurn,
			[Token(Token = "0x4000B33")]
			RightTurn,
			[Token(Token = "0x4000B34")]
			Switch
		}

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4000B29")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4000B2A")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510490", Offset = "0x510490")]
		private float <StartDistance>k__BackingField;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x17000153")]
		public float StartDistance
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xD80B84", Offset = "0xD80B84", VA = "0xD80B84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516EC0", Offset = "0x516EC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xD80B8C", Offset = "0xD80B8C", VA = "0xD80B8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516ED0", Offset = "0x516ED0")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public float GridSize
		{
			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xD80B94", Offset = "0xD80B94", VA = "0xD80B94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xD80B9C", Offset = "0xD80B9C", VA = "0xD80B9C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public int SubDivCount
		{
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0xD80BA4", Offset = "0xD80BA4", VA = "0xD80BA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0xD80BAC", Offset = "0xD80BAC", VA = "0xD80BAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public SegmentType Type
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0xD80BB4", Offset = "0xD80BB4", VA = "0xD80BB4")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000157")]
		public Pose EndPose
		{
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0xD80BBC", Offset = "0xD80BBC", VA = "0xD80BBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public float Radius
		{
			[Token(Token = "0x6000A76")]
			[Address(RVA = "0xD80F18", Offset = "0xD80F18", VA = "0xD80F18")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000159")]
		public float SegmentLength
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xD80C24", Offset = "0xD80C24", VA = "0xD80C24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xD80F28", Offset = "0xD80F28", VA = "0xD80F28")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xD80F40", Offset = "0xD80F40", VA = "0xD80F40")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xD80C64", Offset = "0xD80C64", VA = "0xD80C64")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xD80F44", Offset = "0xD80F44", VA = "0xD80F44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xD80F48", Offset = "0xD80F48", VA = "0xD80F48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xD80FB0", Offset = "0xD80FB0", VA = "0xD80FB0")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xD81878", Offset = "0xD81878", VA = "0xD81878")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xD81B24", Offset = "0xD81B24", VA = "0xD81B24")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000202")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC7C", Offset = "0x50BC7C")]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4000B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x1700015A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A8E")]
				[Address(RVA = "0xA47780", Offset = "0xA47780", VA = "0xA47780", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A90")]
				[Address(RVA = "0xA477C8", Offset = "0xA477C8", VA = "0xA477C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xA475DC", Offset = "0xA475DC", VA = "0xA475DC")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xA47608", Offset = "0xA47608", VA = "0xA47608", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xA4760C", Offset = "0xA4760C", VA = "0xA4760C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xA47788", Offset = "0xA47788", VA = "0xA47788", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B35")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4000B36")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 _oldPosition;

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xD81BF4", Offset = "0xD81BF4", VA = "0xD81BF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xD81CB0", Offset = "0xD81CB0", VA = "0xD81CB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xD81D60", Offset = "0xD81D60", VA = "0xD81D60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xD81ED8", Offset = "0xD81ED8", VA = "0xD81ED8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xD820A0", Offset = "0xD820A0", VA = "0xD820A0")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xD82188", Offset = "0xD82188", VA = "0xD82188")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xD8239C", Offset = "0xD8239C", VA = "0xD8239C")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xD8229C", Offset = "0xD8229C", VA = "0xD8229C")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xD822B0", Offset = "0xD822B0", VA = "0xD822B0")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xD823F4", Offset = "0xD823F4", VA = "0xD823F4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516EE0", Offset = "0x516EE0")]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xD8246C", Offset = "0xD8246C", VA = "0xD8246C")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x1700015C")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xD8251C", Offset = "0xD8251C", VA = "0xD8251C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xD8252C", Offset = "0xD8252C", VA = "0xD8252C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xD82534", Offset = "0xD82534", VA = "0xD82534", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xD82878", Offset = "0xD82878", VA = "0xD82878")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UnityEngine.Vector3 OFFSET;

		[Token(Token = "0x4000B4E")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4000B4F")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510590", Offset = "0x510590")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x1700015D")]
		public float Distance
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0xD82988", Offset = "0xD82988", VA = "0xD82988")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516F90", Offset = "0x516F90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0xD82990", Offset = "0xD82990", VA = "0xD82990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x516FA0", Offset = "0x516FA0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public float Scale
		{
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0xD82998", Offset = "0xD82998", VA = "0xD82998")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0xD829A0", Offset = "0xD829A0", VA = "0xD829A0")]
			set
			{
			}
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xD82530", Offset = "0xD82530", VA = "0xD82530", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xD829A8", Offset = "0xD829A8", VA = "0xD829A8")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xD8257C", Offset = "0xD8257C", VA = "0xD8257C")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xD827A0", Offset = "0xD827A0", VA = "0xD827A0")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6000A9D")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xD828E4", Offset = "0xD828E4", VA = "0xD828E4")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x2000206")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC8C", Offset = "0x50BC8C")]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4000B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x1700015F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AAC")]
				[Address(RVA = "0xA47A68", Offset = "0xA47A68", VA = "0xA47A68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000160")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AAE")]
				[Address(RVA = "0xA47AB0", Offset = "0xA47AB0", VA = "0xA47AB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xA477D0", Offset = "0xA477D0", VA = "0xA477D0")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xA477FC", Offset = "0xA477FC", VA = "0xA477FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xA47800", Offset = "0xA47800", VA = "0xA47800", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xA47A70", Offset = "0xA47A70", VA = "0xA47A70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xD82A84", Offset = "0xD82A84", VA = "0xD82A84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xD82AE4", Offset = "0xD82AE4", VA = "0xD82AE4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xD82BEC", Offset = "0xD82BEC", VA = "0xD82BEC")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xD82D5C", Offset = "0xD82D5C", VA = "0xD82D5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xD82C4C", Offset = "0xD82C4C", VA = "0xD82C4C")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xD82E38", Offset = "0xD82E38", VA = "0xD82E38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x516FB0", Offset = "0x516FB0")]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xD82EC0", Offset = "0xD82EC0", VA = "0xD82EC0")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xD82F6C", Offset = "0xD82F6C", VA = "0xD82F6C")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xD82FCC", Offset = "0xD82FCC", VA = "0xD82FCC")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x2000208")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4000B8C")]
			Start,
			[Token(Token = "0x4000B8D")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4000B8E")]
			Stop
		}

		[Token(Token = "0x2000209")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BC9C", Offset = "0x50BC9C")]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4000B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x17000161")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AC1")]
				[Address(RVA = "0xA47D2C", Offset = "0xA47D2C", VA = "0xA47D2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000162")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AC3")]
				[Address(RVA = "0xA47D74", Offset = "0xA47D74", VA = "0xA47D74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0xA47AB8", Offset = "0xA47AB8", VA = "0xA47AB8")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0xA47AE4", Offset = "0xA47AE4", VA = "0xA47AE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0xA47AE8", Offset = "0xA47AE8", VA = "0xA47AE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0xA47D34", Offset = "0xA47D34", VA = "0xA47D34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B6E")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4000B6F")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4000B70")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4000B71")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5105F0", Offset = "0x5105F0")]
		[SerializeField]
		protected float _initialSpeed;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xBDA7B4", Offset = "0xBDA7B4", VA = "0xBDA7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xBDA924", Offset = "0xBDA924", VA = "0xBDA924")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xBDA930", Offset = "0xBDA930", VA = "0xBDA930", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xBDAA88", Offset = "0xBDAA88", VA = "0xBDAA88")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xBDA898", Offset = "0xBDA898", VA = "0xBDA898")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517060", Offset = "0x517060")]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xBDAAE8", Offset = "0xBDAAE8", VA = "0xBDAAE8")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xBDAA24", Offset = "0xBDAA24", VA = "0xBDAA24")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xBDAD04", Offset = "0xBDAD04", VA = "0xBDAD04")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xBDAE40", Offset = "0xBDAE40", VA = "0xBDAE40")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xBDAD70", Offset = "0xBDAD70", VA = "0xBDAD70")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xBDAEAC", Offset = "0xBDAEAC", VA = "0xBDAEAC")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xBDAECC", Offset = "0xBDAECC", VA = "0xBDAECC")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xBDAF58", Offset = "0xBDAF58", VA = "0xBDAF58")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xBDB010", Offset = "0xBDB010", VA = "0xBDB010")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xBDB020", Offset = "0xBDB020", VA = "0xBDB020")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x17000163")]
		public float TrackLength
		{
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0xBDB08C", Offset = "0xBDB08C", VA = "0xBDB08C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0xBDB094", Offset = "0xBDB094", VA = "0xBDB094")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xBDB09C", Offset = "0xBDB09C", VA = "0xBDB09C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xBDB288", Offset = "0xBDB288", VA = "0xBDB288")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xBDB0A0", Offset = "0xBDB0A0", VA = "0xBDB0A0")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xBDB350", Offset = "0xBDB350", VA = "0xBDB350")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xBDB44C", Offset = "0xBDB44C", VA = "0xBDB44C")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class Pose
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xDD2DE8", Offset = "0xDD2DE8", VA = "0xDD2DE8")]
		public Pose()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xDD2E2C", Offset = "0xDD2E2C", VA = "0xDD2E2C")]
		public Pose(UnityEngine.Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x200020D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BCAC", Offset = "0x50BCAC")]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4000BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000165")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AD9")]
				[Address(RVA = "0xA48FEC", Offset = "0xA48FEC", VA = "0xA48FEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000166")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ADB")]
				[Address(RVA = "0xA49034", Offset = "0xA49034", VA = "0xA49034", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0xA48E1C", Offset = "0xA48E1C", VA = "0xA48E1C")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xA48E48", Offset = "0xA48E48", VA = "0xA48E48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xA48E4C", Offset = "0xA48E4C", VA = "0xA48E4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0xA48FF4", Offset = "0xA48FF4", VA = "0xA48FF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BCBC", Offset = "0x50BCBC")]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4000BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4000BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000167")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ADF")]
				[Address(RVA = "0xA49144", Offset = "0xA49144", VA = "0xA49144", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000168")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE1")]
				[Address(RVA = "0xA4918C", Offset = "0xA4918C", VA = "0xA4918C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xA4903C", Offset = "0xA4903C", VA = "0xA4903C")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xA49068", Offset = "0xA49068", VA = "0xA49068", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xA4906C", Offset = "0xA4906C", VA = "0xA4906C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xA4914C", Offset = "0xA4914C", VA = "0xA4914C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BA1")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5107D8", Offset = "0x5107D8")]
		private bool <IsMoving>k__BackingField;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x17000164")]
		public bool IsMoving
		{
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x7D5B00", Offset = "0x7D5B00", VA = "0x7D5B00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517110", Offset = "0x517110")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x7D5B08", Offset = "0x7D5B08", VA = "0x7D5B08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517120", Offset = "0x517120")]
			private set
			{
			}
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x7D5B14", Offset = "0x7D5B14", VA = "0x7D5B14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x7D5B50", Offset = "0x7D5B50", VA = "0x7D5B50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x7D5C34", Offset = "0x7D5C34", VA = "0x7D5C34")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x7D5CA8", Offset = "0x7D5CA8", VA = "0x7D5CA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517130", Offset = "0x517130")]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x7D5D30", Offset = "0x7D5D30", VA = "0x7D5D30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517190", Offset = "0x517190")]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x7D5DE8", Offset = "0x7D5DE8", VA = "0x7D5DE8")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x7D5E54", Offset = "0x7D5E54", VA = "0x7D5E54")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x7D5E5C", Offset = "0x7D5E5C", VA = "0x7D5E5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x7D5ED0", Offset = "0x7D5ED0", VA = "0x7D5ED0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x7D5FB4", Offset = "0x7D5FB4", VA = "0x7D5FB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x7D60EC", Offset = "0x7D60EC", VA = "0x7D60EC")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x7D616C", Offset = "0x7D616C", VA = "0x7D616C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x7D6248", Offset = "0x7D6248", VA = "0x7D6248")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4000BBE")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4000BBF")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4000BC0")]
		EUDT_None,
		[Token(Token = "0x4000BC1")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000211")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000212")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BCCC", Offset = "0x50BCCC")]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000169")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AFB")]
				[Address(RVA = "0xA3BDD4", Offset = "0xA3BDD4", VA = "0xA3BDD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AFD")]
				[Address(RVA = "0xA3BE1C", Offset = "0xA3BE1C", VA = "0xA3BE1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xA3BBA4", Offset = "0xA3BBA4", VA = "0xA3BBA4")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0xA3BBD0", Offset = "0xA3BBD0", VA = "0xA3BBD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0xA3BBD4", Offset = "0xA3BBD4", VA = "0xA3BBD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xA3BDDC", Offset = "0xA3BDDC", VA = "0xA3BDDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4000BC3")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4000BC4")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4000BC5")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510818", Offset = "0x510818")]
		public GameObject mainCamera;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510850", Offset = "0x510850")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xE976D0", Offset = "0xE976D0", VA = "0xE976D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xE97F2C", Offset = "0xE97F2C", VA = "0xE97F2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xE98074", Offset = "0xE98074", VA = "0xE98074")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xE981B0", Offset = "0xE981B0", VA = "0xE981B0")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xE982EC", Offset = "0xE982EC", VA = "0xE982EC")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xE98048", Offset = "0xE98048", VA = "0xE98048")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xE983CC", Offset = "0xE983CC", VA = "0xE983CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517290", Offset = "0x517290")]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xE98444", Offset = "0xE98444", VA = "0xE98444")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xE97B38", Offset = "0xE97B38", VA = "0xE97B38")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xE98598", Offset = "0xE98598", VA = "0xE98598")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xE98478", Offset = "0xE98478", VA = "0xE98478")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xE988B0", Offset = "0xE988B0", VA = "0xE988B0")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xE989A0", Offset = "0xE989A0", VA = "0xE989A0")]
		public OVROverlaySample()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xE98A30", Offset = "0xE98A30", VA = "0xE98A30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5172F0", Offset = "0x5172F0")]
		private void <Start>b__24_0(Toggle t)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xE98A88", Offset = "0xE98A88", VA = "0xE98A88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517300", Offset = "0x517300")]
		private void <Start>b__24_1(Toggle t)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xE98AE0", Offset = "0xE98AE0", VA = "0xE98AE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517310", Offset = "0x517310")]
		private void <Start>b__24_2(Toggle t)
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50BCDC", Offset = "0x50BCDC")]
	public class Hand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000214")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD3C", Offset = "0x50BD3C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__28_0;

			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x7E3660", Offset = "0x7E3660", VA = "0x7E3660")]
			public <>c()
			{
			}

			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x7E3668", Offset = "0x7E3668", VA = "0x7E3668")]
			internal bool <Start>b__28_0(Collider childCollider)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BDD")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4000BDE")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4000BDF")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4000BE0")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4000BE1")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4000BE2")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4000BE3")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4000BE4")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4000BE5")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4000BE6")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4000BE7")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xD4321C", Offset = "0xD4321C", VA = "0xD4321C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xD43278", Offset = "0xD43278", VA = "0xD43278")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xD4370C", Offset = "0xD4370C", VA = "0xD4370C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xD437F8", Offset = "0xD437F8", VA = "0xD437F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xD4395C", Offset = "0xD4395C", VA = "0xD4395C")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xD43C64", Offset = "0xD43C64", VA = "0xD43C64")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xD43D5C", Offset = "0xD43D5C", VA = "0xD43D5C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xD43EBC", Offset = "0xD43EBC", VA = "0xD43EBC")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xD439F4", Offset = "0xD439F4", VA = "0xD439F4")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xD43A48", Offset = "0xD43A48", VA = "0xD43A48")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xD435B0", Offset = "0xD435B0", VA = "0xD435B0")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xD43FF8", Offset = "0xD43FF8", VA = "0xD43FF8")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000BFC")]
		Default,
		[Token(Token = "0x4000BFD")]
		Generic,
		[Token(Token = "0x4000BFE")]
		PingPongBall,
		[Token(Token = "0x4000BFF")]
		Controller
	}
	[Token(Token = "0x2000216")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x1700016B")]
		public bool AllowPointing
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0xD48454", Offset = "0xD48454", VA = "0xD48454")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016C")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xD4845C", Offset = "0xD4845C", VA = "0xD4845C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016D")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0xD48464", Offset = "0xD48464", VA = "0xD48464")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xD4846C", Offset = "0xD4846C", VA = "0xD4846C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xD807F4", Offset = "0xD807F4", VA = "0xD807F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xD80ADC", Offset = "0xD80ADC", VA = "0xD80ADC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xD80B38", Offset = "0xD80B38", VA = "0xD80B38")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xD80B7C", Offset = "0xD80B7C", VA = "0xD80B7C")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Voice.Demo.UIShapesDemo
{
	[Token(Token = "0x2000218")]
	public class InteractionHandler : MonoBehaviour
	{
		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Multiline]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510908", Offset = "0x510908")]
		private string freshStateText;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510964", Offset = "0x510964")]
		private Text textArea;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool showJson;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5109C0", Offset = "0x5109C0")]
		[SerializeField]
		private AppVoiceExperience appVoiceExperience;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string pendingText;

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xCEB2A0", Offset = "0xCEB2A0", VA = "0xCEB2A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xCEB36C", Offset = "0xCEB36C", VA = "0xCEB36C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xCEB438", Offset = "0xCEB438", VA = "0xCEB438")]
		private void OnRequestStarted(WitRequest r)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xCEB4F8", Offset = "0xCEB4F8", VA = "0xCEB4F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xCEB550", Offset = "0xCEB550", VA = "0xCEB550")]
		public void OnResponse(WitResponseNode response)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xCEB640", Offset = "0xCEB640", VA = "0xCEB640")]
		public void OnError(string error, string message)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xCEB848", Offset = "0xCEB848", VA = "0xCEB848")]
		public void ToggleActivation()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xCEB8A8", Offset = "0xCEB8A8", VA = "0xCEB8A8")]
		public InteractionHandler()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xCEB904", Offset = "0xCEB904", VA = "0xCEB904")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517370", Offset = "0x517370")]
		private void <OnRequestStarted>b__7_0(string response)
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class ColorChanger : MonoBehaviour
	{
		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x8E7664", Offset = "0x8E7664", VA = "0x8E7664")]
		private void SetColor(Transform trans, Color color)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x8E7700", Offset = "0x8E7700", VA = "0x8E7700")]
		public void UpdateColor(WitResponseNode commandResult)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x8E7924", Offset = "0x8E7924", VA = "0x8E7924")]
		public void UpdateColor(string[] results)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x8E7794", Offset = "0x8E7794", VA = "0x8E7794")]
		public void UpdateColor(string colorName, string shape)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x8E7960", Offset = "0x8E7960", VA = "0x8E7960")]
		public ColorChanger()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[ExecuteAlways]
	public class Instructions : MonoBehaviour
	{
		[Token(Token = "0x200021B")]
		internal enum Step
		{
			[Token(Token = "0x4000C0F")]
			SetupWit,
			[Token(Token = "0x4000C10")]
			MissingServerToken,
			[Token(Token = "0x4000C11")]
			MissingClientToken,
			[Token(Token = "0x4000C12")]
			AddConfig,
			[Token(Token = "0x4000C13")]
			AddVoiceExperiences,
			[Token(Token = "0x4000C14")]
			SetConfig,
			[Token(Token = "0x4000C15")]
			Ready
		}

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] steps;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text instructionText;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Step currentStep;

		[Token(Token = "0x1700016E")]
		internal Step CurrentStep
		{
			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xCE8420", Offset = "0xCE8420", VA = "0xCE8420")]
			get
			{
				return default(Step);
			}
		}

		[Token(Token = "0x1700016F")]
		internal string CurrentStepText
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xCE8428", Offset = "0xCE8428", VA = "0xCE8428")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xCE84BC", Offset = "0xCE84BC", VA = "0xCE84BC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xCE84C4", Offset = "0xCE84C4", VA = "0xCE84C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xCE84C8", Offset = "0xCE84C8", VA = "0xCE84C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xCE84C0", Offset = "0xCE84C0", VA = "0xCE84C0")]
		private void UpdateStep()
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xCE84CC", Offset = "0xCE84CC", VA = "0xCE84CC")]
		public Instructions()
		{
		}
	}
}
namespace Oculus.Voice.Demo.BuiltInDemo
{
	[Token(Token = "0x200021C")]
	public class TimerController : MonoBehaviour
	{
		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _time;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool _timerExist;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool _timerRunning;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x510A1C", Offset = "0x510A1C")]
		public Text logText;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x510A54", Offset = "0x510A54")]
		public AudioClip buzzSound;

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xD7F30C", Offset = "0xD7F30C", VA = "0xD7F30C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xD7F3DC", Offset = "0xD7F3DC", VA = "0xD7F3DC")]
		private void Log(string msg)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xD7F370", Offset = "0xD7F370", VA = "0xD7F370")]
		private void OnElapsedTime()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xD7F46C", Offset = "0xD7F46C", VA = "0xD7F46C")]
		public void DeleteTimer()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xD7F4E0", Offset = "0xD7F4E0", VA = "0xD7F4E0")]
		public void CreateTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xD7F8B4", Offset = "0xD7F8B4", VA = "0xD7F8B4")]
		public void GetTimerIntent()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xD7F964", Offset = "0xD7F964", VA = "0xD7F964")]
		public void PauseTimer()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xD7F9B4", Offset = "0xD7F9B4", VA = "0xD7F9B4")]
		public void ResumeTimer()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xD7FA08", Offset = "0xD7FA08", VA = "0xD7FA08")]
		public void SubtractTimeTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xD7FB20", Offset = "0xD7FB20", VA = "0xD7FB20")]
		public void AddTimeToTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xD7FC2C", Offset = "0xD7FC2C", VA = "0xD7FC2C")]
		public float GetRemainingTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xD7F8DC", Offset = "0xD7F8DC", VA = "0xD7F8DC")]
		public string GetFormattedTimeFromSeconds()
		{
			return null;
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xD7F740", Offset = "0xD7F740", VA = "0xD7F740")]
		private bool ParseTime(string[] entityValues, out float time)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xD7FC34", Offset = "0xD7FC34", VA = "0xD7FC34")]
		public TimerController()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class TimerDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimerController timer;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _uiText;

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xD7FC3C", Offset = "0xD7FC3C", VA = "0xD7FC3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xD7FC98", Offset = "0xD7FC98", VA = "0xD7FC98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xD7FCE0", Offset = "0xD7FCE0", VA = "0xD7FCE0")]
		public TimerDisplay()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class WitActivation : MonoBehaviour
	{
		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppVoiceExperience voiceExperience;

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x7D6258", Offset = "0x7D6258", VA = "0x7D6258")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x7D6310", Offset = "0x7D6310", VA = "0x7D6310")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x7D636C", Offset = "0x7D636C", VA = "0x7D636C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x7D63F0", Offset = "0x7D63F0", VA = "0x7D63F0")]
		public void ActivateWit()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x7D6414", Offset = "0x7D6414", VA = "0x7D6414")]
		public WitActivation()
		{
		}
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x200021F")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4000C1E")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4000C1F")]
		public const string Tab = "    ";

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x9B5098", Offset = "0x9B5098", VA = "0x9B5098")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517380", Offset = "0x517380")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517380", Offset = "0x517380")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x9B5128", Offset = "0x9B5128", VA = "0x9B5128")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x5173E0", Offset = "0x5173E0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x5173E0", Offset = "0x5173E0")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x9B51C8", Offset = "0x9B51C8", VA = "0x9B51C8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517440", Offset = "0x517440")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517440", Offset = "0x517440")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x9B5258", Offset = "0x9B5258", VA = "0x9B5258")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x5174A0", Offset = "0x5174A0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x5174A0", Offset = "0x5174A0")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x9B52E8", Offset = "0x9B52E8", VA = "0x9B52E8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517500", Offset = "0x517500")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x517500", Offset = "0x517500")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class CAPI
	{
		[Token(Token = "0x2000221")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x2000222")]
		public enum Result
		{
			[Token(Token = "0x4000C2B")]
			Success = 0,
			[Token(Token = "0x4000C2C")]
			Failure = -1000,
			[Token(Token = "0x4000C2D")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4000C2E")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x4000C2F")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x4000C30")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x4000C31")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x4000C32")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x4000C33")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x2000223")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x4000C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x7DA030", Offset = "0x7DA030", VA = "0x7DA030")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x4000C20")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x4000C28")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x8D9218", Offset = "0x8D9218", VA = "0x8D9218")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x8D92A8", Offset = "0x8D92A8", VA = "0x8D92A8")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x8D94CC", Offset = "0x8D94CC", VA = "0x8D94CC")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x8D95B8", Offset = "0x8D95B8", VA = "0x8D95B8")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x8D9628", Offset = "0x8D9628", VA = "0x8D9628")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x8D969C", Offset = "0x8D969C", VA = "0x8D969C")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x8D971C", Offset = "0x8D971C", VA = "0x8D971C")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x8D9860", Offset = "0x8D9860", VA = "0x8D9860")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x8D98E0", Offset = "0x8D98E0", VA = "0x8D98E0")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x8D9A24", Offset = "0x8D9A24", VA = "0x8D9A24")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x8D9AA4", Offset = "0x8D9AA4", VA = "0x8D9AA4")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x8D9B24", Offset = "0x8D9B24", VA = "0x8D9B24")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x8D9BA4", Offset = "0x8D9BA4", VA = "0x8D9BA4")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x8D9C24", Offset = "0x8D9C24", VA = "0x8D9C24")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x8D9CB4", Offset = "0x8D9CB4", VA = "0x8D9CB4")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x8D9D44", Offset = "0x8D9D44", VA = "0x8D9D44")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x8D9DD4", Offset = "0x8D9DD4", VA = "0x8D9DD4")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x8D9E54", Offset = "0x8D9E54", VA = "0x8D9E54")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x8D9ED4", Offset = "0x8D9ED4", VA = "0x8D9ED4")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x8D9F64", Offset = "0x8D9F64", VA = "0x8D9F64")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x8D9FF4", Offset = "0x8D9FF4", VA = "0x8D9FF4")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x8DA084", Offset = "0x8DA084", VA = "0x8DA084")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x8DA104", Offset = "0x8DA104", VA = "0x8DA104")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x8DA1A4", Offset = "0x8DA1A4", VA = "0x8DA1A4")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x8DA220", Offset = "0x8DA220", VA = "0x8DA220")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x8DA2C0", Offset = "0x8DA2C0", VA = "0x8DA2C0")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x8DA380", Offset = "0x8DA380", VA = "0x8DA380")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x8DA450", Offset = "0x8DA450", VA = "0x8DA450")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x8DA4E0", Offset = "0x8DA4E0", VA = "0x8DA4E0")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x8DA570", Offset = "0x8DA570", VA = "0x8DA570")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x8DA600", Offset = "0x8DA600", VA = "0x8DA600")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x8DA690", Offset = "0x8DA690", VA = "0x8DA690")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x8DA720", Offset = "0x8DA720", VA = "0x8DA720")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x8DA7A0", Offset = "0x8DA7A0", VA = "0x8DA7A0")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x8DA8BC", Offset = "0x8DA8BC", VA = "0x8DA8BC")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x8DA82C", Offset = "0x8DA82C", VA = "0x8DA82C")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x8DAADC", Offset = "0x8DAADC", VA = "0x8DAADC")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x8DAC4C", Offset = "0x8DAC4C", VA = "0x8DAC4C")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000B6C")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x8DACCC", Offset = "0x8DACCC", VA = "0x8DACCC")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x8DAF74", Offset = "0x8DAF74", VA = "0x8DAF74")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x8DAFF4", Offset = "0x8DAFF4", VA = "0x8DAFF4")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x8DB164", Offset = "0x8DB164", VA = "0x8DB164")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x8DB1E4", Offset = "0x8DB1E4", VA = "0x8DB1E4")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x8DB354", Offset = "0x8DB354", VA = "0x8DB354")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x8DB3D4", Offset = "0x8DB3D4", VA = "0x8DB3D4")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x8DB544", Offset = "0x8DB544", VA = "0x8DB544")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x8DB5C4", Offset = "0x8DB5C4", VA = "0x8DB5C4")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x8DB734", Offset = "0x8DB734", VA = "0x8DB734")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x8DB7B4", Offset = "0x8DB7B4", VA = "0x8DB7B4")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x8DB834", Offset = "0x8DB834", VA = "0x8DB834")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x8DB8CC", Offset = "0x8DB8CC", VA = "0x8DB8CC")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x8DB94C", Offset = "0x8DB94C", VA = "0x8DB94C")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x8DBB24", Offset = "0x8DBB24", VA = "0x8DBB24")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x8DBC7C", Offset = "0x8DBC7C", VA = "0x8DBC7C")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x8DBAA4", Offset = "0x8DBAA4", VA = "0x8DBAA4")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x8DBCFC", Offset = "0x8DBCFC", VA = "0x8DBCFC")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x8DBD7C", Offset = "0x8DBD7C", VA = "0x8DBD7C")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x8DBE0C", Offset = "0x8DBE0C", VA = "0x8DBE0C")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x8DBE8C", Offset = "0x8DBE8C", VA = "0x8DBE8C")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x8DBF1C", Offset = "0x8DBF1C", VA = "0x8DBF1C")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x8DBF9C", Offset = "0x8DBF9C", VA = "0x8DBF9C")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x8DC01C", Offset = "0x8DC01C", VA = "0x8DC01C")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x8DC2A8", Offset = "0x8DC2A8", VA = "0x8DC2A8")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x8DC338", Offset = "0x8DC338", VA = "0x8DC338")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x8DC568", Offset = "0x8DC568", VA = "0x8DC568")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x8DC600", Offset = "0x8DC600", VA = "0x8DC600")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x8DC750", Offset = "0x8DC750", VA = "0x8DC750")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x8DC7D0", Offset = "0x8DC7D0", VA = "0x8DC7D0")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x8DC850", Offset = "0x8DC850", VA = "0x8DC850")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x8DC9A4", Offset = "0x8DC9A4", VA = "0x8DC9A4")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x8DCA24", Offset = "0x8DCA24", VA = "0x8DCA24")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x8DCB78", Offset = "0x8DCB78", VA = "0x8DCB78")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x8DCBF8", Offset = "0x8DCBF8", VA = "0x8DCBF8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x8DCC88", Offset = "0x8DCC88", VA = "0x8DCC88")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x8DCD18", Offset = "0x8DCD18", VA = "0x8DCD18")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x8DCDA8", Offset = "0x8DCDA8", VA = "0x8DCDA8")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x8DCE28", Offset = "0x8DCE28", VA = "0x8DCE28")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x8DCEB0", Offset = "0x8DCEB0", VA = "0x8DCEB0")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x8DCF38", Offset = "0x8DCF38", VA = "0x8DCF38")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x8DCFB8", Offset = "0x8DCFB8", VA = "0x8DCFB8")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x8DD038", Offset = "0x8DD038", VA = "0x8DD038")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x8DD0EC", Offset = "0x8DD0EC", VA = "0x8DD0EC")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x8DD17C", Offset = "0x8DD17C", VA = "0x8DD17C")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x8DD20C", Offset = "0x8DD20C", VA = "0x8DD20C")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x8DD28C", Offset = "0x8DD28C", VA = "0x8DD28C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x8DD30C", Offset = "0x8DD30C", VA = "0x8DD30C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x8DD38C", Offset = "0x8DD38C", VA = "0x8DD38C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x8DD424", Offset = "0x8DD424", VA = "0x8DD424")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x8DD4B4", Offset = "0x8DD4B4", VA = "0x8DD4B4")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x8DD544", Offset = "0x8DD544", VA = "0x8DD544")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x8DD5D4", Offset = "0x8DD5D4", VA = "0x8DD5D4")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x8DD66C", Offset = "0x8DD66C", VA = "0x8DD66C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x8DD704", Offset = "0x8DD704", VA = "0x8DD704")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x8DD784", Offset = "0x8DD784", VA = "0x8DD784")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x8DD804", Offset = "0x8DD804", VA = "0x8DD804")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x8DD958", Offset = "0x8DD958", VA = "0x8DD958")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x8DD9D8", Offset = "0x8DD9D8", VA = "0x8DD9D8")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x8DDB2C", Offset = "0x8DDB2C", VA = "0x8DDB2C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x8DDBAC", Offset = "0x8DDBAC", VA = "0x8DDBAC")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x8DDCE8", Offset = "0x8DDCE8", VA = "0x8DDCE8")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x8DDD68", Offset = "0x8DDD68", VA = "0x8DDD68")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x8DDF3C", Offset = "0x8DDF3C", VA = "0x8DDF3C")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x8DE21C", Offset = "0x8DE21C", VA = "0x8DE21C")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x8DDEBC", Offset = "0x8DDEBC", VA = "0x8DDEBC")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x8DE2AC", Offset = "0x8DE2AC", VA = "0x8DE2AC")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x8DE32C", Offset = "0x8DE32C", VA = "0x8DE32C")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x8DE3BC", Offset = "0x8DE3BC", VA = "0x8DE3BC")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x8DE44C", Offset = "0x8DE44C", VA = "0x8DE44C")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x8DE4DC", Offset = "0x8DE4DC", VA = "0x8DE4DC")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x8DE57C", Offset = "0x8DE57C", VA = "0x8DE57C")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x8DE61C", Offset = "0x8DE61C", VA = "0x8DE61C")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x8DE6BC", Offset = "0x8DE6BC", VA = "0x8DE6BC")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x8DE73C", Offset = "0x8DE73C", VA = "0x8DE73C")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x8DE7BC", Offset = "0x8DE7BC", VA = "0x8DE7BC")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x8DE83C", Offset = "0x8DE83C", VA = "0x8DE83C")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x8DE8BC", Offset = "0x8DE8BC", VA = "0x8DE8BC")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x8DE93C", Offset = "0x8DE93C", VA = "0x8DE93C")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x8DEA64", Offset = "0x8DEA64", VA = "0x8DEA64")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x8DEAFC", Offset = "0x8DEAFC", VA = "0x8DEAFC")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x8DEB7C", Offset = "0x8DEB7C", VA = "0x8DEB7C")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x8DEBDC", Offset = "0x8DEBDC", VA = "0x8DEBDC")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x8DED24", Offset = "0x8DED24", VA = "0x8DED24")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x8DEDB4", Offset = "0x8DEDB4", VA = "0x8DEDB4")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x8DEF0C", Offset = "0x8DEF0C", VA = "0x8DEF0C")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x8DEF9C", Offset = "0x8DEF9C", VA = "0x8DEF9C")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x8DF03C", Offset = "0x8DF03C", VA = "0x8DF03C")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x8DF40C", Offset = "0x8DF40C", VA = "0x8DF40C")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x8DF48C", Offset = "0x8DF48C", VA = "0x8DF48C")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x8DF524", Offset = "0x8DF524", VA = "0x8DF524")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x8DFD84", Offset = "0x8DFD84", VA = "0x8DFD84")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x8DFE04", Offset = "0x8DFE04", VA = "0x8DFE04")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x8D91B4", Offset = "0x8D91B4", VA = "0x8D91B4")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x517560", Offset = "0x517560")]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x8DFE9C", Offset = "0x8DFE9C", VA = "0x8DFE9C")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x8DFF20", Offset = "0x8DFF20", VA = "0x8DFF20")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x8DFFA0", Offset = "0x8DFFA0", VA = "0x8DFFA0")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x8E0020", Offset = "0x8E0020", VA = "0x8E0020")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x8E00A0", Offset = "0x8E00A0", VA = "0x8E00A0")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x8E0A64", Offset = "0x8E0A64", VA = "0x8E0A64")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x8E0AE4", Offset = "0x8E0AE4", VA = "0x8E0AE4")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x8E0F20", Offset = "0x8E0F20", VA = "0x8E0F20")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x8E0E88", Offset = "0x8E0E88", VA = "0x8E0E88")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x8E0F94", Offset = "0x8E0F94", VA = "0x8E0F94")]
		public CAPI()
		{
		}
	}
}
namespace manastation.multistorydungeons
{
	[Token(Token = "0x2000224")]
	public class DisableMeshAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xA59620", Offset = "0xA59620", VA = "0xA59620")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xA59680", Offset = "0xA59680", VA = "0xA59680")]
		public DisableMeshAtRuntime()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class FpsCounter : MonoBehaviour
	{
		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float updateInterval;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float accum;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frames;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timeleft;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text textFpsCounter;

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x148106C", Offset = "0x148106C", VA = "0x148106C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x14810C8", Offset = "0x14810C8", VA = "0x14810C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x14811DC", Offset = "0x14811DC", VA = "0x14811DC")]
		public FpsCounter()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class Move : MonoBehaviour
	{
		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float speed;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float gravity;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float horizontalMovement;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float verticalMovement;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController character;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 destination;

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xC31698", Offset = "0xC31698", VA = "0xC31698")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xC316F4", Offset = "0xC316F4", VA = "0xC316F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xC31808", Offset = "0xC31808", VA = "0xC31808")]
		public Move()
		{
		}
	}
}
namespace MagicArsenal
{
	[Token(Token = "0x2000227")]
	public class MagicBeamScript : MonoBehaviour
	{
		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510A9C", Offset = "0x510A9C")]
		public GameObject[] beamLineRendererPrefab;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] beamStartPrefab;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] beamEndPrefab;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int currentBeam;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject beamStart;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject beamEnd;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject beam;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LineRenderer line;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510AD4", Offset = "0x510AD4")]
		public float beamEndOffset;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float textureScrollSpeed;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float textureLengthScale;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510B0C", Offset = "0x510B0C")]
		public Slider endOffSetSlider;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Slider scrollSpeedSlider;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510B44", Offset = "0x510B44")]
		public Text textBeamName;

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x9E7160", Offset = "0x9E7160", VA = "0x9E7160")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x9E72D0", Offset = "0x9E72D0", VA = "0x9E72D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x9E79E8", Offset = "0x9E79E8", VA = "0x9E79E8")]
		public void nextBeam()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x9E7ADC", Offset = "0x9E7ADC", VA = "0x9E7ADC")]
		public void previousBeam()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x9E7BD0", Offset = "0x9E7BD0", VA = "0x9E7BD0")]
		public void UpdateEndOffset()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x9E7C0C", Offset = "0x9E7C0C", VA = "0x9E7C0C")]
		public void UpdateScrollSpeed()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x9E7700", Offset = "0x9E7700", VA = "0x9E7700")]
		private void ShootBeamInDir(UnityEngine.Vector3 start, UnityEngine.Vector3 dir)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x9E7C48", Offset = "0x9E7C48", VA = "0x9E7C48")]
		public MagicBeamScript()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class MagicButtonScript : MonoBehaviour
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MagicFireProjectile effectScript;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MagicProjectileScript projectileScript;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x9E84D8", Offset = "0x9E84D8", VA = "0x9E84D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x9E86A4", Offset = "0x9E86A4", VA = "0x9E86A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x9E85E4", Offset = "0x9E85E4", VA = "0x9E85E4")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x9E86D0", Offset = "0x9E86D0", VA = "0x9E86D0")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x9E87B4", Offset = "0x9E87B4", VA = "0x9E87B4")]
		public MagicButtonScript()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class MagicDragMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x9E87BC", Offset = "0x9E87BC", VA = "0x9E87BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x9E88A0", Offset = "0x9E88A0", VA = "0x9E88A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x9E8BF4", Offset = "0x9E8BF4", VA = "0x9E8BF4")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x9E8C24", Offset = "0x9E8C24", VA = "0x9E8C24")]
		public MagicDragMouseOrbit()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class MagicEffectCycler : MonoBehaviour
	{
		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> listOfEffects;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510B8C", Offset = "0x510B8C")]
		private float loopTimeLength;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timeOfLastInstantiate;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject instantiatedEffect;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int effectIndex;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x9E8C40", Offset = "0x9E8C40", VA = "0x9E8C40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x9E8DB0", Offset = "0x9E8DB0", VA = "0x9E8DB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x9E8F5C", Offset = "0x9E8F5C", VA = "0x9E8F5C")]
		public MagicEffectCycler()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class MagicFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RaycastHit hit;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] projectiles;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnPosition;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float speed;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MagicButtonScript selectedProjectileButton;

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x9E8F6C", Offset = "0x9E8F6C", VA = "0x9E8F6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x9E8FEC", Offset = "0x9E8FEC", VA = "0x9E8FEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x9E93F8", Offset = "0x9E93F8", VA = "0x9E93F8")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x9E9438", Offset = "0x9E9438", VA = "0x9E9438")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x9E9478", Offset = "0x9E9478", VA = "0x9E9478")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x9E9480", Offset = "0x9E9480", VA = "0x9E9480")]
		public MagicFireProjectile()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class MagicLoadSceneOnClick : MonoBehaviour
	{
		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GUIHide;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool GUIHide2;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GUIHide3;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x9E9A80", Offset = "0x9E9A80", VA = "0x9E9A80")]
		public void LoadSceneProjectiles()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x9E9AF4", Offset = "0x9E9AF4", VA = "0x9E9AF4")]
		public void LoadSceneSprays()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x9E9B68", Offset = "0x9E9B68", VA = "0x9E9B68")]
		public void LoadSceneAura()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x9E9BDC", Offset = "0x9E9BDC", VA = "0x9E9BDC")]
		public void LoadSceneModular()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x9E9C50", Offset = "0x9E9C50", VA = "0x9E9C50")]
		public void LoadSceneShields2()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x9E9CC4", Offset = "0x9E9CC4", VA = "0x9E9CC4")]
		public void LoadSceneShields()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x9E9D38", Offset = "0x9E9D38", VA = "0x9E9D38")]
		public void LoadSceneSphereBlast()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x9E9DAC", Offset = "0x9E9DAC", VA = "0x9E9DAC")]
		public void LoadSceneEnchant()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x9E9E20", Offset = "0x9E9E20", VA = "0x9E9E20")]
		public void LoadSceneSlash()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x9E9E94", Offset = "0x9E9E94", VA = "0x9E9E94")]
		public void LoadSceneCharge()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x9E9F08", Offset = "0x9E9F08", VA = "0x9E9F08")]
		public void LoadSceneCleave()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x9E9F7C", Offset = "0x9E9F7C", VA = "0x9E9F7C")]
		public void LoadSceneAura2()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x9E9FF0", Offset = "0x9E9FF0", VA = "0x9E9FF0")]
		public void LoadSceneWalls()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x9EA064", Offset = "0x9EA064", VA = "0x9EA064")]
		public void LoadSceneBeams()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x9EA0D8", Offset = "0x9EA0D8", VA = "0x9EA0D8")]
		public void LoadSceneMeshGlow()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x9EA14C", Offset = "0x9EA14C", VA = "0x9EA14C")]
		public void LoadScenePillarBlast()
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9EA1C0", Offset = "0x9EA1C0", VA = "0x9EA1C0")]
		public void LoadSceneAura3()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x9EA234", Offset = "0x9EA234", VA = "0x9EA234")]
		public void LoadSceneAuraCast()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x9EA2A8", Offset = "0x9EA2A8", VA = "0x9EA2A8")]
		public void LoadSceneRain()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x9EA31C", Offset = "0x9EA31C", VA = "0x9EA31C")]
		public void LoadSceneAOE()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x9EA390", Offset = "0x9EA390", VA = "0x9EA390")]
		public void LoadSceneNova()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x9EA404", Offset = "0x9EA404", VA = "0x9EA404")]
		public void LoadSceneFlame()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x9EA478", Offset = "0x9EA478", VA = "0x9EA478")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x9EA604", Offset = "0x9EA604", VA = "0x9EA604")]
		public MagicLoadSceneOnClick()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class MagicLoopScript : MonoBehaviour
	{
		[Token(Token = "0x200022E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD5C", Offset = "0x50BD5C")]
		private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLoopScript <>4__this;

			[Token(Token = "0x4000C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x17000170")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C1D")]
				[Address(RVA = "0x7E5610", Offset = "0x7E5610", VA = "0x7E5610", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000171")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C1F")]
				[Address(RVA = "0x7E5658", Offset = "0x7E5658", VA = "0x7E5658", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x7E5404", Offset = "0x7E5404", VA = "0x7E5404")]
			[DebuggerHidden]
			public <EffectLoop>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x7E5430", Offset = "0x7E5430", VA = "0x7E5430", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x7E5434", Offset = "0x7E5434", VA = "0x7E5434", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0x7E5618", Offset = "0x7E5618", VA = "0x7E5618", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x9EA60C", Offset = "0x9EA60C", VA = "0x9EA60C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x9EA610", Offset = "0x9EA610", VA = "0x9EA610")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x9EA660", Offset = "0x9EA660", VA = "0x9EA660")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5175C0", Offset = "0x5175C0")]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x9EA6D8", Offset = "0x9EA6D8", VA = "0x9EA6D8")]
		public MagicLoopScript()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class MagicBeamStatic : MonoBehaviour
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510BE8", Offset = "0x510BE8")]
		public GameObject beamLineRendererPrefab;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject beamStartPrefab;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject beamEndPrefab;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject beamStart;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject beamEnd;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject beam;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LineRenderer line;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510C20", Offset = "0x510C20")]
		public bool alwaysOn;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool beamCollides;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float beamLength;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float beamEndOffset;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float textureScrollSpeed;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float textureLengthScale;

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x9E7C64", Offset = "0x9E7C64", VA = "0x9E7C64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x9E7C68", Offset = "0x9E7C68", VA = "0x9E7C68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x9E7F8C", Offset = "0x9E7F8C", VA = "0x9E7F8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x9E80E4", Offset = "0x9E80E4", VA = "0x9E80E4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x9E7C78", Offset = "0x9E7C78", VA = "0x9E7C78")]
		public void SpawnBeam()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x9E7F90", Offset = "0x9E7F90", VA = "0x9E7F90")]
		public void RemoveBeam()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x9E84B8", Offset = "0x9E84B8", VA = "0x9E84B8")]
		public MagicBeamStatic()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class MagicLightFade : MonoBehaviour
	{
		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510C58", Offset = "0x510C58")]
		public float life;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x9E9490", Offset = "0x9E9490", VA = "0x9E9490")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x9E95C4", Offset = "0x9E95C4", VA = "0x9E95C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x9E9720", Offset = "0x9E9720", VA = "0x9E9720")]
		public MagicLightFade()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class MagicLightFlicker : MonoBehaviour
	{
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string waveFunction;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float startValue;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float amplitude;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float phase;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float frequency;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color originalColor;

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x9E973C", Offset = "0x9E973C", VA = "0x9E973C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x9E97A4", Offset = "0x9E97A4", VA = "0x9E97A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x9E9844", Offset = "0x9E9844", VA = "0x9E9844")]
		private float EvalWave()
		{
			return default(float);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x9E9A14", Offset = "0x9E9A14", VA = "0x9E9A14")]
		public MagicLightFlicker()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class MagicRotation : MonoBehaviour
	{
		[Token(Token = "0x2000233")]
		public enum spaceEnum
		{
			[Token(Token = "0x4000C93")]
			Local,
			[Token(Token = "0x4000C94")]
			World
		}

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x510C90", Offset = "0x510C90")]
		public UnityEngine.Vector3 rotateVector;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x9EAD58", Offset = "0x9EAD58", VA = "0x9EAD58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x9EAD5C", Offset = "0x9EAD5C", VA = "0x9EAD5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x9EAE34", Offset = "0x9EAE34", VA = "0x9EAE34")]
		public MagicRotation()
		{
		}
	}
}
namespace DADemo_Sample_Utils
{
	[Token(Token = "0x2000234")]
	public class AADisableChecker : MonoBehaviour
	{
		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x9AA46C", Offset = "0x9AA46C", VA = "0x9AA46C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x9AA4B4", Offset = "0x9AA4B4", VA = "0x9AA4B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x9AA4B8", Offset = "0x9AA4B8", VA = "0x9AA4B8")]
		public AADisableChecker()
		{
		}
	}
}
namespace DAShooter
{
	[Token(Token = "0x2000235")]
	public class AIStateBase : StateBase
	{
		[Serializable]
		[Token(Token = "0x2000236")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD6C", Offset = "0x50BD6C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<RaycastHit2D> <>9__7_0;

			[Token(Token = "0x4000C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<RaycastHit> <>9__8_0;

			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x7D8CFC", Offset = "0x7D8CFC", VA = "0x7D8CFC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x7D8D04", Offset = "0x7D8D04", VA = "0x7D8D04")]
			internal int <IsPlayerVisible2D>b__7_0(RaycastHit2D x, RaycastHit2D y)
			{
				return default(int);
			}

			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x7D8D80", Offset = "0x7D8D80", VA = "0x7D8D80")]
			internal int <IsPlayerVisible3D>b__8_0(RaycastHit x, RaycastHit y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AIController controller;

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x9AAD14", Offset = "0x9AAD14", VA = "0x9AAD14")]
		public AIStateBase(AIController controller, float updateDelay)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x9AAD48", Offset = "0x9AAD48", VA = "0x9AAD48", Slot = "18")]
		protected virtual void HandleFrameUpdate(float elapsedTime)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x9AAD4C", Offset = "0x9AAD4C", VA = "0x9AAD4C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x9AAEA0", Offset = "0x9AAEA0", VA = "0x9AAEA0")]
		protected bool IsWithinPlayerProximity(ref Collider outCollider, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x9AAEA8", Offset = "0x9AAEA8", VA = "0x9AAEA8")]
		protected GameObject GetPlayer()
		{
			return null;
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x9AAF10", Offset = "0x9AAF10", VA = "0x9AAF10")]
		protected bool IsPlayerVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x9AAF34", Offset = "0x9AAF34", VA = "0x9AAF34")]
		protected bool IsPlayerVisible2D()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x9AB484", Offset = "0x9AB484", VA = "0x9AB484")]
		protected bool IsPlayerVisible3D()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000237")]
	public class AIStateMoveToLastKnownPosition : AIStateBase
	{
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x9AC930", Offset = "0x9AC930", VA = "0x9AC930")]
		public AIStateMoveToLastKnownPosition(AIController controller)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x9AC964", Offset = "0x9AC964", VA = "0x9AC964", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x9ACA54", Offset = "0x9ACA54", VA = "0x9ACA54", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x9ACA58", Offset = "0x9ACA58", VA = "0x9ACA58", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class AIStateWaitAndSearch : AIStateBase
	{
		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeSinceStart;

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x9ACB3C", Offset = "0x9ACB3C", VA = "0x9ACB3C")]
		public AIStateWaitAndSearch(AIController controller)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x9AD974", Offset = "0x9AD974", VA = "0x9AD974", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x9AD9B4", Offset = "0x9AD9B4", VA = "0x9AD9B4", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class AIStatePersuit : AIStateBase
	{
		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform followTarget;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x9AC7C4", Offset = "0x9AC7C4", VA = "0x9AC7C4")]
		public AIStatePersuit(AIController controller)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x9AD558", Offset = "0x9AD558", VA = "0x9AD558", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x9AD610", Offset = "0x9AD610", VA = "0x9AD610", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x9AD63C", Offset = "0x9AD63C", VA = "0x9AD63C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x9AD640", Offset = "0x9AD640", VA = "0x9AD640", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class AIStatePatrol : AIStateBase
	{
		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentWaypointIndex;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3[] waypointOffsets;

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x9AA63C", Offset = "0x9AA63C", VA = "0x9AA63C")]
		public AIStatePatrol(AIController controller)
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x9ACDB8", Offset = "0x9ACDB8", VA = "0x9ACDB8", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x9ACF20", Offset = "0x9ACF20", VA = "0x9ACF20")]
		private void MoveToCurrentPoint()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x9AD088", Offset = "0x9AD088", VA = "0x9AD088", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x9AD08C", Offset = "0x9AD08C", VA = "0x9AD08C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x9AD090", Offset = "0x9AD090", VA = "0x9AD090", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x200023B")]
	internal enum AIAttackAnimState
	{
		[Token(Token = "0x4000C9E")]
		Requested,
		[Token(Token = "0x4000C9F")]
		Running,
		[Token(Token = "0x4000CA0")]
		InterAttackWait
	}
	[Token(Token = "0x200023C")]
	public class AIStateDead : AIStateBase
	{
		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x9AAE6C", Offset = "0x9AAE6C", VA = "0x9AAE6C")]
		public AIStateDead(AIController controller)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x9AC5C0", Offset = "0x9AC5C0", VA = "0x9AC5C0", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x9AC638", Offset = "0x9AC638", VA = "0x9AC638", Slot = "15")]
		public override void OnExit()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class AIStateIdle : AIStateBase
	{
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x9AA670", Offset = "0x9AA670", VA = "0x9AA670")]
		public AIStateIdle(AIController controller)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x9AC6C0", Offset = "0x9AC6C0", VA = "0x9AC6C0", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x9AC718", Offset = "0x9AC718", VA = "0x9AC718", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x9AC720", Offset = "0x9AC720", VA = "0x9AC720", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class AIController : CharacterControlScript
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NavMeshAgent agent;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PatrolPath patrol;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CapsuleCollider capsule;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LastPlayerSighting lastSighting;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool hasPatrolling;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float fieldOfView;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxViewSight;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float searchWaitTime;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float playerCloseByDistance;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float destinationArriveProximity;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float playerProximityRadius;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool mode2D;

		[Token(Token = "0x17000172")]
		public NavMeshAgent Agent
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x9AA4C0", Offset = "0x9AA4C0", VA = "0x9AA4C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		public CapsuleCollider Capsule
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x9AA4C8", Offset = "0x9AA4C8", VA = "0x9AA4C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		public PatrolPath Patrol
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0x9AA4D0", Offset = "0x9AA4D0", VA = "0x9AA4D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		public LastPlayerSighting LastSighting
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x9AA4D8", Offset = "0x9AA4D8", VA = "0x9AA4D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x9AA4E0", Offset = "0x9AA4E0", VA = "0x9AA4E0", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x9AA6A4", Offset = "0x9AA6A4", VA = "0x9AA6A4", Slot = "5")]
		public override bool GetInputJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x9AA6AC", Offset = "0x9AA6AC", VA = "0x9AA6AC", Slot = "6")]
		public override bool GetInputAttackPrimary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x9AA6B4", Offset = "0x9AA6B4", VA = "0x9AA6B4", Slot = "7")]
		public override bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x9AA6BC", Offset = "0x9AA6BC", VA = "0x9AA6BC", Slot = "8")]
		public override void ApplyMovement(UnityEngine.Vector3 velocity)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x9AA6C0", Offset = "0x9AA6C0", VA = "0x9AA6C0")]
		public AIController()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public abstract class CharacterControlScript : MonoBehaviour
	{
		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected StateMachine stateMachine;

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x8E404C", Offset = "0x8E404C", VA = "0x8E404C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x8E40C0", Offset = "0x8E40C0", VA = "0x8E40C0", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x8E40C4", Offset = "0x8E40C4", VA = "0x8E40C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x8E40C8", Offset = "0x8E40C8", VA = "0x8E40C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C67")]
		public abstract bool GetInputJump();

		[Token(Token = "0x6000C68")]
		public abstract bool GetInputAttackPrimary();

		[Token(Token = "0x6000C69")]
		public abstract bool IsGrounded();

		[Token(Token = "0x6000C6A")]
		public abstract void ApplyMovement(UnityEngine.Vector3 velocity);

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x8E40E4", Offset = "0x8E40E4", VA = "0x8E40E4")]
		protected CharacterControlScript()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class LastPlayerSighting : MonoBehaviour
	{
		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3 NO_SIGHTING;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Vector3 position;

		[Token(Token = "0x17000176")]
		public UnityEngine.Vector3 Position
		{
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x9E0F68", Offset = "0x9E0F68", VA = "0x9E0F68")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x9E0F74", Offset = "0x9E0F74", VA = "0x9E0F74")]
			set
			{
			}
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x9E0F80", Offset = "0x9E0F80", VA = "0x9E0F80")]
		public void ClearSighting()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x9E0FF4", Offset = "0x9E0FF4", VA = "0x9E0FF4")]
		public bool HasSighting()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x9E1088", Offset = "0x9E1088", VA = "0x9E1088")]
		public LastPlayerSighting()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class LevelNpcSpawner : DungeonEventListener
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject parentObject;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] npcTemplates;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 npcOffset;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float spawnProbability;

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x9E2310", Offset = "0x9E2310", VA = "0x9E2310", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x9E2314", Offset = "0x9E2314", VA = "0x9E2314")]
		public void RebuildNPCs()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x9E27FC", Offset = "0x9E27FC", VA = "0x9E27FC")]
		private UnityEngine.Vector3 GetValidPointOnNavMesh(UnityEngine.Vector3 position)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x9E2880", Offset = "0x9E2880", VA = "0x9E2880", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x9E2574", Offset = "0x9E2574", VA = "0x9E2574")]
		private void DestroyOldNpcs()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x9E2884", Offset = "0x9E2884", VA = "0x9E2884")]
		public LevelNpcSpawner()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class PatrolPath : MonoBehaviour
	{
		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minPathLength;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxPathLength;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float randomOffset;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float proximityThreshold;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Waypoint[] patrolPoints;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool looped;

		[Token(Token = "0x17000177")]
		public bool Looped
		{
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x997968", Offset = "0x997968", VA = "0x997968")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public Waypoint[] PatrolPoints
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0x997970", Offset = "0x997970", VA = "0x997970")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x997978", Offset = "0x997978", VA = "0x997978")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x99797C", Offset = "0x99797C", VA = "0x99797C")]
		public void Build()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x9979C0", Offset = "0x9979C0", VA = "0x9979C0")]
		public void Build(UnityEngine.Vector3 nearestStartingPoint)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x9980FC", Offset = "0x9980FC", VA = "0x9980FC")]
		private Waypoint[] FindNonLoopedPath(Waypoint startingWaypoint)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x997D70", Offset = "0x997D70", VA = "0x997D70")]
		private Waypoint[] FindLoopedPath(Waypoint startingWaypoint)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x9983CC", Offset = "0x9983CC", VA = "0x9983CC")]
		private Waypoint[] Shuffle(Waypoint[] data)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x997C70", Offset = "0x997C70", VA = "0x997C70")]
		private Waypoint FindNearest(Waypoint[] waypoints, UnityEngine.Vector3 startingPoint)
		{
			return null;
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x9983D4", Offset = "0x9983D4", VA = "0x9983D4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x9983D8", Offset = "0x9983D8", VA = "0x9983D8")]
		private void VisualizePath()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x99852C", Offset = "0x99852C", VA = "0x99852C")]
		private void DrawLine(UnityEngine.Vector3 a, UnityEngine.Vector3 b, bool mode2D)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x998570", Offset = "0x998570", VA = "0x998570")]
		private void DrawPoint(UnityEngine.Vector3 p, bool mode2D)
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x998560", Offset = "0x998560", VA = "0x998560")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x99859C", Offset = "0x99859C", VA = "0x99859C")]
		public PatrolPath()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class SpecialRoomFinder : DungeonEventListener
	{
		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject levelEndGoalTemplate;

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x7F6728", Offset = "0x7F6728", VA = "0x7F6728", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x7F6C6C", Offset = "0x7F6C6C", VA = "0x7F6C6C", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x7F6A24", Offset = "0x7F6A24", VA = "0x7F6A24")]
		private void SetStartingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x7F6BD4", Offset = "0x7F6BD4", VA = "0x7F6BD4")]
		private void SetStartingCell(SimpleCityDungeonModel model, SimpleCityCell cell)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x7F6C20", Offset = "0x7F6C20", VA = "0x7F6C20")]
		private void SetEndingCell(SimpleCityDungeonModel model, SimpleCityCell cell)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x7F6AF8", Offset = "0x7F6AF8", VA = "0x7F6AF8")]
		private void SetEndingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x7F6DCC", Offset = "0x7F6DCC", VA = "0x7F6DCC")]
		private void TeleportPlayerTo(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x7F6F3C", Offset = "0x7F6F3C", VA = "0x7F6F3C")]
		private void CreateLevelGoalAt(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x7F6C70", Offset = "0x7F6C70", VA = "0x7F6C70")]
		private void DestroyAllLevelGoals()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x7F7094", Offset = "0x7F7094", VA = "0x7F7094")]
		public SpecialRoomFinder()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public enum GameMessages
	{

	}
	[Token(Token = "0x2000245")]
	public interface State
	{
		[Token(Token = "0x17000179")]
		StateMachine StateMachine
		{
			[Token(Token = "0x6000C97")]
			get;
			[Token(Token = "0x6000C98")]
			set;
		}

		[Token(Token = "0x6000C91")]
		void Update();

		[Token(Token = "0x6000C92")]
		void FixedUpdate();

		[Token(Token = "0x6000C93")]
		void OnEnter();

		[Token(Token = "0x6000C94")]
		void OnExit();

		[Token(Token = "0x6000C95")]
		void TransitionTo(string stateName);

		[Token(Token = "0x6000C96")]
		void OnMessage(GameMessages messageType, object userdata);
	}
	[Token(Token = "0x2000246")]
	public abstract class StateBase : State
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected StateMachine stateMachine;

		[Token(Token = "0x1700017A")]
		public StateMachine StateMachine
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x7FBC28", Offset = "0x7FBC28", VA = "0x7FBC28", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x7FBC30", Offset = "0x7FBC30", VA = "0x7FBC30", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x7FBC10", Offset = "0x7FBC10", VA = "0x7FBC10", Slot = "12")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x7FBC14", Offset = "0x7FBC14", VA = "0x7FBC14", Slot = "13")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x7FBC18", Offset = "0x7FBC18", VA = "0x7FBC18", Slot = "14")]
		public virtual void OnEnter()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x7FBC1C", Offset = "0x7FBC1C", VA = "0x7FBC1C", Slot = "15")]
		public virtual void OnExit()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x7FBC20", Offset = "0x7FBC20", VA = "0x7FBC20", Slot = "16")]
		public virtual void TransitionTo(string stateName)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x7FBC24", Offset = "0x7FBC24", VA = "0x7FBC24", Slot = "17")]
		public virtual void OnMessage(GameMessages messageType, object userdata)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x7FBC38", Offset = "0x7FBC38", VA = "0x7FBC38")]
		protected StateBase()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class StateMachine
	{
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<State> stateStack;

		[Token(Token = "0x1700017B")]
		public State ActiveState
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x7FBC40", Offset = "0x7FBC40", VA = "0x7FBC40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x7FBCB8", Offset = "0x7FBCB8", VA = "0x7FBCB8")]
		public void MoveTo(State state)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x7FBED4", Offset = "0x7FBED4", VA = "0x7FBED4")]
		public void PushTo(State state)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x7FC01C", Offset = "0x7FC01C", VA = "0x7FC01C")]
		public void Pop()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x7FC114", Offset = "0x7FC114", VA = "0x7FC114")]
		public void Update()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x7FC204", Offset = "0x7FC204", VA = "0x7FC204")]
		public void SendMessage(GameMessages message, object userdata)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x7FC2E0", Offset = "0x7FC2E0", VA = "0x7FC2E0")]
		public StateMachine()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class MixLevels : MonoBehaviour
	{
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixer masterMixer;

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xC3127C", Offset = "0xC3127C", VA = "0xC3127C")]
		public void SetSfxLvl(float sfxLvl)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xC312E4", Offset = "0xC312E4", VA = "0xC312E4")]
		public void SetMusicLvl(float musicLvl)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xC3134C", Offset = "0xC3134C", VA = "0xC3134C")]
		public MixLevels()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class CameraFollow : MonoBehaviour
	{
		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float positionSmoothing;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAtSmoothing;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 currentLookAt;

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x8E14D4", Offset = "0x8E14D4", VA = "0x8E14D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x8E150C", Offset = "0x8E150C", VA = "0x8E150C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x8E1690", Offset = "0x8E1690", VA = "0x8E1690")]
		public CameraFollow()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class EnemyAttack : MonoBehaviour
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeBetweenAttacks;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int attackDamage;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator anim;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject player;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerHealth playerHealth;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EnemyHealth enemyHealth;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool playerInRange;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x7B3E2C", Offset = "0x7B3E2C", VA = "0x7B3E2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x7B3F24", Offset = "0x7B3F24", VA = "0x7B3F24")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x7B3FC8", Offset = "0x7B3FC8", VA = "0x7B3FC8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x7B4068", Offset = "0x7B4068", VA = "0x7B4068")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x7B4130", Offset = "0x7B4130", VA = "0x7B4130")]
		private void Attack()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x7B4168", Offset = "0x7B4168", VA = "0x7B4168")]
		public EnemyAttack()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class EnemyHealth : MonoBehaviour
	{
		[Token(Token = "0x200024C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD7C", Offset = "0x50BD7C")]
		private sealed class <StartSinkingAnimation>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyHealth <>4__this;

			[Token(Token = "0x1700017C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CBF")]
				[Address(RVA = "0x7DD160", Offset = "0x7DD160", VA = "0x7DD160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CC1")]
				[Address(RVA = "0x7DD1A8", Offset = "0x7DD1A8", VA = "0x7DD1A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x7DCF78", Offset = "0x7DCF78", VA = "0x7DCF78")]
			[DebuggerHidden]
			public <StartSinkingAnimation>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x7DCFA4", Offset = "0x7DCFA4", VA = "0x7DCFA4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x7DCFA8", Offset = "0x7DCFA8", VA = "0x7DCFA8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x7DD168", Offset = "0x7DD168", VA = "0x7DD168", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startingHealth;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentHealth;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sinkSpeed;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int scoreValue;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip deathClip;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator anim;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource enemyAudio;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem hitParticles;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController character;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isDead;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isSinking;

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x7B5444", Offset = "0x7B5444", VA = "0x7B5444")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x7B553C", Offset = "0x7B553C", VA = "0x7B553C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x7B55DC", Offset = "0x7B55DC", VA = "0x7B55DC")]
		public void TakeDamage(int amount, UnityEngine.Vector3 hitPoint)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x7B569C", Offset = "0x7B569C", VA = "0x7B569C")]
		private void Death()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x7B5734", Offset = "0x7B5734", VA = "0x7B5734")]
		public void StartSinking()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x7B5760", Offset = "0x7B5760", VA = "0x7B5760")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517670", Offset = "0x517670")]
		private IEnumerator StartSinkingAnimation()
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x7B57D8", Offset = "0x7B57D8", VA = "0x7B57D8")]
		public EnemyHealth()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class EnemyMovement : MonoBehaviour
	{
		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlayerHealth playerHealth;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EnemyHealth enemyHealth;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NavMeshAgent navAgent;

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x1477DEC", Offset = "0x1477DEC", VA = "0x1477DEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x1477EF0", Offset = "0x1477EF0", VA = "0x1477EF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x1477F74", Offset = "0x1477F74", VA = "0x1477F74")]
		public EnemyMovement()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class GameController : MonoBehaviour
	{
		[Token(Token = "0x200024F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD8C", Offset = "0x50BD8C")]
		private sealed class <RebuildLevel>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameController <>4__this;

			[Token(Token = "0x4000CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dungeon dungeon;

			[Token(Token = "0x1700017F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CCD")]
				[Address(RVA = "0x7DEAD4", Offset = "0x7DEAD4", VA = "0x7DEAD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000180")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CCF")]
				[Address(RVA = "0x7DEB1C", Offset = "0x7DEB1C", VA = "0x7DEB1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0x7DE554", Offset = "0x7DE554", VA = "0x7DE554")]
			[DebuggerHidden]
			public <RebuildLevel>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x7DE580", Offset = "0x7DE580", VA = "0x7DE580", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x7DE584", Offset = "0x7DE584", VA = "0x7DE584", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0x7DEADC", Offset = "0x7DEADC", VA = "0x7DEADC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameController instance;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minimap;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject levelLoadingScreen;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text textBuildingLayout;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text textBuildingNavMesh;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LevelNpcSpawner npcSpawner;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string labelBuildingLayout;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string labelBuildingNavmesh;

		[Token(Token = "0x1700017E")]
		public static GameController Instance
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0x14856CC", Offset = "0x14856CC", VA = "0x14856CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x1485718", Offset = "0x1485718", VA = "0x1485718")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x14857A4", Offset = "0x14857A4", VA = "0x14857A4")]
		public void CreateNewLevel()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x1485818", Offset = "0x1485818", VA = "0x1485818")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517720", Offset = "0x517720")]
		private IEnumerator RebuildLevel(Dungeon dungeon)
		{
			return null;
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x14858AC", Offset = "0x14858AC", VA = "0x14858AC")]
		public GameController()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class LevelGoal : MonoBehaviour
	{
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x9E18DC", Offset = "0x9E18DC", VA = "0x9E18DC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x9E19BC", Offset = "0x9E19BC", VA = "0x9E19BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x9E1A30", Offset = "0x9E1A30", VA = "0x9E1A30")]
		public LevelGoal()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class BeautyShot : MonoBehaviour
	{
		[Token(Token = "0x2000252")]
		public enum Supersample
		{
			[Token(Token = "0x4000CF3")]
			None = 1,
			[Token(Token = "0x4000CF4")]
			Two = 2,
			[Token(Token = "0x4000CF5")]
			Four = 4,
			[Token(Token = "0x4000CF6")]
			Eight = 8,
			[Token(Token = "0x4000CF7")]
			Sixteen = 0x10,
			[Token(Token = "0x4000CF8")]
			Wtf = 0x20
		}

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask layerMask;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int frameRate;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int frameOffset;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float numFrames;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool captureUsingScreenshot;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Supersample supersampleScreenshot;

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x9BD924", Offset = "0x9BD924", VA = "0x9BD924")]
		public string generateFilename()
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x9BD9BC", Offset = "0x9BD9BC", VA = "0x9BD9BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x9BD9C4", Offset = "0x9BD9C4", VA = "0x9BD9C4")]
		public BeautyShot()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class RandomAnimationPoint : MonoBehaviour
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool randomize;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x510CC8", Offset = "0x510CC8")]
		public float normalizedTime;

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xDDB91C", Offset = "0xDDB91C", VA = "0xDDB91C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xDDB9DC", Offset = "0xDDB9DC", VA = "0xDDB9DC")]
		public RandomAnimationPoint()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class RandomParticlePoint : MonoBehaviour
	{
		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x510CE0", Offset = "0x510CE0")]
		public float normalizedTime;

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xDDBC34", Offset = "0xDDBC34", VA = "0xDDBC34")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xDDBC9C", Offset = "0xDDBC9C", VA = "0xDDBC9C")]
		public RandomParticlePoint()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class VolumeHandler : MonoBehaviour
	{
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x7D0904", Offset = "0x7D0904", VA = "0x7D0904")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x7D0A64", Offset = "0x7D0A64", VA = "0x7D0A64")]
		private void SetVolume(float volume)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x7D0AD0", Offset = "0x7D0AD0", VA = "0x7D0AD0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x7D0C30", Offset = "0x7D0C30", VA = "0x7D0C30")]
		public VolumeHandler()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class EnemyManager : MonoBehaviour
	{
		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealth playerHealth;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float spawnTime;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform[] spawnPoints;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1477BF4", Offset = "0x1477BF4", VA = "0x1477BF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x1477C4C", Offset = "0x1477C4C", VA = "0x1477C4C")]
		private void Spawn()
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1477DDC", Offset = "0x1477DDC", VA = "0x1477DDC")]
		public EnemyManager()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class GameOverManager : MonoBehaviour
	{
		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealth playerHealth;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator anim;

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x77E718", Offset = "0x77E718", VA = "0x77E718")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x77E774", Offset = "0x77E774", VA = "0x77E774")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x77E7EC", Offset = "0x77E7EC", VA = "0x77E7EC")]
		public GameOverManager()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class PauseManager : MonoBehaviour
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixerSnapshot paused;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerSnapshot unpaused;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas canvas;

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x998618", Offset = "0x998618", VA = "0x998618")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x998674", Offset = "0x998674", VA = "0x998674")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x9986DC", Offset = "0x9986DC", VA = "0x9986DC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x99871C", Offset = "0x99871C", VA = "0x99871C")]
		private void Lowpass()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x998768", Offset = "0x998768", VA = "0x998768")]
		public void Quit()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x998770", Offset = "0x998770", VA = "0x998770")]
		public PauseManager()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class ScoreManager : MonoBehaviour
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int score;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xAA41FC", Offset = "0xAA41FC", VA = "0xAA41FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xAA427C", Offset = "0xAA427C", VA = "0xAA427C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xAA4318", Offset = "0xAA4318", VA = "0xAA4318")]
		public ScoreManager()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class MiniMapEnemyDots : MonoBehaviour
	{
		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject enemyDotTemplate;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<GameObject> dots;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform baseDungeon;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform miniMapDungeon;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 offset;

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xC30854", Offset = "0xC30854", VA = "0xC30854")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xC308C4", Offset = "0xC308C4", VA = "0xC308C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xC30BA4", Offset = "0xC30BA4", VA = "0xC30BA4")]
		private GameObject BuildDot(GameObject enemy)
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xC30D58", Offset = "0xC30D58", VA = "0xC30D58")]
		public MiniMapEnemyDots()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class PlayerHealth : MonoBehaviour
	{
		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startingHealth;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentHealth;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider healthSlider;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image damageImage;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip deathClip;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float flashSpeed;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color flashColour;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator anim;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource playerAudio;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerMovement playerMovement;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayerShooting playerShooting;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDead;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool damaged;

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x99E230", Offset = "0x99E230", VA = "0x99E230")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x99E328", Offset = "0x99E328", VA = "0x99E328")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x99E47C", Offset = "0x99E47C", VA = "0x99E47C")]
		public void TakeDamage(int amount)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x99E500", Offset = "0x99E500", VA = "0x99E500")]
		private void Death()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x99E610", Offset = "0x99E610", VA = "0x99E610")]
		public void RestartLevel()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x99E68C", Offset = "0x99E68C", VA = "0x99E68C")]
		public PlayerHealth()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class PlayerMovement : MonoBehaviour
	{
		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 movement;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator anim;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float camRayLength;

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x99E6F8", Offset = "0x99E6F8", VA = "0x99E6F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x99E79C", Offset = "0x99E79C", VA = "0x99E79C")]
		public void OnTeleportered()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x99E7BC", Offset = "0x99E7BC", VA = "0x99E7BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x99E860", Offset = "0x99E860", VA = "0x99E860")]
		private void Move(float h, float v)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x99E92C", Offset = "0x99E92C", VA = "0x99E92C")]
		private void Turning()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x99EA3C", Offset = "0x99EA3C", VA = "0x99EA3C")]
		private void Animating(float h, float v)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x99EAB8", Offset = "0x99EAB8", VA = "0x99EAB8")]
		public PlayerMovement()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class PlayerShooting : MonoBehaviour
	{
		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int damagePerShot;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeBetweenBullets;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float range;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timer;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Ray shootRay;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastHit shootHit;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem gunParticles;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer gunLine;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource gunAudio;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Light gunLight;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Light faceLight;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float effectsDisplayTime;

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x99FF38", Offset = "0x99FF38", VA = "0x99FF38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x9A0024", Offset = "0x9A0024", VA = "0x9A0024")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x99E5B8", Offset = "0x99E5B8", VA = "0x99E5B8")]
		public void DisableEffects()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x9A00E8", Offset = "0x9A00E8", VA = "0x9A00E8")]
		private void Shoot()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x9A0364", Offset = "0x9A0364", VA = "0x9A0364")]
		public PlayerShooting()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class GameTags : MonoBehaviour
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Player;

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x77E7F4", Offset = "0x77E7F4", VA = "0x77E7F4")]
		public GameTags()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int id;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Waypoint[] adjacentWaypoints;

		[Token(Token = "0x17000181")]
		public Waypoint[] AdjacentWaypoints
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0x7D1630", Offset = "0x7D1630", VA = "0x7D1630")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x7D1638", Offset = "0x7D1638", VA = "0x7D1638")]
			set
			{
			}
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x7D1640", Offset = "0x7D1640", VA = "0x7D1640", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x7D1720", Offset = "0x7D1720", VA = "0x7D1720")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class WaypointGenerator : DungeonEventListener
	{
		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject waypointTemplate;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject waypointParent;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 waypointOffset;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mode2D;

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x7D1788", Offset = "0x7D1788", VA = "0x7D1788", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x7D1794", Offset = "0x7D1794", VA = "0x7D1794")]
		public void BuildWaypoints(DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x7D1A50", Offset = "0x7D1A50", VA = "0x7D1A50")]
		private void BuildGridWaypoints(GridDungeonModel gridModel, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x7D2658", Offset = "0x7D2658", VA = "0x7D2658")]
		private void BuildCityWaypoints(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x7D2CB0", Offset = "0x7D2CB0", VA = "0x7D2CB0")]
		private void ConnectAdjacentRoadTiles(SimpleCityDungeonModel model, SimpleCityCell cell, int dx, int dz, Dictionary<SimpleCityCell, Waypoint> cellToWaypoint, Dictionary<Waypoint, List<Waypoint>> adjacentWaypoints)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x7D2C20", Offset = "0x7D2C20", VA = "0x7D2C20")]
		private int GetHash(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x7D2C28", Offset = "0x7D2C28", VA = "0x7D2C28")]
		private bool HasDirectPath(GridDungeonModel gridModel, DungeonArchitect.Builders.Grid.Cell cellA, DungeonArchitect.Builders.Grid.Cell cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x7D2E48", Offset = "0x7D2E48", VA = "0x7D2E48", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x7D1914", Offset = "0x7D1914", VA = "0x7D1914")]
		private void DestroyAllWaypoints()
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x7D2C10", Offset = "0x7D2C10", VA = "0x7D2C10")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x7D2E4C", Offset = "0x7D2E4C", VA = "0x7D2E4C")]
		public WaypointGenerator()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class WaypointPathVisualizer : MonoBehaviour
	{
		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color pathColor;

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x7D2E80", Offset = "0x7D2E80", VA = "0x7D2E80")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x7D2E84", Offset = "0x7D2E84", VA = "0x7D2E84")]
		private void DrawWaypointPaths()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x7D3078", Offset = "0x7D3078", VA = "0x7D3078")]
		private void DrawLine(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x7D3068", Offset = "0x7D3068", VA = "0x7D3068")]
		private void DrawPoint(UnityEngine.Vector3 p)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x7D3080", Offset = "0x7D3080", VA = "0x7D3080")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x7D3090", Offset = "0x7D3090", VA = "0x7D3090")]
		public WaypointPathVisualizer()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class MMRoomSelector : SelectorRule
	{
		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x9E70A8", Offset = "0x9E70A8", VA = "0x9E70A8", Slot = "4")]
		public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x9E7158", Offset = "0x9E7158", VA = "0x9E7158")]
		public MMRoomSelector()
		{
		}
	}
}
namespace DAShooter.TwoD
{
	[Token(Token = "0x2000263")]
	public class AIStateBase : StateBase
	{
		[Serializable]
		[Token(Token = "0x2000264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BD9C", Offset = "0x50BD9C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<RaycastHit2D> <>9__7_0;

			[Token(Token = "0x4000D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<RaycastHit> <>9__8_0;

			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x7D8E60", Offset = "0x7D8E60", VA = "0x7D8E60")]
			public <>c()
			{
			}

			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x7D8E68", Offset = "0x7D8E68", VA = "0x7D8E68")]
			internal int <IsPlayerVisible2D>b__7_0(RaycastHit2D x, RaycastHit2D y)
			{
				return default(int);
			}

			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x7D8EE4", Offset = "0x7D8EE4", VA = "0x7D8EE4")]
			internal int <IsPlayerVisible3D>b__8_0(RaycastHit x, RaycastHit y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AIController2D controller;

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x9AB984", Offset = "0x9AB984", VA = "0x9AB984")]
		public AIStateBase(AIController2D controller, float updateDelay)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x9AB9B8", Offset = "0x9AB9B8", VA = "0x9AB9B8", Slot = "18")]
		protected virtual void HandleFrameUpdate(float elapsedTime)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x9AB9BC", Offset = "0x9AB9BC", VA = "0x9AB9BC", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x9ABAD8", Offset = "0x9ABAD8", VA = "0x9ABAD8")]
		protected bool IsWithinPlayerProximity(ref Collider outCollider, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x9ABAE0", Offset = "0x9ABAE0", VA = "0x9ABAE0")]
		protected GameObject GetPlayer()
		{
			return null;
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x9ABB48", Offset = "0x9ABB48", VA = "0x9ABB48")]
		protected bool IsPlayerVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x9ABB6C", Offset = "0x9ABB6C", VA = "0x9ABB6C")]
		protected bool IsPlayerVisible2D()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x9AC0C0", Offset = "0x9AC0C0", VA = "0x9AC0C0")]
		protected bool IsPlayerVisible3D()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000265")]
	public class AIStateMoveToLastKnownPosition : AIStateBase
	{
		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x9ACB70", Offset = "0x9ACB70", VA = "0x9ACB70")]
		public AIStateMoveToLastKnownPosition(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x9ACBA4", Offset = "0x9ACBA4", VA = "0x9ACBA4", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x9ACC98", Offset = "0x9ACC98", VA = "0x9ACC98", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x9ACC9C", Offset = "0x9ACC9C", VA = "0x9ACC9C", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class AIStateWaitAndSearch : AIStateBase
	{
		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeSinceStart;

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x9ACD84", Offset = "0x9ACD84", VA = "0x9ACD84")]
		public AIStateWaitAndSearch(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x9ADAE8", Offset = "0x9ADAE8", VA = "0x9ADAE8", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x9ADB28", Offset = "0x9ADB28", VA = "0x9ADB28", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class AIStatePersuit : AIStateBase
	{
		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform followTarget;

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x9AC8FC", Offset = "0x9AC8FC", VA = "0x9AC8FC")]
		public AIStatePersuit(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x9AD764", Offset = "0x9AD764", VA = "0x9AD764", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x9AD81C", Offset = "0x9AD81C", VA = "0x9AD81C", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x9AD848", Offset = "0x9AD848", VA = "0x9AD848", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x9AD84C", Offset = "0x9AD84C", VA = "0x9AD84C", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class AIStatePatrol : AIStateBase
	{
		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentWaypointIndex;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3[] waypointOffsets;

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x9AA864", Offset = "0x9AA864", VA = "0x9AA864")]
		public AIStatePatrol(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x9AD184", Offset = "0x9AD184", VA = "0x9AD184", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x9AD2EC", Offset = "0x9AD2EC", VA = "0x9AD2EC")]
		private void MoveToCurrentPoint()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x9AD458", Offset = "0x9AD458", VA = "0x9AD458", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x9AD45C", Offset = "0x9AD45C", VA = "0x9AD45C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x9AD460", Offset = "0x9AD460", VA = "0x9AD460", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000269")]
	internal enum AIAttackAnimState
	{
		[Token(Token = "0x4000D3C")]
		Requested,
		[Token(Token = "0x4000D3D")]
		Running,
		[Token(Token = "0x4000D3E")]
		InterAttackWait
	}
	[Token(Token = "0x200026A")]
	public class AIStateDead : AIStateBase
	{
		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x9ABAA4", Offset = "0x9ABAA4", VA = "0x9ABAA4")]
		public AIStateDead(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x9AC640", Offset = "0x9AC640", VA = "0x9AC640", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x9AC6B8", Offset = "0x9AC6B8", VA = "0x9AC6B8", Slot = "15")]
		public override void OnExit()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class AIStateIdle : AIStateBase
	{
		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x9AA898", Offset = "0x9AA898", VA = "0x9AA898")]
		public AIStateIdle(AIController2D controller)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x9AC7F8", Offset = "0x9AC7F8", VA = "0x9AC7F8", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x9AC850", Offset = "0x9AC850", VA = "0x9AC850", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x9AC858", Offset = "0x9AC858", VA = "0x9AC858", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class AIController2D : CharacterControlScript
	{
		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DungeonNavAgent agent;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PatrolPath patrol;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CapsuleCollider capsule;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LastPlayerSighting lastSighting;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool hasPatrolling;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float fieldOfView;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxViewSight;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float searchWaitTime;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float playerCloseByDistance;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float destinationArriveProximity;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float playerProximityRadius;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool mode2D;

		[Token(Token = "0x17000182")]
		public DungeonNavAgent Agent
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0x9AA6E8", Offset = "0x9AA6E8", VA = "0x9AA6E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		public CapsuleCollider Capsule
		{
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0x9AA6F0", Offset = "0x9AA6F0", VA = "0x9AA6F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		public PatrolPath Patrol
		{
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0x9AA6F8", Offset = "0x9AA6F8", VA = "0x9AA6F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public LastPlayerSighting LastSighting
		{
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0x9AA700", Offset = "0x9AA700", VA = "0x9AA700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x9AA708", Offset = "0x9AA708", VA = "0x9AA708", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x9AA8CC", Offset = "0x9AA8CC", VA = "0x9AA8CC", Slot = "5")]
		public override bool GetInputJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x9AA8D4", Offset = "0x9AA8D4", VA = "0x9AA8D4", Slot = "6")]
		public override bool GetInputAttackPrimary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x9AA8DC", Offset = "0x9AA8DC", VA = "0x9AA8DC", Slot = "7")]
		public override bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x9AA8E4", Offset = "0x9AA8E4", VA = "0x9AA8E4", Slot = "8")]
		public override void ApplyMovement(UnityEngine.Vector3 velocity)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x9AA8E8", Offset = "0x9AA8E8", VA = "0x9AA8E8")]
		public AIController2D()
		{
		}
	}
}
namespace JackRabbit
{
	[Token(Token = "0x200026D")]
	public class EnemyController : MonoBehaviour
	{
		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxHealth;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool facingRight;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentHealth;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x17000186")]
		public bool Alive
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x7B4BDC", Offset = "0x7B4BDC", VA = "0x7B4BDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x7B4A34", Offset = "0x7B4A34", VA = "0x7B4A34")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x7B4A9C", Offset = "0x7B4A9C", VA = "0x7B4A9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x7B4B60", Offset = "0x7B4B60", VA = "0x7B4B60")]
		private void Flip()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x7B4BEC", Offset = "0x7B4BEC", VA = "0x7B4BEC")]
		public void ApplyDamage(float amount)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x7B4C10", Offset = "0x7B4C10", VA = "0x7B4C10")]
		private void OnDead()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x7B4D74", Offset = "0x7B4D74", VA = "0x7B4D74")]
		public EnemyController()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class FollowPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DungeonNavAgent agent;

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x1480CD0", Offset = "0x1480CD0", VA = "0x1480CD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x1480D2C", Offset = "0x1480D2C", VA = "0x1480D2C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x1480DCC", Offset = "0x1480DCC", VA = "0x1480DCC")]
		public FollowPlayer()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivity;

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x1480DD4", Offset = "0x1480DD4", VA = "0x1480DD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x1480E90", Offset = "0x1480E90", VA = "0x1480E90")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x1480E08", Offset = "0x1480E08", VA = "0x1480E08")]
		private void SetTarget(UnityEngine.Vector3 position3D)
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x1480F60", Offset = "0x1480F60", VA = "0x1480F60")]
		public FollowTarget()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class GameControllerJackRabbit : MonoBehaviour
	{
		[Token(Token = "0x2000271")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDAC", Offset = "0x50BDAC")]
		private sealed class <RebuildLevelRoutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameControllerJackRabbit <>4__this;

			[Token(Token = "0x17000188")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D67")]
				[Address(RVA = "0x7DEE94", Offset = "0x7DEE94", VA = "0x7DEE94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000189")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D69")]
				[Address(RVA = "0x7DEEDC", Offset = "0x7DEEDC", VA = "0x7DEEDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x7DEB24", Offset = "0x7DEB24", VA = "0x7DEB24")]
			[DebuggerHidden]
			public <RebuildLevelRoutine>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000D65")]
			[Address(RVA = "0x7DEB50", Offset = "0x7DEB50", VA = "0x7DEB50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x7DEB54", Offset = "0x7DEB54", VA = "0x7DEB54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D68")]
			[Address(RVA = "0x7DEE9C", Offset = "0x7DEE9C", VA = "0x7DEE9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text loadingText;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameControllerJackRabbit instance;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LevelNpcSpawner npcSpawner;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WaypointGenerator waypointGenerator;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SpecialRoomFinder2D specialRoomFinder;

		[Token(Token = "0x17000187")]
		public static GameControllerJackRabbit Instance
		{
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x148592C", Offset = "0x148592C", VA = "0x148592C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x1485978", Offset = "0x1485978", VA = "0x1485978")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x1485AB8", Offset = "0x1485AB8", VA = "0x1485AB8")]
		public void CreateNewLevel()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x1485BA4", Offset = "0x1485BA4", VA = "0x1485BA4")]
		private void SetLoadingTextVisible(bool visible)
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x1485C04", Offset = "0x1485C04", VA = "0x1485C04")]
		private void NotifyBuild()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x1485C7C", Offset = "0x1485C7C", VA = "0x1485C7C")]
		private void NotifyDestroyed()
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x1485B2C", Offset = "0x1485B2C", VA = "0x1485B2C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5177D0", Offset = "0x5177D0")]
		private IEnumerator RebuildLevelRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x1485CC8", Offset = "0x1485CC8", VA = "0x1485CC8")]
		private void AppendLoadingText(string text)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x1485D24", Offset = "0x1485D24", VA = "0x1485D24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x1485D60", Offset = "0x1485D60", VA = "0x1485D60")]
		private void RebuildNavigation()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x1485D7C", Offset = "0x1485D7C", VA = "0x1485D7C")]
		public GameControllerJackRabbit()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class LevelEndGoal2D : MonoBehaviour
	{
		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x9E17E4", Offset = "0x9E17E4", VA = "0x9E17E4")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x9E18D4", Offset = "0x9E18D4", VA = "0x9E18D4")]
		public LevelEndGoal2D()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class PlayerController : MonoBehaviour
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxSpeed;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attackMoveSpeedMultiplier;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sprintMultiplier;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float movementSensitivity;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float attackStength;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool facingRight;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool attacking;

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x99D89C", Offset = "0x99D89C", VA = "0x99D89C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x99D928", Offset = "0x99D928", VA = "0x99D928")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x99DBCC", Offset = "0x99DBCC", VA = "0x99DBCC")]
		private void OnAttack()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x99DDFC", Offset = "0x99DDFC", VA = "0x99DDFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x99DB50", Offset = "0x99DB50", VA = "0x99DB50")]
		private void Flip()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x99DE00", Offset = "0x99DE00", VA = "0x99DE00")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class SpecialRoomFinder2D : DungeonEventListener
	{
		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject levelEndGoalTemplate;

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x7F709C", Offset = "0x7F709C", VA = "0x7F709C", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x7F70A4", Offset = "0x7F70A4", VA = "0x7F70A4")]
		public void FindSpecialRooms(DungeonModel model)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x7F7678", Offset = "0x7F7678", VA = "0x7F7678", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x7F71C4", Offset = "0x7F71C4", VA = "0x7F71C4")]
		private void SetStartingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x7F736C", Offset = "0x7F736C", VA = "0x7F736C")]
		private void SetEndingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x7F767C", Offset = "0x7F767C", VA = "0x7F767C")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x7F768C", Offset = "0x7F768C", VA = "0x7F768C")]
		public SpecialRoomFinder2D()
		{
		}
	}
}
namespace DASideScroller
{
	[Token(Token = "0x2000275")]
	public class SSCamera : MonoBehaviour
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float positionSmoothing;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAtSmoothing;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 currentLookAt;

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xAA2B48", Offset = "0xAA2B48", VA = "0xAA2B48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xAA2B80", Offset = "0xAA2B80", VA = "0xAA2B80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xAA2D04", Offset = "0xAA2D04", VA = "0xAA2D04")]
		public SSCamera()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class SSGame : MonoBehaviour
	{
		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xAA2D14", Offset = "0xAA2D14", VA = "0xAA2D14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xAA2D18", Offset = "0xAA2D18", VA = "0xAA2D18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xAA2D1C", Offset = "0xAA2D1C", VA = "0xAA2D1C")]
		public SSGame()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class SSPlayerMovement : MonoBehaviour
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpSpeed;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxJumps;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float interJumpDelay;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool facingLeft;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CharacterController character;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 movement;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator anim;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int numJumpsPerformed;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastJumpTimestamp;

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xAA2D24", Offset = "0xAA2D24", VA = "0xAA2D24")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xAA2DB0", Offset = "0xAA2DB0", VA = "0xAA2DB0")]
		public void OnTeleportered()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xAA2DD0", Offset = "0xAA2DD0", VA = "0xAA2DD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xAA3074", Offset = "0xAA3074", VA = "0xAA3074")]
		private void PerformJump()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xAA2E48", Offset = "0xAA2E48", VA = "0xAA2E48")]
		private void Move(float h)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xAA2F8C", Offset = "0xAA2F8C", VA = "0xAA2F8C")]
		private void Turning(float h)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xAA3008", Offset = "0xAA3008", VA = "0xAA3008")]
		private void Animating(float h)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xAA30DC", Offset = "0xAA30DC", VA = "0xAA30DC")]
		public SSPlayerMovement()
		{
		}
	}
}
namespace Eppy
{
	[Token(Token = "0x2000278")]
	public sealed class Tuple<T1, T2>
	{
		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T1 item1;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T2 item2;

		[Token(Token = "0x1700018A")]
		public T1 Item1
		{
			[Token(Token = "0x6000D87")]
			get
			{
				return (T1)null;
			}
		}

		[Token(Token = "0x1700018B")]
		public T2 Item2
		{
			[Token(Token = "0x6000D88")]
			get
			{
				return (T2)null;
			}
		}

		[Token(Token = "0x6000D89")]
		public Tuple(T1 item1, T2 item2)
		{
		}

		[Token(Token = "0x6000D8A")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D8B")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D8C")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8D")]
		public bool Equals(Tuple<T1, T2> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8E")]
		public static bool operator ==(Tuple<T1, T2> a, Tuple<T1, T2> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8F")]
		public static bool operator !=(Tuple<T1, T2> a, Tuple<T1, T2> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D90")]
		public void Unpack(Action<T1, T2> unpackerDelegate)
		{
		}
	}
}
namespace SharpNav
{
	[Serializable]
	[Token(Token = "0x2000279")]
	public struct Area : IEquatable<Area>, IEquatable<byte>
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Area Null;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static readonly Area Default;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly byte Id;

		[Token(Token = "0x1700018C")]
		public bool IsWalkable
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x9B2CF4", Offset = "0x9B2CF4", VA = "0x9B2CF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x9B2CEC", Offset = "0x9B2CEC", VA = "0x9B2CEC")]
		public Area(byte id)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x9B2D04", Offset = "0x9B2D04", VA = "0x9B2D04")]
		public static implicit operator Area(byte value)
		{
			return default(Area);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x9B2D0C", Offset = "0x9B2D0C", VA = "0x9B2D0C")]
		public static bool operator ==(Area left, Area right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x9B2D2C", Offset = "0x9B2D2C", VA = "0x9B2D2C")]
		public static bool operator !=(Area left, Area right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x9B2D1C", Offset = "0x9B2D1C", VA = "0x9B2D1C", Slot = "4")]
		public bool Equals(Area other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x9B2DA0", Offset = "0x9B2DA0", VA = "0x9B2DA0", Slot = "5")]
		public bool Equals(byte other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x9B2DB0", Offset = "0x9B2DB0", VA = "0x9B2DB0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x9B2F50", Offset = "0x9B2F50", VA = "0x9B2F50", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x9B2F7C", Offset = "0x9B2F7C", VA = "0x9B2F7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200027A")]
	public class AreaGenerator
	{
		[Token(Token = "0x200027B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDBC", Offset = "0x50BDBC")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x4000D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float angle;

			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x7D91B8", Offset = "0x7D91B8", VA = "0x7D91B8")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x7D91C0", Offset = "0x7D91C0", VA = "0x7D91C0")]
			internal bool <MarkAboveSlope>b__0(Triangle3 tri)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200027C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDCC", Offset = "0x50BDCC")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x4000D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float angle;

			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x7D9218", Offset = "0x7D9218", VA = "0x7D9218")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x7D9220", Offset = "0x7D9220", VA = "0x7D9220")]
			internal bool <MarkBelowSlope>b__0(Triangle3 tri)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200027D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDDC", Offset = "0x50BDDC")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x4000D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float angle;

			[Token(Token = "0x4000D83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float range;

			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x7D9278", Offset = "0x7D9278", VA = "0x7D9278")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x7D9280", Offset = "0x7D9280", VA = "0x7D9280")]
			internal bool <MarkAtSlope>b__0(Triangle3 tri)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200027E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDEC", Offset = "0x50BDEC")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4000D84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float y;

			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x7D92EC", Offset = "0x7D92EC", VA = "0x7D92EC")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x7D92F4", Offset = "0x7D92F4", VA = "0x7D92F4")]
			internal bool <MarkBelowHeight>b__0(Triangle3 tri)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200027F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BDFC", Offset = "0x50BDFC")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000D85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float y;

			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x7D9328", Offset = "0x7D9328", VA = "0x7D9328")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0x7D9330", Offset = "0x7D9330", VA = "0x7D9330")]
			internal bool <MarkAboveHeight>b__0(Triangle3 tri)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<Triangle3> tris;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int triCount;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Eppy.Tuple<Func<Triangle3, bool>, Area>> conditions;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Area defaultArea;

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x9B3048", Offset = "0x9B3048", VA = "0x9B3048")]
		private AreaGenerator(IEnumerable<Triangle3> verts, int triCount, Area defaultArea)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x9B3100", Offset = "0x9B3100", VA = "0x9B3100")]
		public static AreaGenerator From(IEnumerable<Triangle3> tris, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x9B3198", Offset = "0x9B3198", VA = "0x9B3198")]
		public static AreaGenerator From(IEnumerable<Triangle3> tris, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x9B320C", Offset = "0x9B320C", VA = "0x9B320C")]
		public static AreaGenerator From(Triangle3[] tris, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x9B32A0", Offset = "0x9B32A0", VA = "0x9B32A0")]
		public static AreaGenerator From(Triangle3[] tris, int triOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x9B333C", Offset = "0x9B333C", VA = "0x9B333C")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x9B3404", Offset = "0x9B3404", VA = "0x9B3404")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x9B34A8", Offset = "0x9B34A8", VA = "0x9B34A8")]
		public static AreaGenerator From(float[] verts, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x9B3570", Offset = "0x9B3570", VA = "0x9B3570")]
		public static AreaGenerator From(float[] verts, int floatOffset, int floatStride, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x9B3614", Offset = "0x9B3614", VA = "0x9B3614")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int[] inds, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x9B36E8", Offset = "0x9B36E8", VA = "0x9B36E8")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x9B37A4", Offset = "0x9B37A4", VA = "0x9B37A4")]
		public static AreaGenerator From(float[] verts, int[] inds, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x9B3878", Offset = "0x9B3878", VA = "0x9B3878")]
		public static AreaGenerator From(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x9B3934", Offset = "0x9B3934", VA = "0x9B3934")]
		public Area[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x9B3E48", Offset = "0x9B3E48", VA = "0x9B3E48")]
		public AreaGenerator MarkAboveSlope(float angle, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x9B3F98", Offset = "0x9B3F98", VA = "0x9B3F98")]
		public AreaGenerator MarkBelowSlope(float angle, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x9B40E8", Offset = "0x9B40E8", VA = "0x9B40E8")]
		public AreaGenerator MarkAtSlope(float angle, float range, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x9B423C", Offset = "0x9B423C", VA = "0x9B423C")]
		public AreaGenerator MarkBelowHeight(float y, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x9B438C", Offset = "0x9B438C", VA = "0x9B438C")]
		public AreaGenerator MarkAtHeight(float y, float radius, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x9B43CC", Offset = "0x9B43CC", VA = "0x9B43CC")]
		public AreaGenerator MarkAboveHeight(float y, Area area)
		{
			return null;
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x9B451C", Offset = "0x9B451C", VA = "0x9B451C")]
		public AreaGenerator MarkCustomFilter(Func<Triangle3, bool> func, Area area)
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BE0C", Offset = "0x50BE0C")]
	public class Cell
	{
		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Span> spans;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int height;

		[Token(Token = "0x1700018D")]
		public int Height
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x8E2064", Offset = "0x8E2064", VA = "0x8E2064")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018E")]
		public int SpanCount
		{
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x8E206C", Offset = "0x8E206C", VA = "0x8E206C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700018F")]
		public int WalkableSpanCount
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x8E20B8", Offset = "0x8E20B8", VA = "0x8E20B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000190")]
		public ReadOnlyCollection<Span> Spans
		{
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x8E21A0", Offset = "0x8E21A0", VA = "0x8E21A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000191")]
		internal List<Span> MutableSpans
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x8E21F4", Offset = "0x8E21F4", VA = "0x8E21F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public Span? Item
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x8E21FC", Offset = "0x8E21FC", VA = "0x8E21FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x8E1FD0", Offset = "0x8E1FD0", VA = "0x8E1FD0")]
		public Cell(int height)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x8E2440", Offset = "0x8E2440", VA = "0x8E2440")]
		public void AddSpan(Span span)
		{
		}
	}
	[Token(Token = "0x2000281")]
	public struct CompactCell
	{
		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int StartIndex;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x8E8468", Offset = "0x8E8468", VA = "0x8E8468")]
		public CompactCell(int start, int count)
		{
		}
	}
	[Token(Token = "0x2000282")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BE44", Offset = "0x50BE44")]
	public class CompactHeightfield
	{
		[Token(Token = "0x2000283")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BE7C", Offset = "0x50BE7C")]
		private sealed class <get_Item>d__42 : IEnumerable<CompactSpan>, IEnumerable, IEnumerator<CompactSpan>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private CompactSpan <>2__current;

			[Token(Token = "0x4000D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int x;

			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int <>3__x;

			[Token(Token = "0x4000D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CompactHeightfield <>4__this;

			[Token(Token = "0x4000D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int y;

			[Token(Token = "0x4000D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int <>3__y;

			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <end>5__2;

			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <i>5__3;

			[Token(Token = "0x170001A3")]
			private CompactSpan System.Collections.Generic.IEnumerator<SharpNav.CompactSpan>.Current
			{
				[Token(Token = "0x6000DEA")]
				[Address(RVA = "0x7DAEDC", Offset = "0x7DAEDC", VA = "0x7DAEDC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(CompactSpan);
				}
			}

			[Token(Token = "0x170001A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DEC")]
				[Address(RVA = "0x7DAF2C", Offset = "0x7DAF2C", VA = "0x7DAF2C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0x7DAD7C", Offset = "0x7DAD7C", VA = "0x7DAD7C")]
			[DebuggerHidden]
			public <get_Item>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x7DADB4", Offset = "0x7DADB4", VA = "0x7DADB4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x7DADB8", Offset = "0x7DADB8", VA = "0x7DADB8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x7DAEEC", Offset = "0x7DAEEC", VA = "0x7DAEEC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x7DAF90", Offset = "0x7DAF90", VA = "0x7DAF90", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<CompactSpan> System.Collections.Generic.IEnumerable<SharpNav.CompactSpan>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x7DB050", Offset = "0x7DB050", VA = "0x7DB050", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000284")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50BE8C", Offset = "0x50BE8C")]
		private sealed class <get_Item>d__44 : IEnumerable<CompactSpan>, IEnumerable, IEnumerator<CompactSpan>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private CompactSpan <>2__current;

			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CompactHeightfield <>4__this;

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int i;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__i;

			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <end>5__2;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <j>5__3;

			[Token(Token = "0x170001A5")]
			private CompactSpan System.Collections.Generic.IEnumerator<SharpNav.CompactSpan>.Current
			{
				[Token(Token = "0x6000DF2")]
				[Address(RVA = "0x7DB150", Offset = "0x7DB150", VA = "0x7DB150", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(CompactSpan);
				}
			}

			[Token(Token = "0x170001A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DF4")]
				[Address(RVA = "0x7DB1A0", Offset = "0x7DB1A0", VA = "0x7DB1A0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x7DB054", Offset = "0x7DB054", VA = "0x7DB054")]
			[DebuggerHidden]
			public <get_Item>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x7DB08C", Offset = "0x7DB08C", VA = "0x7DB08C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x7DB090", Offset = "0x7DB090", VA = "0x7DB090", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x7DB160", Offset = "0x7DB160", VA = "0x7DB160", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x7DB204", Offset = "0x7DB204", VA = "0x7DB204", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<CompactSpan> System.Collections.Generic.IEnumerable<SharpNav.CompactSpan>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x7DB2BC", Offset = "0x7DB2BC", VA = "0x7DB2BC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BBox3 bounds;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int width;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int height;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int length;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cellSize;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cellHeight;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CompactCell[] cells;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CompactSpan[] spans;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Area[] areas;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] distances;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int maxDistance;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int maxRegions;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int borderSize;

		[Token(Token = "0x17000193")]
		public int Width
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x8E8B54", Offset = "0x8E8B54", VA = "0x8E8B54")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000194")]
		public int Height
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x8E8B5C", Offset = "0x8E8B5C", VA = "0x8E8B5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000195")]
		public int Length
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0x8E8B64", Offset = "0x8E8B64", VA = "0x8E8B64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000196")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x8E8B6C", Offset = "0x8E8B6C", VA = "0x8E8B6C")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x17000197")]
		public float CellSize
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x8E8B80", Offset = "0x8E8B80", VA = "0x8E8B80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000198")]
		public float CellHeight
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x8E8B88", Offset = "0x8E8B88", VA = "0x8E8B88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000199")]
		public int MaxDistance
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x8E8B90", Offset = "0x8E8B90", VA = "0x8E8B90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019A")]
		public int[] Distances
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x8E8B98", Offset = "0x8E8B98", VA = "0x8E8B98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019B")]
		public int BorderSize
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x8E8BA0", Offset = "0x8E8BA0", VA = "0x8E8BA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019C")]
		public int MaxRegions
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x8E8BA8", Offset = "0x8E8BA8", VA = "0x8E8BA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019D")]
		public CompactCell[] Cells
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x8E8BB0", Offset = "0x8E8BB0", VA = "0x8E8BB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		public CompactSpan[] Spans
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x8E8BB8", Offset = "0x8E8BB8", VA = "0x8E8BB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		public Area[] Areas
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x8E8BC0", Offset = "0x8E8BC0", VA = "0x8E8BC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		public IEnumerable<CompactSpan> Item
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x8E8BC8", Offset = "0x8E8BC8", VA = "0x8E8BC8")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x517880", Offset = "0x517880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public IEnumerable<CompactSpan> Item
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x8E8C58", Offset = "0x8E8C58", VA = "0x8E8C58")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5178E0", Offset = "0x5178E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A2")]
		public CompactSpan Item
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x8E8CE0", Offset = "0x8E8CE0", VA = "0x8E8CE0")]
			get
			{
				return default(CompactSpan);
			}
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x8E8470", Offset = "0x8E8470", VA = "0x8E8470")]
		public CompactHeightfield(Heightfield field, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x8E84D0", Offset = "0x8E84D0", VA = "0x8E84D0")]
		public CompactHeightfield(Heightfield field, int walkableHeight, int walkableClimb)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x8E8D20", Offset = "0x8E8D20", VA = "0x8E8D20")]
		public void BuildDistanceField()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x8E9CB8", Offset = "0x8E9CB8", VA = "0x8E9CB8")]
		public void Erode(int radius)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x8E9E0C", Offset = "0x8E9E0C", VA = "0x8E9E0C")]
		public void BuildRegions(int borderSize, int minRegionArea, int mergeRegionArea)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x8EA728", Offset = "0x8EA728", VA = "0x8EA728")]
		private static void AppendStacks(List<CompactSpanReference> source, List<CompactSpanReference> destination, RegionId[] regions)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x8EB8C8", Offset = "0x8EB8C8", VA = "0x8EB8C8")]
		private int FilterSmallRegions(RegionId[] regionIds, int minRegionArea, int mergeRegionSize, int maxRegionId)
		{
			return default(int);
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x8E8E54", Offset = "0x8E8E54", VA = "0x8E8E54")]
		private void CalculateDistanceField(int[] src)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x8E98EC", Offset = "0x8E98EC", VA = "0x8E98EC")]
		private void BoxBlur(int[] distances, int threshold, int[] buffer)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x8EA87C", Offset = "0x8EA87C", VA = "0x8EA87C")]
		private void ExpandRegions(RegionId[] regions, int[] floodDistances, int maxIterations, int level, List<CompactSpanReference> stack, RegionId[] regionBuffer, int[] distanceBuffer)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x8EB068", Offset = "0x8EB068", VA = "0x8EB068")]
		private bool FloodRegion(RegionId[] regions, int[] floodDistances, int regionIndex, int level, ref CompactSpanReference start)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x8EC61C", Offset = "0x8EC61C", VA = "0x8EC61C")]
		private bool IsSolidEdge(RegionId[] regions, ref CompactSpanReference spanRef, Direction dir)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x8EC7F8", Offset = "0x8EC7F8", VA = "0x8EC7F8")]
		private void WalkContour(RegionId[] regions, CompactSpanReference spanRef, Direction dir, List<RegionId> cont)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x8EA3A0", Offset = "0x8EA3A0", VA = "0x8EA3A0")]
		private void FillRectangleRegion(RegionId[] regions, RegionId newRegionId, int left, int right, int bottom, int top)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x8EA4B8", Offset = "0x8EA4B8", VA = "0x8EA4B8")]
		private void SortCellsByLevel(RegionId[] regions, List<CompactSpanReference>[] stacks, int startlevel, int numStacks, int logLevelsPerStack)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x8ECD98", Offset = "0x8ECD98", VA = "0x8ECD98")]
		public ContourSet BuildContourSet(NavMeshGenerationSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x8ECDBC", Offset = "0x8ECDBC", VA = "0x8ECDBC")]
		public ContourSet BuildContourSet(float maxError, int maxEdgeLength, ContourBuildFlags buildFlags)
		{
			return null;
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x8ED6CC", Offset = "0x8ED6CC", VA = "0x8ED6CC")]
		private void WalkContour(CompactSpanReference spanReference, EdgeFlags[] flags, List<ContourVertex> points)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x8EDC58", Offset = "0x8EDC58", VA = "0x8EDC58")]
		private int GetCornerHeight(CompactSpanReference sr, Direction dir, out bool isBorderVertex)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000285")]
	public struct CompactSpan
	{
		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Minimum;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Height;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte ConnectionWest;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public byte ConnectionNorth;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public byte ConnectionEast;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public byte ConnectionSouth;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RegionId Region;

		[Token(Token = "0x4000DB0")]
		private const byte NotConnected = byte.MaxValue;

		[Token(Token = "0x170001A7")]
		public bool HasUpperBound
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xA492D4", Offset = "0xA492D4", VA = "0xA492D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A8")]
		public int Maximum
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xA492E8", Offset = "0xA492E8", VA = "0xA492E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001A9")]
		public int ConnectionCount
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xA492F4", Offset = "0xA492F4", VA = "0xA492F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xA4924C", Offset = "0xA4924C", VA = "0xA4924C")]
		public CompactSpan(int minimum, int height)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xA49330", Offset = "0xA49330", VA = "0xA49330")]
		public static void OverlapMin(ref CompactSpan left, ref CompactSpan right, out int min)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xA493B8", Offset = "0xA493B8", VA = "0xA493B8")]
		public static void OverlapMax(ref CompactSpan left, ref CompactSpan right, out int max)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xA49480", Offset = "0xA49480", VA = "0xA49480")]
		public static CompactSpan FromMinMax(int min, int max)
		{
			return default(CompactSpan);
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xA494A8", Offset = "0xA494A8", VA = "0xA494A8")]
		public static void FromMinMax(int min, int max, out CompactSpan span)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xA49534", Offset = "0xA49534", VA = "0xA49534")]
		public static void SetConnection(Direction dir, int i, ref CompactSpan s)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xA49620", Offset = "0xA49620", VA = "0xA49620")]
		public static void UnsetConnection(Direction dir, ref CompactSpan s)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xA496C4", Offset = "0xA496C4", VA = "0xA496C4")]
		public static int GetConnection(ref CompactSpan s, Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xA4975C", Offset = "0xA4975C", VA = "0xA4975C")]
		public int GetConnection(Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xA49760", Offset = "0xA49760", VA = "0xA49760")]
		public bool IsConnected(Direction dir)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000286")]
	public struct CompactSpanReference : IEquatable<CompactSpanReference>
	{
		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CompactSpanReference Null;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int X;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int Y;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Index;

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xA49800", Offset = "0xA49800", VA = "0xA49800")]
		public CompactSpanReference(int x, int y, int i)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xA4980C", Offset = "0xA4980C", VA = "0xA4980C")]
		public static bool operator ==(CompactSpanReference left, CompactSpanReference right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xA49858", Offset = "0xA49858", VA = "0xA49858")]
		public static bool operator !=(CompactSpanReference left, CompactSpanReference right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xA498EC", Offset = "0xA498EC", VA = "0xA498EC", Slot = "4")]
		public bool Equals(CompactSpanReference other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xA49970", Offset = "0xA49970", VA = "0xA49970", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xA49A90", Offset = "0xA49A90", VA = "0xA49A90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000287")]
	public class Contour
	{
		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ContourVertex[] vertices;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RegionId regionId;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Area area;

		[Token(Token = "0x170001AA")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xA4AEF0", Offset = "0xA4AEF0", VA = "0xA4AEF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AB")]
		public bool IsNull
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xA4AEF8", Offset = "0xA4AEF8", VA = "0xA4AEF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AC")]
		public Area Area
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xA4AF18", Offset = "0xA4AF18", VA = "0xA4AF18")]
			get
			{
				return default(Area);
			}
		}

		[Token(Token = "0x170001AD")]
		public RegionId RegionId
		{
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0xA4AF20", Offset = "0xA4AF20", VA = "0xA4AF20")]
			get
			{
				return default(RegionId);
			}
		}

		[Token(Token = "0x170001AE")]
		public int Area2D
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xA4AF28", Offset = "0xA4AF28", VA = "0xA4AF28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xA4ADD8", Offset = "0xA4ADD8", VA = "0xA4ADD8")]
		public Contour(List<ContourVertex> verts, RegionId region, Area area, int borderSize)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xA4AFC0", Offset = "0xA4AFC0", VA = "0xA4AFC0")]
		public void MergeWith(Contour contour)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xA4B1C8", Offset = "0xA4B1C8", VA = "0xA4B1C8")]
		private static void GetClosestIndices(Contour a, Contour b, out int indexA, out int indexB)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xA4B3AC", Offset = "0xA4B3AC", VA = "0xA4B3AC")]
		public static void Simplify(List<ContourVertex> rawVerts, List<ContourVertex> simplified, float maxError, int maxEdgeLen, ContourBuildFlags buildFlags)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xA4C13C", Offset = "0xA4C13C", VA = "0xA4C13C")]
		public static void RemoveDegenerateSegments(List<ContourVertex> simplified)
		{
		}
	}
	[Token(Token = "0x2000288")]
	[Flags]
	public enum ContourBuildFlags
	{
		[Token(Token = "0x4000DB9")]
		None = 0,
		[Token(Token = "0x4000DBA")]
		TessellateWallEdges = 1,
		[Token(Token = "0x4000DBB")]
		TessellateAreaEdges = 2
	}
	[Token(Token = "0x2000289")]
	public class ContourSet : ICollection<Contour>, IEnumerable<Contour>, IEnumerable
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Contour> contours;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BBox3 bounds;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int width;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int height;

		[Token(Token = "0x170001AF")]
		public int Count
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0xA4C324", Offset = "0xA4C324", VA = "0xA4C324", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B0")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xA4C370", Offset = "0xA4C370", VA = "0xA4C370")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170001B1")]
		public int Width
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0xA4C384", Offset = "0xA4C384", VA = "0xA4C384")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B2")]
		public int Height
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0xA4C38C", Offset = "0xA4C38C", VA = "0xA4C38C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B3")]
		private bool System.Collections.Generic.ICollection<SharpNav.Contour>.IsReadOnly
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0xA4C394", Offset = "0xA4C394", VA = "0xA4C394", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xA4C284", Offset = "0xA4C284", VA = "0xA4C284")]
		public ContourSet(IEnumerable<Contour> contours, BBox3 bounds, int width, int height)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xA4C39C", Offset = "0xA4C39C", VA = "0xA4C39C", Slot = "8")]
		public bool Contains(Contour item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xA4C400", Offset = "0xA4C400", VA = "0xA4C400", Slot = "9")]
		public void CopyTo(Contour[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xA4C46C", Offset = "0xA4C46C", VA = "0xA4C46C", Slot = "11")]
		public IEnumerator<Contour> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xA4C500", Offset = "0xA4C500", VA = "0xA4C500", Slot = "6")]
		private void System.Collections.Generic.ICollection<SharpNav.Contour>.Add(Contour item)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xA4C540", Offset = "0xA4C540", VA = "0xA4C540", Slot = "7")]
		private void System.Collections.Generic.ICollection<SharpNav.Contour>.Clear()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xA4C580", Offset = "0xA4C580", VA = "0xA4C580", Slot = "10")]
		private bool System.Collections.Generic.ICollection<SharpNav.Contour>.Remove(Contour item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xA4C5C0", Offset = "0xA4C5C0", VA = "0xA4C5C0", Slot = "12")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200028A")]
	public struct ContourVertex
	{
		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Z;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RegionId RegionId;

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xA4C094", Offset = "0xA4C094", VA = "0xA4C094")]
		public ContourVertex(int x, int y, int z, RegionId region)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xA4C5C4", Offset = "0xA4C5C4", VA = "0xA4C5C4")]
		public ContourVertex(SharpNav.Geometry.Vector3 vec, RegionId region)
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xA4C050", Offset = "0xA4C050", VA = "0xA4C050")]
		public ContourVertex(ContourVertex vert, int index)
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xA4C614", Offset = "0xA4C614", VA = "0xA4C614")]
		public ContourVertex(ContourVertex vert, RegionId region)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xA4B370", Offset = "0xA4B370", VA = "0xA4B370")]
		public static bool IsLeft(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xA4C624", Offset = "0xA4C624", VA = "0xA4C624")]
		public static void Area2D(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c, out int area)
		{
		}
	}
	[Token(Token = "0x200028B")]
	public enum Direction
	{
		[Token(Token = "0x4000DC5")]
		West,
		[Token(Token = "0x4000DC6")]
		North,
		[Token(Token = "0x4000DC7")]
		East,
		[Token(Token = "0x4000DC8")]
		South
	}
	[Token(Token = "0x200028C")]
	public static class DirectionExtensions
	{
		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] OffsetsX;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] OffsetsY;

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xA5933C", Offset = "0xA5933C", VA = "0xA5933C")]
		public static int GetHorizontalOffset(this Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xA593CC", Offset = "0xA593CC", VA = "0xA593CC")]
		public static int GetVerticalOffset(this Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xA5945C", Offset = "0xA5945C", VA = "0xA5945C")]
		public static Direction NextClockwise(this Direction dir)
		{
			return default(Direction);
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xA594C8", Offset = "0xA594C8", VA = "0xA594C8")]
		public static Direction NextCounterClockwise(this Direction dir)
		{
			return default(Direction);
		}
	}
	[Token(Token = "0x200028D")]
	[Flags]
	public enum EdgeFlags : byte
	{
		[Token(Token = "0x4000DCC")]
		None = 0,
		[Token(Token = "0x4000DCD")]
		West = 1,
		[Token(Token = "0x4000DCE")]
		North = 2,
		[Token(Token = "0x4000DCF")]
		East = 4,
		[Token(Token = "0x4000DD0")]
		South = 8,
		[Token(Token = "0x4000DD1")]
		All = 0xF
	}
	[Token(Token = "0x200028E")]
	public static class EdgeFlagsHelper
	{
		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x7B373C", Offset = "0x7B373C", VA = "0x7B373C")]
		public static void AddEdge(ref EdgeFlags edges, Direction dir)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x7B3754", Offset = "0x7B3754", VA = "0x7B3754")]
		public static void FlipEdges(ref EdgeFlags edges)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x7B3764", Offset = "0x7B3764", VA = "0x7B3764")]
		public static bool IsConnected(ref EdgeFlags edges, Direction dir)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x7B377C", Offset = "0x7B377C", VA = "0x7B377C")]
		public static void RemoveEdge(ref EdgeFlags edges, Direction dir)
		{
		}
	}
	[Token(Token = "0x200028F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BECC", Offset = "0x50BECC")]
	public class HeightPatch
	{
		[Token(Token = "0x4000DD2")]
		public const int UnsetHeight = -1;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int xmin;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int ymin;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int width;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int length;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] data;

		[Token(Token = "0x170001B4")]
		public int X
		{
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0xD4A3C8", Offset = "0xD4A3C8", VA = "0xD4A3C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B5")]
		public int Y
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xD4A3D0", Offset = "0xD4A3D0", VA = "0xD4A3D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B6")]
		public int Width
		{
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0xD4A3D8", Offset = "0xD4A3D8", VA = "0xD4A3D8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B7")]
		public int Length
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xD4A3E0", Offset = "0xD4A3E0", VA = "0xD4A3E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B8")]
		public int Item
		{
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xD4A3E8", Offset = "0xD4A3E8", VA = "0xD4A3E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xD4A424", Offset = "0xD4A424", VA = "0xD4A424")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public int Item
		{
			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xD4A460", Offset = "0xD4A460", VA = "0xD4A460")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xD4A4A4", Offset = "0xD4A4A4", VA = "0xD4A4A4")]
			set
			{
			}
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xD4A278", Offset = "0xD4A278", VA = "0xD4A278")]
		public HeightPatch(int x, int y, int width, int length)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xD4A4E8", Offset = "0xD4A4E8", VA = "0xD4A4E8")]
		public bool IsSet(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xD4A52C", Offset = "0xD4A52C", VA = "0xD4A52C")]
		public bool TryGetHeight(int index, out int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xD4A55C", Offset = "0xD4A55C", VA = "0xD4A55C")]
		public bool TryGetHeight(int x, int y, out int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xD4A58C", Offset = "0xD4A58C", VA = "0xD4A58C")]
		public void Resize(int x, int y, int width, int length)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xD4A370", Offset = "0xD4A370", VA = "0xD4A370")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xD4A610", Offset = "0xD4A610", VA = "0xD4A610")]
		public void SetAll(int h)
		{
		}
	}
	[Token(Token = "0x2000290")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BF04", Offset = "0x50BF04")]
	public class Heightfield
	{
		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BBox3 bounds;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int width;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int height;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int length;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cellSize;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cellHeight;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Cell[] cells;

		[Token(Token = "0x170001BA")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xD4D980", Offset = "0xD4D980", VA = "0xD4D980")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170001BB")]
		public SharpNav.Geometry.Vector3 Minimum
		{
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xD4D994", Offset = "0xD4D994", VA = "0xD4D994")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170001BC")]
		public SharpNav.Geometry.Vector3 Maximum
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xD4D9A0", Offset = "0xD4D9A0", VA = "0xD4D9A0")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170001BD")]
		public int Width
		{
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0xD4D9AC", Offset = "0xD4D9AC", VA = "0xD4D9AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BE")]
		public int Height
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xD4D9B4", Offset = "0xD4D9B4", VA = "0xD4D9B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BF")]
		public int Length
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xD4D9BC", Offset = "0xD4D9BC", VA = "0xD4D9BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C0")]
		public SharpNav.Geometry.Vector3 CellSize
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xD4D9C4", Offset = "0xD4D9C4", VA = "0xD4D9C4")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170001C1")]
		public float CellSizeXZ
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xD4DA00", Offset = "0xD4DA00", VA = "0xD4DA00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C2")]
		public float CellHeight
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xD4DA08", Offset = "0xD4DA08", VA = "0xD4DA08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C3")]
		public int SpanCount
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xD4DA10", Offset = "0xD4DA10", VA = "0xD4DA10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C4")]
		public Cell Item
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xD4DA90", Offset = "0xD4DA90", VA = "0xD4DA90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		public Cell Item
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xD4DB2C", Offset = "0xD4DB2C", VA = "0xD4DB2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		public Span Item
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xD4DBAC", Offset = "0xD4DBAC", VA = "0xD4DBAC")]
			get
			{
				return default(Span);
			}
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xD4A664", Offset = "0xD4A664", VA = "0xD4A664")]
		public void RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[] verts, int[] inds, Area[] areas)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xD4A6B4", Offset = "0xD4A6B4", VA = "0xD4A6B4")]
		public void RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xD4AF68", Offset = "0xD4AF68", VA = "0xD4AF68")]
		public void RasterizeTrianglesIndexedWithAreas(float[] verts, int[] inds, Area[] areas)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xD4AFB8", Offset = "0xD4AFB8", VA = "0xD4AFB8")]
		public void RasterizeTrianglesIndexedWithAreas(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xD4B334", Offset = "0xD4B334", VA = "0xD4B334")]
		public void RasterizeTrianglesWithAreas(Triangle3[] tris, Area[] areas)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xD4B354", Offset = "0xD4B354", VA = "0xD4B354")]
		public void RasterizeTrianglesWithAreas(Triangle3[] tris, int triOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xD4B580", Offset = "0xD4B580", VA = "0xD4B580")]
		public void RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[] verts, Area[] areas)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xD4B5BC", Offset = "0xD4B5BC", VA = "0xD4B5BC")]
		public void RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xD4B838", Offset = "0xD4B838", VA = "0xD4B838")]
		public void RasterizeTrianglesWithAreas(float[] verts, Area[] areas)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xD4B874", Offset = "0xD4B874", VA = "0xD4B874")]
		public void RasterizeTrianglesWithAreas(float[] verts, int floatOffset, int floatStride, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xD4BBC4", Offset = "0xD4BBC4", VA = "0xD4BBC4")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xD4BEC0", Offset = "0xD4BEC0", VA = "0xD4BEC0")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, Area area)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xD4BF10", Offset = "0xD4BF10", VA = "0xD4BF10")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xD4BC84", Offset = "0xD4BC84", VA = "0xD4BC84")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xD4BFD0", Offset = "0xD4BFD0", VA = "0xD4BFD0")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xD4C390", Offset = "0xD4C390", VA = "0xD4C390")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, Area area)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xD4C3E0", Offset = "0xD4C3E0", VA = "0xD4C3E0")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xD4C090", Offset = "0xD4C090", VA = "0xD4C090")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xD4C4A0", Offset = "0xD4C4A0", VA = "0xD4C4A0")]
		public void RasterizeTriangles(IEnumerable<Triangle3> tris)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xD4C51C", Offset = "0xD4C51C", VA = "0xD4C51C")]
		public void RasterizeTriangles(IEnumerable<Triangle3> tris, Area area)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xD4C838", Offset = "0xD4C838", VA = "0xD4C838")]
		public void RasterizeTriangles(Triangle3[] tris)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xD4CAE8", Offset = "0xD4CAE8", VA = "0xD4CAE8")]
		public void RasterizeTriangles(Triangle3[] tris, Area area)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xD4CB08", Offset = "0xD4CB08", VA = "0xD4CB08")]
		public void RasterizeTriangles(Triangle3[] tris, int triOffset, int triCount)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xD4C8C4", Offset = "0xD4C8C4", VA = "0xD4C8C4")]
		public void RasterizeTriangles(Triangle3[] tris, int triOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xD4CB9C", Offset = "0xD4CB9C", VA = "0xD4CB9C")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xD4CE58", Offset = "0xD4CE58", VA = "0xD4CE58")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, Area area)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xD4CE94", Offset = "0xD4CE94", VA = "0xD4CE94")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xD4CC44", Offset = "0xD4CC44", VA = "0xD4CC44")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area area)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xD4CF30", Offset = "0xD4CF30", VA = "0xD4CF30")]
		public void RasterizeTriangles(float[] verts)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xD4D2BC", Offset = "0xD4D2BC", VA = "0xD4D2BC")]
		public void RasterizeTriangles(float[] verts, Area area)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xD4D2F8", Offset = "0xD4D2F8", VA = "0xD4D2F8")]
		public void RasterizeTriangles(float[] verts, int floatOffset, int floatStride, int triCount)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xD4CFD8", Offset = "0xD4CFD8", VA = "0xD4CFD8")]
		public void RasterizeTriangles(float[] verts, int floatOffset, int floatStride, int triCount, Area area)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xD4D394", Offset = "0xD4D394", VA = "0xD4D394")]
		public void RasterizeTriangle(ref Triangle3 tri)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xD4C824", Offset = "0xD4C824", VA = "0xD4C824")]
		public void RasterizeTriangle(ref Triangle3 tri, Area area)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xD4D428", Offset = "0xD4D428", VA = "0xD4D428")]
		public void RasterizeTriangle(float ax, float ay, float az, float bx, float by, float bz, float cx, float cy, float cz)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xD4D514", Offset = "0xD4D514", VA = "0xD4D514")]
		public void RasterizeTriangle(float ax, float ay, float az, float bx, float by, float bz, float cx, float cy, float cz, Area area)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xD4D55C", Offset = "0xD4D55C", VA = "0xD4D55C")]
		public void RasterizeTriangle(ref SharpNav.Geometry.Vector3 a, ref SharpNav.Geometry.Vector3 b, ref SharpNav.Geometry.Vector3 c)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xD4A968", Offset = "0xD4A968", VA = "0xD4A968")]
		public void RasterizeTriangle(ref SharpNav.Geometry.Vector3 a, ref SharpNav.Geometry.Vector3 b, ref SharpNav.Geometry.Vector3 c, Area area)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xD4D5F0", Offset = "0xD4D5F0", VA = "0xD4D5F0")]
		public Heightfield(BBox3 b, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xD4D63C", Offset = "0xD4D63C", VA = "0xD4D63C")]
		public Heightfield(BBox3 b, float cellSize, float cellHeight)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xD4DC58", Offset = "0xD4DC58", VA = "0xD4DC58")]
		public void FilterLowHangingWalkableObstacles(int walkableClimb)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xD4DE94", Offset = "0xD4DE94", VA = "0xD4DE94")]
		public void FilterWalkableLowHeightSpans(int walkableHeight)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xD4E050", Offset = "0xD4E050", VA = "0xD4E050")]
		public void FilterLedgeSpans(int walkableHeight, int walkableClimb)
		{
		}
	}
	[Token(Token = "0x2000291")]
	internal static class MathHelper
	{
		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xC26F80", Offset = "0xC26F80", VA = "0xC26F80")]
		internal static int Clamp(int val, int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xC26F9C", Offset = "0xC26F9C", VA = "0xC26F9C")]
		internal static void Clamp(ref int val, int min, int max)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xC26FB8", Offset = "0xC26FB8", VA = "0xC26FB8")]
		internal static uint Clamp(uint val, uint min, uint max)
		{
			return default(uint);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xC26FD4", Offset = "0xC26FD4", VA = "0xC26FD4")]
		internal static void Clamp(ref uint val, uint min, uint max)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xC26FF0", Offset = "0xC26FF0", VA = "0xC26FF0")]
		internal static float Clamp(float val, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xC2700C", Offset = "0xC2700C", VA = "0xC2700C")]
		internal static void Clamp(ref float val, float min, float max)
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xC27030", Offset = "0xC27030", VA = "0xC27030")]
		public static float Normalize(float t, float t0, float t1)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xC27054", Offset = "0xC27054", VA = "0xC27054")]
		internal static int NextPowerOfTwo(int v)
		{
			return default(int);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xC27074", Offset = "0xC27074", VA = "0xC27074")]
		internal static uint NextPowerOfTwo(uint v)
		{
			return default(uint);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xC27094", Offset = "0xC27094", VA = "0xC27094")]
		internal static int Log2(int v)
		{
			return default(int);
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xC270E8", Offset = "0xC270E8", VA = "0xC270E8")]
		internal static uint Log2(uint v)
		{
			return default(uint);
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xC2713C", Offset = "0xC2713C", VA = "0xC2713C")]
		internal static int ClipPolygonToPlane(SharpNav.Geometry.Vector3[] inVertices, SharpNav.Geometry.Vector3[] outVertices, int numVerts, float planeX, float planeZ, float planeD)
		{
			return default(int);
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xC271D4", Offset = "0xC271D4", VA = "0xC271D4")]
		internal static int ClipPolygonToPlane(SharpNav.Geometry.Vector3[] inVertices, SharpNav.Geometry.Vector3[] outVertices, float[] distances, int numVerts, float planeX, float planeZ, float planeD)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000292")]
	public class NavMesh : TiledNavMesh
	{
		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xE8B790", Offset = "0xE8B790", VA = "0xE8B790")]
		public NavMesh(NavMeshBuilder builder)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xE8B798", Offset = "0xE8B798", VA = "0xE8B798")]
		public static NavMesh Generate(IEnumerable<Triangle3> triangles, NavMeshGenerationSettings settings, out PolyMesh polyMesh, out PolyMeshDetail polyMeshDetail)
		{
			return null;
		}
	}
	[Token(Token = "0x2000293")]
	public class NavMeshBuilder
	{
		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PathfindingCommon.NavMeshInfo header;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SharpNav.Geometry.Vector3[] navVerts;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poly[] navPolys;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PolyMeshDetail.MeshData[] navDMeshes;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SharpNav.Geometry.Vector3[] navDVerts;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PolyMeshDetail.TriangleData[] navDTris;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BVTree navBvTree;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OffMeshConnection[] offMeshConnections;

		[Token(Token = "0x170001C7")]
		public PathfindingCommon.NavMeshInfo Header
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xE8D618", Offset = "0xE8D618", VA = "0xE8D618")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C8")]
		public SharpNav.Geometry.Vector3[] NavVerts
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xE8D620", Offset = "0xE8D620", VA = "0xE8D620")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C9")]
		public Poly[] NavPolys
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xE8D628", Offset = "0xE8D628", VA = "0xE8D628")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		public PolyMeshDetail.MeshData[] NavDMeshes
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xE8D630", Offset = "0xE8D630", VA = "0xE8D630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CB")]
		public SharpNav.Geometry.Vector3[] NavDVerts
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xE8D638", Offset = "0xE8D638", VA = "0xE8D638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		public PolyMeshDetail.TriangleData[] NavDTris
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xE8D640", Offset = "0xE8D640", VA = "0xE8D640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		public BVTree NavBvTree
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xE8D648", Offset = "0xE8D648", VA = "0xE8D648")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		public OffMeshConnection[] OffMeshCons
		{
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0xE8D650", Offset = "0xE8D650", VA = "0xE8D650")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xE8BB48", Offset = "0xE8BB48", VA = "0xE8BB48")]
		public NavMeshBuilder(PolyMesh polyMesh, PolyMeshDetail polyMeshDetail, OffMeshConnection[] offMeshCons, NavMeshGenerationSettings settings)
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class NavMeshGenerationSettings
	{
		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D08", Offset = "0x510D08")]
		private float <CellSize>k__BackingField;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D18", Offset = "0x510D18")]
		private float <CellHeight>k__BackingField;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D28", Offset = "0x510D28")]
		private float <MaxClimb>k__BackingField;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D38", Offset = "0x510D38")]
		private float <AgentHeight>k__BackingField;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D48", Offset = "0x510D48")]
		private float <AgentRadius>k__BackingField;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D58", Offset = "0x510D58")]
		private int <MinRegionSize>k__BackingField;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D68", Offset = "0x510D68")]
		private int <MergedRegionSize>k__BackingField;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D78", Offset = "0x510D78")]
		private int <MaxEdgeLength>k__BackingField;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D88", Offset = "0x510D88")]
		private float <MaxEdgeError>k__BackingField;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510D98", Offset = "0x510D98")]
		private ContourBuildFlags <ContourFlags>k__BackingField;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DA8", Offset = "0x510DA8")]
		private int <VertsPerPoly>k__BackingField;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DB8", Offset = "0x510DB8")]
		private int <SampleDistance>k__BackingField;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DC8", Offset = "0x510DC8")]
		private int <MaxSampleError>k__BackingField;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DD8", Offset = "0x510DD8")]
		private bool <BuildBoundingVolumeTree>k__BackingField;

		[Token(Token = "0x170001CF")]
		public static NavMeshGenerationSettings Default
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xE8D660", Offset = "0xE8D660", VA = "0xE8D660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D0")]
		public float CellSize
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xE8D708", Offset = "0xE8D708", VA = "0xE8D708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517A60", Offset = "0x517A60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xE8D710", Offset = "0xE8D710", VA = "0xE8D710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517A70", Offset = "0x517A70")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public float CellHeight
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xE8D718", Offset = "0xE8D718", VA = "0xE8D718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517A80", Offset = "0x517A80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xE8D720", Offset = "0xE8D720", VA = "0xE8D720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517A90", Offset = "0x517A90")]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public float MaxClimb
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xE8D728", Offset = "0xE8D728", VA = "0xE8D728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AA0", Offset = "0x517AA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xE8D730", Offset = "0xE8D730", VA = "0xE8D730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AB0", Offset = "0x517AB0")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public float AgentHeight
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xE8D738", Offset = "0xE8D738", VA = "0xE8D738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AC0", Offset = "0x517AC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xE8D740", Offset = "0xE8D740", VA = "0xE8D740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AD0", Offset = "0x517AD0")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public float AgentRadius
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xE8D748", Offset = "0xE8D748", VA = "0xE8D748")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AE0", Offset = "0x517AE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xE8D750", Offset = "0xE8D750", VA = "0xE8D750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517AF0", Offset = "0x517AF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public int MinRegionSize
		{
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xE8D758", Offset = "0xE8D758", VA = "0xE8D758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B00", Offset = "0x517B00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xE8D760", Offset = "0xE8D760", VA = "0xE8D760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B10", Offset = "0x517B10")]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public int MergedRegionSize
		{
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xE8D768", Offset = "0xE8D768", VA = "0xE8D768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B20", Offset = "0x517B20")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xE8D770", Offset = "0xE8D770", VA = "0xE8D770")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B30", Offset = "0x517B30")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public int MaxEdgeLength
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xE8D778", Offset = "0xE8D778", VA = "0xE8D778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B40", Offset = "0x517B40")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xE8D780", Offset = "0xE8D780", VA = "0xE8D780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B50", Offset = "0x517B50")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public float MaxEdgeError
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xE8D788", Offset = "0xE8D788", VA = "0xE8D788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B60", Offset = "0x517B60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xE8D790", Offset = "0xE8D790", VA = "0xE8D790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B70", Offset = "0x517B70")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public ContourBuildFlags ContourFlags
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xE8D798", Offset = "0xE8D798", VA = "0xE8D798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B80", Offset = "0x517B80")]
			get
			{
				return default(ContourBuildFlags);
			}
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xE8D7A0", Offset = "0xE8D7A0", VA = "0xE8D7A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517B90", Offset = "0x517B90")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public int VertsPerPoly
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xE8D7A8", Offset = "0xE8D7A8", VA = "0xE8D7A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BA0", Offset = "0x517BA0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xE8D7B0", Offset = "0xE8D7B0", VA = "0xE8D7B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BB0", Offset = "0x517BB0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public int SampleDistance
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xE8D7B8", Offset = "0xE8D7B8", VA = "0xE8D7B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BC0", Offset = "0x517BC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xE8D7C0", Offset = "0xE8D7C0", VA = "0xE8D7C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BD0", Offset = "0x517BD0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public int MaxSampleError
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xE8D7C8", Offset = "0xE8D7C8", VA = "0xE8D7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BE0", Offset = "0x517BE0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xE8D7D0", Offset = "0xE8D7D0", VA = "0xE8D7D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517BF0", Offset = "0x517BF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public bool BuildBoundingVolumeTree
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xE8D7D8", Offset = "0xE8D7D8", VA = "0xE8D7D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C00", Offset = "0x517C00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xE8D7E0", Offset = "0xE8D7E0", VA = "0xE8D7E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C10", Offset = "0x517C10")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public int VoxelAgentHeight
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xE8BAC8", Offset = "0xE8BAC8", VA = "0xE8BAC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DF")]
		public int VoxelMaxClimb
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xE8BAF4", Offset = "0xE8BAF4", VA = "0xE8BAF4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E0")]
		public int VoxelAgentRadius
		{
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xE8BB1C", Offset = "0xE8BB1C", VA = "0xE8BB1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xE8D658", Offset = "0xE8D658", VA = "0xE8D658")]
		public NavMeshGenerationSettings()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class NavMeshQuery
	{
		[Token(Token = "0x2000296")]
		private struct QueryData
		{
			[Token(Token = "0x4000DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool Status;

			[Token(Token = "0x4000DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Node LastBestNode;

			[Token(Token = "0x4000DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastBestNodeCost;

			[Token(Token = "0x4000E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int StartRef;

			[Token(Token = "0x4000E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int EndRef;

			[Token(Token = "0x4000E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public SharpNav.Geometry.Vector3 StartPos;

			[Token(Token = "0x4000E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SharpNav.Geometry.Vector3 EndPos;
		}

		[Token(Token = "0x2000297")]
		public struct SegInterval
		{
			[Token(Token = "0x4000E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Reference;

			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int TMin;

			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int TMax;
		}

		[Token(Token = "0x4000DF5")]
		private const float H_SCALE = 0.999f;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TiledNavMesh nav;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] areaCost;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NodePool tinyNodePool;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NodePool nodePool;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PriorityQueue<Node> openList;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private QueryData query;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private System.Random rand;

		[Token(Token = "0x170001E1")]
		public TiledNavMesh NavMesh
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xE8DC58", Offset = "0xE8DC58", VA = "0xE8DC58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xE8D7EC", Offset = "0xE8D7EC", VA = "0xE8D7EC")]
		public NavMeshQuery(TiledNavMesh nav, int maxNodes)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xE8D864", Offset = "0xE8D864", VA = "0xE8D864")]
		public NavMeshQuery(TiledNavMesh nav, int maxNodes, System.Random rand)
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xE8DB44", Offset = "0xE8DB44", VA = "0xE8DB44")]
		public float GetCost(SharpNav.Geometry.Vector3 pa, SharpNav.Geometry.Vector3 pb, Poly curPoly)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xE8DC60", Offset = "0xE8DC60", VA = "0xE8DC60")]
		public SharpNav.Geometry.Vector3 FindRandomPointOnPoly(MeshTile tile, Poly poly, int polyRef)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xE8DC90", Offset = "0xE8DC90", VA = "0xE8DC90")]
		public void FindRandomPointOnPoly(MeshTile tile, Poly poly, int polyRef, out SharpNav.Geometry.Vector3 randomPt)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xE8DFD4", Offset = "0xE8DFD4", VA = "0xE8DFD4")]
		public NavPoint FindRandomPoint()
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xE8DFFC", Offset = "0xE8DFFC", VA = "0xE8DFFC")]
		public void FindRandomPoint(out NavPoint randomPoint)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xE8E30C", Offset = "0xE8E30C", VA = "0xE8E30C")]
		public NavPoint FindRandomPointAroundCircle(NavPoint center, float radius)
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xE8E334", Offset = "0xE8E334", VA = "0xE8E334")]
		public void FindRandomPointAroundCircle(NavPoint center, float radius, out NavPoint randomPoint)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xE8F250", Offset = "0xE8F250", VA = "0xE8F250")]
		public bool FindPath(ref NavPoint startPt, ref NavPoint endPt, List<int> path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xE8F9E8", Offset = "0xE8F9E8", VA = "0xE8F9E8")]
		public bool FindStraightPath(SharpNav.Geometry.Vector3 startPos, SharpNav.Geometry.Vector3 endPos, int[] path, int pathSize, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath, PathBuildFlags options)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xE907B4", Offset = "0xE907B4", VA = "0xE907B4")]
		public bool MoveAlongSurface(NavPoint startPoint, SharpNav.Geometry.Vector3 endPos, ref SharpNav.Geometry.Vector3 resultPos, List<int> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xE91044", Offset = "0xE91044", VA = "0xE91044")]
		public bool InitSlicedFindPath(NavPoint startPoint, NavPoint endPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xE91290", Offset = "0xE91290", VA = "0xE91290")]
		public bool UpdateSlicedFindPath(int maxIter, ref int doneIters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xE91770", Offset = "0xE91770", VA = "0xE91770")]
		public bool FinalizeSlicedFindPath(int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xE918C0", Offset = "0xE918C0", VA = "0xE918C0")]
		public bool FinalizedSlicedPathPartial(int[] existing, int existingSize, int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xE91ADC", Offset = "0xE91ADC", VA = "0xE91ADC")]
		public bool Raycast(NavPoint startPoint, SharpNav.Geometry.Vector3 endPos, ref float t, ref SharpNav.Geometry.Vector3 hitNormal, int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xE92040", Offset = "0xE92040", VA = "0xE92040")]
		public bool FindLocalNeighbourhood(NavPoint centerPoint, float radius, int[] resultRef, int[] resultParent, ref int resultCount, int maxResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xE92770", Offset = "0xE92770", VA = "0xE92770")]
		public bool GetPolyWallSegments(int reference, LocalBoundary.Segment[] segmentVerts, int[] segmentRefs, ref int segmentCount, int maxSegments)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xE92DF4", Offset = "0xE92DF4", VA = "0xE92DF4")]
		public void InsertInterval(SegInterval[] ints, ref int nints, int maxInts, int tmin, int tmax, int reference)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xE8F88C", Offset = "0xE8F88C", VA = "0xE8F88C")]
		public bool GetEdgeMidPoint(int from, Poly fromPoly, MeshTile fromTile, int to, Poly toPoly, MeshTile toTile, ref SharpNav.Geometry.Vector3 mid)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xE903D4", Offset = "0xE903D4", VA = "0xE903D4")]
		public bool GetPortalPoints(int from, int to, ref SharpNav.Geometry.Vector3 left, ref SharpNav.Geometry.Vector3 right, ref PolygonType fromType, ref PolygonType toType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xE8ED10", Offset = "0xE8ED10", VA = "0xE8ED10")]
		public bool GetPortalPoints(int from, Poly fromPoly, MeshTile fromTile, int to, Poly toPoly, MeshTile toTile, ref SharpNav.Geometry.Vector3 left, ref SharpNav.Geometry.Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xE92F48", Offset = "0xE92F48", VA = "0xE92F48")]
		public bool ClosestPointOnPoly(int reference, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xE92FD8", Offset = "0xE92FD8", VA = "0xE92FD8")]
		public bool ClosestPointOnPoly(int reference, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest, out bool posOverPoly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xE90150", Offset = "0xE90150", VA = "0xE90150")]
		public bool ClosestPointOnPolyBoundary(int reference, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xE901E4", Offset = "0xE901E4", VA = "0xE901E4")]
		public bool AppendVertex(SharpNav.Geometry.Vector3 pos, int flags, int reference, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xE904B8", Offset = "0xE904B8", VA = "0xE904B8")]
		public bool AppendPortals(int startIdx, int endIdx, SharpNav.Geometry.Vector3 endPos, int[] path, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath, PathBuildFlags options)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xE8DEA0", Offset = "0xE8DEA0", VA = "0xE8DEA0")]
		public bool GetPolyHeight(int reference, SharpNav.Geometry.Vector3 pos, ref float height)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xE936F8", Offset = "0xE936F8", VA = "0xE936F8")]
		public NavPoint FindNearestPoly(SharpNav.Geometry.Vector3 center, SharpNav.Geometry.Vector3 extents)
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xE93738", Offset = "0xE93738", VA = "0xE93738")]
		public void FindNearestPoly(ref SharpNav.Geometry.Vector3 center, ref SharpNav.Geometry.Vector3 extents, out NavPoint nearestPt)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xE93A5C", Offset = "0xE93A5C", VA = "0xE93A5C")]
		public bool QueryPolygons(ref SharpNav.Geometry.Vector3 center, ref SharpNav.Geometry.Vector3 extent, List<int> polys)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xE93D28", Offset = "0xE93D28", VA = "0xE93D28")]
		public bool IsValidPolyRef(int reference)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xE8F170", Offset = "0xE8F170", VA = "0xE8F170")]
		public bool IsInOpenList(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xE8F154", Offset = "0xE8F154", VA = "0xE8F154")]
		public bool IsInClosedList(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xE8F9C4", Offset = "0xE8F9C4", VA = "0xE8F9C4")]
		public void SetNodeFlagOpen(ref Node node)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xE8EC3C", Offset = "0xE8EC3C", VA = "0xE8EC3C")]
		public void SetNodeFlagClosed(ref Node node)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xE8F18C", Offset = "0xE8F18C", VA = "0xE8F18C")]
		public NodeFlags RemoveNodeFlagClosed(Node node)
		{
			return default(NodeFlags);
		}
	}
	[Token(Token = "0x2000298")]
	public class Node : IValueWithCost
	{
		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SharpNav.Geometry.Vector3 Pos;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cost;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float total;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int ParentIdx;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NodeFlags Flags;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Id;

		[Token(Token = "0x170001E2")]
		public float Cost
		{
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xE94698", Offset = "0xE94698", VA = "0xE94698", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xE946A0", Offset = "0xE946A0", VA = "0xE946A0")]
		public Node()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[Flags]
	public enum NodeFlags
	{
		[Token(Token = "0x4000E0E")]
		Open = 1,
		[Token(Token = "0x4000E0F")]
		Closed = 2
	}
	[Token(Token = "0x200029A")]
	public class NodePool
	{
		[Token(Token = "0x200029B")]
		private class IntNodeIdComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int hashSize;

			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0xA3BB38", Offset = "0xA3BB38", VA = "0xA3BB38")]
			public IntNodeIdComparer(int hashSize)
			{
			}

			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0xA3BB64", Offset = "0xA3BB64", VA = "0xA3BB64", Slot = "4")]
			public bool Equals(int left, int right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0xA3BB70", Offset = "0xA3BB70", VA = "0xA3BB70", Slot = "5")]
			public int GetHashCode(int obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Node> nodes;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, Node> nodeDict;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int maxNodes;

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xE8DA2C", Offset = "0xE8DA2C", VA = "0xE8DA2C")]
		public NodePool(int maxNodes, int hashSize)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xE8EA84", Offset = "0xE8EA84", VA = "0xE8EA84")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xE91A60", Offset = "0xE91A60", VA = "0xE91A60")]
		public Node FindNode(int id)
		{
			return null;
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xE8EAFC", Offset = "0xE8EAFC", VA = "0xE8EAFC")]
		public Node GetNode(int id)
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xE8F1A8", Offset = "0xE8F1A8", VA = "0xE8F1A8")]
		public int GetNodeIdx(Node node)
		{
			return default(int);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xE8EC78", Offset = "0xE8EC78", VA = "0xE8EC78")]
		public Node GetNodeAtIdx(int idx)
		{
			return null;
		}
	}
	[Token(Token = "0x200029C")]
	public struct PolyBounds : IEquatable<PolyBounds>
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PolyVertex Min;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PolyVertex Max;

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x9A0498", Offset = "0x9A0498", VA = "0x9A0498")]
		public PolyBounds(PolyVertex min, PolyVertex max)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x9A04AC", Offset = "0x9A04AC", VA = "0x9A04AC")]
		public static bool Overlapping(ref PolyBounds a, ref PolyBounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x9A0518", Offset = "0x9A0518", VA = "0x9A0518")]
		public static bool operator ==(PolyBounds left, PolyBounds right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x9A05AC", Offset = "0x9A05AC", VA = "0x9A05AC")]
		public static bool operator !=(PolyBounds left, PolyBounds right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x9A054C", Offset = "0x9A054C", VA = "0x9A054C", Slot = "4")]
		public bool Equals(PolyBounds other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x9A05F8", Offset = "0x9A05F8", VA = "0x9A05F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x9A0708", Offset = "0x9A0708", VA = "0x9A0708", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x9A0740", Offset = "0x9A0740", VA = "0x9A0740", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200029D")]
	public class PolyMesh
	{
		[Token(Token = "0x200029E")]
		private struct Triangle
		{
			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Index0;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Index1;

			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int Index2;
		}

		[Token(Token = "0x200029F")]
		private struct AdjacencyEdge
		{
			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Vert0;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Vert1;

			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int PolyEdge0;

			[Token(Token = "0x4000E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int PolyEdge1;

			[Token(Token = "0x4000E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int Poly0;

			[Token(Token = "0x4000E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Poly1;
		}

		[Token(Token = "0x20002A0")]
		private struct Edge
		{
			[Token(Token = "0x4000E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Vert0;

			[Token(Token = "0x4000E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Vert1;

			[Token(Token = "0x4000E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RegionId Region;

			[Token(Token = "0x4000E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Area Area;

			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0xA3DFC8", Offset = "0xA3DFC8", VA = "0xA3DFC8")]
			public Edge(int vert0, int vert1, RegionId region, Area area)
			{
			}
		}

		[Token(Token = "0x20002A1")]
		public class Polygon
		{
			[Token(Token = "0x4000E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int[] vertices;

			[Token(Token = "0x4000E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int[] neighborEdges;

			[Token(Token = "0x4000E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Area area;

			[Token(Token = "0x4000E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private RegionId regionId;

			[Token(Token = "0x4000E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int flags;

			[Token(Token = "0x170001EC")]
			public int[] Vertices
			{
				[Token(Token = "0x6000F10")]
				[Address(RVA = "0xA3E104", Offset = "0xA3E104", VA = "0xA3E104")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001ED")]
			public int[] NeighborEdges
			{
				[Token(Token = "0x6000F11")]
				[Address(RVA = "0xA3E10C", Offset = "0xA3E10C", VA = "0xA3E10C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			public Area Area
			{
				[Token(Token = "0x6000F12")]
				[Address(RVA = "0xA3E114", Offset = "0xA3E114", VA = "0xA3E114")]
				get
				{
					return default(Area);
				}
				[Token(Token = "0x6000F13")]
				[Address(RVA = "0xA3E11C", Offset = "0xA3E11C", VA = "0xA3E11C")]
				set
				{
				}
			}

			[Token(Token = "0x170001EF")]
			public RegionId RegionId
			{
				[Token(Token = "0x6000F14")]
				[Address(RVA = "0xA3E124", Offset = "0xA3E124", VA = "0xA3E124")]
				get
				{
					return default(RegionId);
				}
				[Token(Token = "0x6000F15")]
				[Address(RVA = "0xA3E12C", Offset = "0xA3E12C", VA = "0xA3E12C")]
				set
				{
				}
			}

			[Token(Token = "0x170001F0")]
			public int Flags
			{
				[Token(Token = "0x6000F16")]
				[Address(RVA = "0xA3E134", Offset = "0xA3E134", VA = "0xA3E134")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000F17")]
				[Address(RVA = "0xA3E13C", Offset = "0xA3E13C", VA = "0xA3E13C")]
				set
				{
				}
			}

			[Token(Token = "0x170001F1")]
			public int VertexCount
			{
				[Token(Token = "0x6000F18")]
				[Address(RVA = "0xA3E144", Offset = "0xA3E144", VA = "0xA3E144")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0xA3DFD8", Offset = "0xA3DFD8", VA = "0xA3DFD8")]
			public Polygon(int numVertsPerPoly, Area area, RegionId regionId, int flags)
			{
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0xA3E1A4", Offset = "0xA3E1A4", VA = "0xA3E1A4")]
			public bool ContainsVertex(int vertex)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000E16")]
		public const int NullId = -1;

		[Token(Token = "0x4000E17")]
		private const int DiagonalFlag = int.MinValue;

		[Token(Token = "0x4000E18")]
		private const int NeighborEdgeFlag = int.MinValue;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PolyVertex[] vertices;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Polygon[] polygons;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int numVertsPerPoly;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private BBox3 bounds;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float cellSize;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float cellHeight;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int borderSize;

		[Token(Token = "0x170001E3")]
		public int VertCount
		{
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x9A4268", Offset = "0x9A4268", VA = "0x9A4268")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E4")]
		public int PolyCount
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x9A4284", Offset = "0x9A4284", VA = "0x9A4284")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E5")]
		public int NumVertsPerPoly
		{
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x9A42A0", Offset = "0x9A42A0", VA = "0x9A42A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E6")]
		public PolyVertex[] Verts
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x9A42A8", Offset = "0x9A42A8", VA = "0x9A42A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public Polygon[] Polys
		{
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x9A42B0", Offset = "0x9A42B0", VA = "0x9A42B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x9A42B8", Offset = "0x9A42B8", VA = "0x9A42B8")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170001E9")]
		public float CellSize
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x9A42CC", Offset = "0x9A42CC", VA = "0x9A42CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EA")]
		public float CellHeight
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x9A42D4", Offset = "0x9A42D4", VA = "0x9A42D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EB")]
		public int BorderSize
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x9A42DC", Offset = "0x9A42DC", VA = "0x9A42DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x9A0938", Offset = "0x9A0938", VA = "0x9A0938")]
		public PolyMesh(ContourSet contSet, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x9A0958", Offset = "0x9A0958", VA = "0x9A0958")]
		public PolyMesh(ContourSet contSet, float cellSize, float cellHeight, int borderSize, int numVertsPerPoly)
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x9A42E4", Offset = "0x9A42E4", VA = "0x9A42E4")]
		public static bool IsBoundaryEdge(int flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x9A42EC", Offset = "0x9A42EC", VA = "0x9A42EC")]
		public static bool IsInteriorEdge(int flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x9A42F8", Offset = "0x9A42F8", VA = "0x9A42F8")]
		public static bool HasDiagonalFlag(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x9A4300", Offset = "0x9A4300", VA = "0x9A4300")]
		public static bool Diagonal(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x9A435C", Offset = "0x9A435C", VA = "0x9A435C")]
		public static bool InCone(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x9A456C", Offset = "0x9A456C", VA = "0x9A456C")]
		public static bool Diagonalie(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x9A47C0", Offset = "0x9A47C0", VA = "0x9A47C0")]
		private static int Prev(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x9A47B0", Offset = "0x9A47B0", VA = "0x9A47B0")]
		private static int Next(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x9A47D4", Offset = "0x9A47D4", VA = "0x9A47D4")]
		private static bool ULeft(PolyVertex a, PolyVertex b, PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x9A47F8", Offset = "0x9A47F8", VA = "0x9A47F8")]
		private static void SetDiagonalFlag(ref int index)
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x9A22D4", Offset = "0x9A22D4", VA = "0x9A22D4")]
		private static int RemoveDiagonalFlag(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x9A4808", Offset = "0x9A4808", VA = "0x9A4808")]
		private static void RemoveDiagonalFlag(ref int index)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x9A1CDC", Offset = "0x9A1CDC", VA = "0x9A1CDC")]
		private static int Triangulate(PolyVertex[] verts, int[] indices, Triangle[] tris)
		{
			return default(int);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x9A4874", Offset = "0x9A4874", VA = "0x9A4874")]
		private static bool IsInConeLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x9A4818", Offset = "0x9A4818", VA = "0x9A4818")]
		private static bool IsDiagonalLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x9A4A44", Offset = "0x9A4A44", VA = "0x9A4A44")]
		private static bool IsDiagonalieLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x9A4D68", Offset = "0x9A4D68", VA = "0x9A4D68")]
		private static bool xorb(bool x, bool y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x9A4C6C", Offset = "0x9A4C6C", VA = "0x9A4C6C")]
		private static bool IsIntersectProp(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x9A21D8", Offset = "0x9A21D8", VA = "0x9A21D8")]
		private static int AddVertex(Dictionary<PolyVertex, int> vertDict, PolyVertex v, List<PolyVertex> verts)
		{
			return default(int);
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x9A22DC", Offset = "0x9A22DC", VA = "0x9A22DC")]
		private static int GetPolyMergeValue(List<Polygon> polys, int polyA, int polyB, List<PolyVertex> verts, out int edgeA, out int edgeB)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x9A2DA8", Offset = "0x9A2DA8", VA = "0x9A2DA8")]
		private static bool CanRemoveVertex(List<Polygon> polys, int remove)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x9A3D90", Offset = "0x9A3D90", VA = "0x9A3D90")]
		private static void BuildMeshAdjacency(List<PolyVertex> vertices, List<Polygon> polys, int numVertsPerPoly)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x9A2A88", Offset = "0x9A2A88", VA = "0x9A2A88")]
		private void MergePolys(List<Polygon> polys, int polyA, int polyB, int edgeA, int edgeB)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x9A3110", Offset = "0x9A3110", VA = "0x9A3110")]
		private void RemoveVertex(List<PolyVertex> verts, List<Polygon> polys, int vertex)
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class PolyMeshDetail
	{
		[Token(Token = "0x20002A3")]
		private enum EdgeValues
		{
			[Token(Token = "0x4000E37")]
			Undefined = -1,
			[Token(Token = "0x4000E38")]
			Hull = -2
		}

		[Token(Token = "0x20002A4")]
		public struct MeshData
		{
			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int VertexIndex;

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int VertexCount;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int TriangleIndex;

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int TriangleCount;
		}

		[Token(Token = "0x20002A5")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BF4C", Offset = "0x50BF4C")]
		public struct TriangleData
		{
			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int VertexHash0;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int VertexHash1;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int VertexHash2;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int Flags;

			[Token(Token = "0x170001F8")]
			public int Item
			{
				[Token(Token = "0x6000F38")]
				[Address(RVA = "0xA3E528", Offset = "0xA3E528", VA = "0xA3E528")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xA3E294", Offset = "0xA3E294", VA = "0xA3E294")]
			public TriangleData(int hash0, int hash1, int hash2)
			{
			}

			[Token(Token = "0x6000F36")]
			[Address(RVA = "0xA3E2A0", Offset = "0xA3E2A0", VA = "0xA3E2A0")]
			public TriangleData(int hash0, int hash1, int hash2, int flags)
			{
			}

			[Token(Token = "0x6000F37")]
			[Address(RVA = "0xA3E2AC", Offset = "0xA3E2AC", VA = "0xA3E2AC")]
			public TriangleData(TriangleData data, List<SharpNav.Geometry.Vector3> verts, SharpNav.Geometry.Vector3[] vpoly, int npoly)
			{
			}

			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xA3E2F8", Offset = "0xA3E2F8", VA = "0xA3E2F8")]
			public static int GetTriFlags(ref TriangleData t, List<SharpNav.Geometry.Vector3> verts, SharpNav.Geometry.Vector3[] vpoly, int npoly)
			{
				return default(int);
			}
		}

		[Token(Token = "0x20002A6")]
		private struct EdgeInfo
		{
			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int EndPt0;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int EndPt1;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int RightFace;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int LeftFace;

			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0xA3E220", Offset = "0xA3E220", VA = "0xA3E220")]
			public EdgeInfo(int endPt0, int endPt1, int rightFace, int leftFace)
			{
			}

			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0xA3E22C", Offset = "0xA3E22C", VA = "0xA3E22C")]
			public static void UpdateLeftFace(ref EdgeInfo e, int s, int t, int f)
			{
			}
		}

		[Token(Token = "0x20002A7")]
		private struct SamplingData
		{
			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int X;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Y;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int Z;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool IsSampled;

			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0xA3E280", Offset = "0xA3E280", VA = "0xA3E280")]
			public SamplingData(int x, int y, int z, bool isSampled)
			{
			}
		}

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] VertexOffset;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MeshData[] meshes;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SharpNav.Geometry.Vector3[] verts;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TriangleData[] tris;

		[Token(Token = "0x170001F2")]
		public int MeshCount
		{
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0x9A6BDC", Offset = "0x9A6BDC", VA = "0x9A6BDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F3")]
		public int VertCount
		{
			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0x9A6BF4", Offset = "0x9A6BF4", VA = "0x9A6BF4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F4")]
		public int TrisCount
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0x9A6C0C", Offset = "0x9A6C0C", VA = "0x9A6C0C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F5")]
		public MeshData[] Meshes
		{
			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0x9A6C24", Offset = "0x9A6C24", VA = "0x9A6C24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		public SharpNav.Geometry.Vector3[] Verts
		{
			[Token(Token = "0x6000F20")]
			[Address(RVA = "0x9A6C2C", Offset = "0x9A6C2C", VA = "0x9A6C2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F7")]
		public TriangleData[] Tris
		{
			[Token(Token = "0x6000F21")]
			[Address(RVA = "0x9A6C34", Offset = "0x9A6C34", VA = "0x9A6C34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x9A4D74", Offset = "0x9A4D74", VA = "0x9A4D74")]
		public PolyMeshDetail(PolyMesh mesh, CompactHeightfield compactField, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x9A4D94", Offset = "0x9A4D94", VA = "0x9A4D94")]
		public PolyMeshDetail(PolyMesh mesh, CompactHeightfield compactField, float sampleDist, float sampleMaxError)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x9A6C3C", Offset = "0x9A6C3C", VA = "0x9A6C3C")]
		private static float GetJitterX(int i)
		{
			return default(float);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x9A6C6C", Offset = "0x9A6C6C", VA = "0x9A6C6C")]
		private static float GetJitterY(int i)
		{
			return default(float);
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x9A6C9C", Offset = "0x9A6C9C", VA = "0x9A6C9C")]
		private static int GetEdgeFlags(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, SharpNav.Geometry.Vector3[] vpoly, int npoly)
		{
			return default(int);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x9A5738", Offset = "0x9A5738", VA = "0x9A5738")]
		private void GetHeightData(CompactHeightfield compactField, PolyMesh.Polygon poly, int polyCount, PolyVertex[] verts, int borderSize, HeightPatch hp)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x9A6DF4", Offset = "0x9A6DF4", VA = "0x9A6DF4")]
		private void GetHeightDataSeedsFromVertices(CompactHeightfield compactField, PolyMesh.Polygon poly, int polyCount, PolyVertex[] verts, int borderSize, HeightPatch hp, List<CompactSpanReference> stack)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x9A7658", Offset = "0x9A7658", VA = "0x9A7658")]
		private static float PolyMinExtent(SharpNav.Geometry.Vector3[] verts)
		{
			return default(float);
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x9A5DD0", Offset = "0x9A5DD0", VA = "0x9A5DD0")]
		private void BuildPolyDetail(SharpNav.Geometry.Vector3[] polyMeshVerts, int numMeshVerts, float sampleDist, float sampleMaxError, CompactHeightfield compactField, HeightPatch hp, List<SharpNav.Geometry.Vector3> verts, List<TriangleData> tris, List<EdgeInfo> edges, List<SamplingData> samples)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x9A786C", Offset = "0x9A786C", VA = "0x9A786C")]
		private int GetHeight(SharpNav.Geometry.Vector3 loc, float invCellSize, float cellHeight, HeightPatch hp)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x9A8874", Offset = "0x9A8874", VA = "0x9A8874")]
		private static int Prev(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x9A8888", Offset = "0x9A8888", VA = "0x9A8888")]
		private static int Next(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x9A7AD4", Offset = "0x9A7AD4", VA = "0x9A7AD4")]
		private void TriangulateHull(List<SharpNav.Geometry.Vector3> pts, List<int> hull, List<TriangleData> tris)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x9A8390", Offset = "0x9A8390", VA = "0x9A8390")]
		private void DelaunayHull(List<SharpNav.Geometry.Vector3> pts, List<int> hull, List<TriangleData> tris, List<EdgeInfo> edges)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x9A8968", Offset = "0x9A8968", VA = "0x9A8968")]
		private void CompleteFacet(List<SharpNav.Geometry.Vector3> pts, List<EdgeInfo> edges, ref int nfaces, int curEdge)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x9A8898", Offset = "0x9A8898", VA = "0x9A8898")]
		private int AddEdge(List<EdgeInfo> edges, int s, int t, int leftFace, int rightFace)
		{
			return default(int);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x9A9314", Offset = "0x9A9314", VA = "0x9A9314")]
		private int FindEdge(List<EdgeInfo> edges, int s, int t)
		{
			return default(int);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x9A90EC", Offset = "0x9A90EC", VA = "0x9A90EC")]
		private bool OverlapEdges(List<SharpNav.Geometry.Vector3> pts, List<EdgeInfo> edges, int s1, int t1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x9A8F08", Offset = "0x9A8F08", VA = "0x9A8F08")]
		private bool CircumCircle(SharpNav.Geometry.Vector3 p1, SharpNav.Geometry.Vector3 p2, SharpNav.Geometry.Vector3 p3, ref SharpNav.Geometry.Vector3 c, out float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x9A8194", Offset = "0x9A8194", VA = "0x9A8194")]
		private float DistanceToTriMesh(SharpNav.Geometry.Vector3 p, List<SharpNav.Geometry.Vector3> verts, List<TriangleData> tris)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002A8")]
	public struct PolyVertex : IEquatable<PolyVertex>
	{
		[Token(Token = "0x20002A9")]
		internal class RoughYEqualityComparer : IEqualityComparer<PolyVertex>
		{
			[Token(Token = "0x4000E4C")]
			private const int HashConstX = -1918454973;

			[Token(Token = "0x4000E4D")]
			private const int HashConstZ = -887442657;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int epsilonY;

			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xA3E54C", Offset = "0xA3E54C", VA = "0xA3E54C")]
			public RoughYEqualityComparer(int epsilonY)
			{
			}

			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xA3E578", Offset = "0xA3E578", VA = "0xA3E578", Slot = "4")]
			public bool Equals(PolyVertex left, PolyVertex right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F53")]
			[Address(RVA = "0xA3E62C", Offset = "0xA3E62C", VA = "0xA3E62C", Slot = "5")]
			public int GetHashCode(PolyVertex obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Z;

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xDD1484", Offset = "0xDD1484", VA = "0xDD1484")]
		public PolyVertex(int x, int y, int z)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xDD1490", Offset = "0xDD1490", VA = "0xDD1490")]
		public static PolyVertex ComponentMin(PolyVertex a, PolyVertex b)
		{
			return default(PolyVertex);
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xDD14BC", Offset = "0xDD14BC", VA = "0xDD14BC")]
		public static void ComponentMin(ref PolyVertex a, ref PolyVertex b, out PolyVertex result)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xDD14FC", Offset = "0xDD14FC", VA = "0xDD14FC")]
		public static PolyVertex ComponentMax(PolyVertex a, PolyVertex b)
		{
			return default(PolyVertex);
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xDD1528", Offset = "0xDD1528", VA = "0xDD1528")]
		public static void ComponentMax(ref PolyVertex a, ref PolyVertex b, out PolyVertex result)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xDD1568", Offset = "0xDD1568", VA = "0xDD1568")]
		public static bool IsLeft(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xDD15E0", Offset = "0xDD15E0", VA = "0xDD15E0")]
		public static bool IsLeftOn(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xDD1620", Offset = "0xDD1620", VA = "0xDD1620")]
		public static bool Equal2D(ref PolyVertex a, ref PolyVertex b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xDD164C", Offset = "0xDD164C", VA = "0xDD164C")]
		public static bool Intersect(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xDD16E0", Offset = "0xDD16E0", VA = "0xDD16E0")]
		public static bool IntersectProp(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xDD178C", Offset = "0xDD178C", VA = "0xDD178C")]
		public static bool IsBetween(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xDD182C", Offset = "0xDD182C", VA = "0xDD182C")]
		public static bool IsCollinear(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xDD15A4", Offset = "0xDD15A4", VA = "0xDD15A4")]
		public static void Area2D(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, out int area)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xDD1868", Offset = "0xDD1868", VA = "0xDD1868")]
		public static void Area2D(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c, out int area)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xDD18A4", Offset = "0xDD18A4", VA = "0xDD18A4")]
		public static bool operator ==(PolyVertex left, PolyVertex right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xDD1908", Offset = "0xDD1908", VA = "0xDD1908")]
		public static bool operator !=(PolyVertex left, PolyVertex right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xDD18D4", Offset = "0xDD18D4", VA = "0xDD18D4", Slot = "4")]
		public bool Equals(PolyVertex other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xDD1938", Offset = "0xDD1938", VA = "0xDD1938", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xDD1A40", Offset = "0xDD1A40", VA = "0xDD1A40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xDD1A94", Offset = "0xDD1A94", VA = "0xDD1A94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002AA")]
	[Flags]
	public enum RegionFlags
	{
		[Token(Token = "0x4000E50")]
		Border = 0x20000000,
		[Token(Token = "0x4000E51")]
		VertexBorder = 0x40000000,
		[Token(Token = "0x4000E52")]
		AreaBorder = int.MinValue
	}
	[Serializable]
	[Token(Token = "0x20002AB")]
	public struct RegionId : IEquatable<RegionId>, IEquatable<int>
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly RegionId Null;

		[Token(Token = "0x4000E54")]
		public const int MaskId = 536870911;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int bits;

		[Token(Token = "0x170001F9")]
		public int Id
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xDDFC68", Offset = "0xDDFC68", VA = "0xDDFC68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001FA")]
		public RegionFlags Flags
		{
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xDDFC74", Offset = "0xDDFC74", VA = "0xDDFC74")]
			get
			{
				return default(RegionFlags);
			}
		}

		[Token(Token = "0x170001FB")]
		public bool IsNull
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0xDDF048", Offset = "0xDDF048", VA = "0xDDF048")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xDDEF4C", Offset = "0xDDEF4C", VA = "0xDDEF4C")]
		public RegionId(int id)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xDDFB90", Offset = "0xDDFB90", VA = "0xDDFB90")]
		public RegionId(int id, RegionFlags flags)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xDDFC80", Offset = "0xDDFC80", VA = "0xDDFC80")]
		public static RegionId FromRawBits(int bits)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xDDFC88", Offset = "0xDDFC88", VA = "0xDDFC88")]
		public static RegionId WithFlags(RegionId region, RegionFlags flags)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xDDFD64", Offset = "0xDDFD64", VA = "0xDDFD64")]
		public static RegionId WithoutFlags(RegionId region)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xDDFD94", Offset = "0xDDFD94", VA = "0xDDFD94")]
		public static RegionId WithoutFlags(RegionId region, RegionFlags flags)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xDDF020", Offset = "0xDDF020", VA = "0xDDF020")]
		public static bool HasFlags(RegionId region, RegionFlags flags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xDDFB58", Offset = "0xDDFB58", VA = "0xDDFB58")]
		public static bool operator ==(RegionId left, int right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xDDFEAC", Offset = "0xDDFEAC", VA = "0xDDFEAC")]
		public static bool operator !=(RegionId left, int right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xDDF1D4", Offset = "0xDDF1D4", VA = "0xDDF1D4")]
		public static bool operator ==(RegionId left, RegionId right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xDDFF88", Offset = "0xDDFF88", VA = "0xDDFF88")]
		public static bool operator !=(RegionId left, RegionId right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xDE0028", Offset = "0xDE0028", VA = "0xDE0028")]
		public static explicit operator int(RegionId id)
		{
			return default(int);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xDDFF4C", Offset = "0xDDFF4C", VA = "0xDDFF4C", Slot = "4")]
		public bool Equals(RegionId other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xDDFE70", Offset = "0xDDFE70", VA = "0xDDFE70", Slot = "5")]
		public bool Equals(int other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xDE002C", Offset = "0xDE002C", VA = "0xDE002C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xDE0218", Offset = "0xDE0218", VA = "0xDE0218", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xDE0234", Offset = "0xDE0234", VA = "0xDE0234", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	public class Region
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int spanCount;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private RegionId id;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Area areaType;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool remap;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool visited;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<RegionId> connections;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<RegionId> floors;

		[Token(Token = "0x170001FC")]
		public int SpanCount
		{
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0xDDEF54", Offset = "0xDDEF54", VA = "0xDDEF54")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xDDEF5C", Offset = "0xDDEF5C", VA = "0xDDEF5C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public RegionId Id
		{
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0xDDEF64", Offset = "0xDDEF64", VA = "0xDDEF64")]
			get
			{
				return default(RegionId);
			}
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xDDEF6C", Offset = "0xDDEF6C", VA = "0xDDEF6C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public Area AreaType
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0xDDEF74", Offset = "0xDDEF74", VA = "0xDDEF74")]
			get
			{
				return default(Area);
			}
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xDDEF7C", Offset = "0xDDEF7C", VA = "0xDDEF7C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public bool Remap
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0xDDEF84", Offset = "0xDDEF84", VA = "0xDDEF84")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xDDEF8C", Offset = "0xDDEF8C", VA = "0xDDEF8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public bool Visited
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xDDEF98", Offset = "0xDDEF98", VA = "0xDDEF98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xDDEFA0", Offset = "0xDDEFA0", VA = "0xDDEFA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public List<RegionId> FloorRegions
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0xDDEFAC", Offset = "0xDDEFAC", VA = "0xDDEFAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000202")]
		public List<RegionId> Connections
		{
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xDDEFB4", Offset = "0xDDEFB4", VA = "0xDDEFB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public bool IsBorder
		{
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0xDDEFBC", Offset = "0xDDEFBC", VA = "0xDDEFBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000204")]
		public bool IsBorderOrNull
		{
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0xDDF030", Offset = "0xDDF030", VA = "0xDDF030")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xDDEE2C", Offset = "0xDDEE2C", VA = "0xDDEE2C")]
		public Region(int idNum)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xDDF058", Offset = "0xDDF058", VA = "0xDDF058")]
		public void RemoveAdjacentNeighbours()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xDDF20C", Offset = "0xDDF20C", VA = "0xDDF20C")]
		public void ReplaceNeighbour(RegionId oldId, RegionId newId)
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xDDF420", Offset = "0xDDF420", VA = "0xDDF420")]
		public bool CanMergeWith(Region otherRegion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xDDF5BC", Offset = "0xDDF5BC", VA = "0xDDF5BC")]
		public void AddUniqueFloorRegion(RegionId n)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xDDF660", Offset = "0xDDF660", VA = "0xDDF660")]
		public bool MergeWithRegion(Region otherRegion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xDDFA84", Offset = "0xDDFA84", VA = "0xDDFA84")]
		public bool IsConnectedToBorder()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002AD")]
	public struct Span
	{
		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Minimum;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Maximum;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Area Area;

		[Token(Token = "0x17000205")]
		public int Height
		{
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x7F1B88", Offset = "0x7F1B88", VA = "0x7F1B88")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x7F1AFC", Offset = "0x7F1AFC", VA = "0x7F1AFC")]
		public Span(int min, int max)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x7F1B7C", Offset = "0x7F1B7C", VA = "0x7F1B7C")]
		public Span(int min, int max, Area area)
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public struct SpanReference
	{
		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int x;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private int y;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int index;

		[Token(Token = "0x17000206")]
		public int X
		{
			[Token(Token = "0x6000F82")]
			[Address(RVA = "0x7F1BA0", Offset = "0x7F1BA0", VA = "0x7F1BA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000207")]
		public int Y
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x7F1BA8", Offset = "0x7F1BA8", VA = "0x7F1BA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000208")]
		public int Index
		{
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x7F1BB0", Offset = "0x7F1BB0", VA = "0x7F1BB0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x7F1B94", Offset = "0x7F1B94", VA = "0x7F1B94")]
		public SpanReference(int x, int y, int i)
		{
		}
	}
	[Token(Token = "0x20002AF")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50BF94", Offset = "0x50BF94")]
	public class TiledNavMesh
	{
		[Token(Token = "0x20002B0")]
		public struct TiledNavMeshParams
		{
			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Origin;

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float TileWidth;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float TileHeight;

			[Token(Token = "0x4000E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int MaxTiles;

			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int MaxPolys;
		}

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TiledNavMeshParams parameters;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private SharpNav.Geometry.Vector3 origin;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float tileWidth;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float tileHeight;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int maxTiles;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int tileLookupTableSize;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int tileLookupTableMask;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MeshTile[] posLookup;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshTile nextFree;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshTile[] tiles;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int saltBits;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int tileBits;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int polyBits;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DE8", Offset = "0x510DE8")]
		private object <Tag>k__BackingField;

		[Token(Token = "0x17000209")]
		public int TileCount
		{
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0xD7C938", Offset = "0xD7C938", VA = "0xD7C938")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020A")]
		public MeshTile Item
		{
			[Token(Token = "0x6000F87")]
			[Address(RVA = "0xD7C940", Offset = "0xD7C940", VA = "0xD7C940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020B")]
		public object Tag
		{
			[Token(Token = "0x6000F88")]
			[Address(RVA = "0xD7C97C", Offset = "0xD7C97C", VA = "0xD7C97C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C20", Offset = "0x517C20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0xD7C984", Offset = "0xD7C984", VA = "0xD7C984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C30", Offset = "0x517C30")]
			set
			{
			}
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xD7BF1C", Offset = "0xD7BF1C", VA = "0xD7BF1C")]
		public TiledNavMesh(NavMeshBuilder data)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xD7BFBC", Offset = "0xD7BFBC", VA = "0xD7BFBC")]
		public bool InitTileNavMesh(TiledNavMeshParams parameters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xD7C2FC", Offset = "0xD7C2FC", VA = "0xD7C2FC")]
		public void AddTile(NavMeshBuilder data, int lastRef, ref int result)
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xD7CA78", Offset = "0xD7CA78", VA = "0xD7CA78")]
		public void ConnectIntLinks(ref MeshTile tile)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xD7CD60", Offset = "0xD7CD60", VA = "0xD7CD60")]
		public void BaseOffMeshLinks(ref MeshTile tile)
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xD7D32C", Offset = "0xD7D32C", VA = "0xD7D32C")]
		public void ConnectExtLinks(ref MeshTile tile, ref MeshTile target, BoundarySide side)
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xD7D978", Offset = "0xD7D978", VA = "0xD7D978")]
		public void ConnectExtOffMeshLinks(ref MeshTile tile, ref MeshTile target, BoundarySide side)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xD7E678", Offset = "0xD7E678", VA = "0xD7E678")]
		public bool GetOffMeshConnectionPolyEndPoints(int prevRef, int polyRef, ref SharpNav.Geometry.Vector3 startPos, ref SharpNav.Geometry.Vector3 endPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xD7E2B8", Offset = "0xD7E2B8", VA = "0xD7E2B8")]
		public void FindConnectingPolys(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, MeshTile tile, BoundarySide side, List<int> con, List<float> conarea)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xD7E88C", Offset = "0xD7E88C", VA = "0xD7E88C")]
		public void CalcSlabEndPoints(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, SharpNav.Geometry.Vector2 bmin, SharpNav.Geometry.Vector2 bmax, BoundarySide side)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xD7E890", Offset = "0xD7E890", VA = "0xD7E890")]
		public float GetSlabCoord(SharpNav.Geometry.Vector3 va, BoundarySide side)
		{
			return default(float);
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xD7E8C4", Offset = "0xD7E8C4", VA = "0xD7E8C4")]
		public bool OverlapSlabs(SharpNav.Geometry.Vector2 amin, SharpNav.Geometry.Vector2 amax, SharpNav.Geometry.Vector2 bmin, SharpNav.Geometry.Vector2 bmax, float px, float py)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xD7E000", Offset = "0xD7E000", VA = "0xD7E000")]
		public int FindNearestPolyInTile(MeshTile tile, SharpNav.Geometry.Vector3 center, SharpNav.Geometry.Vector3 extents, ref SharpNav.Geometry.Vector3 nearestPt)
		{
			return default(int);
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xD7EA1C", Offset = "0xD7EA1C", VA = "0xD7EA1C")]
		public int QueryPolygonsInTile(MeshTile tile, BBox3 qbounds, List<int> polys)
		{
			return default(int);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xD7DF94", Offset = "0xD7DF94", VA = "0xD7DF94")]
		public int AllocLink(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xD7DE84", Offset = "0xD7DE84", VA = "0xD7DE84")]
		public int GetTileRef(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xD7C98C", Offset = "0xD7C98C", VA = "0xD7C98C")]
		public MeshTile GetTileAt(int x, int y, int layer)
		{
			return null;
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xD7D21C", Offset = "0xD7D21C", VA = "0xD7D21C")]
		public int GetTilesAt(int x, int y, MeshTile[] tiles)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xD7DE24", Offset = "0xD7DE24", VA = "0xD7DE24")]
		public int GetNeighbourTilesAt(int x, int y, BoundarySide side, MeshTile[] tiles)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xD7CA58", Offset = "0xD7CA58", VA = "0xD7CA58")]
		public int ComputeTileHash(int x, int y, int mask)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xD7DFF8", Offset = "0xD7DFF8", VA = "0xD7DFF8")]
		public int GetReference(int polyBase, int poly)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xD7DFEC", Offset = "0xD7DFEC", VA = "0xD7DFEC")]
		public bool IsLinkAllocated(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xD7DF8C", Offset = "0xD7DF8C", VA = "0xD7DF8C")]
		public bool IsExternalLink(int neighbor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xD7DF08", Offset = "0xD7DF08", VA = "0xD7DF08")]
		public int GetPolyRefBase(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xD7EF50", Offset = "0xD7EF50", VA = "0xD7EF50")]
		public bool TryGetTileAndPolyByRef(int reference, out MeshTile tile, out Poly poly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xD7F09C", Offset = "0xD7F09C", VA = "0xD7F09C")]
		public void TryGetTileAndPolyByRefUnsafe(int reference, out MeshTile tile, out Poly poly)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xD7F174", Offset = "0xD7F174", VA = "0xD7F174")]
		public bool IsValidPolyRef(int reference)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xD7E848", Offset = "0xD7E848", VA = "0xD7E848")]
		public void DecodePolyId(int reference, ref int salt, ref int indexTile, ref int indexPoly)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xD7CA38", Offset = "0xD7CA38", VA = "0xD7CA38")]
		public int DecodePolyIdSalt(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xD7CA20", Offset = "0xD7CA20", VA = "0xD7CA20")]
		public int DecodePolyIdTile(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xD7E2A4", Offset = "0xD7E2A4", VA = "0xD7E2A4")]
		public int DecodePolyIdPoly(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xD7EF34", Offset = "0xD7EF34", VA = "0xD7EF34")]
		public int EncodePolyId(int salt, int indexTile, int indexPoly)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xD7F21C", Offset = "0xD7F21C", VA = "0xD7F21C")]
		public void CalcTileLoc(ref SharpNav.Geometry.Vector3 pos, out int tx, out int ty)
		{
		}
	}
}
namespace SharpNav.Pathfinding
{
	[Token(Token = "0x20002B1")]
	public enum BoundarySide : byte
	{
		[Token(Token = "0x4000E77")]
		Internal = byte.MaxValue,
		[Token(Token = "0x4000E78")]
		PlusX = 0,
		[Token(Token = "0x4000E79")]
		PlusXPlusZ = 1,
		[Token(Token = "0x4000E7A")]
		PlusZ = 2,
		[Token(Token = "0x4000E7B")]
		MinusXPlusZ = 3,
		[Token(Token = "0x4000E7C")]
		MinusX = 4,
		[Token(Token = "0x4000E7D")]
		MinusXMinusZ = 5,
		[Token(Token = "0x4000E7E")]
		MinusZ = 6,
		[Token(Token = "0x4000E7F")]
		PlusXMinusZ = 7
	}
	[Token(Token = "0x20002B2")]
	public static class BoundarySideExtensions
	{
		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x8D5AF4", Offset = "0x8D5AF4", VA = "0x8D5AF4")]
		public static BoundarySide GetOpposite(this BoundarySide side)
		{
			return default(BoundarySide);
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x8D5B0C", Offset = "0x8D5B0C", VA = "0x8D5B0C")]
		public static BoundarySide FromPoint(SharpNav.Geometry.Vector3 pt, BBox3 bounds)
		{
			return default(BoundarySide);
		}
	}
	[Token(Token = "0x20002B3")]
	public class Link
	{
		[Token(Token = "0x4000E80")]
		public const int External = int.MinValue;

		[Token(Token = "0x4000E81")]
		public const int Null = -1;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510DF8", Offset = "0x510DF8")]
		private int <Reference>k__BackingField;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E08", Offset = "0x510E08")]
		private int <Next>k__BackingField;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E18", Offset = "0x510E18")]
		private int <Edge>k__BackingField;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E28", Offset = "0x510E28")]
		private BoundarySide <Side>k__BackingField;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E38", Offset = "0x510E38")]
		private int <BMin>k__BackingField;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E48", Offset = "0x510E48")]
		private int <BMax>k__BackingField;

		[Token(Token = "0x1700020C")]
		public int Reference
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x9E2A2C", Offset = "0x9E2A2C", VA = "0x9E2A2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C50", Offset = "0x517C50")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x9E2A34", Offset = "0x9E2A34", VA = "0x9E2A34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C60", Offset = "0x517C60")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public int Next
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x9E2A3C", Offset = "0x9E2A3C", VA = "0x9E2A3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C70", Offset = "0x517C70")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x9E2A44", Offset = "0x9E2A44", VA = "0x9E2A44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C80", Offset = "0x517C80")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public int Edge
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x9E2A4C", Offset = "0x9E2A4C", VA = "0x9E2A4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517C90", Offset = "0x517C90")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0x9E2A54", Offset = "0x9E2A54", VA = "0x9E2A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CA0", Offset = "0x517CA0")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public BoundarySide Side
		{
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x9E2A5C", Offset = "0x9E2A5C", VA = "0x9E2A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CB0", Offset = "0x517CB0")]
			get
			{
				return default(BoundarySide);
			}
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x9E2A64", Offset = "0x9E2A64", VA = "0x9E2A64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CC0", Offset = "0x517CC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public int BMin
		{
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x9E2A6C", Offset = "0x9E2A6C", VA = "0x9E2A6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CD0", Offset = "0x517CD0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x9E2A74", Offset = "0x9E2A74", VA = "0x9E2A74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CE0", Offset = "0x517CE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public int BMax
		{
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x9E2A7C", Offset = "0x9E2A7C", VA = "0x9E2A7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517CF0", Offset = "0x517CF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x9E2A84", Offset = "0x9E2A84", VA = "0x9E2A84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D00", Offset = "0x517D00")]
			set
			{
			}
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x9E2A8C", Offset = "0x9E2A8C", VA = "0x9E2A8C")]
		public Link()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class MeshTile
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E58", Offset = "0x510E58")]
		private int <Salt>k__BackingField;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E68", Offset = "0x510E68")]
		private int <LinksFreeList>k__BackingField;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E78", Offset = "0x510E78")]
		private PathfindingCommon.NavMeshInfo <Header>k__BackingField;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E88", Offset = "0x510E88")]
		private Poly[] <Polys>k__BackingField;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510E98", Offset = "0x510E98")]
		private SharpNav.Geometry.Vector3[] <Verts>k__BackingField;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510EA8", Offset = "0x510EA8")]
		private Link[] <Links>k__BackingField;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510EB8", Offset = "0x510EB8")]
		private PolyMeshDetail.MeshData[] <DetailMeshes>k__BackingField;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510EC8", Offset = "0x510EC8")]
		private SharpNav.Geometry.Vector3[] <DetailVerts>k__BackingField;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510ED8", Offset = "0x510ED8")]
		private PolyMeshDetail.TriangleData[] <DetailTris>k__BackingField;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510EE8", Offset = "0x510EE8")]
		private OffMeshConnection[] <OffMeshConnections>k__BackingField;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510EF8", Offset = "0x510EF8")]
		private BVTree <BVTree>k__BackingField;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F08", Offset = "0x510F08")]
		private NavMeshBuilder <Data>k__BackingField;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F18", Offset = "0x510F18")]
		private MeshTile <Next>k__BackingField;

		[Token(Token = "0x17000212")]
		public int Salt
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xC2FDF8", Offset = "0xC2FDF8", VA = "0xC2FDF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D10", Offset = "0x517D10")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xC2FE00", Offset = "0xC2FE00", VA = "0xC2FE00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D20", Offset = "0x517D20")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public int LinksFreeList
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xC2FE08", Offset = "0xC2FE08", VA = "0xC2FE08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D30", Offset = "0x517D30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0xC2FE10", Offset = "0xC2FE10", VA = "0xC2FE10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D40", Offset = "0x517D40")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public PathfindingCommon.NavMeshInfo Header
		{
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0xC2FE18", Offset = "0xC2FE18", VA = "0xC2FE18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D50", Offset = "0x517D50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xC2FE20", Offset = "0xC2FE20", VA = "0xC2FE20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D60", Offset = "0x517D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public Poly[] Polys
		{
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xC2FE28", Offset = "0xC2FE28", VA = "0xC2FE28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D70", Offset = "0x517D70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0xC2FE30", Offset = "0xC2FE30", VA = "0xC2FE30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D80", Offset = "0x517D80")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public SharpNav.Geometry.Vector3[] Verts
		{
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xC2FE38", Offset = "0xC2FE38", VA = "0xC2FE38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517D90", Offset = "0x517D90")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xC2FE40", Offset = "0xC2FE40", VA = "0xC2FE40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DA0", Offset = "0x517DA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public Link[] Links
		{
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xC2FE48", Offset = "0xC2FE48", VA = "0xC2FE48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DB0", Offset = "0x517DB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xC2FE50", Offset = "0xC2FE50", VA = "0xC2FE50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DC0", Offset = "0x517DC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public PolyMeshDetail.MeshData[] DetailMeshes
		{
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0xC2FE58", Offset = "0xC2FE58", VA = "0xC2FE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DD0", Offset = "0x517DD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xC2FE60", Offset = "0xC2FE60", VA = "0xC2FE60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DE0", Offset = "0x517DE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public SharpNav.Geometry.Vector3[] DetailVerts
		{
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xC2FE68", Offset = "0xC2FE68", VA = "0xC2FE68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517DF0", Offset = "0x517DF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xC2FE70", Offset = "0xC2FE70", VA = "0xC2FE70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E00", Offset = "0x517E00")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public PolyMeshDetail.TriangleData[] DetailTris
		{
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xC2FE78", Offset = "0xC2FE78", VA = "0xC2FE78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E10", Offset = "0x517E10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xC2FE80", Offset = "0xC2FE80", VA = "0xC2FE80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E20", Offset = "0x517E20")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public OffMeshConnection[] OffMeshConnections
		{
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xC2FE88", Offset = "0xC2FE88", VA = "0xC2FE88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E30", Offset = "0x517E30")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xC2FE90", Offset = "0xC2FE90", VA = "0xC2FE90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E40", Offset = "0x517E40")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public BVTree BVTree
		{
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xC2FE98", Offset = "0xC2FE98", VA = "0xC2FE98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E50", Offset = "0x517E50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xC2FEA0", Offset = "0xC2FEA0", VA = "0xC2FEA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E60", Offset = "0x517E60")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public NavMeshBuilder Data
		{
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xC2FEA8", Offset = "0xC2FEA8", VA = "0xC2FEA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E70", Offset = "0x517E70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xC2FEB0", Offset = "0xC2FEB0", VA = "0xC2FEB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E80", Offset = "0x517E80")]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public MeshTile Next
		{
			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0xC2FEB8", Offset = "0xC2FEB8", VA = "0xC2FEB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517E90", Offset = "0x517E90")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0xC2FEC0", Offset = "0xC2FEC0", VA = "0xC2FEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517EA0", Offset = "0x517EA0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xC2FEC8", Offset = "0xC2FEC8", VA = "0xC2FEC8")]
		public void ClosestPointOnPoly(Poly poly, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xC2FF2C", Offset = "0xC2FF2C", VA = "0xC2FF2C")]
		public void ClosestPointOnPoly(int indexPoly, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xC301DC", Offset = "0xC301DC", VA = "0xC301DC")]
		public void ClosestPointOnPolyBoundary(Poly poly, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xC3048C", Offset = "0xC3048C", VA = "0xC3048C")]
		public bool ClosestHeight(int indexPoly, SharpNav.Geometry.Vector3 pos, out float h)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xC30018", Offset = "0xC30018", VA = "0xC30018")]
		public void ClosestPointOnPolyOffMeshConnection(Poly poly, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xC3074C", Offset = "0xC3074C", VA = "0xC3074C")]
		public MeshTile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B5")]
	public struct NavPoint
	{
		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly NavPoint Null;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Polygon;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SharpNav.Geometry.Vector3 Position;

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xE8E2FC", Offset = "0xE8E2FC", VA = "0xE8E2FC")]
		public NavPoint(int poly, SharpNav.Geometry.Vector3 pos)
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[Flags]
	public enum OffMeshConnectionFlags : byte
	{
		[Token(Token = "0x4000E99")]
		None = 0,
		[Token(Token = "0x4000E9A")]
		Bidirectional = 1
	}
	[Token(Token = "0x20002B7")]
	public class OffMeshConnection
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F28", Offset = "0x510F28")]
		private SharpNav.Geometry.Vector3 <Pos0>k__BackingField;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F38", Offset = "0x510F38")]
		private SharpNav.Geometry.Vector3 <Pos1>k__BackingField;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F48", Offset = "0x510F48")]
		private float <Radius>k__BackingField;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F58", Offset = "0x510F58")]
		private int <Poly>k__BackingField;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F68", Offset = "0x510F68")]
		private OffMeshConnectionFlags <Flags>k__BackingField;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F78", Offset = "0x510F78")]
		private BoundarySide <Side>k__BackingField;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F88", Offset = "0x510F88")]
		private object <Tag>k__BackingField;

		[Token(Token = "0x1700021F")]
		public SharpNav.Geometry.Vector3 Pos0
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xC35190", Offset = "0xC35190", VA = "0xC35190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517EB0", Offset = "0x517EB0")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xC3519C", Offset = "0xC3519C", VA = "0xC3519C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517EC0", Offset = "0x517EC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public SharpNav.Geometry.Vector3 Pos1
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xC351A8", Offset = "0xC351A8", VA = "0xC351A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517ED0", Offset = "0x517ED0")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xC351B4", Offset = "0xC351B4", VA = "0xC351B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517EE0", Offset = "0x517EE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public float Radius
		{
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xC351C0", Offset = "0xC351C0", VA = "0xC351C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517EF0", Offset = "0x517EF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xC351C8", Offset = "0xC351C8", VA = "0xC351C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F00", Offset = "0x517F00")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public int Poly
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xC351D0", Offset = "0xC351D0", VA = "0xC351D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F10", Offset = "0x517F10")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xC351D8", Offset = "0xC351D8", VA = "0xC351D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F20", Offset = "0x517F20")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public OffMeshConnectionFlags Flags
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xC351E0", Offset = "0xC351E0", VA = "0xC351E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F30", Offset = "0x517F30")]
			get
			{
				return default(OffMeshConnectionFlags);
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0xC351E8", Offset = "0xC351E8", VA = "0xC351E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F40", Offset = "0x517F40")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public BoundarySide Side
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xC351F0", Offset = "0xC351F0", VA = "0xC351F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F50", Offset = "0x517F50")]
			get
			{
				return default(BoundarySide);
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0xC351F8", Offset = "0xC351F8", VA = "0xC351F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F60", Offset = "0x517F60")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public object Tag
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xC35200", Offset = "0xC35200", VA = "0xC35200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F70", Offset = "0x517F70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0xC35208", Offset = "0xC35208", VA = "0xC35208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F80", Offset = "0x517F80")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xC35210", Offset = "0xC35210", VA = "0xC35210")]
		public OffMeshConnection()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	[Flags]
	public enum PathBuildFlags
	{
		[Token(Token = "0x4000EA3")]
		None = 0,
		[Token(Token = "0x4000EA4")]
		AreaCrossingVertices = 1,
		[Token(Token = "0x4000EA5")]
		AllCrossingVertices = 2
	}
	[Token(Token = "0x20002B9")]
	public class PathfindingCommon
	{
		[Token(Token = "0x20002BA")]
		public class NavMeshInfo
		{
			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int X;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Y;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Layer;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int PolyCount;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int VertCount;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int MaxLinkCount;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int DetailMeshCount;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int DetailVertCount;

			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int DetailTriCount;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int BvNodeCount;

			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int OffMeshConCount;

			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int OffMeshBase;

			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float WalkableHeight;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float WalkableRadius;

			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float WalkableClimb;

			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public BBox3 Bounds;

			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float BvQuantFactor;

			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xA3DD9C", Offset = "0xA3DD9C", VA = "0xA3DD9C")]
			public NavMeshInfo()
			{
			}
		}

		[Token(Token = "0x4000EA6")]
		public const int VERTS_PER_POLYGON = 6;

		[Token(Token = "0x4000EA7")]
		public const int STRAIGHTPATH_START = 1;

		[Token(Token = "0x4000EA8")]
		public const int STRAIGHTPATH_END = 2;

		[Token(Token = "0x4000EA9")]
		public const int STRAIGHTPATH_OFFMESH_CONNECTION = 4;

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x997600", Offset = "0x997600", VA = "0x997600")]
		public static void RandomPointInConvexPoly(SharpNav.Geometry.Vector3[] pts, int npts, float[] areas, float s, float t, out SharpNav.Geometry.Vector3 pt)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x997960", Offset = "0x997960", VA = "0x997960")]
		public PathfindingCommon()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class Poly
	{
		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PolygonType polyType;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510F98", Offset = "0x510F98")]
		private int <FirstLink>k__BackingField;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FA8", Offset = "0x510FA8")]
		private int[] <Verts>k__BackingField;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FB8", Offset = "0x510FB8")]
		private int[] <Neis>k__BackingField;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FC8", Offset = "0x510FC8")]
		private int <Flags>k__BackingField;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FD8", Offset = "0x510FD8")]
		private int <VertCount>k__BackingField;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FE8", Offset = "0x510FE8")]
		private Area <Area>k__BackingField;

		[Token(Token = "0x17000226")]
		public int FirstLink
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0x9A0420", Offset = "0x9A0420", VA = "0x9A0420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517F90", Offset = "0x517F90")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x9A0428", Offset = "0x9A0428", VA = "0x9A0428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FA0", Offset = "0x517FA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public int[] Verts
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x9A0430", Offset = "0x9A0430", VA = "0x9A0430")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FB0", Offset = "0x517FB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0x9A0438", Offset = "0x9A0438", VA = "0x9A0438")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FC0", Offset = "0x517FC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public int[] Neis
		{
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0x9A0440", Offset = "0x9A0440", VA = "0x9A0440")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FD0", Offset = "0x517FD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0x9A0448", Offset = "0x9A0448", VA = "0x9A0448")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FE0", Offset = "0x517FE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public int Flags
		{
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x9A0450", Offset = "0x9A0450", VA = "0x9A0450")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x517FF0", Offset = "0x517FF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0x9A0458", Offset = "0x9A0458", VA = "0x9A0458")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518000", Offset = "0x518000")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public int VertCount
		{
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0x9A0460", Offset = "0x9A0460", VA = "0x9A0460")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518010", Offset = "0x518010")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0x9A0468", Offset = "0x9A0468", VA = "0x9A0468")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518020", Offset = "0x518020")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public Area Area
		{
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x9A0470", Offset = "0x9A0470", VA = "0x9A0470")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518030", Offset = "0x518030")]
			get
			{
				return default(Area);
			}
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0x9A0478", Offset = "0x9A0478", VA = "0x9A0478")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518040", Offset = "0x518040")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public PolygonType PolyType
		{
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0x9A0480", Offset = "0x9A0480", VA = "0x9A0480")]
			get
			{
				return default(PolygonType);
			}
			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0x9A0488", Offset = "0x9A0488", VA = "0x9A0488")]
			set
			{
			}
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x9A0490", Offset = "0x9A0490", VA = "0x9A0490")]
		public Poly()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	[Flags]
	public enum PolygonType : byte
	{
		[Token(Token = "0x4000EC3")]
		Ground = 0,
		[Token(Token = "0x4000EC4")]
		OffMeshConnection = 1
	}
}
namespace SharpNav.Geometry
{
	[Serializable]
	[Token(Token = "0x20002BD")]
	public struct BBox2i : IEquatable<BBox2i>
	{
		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2i Min;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2i Max;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x9B5388", Offset = "0x9B5388", VA = "0x9B5388")]
		public BBox2i(Vector2i min, Vector2i max)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x9B5390", Offset = "0x9B5390", VA = "0x9B5390")]
		public BBox2i(int minX, int minY, int maxX, int maxY)
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x9B539C", Offset = "0x9B539C", VA = "0x9B539C")]
		public static bool operator ==(BBox2i left, BBox2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x9B5498", Offset = "0x9B5498", VA = "0x9B5498")]
		public static bool operator !=(BBox2i left, BBox2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x9B54CC", Offset = "0x9B54CC", VA = "0x9B54CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x9B56C4", Offset = "0x9B56C4", VA = "0x9B56C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x9B56FC", Offset = "0x9B56FC", VA = "0x9B56FC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x9B53CC", Offset = "0x9B53CC", VA = "0x9B53CC", Slot = "4")]
		public bool Equals(BBox2i other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20002BE")]
	public struct BBox3 : IEquatable<BBox3>
	{
		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Min;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 Max;

		[Token(Token = "0x1700022D")]
		public Vector3 Center
		{
			[Token(Token = "0x6001006")]
			[Address(RVA = "0x9B5834", Offset = "0x9B5834", VA = "0x9B5834")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700022E")]
		public Vector3 Size
		{
			[Token(Token = "0x6001007")]
			[Address(RVA = "0x9B58DC", Offset = "0x9B58DC", VA = "0x9B58DC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x9B5814", Offset = "0x9B5814", VA = "0x9B5814")]
		public BBox3(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x9B5824", Offset = "0x9B5824", VA = "0x9B5824")]
		public BBox3(float minX, float minY, float minZ, float maxX, float maxY, float maxZ)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x9B5978", Offset = "0x9B5978", VA = "0x9B5978")]
		public static bool Overlapping(ref BBox3 a, ref BBox3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x9B59E4", Offset = "0x9B59E4", VA = "0x9B59E4")]
		public static bool IsValid(ref BBox3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x9B5A98", Offset = "0x9B5A98", VA = "0x9B5A98")]
		public static bool operator ==(BBox3 left, BBox3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x9B5BE4", Offset = "0x9B5BE4", VA = "0x9B5BE4")]
		public static bool operator !=(BBox3 left, BBox3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x9B5ACC", Offset = "0x9B5ACC", VA = "0x9B5ACC", Slot = "4")]
		public bool Equals(BBox3 other)
		{
			return default(bool);
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x9B5C30", Offset = "0x9B5C30", VA = "0x9B5C30", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x9B5CCC", Offset = "0x9B5CCC", VA = "0x9B5CCC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x9B5D04", Offset = "0x9B5D04", VA = "0x9B5D04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002BF")]
	internal static class Containment
	{
		[Token(Token = "0x6001010")]
		[Address(RVA = "0xA4A6F4", Offset = "0xA4A6F4", VA = "0xA4A6F4")]
		internal static bool PointInPoly(Vector3 pt, Vector3[] verts, int nverts)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002C0")]
	internal static class Distance
	{
		[Token(Token = "0x6001011")]
		[Address(RVA = "0xA59C74", Offset = "0xA59C74", VA = "0xA59C74")]
		internal static float PointToSegmentSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q)
		{
			return default(float);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xA4C0A0", Offset = "0xA4C0A0", VA = "0xA4C0A0")]
		internal static float PointToSegment2DSquared(int x, int z, int px, int pz, int qx, int qz)
		{
			return default(float);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xA59DF4", Offset = "0xA59DF4", VA = "0xA59DF4")]
		internal static float PointToSegment2DSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q)
		{
			return default(float);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xA59E18", Offset = "0xA59E18", VA = "0xA59E18")]
		internal static float PointToSegment2DSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q, out float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xA59EC0", Offset = "0xA59EC0", VA = "0xA59EC0")]
		internal static float PointToPolygonSquared(Vector3 point, Vector3[] verts, int vertCount)
		{
			return default(float);
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xA5A088", Offset = "0xA5A088", VA = "0xA5A088")]
		internal static float PointToPolygonEdgeSquared(Vector3 pt, Vector3[] verts, int nverts)
		{
			return default(float);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xA5A1F4", Offset = "0xA5A1F4", VA = "0xA5A1F4")]
		internal static bool PointToPolygonEdgeSquared(Vector3 pt, Vector3[] verts, int nverts, float[] edgeDist, float[] edgeT)
		{
			return default(bool);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xA5A31C", Offset = "0xA5A31C", VA = "0xA5A31C")]
		internal static float PointToTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c)
		{
			return default(float);
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xA5A420", Offset = "0xA5A420", VA = "0xA5A420")]
		internal static bool PointToTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c, out float height)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002C1")]
	internal static class Intersection
	{
		[Token(Token = "0x600101A")]
		[Address(RVA = "0xCEB90C", Offset = "0xCEB90C", VA = "0xCEB90C")]
		internal static bool SegmentSegment2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, ref Vector3 d)
		{
			return default(bool);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xCEB9C4", Offset = "0xCEB9C4", VA = "0xCEB9C4")]
		internal static bool SegmentSegment2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, ref Vector3 d, out float s, out float t)
		{
			return default(bool);
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xCEBBB8", Offset = "0xCEBBB8", VA = "0xCEBBB8")]
		internal static bool PolyPoly2D(Vector3[] polya, int npolya, Vector3[] polyb, int npolyb)
		{
			return default(bool);
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xCEBFBC", Offset = "0xCEBFBC", VA = "0xCEBFBC")]
		internal static bool SegmentPoly2D(Vector3 p0, Vector3 p1, Vector3[] verts, int nverts, out float tmin, out float tmax, out int segMin, out int segMax)
		{
			return default(bool);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xCEBE3C", Offset = "0xCEBE3C", VA = "0xCEBE3C")]
		internal static void ProjectPoly(Vector3 axis, Vector3[] poly, int npoly, out float rmin, out float rmax)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xCEBF9C", Offset = "0xCEBF9C", VA = "0xCEBF9C")]
		internal static bool OverlapRange(float amin, float amax, float bmin, float bmax, float eps)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20002C2")]
	public struct Triangle3 : IEquatable<Triangle3>
	{
		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 A;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 B;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 C;

		[Token(Token = "0x1700022F")]
		public Vector3 AB
		{
			[Token(Token = "0x6001021")]
			[Address(RVA = "0xBDBFC8", Offset = "0xBDBFC8", VA = "0xBDBFC8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000230")]
		public Vector3 AC
		{
			[Token(Token = "0x6001022")]
			[Address(RVA = "0xBDC064", Offset = "0xBDC064", VA = "0xBDC064")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000231")]
		public Vector3 BA
		{
			[Token(Token = "0x6001023")]
			[Address(RVA = "0xBDC0DC", Offset = "0xBDC0DC", VA = "0xBDC0DC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000232")]
		public Vector3 BC
		{
			[Token(Token = "0x6001024")]
			[Address(RVA = "0xBDC154", Offset = "0xBDC154", VA = "0xBDC154")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000233")]
		public Vector3 CA
		{
			[Token(Token = "0x6001025")]
			[Address(RVA = "0xBDC1CC", Offset = "0xBDC1CC", VA = "0xBDC1CC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000234")]
		public Vector3 CB
		{
			[Token(Token = "0x6001026")]
			[Address(RVA = "0xBDC244", Offset = "0xBDC244", VA = "0xBDC244")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000235")]
		public float Area
		{
			[Token(Token = "0x6001027")]
			[Address(RVA = "0xBDC2BC", Offset = "0xBDC2BC", VA = "0xBDC2BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000236")]
		public float Perimeter
		{
			[Token(Token = "0x6001028")]
			[Address(RVA = "0xBDC4F4", Offset = "0xBDC4F4", VA = "0xBDC4F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000237")]
		public Vector3 Centroid
		{
			[Token(Token = "0x6001029")]
			[Address(RVA = "0xBDC574", Offset = "0xBDC574", VA = "0xBDC574")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000238")]
		public Vector3 Normal
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0xBDC650", Offset = "0xBDC650", VA = "0xBDC650")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xBDBFA8", Offset = "0xBDBFA8", VA = "0xBDBFA8")]
		public Triangle3(Vector3 a, Vector3 b, Vector3 c)
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xBDC798", Offset = "0xBDC798", VA = "0xBDC798")]
		public static bool operator ==(Triangle3 left, Triangle3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xBDC868", Offset = "0xBDC868", VA = "0xBDC868")]
		public static bool operator !=(Triangle3 left, Triangle3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xBDC8A0", Offset = "0xBDC8A0", VA = "0xBDC8A0")]
		public static BBox3 GetBoundingBox(Triangle3 tri)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xBDC8E8", Offset = "0xBDC8E8", VA = "0xBDC8E8")]
		public static void GetBoundingBox(ref Triangle3 tri, out BBox3 bbox)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xBDC8FC", Offset = "0xBDC8FC", VA = "0xBDC8FC")]
		public static void GetBoundingBox(ref Vector3 a, ref Vector3 b, ref Vector3 c, out BBox3 bbox)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xBDC978", Offset = "0xBDC978", VA = "0xBDC978")]
		public static void Area2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, out float area)
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xBDC9B4", Offset = "0xBDC9B4", VA = "0xBDC9B4")]
		public static float Area2D(Vector3 a, Vector3 b, Vector3 c)
		{
			return default(float);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xBDC7CC", Offset = "0xBDC7CC", VA = "0xBDC7CC", Slot = "4")]
		public bool Equals(Triangle3 other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xBDCA0C", Offset = "0xBDCA0C", VA = "0xBDCA0C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xBDCB1C", Offset = "0xBDCB1C", VA = "0xBDCB1C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xBDCBC8", Offset = "0xBDCBC8", VA = "0xBDCBC8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002C3")]
	public static class TriangleEnumerable
	{
		[Token(Token = "0x20002C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C01C", Offset = "0x50C01C")]
		private sealed class <FromTriangle>d__0 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Triangle3[] triangles;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Triangle3[] <>3__triangles;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int triOffset;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public int <>3__triOffset;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int triCount;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__triCount;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__2;

			[Token(Token = "0x17000239")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6001043")]
				[Address(RVA = "0xA48848", Offset = "0xA48848", VA = "0xA48848", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x1700023A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001045")]
				[Address(RVA = "0xA488A0", Offset = "0xA488A0", VA = "0xA488A0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001040")]
			[Address(RVA = "0xA48760", Offset = "0xA48760", VA = "0xA48760")]
			[DebuggerHidden]
			public <FromTriangle>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001041")]
			[Address(RVA = "0xA48798", Offset = "0xA48798", VA = "0xA48798", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0xA4879C", Offset = "0xA4879C", VA = "0xA4879C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0xA48860", Offset = "0xA48860", VA = "0xA48860", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001046")]
			[Address(RVA = "0xA4890C", Offset = "0xA4890C", VA = "0xA4890C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001047")]
			[Address(RVA = "0xA489CC", Offset = "0xA489CC", VA = "0xA489CC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20002C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C02C", Offset = "0x50C02C")]
		private sealed class <FromVector3>d__1 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int vertStride;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__vertStride;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3[] vertices;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3[] <>3__vertices;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int vertOffset;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__vertOffset;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int triCount;

			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__triCount;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__2;

			[Token(Token = "0x1700023B")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x600104B")]
				[Address(RVA = "0xA48B20", Offset = "0xA48B20", VA = "0xA48B20", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x1700023C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600104D")]
				[Address(RVA = "0xA48B78", Offset = "0xA48B78", VA = "0xA48B78", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001048")]
			[Address(RVA = "0xA489D0", Offset = "0xA489D0", VA = "0xA489D0")]
			[DebuggerHidden]
			public <FromVector3>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001049")]
			[Address(RVA = "0xA48A08", Offset = "0xA48A08", VA = "0xA48A08", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600104A")]
			[Address(RVA = "0xA48A0C", Offset = "0xA48A0C", VA = "0xA48A0C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600104C")]
			[Address(RVA = "0xA48B38", Offset = "0xA48B38", VA = "0xA48B38", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600104E")]
			[Address(RVA = "0xA48BE4", Offset = "0xA48BE4", VA = "0xA48BE4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600104F")]
			[Address(RVA = "0xA48CAC", Offset = "0xA48CAC", VA = "0xA48CAC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20002C6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C03C", Offset = "0x50C03C")]
		private sealed class <FromFloat>d__2 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int floatStride;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__floatStride;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int floatOffset;

			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int <>3__floatOffset;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float[] vertices;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float[] <>3__vertices;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int triCount;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__triCount;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__2;

			[Token(Token = "0x1700023D")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6001053")]
				[Address(RVA = "0xA47F1C", Offset = "0xA47F1C", VA = "0xA47F1C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x1700023E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001055")]
				[Address(RVA = "0xA47F74", Offset = "0xA47F74", VA = "0xA47F74", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001050")]
			[Address(RVA = "0xA47D7C", Offset = "0xA47D7C", VA = "0xA47D7C")]
			[DebuggerHidden]
			public <FromFloat>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001051")]
			[Address(RVA = "0xA47DB4", Offset = "0xA47DB4", VA = "0xA47DB4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001052")]
			[Address(RVA = "0xA47DB8", Offset = "0xA47DB8", VA = "0xA47DB8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001054")]
			[Address(RVA = "0xA47F34", Offset = "0xA47F34", VA = "0xA47F34", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001056")]
			[Address(RVA = "0xA47FE0", Offset = "0xA47FE0", VA = "0xA47FE0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001057")]
			[Address(RVA = "0xA480A8", Offset = "0xA480A8", VA = "0xA480A8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20002C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C04C", Offset = "0x50C04C")]
		private sealed class <FromIndexedVector3>d__3 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int vertOffset;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__vertOffset;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int[] indices;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] <>3__indices;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int indexOffset;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__indexOffset;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int vertStride;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__vertStride;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3[] vertices;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector3[] <>3__vertices;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int triCount;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public int <>3__triCount;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private int <i>5__2;

			[Token(Token = "0x1700023F")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x600105B")]
				[Address(RVA = "0xA485B8", Offset = "0xA485B8", VA = "0xA485B8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000240")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600105D")]
				[Address(RVA = "0xA48610", Offset = "0xA48610", VA = "0xA48610", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001058")]
			[Address(RVA = "0xA48428", Offset = "0xA48428", VA = "0xA48428")]
			[DebuggerHidden]
			public <FromIndexedVector3>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001059")]
			[Address(RVA = "0xA48460", Offset = "0xA48460", VA = "0xA48460", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600105A")]
			[Address(RVA = "0xA48464", Offset = "0xA48464", VA = "0xA48464", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600105C")]
			[Address(RVA = "0xA485D0", Offset = "0xA485D0", VA = "0xA485D0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600105E")]
			[Address(RVA = "0xA4867C", Offset = "0xA4867C", VA = "0xA4867C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600105F")]
			[Address(RVA = "0xA4875C", Offset = "0xA4875C", VA = "0xA4875C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20002C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C05C", Offset = "0x50C05C")]
		private sealed class <FromIndexedFloat>d__4 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int floatOffset;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__floatOffset;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int[] indices;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] <>3__indices;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int indexOffset;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__indexOffset;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int floatStride;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__floatStride;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private float[] vertices;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public float[] <>3__vertices;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int triCount;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public int <>3__triCount;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private int <i>5__2;

			[Token(Token = "0x17000241")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6001063")]
				[Address(RVA = "0xA48280", Offset = "0xA48280", VA = "0xA48280", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000242")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001065")]
				[Address(RVA = "0xA482D8", Offset = "0xA482D8", VA = "0xA482D8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001060")]
			[Address(RVA = "0xA480AC", Offset = "0xA480AC", VA = "0xA480AC")]
			[DebuggerHidden]
			public <FromIndexedFloat>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001061")]
			[Address(RVA = "0xA480E4", Offset = "0xA480E4", VA = "0xA480E4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001062")]
			[Address(RVA = "0xA480E8", Offset = "0xA480E8", VA = "0xA480E8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001064")]
			[Address(RVA = "0xA48298", Offset = "0xA48298", VA = "0xA48298", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001066")]
			[Address(RVA = "0xA48344", Offset = "0xA48344", VA = "0xA48344", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001067")]
			[Address(RVA = "0xA48424", Offset = "0xA48424", VA = "0xA48424", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xBDD03C", Offset = "0xBDD03C", VA = "0xBDD03C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x518050", Offset = "0x518050")]
		public static IEnumerable<Triangle3> FromTriangle(Triangle3[] triangles, int triOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xBDD0CC", Offset = "0xBDD0CC", VA = "0xBDD0CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5180B0", Offset = "0x5180B0")]
		public static IEnumerable<Triangle3> FromVector3(Vector3[] vertices, int vertOffset, int vertStride, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xBDD16C", Offset = "0xBDD16C", VA = "0xBDD16C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x518110", Offset = "0x518110")]
		public static IEnumerable<Triangle3> FromFloat(float[] vertices, int floatOffset, int floatStride, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xBDD20C", Offset = "0xBDD20C", VA = "0xBDD20C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x518170", Offset = "0x518170")]
		public static IEnumerable<Triangle3> FromIndexedVector3(Vector3[] vertices, int[] indices, int vertOffset, int vertStride, int indexOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xBDD2D0", Offset = "0xBDD2D0", VA = "0xBDD2D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5181D0", Offset = "0x5181D0")]
		public static IEnumerable<Triangle3> FromIndexedFloat(float[] vertices, int[] indices, int floatOffset, int floatStride, int indexOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xBDD394", Offset = "0xBDD394", VA = "0xBDD394")]
		public static BBox3 GetBoundingBox(this IEnumerable<Triangle3> tris)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xBDD3D8", Offset = "0xBDD3D8", VA = "0xBDD3D8")]
		public static BBox3 GetBoundingBox(this IEnumerable<Triangle3> tris, float padding)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xBDD844", Offset = "0xBDD844", VA = "0xBDD844")]
		public static BBox3 GetBoundingBox(this IEnumerable<Vector3> vecs)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xBDD79C", Offset = "0xBDD79C", VA = "0xBDD79C")]
		private static void ApplyVertexToBounds(ref Vector3 v, ref BBox3 b)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xBDD818", Offset = "0xBDD818", VA = "0xBDD818")]
		private static void ApplyPaddingToBounds(float pad, ref BBox3 b)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C9")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C06C", Offset = "0x50C06C")]
	public struct Vector2 : IEquatable<Vector2>
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string listSeparator;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Vector2 UnitX;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2 UnitY;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector2 Zero;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Vector2 One;

		[Token(Token = "0x17000243")]
		public float Length
		{
			[Token(Token = "0x600106C")]
			[Address(RVA = "0xBE8940", Offset = "0xBE8940", VA = "0xBE8940")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000244")]
		public float LengthSquared
		{
			[Token(Token = "0x600106D")]
			[Address(RVA = "0xBE89D4", Offset = "0xBE89D4", VA = "0xBE89D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000245")]
		public Vector2 PerpendicularRight
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0xBE89E8", Offset = "0xBE89E8", VA = "0xBE89E8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000246")]
		public Vector2 PerpendicularLeft
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0xBE89F4", Offset = "0xBE89F4", VA = "0xBE89F4")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000247")]
		public float Item
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xBE8A00", Offset = "0xBE8A00", VA = "0xBE8A00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0xBE8A9C", Offset = "0xBE8A9C", VA = "0xBE8A9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public Vector2 Yx
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xBE93FC", Offset = "0xBE93FC", VA = "0xBE93FC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001093")]
			[Address(RVA = "0xBE9404", Offset = "0xBE9404", VA = "0xBE9404")]
			set
			{
			}
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xBE8920", Offset = "0xBE8920", VA = "0xBE8920")]
		public Vector2(float value)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xBE8928", Offset = "0xBE8928", VA = "0xBE8928")]
		public Vector2(float x, float y)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xBE8930", Offset = "0xBE8930", VA = "0xBE8930")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518490", Offset = "0x518490")]
		public Vector2(Vector2 v)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xBE8938", Offset = "0xBE8938", VA = "0xBE8938")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5184A0", Offset = "0x5184A0")]
		public Vector2(Vector3 v)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xBE8B38", Offset = "0xBE8B38", VA = "0xBE8B38")]
		public Vector2 Normalized()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xBE8B7C", Offset = "0xBE8B7C", VA = "0xBE8B7C")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xBE8BB0", Offset = "0xBE8BB0", VA = "0xBE8BB0")]
		public static Vector2 Add(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xBE8C30", Offset = "0xBE8C30", VA = "0xBE8C30")]
		public static void Add(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xBE8C44", Offset = "0xBE8C44", VA = "0xBE8C44")]
		public static Vector2 Subtract(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xBE8CC4", Offset = "0xBE8CC4", VA = "0xBE8CC4")]
		public static void Subtract(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xBE8CD8", Offset = "0xBE8CD8", VA = "0xBE8CD8")]
		public static Vector2 Multiply(Vector2 vector, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xBE8D54", Offset = "0xBE8D54", VA = "0xBE8D54")]
		public static void Multiply(ref Vector2 vector, float scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xBE8D64", Offset = "0xBE8D64", VA = "0xBE8D64")]
		public static Vector2 Multiply(Vector2 vector, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xBE8DE4", Offset = "0xBE8DE4", VA = "0xBE8DE4")]
		public static void Multiply(ref Vector2 vector, ref Vector2 scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xBE8DF8", Offset = "0xBE8DF8", VA = "0xBE8DF8")]
		public static Vector2 Divide(Vector2 vector, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xBE8E7C", Offset = "0xBE8E7C", VA = "0xBE8E7C")]
		public static void Divide(ref Vector2 vector, float scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xBE8F04", Offset = "0xBE8F04", VA = "0xBE8F04")]
		public static Vector2 Divide(Vector2 vector, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xBE8F84", Offset = "0xBE8F84", VA = "0xBE8F84")]
		public static void Divide(ref Vector2 vector, ref Vector2 scale, out Vector2 result)
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xBE8F98", Offset = "0xBE8F98", VA = "0xBE8F98")]
		public static Vector2 ComponentMin(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xBE8FAC", Offset = "0xBE8FAC", VA = "0xBE8FAC")]
		public static void ComponentMin(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xBE8FD8", Offset = "0xBE8FD8", VA = "0xBE8FD8")]
		public static Vector2 ComponentMax(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xBE8FEC", Offset = "0xBE8FEC", VA = "0xBE8FEC")]
		public static void ComponentMax(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xBE9018", Offset = "0xBE9018", VA = "0xBE9018")]
		public static Vector2 Min(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xBE9040", Offset = "0xBE9040", VA = "0xBE9040")]
		public static Vector2 Max(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xBE9068", Offset = "0xBE9068", VA = "0xBE9068")]
		public static Vector2 Clamp(Vector2 vec, Vector2 min, Vector2 max)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xBE90A4", Offset = "0xBE90A4", VA = "0xBE90A4")]
		public static void Clamp(ref Vector2 vec, ref Vector2 min, ref Vector2 max, out Vector2 result)
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xBE90F8", Offset = "0xBE90F8", VA = "0xBE90F8")]
		public static Vector2 Normalize(Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xBE913C", Offset = "0xBE913C", VA = "0xBE913C")]
		public static void Normalize(ref Vector2 vec, out Vector2 result)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xBE9180", Offset = "0xBE9180", VA = "0xBE9180")]
		public static float Dot(Vector2 left, Vector2 right)
		{
			return default(float);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xBE9190", Offset = "0xBE9190", VA = "0xBE9190")]
		public static void Dot(ref Vector2 left, ref Vector2 right, out float result)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xBE91AC", Offset = "0xBE91AC", VA = "0xBE91AC")]
		public static float PerpDot(Vector2 left, Vector2 right)
		{
			return default(float);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xBE91BC", Offset = "0xBE91BC", VA = "0xBE91BC")]
		public static void PerpDot(ref Vector2 left, ref Vector2 right, out float result)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xBE91D8", Offset = "0xBE91D8", VA = "0xBE91D8")]
		public static Vector2 Lerp(Vector2 a, Vector2 b, float blend)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xBE91F4", Offset = "0xBE91F4", VA = "0xBE91F4")]
		public static void Lerp(ref Vector2 a, ref Vector2 b, float blend, out Vector2 result)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xBE9228", Offset = "0xBE9228", VA = "0xBE9228")]
		public static Vector2 BaryCentric(Vector2 a, Vector2 b, Vector2 c, float u, float v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xBE9318", Offset = "0xBE9318", VA = "0xBE9318")]
		public static void BaryCentric(ref Vector2 a, ref Vector2 b, ref Vector2 c, float u, float v, out Vector2 result)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xBE930C", Offset = "0xBE930C", VA = "0xBE930C")]
		public static Vector2 operator +(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xBE92F0", Offset = "0xBE92F0", VA = "0xBE92F0")]
		public static Vector2 operator -(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xBE940C", Offset = "0xBE940C", VA = "0xBE940C")]
		public static Vector2 operator -(Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xBE9418", Offset = "0xBE9418", VA = "0xBE9418")]
		public static Vector2 operator *(Vector2 vec, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xBE92FC", Offset = "0xBE92FC", VA = "0xBE92FC")]
		public static Vector2 operator *(float scale, Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xBE9424", Offset = "0xBE9424", VA = "0xBE9424")]
		public static Vector2 operator *(Vector2 vec, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xBE9430", Offset = "0xBE9430", VA = "0xBE9430")]
		public static Vector2 operator /(Vector2 vec, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xBE9444", Offset = "0xBE9444", VA = "0xBE9444")]
		public static bool operator ==(Vector2 left, Vector2 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xBE9480", Offset = "0xBE9480", VA = "0xBE9480")]
		public static bool operator !=(Vector2 left, Vector2 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xBE9498", Offset = "0xBE9498", VA = "0xBE9498", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xBE9578", Offset = "0xBE9578", VA = "0xBE9578", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xBE95B0", Offset = "0xBE95B0", VA = "0xBE95B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xBE945C", Offset = "0xBE945C", VA = "0xBE945C", Slot = "4")]
		public bool Equals(Vector2 other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20002CA")]
	public struct Vector2i : IEquatable<Vector2i>
	{
		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2i Min;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Vector2i Max;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2i Zero;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xBE9DEC", Offset = "0xBE9DEC", VA = "0xBE9DEC")]
		public Vector2i(int x, int y)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xBE9DF4", Offset = "0xBE9DF4", VA = "0xBE9DF4")]
		public static bool operator ==(Vector2i left, Vector2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xBE9E3C", Offset = "0xBE9E3C", VA = "0xBE9E3C")]
		public static bool operator !=(Vector2i left, Vector2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xBE9EC0", Offset = "0xBE9EC0", VA = "0xBE9EC0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xBE9F30", Offset = "0xBE9F30", VA = "0xBE9F30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xBEA128", Offset = "0xBEA128", VA = "0xBEA128", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xBE9E14", Offset = "0xBE9E14", VA = "0xBE9E14", Slot = "4")]
		public bool Equals(Vector2i other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20002CB")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C0A4", Offset = "0x50C0A4")]
	public struct Vector3 : IEquatable<Vector3>
	{
		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 UnitX;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 UnitY;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector3 UnitZ;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly Vector3 Zero;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Vector3 One;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string listSeparator;

		[Token(Token = "0x17000249")]
		public float Item
		{
			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xBEA2CC", Offset = "0xBEA2CC", VA = "0xBEA2CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xBEA378", Offset = "0xBEA378", VA = "0xBEA378")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public Vector3 Xzy
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xBEB2FC", Offset = "0xBEB2FC", VA = "0xBEB2FC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xBEB308", Offset = "0xBEB308", VA = "0xBEB308")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public Vector3 Yxz
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xBEB314", Offset = "0xBEB314", VA = "0xBEB314")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xBEB320", Offset = "0xBEB320", VA = "0xBEB320")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public Vector3 Yzx
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xBEB32C", Offset = "0xBEB32C", VA = "0xBEB32C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xBEB338", Offset = "0xBEB338", VA = "0xBEB338")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public Vector3 Zxy
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xBEB344", Offset = "0xBEB344", VA = "0xBEB344")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xBEB350", Offset = "0xBEB350", VA = "0xBEB350")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public Vector3 Zyx
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xBEB35C", Offset = "0xBEB35C", VA = "0xBEB35C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xBEB368", Offset = "0xBEB368", VA = "0xBEB368")]
			set
			{
			}
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xBEA29C", Offset = "0xBEA29C", VA = "0xBEA29C")]
		public Vector3(float value)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xBEA2A8", Offset = "0xBEA2A8", VA = "0xBEA2A8")]
		public Vector3(float x, float y, float z)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xBEA2B4", Offset = "0xBEA2B4", VA = "0xBEA2B4")]
		public Vector3(Vector3 v)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xBEA2C0", Offset = "0xBEA2C0", VA = "0xBEA2C0")]
		public void Set(float x, float y, float z)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xBEA424", Offset = "0xBEA424", VA = "0xBEA424")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5184B0", Offset = "0x5184B0")]
		public void Add(Vector3 right)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xBEA444", Offset = "0xBEA444", VA = "0xBEA444")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5184E8", Offset = "0x5184E8")]
		public void Add(ref Vector3 right)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xBEA474", Offset = "0xBEA474", VA = "0xBEA474")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518520", Offset = "0x518520")]
		public void Sub(Vector3 right)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xBEA494", Offset = "0xBEA494", VA = "0xBEA494")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518558", Offset = "0x518558")]
		public void Sub(ref Vector3 right)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xBEA4C4", Offset = "0xBEA4C4", VA = "0xBEA4C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518590", Offset = "0x518590")]
		public void Mult(float f)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xBEA4E0", Offset = "0xBEA4E0", VA = "0xBEA4E0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5185C8", Offset = "0x5185C8")]
		public void Div(float f)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xBDC448", Offset = "0xBDC448", VA = "0xBDC448")]
		public float Length()
		{
			return default(float);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xBEA504", Offset = "0xBEA504", VA = "0xBEA504")]
		public float LengthSquared()
		{
			return default(float);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xBEA524", Offset = "0xBEA524", VA = "0xBEA524")]
		public Vector3 Normalized()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xBEA574", Offset = "0xBEA574", VA = "0xBEA574")]
		public void Normalize()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xBEA5B4", Offset = "0xBEA5B4", VA = "0xBEA5B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518600", Offset = "0x518600")]
		public void Scale(float sx, float sy, float sz)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xBEA5D4", Offset = "0xBEA5D4", VA = "0xBEA5D4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518638", Offset = "0x518638")]
		public void Scale(Vector3 scale)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xBEA5F4", Offset = "0xBEA5F4", VA = "0xBEA5F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518670", Offset = "0x518670")]
		public void Scale(ref Vector3 scale)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xBEA624", Offset = "0xBEA624", VA = "0xBEA624")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5186A8", Offset = "0x5186A8")]
		public static Vector3 Sub(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xBEA634", Offset = "0xBEA634", VA = "0xBEA634")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5186E0", Offset = "0x5186E0")]
		public static void Sub(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xBEA668", Offset = "0xBEA668", VA = "0xBEA668")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518718", Offset = "0x518718")]
		public static Vector3 Mult(Vector3 a, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xBEA678", Offset = "0xBEA678", VA = "0xBEA678")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518750", Offset = "0x518750")]
		public static void Mult(ref Vector3 a, float f, out Vector3 result)
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xBEA6A0", Offset = "0xBEA6A0", VA = "0xBEA6A0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x518788", Offset = "0x518788")]
		public static Vector3 Div(Vector3 a, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xBEA6B8", Offset = "0xBEA6B8", VA = "0xBEA6B8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5187C0", Offset = "0x5187C0")]
		public static void Div(ref Vector3 a, float f, out Vector3 result)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xBEA6E8", Offset = "0xBEA6E8", VA = "0xBEA6E8")]
		public static Vector3 Add(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xBEA77C", Offset = "0xBEA77C", VA = "0xBEA77C")]
		public static void Add(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xBEA7A0", Offset = "0xBEA7A0", VA = "0xBEA7A0")]
		public static Vector3 Subtract(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xBDC040", Offset = "0xBDC040", VA = "0xBDC040")]
		public static void Subtract(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xBEA834", Offset = "0xBEA834", VA = "0xBEA834")]
		public static Vector3 Multiply(Vector3 vector, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xBEA8B8", Offset = "0xBEA8B8", VA = "0xBEA8B8")]
		public static void Multiply(ref Vector3 vector, float scale, out Vector3 result)
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xBEA8D4", Offset = "0xBEA8D4", VA = "0xBEA8D4")]
		public static Vector3 Multiply(Vector3 vector, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xBEA968", Offset = "0xBEA968", VA = "0xBEA968")]
		public static void Multiply(ref Vector3 vector, ref Vector3 scale, out Vector3 result)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xBEA98C", Offset = "0xBEA98C", VA = "0xBEA98C")]
		public static Vector3 Divide(Vector3 vector, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xBEAA18", Offset = "0xBEAA18", VA = "0xBEAA18")]
		public static void Divide(ref Vector3 vector, float scale, out Vector3 result)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xBEAAAC", Offset = "0xBEAAAC", VA = "0xBEAAAC")]
		public static Vector3 Divide(Vector3 vector, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xBEAB40", Offset = "0xBEAB40", VA = "0xBEAB40")]
		public static void Divide(ref Vector3 vector, ref Vector3 scale, out Vector3 result)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xBEAB64", Offset = "0xBEAB64", VA = "0xBEAB64")]
		public static Vector3 ComponentMin(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xBEAB80", Offset = "0xBEAB80", VA = "0xBEAB80")]
		public static void ComponentMin(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xBEABC0", Offset = "0xBEABC0", VA = "0xBEABC0")]
		public static Vector3 ComponentMax(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xBEABDC", Offset = "0xBEABDC", VA = "0xBEABDC")]
		public static void ComponentMax(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xBEAC1C", Offset = "0xBEAC1C", VA = "0xBEAC1C")]
		public static Vector3 Min(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xBEAC58", Offset = "0xBEAC58", VA = "0xBEAC58")]
		public static Vector3 Max(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xBEAC94", Offset = "0xBEAC94", VA = "0xBEAC94")]
		public static Vector3 Clamp(Vector3 vec, Vector3 min, Vector3 max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xBEACF0", Offset = "0xBEACF0", VA = "0xBEACF0")]
		public static void Clamp(ref Vector3 vec, ref Vector3 min, ref Vector3 max, out Vector3 result)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xBDC740", Offset = "0xBDC740", VA = "0xBDC740")]
		public static Vector3 Normalize(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xBEAD6C", Offset = "0xBEAD6C", VA = "0xBEAD6C")]
		public static void Normalize(ref Vector3 vec, out Vector3 result)
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xBEADBC", Offset = "0xBEADBC", VA = "0xBEADBC")]
		public static float Dot(Vector3 left, Vector3 right)
		{
			return default(float);
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xBEADD4", Offset = "0xBEADD4", VA = "0xBEADD4")]
		public static void Dot(ref Vector3 left, ref Vector3 right, out float result)
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xBDC39C", Offset = "0xBDC39C", VA = "0xBDC39C")]
		public static Vector3 Cross(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xBEAE00", Offset = "0xBEAE00", VA = "0xBEAE00")]
		public static void Cross(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xBEAE40", Offset = "0xBEAE40", VA = "0xBEAE40")]
		public static Vector3 Lerp(Vector3 a, Vector3 b, float blend)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xBEAE68", Offset = "0xBEAE68", VA = "0xBEAE68")]
		public static void Lerp(ref Vector3 a, ref Vector3 b, float blend, out Vector3 result)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xBEAEB4", Offset = "0xBEAEB4", VA = "0xBEAEB4")]
		public static Vector3 BaryCentric(Vector3 a, Vector3 b, Vector3 c, float u, float v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xBEAFE4", Offset = "0xBEAFE4", VA = "0xBEAFE4")]
		public static void BaryCentric(ref Vector3 a, ref Vector3 b, ref Vector3 c, float u, float v, out Vector3 result)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xBEB0F4", Offset = "0xBEB0F4", VA = "0xBEB0F4")]
		public static float CalculateAngle(Vector3 first, Vector3 second)
		{
			return default(float);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xBEB200", Offset = "0xBEB200", VA = "0xBEB200")]
		public static void CalculateAngle(ref Vector3 first, ref Vector3 second, out float result)
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xBDC640", Offset = "0xBDC640", VA = "0xBDC640")]
		public static Vector3 operator +(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xBEAFC0", Offset = "0xBEAFC0", VA = "0xBEAFC0")]
		public static Vector3 operator -(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xBEB374", Offset = "0xBEB374", VA = "0xBEB374")]
		public static Vector3 operator -(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xBDC630", Offset = "0xBDC630", VA = "0xBDC630")]
		public static Vector3 operator *(Vector3 vec, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xBEAFD0", Offset = "0xBEAFD0", VA = "0xBEAFD0")]
		public static Vector3 operator *(float scale, Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xBEB384", Offset = "0xBEB384", VA = "0xBEB384")]
		public static Vector3 operator *(Vector3 vec, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xBEB394", Offset = "0xBEB394", VA = "0xBEB394")]
		public static Vector3 operator /(Vector3 vec, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xBEB3AC", Offset = "0xBEB3AC", VA = "0xBEB3AC")]
		public static bool operator ==(Vector3 left, Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xBEB3CC", Offset = "0xBEB3CC", VA = "0xBEB3CC")]
		public static bool operator !=(Vector3 left, Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xBDCE34", Offset = "0xBDCE34", VA = "0xBDCE34", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xBDCB74", Offset = "0xBDCB74", VA = "0xBDCB74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xBEB3EC", Offset = "0xBEB3EC", VA = "0xBEB3EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xBDC9DC", Offset = "0xBDC9DC", VA = "0xBDC9DC", Slot = "4")]
		public bool Equals(Vector3 other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002CC")]
	internal static class Vector3Extensions
	{
		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x7CF4F4", Offset = "0x7CF4F4", VA = "0x7CF4F4")]
		internal static void ComponentMin(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x7CF5B0", Offset = "0x7CF5B0", VA = "0x7CF5B0")]
		internal static void ComponentMax(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x7CF66C", Offset = "0x7CF66C", VA = "0x7CF66C")]
		internal static float Distance2D(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x7CF6AC", Offset = "0x7CF6AC", VA = "0x7CF6AC")]
		internal static void Distance2D(ref Vector3 a, ref Vector3 b, out float dist)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x7CF75C", Offset = "0x7CF75C", VA = "0x7CF75C")]
		internal static void Dot2D(ref Vector3 left, ref Vector3 right, out float result)
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x7CF780", Offset = "0x7CF780", VA = "0x7CF780")]
		internal static float Dot2D(ref Vector3 left, ref Vector3 right)
		{
			return default(float);
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x7CF7A0", Offset = "0x7CF7A0", VA = "0x7CF7A0")]
		internal static float Cross2D(Vector3 p1, Vector3 p2, Vector3 p3)
		{
			return default(float);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x7CF7C8", Offset = "0x7CF7C8", VA = "0x7CF7C8")]
		internal static void Cross2D(ref Vector3 p1, ref Vector3 p2, ref Vector3 p3, out float result)
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x7CF804", Offset = "0x7CF804", VA = "0x7CF804")]
		internal static void PerpDotXZ(ref Vector3 a, ref Vector3 b, out float result)
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x7CF828", Offset = "0x7CF828", VA = "0x7CF828")]
		internal static void CalculateSlopeAngle(ref Vector3 vec, out float angle)
		{
		}
	}
}
namespace SharpNav.Crowds
{
	[Token(Token = "0x20002CD")]
	public class Agent : IEquatable<Agent>
	{
		[Token(Token = "0x4000F23")]
		private const int AgentMaxCorners = 4;

		[Token(Token = "0x4000F24")]
		public const int AgentMaxNeighbors = 6;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool active;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AgentState state;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool partial;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PathCorridor corridor;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LocalBoundary boundary;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float topologyOptTime;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrowdNeighbor[] neighbors;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int numNeis;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float DesiredSpeed;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SharpNav.Geometry.Vector3 currentPos;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SharpNav.Geometry.Vector3 Disp;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharpNav.Geometry.Vector3 DesiredVel;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public SharpNav.Geometry.Vector3 NVel;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SharpNav.Geometry.Vector3 Vel;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public AgentParams Parameters;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SharpNav.Geometry.Vector3[] CornerVerts;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int[] CornerFlags;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int[] CornerPolys;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int numCorners;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private TargetState targetState;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int TargetRef;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private SharpNav.Geometry.Vector3 targetPos;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int TargetPathqRef;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public bool TargetReplan;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float TargetReplanTime;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int agentIndex;

		[Token(Token = "0x1700024F")]
		public int AgentIndex
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x9AE98C", Offset = "0x9AE98C", VA = "0x9AE98C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000250")]
		public bool IsActive
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x9AEB04", Offset = "0x9AEB04", VA = "0x9AEB04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x9AEB0C", Offset = "0x9AEB0C", VA = "0x9AEB0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public bool IsPartial
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x9AEB18", Offset = "0x9AEB18", VA = "0x9AEB18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600110A")]
			[Address(RVA = "0x9AEB20", Offset = "0x9AEB20", VA = "0x9AEB20")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public AgentState State
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x9AEB2C", Offset = "0x9AEB2C", VA = "0x9AEB2C")]
			get
			{
				return default(AgentState);
			}
			[Token(Token = "0x600110C")]
			[Address(RVA = "0x9AEB34", Offset = "0x9AEB34", VA = "0x9AEB34")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public SharpNav.Geometry.Vector3 Position
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0x9AEB3C", Offset = "0x9AEB3C", VA = "0x9AEB3C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x600110E")]
			[Address(RVA = "0x9AEB48", Offset = "0x9AEB48", VA = "0x9AEB48")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public LocalBoundary Boundary
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0x9AEB54", Offset = "0x9AEB54", VA = "0x9AEB54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000255")]
		public PathCorridor Corridor
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0x9AEB5C", Offset = "0x9AEB5C", VA = "0x9AEB5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000256")]
		public CrowdNeighbor[] Neighbors
		{
			[Token(Token = "0x6001111")]
			[Address(RVA = "0x9AEB64", Offset = "0x9AEB64", VA = "0x9AEB64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000257")]
		public int NeighborCount
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0x9AEB6C", Offset = "0x9AEB6C", VA = "0x9AEB6C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x9AEB74", Offset = "0x9AEB74", VA = "0x9AEB74")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public TargetState TargetState
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0x9AEB7C", Offset = "0x9AEB7C", VA = "0x9AEB7C")]
			get
			{
				return default(TargetState);
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0x9AEB84", Offset = "0x9AEB84", VA = "0x9AEB84")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public SharpNav.Geometry.Vector3 TargetPosition
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x9AEB8C", Offset = "0x9AEB8C", VA = "0x9AEB8C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x9AEB98", Offset = "0x9AEB98", VA = "0x9AEB98")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		public int CornerCount
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x9AEBA4", Offset = "0x9AEBA4", VA = "0x9AEBA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001119")]
			[Address(RVA = "0x9AEBAC", Offset = "0x9AEBAC", VA = "0x9AEBAC")]
			set
			{
			}
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x9AE994", Offset = "0x9AE994", VA = "0x9AE994")]
		public Agent(int maxPath, int agentIndex)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x9AEBB4", Offset = "0x9AEBB4", VA = "0x9AEBB4")]
		public void Integrate(float dt)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x9AEDE4", Offset = "0x9AEDE4", VA = "0x9AEDE4")]
		public void Reset(int reference, SharpNav.Geometry.Vector3 nearest)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x9AEF08", Offset = "0x9AEF08", VA = "0x9AEF08")]
		public void RequestMoveTargetReplan(int reference, SharpNav.Geometry.Vector3 pos)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x9AEF30", Offset = "0x9AEF30", VA = "0x9AEF30")]
		public bool RequestMoveTarget(int reference, SharpNav.Geometry.Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x9AEF5C", Offset = "0x9AEF5C", VA = "0x9AEF5C")]
		public void RequestMoveVelocity(SharpNav.Geometry.Vector3 vel)
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x9AEF7C", Offset = "0x9AEF7C", VA = "0x9AEF7C")]
		public void ResetMoveTarget()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x9AEFDC", Offset = "0x9AEFDC", VA = "0x9AEFDC")]
		public void UpdateAgentParameters(AgentParams parameters)
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x9AEFF4", Offset = "0x9AEFF4", VA = "0x9AEFF4")]
		public static bool operator ==(Agent left, Agent right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x9AF040", Offset = "0x9AF040", VA = "0x9AF040")]
		public static bool operator !=(Agent left, Agent right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x9AF020", Offset = "0x9AF020", VA = "0x9AF020", Slot = "4")]
		public bool Equals(Agent other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x9AF06C", Offset = "0x9AF06C", VA = "0x9AF06C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x9AF104", Offset = "0x9AF104", VA = "0x9AF104", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x9AF10C", Offset = "0x9AF10C", VA = "0x9AF10C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002CE")]
	public class Crowd
	{
		[Token(Token = "0x4000F3F")]
		private const int AgentMaxObstacleAvoidanceParams = 8;

		[Token(Token = "0x4000F40")]
		private const int AgentMaxNeighbours = 6;

		[Token(Token = "0x4000F41")]
		private const int AgentMaxCorners = 4;

		[Token(Token = "0x4000F42")]
		private const int MaxItersPerUpdate = 100;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int maxAgents;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Agent[] agents;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AgentAnimation[] agentAnims;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PathQueue pathq;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ObstacleAvoidanceQuery.ObstacleAvoidanceParams[] obstacleQueryParams;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObstacleAvoidanceQuery obstacleQuery;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProximityGrid<Agent> grid;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] pathResult;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int maxPathResult;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SharpNav.Geometry.Vector3 ext;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int velocitySampleCount;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NavMeshQuery navQuery;

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xA4DB2C", Offset = "0xA4DB2C", VA = "0xA4DB2C")]
		public Crowd(int maxAgents, float maxAgentRadius, ref TiledNavMesh navMesh)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xA4E020", Offset = "0xA4E020", VA = "0xA4E020")]
		public ObstacleAvoidanceQuery.ObstacleAvoidanceParams GetObstacleAvoidanceParams(int idx)
		{
			return default(ObstacleAvoidanceQuery.ObstacleAvoidanceParams);
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xA4E088", Offset = "0xA4E088", VA = "0xA4E088")]
		public void SetObstacleAvoidanceParams(int idx, ObstacleAvoidanceQuery.ObstacleAvoidanceParams parameters)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xA4E104", Offset = "0xA4E104", VA = "0xA4E104")]
		public int GetAgentCount()
		{
			return default(int);
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xA4E10C", Offset = "0xA4E10C", VA = "0xA4E10C")]
		public Agent GetAgent(int idx)
		{
			return null;
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xA4E160", Offset = "0xA4E160", VA = "0xA4E160")]
		public int AddAgent(SharpNav.Geometry.Vector3 pos, AgentParams parameters)
		{
			return default(int);
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xA4E294", Offset = "0xA4E294", VA = "0xA4E294")]
		public bool RemoveAgent(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xA4E2F4", Offset = "0xA4E2F4", VA = "0xA4E2F4")]
		public int GetActiveAgents(Agent[] agents)
		{
			return default(int);
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xA4E3D4", Offset = "0xA4E3D4", VA = "0xA4E3D4")]
		public int GetAgentIndex(Agent agent)
		{
			return default(int);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xA4E458", Offset = "0xA4E458", VA = "0xA4E458")]
		public void Update(float dt)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xA4FED4", Offset = "0xA4FED4", VA = "0xA4FED4")]
		public void UpdateMoveRequest()
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xA50974", Offset = "0xA50974", VA = "0xA50974")]
		public void UpdateTopologyOptimization(Agent[] agents, int numAgents, float dt)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xA4FBC4", Offset = "0xA4FBC4", VA = "0xA4FBC4")]
		public void CheckPathValidity(Agent[] agents, int agentCount, float dt)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xA50D6C", Offset = "0xA50D6C", VA = "0xA50D6C")]
		public bool OverOffmeshConnection(Agent ag, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xA50E1C", Offset = "0xA50E1C", VA = "0xA50E1C")]
		public void CalcSmoothSteerDirection(Agent ag, ref SharpNav.Geometry.Vector3 dir)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xA510A0", Offset = "0xA510A0", VA = "0xA510A0")]
		public void CalcStraightSteerDirection(Agent ag, ref SharpNav.Geometry.Vector3 dir)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xA511E8", Offset = "0xA511E8", VA = "0xA511E8")]
		public float GetDistanceToGoal(Agent ag, float range)
		{
			return default(float);
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xA50B08", Offset = "0xA50B08", VA = "0xA50B08")]
		public int GetNeighbours(SharpNav.Geometry.Vector3 pos, float height, float range, Agent skip, CrowdNeighbor[] result, int maxResult, Agent[] agents, ProximityGrid<Agent> grid)
		{
			return default(int);
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xA517C8", Offset = "0xA517C8", VA = "0xA517C8")]
		public int AddNeighbour(Agent agent, float dist, CrowdNeighbor[] neis, int nneis, int maxNeis)
		{
			return default(int);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xA512F8", Offset = "0xA512F8", VA = "0xA512F8")]
		public int AddToPathQueue(Agent newag, Agent[] agents, int numAgents, int maxAgents)
		{
			return default(int);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xA51560", Offset = "0xA51560", VA = "0xA51560")]
		public int AddToOptQueue(Agent newag, Agent[] agents, int numAgents, int maxAgents)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002CF")]
	public struct CrowdNeighbor
	{
		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Index;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;
	}
	[Token(Token = "0x20002D0")]
	public struct AgentParams
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Radius;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Height;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float MaxAcceleration;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float MaxSpeed;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float CollisionQueryRange;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float PathOptimizationRange;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SeparationWeight;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UpdateFlags UpdateFlags;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte ObstacleAvoidanceType;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public byte QueryFilterType;
	}
	[Token(Token = "0x20002D1")]
	public struct AgentAnimation
	{
		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x510FF8", Offset = "0x510FF8")]
		private bool <Active>k__BackingField;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SharpNav.Geometry.Vector3 InitPos;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SharpNav.Geometry.Vector3 StartPos;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SharpNav.Geometry.Vector3 EndPos;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int PolyRef;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float T;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float TMax;

		[Token(Token = "0x1700025B")]
		public bool Active
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0x9AF114", Offset = "0x9AF114", VA = "0x9AF114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5187F8", Offset = "0x5187F8")]
			readonly get
			{
				return default(bool);
			}
			[Token(Token = "0x600113D")]
			[Address(RVA = "0x9AF11C", Offset = "0x9AF11C", VA = "0x9AF11C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518830", Offset = "0x518830")]
			set
			{
			}
		}
	}
	[Token(Token = "0x20002D2")]
	[Flags]
	public enum AgentState
	{
		[Token(Token = "0x4000F63")]
		Invalid = 0,
		[Token(Token = "0x4000F64")]
		Walking = 1,
		[Token(Token = "0x4000F65")]
		Offmesh = 2
	}
	[Token(Token = "0x20002D3")]
	public class LocalBoundary
	{
		[Token(Token = "0x20002D4")]
		public struct Segment
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Start;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 End;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Dist;
		}

		[Token(Token = "0x4000F66")]
		private const int MaxLocalSegs = 8;

		[Token(Token = "0x4000F67")]
		private const int MaxLocalPolys = 16;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SharpNav.Geometry.Vector3 center;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Segment[] segs;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int segCount;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] polys;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int numPolys;

		[Token(Token = "0x1700025C")]
		public SharpNav.Geometry.Vector3 Center
		{
			[Token(Token = "0x600113F")]
			[Address(RVA = "0x9E406C", Offset = "0x9E406C", VA = "0x9E406C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x1700025D")]
		public Segment[] Segs
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x9E4078", Offset = "0x9E4078", VA = "0x9E4078")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025E")]
		public int SegCount
		{
			[Token(Token = "0x6001141")]
			[Address(RVA = "0x9E4080", Offset = "0x9E4080", VA = "0x9E4080")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x9E3F2C", Offset = "0x9E3F2C", VA = "0x9E3F2C")]
		public LocalBoundary()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x9E400C", Offset = "0x9E400C", VA = "0x9E400C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x9E4088", Offset = "0x9E4088", VA = "0x9E4088")]
		public void AddSegment(float dist, Segment s)
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x9E42DC", Offset = "0x9E42DC", VA = "0x9E42DC")]
		public void Update(int reference, SharpNav.Geometry.Vector3 pos, float collisionQueryRange, NavMeshQuery navquery)
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x9E4554", Offset = "0x9E4554", VA = "0x9E4554")]
		public bool IsValid(NavMeshQuery navquery)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D5")]
	public class ObstacleAvoidanceQuery
	{
		[Token(Token = "0x20002D6")]
		private struct ObstacleCircle
		{
			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Position;

			[Token(Token = "0x4000F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 Vel;

			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SharpNav.Geometry.Vector3 DesiredVel;

			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float Radius;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SharpNav.Geometry.Vector3 Dp;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public SharpNav.Geometry.Vector3 Np;
		}

		[Token(Token = "0x20002D7")]
		private struct ObstacleSegment
		{
			[Token(Token = "0x4000F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 P;

			[Token(Token = "0x4000F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 Q;

			[Token(Token = "0x4000F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool Touch;
		}

		[Token(Token = "0x20002D8")]
		public struct ObstacleAvoidanceParams
		{
			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float VelBias;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float WeightDesVel;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float WeightCurVel;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float WeightSide;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float WeightToi;

			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float HorizTime;

			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int GridSize;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int AdaptiveDivs;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int AdaptiveRings;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int AdaptiveDepth;
		}

		[Token(Token = "0x4000F70")]
		private const int MaxPatternDivs = 32;

		[Token(Token = "0x4000F71")]
		private const int MaxPatternRings = 4;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ObstacleAvoidanceParams parameters;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float invHorizTime;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float invVmax;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int maxCircles;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ObstacleCircle[] circles;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int numCircles;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int maxSegments;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ObstacleSegment[] segments;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int numSegments;

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xE9AB08", Offset = "0xE9AB08", VA = "0xE9AB08")]
		public ObstacleAvoidanceQuery(int maxCircles, int maxSegments)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xE9ABC0", Offset = "0xE9ABC0", VA = "0xE9ABC0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xE9ABCC", Offset = "0xE9ABCC", VA = "0xE9ABCC")]
		public void AddCircle(SharpNav.Geometry.Vector3 pos, float rad, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 dvel)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xE9AC98", Offset = "0xE9AC98", VA = "0xE9AC98")]
		public void AddSegment(SharpNav.Geometry.Vector3 p, SharpNav.Geometry.Vector3 q)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xE9AD20", Offset = "0xE9AD20", VA = "0xE9AD20")]
		public void Prepare(SharpNav.Geometry.Vector3 position, SharpNav.Geometry.Vector3 desiredVel)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xE9B034", Offset = "0xE9B034", VA = "0xE9B034")]
		public float ProcessSample(SharpNav.Geometry.Vector3 vcand, float cs, SharpNav.Geometry.Vector3 position, float radius, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel)
		{
			return default(float);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xE9B4A8", Offset = "0xE9B4A8", VA = "0xE9B4A8")]
		public bool SweepCircleCircle(SharpNav.Geometry.Vector3 center0, float radius0, SharpNav.Geometry.Vector3 v, SharpNav.Geometry.Vector3 center1, float radius1, ref float tmin, ref float tmax)
		{
			return default(bool);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xE9B664", Offset = "0xE9B664", VA = "0xE9B664")]
		public bool IntersectRaySegment(SharpNav.Geometry.Vector3 ap, SharpNav.Geometry.Vector3 u, SharpNav.Geometry.Vector3 bp, SharpNav.Geometry.Vector3 bq, ref float t)
		{
			return default(bool);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xE9B860", Offset = "0xE9B860", VA = "0xE9B860")]
		public int SampleVelocityGrid(SharpNav.Geometry.Vector3 pos, float rad, float vmax, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel, ref SharpNav.Geometry.Vector3 nvel, ObstacleAvoidanceParams parameters)
		{
			return default(int);
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xE9BA88", Offset = "0xE9BA88", VA = "0xE9BA88")]
		public int SampleVelocityAdaptive(SharpNav.Geometry.Vector3 position, float radius, float vmax, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel, ref SharpNav.Geometry.Vector3 nvel, ObstacleAvoidanceParams parameters)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D9")]
	public class PathCorridor
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SharpNav.Geometry.Vector3 pos;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private SharpNav.Geometry.Vector3 target;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] path;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int pathCount;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int maxPath;

		[Token(Token = "0x1700025F")]
		public SharpNav.Geometry.Vector3 Pos
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0x996080", Offset = "0x996080", VA = "0x996080")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x17000260")]
		public SharpNav.Geometry.Vector3 Target
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0x99608C", Offset = "0x99608C", VA = "0x99608C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x17000261")]
		public int[] Path
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x996098", Offset = "0x996098", VA = "0x996098")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public int PathCount
		{
			[Token(Token = "0x6001154")]
			[Address(RVA = "0x9960A0", Offset = "0x9960A0", VA = "0x9960A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x996004", Offset = "0x996004", VA = "0x996004")]
		public PathCorridor(int maxPath)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x9960A8", Offset = "0x9960A8", VA = "0x9960A8")]
		public void Reset(int reference, SharpNav.Geometry.Vector3 pos)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x9960F0", Offset = "0x9960F0", VA = "0x9960F0")]
		public void SetCorridor(SharpNav.Geometry.Vector3 target, int[] path, int npath)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x99613C", Offset = "0x99613C", VA = "0x99613C")]
		public bool MovePosition(SharpNav.Geometry.Vector3 npos, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x99653C", Offset = "0x99653C", VA = "0x99653C")]
		public int FindCorners(SharpNav.Geometry.Vector3[] cornerVerts, int[] cornerFlags, int[] cornerPolys, int maxCorners, NavMeshQuery navquery)
		{
			return default(int);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x996710", Offset = "0x996710", VA = "0x996710")]
		public bool OptimizePathTopology(NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x996A80", Offset = "0x996A80", VA = "0x996A80")]
		public void OptimizePathVisibility(SharpNav.Geometry.Vector3 next, float pathOptimizationRange, NavMeshQuery navquery)
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x996314", Offset = "0x996314", VA = "0x996314")]
		public int MergeCorridorStartMoved(int[] path, int npath, int maxPath, int[] visited, int nvisited)
		{
			return default(int);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x996884", Offset = "0x996884", VA = "0x996884")]
		public int MergeCorridorStartShortcut(int[] path, int npath, int maxPath, int[] visited, int nvisited)
		{
			return default(int);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x996CD8", Offset = "0x996CD8", VA = "0x996CD8")]
		public bool MoveOverOffmeshConnection(int offMeshConRef, int[] refs, ref SharpNav.Geometry.Vector3 startPos, ref SharpNav.Geometry.Vector3 endPos, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x996E20", Offset = "0x996E20", VA = "0x996E20")]
		public bool FixPathStart(int safeRef, SharpNav.Geometry.Vector3 safePos)
		{
			return default(bool);
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x996EE4", Offset = "0x996EE4", VA = "0x996EE4")]
		public bool IsValid(int maxLookAhead, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x996FCC", Offset = "0x996FCC", VA = "0x996FCC")]
		public int GetFirstPoly()
		{
			return default(int);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x997010", Offset = "0x997010", VA = "0x997010")]
		public int GetLastPoly()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002DA")]
	public class PathQueue
	{
		[Token(Token = "0x20002DB")]
		private struct PathQuery
		{
			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Reference;

			[Token(Token = "0x4000F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public SharpNav.Geometry.Vector3 StartPos;

			[Token(Token = "0x4000F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SharpNav.Geometry.Vector3 EndPos;

			[Token(Token = "0x4000F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int StartRef;

			[Token(Token = "0x4000F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int EndRef;

			[Token(Token = "0x4000F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int[] Path;

			[Token(Token = "0x4000FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int PathCount;

			[Token(Token = "0x4000FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Status status;

			[Token(Token = "0x4000FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int KeepAlive;
		}

		[Token(Token = "0x4000F93")]
		public const byte Invalid = 0;

		[Token(Token = "0x4000F94")]
		private const int MaxQueue = 8;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PathQuery[] queue;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int nextHandle;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int maxPathSize;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int queueHead;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NavMeshQuery navquery;

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x997060", Offset = "0x997060", VA = "0x997060")]
		public PathQueue(int maxPathSize, int maxSearchNodeCount, ref TiledNavMesh nav)
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x9971D4", Offset = "0x9971D4", VA = "0x9971D4")]
		public void Update(int maxIters)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x997338", Offset = "0x997338", VA = "0x997338")]
		public int Request(int startRef, int endRef, SharpNav.Geometry.Vector3 startPos, SharpNav.Geometry.Vector3 endPos)
		{
			return default(int);
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x9973E8", Offset = "0x9973E8", VA = "0x9973E8")]
		public Status GetRequestStatus(int reference)
		{
			return default(Status);
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x997450", Offset = "0x997450", VA = "0x997450")]
		public bool GetPathResult(int reference, int[] path, ref int pathSize, int maxPath)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002DC")]
	public enum Status
	{
		[Token(Token = "0x4000FA4")]
		Failure,
		[Token(Token = "0x4000FA5")]
		Success,
		[Token(Token = "0x4000FA6")]
		InProgress
	}
	[Token(Token = "0x20002DD")]
	public static class StatusExtensions
	{
		[Token(Token = "0x6001167")]
		[Address(RVA = "0x7FC8F4", Offset = "0x7FC8F4", VA = "0x7FC8F4")]
		public static Status ToStatus(this bool variable)
		{
			return default(Status);
		}
	}
	[Token(Token = "0x20002DE")]
	public enum TargetState
	{
		[Token(Token = "0x4000FA8")]
		None,
		[Token(Token = "0x4000FA9")]
		Failed,
		[Token(Token = "0x4000FAA")]
		Valid,
		[Token(Token = "0x4000FAB")]
		Requesting,
		[Token(Token = "0x4000FAC")]
		WaitingForQueue,
		[Token(Token = "0x4000FAD")]
		WaitingForPath,
		[Token(Token = "0x4000FAE")]
		Velocity
	}
	[Token(Token = "0x20002DF")]
	[Flags]
	public enum UpdateFlags
	{
		[Token(Token = "0x4000FB0")]
		AnticipateTurns = 1,
		[Token(Token = "0x4000FB1")]
		ObstacleAvoidance = 2,
		[Token(Token = "0x4000FB2")]
		Separation = 4,
		[Token(Token = "0x4000FB3")]
		OptimizeVis = 8,
		[Token(Token = "0x4000FB4")]
		OptimizeTopo = 0x10
	}
}
namespace SharpNav.Collections
{
	[Token(Token = "0x20002E0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C10C", Offset = "0x50C10C")]
	public class BVTree
	{
		[Token(Token = "0x20002E1")]
		public struct Node
		{
			[Token(Token = "0x20002E2")]
			public class CompareX : IComparer<Node>
			{
				[Token(Token = "0x600116F")]
				[Address(RVA = "0xA49194", Offset = "0xA49194", VA = "0xA49194", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x6001170")]
				[Address(RVA = "0xA491B4", Offset = "0xA491B4", VA = "0xA491B4")]
				public CompareX()
				{
				}
			}

			[Token(Token = "0x20002E3")]
			public class CompareY : IComparer<Node>
			{
				[Token(Token = "0x6001171")]
				[Address(RVA = "0xA491BC", Offset = "0xA491BC", VA = "0xA491BC", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x6001172")]
				[Address(RVA = "0xA491DC", Offset = "0xA491DC", VA = "0xA491DC")]
				public CompareY()
				{
				}
			}

			[Token(Token = "0x20002E4")]
			public class CompareZ : IComparer<Node>
			{
				[Token(Token = "0x6001173")]
				[Address(RVA = "0xA491E4", Offset = "0xA491E4", VA = "0xA491E4", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x6001174")]
				[Address(RVA = "0xA49204", Offset = "0xA49204", VA = "0xA49204")]
				public CompareZ()
				{
				}
			}

			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PolyBounds Bounds;

			[Token(Token = "0x4000FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Index;
		}

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Node.CompareX XComparer;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Node.CompareY YComparer;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Node.CompareZ ZComparer;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node[] nodes;

		[Token(Token = "0x17000263")]
		public int Count
		{
			[Token(Token = "0x6001169")]
			[Address(RVA = "0x9BD678", Offset = "0x9BD678", VA = "0x9BD678")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000264")]
		public Node Item
		{
			[Token(Token = "0x600116A")]
			[Address(RVA = "0x9BD694", Offset = "0x9BD694", VA = "0x9BD694")]
			get
			{
				return default(Node);
			}
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x9BD02C", Offset = "0x9BD02C", VA = "0x9BD02C")]
		public BVTree(PolyVertex[] verts, PolyMesh.Polygon[] polys, int nvp, float cellSize, float cellHeight)
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x9BD6E0", Offset = "0x9BD6E0", VA = "0x9BD6E0")]
		private static void CalcExtends(List<Node> items, int minIndex, int maxIndex, out PolyBounds bounds)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x9BD818", Offset = "0x9BD818", VA = "0x9BD818")]
		private static int LongestAxis(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x9BD380", Offset = "0x9BD380", VA = "0x9BD380")]
		private int Subdivide(List<Node> items, int minIndex, int maxIndex, int curNode)
		{
			return default(int);
		}
	}
}
namespace SharpNav.Collections.Generic
{
	[Token(Token = "0x20002E5")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C144", Offset = "0x50C144")]
	public class BufferedQueue<T> : ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20002E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C17C", Offset = "0x50C17C")]
		private sealed class <GetEnumerator>d__18 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000FC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BufferedQueue<T> <>4__this;

			[Token(Token = "0x4000FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x17000268")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6001187")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000269")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001189")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001184")]
			[DebuggerHidden]
			public <GetEnumerator>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001185")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001186")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001188")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FBB")]
		private const int SIZE = 100;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] data;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int first;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int last;

		[Token(Token = "0x17000265")]
		public int Count
		{
			[Token(Token = "0x6001177")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000266")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x6001178")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000267")]
		public T Item
		{
			[Token(Token = "0x6001179")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6001175")]
		public BufferedQueue(int size)
		{
		}

		[Token(Token = "0x6001176")]
		public BufferedQueue(ICollection<T> items)
		{
		}

		[Token(Token = "0x600117A")]
		public bool Enqueue(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600117B")]
		public T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x600117C")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x600117D")]
		public void Clear()
		{
		}

		[Token(Token = "0x600117E")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600117F")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001180")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x518850", Offset = "0x518850")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001181")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x6001182")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001183")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E7")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C18C", Offset = "0x50C18C")]
	public class BufferedStack<T> : ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20002E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C1C4", Offset = "0x50C1C4")]
		private sealed class <GetEnumerator>d__16 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000FC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000FC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BufferedStack<T> <>4__this;

			[Token(Token = "0x4000FC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x1700026D")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x600119C")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x1700026E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600119E")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001199")]
			[DebuggerHidden]
			public <GetEnumerator>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x600119A")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600119B")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600119D")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] data;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int top;

		[Token(Token = "0x1700026A")]
		public int Count
		{
			[Token(Token = "0x600118C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026B")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x600118D")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026C")]
		public T Item
		{
			[Token(Token = "0x600118E")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x600118A")]
		public BufferedStack(int size)
		{
		}

		[Token(Token = "0x600118B")]
		public BufferedStack(int size, ICollection<T> items)
		{
		}

		[Token(Token = "0x600118F")]
		public bool Push(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001190")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x6001191")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x6001192")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001193")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001194")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001195")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x518900", Offset = "0x518900")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001196")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x6001197")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001198")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E9")]
	public interface IValueWithCost
	{
		[Token(Token = "0x1700026F")]
		float Cost
		{
			[Token(Token = "0x600119F")]
			get;
		}
	}
	[Token(Token = "0x20002EA")]
	public class PriorityQueue<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : class, IValueWithCost
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] heap;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int capacity;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x17000270")]
		public int Count
		{
			[Token(Token = "0x60011A1")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000271")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60011A2")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011A0")]
		public PriorityQueue(int n)
		{
		}

		[Token(Token = "0x60011A3")]
		public void Clear()
		{
		}

		[Token(Token = "0x60011A4")]
		public bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A5")]
		public T Top()
		{
			return null;
		}

		[Token(Token = "0x60011A6")]
		public T Pop()
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		public void Push(T node)
		{
		}

		[Token(Token = "0x60011A8")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A9")]
		public void Modify(T node)
		{
		}

		[Token(Token = "0x60011AA")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60011AB")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60011AC")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x60011AD")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60011AE")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60011AF")]
		private void BubbleUp(int i, T node)
		{
		}

		[Token(Token = "0x60011B0")]
		private void TrickleDown(int i, T node)
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class ProximityGrid<T> where T : IEquatable<T>
	{
		[Token(Token = "0x20002EC")]
		private class Item
		{
			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511008", Offset = "0x511008")]
			private T <Value>k__BackingField;

			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511018", Offset = "0x511018")]
			private int <X>k__BackingField;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511028", Offset = "0x511028")]
			private int <Y>k__BackingField;

			[Token(Token = "0x4000FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511038", Offset = "0x511038")]
			private int <Next>k__BackingField;

			[Token(Token = "0x17000272")]
			public T Value
			{
				[Token(Token = "0x60011B7")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5189B0", Offset = "0x5189B0")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60011B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5189C0", Offset = "0x5189C0")]
				set
				{
				}
			}

			[Token(Token = "0x17000273")]
			public int X
			{
				[Token(Token = "0x60011B9")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5189D0", Offset = "0x5189D0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60011BA")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5189E0", Offset = "0x5189E0")]
				set
				{
				}
			}

			[Token(Token = "0x17000274")]
			public int Y
			{
				[Token(Token = "0x60011BB")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5189F0", Offset = "0x5189F0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60011BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A00", Offset = "0x518A00")]
				set
				{
				}
			}

			[Token(Token = "0x17000275")]
			public int Next
			{
				[Token(Token = "0x60011BD")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A10", Offset = "0x518A10")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60011BE")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A20", Offset = "0x518A20")]
				set
				{
				}
			}

			[Token(Token = "0x60011BF")]
			public Item()
			{
			}
		}

		[Token(Token = "0x4000FCC")]
		private const int Invalid = -1;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float invCellSize;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Item[] pool;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int poolHead;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] buckets;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private BBox2i bounds;

		[Token(Token = "0x60011B1")]
		public ProximityGrid(int poolSize, float cellSize)
		{
		}

		[Token(Token = "0x60011B2")]
		public void Clear()
		{
		}

		[Token(Token = "0x60011B3")]
		public void AddItem(T value, float minX, float minY, float maxX, float maxY)
		{
		}

		[Token(Token = "0x60011B4")]
		public int QueryItems(float minX, float minY, float maxX, float maxY, T[] values, int maxVals)
		{
			return default(int);
		}

		[Token(Token = "0x60011B5")]
		public int GetItemCountAtLocation(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x60011B6")]
		public static int HashPos2(int x, int y, int n)
		{
			return default(int);
		}
	}
}
namespace DungeonArchitect
{
	[Token(Token = "0x20002ED")]
	[ExecuteInEditMode]
	public class Dungeon : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C1E4", Offset = "0x50C1E4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<DungeonEventListener, bool> <>9__24_0;

			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x7DC794", Offset = "0x7DC794", VA = "0x7DC794")]
			public <>c()
			{
			}

			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x7DC79C", Offset = "0x7DC79C", VA = "0x7DC79C")]
			internal bool <GetListeners>b__24_0(DungeonEventListener listener)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Graph> dungeonThemes;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugDraw;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DungeonConfig config;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PooledDungeonSceneProvider sceneProvider;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DungeonBuilder dungeonBuilder;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DungeonModel dungeonModel;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DungeonSceneObjectSpawner objectSpawner;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LevelMarkerList markers;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool requestedRebuild;

		[Token(Token = "0x17000276")]
		public DungeonModel ActiveModel
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x7A2884", Offset = "0x7A2884", VA = "0x7A2884")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		public bool IsLayoutBuilt
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x7A2938", Offset = "0x7A2938", VA = "0x7A2938")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000278")]
		public LevelMarkerList Markers
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x7A29F4", Offset = "0x7A29F4", VA = "0x7A29F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000279")]
		public DungeonConfig Config
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x7A29FC", Offset = "0x7A29FC", VA = "0x7A29FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x7A2AB0", Offset = "0x7A2AB0", VA = "0x7A2AB0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x7A2AB4", Offset = "0x7A2AB4", VA = "0x7A2AB4")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x7A2C9C", Offset = "0x7A2C9C", VA = "0x7A2C9C")]
		private List<DungeonPropDataAsset> GetThemeAssets()
		{
			return null;
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x7A36E0", Offset = "0x7A36E0", VA = "0x7A36E0")]
		public void Build()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x7A3740", Offset = "0x7A3740", VA = "0x7A3740")]
		public void Build(IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x7A39C4", Offset = "0x7A39C4", VA = "0x7A39C4")]
		public void ReapplyTheme(IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x7A3EBC", Offset = "0x7A3EBC", VA = "0x7A3EBC")]
		private DungeonThemeExecutionContext CreateThemeExecutionContext(IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return default(DungeonThemeExecutionContext);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x7A4E34", Offset = "0x7A4E34", VA = "0x7A4E34")]
		private DungeonEventListener[] GetListeners()
		{
			return null;
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x7A3930", Offset = "0x7A3930", VA = "0x7A3930")]
		private void NotifyPostLayoutBuild()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x7A389C", Offset = "0x7A389C", VA = "0x7A389C")]
		private void NotifyPreBuild()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x7A3C6C", Offset = "0x7A3C6C", VA = "0x7A3C6C")]
		private void NotifyPostBuild()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x7A3DB4", Offset = "0x7A3DB4", VA = "0x7A3DB4")]
		private void NotifyMarkersEmitted(LevelMarkerList markers)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x7A4F9C", Offset = "0x7A4F9C", VA = "0x7A4F9C")]
		private void NotifyPreDungeonDestroy()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x7A5020", Offset = "0x7A5020", VA = "0x7A5020")]
		private void NotifyDungeonDestroyed()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x7A50A4", Offset = "0x7A50A4", VA = "0x7A50A4")]
		public void DestroyDungeon()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x7A54B8", Offset = "0x7A54B8", VA = "0x7A54B8")]
		public void RequestRebuild()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x7A54C4", Offset = "0x7A54C4", VA = "0x7A54C4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x7A560C", Offset = "0x7A560C", VA = "0x7A560C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x7A5578", Offset = "0x7A5578", VA = "0x7A5578")]
		private void DebugDraw()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x7A5610", Offset = "0x7A5610", VA = "0x7A5610")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x7A56AC", Offset = "0x7A56AC", VA = "0x7A56AC")]
		public void AddPaintCell(IntVector location, bool automaticRebuild)
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x7A592C", Offset = "0x7A592C", VA = "0x7A592C")]
		public void RemovePaintCell(IntVector location, bool automaticRebuild)
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x7A5A50", Offset = "0x7A5A50", VA = "0x7A5A50")]
		public void ClearToolOverlayData(bool automaticRebuild)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x7A5B24", Offset = "0x7A5B24", VA = "0x7A5B24")]
		public Dungeon()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[ExecuteInEditMode]
	public abstract class DungeonBuilder : MonoBehaviour
	{
		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DungeonConfig config;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected PMRandom nrandom;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected PMRandom random;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected DungeonModel model;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected LevelMarkerList markers;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Blackboard blackboard;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool asyncBuild;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public long maxBuildTimePerFrame;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform asyncBuildStartPosition;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isLayoutBuilt;

		[Token(Token = "0x1700027A")]
		public bool IsLayoutBuilt
		{
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0x7A29D4", Offset = "0x7A29D4", VA = "0x7A29D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027B")]
		public LevelMarkerList Markers
		{
			[Token(Token = "0x60011E0")]
			[Address(RVA = "0x7A5B94", Offset = "0x7A5B94", VA = "0x7A5B94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027C")]
		public DungeonModel Model
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x7A5B9C", Offset = "0x7A5B9C", VA = "0x7A5B9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027D")]
		public Blackboard Blackboard
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x7A5BA4", Offset = "0x7A5BA4", VA = "0x7A5BA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x7A5BAC", Offset = "0x7A5BAC", VA = "0x7A5BAC", Slot = "4")]
		public virtual void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x7A5CB4", Offset = "0x7A5CB4", VA = "0x7A5CB4", Slot = "5")]
		protected virtual LevelMarkerList CreateMarkerListObject(DungeonConfig config)
		{
			return null;
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x7A5D10", Offset = "0x7A5D10", VA = "0x7A5D10", Slot = "6")]
		public virtual void OnDestroyed()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x7A5D68", Offset = "0x7A5D68", VA = "0x7A5D68", Slot = "7")]
		public virtual bool IsThemingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x7A5D70", Offset = "0x7A5D70", VA = "0x7A5D70", Slot = "8")]
		public virtual void BuildNonThemedDungeon(DungeonSceneProvider sceneProvider, IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x7A5D74", Offset = "0x7A5D74", VA = "0x7A5D74", Slot = "9")]
		public virtual void DebugDraw()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x7A5D78", Offset = "0x7A5D78", VA = "0x7A5D78", Slot = "10")]
		public virtual void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x7A5D48", Offset = "0x7A5D48", VA = "0x7A5D48")]
		protected void ClearSockets()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x7A5D7C", Offset = "0x7A5D7C", VA = "0x7A5D7C", Slot = "11")]
		public virtual void EmitMarkers()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x7A3D00", Offset = "0x7A3D00", VA = "0x7A3D00")]
		public void EmitCustomMarkers()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x7A5D9C", Offset = "0x7A5D9C", VA = "0x7A5D9C")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId)
		{
			return null;
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x7A5DD4", Offset = "0x7A5DD4", VA = "0x7A5DD4")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId, object metadata)
		{
			return null;
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x7A5E28", Offset = "0x7A5E28", VA = "0x7A5E28")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale)
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x7A5E60", Offset = "0x7A5E60", VA = "0x7A5E60")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale, object metadata)
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x7A5EB4", Offset = "0x7A5EB4", VA = "0x7A5EB4", Slot = "12")]
		public virtual void OnVolumePositionModified(Volume volume, out IntVector newPositionOnGrid, out IntVector newSizeOnGrid)
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x7A5FA0", Offset = "0x7A5FA0", VA = "0x7A5FA0")]
		protected void ProcessMarkerOverrideVolumes()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x7A6204", Offset = "0x7A6204", VA = "0x7A6204")]
		protected DungeonBuilder()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class DungeonConfig : MonoBehaviour
	{
		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x511048", Offset = "0x511048")]
		public uint Seed;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool Mode2D;

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x7A7910", Offset = "0x7A7910", VA = "0x7A7910", Slot = "4")]
		public virtual bool HasValidConfig(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x7A7918", Offset = "0x7A7918", VA = "0x7A7918")]
		public DungeonConfig()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class DungeonEventListener : MonoBehaviour
	{
		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x7A7C5C", Offset = "0x7A7C5C", VA = "0x7A7C5C", Slot = "4")]
		public virtual void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x7A7C60", Offset = "0x7A7C60", VA = "0x7A7C60", Slot = "5")]
		public virtual void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x7A7C64", Offset = "0x7A7C64", VA = "0x7A7C64", Slot = "6")]
		public virtual void OnPreDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x7A7C68", Offset = "0x7A7C68", VA = "0x7A7C68", Slot = "7")]
		public virtual void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x7A7C6C", Offset = "0x7A7C6C", VA = "0x7A7C6C", Slot = "8")]
		public virtual void OnPreDungeonDestroy(Dungeon dungeon)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x7A7C70", Offset = "0x7A7C70", VA = "0x7A7C70", Slot = "9")]
		public virtual void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x7A7C74", Offset = "0x7A7C74", VA = "0x7A7C74")]
		public DungeonEventListener()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class DungeonMarkerEmitter : MonoBehaviour
	{
		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x7A9F88", Offset = "0x7A9F88", VA = "0x7A9F88", Slot = "4")]
		public virtual void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x7A9F8C", Offset = "0x7A9F8C", VA = "0x7A9F8C")]
		public DungeonMarkerEmitter()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public abstract class DungeonModel : MonoBehaviour
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public DungeonToolData ToolData;

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x7AA578", Offset = "0x7AA578", VA = "0x7AA578")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x7AA584", Offset = "0x7AA584", VA = "0x7AA584", Slot = "4")]
		public virtual void ResetModel()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x7AA588", Offset = "0x7AA588", VA = "0x7AA588", Slot = "5")]
		public virtual DungeonToolData CreateToolDataInstance()
		{
			return null;
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x7AA5CC", Offset = "0x7AA5CC", VA = "0x7AA5CC")]
		protected DungeonModel()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public abstract class DungeonPaintMode : MonoBehaviour
	{
		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dungeon dungeon;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected DungeonModel dungeonModel;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected DungeonConfig dungeonConfig;

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x7ACE40", Offset = "0x7ACE40", VA = "0x7ACE40")]
		public DungeonConfig GetDungeonConfig()
		{
			return null;
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x7ACEF4", Offset = "0x7ACEF4", VA = "0x7ACEF4")]
		public DungeonModel GetDungeonModel()
		{
			return null;
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x7ACFA8", Offset = "0x7ACFA8", VA = "0x7ACFA8")]
		public Dungeon GetDungeon()
		{
			return null;
		}

		[Token(Token = "0x6001206")]
		public T GetSiblingComponent<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x7AD05C", Offset = "0x7AD05C", VA = "0x7AD05C")]
		protected DungeonPaintMode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F5")]
	public class PropSocket
	{
		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Id;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string SocketType;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4 Transform;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntVector gridPosition;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int cellId;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool markForDeletion;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<PropSocket> childMarkers;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public object metadata;

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xDD3208", Offset = "0xDD3208", VA = "0xDD3208", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xDD3210", Offset = "0xDD3210", VA = "0xDD3210")]
		public PropSocket()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class PropChildSocketData
	{
		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string SocketType;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 Offset;

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xDD3200", Offset = "0xDD3200", VA = "0xDD3200")]
		public PropChildSocketData()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public abstract class PropTypeData
	{
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NodeId;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AttachToSocket;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Affinity;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConsumeOnAttach;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Matrix4x4 Offset;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<PropChildSocketData> ChildSockets;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool IsStaticObject;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool affectsNavigation;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool UseSelectionRule;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string SelectorRuleClassName;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool UseTransformRule;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string TransformRuleClassName;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useSpatialConstraint;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SpatialConstraintAsset spatialConstraint;

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xDD3294", Offset = "0xDD3294", VA = "0xDD3294")]
		protected PropTypeData()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class GameObjectPropTypeData : PropTypeData
	{
		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Template;

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x77E710", Offset = "0x77E710", VA = "0x77E710")]
		public GameObjectPropTypeData()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class GameObjectArrayPropTypeData : PropTypeData
	{
		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] Templates;

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x1485F78", Offset = "0x1485F78", VA = "0x1485F78")]
		public GameObjectArrayPropTypeData()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class SpritePropTypeData : PropTypeData
	{
		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Sprite sprite;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color color;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Material materialOverride;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string sortingLayerName;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int orderInLayer;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public DungeonSpriteCollisionType collisionType;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public PhysicsMaterial2D physicsMaterial;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEngine.Vector2 physicsOffset;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public UnityEngine.Vector2 physicsSize;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float physicsRadius;

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x7FAA40", Offset = "0x7FAA40", VA = "0x7FAA40")]
		public SpritePropTypeData()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class DungeonPropDataAsset
	{
		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PropTypeData> Props;

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x7A2EE8", Offset = "0x7A2EE8", VA = "0x7A2EE8")]
		public void BuildFromGraph(Graph graph)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x7A2E64", Offset = "0x7A2E64", VA = "0x7A2E64")]
		public DungeonPropDataAsset()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class LeftToRightNodeComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6001211")]
		[Address(RVA = "0x9E1728", Offset = "0x9E1728", VA = "0x9E1728", Slot = "4")]
		public int Compare(GraphNode a, GraphNode b)
		{
			return default(int);
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x9E17DC", Offset = "0x9E17DC", VA = "0x9E17DC")]
		public LeftToRightNodeComparer()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public interface IDungeonSceneObjectInstantiator
	{
		[Token(Token = "0x6001213")]
		GameObject Instantiate(GameObject template, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale, Transform parent);
	}
	[Token(Token = "0x20002FE")]
	public class RuntimeDungeonSceneObjectInstantiator : IDungeonSceneObjectInstantiator
	{
		[Token(Token = "0x6001214")]
		[Address(RVA = "0xA96F00", Offset = "0xA96F00", VA = "0xA96F00", Slot = "4")]
		public GameObject Instantiate(GameObject template, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xA97058", Offset = "0xA97058", VA = "0xA97058")]
		public RuntimeDungeonSceneObjectInstantiator()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public struct DungeonNodeSpawnData
	{
		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PropTypeData nodeData;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Matrix4x4 transform;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PropSocket socket;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float _sortDistance;
	}
	[Token(Token = "0x2000300")]
	public abstract class DungeonSceneObjectSpawner
	{
		[Token(Token = "0x2000301")]
		protected class SpawnInfo
		{
			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DungeonNodeSpawnData spawnData;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public GameObject spawnedItem;

			[Token(Token = "0x600121D")]
			[Address(RVA = "0x7DCC64", Offset = "0x7DCC64", VA = "0x7DCC64")]
			public SpawnInfo()
			{
			}
		}

		[Token(Token = "0x6001216")]
		public abstract void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners);

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x7B08C0", Offset = "0x7B08C0", VA = "0x7B08C0", Slot = "5")]
		public virtual void Tick()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x7B08C4", Offset = "0x7B08C4", VA = "0x7B08C4", Slot = "6")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x7B08C8", Offset = "0x7B08C8", VA = "0x7B08C8")]
		protected GameObject SpawnNodeItem(DungeonNodeSpawnData data, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x7B0B5C", Offset = "0x7B0B5C", VA = "0x7B0B5C")]
		protected void TagDungeonItemUserData(GameObject dungeonItem, int cellID)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x7B0C3C", Offset = "0x7B0C3C", VA = "0x7B0C3C")]
		protected void NotifySpawnListeners(DungeonItemSpawnListener[] spawnListeners, List<SpawnInfo> spawnList)
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x7B0E60", Offset = "0x7B0E60", VA = "0x7B0E60")]
		protected DungeonSceneObjectSpawner()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class SyncDungeonSceneObjectSpawner : DungeonSceneObjectSpawner
	{
		[Token(Token = "0x600121E")]
		[Address(RVA = "0xD763C8", Offset = "0xD763C8", VA = "0xD763C8", Slot = "4")]
		public override void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xD765D4", Offset = "0xD765D4", VA = "0xD765D4")]
		public SyncDungeonSceneObjectSpawner()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class AsyncDungeonSceneObjectSpawner : DungeonSceneObjectSpawner
	{
		[Token(Token = "0x2000304")]
		public class SpawnListSorter : IComparer<DungeonNodeSpawnData>
		{
			[Token(Token = "0x6001224")]
			[Address(RVA = "0x7D9364", Offset = "0x7D9364", VA = "0x7D9364", Slot = "4")]
			public int Compare(DungeonNodeSpawnData a, DungeonNodeSpawnData b)
			{
				return default(int);
			}

			[Token(Token = "0x6001225")]
			[Address(RVA = "0x7D9388", Offset = "0x7D9388", VA = "0x7D9388")]
			public SpawnListSorter()
			{
			}
		}

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long maxMilliPerFrame;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Vector3 buildOrigin;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DungeonSceneProvider sceneProvider;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PMRandom random;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDungeonSceneObjectInstantiator objectInstantiator;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DungeonItemSpawnListener[] spawnListeners;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Queue<DungeonNodeSpawnData> buildQueue;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<SpawnInfo> spawnList;

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x9B4738", Offset = "0x9B4738", VA = "0x9B4738")]
		public AsyncDungeonSceneObjectSpawner(long maxMilliPerFrame, UnityEngine.Vector3 buildOrigin)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x9B47F4", Offset = "0x9B47F4", VA = "0x9B47F4", Slot = "4")]
		public override void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x9B49F8", Offset = "0x9B49F8", VA = "0x9B49F8", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x9B4C3C", Offset = "0x9B4C3C", VA = "0x9B4C3C", Slot = "6")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class DungeonSceneProvider : MonoBehaviour
	{
		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DungeonConfig config;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dungeon dungeon;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemParent;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected UnityEngine.Vector3 _position;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion _rotation;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected UnityEngine.Vector3 _scale;

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x7B0E68", Offset = "0x7B0E68", VA = "0x7B0E68", Slot = "4")]
		public virtual void OnDungeonBuildStart()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x7B0FF0", Offset = "0x7B0FF0", VA = "0x7B0FF0", Slot = "5")]
		public virtual void OnDungeonBuildStop()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x7B0FF4", Offset = "0x7B0FF4", VA = "0x7B0FF4", Slot = "6")]
		public virtual GameObject AddGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x7B0FFC", Offset = "0x7B0FFC", VA = "0x7B0FFC", Slot = "7")]
		public virtual GameObject AddGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x7B1004", Offset = "0x7B1004", VA = "0x7B1004", Slot = "8")]
		public virtual GameObject AddSprite(SpritePropTypeData spriteProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x7B100C", Offset = "0x7B100C", VA = "0x7B100C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x7B0E6C", Offset = "0x7B0E6C", VA = "0x7B0E6C")]
		protected void Initialize()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x7B1010", Offset = "0x7B1010", VA = "0x7B1010")]
		protected GameObject BuildGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x7B126C", Offset = "0x7B126C", VA = "0x7B126C")]
		protected GameObject BuildGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x7B1060", Offset = "0x7B1060", VA = "0x7B1060")]
		protected GameObject BuildGameObject(GameObject template, string nodeId, bool affectsNavigation, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x7B1378", Offset = "0x7B1378", VA = "0x7B1378")]
		protected void FlipSpriteTransform(ref Matrix4x4 transform, Sprite sprite)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x7B144C", Offset = "0x7B144C", VA = "0x7B144C")]
		protected void FlipSpritePosition(ref Matrix4x4 transform)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x7B143C", Offset = "0x7B143C", VA = "0x7B143C")]
		protected void FlipSpritePosition(ref UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x7B148C", Offset = "0x7B148C", VA = "0x7B148C", Slot = "9")]
		public virtual void InvalidateNodeCache(string NodeId)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x7B1490", Offset = "0x7B1490", VA = "0x7B1490")]
		protected GameObject BuildSpriteObject(SpritePropTypeData spriteData, Matrix4x4 transform, string NodeId)
		{
			return null;
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x7B1904", Offset = "0x7B1904", VA = "0x7B1904")]
		protected void SetTransform(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x7B1980", Offset = "0x7B1980", VA = "0x7B1980")]
		public DungeonSceneProvider()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class DungeonSceneProviderData : MonoBehaviour
	{
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NodeId;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dungeon dungeon;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool affectsNavigation;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int userData;

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x7B1988", Offset = "0x7B1988", VA = "0x7B1988")]
		public DungeonSceneProviderData()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public struct DungeonThemeExecutionContext
	{
		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DungeonBuilder builder;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DungeonConfig config;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DungeonModel model;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpatialConstraintProcessor spatialConstraintProcessor;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThemeOverrideVolume[] themeOverrideVolumes;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DungeonSceneProvider sceneProvider;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DungeonSceneObjectSpawner objectSpawner;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DungeonItemSpawnListener[] spawnListeners;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IDungeonSceneObjectInstantiator objectInstantiator;
	}
	[Token(Token = "0x2000308")]
	public class DungeonThemeEngine
	{
		[Token(Token = "0x2000309")]
		private struct NodeListExecutionData
		{
			[Token(Token = "0x4001039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<PropTypeData> nodeDataList;

			[Token(Token = "0x400103A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PropSocket socket;
		}

		[Token(Token = "0x200030A")]
		private struct NodeListExecutionContext
		{
			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public InstanceCache instanceCache;

			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SpatialConstraintProcessor constraintProcessor;

			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PMRandom srandom;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DungeonSceneProvider SceneProvider;

			[Token(Token = "0x400103F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IDungeonSceneObjectInstantiator objectInstantiator;
		}

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DungeonThemeExecutionContext context;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PMRandom random;

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x7A42EC", Offset = "0x7A42EC", VA = "0x7A42EC")]
		public DungeonThemeEngine(DungeonThemeExecutionContext context)
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x7A439C", Offset = "0x7A439C", VA = "0x7A439C")]
		public void ApplyTheme(LevelMarkerList markers, List<DungeonPropDataAsset> Themes)
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x7B1E48", Offset = "0x7B1E48", VA = "0x7B1E48")]
		private DungeonPropDataAsset GetBestMatchedTheme(List<DungeonPropDataAsset> Themes, PropSocket socket, Dictionary<DungeonPropDataAsset, Dictionary<string, List<PropTypeData>>> PropBySocketTypeByTheme)
		{
			return null;
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x7B31EC", Offset = "0x7B31EC", VA = "0x7B31EC")]
		private bool ProcessSpatialConstraint(SpatialConstraintProcessor constraintProcessor, SpatialConstraintAsset constraint, PropSocket marker, LevelMarkerList markers, out Matrix4x4 OutOffset, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x7B33B8", Offset = "0x7B33B8", VA = "0x7B33B8")]
		private void RecursivelyTagMarkerForDeletion(PropSocket marker, HashSet<int> visited)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x7B2F08", Offset = "0x7B2F08", VA = "0x7B2F08")]
		private void RecursivelyTagMarkersForDeletion(LevelMarkerList markers)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x7B2190", Offset = "0x7B2190", VA = "0x7B2190")]
		private bool ShouldDelayExecution(List<PropTypeData> nodeDataList)
		{
			return default(bool);
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x7B1B78", Offset = "0x7B1B78", VA = "0x7B1B78")]
		private void CreatePropLookup(DungeonPropDataAsset PropAsset, Dictionary<DungeonPropDataAsset, Dictionary<string, List<PropTypeData>>> PropBySocketTypeByTheme)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x7B231C", Offset = "0x7B231C", VA = "0x7B231C")]
		private void ExecuteNodesUnderMarker(NodeListExecutionData data, NodeListExecutionContext nodeContext, LevelMarkerList markers, List<DungeonNodeSpawnData> spawnDataList)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030B")]
	public class DungeonToolData : ScriptableObject
	{
		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<IntVector> paintedCells;

		[Token(Token = "0x1700027E")]
		public List<IntVector> PaintedCells
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0x7B3550", Offset = "0x7B3550", VA = "0x7B3550")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x7B3558", Offset = "0x7B3558", VA = "0x7B3558")]
		public DungeonToolData()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class SelectorRule : ScriptableObject
	{
		[Token(Token = "0x6001243")]
		[Address(RVA = "0xAA53DC", Offset = "0xAA53DC", VA = "0xAA53DC", Slot = "4")]
		public virtual bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xA96DD8", Offset = "0xA96DD8", VA = "0xA96DD8")]
		public SelectorRule()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class TransformationRule : ScriptableObject
	{
		[Token(Token = "0x6001245")]
		[Address(RVA = "0xBDBC2C", Offset = "0xBDBC2C", VA = "0xBDBC2C", Slot = "4")]
		public virtual void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xBDBC88", Offset = "0xBDBC88", VA = "0xBDBC88")]
		public TransformationRule()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class DungeonItemSpawnListener : MonoBehaviour
	{
		[Token(Token = "0x6001247")]
		[Address(RVA = "0x7A8FD4", Offset = "0x7A8FD4", VA = "0x7A8FD4", Slot = "4")]
		public virtual void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x7A8FD8", Offset = "0x7A8FD8", VA = "0x7A8FD8")]
		public DungeonItemSpawnListener()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class PooledDungeonSceneProvider : DungeonSceneProvider
	{
		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, Queue<GameObject>> pooledObjects;

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xDD1D0C", Offset = "0xDD1D0C", VA = "0xDD1D0C", Slot = "4")]
		public override void OnDungeonBuildStart()
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xDD1FB4", Offset = "0xDD1FB4", VA = "0xDD1FB4", Slot = "5")]
		public override void OnDungeonBuildStop()
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xDD231C", Offset = "0xDD231C", VA = "0xDD231C", Slot = "8")]
		public override GameObject AddSprite(SpritePropTypeData spriteProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xDD2500", Offset = "0xDD2500", VA = "0xDD2500", Slot = "9")]
		public override void InvalidateNodeCache(string NodeId)
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xDD273C", Offset = "0xDD273C", VA = "0xDD273C", Slot = "6")]
		public override GameObject AddGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xDD2AB0", Offset = "0xDD2AB0", VA = "0xDD2AB0", Slot = "7")]
		public override GameObject AddGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xDD2A18", Offset = "0xDD2A18", VA = "0xDD2A18")]
		private void RecursivelySetStatic(Transform trans)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xDD2D64", Offset = "0xDD2D64", VA = "0xDD2D64")]
		public PooledDungeonSceneProvider()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class BlurFilter : Filter
	{
		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int radius;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int w;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int h;

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x9BE440", Offset = "0x9BE440", VA = "0x9BE440")]
		public BlurFilter(int radius)
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x9BE46C", Offset = "0x9BE46C", VA = "0x9BE46C", Slot = "4")]
		public float[,] ApplyFilter(float[,] data)
		{
			return null;
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x9BE52C", Offset = "0x9BE52C", VA = "0x9BE52C")]
		private void gaussBlur_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x9BE82C", Offset = "0x9BE82C", VA = "0x9BE82C")]
		private void boxBlur_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x9BEDCC", Offset = "0x9BEDCC", VA = "0x9BEDCC")]
		private float Get(float[,] data, int index)
		{
			return default(float);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x9BEE2C", Offset = "0x9BEE2C", VA = "0x9BEE2C")]
		private void Set(float[,] data, int index, float value)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x9BE964", Offset = "0x9BE964", VA = "0x9BE964")]
		private void boxBlurH_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x9BEBA4", Offset = "0x9BEBA4", VA = "0x9BEBA4")]
		private void boxBlurT_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x9BE634", Offset = "0x9BE634", VA = "0x9BE634")]
		private int[] boxesForGauss(float sigma, int n)
		{
			return null;
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x9BEE8C", Offset = "0x9BEE8C", VA = "0x9BEE8C")]
		private float Round(float a)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000311")]
	public interface Filter
	{
		[Token(Token = "0x600125B")]
		float[,] ApplyFilter(float[,] data);
	}
	[Serializable]
	[Token(Token = "0x2000312")]
	public class MarkerReplacementEntry
	{
		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fromMarker;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string toMarker;

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xC24A98", Offset = "0xC24A98", VA = "0xC24A98")]
		public MarkerReplacementEntry()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[ExecuteInEditMode]
	public class MarkerReplaceVolume : Volume
	{
		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MarkerReplacementEntry[] replacements;

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xC249D4", Offset = "0xC249D4", VA = "0xC249D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xC24A90", Offset = "0xC24A90", VA = "0xC24A90")]
		public MarkerReplaceVolume()
		{
		}
	}
	[Token(Token = "0x2000314")]
	[ExecuteInEditMode]
	public class NegationVolume : Volume
	{
		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool inverse;

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xE945E0", Offset = "0xE945E0", VA = "0xE945E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xE94690", Offset = "0xE94690", VA = "0xE94690")]
		public NegationVolume()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class ThemeOverrideVolume : Volume
	{
		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Graph overrideTheme;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useBaseThemeForMissingMarkers;

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xD7BE58", Offset = "0xD7BE58", VA = "0xD7BE58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xD7BF14", Offset = "0xD7BF14", VA = "0xD7BF14")]
		public ThemeOverrideVolume()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class Volume : MonoBehaviour
	{
		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mode2D;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Color COLOR_WIRE;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected Color COLOR_SOLID_DESELECTED;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Color COLOR_SOLID;

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x7D02C0", Offset = "0x7D02C0", VA = "0x7D02C0")]
		public Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x7D0438", Offset = "0x7D0438", VA = "0x7D0438")]
		public void GetVolumeGridTransform(out IntVector positionGrid, out IntVector scaleGrid, UnityEngine.Vector3 LogicalGridSize)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x7D070C", Offset = "0x7D070C", VA = "0x7D070C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x7D085C", Offset = "0x7D085C", VA = "0x7D085C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x7D0714", Offset = "0x7D0714", VA = "0x7D0714")]
		private void DrawGizmo(bool selected)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x7D0864", Offset = "0x7D0864", VA = "0x7D0864")]
		public Volume()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[ExecuteInEditMode]
	public class InfinityDungeon : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C234", Offset = "0x50C234")]
		private sealed class <>c
		{
			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<InfinityDungeonConfig> <>9__9_0;

			[Token(Token = "0x6001275")]
			[Address(RVA = "0x7E4288", Offset = "0x7E4288", VA = "0x7E4288")]
			public <>c()
			{
			}

			[Token(Token = "0x6001276")]
			[Address(RVA = "0x7E4290", Offset = "0x7E4290", VA = "0x7E4290")]
			internal bool <EditorUpdate>b__9_0(InfinityDungeonConfig c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform buildPositionTracker;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float buildDistance;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Graph> dungeonThemes;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform parentGameObject;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject chunkDungeonTemplate;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<InfinityDungeonConfig> spawnedChunks;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private bool dungeonBuilt;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InfinityDungeonConfig config;

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xCE6D24", Offset = "0xCE6D24", VA = "0xCE6D24")]
		private void Awake()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xCE6D80", Offset = "0xCE6D80", VA = "0xCE6D80")]
		public void EditorUpdate()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xCE6FF0", Offset = "0xCE6FF0", VA = "0xCE6FF0")]
		private void Update()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xCE6CA8", Offset = "0xCE6CA8", VA = "0xCE6CA8")]
		public void BuildDungeon()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xCE7000", Offset = "0xCE7000", VA = "0xCE7000")]
		private void UpdateChunks()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xCE7320", Offset = "0xCE7320", VA = "0xCE7320")]
		private void UpdateChunks(UnityEngine.Vector3 buildPosition)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xCE7B98", Offset = "0xCE7B98", VA = "0xCE7B98")]
		private UnityEngine.Vector3 ClampOnBuildAxis(UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xCE7C98", Offset = "0xCE7C98", VA = "0xCE7C98")]
		public Dungeon BuildDungeonChunk(UnityEngine.Vector3 chunkPosition)
		{
			return null;
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xCE7098", Offset = "0xCE7098", VA = "0xCE7098")]
		public void DestroyDungeon()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xCE7EB0", Offset = "0xCE7EB0", VA = "0xCE7EB0")]
		public void CopyDungeonConfig(InfinityDungeonConfig targetConfig)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xCE7FA8", Offset = "0xCE7FA8", VA = "0xCE7FA8")]
		public InfinityDungeon()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public abstract class InfinityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public UnityEngine.Vector3 chunkPosition;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 chunkSize;

		[Token(Token = "0x6001277")]
		public abstract UnityEngine.Vector3 GetLogicalCoord(UnityEngine.Vector3 p);

		[Token(Token = "0x6001278")]
		public abstract bool BuildAlongX();

		[Token(Token = "0x6001279")]
		public abstract bool BuildAlongY();

		[Token(Token = "0x600127A")]
		public abstract bool BuildAlongZ();

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xCE6B50", Offset = "0xCE6B50", VA = "0xCE6B50")]
		protected InfinityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class InfinityDungeonEditorUpdate : MonoBehaviour
	{
		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InfinityDungeon infinityDungeon;

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xCE8034", Offset = "0xCE8034", VA = "0xCE8034")]
		public void EditorUpdate()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xCE80C0", Offset = "0xCE80C0", VA = "0xCE80C0")]
		public InfinityDungeonEditorUpdate()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class DungeonItemGroupInfo : MonoBehaviour
	{
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int groupId;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string groupType;

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x7A8FCC", Offset = "0x7A8FCC", VA = "0x7A8FCC")]
		public DungeonItemGroupInfo()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class DungeonNavMeshSourceCollector
	{
		[Token(Token = "0x600127F")]
		[Address(RVA = "0x7AC7D0", Offset = "0x7AC7D0", VA = "0x7AC7D0")]
		private static NavMeshBuildSource CreateMeshSource(Mesh mesh, Matrix4x4 transform)
		{
			return default(NavMeshBuildSource);
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x7AC874", Offset = "0x7AC874", VA = "0x7AC874")]
		public static void CollectSources(Dungeon dungeon, DungeonNavMeshSourceType MeshSourceType, ref List<NavMeshBuildSource> sources)
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x7ACE38", Offset = "0x7ACE38", VA = "0x7ACE38")]
		public DungeonNavMeshSourceCollector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031D")]
	public enum DungeonNavMeshSourceType
	{
		[Token(Token = "0x4001061")]
		MeshData,
		[Token(Token = "0x4001062")]
		Collision
	}
	[Token(Token = "0x200031E")]
	public class DungeonRuntimeNavigation : MonoBehaviour
	{
		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableRuntimeNavigation;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 boundsPadding;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bakeTerrain;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Terrain terrain;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DungeonNavMeshSourceType meshSourceType;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Bounds dungeonBounds;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshData m_NavMesh;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshDataInstance m_Instance;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<NavMeshBuildSource> meshSources;

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x7A3A9C", Offset = "0x7A3A9C", VA = "0x7A3A9C")]
		public void BuildNavMesh()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x7B008C", Offset = "0x7B008C", VA = "0x7B008C")]
		private void DestroyNavMesh()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x7B0430", Offset = "0x7B0430", VA = "0x7B0430")]
		private void CollectMeshSources()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x7B035C", Offset = "0x7B035C", VA = "0x7B035C")]
		private void UpdateNavMesh(bool asyncUpdate = false)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x7B0690", Offset = "0x7B0690", VA = "0x7B0690")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x7B0820", Offset = "0x7B0820", VA = "0x7B0820")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x7B0824", Offset = "0x7B0824", VA = "0x7B0824")]
		public DungeonRuntimeNavigation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031F")]
	public struct DebugTextItem
	{
		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string message;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color color;
	}
	[Token(Token = "0x2000320")]
	public class DebugText3D : MonoBehaviour
	{
		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public DebugTextItem[] items;

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xA540C8", Offset = "0xA540C8", VA = "0xA540C8")]
		public DebugText3D()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C244", Offset = "0x50C244")]
	public class LevelMarkerList : IEnumerable<PropSocket>, IEnumerable
	{
		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<PropSocket> markers;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _SocketIdCounter;

		[Token(Token = "0x1700027F")]
		public PropSocket Item
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0x9E1DF4", Offset = "0x9E1DF4", VA = "0x9E1DF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		public int Count
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0x9E1E68", Offset = "0x9E1E68", VA = "0x9E1E68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x9E1B48", Offset = "0x9E1B48", VA = "0x9E1B48", Slot = "4")]
		public IEnumerator<PropSocket> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x9E1BDC", Offset = "0x9E1BDC", VA = "0x9E1BDC", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x9E1C70", Offset = "0x9E1C70", VA = "0x9E1C70", Slot = "6")]
		public virtual void Add(PropSocket marker)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x9E1CD4", Offset = "0x9E1CD4", VA = "0x9E1CD4", Slot = "7")]
		public virtual void AddRange(PropSocket[] markerList)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x9E1D38", Offset = "0x9E1D38", VA = "0x9E1D38", Slot = "8")]
		public virtual void Remove(PropSocket marker)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x9E1D9C", Offset = "0x9E1D9C", VA = "0x9E1D9C", Slot = "9")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x9E1EB4", Offset = "0x9E1EB4", VA = "0x9E1EB4", Slot = "10")]
		public virtual IEnumerable<PropSocket> GetMarkersInSearchArea(UnityEngine.Vector2 center, float radius)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x9E1EBC", Offset = "0x9E1EBC", VA = "0x9E1EBC")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x9E1EF4", Offset = "0x9E1EF4", VA = "0x9E1EF4")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId, object metadata)
		{
			return null;
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x9E1FE4", Offset = "0x9E1FE4", VA = "0x9E1FE4")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale)
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x9E201C", Offset = "0x9E201C", VA = "0x9E201C")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale, object metadata)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x9E228C", Offset = "0x9E228C", VA = "0x9E228C")]
		public LevelMarkerList()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class SpatialPartionedLevelMarkerList : LevelMarkerList
	{
		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float partitionCellSize;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<IntVector2, List<PropSocket>> buckets;

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x7F5FC4", Offset = "0x7F5FC4", VA = "0x7F5FC4")]
		public SpatialPartionedLevelMarkerList(float partitionCellSize)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x7F6064", Offset = "0x7F6064", VA = "0x7F6064")]
		private IntVector2 GetBucketCoord(PropSocket marker)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x7F6104", Offset = "0x7F6104", VA = "0x7F6104")]
		private IntVector2 GetBucketCoord(UnityEngine.Vector2 position)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x7F609C", Offset = "0x7F609C", VA = "0x7F609C")]
		private IntVector2 GetBucketCoord(float x, float z)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x7F6108", Offset = "0x7F6108", VA = "0x7F6108", Slot = "6")]
		public override void Add(PropSocket marker)
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x7F6254", Offset = "0x7F6254", VA = "0x7F6254", Slot = "8")]
		public override void Remove(PropSocket marker)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x7F633C", Offset = "0x7F633C", VA = "0x7F633C", Slot = "10")]
		public override IEnumerable<PropSocket> GetMarkersInSearchArea(UnityEngine.Vector2 center, float radius)
		{
			return null;
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x7F64E0", Offset = "0x7F64E0", VA = "0x7F64E0", Slot = "9")]
		public override void Clear()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000323")]
	public struct IntVector
	{
		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public int x;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		public int y;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public int z;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IntVector Zero;

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xCE7C40", Offset = "0xCE7C40", VA = "0xCE7C40")]
		public IntVector(UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xCE6850", Offset = "0xCE6850", VA = "0xCE6850")]
		public IntVector(int x, int y, int z)
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xCE879C", Offset = "0xCE879C", VA = "0xCE879C")]
		public void Set(int x, int y, int z)
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xCE87A8", Offset = "0xCE87A8", VA = "0xCE87A8")]
		public float DistanceSq()
		{
			return default(float);
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xCE87C4", Offset = "0xCE87C4", VA = "0xCE87C4")]
		public float Distance()
		{
			return default(float);
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xCE87F4", Offset = "0xCE87F4", VA = "0xCE87F4")]
		public UnityEngine.Vector3 ToVector3()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xCE685C", Offset = "0xCE685C", VA = "0xCE685C")]
		public static IntVector operator +(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xCE880C", Offset = "0xCE880C", VA = "0xCE880C")]
		public static IntVector operator -(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xCE8828", Offset = "0xCE8828", VA = "0xCE8828")]
		public static IntVector operator *(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xCE8844", Offset = "0xCE8844", VA = "0xCE8844")]
		public static UnityEngine.Vector3 operator *(IntVector a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xCE8864", Offset = "0xCE8864", VA = "0xCE8864")]
		public static IntVector operator /(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xCE8880", Offset = "0xCE8880", VA = "0xCE8880")]
		public static IntVector operator +(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xCE8898", Offset = "0xCE8898", VA = "0xCE8898")]
		public static IntVector operator -(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xCE88B0", Offset = "0xCE88B0", VA = "0xCE88B0")]
		public static IntVector operator *(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xCE88C8", Offset = "0xCE88C8", VA = "0xCE88C8")]
		public static IntVector operator /(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xCE88E0", Offset = "0xCE88E0", VA = "0xCE88E0")]
		public static bool operator ==(IntVector a, IntVector b)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xCE8910", Offset = "0xCE8910", VA = "0xCE8910")]
		public static bool operator !=(IntVector a, IntVector b)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xCE89B4", Offset = "0xCE89B4", VA = "0xCE89B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xCE6878", Offset = "0xCE6878", VA = "0xCE6878", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xCE8A58", Offset = "0xCE8A58", VA = "0xCE8A58")]
		public static UnityEngine.Vector3 ToV3(IntVector iv)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xCE8A6C", Offset = "0xCE8A6C", VA = "0xCE8A6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000324")]
	public struct IntVector2
	{
		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public int x;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		public int y;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IntVector2 Zero;

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xCE8B84", Offset = "0xCE8B84", VA = "0xCE8B84")]
		public IntVector2(UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xCE8BC8", Offset = "0xCE8BC8", VA = "0xCE8BC8")]
		public IntVector2(int x, int y)
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xCE8BD0", Offset = "0xCE8BD0", VA = "0xCE8BD0")]
		public void Set(int x, int y)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xCE8BD8", Offset = "0xCE8BD8", VA = "0xCE8BD8")]
		public int ManhattanDistance()
		{
			return default(int);
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xCE8BE4", Offset = "0xCE8BE4", VA = "0xCE8BE4")]
		public float DistanceSq()
		{
			return default(float);
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xCE8BF8", Offset = "0xCE8BF8", VA = "0xCE8BF8")]
		public IntVector2 Abs()
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xCE8C40", Offset = "0xCE8C40", VA = "0xCE8C40")]
		public float Distance()
		{
			return default(float);
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xCE8C68", Offset = "0xCE8C68", VA = "0xCE8C68")]
		public UnityEngine.Vector2 ToVector2()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xCE8C78", Offset = "0xCE8C78", VA = "0xCE8C78")]
		public static IntVector2 operator +(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xCE8C90", Offset = "0xCE8C90", VA = "0xCE8C90")]
		public static IntVector2 operator -(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xCE8CA8", Offset = "0xCE8CA8", VA = "0xCE8CA8")]
		public static IntVector2 operator *(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xCE8CC0", Offset = "0xCE8CC0", VA = "0xCE8CC0")]
		public static UnityEngine.Vector3 operator *(IntVector2 a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xCE8CDC", Offset = "0xCE8CDC", VA = "0xCE8CDC")]
		public static IntVector2 operator /(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xCE8CF4", Offset = "0xCE8CF4", VA = "0xCE8CF4")]
		public static IntVector2 operator +(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xCE8D08", Offset = "0xCE8D08", VA = "0xCE8D08")]
		public static IntVector2 operator -(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xCE8D1C", Offset = "0xCE8D1C", VA = "0xCE8D1C")]
		public static IntVector2 operator *(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xCE8D30", Offset = "0xCE8D30", VA = "0xCE8D30")]
		public static IntVector2 operator /(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xCE8D44", Offset = "0xCE8D44", VA = "0xCE8D44", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xCE8DD8", Offset = "0xCE8DD8", VA = "0xCE8DD8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xCE8DE4", Offset = "0xCE8DE4", VA = "0xCE8DE4")]
		public static UnityEngine.Vector2 ToV2(IntVector2 iv)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000325")]
	public struct Rectangle
	{
		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private IntVector location;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private IntVector size;

		[Token(Token = "0x17000281")]
		public IntVector Location
		{
			[Token(Token = "0x60012CD")]
			[Address(RVA = "0xDDE710", Offset = "0xDDE710", VA = "0xDDE710")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0xDDE720", Offset = "0xDDE720", VA = "0xDDE720")]
			set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public IntVector Size
		{
			[Token(Token = "0x60012CF")]
			[Address(RVA = "0xDDE72C", Offset = "0xDDE72C", VA = "0xDDE72C")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x60012D0")]
			[Address(RVA = "0xDDE73C", Offset = "0xDDE73C", VA = "0xDDE73C")]
			set
			{
			}
		}

		[Token(Token = "0x17000283")]
		public int X
		{
			[Token(Token = "0x60012D1")]
			[Address(RVA = "0xDDE748", Offset = "0xDDE748", VA = "0xDDE748")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000284")]
		public int Z
		{
			[Token(Token = "0x60012D2")]
			[Address(RVA = "0xDDE750", Offset = "0xDDE750", VA = "0xDDE750")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000285")]
		public int Width
		{
			[Token(Token = "0x60012D3")]
			[Address(RVA = "0xDDE758", Offset = "0xDDE758", VA = "0xDDE758")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000286")]
		public int Length
		{
			[Token(Token = "0x60012D4")]
			[Address(RVA = "0xDDE760", Offset = "0xDDE760", VA = "0xDDE760")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000287")]
		public int Left
		{
			[Token(Token = "0x60012D5")]
			[Address(RVA = "0xDDE768", Offset = "0xDDE768", VA = "0xDDE768")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000288")]
		public int Right
		{
			[Token(Token = "0x60012D6")]
			[Address(RVA = "0xDDE770", Offset = "0xDDE770", VA = "0xDDE770")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000289")]
		public int Back
		{
			[Token(Token = "0x60012D7")]
			[Address(RVA = "0xDDE780", Offset = "0xDDE780", VA = "0xDDE780")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028A")]
		public int Front
		{
			[Token(Token = "0x60012D8")]
			[Address(RVA = "0xDDE788", Offset = "0xDDE788", VA = "0xDDE788")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xDDE66C", Offset = "0xDDE66C", VA = "0xDDE66C")]
		public Rectangle(int x, int z, int width, int length)
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xDDE6FC", Offset = "0xDDE6FC", VA = "0xDDE6FC")]
		public Rectangle(IntVector location, IntVector size)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xDDE798", Offset = "0xDDE798", VA = "0xDDE798")]
		public void SetY(int y)
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xDDE7A0", Offset = "0xDDE7A0", VA = "0xDDE7A0")]
		public IntVector Center()
		{
			return default(IntVector);
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xDDE844", Offset = "0xDDE844", VA = "0xDDE844")]
		private static UnityEngine.Vector3 ToVector3(IntVector iv)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xDDE858", Offset = "0xDDE858", VA = "0xDDE858")]
		public UnityEngine.Vector3 CenterF()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xDDE89C", Offset = "0xDDE89C", VA = "0xDDE89C")]
		public bool Contains(Rectangle rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xDDE8F8", Offset = "0xDDE8F8", VA = "0xDDE8F8")]
		public bool Contains(IntVector Point)
		{
			return default(bool);
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xDDE93C", Offset = "0xDDE93C", VA = "0xDDE93C")]
		public bool Contains(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xDDE980", Offset = "0xDDE980", VA = "0xDDE980")]
		public static Rectangle Intersect(Rectangle a, Rectangle b)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xDDEA64", Offset = "0xDDEA64", VA = "0xDDEA64")]
		public bool IntersectsWith(Rectangle rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xDDEAC0", Offset = "0xDDEAC0", VA = "0xDDEAC0")]
		public static Rectangle ExpandBounds(Rectangle rect, int distance)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xDDEB04", Offset = "0xDDEB04", VA = "0xDDEB04")]
		public IntVector[] GetBorderPoints()
		{
			return null;
		}
	}
	[Token(Token = "0x2000326")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x50C27C", Offset = "0x50C27C")]
	public class MetaAttribute : Attribute
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayText;

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xC30754", Offset = "0xC30754", VA = "0xC30754")]
		public MetaAttribute(string displayText)
		{
		}
	}
}
namespace DungeonArchitect.Samples
{
	[Token(Token = "0x2000327")]
	public class SampleFindRoomDoorsController : MonoBehaviour
	{
		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform player;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GridDungeonConfig config;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GridDungeonQuery dungeonQuery;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject[] trackedDoorObjects;

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xAA3108", Offset = "0xAA3108", VA = "0xAA3108")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xAA31F4", Offset = "0xAA31F4", VA = "0xAA31F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xAA32FC", Offset = "0xAA32FC", VA = "0xAA32FC")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xAA340C", Offset = "0xAA340C", VA = "0xAA340C")]
		private void ProcessDoorObjects(GameObject[] doorObjects)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xAA3610", Offset = "0xAA3610", VA = "0xAA3610")]
		public SampleFindRoomDoorsController()
		{
		}
	}
}
namespace DungeonArchitect.Samples.Common
{
	[Token(Token = "0x2000328")]
	public class DAFPSMouseLook : MonoBehaviour
	{
		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mouseSensitivity;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform playerBody;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float angleUpDown;

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xA526E8", Offset = "0xA526E8", VA = "0xA526E8")]
		public void Start()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xA526F4", Offset = "0xA526F4", VA = "0xA526F4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xA52880", Offset = "0xA52880", VA = "0xA52880")]
		public DAFPSMouseLook()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class DAFPSMovement : MonoBehaviour
	{
		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpHeight;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CharacterController controller;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xA52890", Offset = "0xA52890", VA = "0xA52890")]
		private void Update()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xA52AB8", Offset = "0xA52AB8", VA = "0xA52AB8")]
		public DAFPSMovement()
		{
		}
	}
}
namespace DungeonArchitect.Samples.Navigation
{
	[Token(Token = "0x200032A")]
	public class NavigationDemoController : MonoBehaviour
	{
		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject player;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] npcs;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 spawnOffset;

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xE93ED0", Offset = "0xE93ED0", VA = "0xE93ED0")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xE93F94", Offset = "0xE93F94", VA = "0xE93F94")]
		private void TeleportToValidPlatform(GameObject obj)
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xE94294", Offset = "0xE94294", VA = "0xE94294")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xE94298", Offset = "0xE94298", VA = "0xE94298")]
		public NavigationDemoController()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class NavigationDemoNPC : MonoBehaviour
	{
		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NavMeshAgent agent;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xE942A0", Offset = "0xE942A0", VA = "0xE942A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xE9432C", Offset = "0xE9432C", VA = "0xE9432C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xE9444C", Offset = "0xE9444C", VA = "0xE9444C")]
		public NavigationDemoNPC()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class NavigationDemoPlayer : MonoBehaviour
	{
		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CharacterController character;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotateSpeed;

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xE94454", Offset = "0xE94454", VA = "0xE94454")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xE944B0", Offset = "0xE944B0", VA = "0xE944B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xE945BC", Offset = "0xE945BC", VA = "0xE945BC")]
		public NavigationDemoPlayer()
		{
		}
	}
}
namespace DungeonArchitect.Samples.InfinityCaves
{
	[Token(Token = "0x200032D")]
	public class InfinityCavesDemoController : MonoBehaviour
	{
		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InfinityDungeon dungeon;

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xCE6C1C", Offset = "0xCE6C1C", VA = "0xCE6C1C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xCE6D1C", Offset = "0xCE6D1C", VA = "0xCE6D1C")]
		public InfinityCavesDemoController()
		{
		}
	}
}
namespace DungeonArchitect.Samples.GridFlow
{
	[Token(Token = "0x200032E")]
	public class LockedDoor : MonoBehaviour
	{
		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform doorLeft;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform doorRight;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator animator;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string[] validKeys;

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x9E45EC", Offset = "0x9E45EC", VA = "0x9E45EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x9E46C8", Offset = "0x9E46C8", VA = "0x9E46C8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x9E4878", Offset = "0x9E4878", VA = "0x9E4878")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x9E46FC", Offset = "0x9E46FC", VA = "0x9E46FC")]
		private bool CanOpenDoor(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x9E481C", Offset = "0x9E481C", VA = "0x9E481C")]
		private void OpenDoor()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x9E487C", Offset = "0x9E487C", VA = "0x9E487C")]
		private void CloseDoor()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x9E48D8", Offset = "0x9E48D8", VA = "0x9E48D8")]
		public LockedDoor()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class GridFlowGameController : MonoBehaviour
	{
		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xB50544", Offset = "0xB50544", VA = "0xB50544")]
		private void Start()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xB50650", Offset = "0xB50650", VA = "0xB50650")]
		private void Update()
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xB50654", Offset = "0xB50654", VA = "0xB50654")]
		public GridFlowGameController()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class GridFlowPlayerController : MonoBehaviour
	{
		[Token(Token = "0x6001305")]
		[Address(RVA = "0xD3F498", Offset = "0xD3F498", VA = "0xD3F498")]
		public GridFlowPlayerController()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public enum InventoryItemType
	{
		[Token(Token = "0x400109C")]
		None,
		[Token(Token = "0x400109D")]
		Key
	}
	[Serializable]
	[Token(Token = "0x2000332")]
	public class InventoryItem
	{
		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public InventoryItemType itemType;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string itemId;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite icon;

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xCEC58C", Offset = "0xCEC58C", VA = "0xCEC58C")]
		public InventoryItem()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class Inventory : MonoBehaviour
	{
		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventorySlot[] slots;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InventoryUI inventoryUI;

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xCEC284", Offset = "0xCEC284", VA = "0xCEC284")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xCEC308", Offset = "0xCEC308", VA = "0xCEC308")]
		public bool Add(InventoryItem item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xCEC4E4", Offset = "0xCEC4E4", VA = "0xCEC4E4")]
		public bool ContainsItem(string itemId)
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xCEC584", Offset = "0xCEC584", VA = "0xCEC584")]
		public Inventory()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class InventorySlot : MonoBehaviour
	{
		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventoryItem item;

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xCEC594", Offset = "0xCEC594", VA = "0xCEC594")]
		public InventorySlot()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class PickableItem : MonoBehaviour
	{
		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventoryItemType itemType;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite icon;

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x99C770", Offset = "0x99C770", VA = "0x99C770")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x99C8E0", Offset = "0x99C8E0", VA = "0x99C8E0")]
		private string GetItemId()
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x99C9A0", Offset = "0x99C9A0", VA = "0x99C9A0")]
		public PickableItem()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class InventoryUI : MonoBehaviour
	{
		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] slotImages;

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xCEC408", Offset = "0xCEC408", VA = "0xCEC408")]
		public void UpdateUI(Inventory inventory)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xCEC604", Offset = "0xCEC604", VA = "0xCEC604")]
		public InventoryUI()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class RandomTreeTransformRule : TransformationRule
	{
		[Token(Token = "0x6001311")]
		[Address(RVA = "0xDDBDB0", Offset = "0xDDBDB0", VA = "0xDDBDB0", Slot = "4")]
		public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xDDBECC", Offset = "0xDDBECC", VA = "0xDDBECC")]
		public RandomTreeTransformRule()
		{
		}
	}
}
namespace DungeonArchitect.Samples.CircularCity
{
	[Token(Token = "0x2000338")]
	public class CircularCityBuildingHeightModifier : DungeonEventListener
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve curve;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxScale;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minScale;

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x8E4418", Offset = "0x8E4418", VA = "0x8E4418", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x8E4854", Offset = "0x8E4854", VA = "0x8E4854")]
		public CircularCityBuildingHeightModifier()
		{
		}
	}
}
namespace DungeonArchitect.Utils
{
	[Token(Token = "0x2000339")]
	public class Blackboard
	{
		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BlackboardDatabase<int> intEntries;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BlackboardDatabase<float> floatEntries;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BlackboardDatabase<string> stringEntries;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BlackboardDatabase<UnityEngine.Vector3> vectorEntries;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BlackboardDatabase<IntVector> intVectorEntries;

		[Token(Token = "0x1700028B")]
		public BlackboardDatabase<int> IntEntries
		{
			[Token(Token = "0x6001315")]
			[Address(RVA = "0x9BE1C4", Offset = "0x9BE1C4", VA = "0x9BE1C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028C")]
		public BlackboardDatabase<float> FloatEntries
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0x9BE1CC", Offset = "0x9BE1CC", VA = "0x9BE1CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028D")]
		public BlackboardDatabase<string> StringEntries
		{
			[Token(Token = "0x6001317")]
			[Address(RVA = "0x9BE1D4", Offset = "0x9BE1D4", VA = "0x9BE1D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		public BlackboardDatabase<UnityEngine.Vector3> VectorEntries
		{
			[Token(Token = "0x6001318")]
			[Address(RVA = "0x9BE1DC", Offset = "0x9BE1DC", VA = "0x9BE1DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028F")]
		public BlackboardDatabase<IntVector> IntVectorEntries
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x9BE1E4", Offset = "0x9BE1E4", VA = "0x9BE1E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x9BE1EC", Offset = "0x9BE1EC", VA = "0x9BE1EC")]
		public Blackboard()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class BlackboardDatabase<T>
	{
		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T defaultValue;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<string, T> database;

		[Token(Token = "0x600131B")]
		public BlackboardDatabase(T defaultValue)
		{
		}

		[Token(Token = "0x600131C")]
		public void SetValue(string key, T value)
		{
		}

		[Token(Token = "0x600131D")]
		public T GetValue(string key)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200033B")]
	public class ColorUtils
	{
		[Token(Token = "0x600131E")]
		[Address(RVA = "0x8E824C", Offset = "0x8E824C", VA = "0x8E824C")]
		public static Color BrightenColor(Color color, float saturationMultiplier, float brightnessMultiplier)
		{
			return default(Color);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x8E82C4", Offset = "0x8E82C4", VA = "0x8E82C4")]
		public ColorUtils()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class DebugDrawUtils
	{
		[Token(Token = "0x6001320")]
		[Address(RVA = "0xA53AE4", Offset = "0xA53AE4", VA = "0xA53AE4")]
		public static void DrawBounds(Rectangle bounds, Color color, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xA53DA8", Offset = "0xA53DA8", VA = "0xA53DA8")]
		public static void DrawMarker(PropSocket marker, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xA53E30", Offset = "0xA53E30", VA = "0xA53E30")]
		public static void DrawPoint(UnityEngine.Vector3 position, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xA53E84", Offset = "0xA53E84", VA = "0xA53E84")]
		private static UnityEngine.Vector3 FlipFor2D(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xA53C74", Offset = "0xA53C74", VA = "0xA53C74")]
		public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Color color, float duration, bool depthTest, bool mode2D)
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xA53E94", Offset = "0xA53E94", VA = "0xA53E94")]
		private static UnityEngine.Vector3 GetPointOnCircle(float angle)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xA53ED8", Offset = "0xA53ED8", VA = "0xA53ED8")]
		public static void DrawCircle(UnityEngine.Vector3 center, float radius, Color color)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xA53EFC", Offset = "0xA53EFC", VA = "0xA53EFC")]
		public static void DrawCircle(UnityEngine.Vector3 center, float radius, Color color, float segmentMultiplier)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xA540C0", Offset = "0xA540C0", VA = "0xA540C0")]
		public DebugDrawUtils()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class DungeonConstants
	{
		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string ST_FENCE;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string ST_FENCESEPARATOR;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string ST_DOOR;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string ST_DOOR2D;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string ST_DOOR2D_90;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string ST_WALL;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string ST_WALL2D;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string ST_WALLSEPARATOR;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string ST_GROUND;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string ST_GROUND2D;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string ST_STAIR;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string ST_STAIR2X;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string ST_WALLHALF;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string ST_WALLHALFSEPARATOR;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string ST_NONE;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string ST_ROOMWALL;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string ST_ROOMWALLSEPARATOR;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string ST_ROOMOPENSPACE;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string ST_LIGHT;

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x7A7920", Offset = "0x7A7920", VA = "0x7A7920")]
		public DungeonConstants()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class GraphUtils
	{
		[Token(Token = "0x600132B")]
		[Address(RVA = "0x7903AC", Offset = "0x7903AC", VA = "0x7903AC")]
		private static GraphNode[] GetDirectionalNodes(GraphPin pin, bool isIncoming)
		{
			return null;
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x7906B8", Offset = "0x7906B8", VA = "0x7906B8")]
		private static GraphNode[] GetDirectionalNodes(GraphNode hostNode, bool isIncoming)
		{
			return null;
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x7909DC", Offset = "0x7909DC", VA = "0x7909DC")]
		public static GraphNode[] GetIncomingNodes(GraphPin pin)
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x7909E4", Offset = "0x7909E4", VA = "0x7909E4")]
		public static GraphNode[] GetOutgoingNodes(GraphPin pin)
		{
			return null;
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x7909EC", Offset = "0x7909EC", VA = "0x7909EC")]
		public static GraphNode[] GetIncomingNodes(GraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x7909F4", Offset = "0x7909F4", VA = "0x7909F4")]
		public static GraphNode[] GetOutgoingNodes(GraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x7909FC", Offset = "0x7909FC", VA = "0x7909FC")]
		public GraphUtils()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class InstanceCache
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, object> InstanceByType;

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xCE8270", Offset = "0xCE8270", VA = "0xCE8270")]
		public object GetInstance(string typeName)
		{
			return null;
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xCE839C", Offset = "0xCE839C", VA = "0xCE839C")]
		public InstanceCache()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000340")]
	public class KeyValueDataEntryBase
	{
		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string key;

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xCEE894", Offset = "0xCEE894", VA = "0xCEE894", Slot = "4")]
		public virtual object GetValue()
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xCEE89C", Offset = "0xCEE89C", VA = "0xCEE89C", Slot = "5")]
		public virtual void SetValue(object value)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xCEE8A0", Offset = "0xCEE8A0", VA = "0xCEE8A0")]
		public KeyValueDataEntryBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000341")]
	public class KeyValueDataEntryTyped<T> : KeyValueDataEntryBase
	{
		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public T value;

		[Token(Token = "0x6001337")]
		public override object GetValue()
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		public override void SetValue(object value)
		{
		}

		[Token(Token = "0x6001339")]
		public KeyValueDataEntryTyped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000342")]
	public class KeyValueDataEntryFloat : KeyValueDataEntryTyped<float>
	{
		[Token(Token = "0x600133A")]
		[Address(RVA = "0xCEE8A8", Offset = "0xCEE8A8", VA = "0xCEE8A8")]
		public KeyValueDataEntryFloat()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000343")]
	public class KeyValueDataEntryInt : KeyValueDataEntryTyped<int>
	{
		[Token(Token = "0x600133B")]
		[Address(RVA = "0xCEE8F4", Offset = "0xCEE8F4", VA = "0xCEE8F4")]
		public KeyValueDataEntryInt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000344")]
	public class KeyValueDataEntryString : KeyValueDataEntryTyped<string>
	{
		[Token(Token = "0x600133C")]
		[Address(RVA = "0xCEE940", Offset = "0xCEE940", VA = "0xCEE940")]
		public KeyValueDataEntryString()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000345")]
	public class KeyValueDataEntryVector3 : KeyValueDataEntryTyped<UnityEngine.Vector3>
	{
		[Token(Token = "0x600133D")]
		[Address(RVA = "0xCEE9D8", Offset = "0xCEE9D8", VA = "0xCEE9D8")]
		public KeyValueDataEntryVector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000346")]
	public class KeyValueDataEntryVector2 : KeyValueDataEntryTyped<UnityEngine.Vector2>
	{
		[Token(Token = "0x600133E")]
		[Address(RVA = "0xCEE98C", Offset = "0xCEE98C", VA = "0xCEE98C")]
		public KeyValueDataEntryVector2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000347")]
	public class KeyValueData
	{
		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<KeyValueDataEntryFloat> dataFloat;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<KeyValueDataEntryInt> dataInt;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<KeyValueDataEntryString> dataString;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<KeyValueDataEntryVector3> dataVector3;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<KeyValueDataEntryVector2> dataVector2;

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xCEE1D8", Offset = "0xCEE1D8", VA = "0xCEE1D8")]
		public bool GetFloat(string key, ref float value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xCEE240", Offset = "0xCEE240", VA = "0xCEE240")]
		public bool GetInt(string key, ref int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xCEE2A8", Offset = "0xCEE2A8", VA = "0xCEE2A8")]
		public bool GetString(string key, ref string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xCEE310", Offset = "0xCEE310", VA = "0xCEE310")]
		public bool GetVector3(string key, ref UnityEngine.Vector3 value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xCEE378", Offset = "0xCEE378", VA = "0xCEE378")]
		public bool GetVector2(string key, ref UnityEngine.Vector2 value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xCEE3E0", Offset = "0xCEE3E0", VA = "0xCEE3E0")]
		public void Set(string key, float value)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xCEE484", Offset = "0xCEE484", VA = "0xCEE484")]
		public void Set(string key, int value)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xCEE520", Offset = "0xCEE520", VA = "0xCEE520")]
		public void Set(string key, string value)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xCEE588", Offset = "0xCEE588", VA = "0xCEE588")]
		public void Set(string key, UnityEngine.Vector3 value)
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xCEE640", Offset = "0xCEE640", VA = "0xCEE640")]
		public void Set(string key, UnityEngine.Vector2 value)
		{
		}

		[Token(Token = "0x6001349")]
		private void SetValue<T>(List<T> data, string key, object value) where T : KeyValueDataEntryBase, new()
		{
		}

		[Token(Token = "0x600134A")]
		private bool GetValue<TEntry, TValue>(List<TEntry> data, string key, ref TValue value) where TEntry : KeyValueDataEntryBase
		{
			return default(bool);
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xCEE6E0", Offset = "0xCEE6E0", VA = "0xCEE6E0")]
		public KeyValueData()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class MathUtils
	{
		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int INVALID_LOCATION;

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xC27444", Offset = "0xC27444", VA = "0xC27444")]
		public static Rectangle Copy(Rectangle other)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xC274CC", Offset = "0xC274CC", VA = "0xC274CC")]
		public static UnityEngine.Vector3 Divide(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xC274DC", Offset = "0xC274DC", VA = "0xC274DC")]
		public static UnityEngine.Vector3 ToVector3(IntVector v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xC274F0", Offset = "0xC274F0", VA = "0xC274F0")]
		public static IntVector WorldToGrid(UnityEngine.Vector3 WorldCoord, UnityEngine.Vector3 GridCellSize)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xC2760C", Offset = "0xC2760C", VA = "0xC2760C")]
		public static UnityEngine.Vector3 GridToWorld(UnityEngine.Vector3 GridCellSize, IntVector v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xC276AC", Offset = "0xC276AC", VA = "0xC276AC")]
		public static UnityEngine.Vector3 GridToWorld(UnityEngine.Vector3 GridCellSize, UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xC2758C", Offset = "0xC2758C", VA = "0xC2758C")]
		public static IntVector ToIntVector(UnityEngine.Vector3 v)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xC276BC", Offset = "0xC276BC", VA = "0xC276BC")]
		public static UnityEngine.Vector3 V3FloorToInt(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xC27718", Offset = "0xC27718", VA = "0xC27718")]
		public static UnityEngine.Vector3 V3RoundToInt(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xC27774", Offset = "0xC27774", VA = "0xC27774")]
		public static IntVector RoundToIntVector(UnityEngine.Vector3 v)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xC277F4", Offset = "0xC277F4", VA = "0xC277F4")]
		public static UnityEngine.Vector3 SnapToGrid(UnityEngine.Vector3 position, UnityEngine.Vector3 gridCellSize)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xC27898", Offset = "0xC27898", VA = "0xC27898")]
		public static UnityEngine.Vector3 SnapToGrid(UnityEngine.Vector3 position, UnityEngine.Vector3 gridCellSize, bool useRounding)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xC27950", Offset = "0xC27950", VA = "0xC27950")]
		public static bool Intersects(Rect a, Rect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xC27A18", Offset = "0xC27A18", VA = "0xC27A18")]
		public static bool Intersects(Rect outer, GraphLink link)
		{
			return default(bool);
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xC27C40", Offset = "0xC27C40", VA = "0xC27C40")]
		public static UnityEngine.Vector2 ClosestPointOnRect(Rect rect, UnityEngine.Vector2 p)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xC27CE4", Offset = "0xC27CE4", VA = "0xC27CE4")]
		public static Rect ExpandRect(Rect bounds, float amount)
		{
			return default(Rect);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xC27D94", Offset = "0xC27D94", VA = "0xC27D94")]
		public static UnityEngine.Vector2 ClampToRect(UnityEngine.Vector2 position, Rect bounds)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xC27E58", Offset = "0xC27E58", VA = "0xC27E58")]
		public static void FlipYZ(ref Bounds bounds)
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xC27F10", Offset = "0xC27F10", VA = "0xC27F10")]
		public static UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 bounds)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xC27F20", Offset = "0xC27F20", VA = "0xC27F20")]
		public static IntVector FlipYZ(IntVector bounds)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xC27F30", Offset = "0xC27F30", VA = "0xC27F30")]
		public static void Abs(ref UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x6001361")]
		public static void Shuffle<T>(List<T> Array, System.Random Random)
		{
		}

		[Token(Token = "0x6001362")]
		public static void Shuffle<T>(T[] Array, System.Random Random)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xC27F4C", Offset = "0xC27F4C", VA = "0xC27F4C")]
		public static int[] GetShuffledIndices(int Count, System.Random Random)
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xC28080", Offset = "0xC28080", VA = "0xC28080")]
		public static Bounds TransformBounds(Matrix4x4 transform, Bounds bounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xC282A4", Offset = "0xC282A4", VA = "0xC282A4")]
		public static Bounds TransformBoundsX(Matrix4x4 transform, Bounds localBounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xC284B0", Offset = "0xC284B0", VA = "0xC284B0")]
		public static bool V3Equals(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xC28558", Offset = "0xC28558", VA = "0xC28558")]
		public static bool V3Equals(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xC28628", Offset = "0xC28628", VA = "0xC28628")]
		public static byte ToByte(float value01)
		{
			return default(byte);
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xC28654", Offset = "0xC28654", VA = "0xC28654")]
		public MathUtils()
		{
		}
	}
	[Token(Token = "0x2000349")]
	public class Matrix
	{
		[Token(Token = "0x600136B")]
		[Address(RVA = "0xC2462C", Offset = "0xC2462C", VA = "0xC2462C")]
		public static UnityEngine.Vector3 GetTranslation(ref Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xC24DA8", Offset = "0xC24DA8", VA = "0xC24DA8")]
		public static void SetTranslation(ref Matrix4x4 matrix, UnityEngine.Vector3 translate)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xC286B0", Offset = "0xC286B0", VA = "0xC286B0")]
		public static void SetTransform(out Matrix4x4 transform, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale)
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xC2307C", Offset = "0xC2307C", VA = "0xC2307C")]
		public static Quaternion GetRotation(ref Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xC28710", Offset = "0xC28710", VA = "0xC28710")]
		public static UnityEngine.Vector3 GetScale(ref Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xC28718", Offset = "0xC28718", VA = "0xC28718")]
		public static void DecomposeMatrix(ref Matrix4x4 matrix, out UnityEngine.Vector3 localPosition, out Quaternion localRotation, out UnityEngine.Vector3 localScale)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xC28774", Offset = "0xC28774", VA = "0xC28774")]
		public static void SetTransformFromMatrix(Transform transform, ref Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xC287D4", Offset = "0xC287D4", VA = "0xC287D4")]
		public static Matrix4x4 Copy(Matrix4x4 In)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xC28858", Offset = "0xC28858", VA = "0xC28858")]
		public static Matrix4x4 FromGameTransform(Transform t)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xC28924", Offset = "0xC28924", VA = "0xC28924")]
		public Matrix()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class PMRandom
	{
		[Token(Token = "0x40010CD")]
		private const int A = 16807;

		[Token(Token = "0x40010CE")]
		private const int M = int.MaxValue;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint seed;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private System.Random random;

		[Token(Token = "0x17000290")]
		public System.Random UniformRandom
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0xC4C3E8", Offset = "0xC4C3E8", VA = "0xC4C3E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xC4C3F0", Offset = "0xC4C3F0", VA = "0xC4C3F0")]
		public PMRandom()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xC4C4E4", Offset = "0xC4C4E4", VA = "0xC4C4E4")]
		public PMRandom(uint seed)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xC4C46C", Offset = "0xC4C46C", VA = "0xC4C46C")]
		public void Initialize(uint seed)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xC4C56C", Offset = "0xC4C56C", VA = "0xC4C56C")]
		public float NextGaussianFloat()
		{
			return default(float);
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xC4C640", Offset = "0xC4C640", VA = "0xC4C640")]
		public float NextGaussianFloat(float mean, float stdDev)
		{
			return default(float);
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xC4C66C", Offset = "0xC4C66C", VA = "0xC4C66C")]
		public UnityEngine.Vector2 RandomPointOnCircle()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xC4C6CC", Offset = "0xC4C6CC", VA = "0xC4C6CC")]
		public float GetNextUniformFloat()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200034B")]
	public class TexturedMaterialInstances
	{
		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Shader shader;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Texture2D, Material> materialsByTexture;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xD7BCB8", Offset = "0xD7BCB8", VA = "0xD7BCB8")]
		public TexturedMaterialInstances(Shader shader)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xD7BD58", Offset = "0xD7BD58", VA = "0xD7BD58")]
		public Material GetMaterial(Texture2D texture)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Utils.Noise
{
	[Token(Token = "0x200034C")]
	public interface INoiseTable<T>
	{
		[Token(Token = "0x600137F")]
		void Init(int InSize, System.Random random);

		[Token(Token = "0x6001380")]
		float GetNoise(float u, float v);

		[Token(Token = "0x6001381")]
		NoiseTableCell<T> GetCell(float x, float y);
	}
	[Token(Token = "0x200034D")]
	public interface INoisePolicy<T>
	{
		[Token(Token = "0x6001382")]
		float Sample(float x, float y, INoiseTable<T> NoiseTable);

		[Token(Token = "0x6001383")]
		T GetRandom(System.Random random);
	}
	[Token(Token = "0x200034E")]
	public struct NoiseTableCell<T>
	{
		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N00;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N10;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N01;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N11;
	}
	[Token(Token = "0x200034F")]
	public abstract class NoiseTable<T> : INoiseTable<T>
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> data;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected INoisePolicy<T> noisePolicy;

		[Token(Token = "0x6001384")]
		protected abstract INoisePolicy<T> CreateNoisePolicy();

		[Token(Token = "0x6001385")]
		public void Init(int size, System.Random random)
		{
		}

		[Token(Token = "0x6001386")]
		public NoiseTableCell<T> GetCell(float x, float y)
		{
			return default(NoiseTableCell<T>);
		}

		[Token(Token = "0x6001387")]
		public float GetNoise(float u, float v)
		{
			return default(float);
		}

		[Token(Token = "0x6001388")]
		public float GetNoiseFBM(UnityEngine.Vector2 p, int octaves)
		{
			return default(float);
		}

		[Token(Token = "0x6001389")]
		private T GetTableData(int x, int y)
		{
			return (T)null;
		}

		[Token(Token = "0x600138A")]
		private int GetSize()
		{
			return default(int);
		}

		[Token(Token = "0x600138B")]
		private int IDX(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x600138C")]
		protected NoiseTable()
		{
		}
	}
	[Token(Token = "0x2000350")]
	public class GradientNoisePolicy : INoisePolicy<UnityEngine.Vector2>
	{
		[Token(Token = "0x600138D")]
		[Address(RVA = "0x77F254", Offset = "0x77F254", VA = "0x77F254", Slot = "4")]
		public float Sample(float x, float y, INoiseTable<UnityEngine.Vector2> NoiseTable)
		{
			return default(float);
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x77F3F8", Offset = "0x77F3F8", VA = "0x77F3F8", Slot = "5")]
		public UnityEngine.Vector2 GetRandom(System.Random random)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x77F448", Offset = "0x77F448", VA = "0x77F448")]
		public GradientNoisePolicy()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class GradientNoiseTable : NoiseTable<UnityEngine.Vector2>
	{
		[Token(Token = "0x6001390")]
		[Address(RVA = "0x77F450", Offset = "0x77F450", VA = "0x77F450", Slot = "7")]
		protected override INoisePolicy<UnityEngine.Vector2> CreateNoisePolicy()
		{
			return null;
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x77F4A8", Offset = "0x77F4A8", VA = "0x77F4A8")]
		public GradientNoiseTable()
		{
		}
	}
}
namespace DungeonArchitect.UI
{
	[Token(Token = "0x2000352")]
	public interface UIPlatform
	{
		[Token(Token = "0x17000291")]
		UIDragDrop DragDrop
		{
			[Token(Token = "0x6001398")]
			get;
		}

		[Token(Token = "0x17000292")]
		double timeSinceStartup
		{
			[Token(Token = "0x6001399")]
			get;
		}

		[Token(Token = "0x17000293")]
		string clipboardText
		{
			[Token(Token = "0x600139A")]
			get;
			[Token(Token = "0x600139B")]
			set;
		}

		[Token(Token = "0x6001392")]
		void ShowObjectProperty(object obj);

		[Token(Token = "0x6001393")]
		void ShowObjectProperties(object[] obj);

		[Token(Token = "0x6001394")]
		string GetAssetPath(object obj);

		[Token(Token = "0x6001395")]
		void MarkAssetDirty(object obj);

		[Token(Token = "0x6001396")]
		void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object assetObject);

		[Token(Token = "0x6001397")]
		IContextMenu CreateContextMenu();
	}
	[Token(Token = "0x2000353")]
	public interface IContextMenu
	{
		[Token(Token = "0x600139C")]
		void AddItem(string path, ContextMenuFunction func);

		[Token(Token = "0x600139D")]
		void AddItem(string path, ContextMenuFunctionUserData func, object userData);

		[Token(Token = "0x600139E")]
		void AddSeparator(string path);

		[Token(Token = "0x600139F")]
		void Show();
	}
	[Token(Token = "0x2000354")]
	public enum UIDragDropVisualMode
	{
		[Token(Token = "0x40010DB")]
		None,
		[Token(Token = "0x40010DC")]
		Copy,
		[Token(Token = "0x40010DD")]
		Generic,
		[Token(Token = "0x40010DE")]
		Move,
		[Token(Token = "0x40010DF")]
		Reject
	}
	[Token(Token = "0x2000355")]
	public interface UIDragDrop
	{
		[Token(Token = "0x60013A0")]
		void PrepareStartDrag();

		[Token(Token = "0x60013A1")]
		void StartDrag(string title);

		[Token(Token = "0x60013A2")]
		void SetVisualMode(UIDragDropVisualMode visualMode);

		[Token(Token = "0x60013A3")]
		void AcceptDrag();
	}
	[Token(Token = "0x2000356")]
	public delegate void ContextMenuFunction();
	[Token(Token = "0x2000357")]
	public delegate void ContextMenuFunctionUserData(object userData);
	[Token(Token = "0x2000358")]
	public class NullPlatform : UIPlatform
	{
		[Token(Token = "0x17000294")]
		public UIDragDrop DragDrop
		{
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0xE95EBC", Offset = "0xE95EBC", VA = "0xE95EBC", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000295")]
		public double timeSinceStartup
		{
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0xE95EC4", Offset = "0xE95EC4", VA = "0xE95EC4", Slot = "11")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000296")]
		public string clipboardText
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xE95ECC", Offset = "0xE95ECC", VA = "0xE95ECC", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0xE95F10", Offset = "0xE95F10", VA = "0xE95F10", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xE95E60", Offset = "0xE95E60", VA = "0xE95E60", Slot = "4")]
		public void ShowObjectProperty(object obj)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xE95E64", Offset = "0xE95E64", VA = "0xE95E64", Slot = "5")]
		public void ShowObjectProperties(object[] obj)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xE95E68", Offset = "0xE95E68", VA = "0xE95E68", Slot = "6")]
		public string GetAssetPath(object obj)
		{
			return null;
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xE95EAC", Offset = "0xE95EAC", VA = "0xE95EAC", Slot = "7")]
		public void MarkAssetDirty(object obj)
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xE95EB0", Offset = "0xE95EB0", VA = "0xE95EB0", Slot = "8")]
		public void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object assetObject)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xE95EB4", Offset = "0xE95EB4", VA = "0xE95EB4", Slot = "9")]
		public IContextMenu CreateContextMenu()
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xE95F14", Offset = "0xE95F14", VA = "0xE95F14")]
		public NullPlatform()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public interface UIRenderer
	{
		[Token(Token = "0x17000297")]
		Color color
		{
			[Token(Token = "0x60013D5")]
			get;
			[Token(Token = "0x60013D6")]
			set;
		}

		[Token(Token = "0x17000298")]
		Color backgroundColor
		{
			[Token(Token = "0x60013D7")]
			get;
			[Token(Token = "0x60013D8")]
			set;
		}

		[Token(Token = "0x17000299")]
		UIStyleManager StyleManager
		{
			[Token(Token = "0x60013D9")]
			get;
		}

		[Token(Token = "0x60013B7")]
		void BeginGroup(Rect bounds);

		[Token(Token = "0x60013B8")]
		void EndGroup();

		[Token(Token = "0x60013B9")]
		bool Button(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60013BA")]
		bool Button(Rect bounds, string text, GUIStyle style);

		[Token(Token = "0x60013BB")]
		bool Button(Rect bounds, string text);

		[Token(Token = "0x60013BC")]
		void Box(Rect bounds, string text);

		[Token(Token = "0x60013BD")]
		void Box(Rect bounds, GUIContent content);

		[Token(Token = "0x60013BE")]
		void Box(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60013BF")]
		void Label(Rect bounds, string text, GUIStyle style);

		[Token(Token = "0x60013C0")]
		void Label(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60013C1")]
		UnityEngine.Vector2 BeginScrollView(Rect bounds, UnityEngine.Vector2 scrollPosition, Rect viewRect);

		[Token(Token = "0x60013C2")]
		void DrawTexture(Rect bounds, Texture texture);

		[Token(Token = "0x60013C3")]
		void DrawTexture(Rect bounds, Texture texture, ScaleMode scaleMode, bool alphaBlend, Color color);

		[Token(Token = "0x60013C4")]
		void EndScrollView(bool handleScrollWheel);

		[Token(Token = "0x60013C5")]
		void BeginGUI();

		[Token(Token = "0x60013C6")]
		void EndGUI();

		[Token(Token = "0x60013C7")]
		void DrawLine(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1);

		[Token(Token = "0x60013C8")]
		void DrawLine(Color color, UnityEngine.Vector3 v0, UnityEngine.Vector3 v1);

		[Token(Token = "0x60013C9")]
		void DrawPolyLine(params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CA")]
		void DrawPolyLine(Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CB")]
		void DrawAAPolyLine(float thickness, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CC")]
		void DrawAAPolyLine(float thickness, Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CD")]
		void DrawAAPolyLine(Texture2D texture, float thickness, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CE")]
		void DrawAAPolyLine(Texture2D texture, float thickness, Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013CF")]
		void DrawBezier(UnityEngine.Vector3 startPos, UnityEngine.Vector3 endPos, UnityEngine.Vector3 startTangent, UnityEngine.Vector3 endTangent, Color lineColor, Texture2D texture, float lineThickness);

		[Token(Token = "0x60013D0")]
		void DrawAAConvexPolygon(params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013D1")]
		void DrawAAConvexPolygon(Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60013D2")]
		void DrawRect(Rect bounds, Color color);

		[Token(Token = "0x60013D3")]
		void AddCursorRect(Rect bounds, UICursorType cursorType);

		[Token(Token = "0x60013D4")]
		object GetResource<T>(string path);
	}
	[Token(Token = "0x200035A")]
	public interface UIStyleManager
	{
		[Token(Token = "0x60013DA")]
		GUIStyle GetToolbarButtonStyle();

		[Token(Token = "0x60013DB")]
		GUIStyle GetButtonStyle();

		[Token(Token = "0x60013DC")]
		GUIStyle GetBoxStyle();

		[Token(Token = "0x60013DD")]
		GUIStyle GetLabelStyle();

		[Token(Token = "0x60013DE")]
		GUIStyle GetBoldLabelStyle();

		[Token(Token = "0x60013DF")]
		Font GetFontStandard();

		[Token(Token = "0x60013E0")]
		Font GetFontBold();

		[Token(Token = "0x60013E1")]
		Font GetFontMini();
	}
	[Token(Token = "0x200035B")]
	public delegate void OnWidgetFocus(IWidget widget);
	[Token(Token = "0x200035C")]
	public delegate void OnWidgetLostFocus(IWidget widget);
	[Token(Token = "0x200035D")]
	public delegate void OnDragEvent();
	[Token(Token = "0x200035E")]
	public abstract class UISystem
	{
		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5111E8", Offset = "0x5111E8")]
		private IWidget <FocusedWidget>k__BackingField;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5111F8", Offset = "0x5111F8")]
		private bool <IsDragDrop>k__BackingField;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511208", Offset = "0x511208")]
		private IWidget <Layout>k__BackingField;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511218", Offset = "0x511218")]
		private UIPlatform <Platform>k__BackingField;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511228", Offset = "0x511228")]
		private UIStyleManager <StyleManager>k__BackingField;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511238", Offset = "0x511238")]
		private UIUndoSystem <Undo>k__BackingField;

		[Token(Token = "0x1700029A")]
		public IWidget FocusedWidget
		{
			[Token(Token = "0x60013EE")]
			[Address(RVA = "0xBE5410", Offset = "0xBE5410", VA = "0xBE5410")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A30", Offset = "0x518A30")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013EF")]
			[Address(RVA = "0xBE5418", Offset = "0xBE5418", VA = "0xBE5418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A40", Offset = "0x518A40")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029B")]
		public bool IsDragDrop
		{
			[Token(Token = "0x60013F0")]
			[Address(RVA = "0xBE5420", Offset = "0xBE5420", VA = "0xBE5420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A50", Offset = "0x518A50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013F1")]
			[Address(RVA = "0xBE5428", Offset = "0xBE5428", VA = "0xBE5428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A60", Offset = "0x518A60")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public IWidget Layout
		{
			[Token(Token = "0x60013F2")]
			[Address(RVA = "0xBE5434", Offset = "0xBE5434", VA = "0xBE5434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A70", Offset = "0x518A70")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F3")]
			[Address(RVA = "0xBE543C", Offset = "0xBE543C", VA = "0xBE543C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A80", Offset = "0x518A80")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public UIPlatform Platform
		{
			[Token(Token = "0x60013F4")]
			[Address(RVA = "0xBE5444", Offset = "0xBE5444", VA = "0xBE5444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518A90", Offset = "0x518A90")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F5")]
			[Address(RVA = "0xBE544C", Offset = "0xBE544C", VA = "0xBE544C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AA0", Offset = "0x518AA0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public UIStyleManager StyleManager
		{
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xBE5454", Offset = "0xBE5454", VA = "0xBE5454")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AB0", Offset = "0x518AB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F7")]
			[Address(RVA = "0xBE545C", Offset = "0xBE545C", VA = "0xBE545C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AC0", Offset = "0x518AC0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public UIUndoSystem Undo
		{
			[Token(Token = "0x60013F8")]
			[Address(RVA = "0xBE5464", Offset = "0xBE5464", VA = "0xBE5464")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AD0", Offset = "0x518AD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F9")]
			[Address(RVA = "0xBE546C", Offset = "0xBE546C", VA = "0xBE546C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AE0", Offset = "0x518AE0")]
			private set
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event OnWidgetFocus WidgetFocused
		{
			[Token(Token = "0x6001404")]
			[Address(RVA = "0xBE58A8", Offset = "0xBE58A8", VA = "0xBE58A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518AF0", Offset = "0x518AF0")]
			add
			{
			}
			[Token(Token = "0x6001405")]
			[Address(RVA = "0xBE5948", Offset = "0xBE5948", VA = "0xBE5948")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B00", Offset = "0x518B00")]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event OnWidgetLostFocus WidgetLostFocus
		{
			[Token(Token = "0x6001406")]
			[Address(RVA = "0xBE59E8", Offset = "0xBE59E8", VA = "0xBE59E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B10", Offset = "0x518B10")]
			add
			{
			}
			[Token(Token = "0x6001407")]
			[Address(RVA = "0xBE5A88", Offset = "0xBE5A88", VA = "0xBE5A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B20", Offset = "0x518B20")]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event OnDragEvent DragStart
		{
			[Token(Token = "0x6001408")]
			[Address(RVA = "0xBE5B28", Offset = "0xBE5B28", VA = "0xBE5B28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B30", Offset = "0x518B30")]
			add
			{
			}
			[Token(Token = "0x6001409")]
			[Address(RVA = "0xBE5BC8", Offset = "0xBE5BC8", VA = "0xBE5BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B40", Offset = "0x518B40")]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event OnDragEvent DragEnd
		{
			[Token(Token = "0x600140A")]
			[Address(RVA = "0xBE5C68", Offset = "0xBE5C68", VA = "0xBE5C68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B50", Offset = "0x518B50")]
			add
			{
			}
			[Token(Token = "0x600140B")]
			[Address(RVA = "0xBE5D08", Offset = "0xBE5D08", VA = "0xBE5D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B60", Offset = "0x518B60")]
			remove
			{
			}
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xBE5474", Offset = "0xBE5474", VA = "0xBE5474")]
		public UISystem()
		{
		}

		[Token(Token = "0x60013FB")]
		protected abstract UIPlatform CreatePlatformInstance();

		[Token(Token = "0x60013FC")]
		protected abstract UIStyleManager CreateStyleManagerInstance();

		[Token(Token = "0x60013FD")]
		protected abstract UIUndoSystem CreateUndoSystemInstance();

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xBE5564", Offset = "0xBE5564", VA = "0xBE5564")]
		public void Draw(UIRenderer uiRenderer)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xBE5634", Offset = "0xBE5634", VA = "0xBE5634")]
		public void Update(Rect bounds)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xBE5724", Offset = "0xBE5724", VA = "0xBE5724")]
		public void SetLayout(IWidget layout)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xBE572C", Offset = "0xBE572C", VA = "0xBE572C")]
		public void ClearLayout()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xBE5790", Offset = "0xBE5790", VA = "0xBE5790")]
		public void RequestFocus(IWidget widget)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xBE5868", Offset = "0xBE5868", VA = "0xBE5868")]
		public void SetDragging(bool dragging)
		{
		}
	}
	[Token(Token = "0x200035F")]
	public enum UICursorType
	{
		[Token(Token = "0x40010EB")]
		Normal,
		[Token(Token = "0x40010EC")]
		ResizeHorizontal,
		[Token(Token = "0x40010ED")]
		ResizeVertical,
		[Token(Token = "0x40010EE")]
		Link
	}
	[Token(Token = "0x2000360")]
	public delegate void UIUndoRedoDelegate(UISystem uiSystem);
	[Token(Token = "0x2000361")]
	public interface UIUndoSystem
	{
		[Token(Token = "0x14000018")]
		event UIUndoRedoDelegate UndoRedoPerformed;

		[Token(Token = "0x6001410")]
		void RecordObject(object obj, string name);

		[Token(Token = "0x6001411")]
		void RegisterCreatedObjectUndo(object obj, string name);

		[Token(Token = "0x6001412")]
		void DestroyObjectImmediate(object obj);

		[Token(Token = "0x6001413")]
		void RegisterCompleteObjectUndo(object obj, string name);
	}
	[Token(Token = "0x2000362")]
	public interface IDeferredUICommand
	{
		[Token(Token = "0x6001416")]
		void Execute(UISystem uiSystem);
	}
	[Token(Token = "0x2000363")]
	public abstract class DeferredUICommandBase : IDeferredUICommand
	{
		[Token(Token = "0x6001417")]
		public abstract void Execute(UISystem uiSystem);

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xA57600", Offset = "0xA57600", VA = "0xA57600")]
		protected DeferredUICommandBase()
		{
		}
	}
	[Token(Token = "0x2000364")]
	public class EditorCommand_InitializeGraphCameras : DeferredUICommandBase
	{
		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IWidget host;

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x7B38D4", Offset = "0x7B38D4", VA = "0x7B38D4")]
		public EditorCommand_InitializeGraphCameras(IWidget host)
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x7B3908", Offset = "0x7B3908", VA = "0x7B3908", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class EditorCommand_FocusOnGraphNode : DeferredUICommandBase
	{
		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphEditor graphEditor;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphNode graphNode;

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x7B3794", Offset = "0x7B3794", VA = "0x7B3794")]
		public EditorCommand_FocusOnGraphNode(GraphEditor graphEditor, GraphNode graphNode)
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x7B37E4", Offset = "0x7B37E4", VA = "0x7B37E4", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class EditorCommand_SetBorderContent : DeferredUICommandBase
	{
		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BorderWidget border;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IWidget content;

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x7B3AD8", Offset = "0x7B3AD8", VA = "0x7B3AD8")]
		public EditorCommand_SetBorderContent(BorderWidget border, IWidget content)
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x7B3B28", Offset = "0x7B3B28", VA = "0x7B3B28", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class EditorCommand_UpdateWidget : DeferredUICommandBase
	{
		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IWidget content;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rect bounds;

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x7B3B4C", Offset = "0x7B3B4C", VA = "0x7B3B4C")]
		public EditorCommand_UpdateWidget(IWidget content, Rect bounds)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x7B3BAC", Offset = "0x7B3BAC", VA = "0x7B3BAC", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class GUIState
	{
		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color color;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color backgroundColor;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UIRenderer renderer;

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x148486C", Offset = "0x148486C", VA = "0x148486C")]
		public GUIState(UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x14848A8", Offset = "0x14848A8", VA = "0x14848A8")]
		public void Save()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x14849E0", Offset = "0x14849E0", VA = "0x14849E0")]
		public void Restore()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class UIResourceLookup
	{
		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string TEXTURE_GO_NODE_SELECTION;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string TEXTURE_GO_NODE_FRAME;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string TEXTURE_GO_NODE_BG;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string TEXTURE_PIN_GLOW;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string TEXTURE_MULTI_GO_NODE_FRAME;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string TEXTURE_MARKER_NODE_SELECTION;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string TEXTURE_MARKER_NODE_FRAME;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string TEXTURE_MARKER_EMITTER_NODE_FRAME;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string TEXTURE_MARKER_NODE_BG;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string TEXTURE_CURSOR_RING;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string TEXTURE_CURSOR_RING_SOLID;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string TEXTURE_REFRESH_16;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string GUI_STYLE_BANNER;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string ICON_CLOSE_16x;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string ICON_PLUS_16x;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string ICON_MOVEUP_16x;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string ICON_MOVEDOWN_16x;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string ICON_ZOOMFIT_16x;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string ICON_ERROR_16x;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly string ICON_WARNING_16x;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string ICON_INFO_16x;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string ICON_SUCCESS_16x;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly string ICON_WHITE_16x;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly string ICON_PLAY_16x;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly string ICON_SETTINGS_16x;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly string SKIN_TOOLBAR_BUTTONS;

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xBE4FBC", Offset = "0xBE4FBC", VA = "0xBE4FBC")]
		public UIResourceLookup()
		{
		}
	}
}
namespace DungeonArchitect.UI.Widgets
{
	[Token(Token = "0x200036A")]
	public class WidgetClickEvent
	{
		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Event e;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UISystem uiSystem;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object userdata;

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x7D4108", Offset = "0x7D4108", VA = "0x7D4108")]
		public WidgetClickEvent()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public delegate void OnWidgetClicked(WidgetClickEvent clickEvent);
	[Token(Token = "0x200036C")]
	public class BorderWidget : WidgetBase
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget Content;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float paddingLeft;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float paddingTop;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float paddingRight;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float paddingBottom;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color color;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color borderColor;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string title;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int titleFontSize;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color titleColor;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector2 titleOffset;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool drawOutline;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IWidget titleWidget;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Func<string> TitleGetter;

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x8D4C68", Offset = "0x8D4C68", VA = "0x8D4C68")]
		public BorderWidget()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x8D4D58", Offset = "0x8D4D58", VA = "0x8D4D58")]
		public BorderWidget(IWidget content)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x8D4E64", Offset = "0x8D4E64", VA = "0x8D4E64")]
		public BorderWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x8D4E8C", Offset = "0x8D4E8C", VA = "0x8D4E8C")]
		public BorderWidget SetPadding(float left, float top, float right, float bottom)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x8D4E98", Offset = "0x8D4E98", VA = "0x8D4E98")]
		public BorderWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x8D4EA4", Offset = "0x8D4EA4", VA = "0x8D4EA4")]
		public BorderWidget SetBorderColor(Color borderColor)
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x8D4EB0", Offset = "0x8D4EB0", VA = "0x8D4EB0")]
		public BorderWidget SetTransparent()
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x8D4F28", Offset = "0x8D4F28", VA = "0x8D4F28")]
		public BorderWidget SetTitle(string title)
		{
			return null;
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x8D4F50", Offset = "0x8D4F50", VA = "0x8D4F50")]
		public BorderWidget SetTitleGetter(Func<string> getter)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x8D4FF8", Offset = "0x8D4FF8", VA = "0x8D4FF8")]
		public BorderWidget SetTitleFontSize(int size)
		{
			return null;
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x8D5000", Offset = "0x8D5000", VA = "0x8D5000")]
		public BorderWidget SetTitleColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x8D500C", Offset = "0x8D500C", VA = "0x8D500C")]
		public BorderWidget SetTitleOffset(UnityEngine.Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x8D5014", Offset = "0x8D5014", VA = "0x8D5014")]
		public BorderWidget SetTitleWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x8D503C", Offset = "0x8D503C", VA = "0x8D503C")]
		public BorderWidget SetDrawOutline(bool drawOutline)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x8D5048", Offset = "0x8D5048", VA = "0x8D5048", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x8D52C8", Offset = "0x8D52C8", VA = "0x8D52C8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x8D571C", Offset = "0x8D571C", VA = "0x8D571C", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x8D5724", Offset = "0x8D5724", VA = "0x8D5724", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x8D57D0", Offset = "0x8D57D0", VA = "0x8D57D0", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x200036D")]
	public class ButtonWidget : WidgetBase
	{
		[Token(Token = "0x200036E")]
		public delegate void OnButtonPressed(UISystem uiSystem);

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIContent content;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color color;

		[Token(Token = "0x14000019")]
		public event OnButtonPressed ButtonPressed
		{
			[Token(Token = "0x600143E")]
			[Address(RVA = "0x8D8D34", Offset = "0x8D8D34", VA = "0x8D8D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518B90", Offset = "0x518B90")]
			add
			{
			}
			[Token(Token = "0x600143F")]
			[Address(RVA = "0x8D8DD4", Offset = "0x8D8DD4", VA = "0x8D8DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BA0", Offset = "0x518BA0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x8D8E74", Offset = "0x8D8E74", VA = "0x8D8E74")]
		public ButtonWidget(GUIContent content)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x8D8EE0", Offset = "0x8D8EE0", VA = "0x8D8EE0")]
		public ButtonWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x8D8EEC", Offset = "0x8D8EEC", VA = "0x8D8EEC", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x200036F")]
	public enum ImageWidgetDrawMode
	{
		[Token(Token = "0x4001128")]
		Streach,
		[Token(Token = "0x4001129")]
		Fit,
		[Token(Token = "0x400112A")]
		Fill,
		[Token(Token = "0x400112B")]
		Fixed
	}
	[Token(Token = "0x2000370")]
	public class ImageWidget : WidgetBase
	{
		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture2D texture;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ImageWidgetDrawMode drawMode;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color tint;

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xCE5870", Offset = "0xCE5870", VA = "0xCE5870")]
		public ImageWidget()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xCE58A4", Offset = "0xCE58A4", VA = "0xCE58A4")]
		public ImageWidget(Texture2D texture)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xCE58EC", Offset = "0xCE58EC", VA = "0xCE58EC")]
		public ImageWidget SetImage(Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xCE5914", Offset = "0xCE5914", VA = "0xCE5914")]
		public ImageWidget SetDrawMode(ImageWidgetDrawMode drawMode)
		{
			return null;
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xCE591C", Offset = "0xCE591C", VA = "0xCE591C")]
		public ImageWidget SetTint(Color tint)
		{
			return null;
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xCE5928", Offset = "0xCE5928", VA = "0xCE5928")]
		private UnityEngine.Vector2 CalculateFitSize(UnityEngine.Vector2 size)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xCE5A24", Offset = "0xCE5A24", VA = "0xCE5A24")]
		private UnityEngine.Vector2 CalculateFillSize(UnityEngine.Vector2 size)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xCE5B40", Offset = "0xCE5B40", VA = "0xCE5B40", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xCE5C4C", Offset = "0xCE5C4C", VA = "0xCE5C4C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x2000371")]
	public class LabelWidget : WidgetBase
	{
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIStyle style;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511298", Offset = "0x511298")]
		private string <Text>k__BackingField;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5112A8", Offset = "0x5112A8")]
		private Color <Color>k__BackingField;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5112B8", Offset = "0x5112B8")]
		private int <FontSize>k__BackingField;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5112C8", Offset = "0x5112C8")]
		private bool <WordWrap>k__BackingField;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5112D8", Offset = "0x5112D8")]
		private TextAnchor <TextAlign>k__BackingField;

		[Token(Token = "0x170002A0")]
		public string Text
		{
			[Token(Token = "0x6001450")]
			[Address(RVA = "0x9DB3C8", Offset = "0x9DB3C8", VA = "0x9DB3C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BB0", Offset = "0x518BB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001451")]
			[Address(RVA = "0x9DB3D0", Offset = "0x9DB3D0", VA = "0x9DB3D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BC0", Offset = "0x518BC0")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A1")]
		public Color Color
		{
			[Token(Token = "0x6001452")]
			[Address(RVA = "0x9DB3D8", Offset = "0x9DB3D8", VA = "0x9DB3D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BD0", Offset = "0x518BD0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001453")]
			[Address(RVA = "0x9DB3E4", Offset = "0x9DB3E4", VA = "0x9DB3E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BE0", Offset = "0x518BE0")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public int FontSize
		{
			[Token(Token = "0x6001454")]
			[Address(RVA = "0x9DB3F0", Offset = "0x9DB3F0", VA = "0x9DB3F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518BF0", Offset = "0x518BF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001455")]
			[Address(RVA = "0x9DB3F8", Offset = "0x9DB3F8", VA = "0x9DB3F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C00", Offset = "0x518C00")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public bool WordWrap
		{
			[Token(Token = "0x6001456")]
			[Address(RVA = "0x9DB400", Offset = "0x9DB400", VA = "0x9DB400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C10", Offset = "0x518C10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001457")]
			[Address(RVA = "0x9DB408", Offset = "0x9DB408", VA = "0x9DB408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C20", Offset = "0x518C20")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public TextAnchor TextAlign
		{
			[Token(Token = "0x6001458")]
			[Address(RVA = "0x9DB414", Offset = "0x9DB414", VA = "0x9DB414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C30", Offset = "0x518C30")]
			get
			{
				return default(TextAnchor);
			}
			[Token(Token = "0x6001459")]
			[Address(RVA = "0x9DB41C", Offset = "0x9DB41C", VA = "0x9DB41C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C40", Offset = "0x518C40")]
			private set
			{
			}
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x9DB424", Offset = "0x9DB424", VA = "0x9DB424")]
		public LabelWidget(string text)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x9DB474", Offset = "0x9DB474", VA = "0x9DB474")]
		public LabelWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x9DB4A8", Offset = "0x9DB4A8", VA = "0x9DB4A8")]
		public LabelWidget SetFontSize(int size)
		{
			return null;
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x9DB4D8", Offset = "0x9DB4D8", VA = "0x9DB4D8")]
		public LabelWidget SetTextAlign(TextAnchor align)
		{
			return null;
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x9DB508", Offset = "0x9DB508", VA = "0x9DB508")]
		public LabelWidget SetWordWrap(bool wordWrap)
		{
			return null;
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x9DB53C", Offset = "0x9DB53C", VA = "0x9DB53C")]
		private GUIStyle CreateStyle(UIStyleManager styleManager)
		{
			return null;
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x9DB650", Offset = "0x9DB650", VA = "0x9DB650")]
		public float CalcHeight(UIStyleManager styleManager, string text, float width)
		{
			return default(float);
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x9DB714", Offset = "0x9DB714", VA = "0x9DB714")]
		public UnityEngine.Vector2 CalcSize(UISystem uiSystem, string text)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x9DB7CC", Offset = "0x9DB7CC", VA = "0x9DB7CC", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x9DB81C", Offset = "0x9DB81C", VA = "0x9DB81C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x2000372")]
	public class LinkWidget : WidgetBase
	{
		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool drawLinkOutline;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool hovered;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private object userdata;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color highlightColor;

		[Token(Token = "0x1400001A")]
		public event OnWidgetClicked LinkClicked
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x9E2A94", Offset = "0x9E2A94", VA = "0x9E2A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C50", Offset = "0x518C50")]
			add
			{
			}
			[Token(Token = "0x6001465")]
			[Address(RVA = "0x9E2B34", Offset = "0x9E2B34", VA = "0x9E2B34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518C60", Offset = "0x518C60")]
			remove
			{
			}
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x9E2BD4", Offset = "0x9E2BD4", VA = "0x9E2BD4")]
		public LinkWidget()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x9E2BDC", Offset = "0x9E2BDC", VA = "0x9E2BDC")]
		public LinkWidget(IWidget content)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x9E2C74", Offset = "0x9E2C74", VA = "0x9E2C74")]
		public LinkWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x9E2C9C", Offset = "0x9E2C9C", VA = "0x9E2C9C")]
		public LinkWidget SetHighlightColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x9E2CA8", Offset = "0x9E2CA8", VA = "0x9E2CA8")]
		public LinkWidget SetUserData(object userdata)
		{
			return null;
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x9E2CD0", Offset = "0x9E2CD0", VA = "0x9E2CD0")]
		public LinkWidget SetDrawLinkOutline(bool drawLinkOutline)
		{
			return null;
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x9E2CDC", Offset = "0x9E2CDC", VA = "0x9E2CDC", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x9E2E40", Offset = "0x9E2E40", VA = "0x9E2E40", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x9E3054", Offset = "0x9E3054", VA = "0x9E3054", Slot = "22")]
		public override bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x9E305C", Offset = "0x9E305C", VA = "0x9E305C", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x9E3064", Offset = "0x9E3064", VA = "0x9E3064", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x9E3110", Offset = "0x9E3110", VA = "0x9E3110", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x9E31E8", Offset = "0x9E31E8", VA = "0x9E31E8", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x2000373")]
	public abstract class ListViewSource<T>
	{
		[Token(Token = "0x6001473")]
		public abstract T[] GetItems();

		[Token(Token = "0x6001474")]
		public abstract IWidget CreateWidget(T item);

		[Token(Token = "0x6001475")]
		protected ListViewSource()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public delegate void OnListViewItemSelected(object data);
	[Token(Token = "0x2000375")]
	public interface IListViewItemWidget
	{
		[Token(Token = "0x170002A5")]
		bool Selected
		{
			[Token(Token = "0x600147E")]
			get;
			[Token(Token = "0x600147F")]
			set;
		}

		[Token(Token = "0x170002A6")]
		object ItemData
		{
			[Token(Token = "0x6001480")]
			get;
			[Token(Token = "0x6001481")]
			set;
		}

		[Token(Token = "0x1400001B")]
		event OnListViewItemSelected ItemSelected;

		[Token(Token = "0x1400001C")]
		event OnListViewItemSelected ItemDoubleClicked;

		[Token(Token = "0x6001482")]
		string GetCaption();
	}
	[Token(Token = "0x2000376")]
	public class ListViewWidget<T> : WidgetBase
	{
		[Token(Token = "0x2000377")]
		public delegate void OnSelectionChanged(T Item);

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ListViewSource<T> dataSource;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T selectedItem;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScrollPanelWidget ScrollView;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int ItemHeight;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color backgroundColor;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private StackPanelWidget panel;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IWidget layout;

		[Token(Token = "0x1400001D")]
		public event OnSelectionChanged SelectionChanged
		{
			[Token(Token = "0x6001483")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518CB0", Offset = "0x518CB0")]
			add
			{
			}
			[Token(Token = "0x6001484")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518CC0", Offset = "0x518CC0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event OnSelectionChanged ItemClicked
		{
			[Token(Token = "0x6001485")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518CD0", Offset = "0x518CD0")]
			add
			{
			}
			[Token(Token = "0x6001486")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518CE0", Offset = "0x518CE0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event OnSelectionChanged ItemDoubleClicked
		{
			[Token(Token = "0x6001487")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518CF0", Offset = "0x518CF0")]
			add
			{
			}
			[Token(Token = "0x6001488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D00", Offset = "0x518D00")]
			remove
			{
			}
		}

		[Token(Token = "0x6001489")]
		public void Bind(ListViewSource<T> dataSource)
		{
		}

		[Token(Token = "0x600148A")]
		private bool IsEqual(T a, T b)
		{
			return default(bool);
		}

		[Token(Token = "0x600148B")]
		private void BuildLayout()
		{
		}

		[Token(Token = "0x600148C")]
		private void ListViewItemWidget_ItemDoubleClicked(object data)
		{
		}

		[Token(Token = "0x600148D")]
		private void ListViewItemWidget_ItemSelected(object data)
		{
		}

		[Token(Token = "0x600148E")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600148F")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001490")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6001491")]
		public void NotifyDataChanged()
		{
		}

		[Token(Token = "0x6001492")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6001493")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001494")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6001495")]
		public int GetSelectedIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001496")]
		public T GetSelectedItem()
		{
			return (T)null;
		}

		[Token(Token = "0x6001497")]
		public T GetItem(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6001498")]
		public void SetSelectedItem(UISystem uiSystem, T item)
		{
		}

		[Token(Token = "0x6001499")]
		public void SetSelectedItem(UISystem uiSystem, T item, bool selectOnInspector)
		{
		}

		[Token(Token = "0x600149A")]
		private bool IsNull(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600149B")]
		public void SetSelectedIndex(int index)
		{
		}

		[Token(Token = "0x600149C")]
		public ListViewWidget()
		{
		}
	}
	[Token(Token = "0x2000378")]
	public class ListViewTextItemWidget : WidgetBase, IListViewItemWidget
	{
		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511328", Offset = "0x511328")]
		private bool <Selected>k__BackingField;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511338", Offset = "0x511338")]
		private object <ItemData>k__BackingField;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GUIStyle TextStyle;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GUIStyle SelectedTextStyle;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color SelectedColor;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float OffsetX;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Func<string> captionGetter;

		[Token(Token = "0x170002A7")]
		public bool Selected
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x9E334C", Offset = "0x9E334C", VA = "0x9E334C", Slot = "37")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D10", Offset = "0x518D10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x9E3354", Offset = "0x9E3354", VA = "0x9E3354", Slot = "38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D20", Offset = "0x518D20")]
			set
			{
			}
		}

		[Token(Token = "0x170002A8")]
		public object ItemData
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x9E3360", Offset = "0x9E3360", VA = "0x9E3360", Slot = "39")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D30", Offset = "0x518D30")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x9E3368", Offset = "0x9E3368", VA = "0x9E3368", Slot = "40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D40", Offset = "0x518D40")]
			set
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event OnListViewItemSelected ItemSelected
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0x9E3370", Offset = "0x9E3370", VA = "0x9E3370", Slot = "33")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D50", Offset = "0x518D50")]
			add
			{
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0x9E3410", Offset = "0x9E3410", VA = "0x9E3410", Slot = "34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D60", Offset = "0x518D60")]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event OnListViewItemSelected ItemDoubleClicked
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0x9E34B0", Offset = "0x9E34B0", VA = "0x9E34B0", Slot = "35")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D70", Offset = "0x518D70")]
			add
			{
			}
			[Token(Token = "0x60014A8")]
			[Address(RVA = "0x9E3550", Offset = "0x9E3550", VA = "0x9E3550", Slot = "36")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D80", Offset = "0x518D80")]
			remove
			{
			}
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x9E35F0", Offset = "0x9E35F0", VA = "0x9E35F0")]
		public ListViewTextItemWidget(object itemData, Func<string> captionGetter)
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x9E3748", Offset = "0x9E3748", VA = "0x9E3748", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x9E3904", Offset = "0x9E3904", VA = "0x9E3904", Slot = "42")]
		public virtual void DrawText(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x9E3AB4", Offset = "0x9E3AB4", VA = "0x9E3AB4", Slot = "41")]
		public string GetCaption()
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x9E3B24", Offset = "0x9E3B24", VA = "0x9E3B24", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x9E3C1C", Offset = "0x9E3C1C", VA = "0x9E3C1C", Slot = "32")]
		protected override void HandleDragStart(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x9E3CD4", Offset = "0x9E3CD4", VA = "0x9E3CD4", Slot = "21")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000379")]
	public enum SplitterDirection
	{
		[Token(Token = "0x400114F")]
		Horizontal,
		[Token(Token = "0x4001150")]
		Vertical
	}
	[Token(Token = "0x200037A")]
	public class SplitterNode
	{
		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Content;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Weight;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsSplitBar;

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x7F9650", Offset = "0x7F9650", VA = "0x7F9650")]
		public SplitterNode()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public delegate void OnSplitBarResized(SplitterNode prev, SplitterNode next);
	[Token(Token = "0x200037C")]
	public class Splitter : WidgetBase
	{
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SplitterDirection direction;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool freeSize;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minWindowSize;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float barSize;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color barColor;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color barHighlightColor;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<SplitterNode> nodes;

		[Token(Token = "0x170002A9")]
		public SplitterDirection Direction
		{
			[Token(Token = "0x60014B5")]
			[Address(RVA = "0x7F9260", Offset = "0x7F9260", VA = "0x7F9260")]
			get
			{
				return default(SplitterDirection);
			}
		}

		[Token(Token = "0x14000022")]
		public event OnSplitBarResized SplitBarDragged
		{
			[Token(Token = "0x60014B6")]
			[Address(RVA = "0x7F9268", Offset = "0x7F9268", VA = "0x7F9268")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518D90", Offset = "0x518D90")]
			add
			{
			}
			[Token(Token = "0x60014B7")]
			[Address(RVA = "0x7F9308", Offset = "0x7F9308", VA = "0x7F9308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DA0", Offset = "0x518DA0")]
			remove
			{
			}
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x7F93A8", Offset = "0x7F93A8", VA = "0x7F93A8")]
		public Splitter(SplitterDirection direction)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x7F94A4", Offset = "0x7F94A4", VA = "0x7F94A4")]
		public Splitter SetMinWindowSize(float minWindowSize)
		{
			return null;
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x7F94AC", Offset = "0x7F94AC", VA = "0x7F94AC")]
		public Splitter SetBarSize(float barSize)
		{
			return null;
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x7F94B4", Offset = "0x7F94B4", VA = "0x7F94B4")]
		public Splitter SetFreeSize(bool freeSize)
		{
			return null;
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x7F94C0", Offset = "0x7F94C0", VA = "0x7F94C0")]
		public Splitter AddWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x7F94C8", Offset = "0x7F94C8", VA = "0x7F94C8")]
		public Splitter AddWidget(IWidget widget, float weight)
		{
			return null;
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x7F9698", Offset = "0x7F9698", VA = "0x7F9698", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x7F96A0", Offset = "0x7F96A0", VA = "0x7F96A0", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x7F984C", Offset = "0x7F984C", VA = "0x7F984C")]
		public void OnSplitBarDragged(SplitterDragBarWidget barWidget, UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x7F9E48", Offset = "0x7F9E48", VA = "0x7F9E48", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x7FA134", Offset = "0x7FA134", VA = "0x7FA134", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x7FA224", Offset = "0x7FA224", VA = "0x7FA224", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x7FA064", Offset = "0x7FA064", VA = "0x7FA064")]
		private Rect GetWidgetBounds(UnityEngine.Vector2 hostSize, float offset, float size)
		{
			return default(Rect);
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x7F9B24", Offset = "0x7F9B24", VA = "0x7F9B24")]
		private float[] GetLayoutSizes(UnityEngine.Vector2 windowSize)
		{
			return null;
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x7FA22C", Offset = "0x7FA22C", VA = "0x7FA22C", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x200037D")]
	public class SplitterDragBarWidget : WidgetBase
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Splitter parent;

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x7F9658", Offset = "0x7F9658", VA = "0x7F9658")]
		public SplitterDragBarWidget(Splitter parent)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x7FA378", Offset = "0x7FA378", VA = "0x7FA378", Slot = "21")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x7FA380", Offset = "0x7FA380", VA = "0x7FA380", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x7FA45C", Offset = "0x7FA45C", VA = "0x7FA45C")]
		private void DrawBar(UIRenderer renderer, Rect bounds, Color barColor)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x7FA6A4", Offset = "0x7FA6A4", VA = "0x7FA6A4", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x7FA754", Offset = "0x7FA754", VA = "0x7FA754", Slot = "27")]
		protected override void DrawFocusHighlight(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class DebugWidget : WidgetBase
	{
		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color debugColor;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string caption;

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xA56D80", Offset = "0xA56D80", VA = "0xA56D80")]
		public DebugWidget()
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xA56E00", Offset = "0xA56E00", VA = "0xA56E00")]
		public DebugWidget(string caption, Color color)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xA56EC0", Offset = "0xA56EC0", VA = "0xA56EC0", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class BreadCrumbWidgetNode
	{
		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayText;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object userdata;

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x8D609C", Offset = "0x8D609C", VA = "0x8D609C")]
		public BreadCrumbWidgetNode(string displayText, object userdata)
		{
		}
	}
	[Token(Token = "0x2000380")]
	public delegate void OnBreadCrumbLinkClicked(object userdata);
	[Token(Token = "0x2000381")]
	public class BreadCrumbWidget : WidgetBase
	{
		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int padding;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool requestRebuild;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<BreadCrumbWidgetNode> items;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511388", Offset = "0x511388")]
		private int <FontSize>k__BackingField;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511398", Offset = "0x511398")]
		private Color <TextColor>k__BackingField;

		[Token(Token = "0x170002AA")]
		public int FontSize
		{
			[Token(Token = "0x60014D7")]
			[Address(RVA = "0x8D5CEC", Offset = "0x8D5CEC", VA = "0x8D5CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DD0", Offset = "0x518DD0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014D8")]
			[Address(RVA = "0x8D5CF4", Offset = "0x8D5CF4", VA = "0x8D5CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DE0", Offset = "0x518DE0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public Color TextColor
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0x8D5CFC", Offset = "0x8D5CFC", VA = "0x8D5CFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DF0", Offset = "0x518DF0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0x8D5D08", Offset = "0x8D5D08", VA = "0x8D5D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E00", Offset = "0x518E00")]
			set
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event OnBreadCrumbLinkClicked LinkClicked
		{
			[Token(Token = "0x60014D5")]
			[Address(RVA = "0x8D5BAC", Offset = "0x8D5BAC", VA = "0x8D5BAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DB0", Offset = "0x518DB0")]
			add
			{
			}
			[Token(Token = "0x60014D6")]
			[Address(RVA = "0x8D5C4C", Offset = "0x8D5C4C", VA = "0x8D5C4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518DC0", Offset = "0x518DC0")]
			remove
			{
			}
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x8D5D14", Offset = "0x8D5D14", VA = "0x8D5D14")]
		public BreadCrumbWidget()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x8D5DD8", Offset = "0x8D5DD8", VA = "0x8D5DD8")]
		public BreadCrumbWidget SetPadding(int padding)
		{
			return null;
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x8D5DE8", Offset = "0x8D5DE8", VA = "0x8D5DE8")]
		public object GetTopItemUserData()
		{
			return null;
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x8D5E64", Offset = "0x8D5E64", VA = "0x8D5E64", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x8D5E6C", Offset = "0x8D5E6C", VA = "0x8D5E6C", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x8D5F18", Offset = "0x8D5F18", VA = "0x8D5F18", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0x8D5FF0", Offset = "0x8D5FF0", VA = "0x8D5FF0")]
		public void PushPage(string displayName, object userdata)
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x8D60EC", Offset = "0x8D60EC", VA = "0x8D60EC")]
		public void MoveToPage(BreadCrumbWidgetNode node)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x8D619C", Offset = "0x8D619C", VA = "0x8D619C")]
		public void Clear()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x8D61FC", Offset = "0x8D61FC", VA = "0x8D61FC")]
		private void Rebuild(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x8D6610", Offset = "0x8D6610", VA = "0x8D6610")]
		private void OnCrumbItemClicked(WidgetClickEvent clickEvent)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x8D66D0", Offset = "0x8D66D0", VA = "0x8D66D0", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x8D6850", Offset = "0x8D6850", VA = "0x8D6850", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x2000382")]
	public class GraphPanel<TGraphEditor> : WidgetBase where TGraphEditor : GraphEditor
	{
		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IWidget host;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BorderWidget Border;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolbarWidget FloatingToolbar;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolbarWidget Toolbar;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TGraphEditor GraphEditor;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string BTN_FOCUS_ON_GRAPH;

		[Token(Token = "0x60014E8")]
		public GraphPanel(Graph graph, UnityEngine.Object assetObject, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014E9")]
		public GraphPanel(Graph graph, UnityEngine.Object assetObject, UISystem uiSystem, ToolbarWidget toolbar)
		{
		}

		[Token(Token = "0x60014EA")]
		private void Toolbar_ButtonPressed(UISystem uiSystem, string id)
		{
		}

		[Token(Token = "0x60014EB")]
		public void ResetCamera()
		{
		}

		[Token(Token = "0x60014EC")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60014ED")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60014EE")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60014EF")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x2000383")]
	public enum GridPanelArrangementType
	{
		[Token(Token = "0x400116F")]
		VerticalScroll
	}
	[Token(Token = "0x2000384")]
	internal class GridPanelNode
	{
		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xD42854", Offset = "0xD42854", VA = "0xD42854")]
		public GridPanelNode()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class GridPanelWidget : WidgetBase
	{
		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GridPanelNode> nodes;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GridPanelArrangementType arrangement;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private IntVector2 padding;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public UnityEngine.Vector2 cellSize;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public UnityEngine.Vector2 desiredCellSize;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool autoSize;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IntVector2 renderedCells;

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xD4285C", Offset = "0xD4285C", VA = "0xD4285C")]
		public GridPanelWidget(GridPanelArrangementType arrangement)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xD42954", Offset = "0xD42954", VA = "0xD42954")]
		public GridPanelWidget AddWidget(IWidget Widget)
		{
			return null;
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xD429FC", Offset = "0xD429FC", VA = "0xD429FC")]
		public GridPanelWidget SetArrangementType(GridPanelArrangementType arrangement)
		{
			return null;
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xD42A04", Offset = "0xD42A04", VA = "0xD42A04")]
		public GridPanelArrangementType GetArrangementType()
		{
			return default(GridPanelArrangementType);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xD42A0C", Offset = "0xD42A0C", VA = "0xD42A0C")]
		public GridPanelWidget SetPadding(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xD42A44", Offset = "0xD42A44", VA = "0xD42A44")]
		public GridPanelWidget SetAutoSize(bool autoSize)
		{
			return null;
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xD42A50", Offset = "0xD42A50", VA = "0xD42A50")]
		public GridPanelWidget SetCellSize(float width, float height)
		{
			return null;
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xD42A58", Offset = "0xD42A58", VA = "0xD42A58", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xD42AA8", Offset = "0xD42AA8", VA = "0xD42AA8")]
		private void UpdateDesiredCellSize(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xD42CFC", Offset = "0xD42CFC", VA = "0xD42CFC", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xD42F78", Offset = "0xD42F78", VA = "0xD42F78", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xD43068", Offset = "0xD43068", VA = "0xD43068", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xD43070", Offset = "0xD43070", VA = "0xD43070", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x2000386")]
	public enum OverlayPanelVAlign
	{
		[Token(Token = "0x4001179")]
		Fill,
		[Token(Token = "0x400117A")]
		Top,
		[Token(Token = "0x400117B")]
		Center,
		[Token(Token = "0x400117C")]
		Bottom
	}
	[Token(Token = "0x2000387")]
	public enum OverlayPanelHAlign
	{
		[Token(Token = "0x400117E")]
		Fill,
		[Token(Token = "0x400117F")]
		Left,
		[Token(Token = "0x4001180")]
		Center,
		[Token(Token = "0x4001181")]
		Right
	}
	[Token(Token = "0x2000388")]
	internal class OverlayPanelNode
	{
		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector2 Size;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 Offset;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayPanelVAlign VAlign;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OverlayPanelHAlign HAlign;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Rect Bounds;

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xC36EA0", Offset = "0xC36EA0", VA = "0xC36EA0")]
		public OverlayPanelNode()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class OverlayPanelWidget : WidgetBase
	{
		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<OverlayPanelNode> nodes;

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xC36EEC", Offset = "0xC36EEC", VA = "0xC36EEC")]
		public OverlayPanelWidget AddWidget(IWidget widget, OverlayPanelHAlign HAlign, OverlayPanelVAlign VAlign, UnityEngine.Vector2 size, UnityEngine.Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xC36FD0", Offset = "0xC36FD0", VA = "0xC36FD0")]
		public OverlayPanelWidget AddWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xC37030", Offset = "0xC37030", VA = "0xC37030", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xC37338", Offset = "0xC37338", VA = "0xC37338", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xC374A4", Offset = "0xC374A4", VA = "0xC374A4")]
		private OverlayPanelNode FindIntersectingNode(UnityEngine.Vector2 position)
		{
			return null;
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xC37060", Offset = "0xC37060", VA = "0xC37060")]
		public void UpdateNodeBounds(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xC37600", Offset = "0xC37600", VA = "0xC37600", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xC37608", Offset = "0xC37608", VA = "0xC37608", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xC377B4", Offset = "0xC377B4", VA = "0xC377B4")]
		public OverlayPanelWidget()
		{
		}
	}
	[Token(Token = "0x200038A")]
	public class PanelWidget : WidgetBase
	{
		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IWidget Content;

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x9931E4", Offset = "0x9931E4", VA = "0x9931E4")]
		public PanelWidget()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x9931EC", Offset = "0x9931EC", VA = "0x9931EC")]
		public PanelWidget(IWidget content)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x993220", Offset = "0x993220", VA = "0x993220")]
		public PanelWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x993248", Offset = "0x993248", VA = "0x993248", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x9933B8", Offset = "0x9933B8", VA = "0x9933B8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x99344C", Offset = "0x99344C", VA = "0x99344C", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x993454", Offset = "0x993454", VA = "0x993454", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x993500", Offset = "0x993500", VA = "0x993500", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x200038B")]
	public class ScrollPanelWidget : WidgetBase
	{
		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool MouseScrollingEnabled;

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xAA4320", Offset = "0xAA4320", VA = "0xAA4320")]
		public ScrollPanelWidget(IWidget content)
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xAA436C", Offset = "0xAA436C", VA = "0xAA436C")]
		public ScrollPanelWidget(IWidget content, bool mouseScrollingEnabled)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xAA43C0", Offset = "0xAA43C0", VA = "0xAA43C0", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xAA46B8", Offset = "0xAA46B8", VA = "0xAA46B8", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xAA48D0", Offset = "0xAA48D0", VA = "0xAA48D0", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xAA49A8", Offset = "0xAA49A8", VA = "0xAA49A8", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xAA49B0", Offset = "0xAA49B0", VA = "0xAA49B0", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x200038C")]
	internal class StackPanelNode
	{
		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool AutoSize;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool AdjustToDynamicDesiredSize;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Size;

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x7FAA48", Offset = "0x7FAA48", VA = "0x7FAA48")]
		public StackPanelNode()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public enum StackPanelOrientation
	{
		[Token(Token = "0x4001191")]
		Horizontal,
		[Token(Token = "0x4001192")]
		Vertical
	}
	[Token(Token = "0x200038E")]
	public class StackPanelWidget : WidgetBase
	{
		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<StackPanelNode> nodes;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private StackPanelOrientation Orientation;

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x7FAA58", Offset = "0x7FAA58", VA = "0x7FAA58")]
		public StackPanelWidget(StackPanelOrientation orientation)
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x7FAAF8", Offset = "0x7FAAF8", VA = "0x7FAAF8")]
		public StackPanelWidget AddWidget(IWidget Widget)
		{
			return null;
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x7FABB4", Offset = "0x7FABB4", VA = "0x7FABB4")]
		public StackPanelWidget AddWidget(IWidget Widget, float size)
		{
			return null;
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x7FABBC", Offset = "0x7FABBC", VA = "0x7FABBC")]
		public StackPanelWidget AddWidget(IWidget Widget, float size, bool adjustToDynamicDesiredSize)
		{
			return null;
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x7FAC94", Offset = "0x7FAC94", VA = "0x7FAC94", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0x7FAF94", Offset = "0x7FAF94", VA = "0x7FAF94", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x7FB4E4", Offset = "0x7FB4E4", VA = "0x7FB4E4", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x7FB5D4", Offset = "0x7FB5D4", VA = "0x7FB5D4", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0x7FB5DC", Offset = "0x7FB5DC", VA = "0x7FB5DC", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x200038F")]
	public delegate void WidgetDragEvent(Event e, UISystem uiSystem);
	[Token(Token = "0x2000390")]
	public enum WidgetMessage
	{
		[Token(Token = "0x4001196")]
		DrawHighlight
	}
	[Token(Token = "0x2000391")]
	public interface IWidget
	{
		[Token(Token = "0x170002AC")]
		Rect WidgetBounds
		{
			[Token(Token = "0x600152F")]
			get;
			[Token(Token = "0x6001530")]
			set;
		}

		[Token(Token = "0x170002AD")]
		bool ShowFocusHighlight
		{
			[Token(Token = "0x6001531")]
			get;
			[Token(Token = "0x6001532")]
			set;
		}

		[Token(Token = "0x170002AE")]
		UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x6001533")]
			get;
			[Token(Token = "0x6001534")]
			set;
		}

		[Token(Token = "0x6001526")]
		void UpdateWidget(UISystem uiSystem, Rect bounds);

		[Token(Token = "0x6001527")]
		void Draw(UISystem uiSystem, UIRenderer renderer);

		[Token(Token = "0x6001528")]
		void HandleInput(Event e, UISystem uiSystem);

		[Token(Token = "0x6001529")]
		void HandleMessage(UISystem uiSystem, WidgetMessage message);

		[Token(Token = "0x600152A")]
		bool IsCompositeWidget();

		[Token(Token = "0x600152B")]
		bool CanAcquireFocus();

		[Token(Token = "0x600152C")]
		bool RequiresInputEveryFrame();

		[Token(Token = "0x600152D")]
		IWidget[] GetChildWidgets();

		[Token(Token = "0x600152E")]
		UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem);
	}
	[Token(Token = "0x2000392")]
	public abstract class WidgetBase : IWidget
	{
		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool showFocusHighlight;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Rect widgetBounds;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector2 scrollPosition;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DragDropEnabled;

		[Token(Token = "0x170002AF")]
		public bool ShowFocusHighlight
		{
			[Token(Token = "0x6001535")]
			[Address(RVA = "0x7D30DC", Offset = "0x7D30DC", VA = "0x7D30DC", Slot = "15")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001536")]
			[Address(RVA = "0x7D30E4", Offset = "0x7D30E4", VA = "0x7D30E4", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public Rect WidgetBounds
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x7D30F0", Offset = "0x7D30F0", VA = "0x7D30F0", Slot = "13")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001538")]
			[Address(RVA = "0x7D30FC", Offset = "0x7D30FC", VA = "0x7D30FC", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public virtual UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x6001539")]
			[Address(RVA = "0x7D3108", Offset = "0x7D3108", VA = "0x7D3108", Slot = "19")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x600153A")]
			[Address(RVA = "0x7D3110", Offset = "0x7D3110", VA = "0x7D3110", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event WidgetDragEvent DragStart
		{
			[Token(Token = "0x6001546")]
			[Address(RVA = "0x7D3700", Offset = "0x7D3700", VA = "0x7D3700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E10", Offset = "0x518E10")]
			add
			{
			}
			[Token(Token = "0x6001547")]
			[Address(RVA = "0x7D37A0", Offset = "0x7D37A0", VA = "0x7D37A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E20", Offset = "0x518E20")]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event WidgetDragEvent DragUpdate
		{
			[Token(Token = "0x6001548")]
			[Address(RVA = "0x7D3840", Offset = "0x7D3840", VA = "0x7D3840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E30", Offset = "0x518E30")]
			add
			{
			}
			[Token(Token = "0x6001549")]
			[Address(RVA = "0x7D38E0", Offset = "0x7D38E0", VA = "0x7D38E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E40", Offset = "0x518E40")]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event WidgetDragEvent DragPerform
		{
			[Token(Token = "0x600154A")]
			[Address(RVA = "0x7D3980", Offset = "0x7D3980", VA = "0x7D3980")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E50", Offset = "0x518E50")]
			add
			{
			}
			[Token(Token = "0x600154B")]
			[Address(RVA = "0x7D3A20", Offset = "0x7D3A20", VA = "0x7D3A20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E60", Offset = "0x518E60")]
			remove
			{
			}
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x7D3118", Offset = "0x7D3118", VA = "0x7D3118", Slot = "21")]
		public virtual bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x7D3120", Offset = "0x7D3120", VA = "0x7D3120", Slot = "22")]
		public virtual bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x7D3128", Offset = "0x7D3128", VA = "0x7D3128", Slot = "23")]
		public virtual UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600153E")]
		public abstract void Draw(UISystem uiSystem, UIRenderer renderer);

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x7D312C", Offset = "0x7D312C", VA = "0x7D312C", Slot = "25")]
		public virtual void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x7D3138", Offset = "0x7D3138", VA = "0x7D3138", Slot = "26")]
		public virtual void HandleMessage(UISystem uiSystem, WidgetMessage message)
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x7D313C", Offset = "0x7D313C", VA = "0x7D313C", Slot = "27")]
		protected virtual void DrawFocusHighlight(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x7D3304", Offset = "0x7D3304", VA = "0x7D3304", Slot = "28")]
		public virtual void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x7D36E8", Offset = "0x7D36E8", VA = "0x7D36E8", Slot = "29")]
		public virtual bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x7D36F0", Offset = "0x7D36F0", VA = "0x7D36F0", Slot = "30")]
		public virtual IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x7D36F8", Offset = "0x7D36F8", VA = "0x7D36F8", Slot = "31")]
		protected virtual bool IsDragDataSupported(Event e, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x7D3AC0", Offset = "0x7D3AC0", VA = "0x7D3AC0", Slot = "32")]
		protected virtual void HandleDragStart(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x7D3414", Offset = "0x7D3414", VA = "0x7D3414")]
		private void HandleDragUpdate(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x7D3580", Offset = "0x7D3580", VA = "0x7D3580")]
		private void HandleDragPerform(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x7D40C8", Offset = "0x7D40C8", VA = "0x7D40C8")]
		protected WidgetBase()
		{
		}
	}
	[Token(Token = "0x2000393")]
	public class NullWidget : WidgetBase
	{
		[Token(Token = "0x6001550")]
		[Address(RVA = "0xE95F1C", Offset = "0xE95F1C", VA = "0xE95F1C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xE95F20", Offset = "0xE95F20", VA = "0xE95F20")]
		public NullWidget()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class WidgetUtils
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color FOCUS_HIGHLITE_COLOR;

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x7D4160", Offset = "0x7D4160", VA = "0x7D4160")]
		public static void GetWidgets(IWidget widget, ref List<IWidget> result)
		{
		}

		[Token(Token = "0x6001553")]
		public static List<T> GetWidgetsOfType<T>(IWidget root) where T : IWidget
		{
			return null;
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x7D42CC", Offset = "0x7D42CC", VA = "0x7D42CC")]
		public static void HandleWidgetInput(UISystem uiSystem, Event e, UnityEngine.Vector2 mousePosition, IWidget widget)
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x7D472C", Offset = "0x7D472C", VA = "0x7D472C")]
		public static bool BuildWidgetEvent(UnityEngine.Vector2 mousePosition, IWidget root, IWidget widgetToFind, ref UnityEngine.Vector2 widgetMousePosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x7D49BC", Offset = "0x7D49BC", VA = "0x7D49BC")]
		public static bool FindWidgetOnCursor(Event e, IWidget widget, out Event outEvent, out IWidget outWidget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x7D4DCC", Offset = "0x7D4DCC", VA = "0x7D4DCC")]
		public static void ProcessDragOperation(Event e, IWidget widget, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x7D4F5C", Offset = "0x7D4F5C", VA = "0x7D4F5C")]
		public static bool ProcessInputFocus(UnityEngine.Vector2 mousePosition, UISystem uiSystem, IWidget widget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0x7D3230", Offset = "0x7D3230", VA = "0x7D3230")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color)
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0x7D5318", Offset = "0x7D5318", VA = "0x7D5318")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color, float thickness)
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x7D543C", Offset = "0x7D543C", VA = "0x7D543C")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color, float thickness, Texture2D texture)
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x7D57CC", Offset = "0x7D57CC", VA = "0x7D57CC")]
		public static void DrawWidgetGroup(UISystem uiSystem, UIRenderer renderer, IWidget widget)
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x7D5A08", Offset = "0x7D5A08", VA = "0x7D5A08")]
		public static bool IsDragEvent(Event e)
		{
			return default(bool);
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x7D5A80", Offset = "0x7D5A80", VA = "0x7D5A80")]
		public WidgetUtils()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public class HighlightWidget : WidgetBase
	{
		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IWidget Widget;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public object ObjectOfInterest;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HighlightColor;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float HighlightThickness;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float HighlightTime;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double lastUpdateTime;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float remainingTime;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D lineTexture;

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xCE4D20", Offset = "0xCE4D20", VA = "0xCE4D20")]
		public HighlightWidget()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xCE4D68", Offset = "0xCE4D68", VA = "0xCE4D68")]
		public HighlightWidget SetContent(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xCE4D90", Offset = "0xCE4D90", VA = "0xCE4D90")]
		public HighlightWidget SetHighlightColor(Color highlightColor)
		{
			return null;
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xCE4D9C", Offset = "0xCE4D9C", VA = "0xCE4D9C")]
		public HighlightWidget SetHighlightThickness(float highlightThickness)
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xCE4DA4", Offset = "0xCE4DA4", VA = "0xCE4DA4")]
		public HighlightWidget SetHighlightTime(float highlightTime)
		{
			return null;
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xCE4DAC", Offset = "0xCE4DAC", VA = "0xCE4DAC")]
		public HighlightWidget SetObjectOfInterest(object objectOfInterest)
		{
			return null;
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xCE4DD4", Offset = "0xCE4DD4", VA = "0xCE4DD4", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xCE5124", Offset = "0xCE5124", VA = "0xCE5124")]
		public void Activate(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xCE51F4", Offset = "0xCE51F4", VA = "0xCE51F4", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xCE5424", Offset = "0xCE5424", VA = "0xCE5424", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xCE542C", Offset = "0xCE542C", VA = "0xCE542C", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x2000396")]
	public class ToolbarWidget : WidgetBase
	{
		[Token(Token = "0x2000397")]
		public delegate void OnButtonPressed(UISystem uiSystem, string id);

		[Token(Token = "0x2000398")]
		public class ButtonInfo
		{
			[Token(Token = "0x40011AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string ButtonId;

			[Token(Token = "0x40011AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string IconId;

			[Token(Token = "0x40011AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Rect Bounds;

			[Token(Token = "0x6001578")]
			[Address(RVA = "0xA471F4", Offset = "0xA471F4", VA = "0xA471F4")]
			public ButtonInfo()
			{
			}
		}

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ButtonSize;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Padding;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color Background;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<ButtonInfo> buttons;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GUIStyle buttonStyle;

		[Token(Token = "0x14000027")]
		public event OnButtonPressed ButtonPressed
		{
			[Token(Token = "0x600156B")]
			[Address(RVA = "0xD7FCE8", Offset = "0xD7FCE8", VA = "0xD7FCE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E70", Offset = "0x518E70")]
			add
			{
			}
			[Token(Token = "0x600156C")]
			[Address(RVA = "0xD7FD88", Offset = "0xD7FD88", VA = "0xD7FD88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E80", Offset = "0x518E80")]
			remove
			{
			}
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xD7FE28", Offset = "0xD7FE28", VA = "0xD7FE28", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xD80080", Offset = "0xD80080", VA = "0xD80080", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xD80668", Offset = "0xD80668", VA = "0xD80668")]
		public void AddButton(string buttonId, string iconId)
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xD7FF20", Offset = "0xD7FF20", VA = "0xD7FF20")]
		private void UpdateButtonBounds()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xD8071C", Offset = "0xD8071C", VA = "0xD8071C")]
		public ToolbarWidget SetBackground(Color background)
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xD80728", Offset = "0xD80728", VA = "0xD80728")]
		public ToolbarWidget SetButtonSize(int buttonSize)
		{
			return null;
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xD80734", Offset = "0xD80734", VA = "0xD80734")]
		public ToolbarWidget()
		{
		}
	}
}
namespace DungeonArchitect.UI.Widgets.GraphEditors
{
	[Token(Token = "0x2000399")]
	public class EditorGraphBuilder : GraphBuilder
	{
		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Object assetObject;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UIPlatform platform;

		[Token(Token = "0x6001579")]
		[Address(RVA = "0x7B3C90", Offset = "0x7B3C90", VA = "0x7B3C90")]
		public EditorGraphBuilder(Graph graph, UnityEngine.Object assetObject, UIPlatform platform)
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x7B3CE0", Offset = "0x7B3CE0", VA = "0x7B3CE0", Slot = "5")]
		public override GraphNode CreateNode(Type nodeType, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x7B3DAC", Offset = "0x7B3DAC", VA = "0x7B3DAC", Slot = "4")]
		public override void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600157C")]
		public override TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin)
		{
			return null;
		}
	}
	[Token(Token = "0x200039A")]
	public class GraphContextMenuEvent
	{
		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphPin sourcePin;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector2 mouseWorldPosition;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object userdata;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UISystem uiSystem;

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x781A28", Offset = "0x781A28", VA = "0x781A28")]
		public GraphContextMenuEvent()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public abstract class GraphContextMenu
	{
		[Token(Token = "0x200039C")]
		public delegate void OnRequestContextMenuCreation(Event e, UISystem uiSystem);

		[Token(Token = "0x200039D")]
		public delegate void OnMenuItemClicked(object userdata, GraphContextMenuEvent e);

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool dragged;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected int dragButtonId;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected GraphPin sourcePin;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.Vector2 mouseWorldPosition;

		[Token(Token = "0x14000028")]
		public event OnRequestContextMenuCreation RequestContextMenuCreation
		{
			[Token(Token = "0x600157E")]
			[Address(RVA = "0x781624", Offset = "0x781624", VA = "0x781624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518E90", Offset = "0x518E90")]
			add
			{
			}
			[Token(Token = "0x600157F")]
			[Address(RVA = "0x7816C4", Offset = "0x7816C4", VA = "0x7816C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518EA0", Offset = "0x518EA0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event OnMenuItemClicked MenuItemClicked
		{
			[Token(Token = "0x6001580")]
			[Address(RVA = "0x781764", Offset = "0x781764", VA = "0x781764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518EB0", Offset = "0x518EB0")]
			add
			{
			}
			[Token(Token = "0x6001581")]
			[Address(RVA = "0x781804", Offset = "0x781804", VA = "0x781804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518EC0", Offset = "0x518EC0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x7818A4", Offset = "0x7818A4", VA = "0x7818A4")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x78197C", Offset = "0x78197C", VA = "0x78197C")]
		protected GraphContextMenuEvent BuildEvent(object userdata, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x6001584")]
		public abstract void Show(GraphEditor graphEditor, GraphPin sourcePin, UnityEngine.Vector2 mouseWorld, UISystem uiSystem);

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x781A30", Offset = "0x781A30", VA = "0x781A30")]
		protected void DispatchMenuItemEvent(object action, GraphContextMenuEvent e)
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x781A44", Offset = "0x781A44", VA = "0x781A44")]
		protected GraphContextMenu()
		{
		}
	}
	[Token(Token = "0x200039E")]
	public class NullGraphContextMenu : GraphContextMenu
	{
		[Token(Token = "0x600158F")]
		[Address(RVA = "0xE95E54", Offset = "0xE95E54", VA = "0xE95E54", Slot = "4")]
		public override void Show(GraphEditor graphEditor, GraphPin sourcePin, UnityEngine.Vector2 mouseWorld, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xE95E58", Offset = "0xE95E58", VA = "0xE95E58")]
		public NullGraphContextMenu()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class GraphRendererContext
	{
		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UIResourceLookup Resources;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraphEditor GraphEditor;

		[Token(Token = "0x6001591")]
		[Address(RVA = "0x7899F8", Offset = "0x7899F8", VA = "0x7899F8")]
		public GraphRendererContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A0")]
	public class GraphEditorStyle
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color backgroundColor;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color gridLineColorThick;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color gridLineColorThin;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float gridCellSpacing;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool gridScaling;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int gridNumCells;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string branding;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color brandingColor;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int brandingSize;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string readonlyText;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color readonlyColor;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int readonlySize;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color overlayTextColorLo;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color overlayTextColorHi;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color selectionBoxColor;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color commentTextColor;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool displayAssetFilename;

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x781B74", Offset = "0x781B74", VA = "0x781B74")]
		public GraphEditorStyle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A1")]
	public abstract class GraphEditor : ScriptableObject, IWidget
	{
		[Serializable]
		[Token(Token = "0x20003A2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C290", Offset = "0x50C290")]
		private sealed class <>c
		{
			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GraphNode, bool> <>9__78_0;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<GraphNode, string> <>9__78_1;

			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<GraphNode, bool> <>9__82_0;

			[Token(Token = "0x60015E5")]
			[Address(RVA = "0x7E24BC", Offset = "0x7E24BC", VA = "0x7E24BC")]
			public <>c()
			{
			}

			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x7E24C4", Offset = "0x7E24C4", VA = "0x7E24C4")]
			internal bool <PerformCopy>b__78_0(GraphNode node)
			{
				return default(bool);
			}

			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x7E24DC", Offset = "0x7E24DC", VA = "0x7E24DC")]
			internal string <PerformCopy>b__78_1(GraphNode node)
			{
				return null;
			}

			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x7E24F4", Offset = "0x7E24F4", VA = "0x7E24F4")]
			internal bool <OnNodeSelectionChanged>b__82_0(GraphNode node)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Graph graph;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected GraphCamera camera;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphEditorStyle editorStyle;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected UnityEngine.Object assetObject;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected GraphEditorEvents events;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float renderCullingBias;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool showFocusHighlight;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rect widgetBounds;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.Vector2 scrollPosition;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511468", Offset = "0x511468")]
		private IGraphLinkRenderer <GraphLinkRenderer>k__BackingField;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GraphSelectionBox selectionBox;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private KeyboardState keyboardState;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CursorDragLink cursorDragLink;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GraphContextMenu contextMenu;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected GraphNodeRendererFactory nodeRenderers;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GraphRendererContext rendererContext;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected UnityEngine.Vector2 lastMousePosition;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rect lastDrawBounds;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool graphReadOnly;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		protected bool draggingNodes;

		[Token(Token = "0x170002B2")]
		public GraphCamera Camera
		{
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x781A54", Offset = "0x781A54", VA = "0x781A54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B3")]
		public GraphEditorStyle EditorStyle
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x781A5C", Offset = "0x781A5C", VA = "0x781A5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		public GraphEditorEvents Events
		{
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x781AAC", Offset = "0x781AAC", VA = "0x781AAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B5")]
		public bool ShowFocusHighlight
		{
			[Token(Token = "0x6001596")]
			[Address(RVA = "0x781AB4", Offset = "0x781AB4", VA = "0x781AB4", Slot = "15")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001597")]
			[Address(RVA = "0x781ABC", Offset = "0x781ABC", VA = "0x781ABC", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public Rect WidgetBounds
		{
			[Token(Token = "0x6001598")]
			[Address(RVA = "0x781AC8", Offset = "0x781AC8", VA = "0x781AC8", Slot = "13")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001599")]
			[Address(RVA = "0x781AD4", Offset = "0x781AD4", VA = "0x781AD4", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public virtual UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x600159A")]
			[Address(RVA = "0x781AE0", Offset = "0x781AE0", VA = "0x781AE0", Slot = "19")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x600159B")]
			[Address(RVA = "0x781AE8", Offset = "0x781AE8", VA = "0x781AE8", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public IGraphLinkRenderer GraphLinkRenderer
		{
			[Token(Token = "0x600159C")]
			[Address(RVA = "0x781AF0", Offset = "0x781AF0", VA = "0x781AF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518ED0", Offset = "0x518ED0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600159D")]
			[Address(RVA = "0x781AF8", Offset = "0x781AF8", VA = "0x781AF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518EE0", Offset = "0x518EE0")]
			private set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public UnityEngine.Vector2 LastMousePosition
		{
			[Token(Token = "0x600159E")]
			[Address(RVA = "0x781B00", Offset = "0x781B00", VA = "0x781B00")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x170002BA")]
		public Graph Graph
		{
			[Token(Token = "0x600159F")]
			[Address(RVA = "0x781B08", Offset = "0x781B08", VA = "0x781B08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x781B10", Offset = "0x781B10", VA = "0x781B10", Slot = "9")]
		public bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60015A1")]
		protected abstract GraphContextMenu CreateContextMenu();

		[Token(Token = "0x60015A2")]
		protected abstract void InitializeNodeRenderers(GraphNodeRendererFactory nodeRenderers);

		[Token(Token = "0x60015A3")]
		protected abstract IGraphLinkRenderer CreateGraphLinkRenderer();

		[Token(Token = "0x60015A4")]
		protected abstract void OnMenuItemClicked(object userdata, GraphContextMenuEvent e);

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x781B18", Offset = "0x781B18", VA = "0x781B18", Slot = "25")]
		protected virtual void SortNodesForDeletion(GraphNode[] nodesToDelete)
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x781B1C", Offset = "0x781B1C", VA = "0x781B1C", Slot = "26")]
		public virtual void SortPinsForDrawing(GraphPin[] pins)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x781B20", Offset = "0x781B20", VA = "0x781B20", Slot = "27")]
		protected virtual GraphEditorStyle CreateEditorStyle()
		{
			return null;
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x781DB0", Offset = "0x781DB0", VA = "0x781DB0", Slot = "12")]
		public UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x781DB4", Offset = "0x781DB4", VA = "0x781DB4", Slot = "28")]
		public virtual void HandleMessage(UISystem uiSystem, WidgetMessage message)
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x781DB8", Offset = "0x781DB8", VA = "0x781DB8", Slot = "29")]
		protected virtual void DrawHighlight(UIRenderer renderer)
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x781EB0", Offset = "0x781EB0", VA = "0x781EB0", Slot = "30")]
		public virtual void Init(Graph graph, Rect editorBounds, UnityEngine.Object assetObject, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x782254", Offset = "0x782254", VA = "0x782254")]
		public void SetReadOnly(bool graphReadOnly)
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x782260", Offset = "0x782260", VA = "0x782260", Slot = "31")]
		public virtual void Release(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x782368", Offset = "0x782368", VA = "0x782368")]
		protected void SetGraph(Graph graph)
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x782370", Offset = "0x782370", VA = "0x782370")]
		public void FocusCameraOnMarker(string markerName, Rect editorBounds)
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x782534", Offset = "0x782534", VA = "0x782534")]
		public void FocusCameraOnNode(GraphNode node)
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x782614", Offset = "0x782614", VA = "0x782614", Slot = "32")]
		public virtual bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x782234", Offset = "0x782234", VA = "0x782234")]
		public void FocusCameraOnBestFit(Rect editorBounds)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x78261C", Offset = "0x78261C", VA = "0x78261C")]
		public void FocusCameraOnBestFit()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x782644", Offset = "0x782644", VA = "0x782644", Slot = "33")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x782AE8", Offset = "0x782AE8", VA = "0x782AE8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x782D8C", Offset = "0x782D8C", VA = "0x782D8C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x782F40", Offset = "0x782F40", VA = "0x782F40")]
		private void OnUndoRedoPerformed(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x782F50", Offset = "0x782F50", VA = "0x782F50", Slot = "34")]
		public virtual void HandleMarkedDirty(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x783018", Offset = "0x783018", VA = "0x783018", Slot = "35")]
		public virtual void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x783024", Offset = "0x783024", VA = "0x783024", Slot = "36")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x783028", Offset = "0x783028", VA = "0x783028", Slot = "37")]
		public virtual void HandleGraphStateChanged(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x78302C", Offset = "0x78302C", VA = "0x78302C", Slot = "38")]
		public virtual void HandleNodePropertyChanged(GraphNode node)
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x783030", Offset = "0x783030", VA = "0x783030")]
		private void HandleBoxSelection(Rect boundsScreenSpace, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x7832C4", Offset = "0x7832C4", VA = "0x7832C4")]
		private bool SetSelectedState(GraphNode node, bool selected)
		{
			return default(bool);
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x783318", Offset = "0x783318", VA = "0x783318")]
		private void HandleSelect(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x7837D0", Offset = "0x7837D0", VA = "0x7837D0")]
		protected GraphNode[] GetSelectedNodes()
		{
			return null;
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x783988", Offset = "0x783988", VA = "0x783988")]
		private void HandleDrag(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x78434C", Offset = "0x78434C", VA = "0x78434C")]
		private void HandleDragPin(GraphPin pin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x784368", Offset = "0x784368", VA = "0x784368", Slot = "39")]
		public virtual void HandleInput(Event _e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x784B00", Offset = "0x784B00", VA = "0x784B00")]
		private void PerformCopy(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x784EC0", Offset = "0x784EC0", VA = "0x784EC0", Slot = "40")]
		protected virtual GraphNode DuplicateNode(GraphNode sourceNode, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x784F58", Offset = "0x784F58", VA = "0x784F58")]
		private void PerformPaste(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x784618", Offset = "0x784618", VA = "0x784618")]
		private void HandleKeyboard(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x785404", Offset = "0x785404", VA = "0x785404", Slot = "41")]
		public virtual void OnNodeSelectionChanged(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x785660", Offset = "0x785660", VA = "0x785660", Slot = "42")]
		public virtual void OnNodeDoubleClicked(UISystem uiSystem, GraphNode node)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x785770", Offset = "0x785770", VA = "0x785770")]
		private void OnRequestContextMenuCreation(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x784718", Offset = "0x784718", VA = "0x784718")]
		private void HandleDelete(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x785BD8", Offset = "0x785BD8", VA = "0x785BD8")]
		public void DeleteNodes(GraphNode[] nodesToDelete, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0x785CC8", Offset = "0x785CC8", VA = "0x785CC8", Slot = "43")]
		protected virtual void DestroyNode(GraphNode node, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0x785944", Offset = "0x785944", VA = "0x785944")]
		private void PerformDelete(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0x786188", Offset = "0x786188", VA = "0x786188", Slot = "44")]
		protected virtual void DrawOverlay(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0x78618C", Offset = "0x78618C", VA = "0x78618C", Slot = "45")]
		public virtual bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0x786194", Offset = "0x786194", VA = "0x786194", Slot = "11")]
		public IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0x78619C", Offset = "0x78619C", VA = "0x78619C", Slot = "46")]
		public virtual void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x7877B4", Offset = "0x7877B4", VA = "0x7877B4")]
		private void DrawEditorStats(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x7871BC", Offset = "0x7871BC", VA = "0x7871BC")]
		private void DrawBranding(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x7874A0", Offset = "0x7874A0", VA = "0x7874A0")]
		private void DrawReadOnly(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x788404", Offset = "0x788404", VA = "0x788404", Slot = "47")]
		protected virtual void DrawHUD(UISystem uiSystem, UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015D7")]
		public virtual T CreateNode<T>(UnityEngine.Vector2 screenCoord, UISystem uiSystem) where T : GraphNode, new()
		{
			return null;
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x78870C", Offset = "0x78870C", VA = "0x78870C", Slot = "49")]
		public virtual GraphNode CreateNode(UnityEngine.Vector2 screenCoord, Type nodeType, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x783790", Offset = "0x783790", VA = "0x783790")]
		protected void BringToFront(GraphNode node)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x786BBC", Offset = "0x786BBC", VA = "0x786BBC")]
		private void DrawGrid(UIRenderer renderer, Rect bounds, UnityEngine.Vector2 worldSize)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x788D18", Offset = "0x788D18", VA = "0x788D18")]
		public void SelectNode(GraphNode nodeToSelect, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x788EB4", Offset = "0x788EB4", VA = "0x788EB4")]
		public GraphPin GetPinUnderPosition(UnityEngine.Vector2 worldPosition)
		{
			return null;
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x78917C", Offset = "0x78917C", VA = "0x78917C")]
		private void HandleMouseDraggedLinkReleased(UnityEngine.Vector2 mousePositionScreen, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x7895E4", Offset = "0x7895E4", VA = "0x7895E4", Slot = "50")]
		protected virtual void CreateLinkBetweenPins(GraphPin outputPin, GraphPin inputPin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x7898CC", Offset = "0x7898CC", VA = "0x7898CC", Slot = "51")]
		public virtual GraphSchema GetGraphSchema()
		{
			return null;
		}

		[Token(Token = "0x60015E0")]
		public virtual T CreateLink<T>(Graph graph, GraphPin output, GraphPin input, UISystem uiSystem) where T : GraphLink
		{
			return null;
		}

		[Token(Token = "0x60015E1")]
		protected abstract string GetGraphNotInitializedMessage();

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x786874", Offset = "0x786874", VA = "0x786874")]
		private void DrawGraphNotInitializedMessage(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x78992C", Offset = "0x78992C", VA = "0x78992C")]
		protected GraphEditor()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public class GraphSelectionBox
	{
		[Token(Token = "0x20003A4")]
		public delegate void OnSelectionPerformed(Rect boundsScreenSpace, UISystem uiSystem);

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rect bounds;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector2 dragStart;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int dragButton;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool dragging;

		[Token(Token = "0x170002BB")]
		public Rect Bounds
		{
			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x790018", Offset = "0x790018", VA = "0x790018")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x790024", Offset = "0x790024", VA = "0x790024")]
			set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public bool Dragging
		{
			[Token(Token = "0x60015ED")]
			[Address(RVA = "0x790030", Offset = "0x790030", VA = "0x790030")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400002A")]
		public event OnSelectionPerformed SelectionPerformed
		{
			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x78298C", Offset = "0x78298C", VA = "0x78298C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518EF0", Offset = "0x518EF0")]
			add
			{
			}
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x782CEC", Offset = "0x782CEC", VA = "0x782CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F00", Offset = "0x518F00")]
			remove
			{
			}
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x7849FC", Offset = "0x7849FC", VA = "0x7849FC")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x7900C8", Offset = "0x7900C8", VA = "0x7900C8")]
		private void ProcessMouseDrag(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0x790038", Offset = "0x790038", VA = "0x790038")]
		private void ProcessMouseDown(Event e)
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x790178", Offset = "0x790178", VA = "0x790178")]
		private void ProcessMouseUp(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x790200", Offset = "0x790200", VA = "0x790200")]
		private void ProcessLayoutEvent(Event e)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x7902EC", Offset = "0x7902EC", VA = "0x7902EC")]
		public bool IsSelectionValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x787BCC", Offset = "0x787BCC", VA = "0x787BCC")]
		public void Draw(UIRenderer renderer, GraphEditorStyle style)
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x790248", Offset = "0x790248", VA = "0x790248")]
		private void UpdateBounds(UnityEngine.Vector2 start, UnityEngine.Vector2 end)
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x782984", Offset = "0x782984", VA = "0x782984")]
		public GraphSelectionBox()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	internal class KeyboardState
	{
		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<KeyCode, bool> state;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool shift;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool control;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool alt;

		[Token(Token = "0x170002BD")]
		public bool ControlPressed
		{
			[Token(Token = "0x60015FE")]
			[Address(RVA = "0xCEEC68", Offset = "0xCEEC68", VA = "0xCEEC68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BE")]
		public bool ShiftPressed
		{
			[Token(Token = "0x60015FF")]
			[Address(RVA = "0xCEEC70", Offset = "0xCEEC70", VA = "0xCEEC70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BF")]
		public bool AltPressed
		{
			[Token(Token = "0x6001600")]
			[Address(RVA = "0xCEEC78", Offset = "0xCEEC78", VA = "0xCEEC78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xCEEA24", Offset = "0xCEEA24", VA = "0xCEEA24")]
		public void SetState(KeyCode keyCode, bool pressed)
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xCEEAE8", Offset = "0xCEEAE8", VA = "0xCEEAE8")]
		public void HandleInput(Event e)
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xCEEBC4", Offset = "0xCEEBC4", VA = "0xCEEBC4")]
		public bool GetSate(KeyCode keyCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xCEEC80", Offset = "0xCEEC80", VA = "0xCEEC80")]
		public KeyboardState()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	internal class CursorDragLink
	{
		[Token(Token = "0x20003A7")]
		public delegate void OnDraggedLinkReleased(UnityEngine.Vector2 mousePositionScreen, UISystem uiSystem);

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphLink link;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphPin attachedPin;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GraphPin mousePin;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Vector2 mouseScreenPosition;

		[Token(Token = "0x170002C0")]
		public GraphPin AttachedPin
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0xA51A70", Offset = "0xA51A70", VA = "0xA51A70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400002B")]
		public event OnDraggedLinkReleased DraggedLinkReleased
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0xA51A78", Offset = "0xA51A78", VA = "0xA51A78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F10", Offset = "0x518F10")]
			add
			{
			}
			[Token(Token = "0x6001604")]
			[Address(RVA = "0xA51B18", Offset = "0xA51B18", VA = "0xA51B18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F20", Offset = "0x518F20")]
			remove
			{
			}
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xA51BB8", Offset = "0xA51BB8", VA = "0xA51BB8")]
		public CursorDragLink()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xA51CD4", Offset = "0xA51CD4", VA = "0xA51CD4")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xA51D74", Offset = "0xA51D74", VA = "0xA51D74")]
		public void Activate(GraphPin fromPin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xA51E4C", Offset = "0xA51E4C", VA = "0xA51E4C")]
		public void Deactivate(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xA51E6C", Offset = "0xA51E6C", VA = "0xA51E6C")]
		public void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphCamera camera)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xA52148", Offset = "0xA52148", VA = "0xA52148")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xA51E14", Offset = "0xA51E14", VA = "0xA51E14")]
		private void AttachPinToLink(GraphPin pin)
		{
		}
	}
	[Token(Token = "0x20003A8")]
	internal class NodeZIndexComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6001610")]
		[Address(RVA = "0xE94B98", Offset = "0xE94B98", VA = "0xE94B98", Slot = "4")]
		public int Compare(GraphNode x, GraphNode y)
		{
			return default(int);
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xE94C6C", Offset = "0xE94C6C", VA = "0xE94C6C")]
		public NodeZIndexComparer()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	internal class NodeReversedZIndexComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6001612")]
		[Address(RVA = "0xE9496C", Offset = "0xE9496C", VA = "0xE9496C", Slot = "4")]
		public int Compare(GraphNode x, GraphNode y)
		{
			return default(int);
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xE94A40", Offset = "0xE94A40", VA = "0xE94A40")]
		public NodeReversedZIndexComparer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AA")]
	public class GraphEvent<T> where T : EventArgs
	{
		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<EventHandler<T>> delegates;

		[Token(Token = "0x1400002C")]
		[SerializeField]
		private event EventHandler<T> _Event
		{
			[Token(Token = "0x6001614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F30", Offset = "0x518F30")]
			add
			{
			}
			[Token(Token = "0x6001615")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F40", Offset = "0x518F40")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public event EventHandler<T> Event
		{
			[Token(Token = "0x6001616")]
			add
			{
			}
			[Token(Token = "0x6001617")]
			remove
			{
			}
		}

		[Token(Token = "0x6001618")]
		public void Notify(T args)
		{
		}

		[Token(Token = "0x6001619")]
		public void Clear()
		{
		}

		[Token(Token = "0x600161A")]
		public GraphEvent()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class GraphNodeEventArgs : EventArgs
	{
		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5114B8", Offset = "0x5114B8")]
		private UISystem <uiSystem>k__BackingField;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5114C8", Offset = "0x5114C8")]
		private GraphNode[] <Nodes>k__BackingField;

		[Token(Token = "0x170002C1")]
		public UISystem uiSystem
		{
			[Token(Token = "0x600161D")]
			[Address(RVA = "0x78CBCC", Offset = "0x78CBCC", VA = "0x78CBCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F50", Offset = "0x518F50")]
			get
			{
				return null;
			}
			[Token(Token = "0x600161E")]
			[Address(RVA = "0x78CBD4", Offset = "0x78CBD4", VA = "0x78CBD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F60", Offset = "0x518F60")]
			private set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public GraphNode[] Nodes
		{
			[Token(Token = "0x600161F")]
			[Address(RVA = "0x78CBDC", Offset = "0x78CBDC", VA = "0x78CBDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F70", Offset = "0x518F70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001620")]
			[Address(RVA = "0x78CBE4", Offset = "0x78CBE4", VA = "0x78CBE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F80", Offset = "0x518F80")]
			private set
			{
			}
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x784180", Offset = "0x784180", VA = "0x784180")]
		public GraphNodeEventArgs(UISystem uiSystem, GraphNode[] nodes)
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x788C58", Offset = "0x788C58", VA = "0x788C58")]
		public GraphNodeEventArgs(UISystem uiSystem, GraphNode node)
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class GraphEventArgs : EventArgs
	{
		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Graph graph;

		[Token(Token = "0x170002C3")]
		public Graph Graph
		{
			[Token(Token = "0x6001622")]
			[Address(RVA = "0x789C80", Offset = "0x789C80", VA = "0x789C80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x789C00", Offset = "0x789C00", VA = "0x789C00")]
		public GraphEventArgs(Graph graph)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AD")]
	public class GraphEditorEvents
	{
		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragStart;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragEnd;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragged;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GraphEvent<GraphNodeEventArgs> OnNodeCreated;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GraphEvent<GraphNodeEventArgs> OnNodeSelectionChanged;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDoubleClicked;

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x7820F4", Offset = "0x7820F4", VA = "0x7820F4")]
		public GraphEditorEvents()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class GraphEditorUtils
	{
		[Token(Token = "0x6001624")]
		[Address(RVA = "0x789808", Offset = "0x789808", VA = "0x789808")]
		public static void AddToAsset(UIPlatform platform, UnityEngine.Object assetObject, GraphLink link)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0x788914", Offset = "0x788914", VA = "0x788914")]
		public static void AddToAsset(UIPlatform platform, UnityEngine.Object assetObject, GraphNode node)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0x789BF8", Offset = "0x789BF8", VA = "0x789BF8")]
		public GraphEditorUtils()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class GraphEditorConstants
	{
		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color PIN_COLOR;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color PIN_COLOR_HOVER;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Color PIN_COLOR_CLICK;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Color NODE_COLOR;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly Color NODE_COLOR_SELECTED;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly Color TEXT_COLOR;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly Color TEXT_COLOR_SELECTED;

		[Token(Token = "0x6001627")]
		[Address(RVA = "0x789A68", Offset = "0x789A68", VA = "0x789A68")]
		public GraphEditorConstants()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class GraphOperations
	{
		[Token(Token = "0x6001629")]
		public static T CreateNode<T>(Graph graph, UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0x788868", Offset = "0x788868", VA = "0x788868")]
		public static GraphNode CreateNode(Graph graph, Type t, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0x78DA70", Offset = "0x78DA70", VA = "0x78DA70")]
		private static void InitializeCreatedNode(Graph graph, GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0x78DE48", Offset = "0x78DE48", VA = "0x78DE48")]
		private static void DestroyEmitterNodes(Graph graph, MarkerNode markerNode, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600162D")]
		public static T DuplicateNode<T>(Graph graph, T originalNode, UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0x785D14", Offset = "0x785D14", VA = "0x785D14")]
		public static void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0x78C298", Offset = "0x78C298", VA = "0x78C298")]
		public static void DestroyLink(GraphLink link, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0x78E164", Offset = "0x78E164", VA = "0x78E164")]
		public static void BreakInputLinks(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0x78E190", Offset = "0x78E190", VA = "0x78E190")]
		public static void BreakOutputLinks(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x78E1BC", Offset = "0x78E1BC", VA = "0x78E1BC")]
		private static void BreakLinks(GraphPin[] pins, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x78E234", Offset = "0x78E234", VA = "0x78E234")]
		private static void BreakLinks(GraphPin pin, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001634")]
		public static T CreateLink<T>(Graph graph) where T : GraphLink
		{
			return null;
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0x78E2B4", Offset = "0x78E2B4", VA = "0x78E2B4")]
		public GraphOperations()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	internal class GraphInputHandler
	{
		[Token(Token = "0x6001636")]
		[Address(RVA = "0x7847C4", Offset = "0x7847C4", VA = "0x7847C4")]
		public static bool HandleNodeInput(GraphNode node, Event e, GraphEditor graphEditor, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x78BCE0", Offset = "0x78BCE0", VA = "0x78BCE0")]
		public static bool HandlePinInput(GraphPin pin, Event e, GraphEditor graphEditor, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x78BEF0", Offset = "0x78BEF0", VA = "0x78BEF0")]
		private static void DestroyPinLinks(GraphPin pin, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x78C43C", Offset = "0x78C43C", VA = "0x78C43C")]
		public GraphInputHandler()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	public interface IGraphLinkRenderer
	{
		[Token(Token = "0x600163A")]
		void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera);
	}
	[Token(Token = "0x20003B3")]
	public class SplineGraphLinkRenderer : IGraphLinkRenderer
	{
		[Token(Token = "0x600163B")]
		[Address(RVA = "0x7F8CB4", Offset = "0x7F8CB4", VA = "0x7F8CB4", Slot = "4")]
		public void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera)
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0x7F9258", Offset = "0x7F9258", VA = "0x7F9258")]
		public SplineGraphLinkRenderer()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class StraightLineGraphLinkRenderer : IGraphLinkRenderer
	{
		[Token(Token = "0x600163D")]
		[Address(RVA = "0x7FC8FC", Offset = "0x7FC8FC", VA = "0x7FC8FC")]
		private UnityEngine.Vector2 GetPointOnNodeBounds(UnityEngine.Vector2 position, GraphPin pin, float distanceBias)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0x7FCB0C", Offset = "0x7FCB0C", VA = "0x7FCB0C", Slot = "4")]
		public void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera)
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x7FCCB8", Offset = "0x7FCCB8", VA = "0x7FCCB8")]
		public static void DrawLine(UIRenderer renderer, UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, GraphCamera camera, Color lineColor, float lineThickness)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x7FD03C", Offset = "0x7FD03C", VA = "0x7FD03C")]
		public StraightLineGraphLinkRenderer()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	public class GraphNodeRenderer
	{
		[Token(Token = "0x6001641")]
		[Address(RVA = "0x78CBEC", Offset = "0x78CBEC", VA = "0x78CBEC", Slot = "4")]
		protected virtual Color getBackgroundColor(GraphNode node)
		{
			return default(Color);
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x78CCAC", Offset = "0x78CCAC", VA = "0x78CCAC", Slot = "5")]
		public virtual void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera)
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x78D234", Offset = "0x78D234", VA = "0x78D234", Slot = "6")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x78D238", Offset = "0x78D238", VA = "0x78D238", Slot = "7")]
		protected virtual void DrawTextCentered(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string text)
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x78D2A0", Offset = "0x78D2A0", VA = "0x78D2A0", Slot = "8")]
		protected virtual void DrawTextCentered(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x78D720", Offset = "0x78D720", VA = "0x78D720")]
		protected void DrawNodeTexture(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string textureName)
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0x78D9C0", Offset = "0x78D9C0", VA = "0x78D9C0")]
		public GraphNodeRenderer()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class GraphNodeRendererFactory
	{
		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphNodeRenderer defaultRenderer;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Type, GraphNodeRenderer> renderers;

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x78D9C8", Offset = "0x78D9C8", VA = "0x78D9C8")]
		public void RegisterNodeRenderer(Type nodeType, GraphNodeRenderer renderer)
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x787B30", Offset = "0x787B30", VA = "0x787B30")]
		public GraphNodeRenderer GetRenderer(Type nodeType)
		{
			return null;
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x782DE0", Offset = "0x782DE0", VA = "0x782DE0")]
		public void Release()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x782A2C", Offset = "0x782A2C", VA = "0x782A2C")]
		public GraphNodeRendererFactory()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class GraphPinRenderer
	{
		[Token(Token = "0x600164C")]
		[Address(RVA = "0x78CE04", Offset = "0x78CE04", VA = "0x78CE04")]
		public static void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphPin pin, GraphCamera camera)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x78EC94", Offset = "0x78EC94", VA = "0x78EC94")]
		private static Color GetPinColor(GraphPin pin)
		{
			return default(Color);
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x78ED8C", Offset = "0x78ED8C", VA = "0x78ED8C")]
		public GraphPinRenderer()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class GraphTooltip
	{
		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string message;

		[Token(Token = "0x600164F")]
		[Address(RVA = "0x788388", Offset = "0x788388", VA = "0x788388")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x790338", Offset = "0x790338", VA = "0x790338")]
		public GraphTooltip()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class GraphTooltipRenderer
	{
		[Token(Token = "0x6001652")]
		[Address(RVA = "0x787DB4", Offset = "0x787DB4", VA = "0x787DB4")]
		public static void Draw(UIRenderer renderer, GraphRendererContext rendererContext, UnityEngine.Vector2 mousePosition)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x7903A4", Offset = "0x7903A4", VA = "0x7903A4")]
		public GraphTooltipRenderer()
		{
		}
	}
}
namespace DungeonArchitect.Triangulator
{
	[Token(Token = "0x20003BA")]
	public class Delauney
	{
		[Token(Token = "0x6001654")]
		[Address(RVA = "0xA57608", Offset = "0xA57608", VA = "0xA57608")]
		public static List<Triangle> Triangulate(List<Point> Vertex)
		{
			return null;
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xA580A8", Offset = "0xA580A8", VA = "0xA580A8")]
		private static bool InCircle(Point p, Point p1, Point p2, Point p3)
		{
			return default(bool);
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xA58314", Offset = "0xA58314", VA = "0xA58314")]
		public Delauney()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public struct DelauneyTriangle
	{
		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int p3;
	}
	[Token(Token = "0x20003BC")]
	internal struct IEDGE
	{
		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;
	}
	[Token(Token = "0x20003BD")]
	public class DelauneyV2
	{
		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float EPSILON;

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xA5831C", Offset = "0xA5831C", VA = "0xA5831C")]
		public static DelauneyTriangle[] Triangulate(UnityEngine.Vector2[] vertices)
		{
			return null;
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xA58CAC", Offset = "0xA58CAC", VA = "0xA58CAC")]
		private static bool CircumCircle(float xp, float yp, float x1, float y1, float x2, float y2, float x3, float y3, ref float xc, ref float yc, ref float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xA58F30", Offset = "0xA58F30", VA = "0xA58F30")]
		public DelauneyV2()
		{
		}
	}
}
namespace DungeonArchitect.Triangulator.Geometry
{
	[Token(Token = "0x20003BE")]
	public class Edge : IEquatable<Edge>
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int p1;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int p2;

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x7B3680", Offset = "0x7B3680", VA = "0x7B3680")]
		public Edge(int point1, int point2)
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x7B36B8", Offset = "0x7B36B8", VA = "0x7B36B8")]
		public Edge()
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x7B36E0", Offset = "0x7B36E0", VA = "0x7B36E0", Slot = "4")]
		public bool Equals(Edge other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003BF")]
	public class Point
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected double _X;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected double _Y;

		[Token(Token = "0x170002C4")]
		public double X
		{
			[Token(Token = "0x600165F")]
			[Address(RVA = "0x9A03C4", Offset = "0x9A03C4", VA = "0x9A03C4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001660")]
			[Address(RVA = "0x9A03CC", Offset = "0x9A03CC", VA = "0x9A03CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public double Y
		{
			[Token(Token = "0x6001661")]
			[Address(RVA = "0x9A03D4", Offset = "0x9A03D4", VA = "0x9A03D4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001662")]
			[Address(RVA = "0x9A03DC", Offset = "0x9A03DC", VA = "0x9A03DC")]
			set
			{
			}
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x9A038C", Offset = "0x9A038C", VA = "0x9A038C")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x9A03E4", Offset = "0x9A03E4", VA = "0x9A03E4")]
		public bool Equals2D(Point other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003C0")]
	public class Point<T> : Point
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _attr;

		[Token(Token = "0x170002C6")]
		public T Attribute
		{
			[Token(Token = "0x6001666")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001667")]
			set
			{
			}
		}

		[Token(Token = "0x6001664")]
		public Point(double x, double y, T attribute)
		{
		}

		[Token(Token = "0x6001665")]
		public Point(double x, double y)
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public struct Triangle
	{
		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int p3;

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xBDBF9C", Offset = "0xBDBF9C", VA = "0xBDBF9C")]
		public Triangle(int point1, int point2, int point3)
		{
		}
	}
}
namespace DungeonArchitect.Splatmap
{
	[Token(Token = "0x20003C2")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C2A0", Offset = "0x50C2A0")]
	public class SplatData
	{
		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[,] data;

		[Token(Token = "0x170002C7")]
		public float Item
		{
			[Token(Token = "0x6001669")]
			[Address(RVA = "0x7F7D58", Offset = "0x7F7D58", VA = "0x7F7D58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600166A")]
			[Address(RVA = "0x7F7DB4", Offset = "0x7F7DB4", VA = "0x7F7DB4")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public float[,] Data
		{
			[Token(Token = "0x600166B")]
			[Address(RVA = "0x7F7E10", Offset = "0x7F7E10", VA = "0x7F7E10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x7F7E18", Offset = "0x7F7E18", VA = "0x7F7E18")]
		public SplatData(int textureSize)
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x7F7EA0", Offset = "0x7F7EA0", VA = "0x7F7EA0")]
		public void Write(Texture2D texture)
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class SplatRasterizer
	{
		[Token(Token = "0x20003C4")]
		private struct FloodFillPixelInfo
		{
			[Token(Token = "0x400121B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntVector2 currentPixel;

			[Token(Token = "0x400121C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntVector2 sourcePixel;

			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float startValue;

			[Token(Token = "0x6001678")]
			[Address(RVA = "0xA4441C", Offset = "0xA4441C", VA = "0xA4441C")]
			public FloodFillPixelInfo(IntVector2 currentPixel, IntVector2 sourcePixel, float startValue)
			{
			}

			[Token(Token = "0x6001679")]
			[Address(RVA = "0xA44428", Offset = "0xA44428", VA = "0xA44428")]
			public float DistanceToSource()
			{
				return default(float);
			}
		}

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SplatData splatData;

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x7F809C", Offset = "0x7F809C", VA = "0x7F809C")]
		public SplatRasterizer(SplatData splatData)
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x7F80D0", Offset = "0x7F80D0", VA = "0x7F80D0")]
		public void DecayFloodFill(float decayMultiplier)
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0x7F8468", Offset = "0x7F8468", VA = "0x7F8468")]
		private void AddNeighbor(Queue<FloodFillPixelInfo> queue, ref FloodFillPixelInfo info, int textureSize, int dx, int dy, float decayMultiplier)
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x7F85FC", Offset = "0x7F85FC", VA = "0x7F85FC")]
		private int MapToTextureCoord(float value01, int lastIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0x7F860C", Offset = "0x7F860C", VA = "0x7F860C")]
		private void Swap(ref UnityEngine.Vector2 a, ref UnityEngine.Vector2 b)
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0x7F8620", Offset = "0x7F8620", VA = "0x7F8620")]
		public void ApplyCurve(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x7F8718", Offset = "0x7F8718", VA = "0x7F8718")]
		public void DrawLine(UnityEngine.Vector2 start, UnityEngine.Vector2 end, float value)
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x7F89C4", Offset = "0x7F89C4", VA = "0x7F89C4")]
		public void DrawCircle(UnityEngine.Vector2 center, float radius01, float value)
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x7F8BF4", Offset = "0x7F8BF4", VA = "0x7F8BF4")]
		private void SetPixel(int x, int y, float value)
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x7F8AF0", Offset = "0x7F8AF0", VA = "0x7F8AF0")]
		private void _DrawCircleOctants(int xc, int yc, int x, int y, float value)
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public class DungeonSplatmapVisualizer : DungeonEventListener
	{
		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer debugRenderer;

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x7B1A08", Offset = "0x7B1A08", VA = "0x7B1A08", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x7B1B70", Offset = "0x7B1B70", VA = "0x7B1B70")]
		public DungeonSplatmapVisualizer()
		{
		}
	}
	[Token(Token = "0x20003C6")]
	public class DungeonSplatAsset : ScriptableObject
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Texture2D[] splatTextures;

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x7B1998", Offset = "0x7B1998", VA = "0x7B1998")]
		public DungeonSplatAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C7")]
	public struct DungeonSplatmapTextureInfo
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public string id;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public TextureFormat textureFormat;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public int textureSize;
	}
	[Token(Token = "0x20003C8")]
	public class DungeonSplatmap : MonoBehaviour
	{
		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DungeonSplatmapTextureInfo[] textures;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonSplatAsset splatmap;

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x7B1A00", Offset = "0x7B1A00", VA = "0x7B1A00")]
		public DungeonSplatmap()
		{
		}
	}
}
namespace DungeonArchitect.RuntimeGraphs
{
	[Token(Token = "0x20003C9")]
	public class RuntimeGraph<T>
	{
		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Nodes;

		[Token(Token = "0x600167E")]
		public void RemoveNode(RuntimeGraphNode<T> node)
		{
		}

		[Token(Token = "0x600167F")]
		public RuntimeGraph()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	public class RuntimeGraphNode<T>
	{
		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Payload;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RuntimeGraph<T> Graph;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector2 Position;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Outgoing;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Incoming;

		[Token(Token = "0x6001680")]
		public RuntimeGraphNode(RuntimeGraph<T> graph)
		{
		}

		[Token(Token = "0x6001681")]
		public void MakeLinkTo(RuntimeGraphNode<T> destNode)
		{
		}

		[Token(Token = "0x6001682")]
		public void BreakLinkTo(RuntimeGraphNode<T> destNode)
		{
		}

		[Token(Token = "0x6001683")]
		public void BreakAllOutgoingLinks()
		{
		}

		[Token(Token = "0x6001684")]
		public void BreakAllIncomingLinks()
		{
		}

		[Token(Token = "0x6001685")]
		public void BreakAllLinks()
		{
		}

		[Token(Token = "0x6001686")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CB")]
	public class RuntimeGraphBuilderHandlers<T>
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<GraphNode, bool> CanCreateNode;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<GraphNode, RuntimeGraphNode<T>> NodeCreated;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<GraphNode, T> GetPayload;

		[Token(Token = "0x6001687")]
		public RuntimeGraphBuilderHandlers()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class RuntimeGraphBuilder
	{
		[Token(Token = "0x6001688")]
		public static RuntimeGraphNode<T> AddNode<T>(GraphNode graphNode, RuntimeGraph<T> runtimeGraph, RuntimeGraphBuilderHandlers<T> handlers)
		{
			return null;
		}

		[Token(Token = "0x6001689")]
		public static RuntimeGraphNode<T> AddNode<T>(T payload, RuntimeGraph<T> runtimeGraph)
		{
			return null;
		}

		[Token(Token = "0x600168A")]
		public static void Build<T>(Graph graph, RuntimeGraph<T> runtimeGraph, RuntimeGraphBuilderHandlers<T> handlers)
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xA97460", Offset = "0xA97460", VA = "0xA97460")]
		public RuntimeGraphBuilder()
		{
		}
	}
}
namespace DungeonArchitect.RoomDesigner
{
	[Serializable]
	[Token(Token = "0x20003CD")]
	public struct DungeonRoomDoorDesigner
	{
		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public UnityEngine.Vector3 logicalCursorPosition;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public UnityEngine.Vector3 logicalPosition;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Quaternion rotation;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public IntVector logicalSize;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public string markerName;
	}
	[Token(Token = "0x20003CE")]
	public class DungeonRoomDesigner : MonoBehaviour
	{
		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntVector roomPosition;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntVector roomSize;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dungeon dungeon;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool realtimeUpdate;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool generateBoundaryMarkers;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DungeonRoomDoorDesigner[] doors;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DungeonRoomVoxel voxelWorld;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<FloorIsland> islands;

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x7AD328", Offset = "0x7AD328", VA = "0x7AD328")]
		public void GenerateLayout()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x7ADA78", Offset = "0x7ADA78", VA = "0x7ADA78")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x7AD628", Offset = "0x7AD628", VA = "0x7AD628")]
		public void CreateDoorPlatforms()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x7AD9D4", Offset = "0x7AD9D4", VA = "0x7AD9D4")]
		public void FillSmallGaps()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x7AE174", Offset = "0x7AE174", VA = "0x7AE174")]
		public void EmitMarkers(LevelMarkerList markerList)
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x7ADA7C", Offset = "0x7ADA7C", VA = "0x7ADA7C")]
		private void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x7AE7D0", Offset = "0x7AE7D0", VA = "0x7AE7D0")]
		public DungeonRoomDesigner()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x7AE8F0", Offset = "0x7AE8F0", VA = "0x7AE8F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518F90", Offset = "0x518F90")]
		private void <FillSmallGaps>b__12_0(DungeonRoomVoxelCell cell, IntVector coord)
		{
		}
	}
	[Token(Token = "0x20003CF")]
	internal struct CarvingCommand
	{
		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector3 localPosition;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DungeonRoomVoxelCellType cellType;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool stateLocked;

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x8E19AC", Offset = "0x8E19AC", VA = "0x8E19AC")]
		public CarvingCommand(UnityEngine.Vector3 localPosition, DungeonRoomVoxelCellType cellType, bool stateLocked)
		{
		}
	}
	[Token(Token = "0x20003D0")]
	internal class FloorIsland
	{
		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IntVector> islandCells;

		[Token(Token = "0x170002C9")]
		public List<IntVector> IslandCells
		{
			[Token(Token = "0x6001695")]
			[Address(RVA = "0x147CC2C", Offset = "0x147CC2C", VA = "0x147CC2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x147CC34", Offset = "0x147CC34", VA = "0x147CC34")]
		public static FloorIsland MergeIslands(FloorIsland[] islands)
		{
			return null;
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x147CC3C", Offset = "0x147CC3C", VA = "0x147CC3C")]
		public static FloorIsland[] FindIslands(DungeonRoomVoxel voxelWorld, int y)
		{
			return null;
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x147D234", Offset = "0x147D234", VA = "0x147D234")]
		public FloorIsland()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class DungeonRoomDesignerHook : DungeonEventListener
	{
		[Token(Token = "0x20003D2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C2D8", Offset = "0x50C2D8")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4001240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dungeon dungeon;

			[Token(Token = "0x600169C")]
			[Address(RVA = "0x7DC840", Offset = "0x7DC840", VA = "0x7DC840")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x600169D")]
			[Address(RVA = "0x7DC848", Offset = "0x7DC848", VA = "0x7DC848")]
			internal bool <OnPostDungeonLayoutBuild>b__0(DungeonRoomDesigner p)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C2E8", Offset = "0x50C2E8")]
		private sealed class <>c
		{
			[Token(Token = "0x4001241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<DungeonRoomDesigner> <>9__0_1;

			[Token(Token = "0x600169F")]
			[Address(RVA = "0x7DC81C", Offset = "0x7DC81C", VA = "0x7DC81C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016A0")]
			[Address(RVA = "0x7DC824", Offset = "0x7DC824", VA = "0x7DC824")]
			internal void <OnPostDungeonLayoutBuild>b__0_1(DungeonRoomDesigner r)
			{
			}
		}

		[Token(Token = "0x20003D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C2F8", Offset = "0x50C2F8")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dungeon dungeon;

			[Token(Token = "0x4001244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LevelMarkerList markers;

			[Token(Token = "0x60016A1")]
			[Address(RVA = "0x7DC8CC", Offset = "0x7DC8CC", VA = "0x7DC8CC")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60016A2")]
			[Address(RVA = "0x7DC8D4", Offset = "0x7DC8D4", VA = "0x7DC8D4")]
			internal bool <OnDungeonMarkersEmitted>b__0(DungeonRoomDesigner p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016A3")]
			[Address(RVA = "0x7DC958", Offset = "0x7DC958", VA = "0x7DC958")]
			internal void <OnDungeonMarkersEmitted>b__1(DungeonRoomDesigner r)
			{
			}
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x7AEB44", Offset = "0x7AEB44", VA = "0x7AEB44", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x7AED9C", Offset = "0x7AED9C", VA = "0x7AED9C", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x7AEF94", Offset = "0x7AEF94", VA = "0x7AEF94")]
		public DungeonRoomDesignerHook()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	public class DungeonRoomMarkerEmitter
	{
		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x7AEF9C", Offset = "0x7AEF9C", VA = "0x7AEF9C")]
		public static void EmitMarkers(DungeonRoomDesigner room, LevelMarkerList markerList)
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x7AF24C", Offset = "0x7AF24C", VA = "0x7AF24C")]
		private static PropSocket[] RectFillMarkers(IntVector min, IntVector max, int y, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x7AF3E0", Offset = "0x7AF3E0", VA = "0x7AF3E0")]
		private static PropSocket[] RectBoundaryMarkers(IntVector min, IntVector max, int y, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x7AF71C", Offset = "0x7AF71C", VA = "0x7AF71C")]
		private static PropSocket CreateMarker(UnityEngine.Vector3 position, Quaternion rotation, string name)
		{
			return null;
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x7AF830", Offset = "0x7AF830", VA = "0x7AF830")]
		public DungeonRoomMarkerEmitter()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	internal class DungeonRoomDesignerConstants
	{
		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Ground;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string Wall;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string WallHalf;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Door;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string Ceiling;

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x7AEA38", Offset = "0x7AEA38", VA = "0x7AEA38")]
		public DungeonRoomDesignerConstants()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public enum DungeonRoomVoxelCellData
	{
		[Token(Token = "0x400124B")]
		None,
		[Token(Token = "0x400124C")]
		Door,
		[Token(Token = "0x400124D")]
		Stair
	}
	[Token(Token = "0x20003D8")]
	public enum DungeonRoomVoxelCellType
	{
		[Token(Token = "0x400124F")]
		Empty,
		[Token(Token = "0x4001250")]
		Occupied
	}
	[Serializable]
	[Token(Token = "0x20003D9")]
	public class DungeonRoomVoxelCell
	{
		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public DungeonRoomVoxelCellType cellType;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public bool stateLocked;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public int cellData;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x7AF840", Offset = "0x7AF840", VA = "0x7AF840")]
		public DungeonRoomVoxelCell()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class DungeonRoomVoxel
	{
		[Token(Token = "0x20003DB")]
		private class MarkerEmitCommand
		{
			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x4001256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEngine.Vector3 position;

			[Token(Token = "0x4001257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x7DCA00", Offset = "0x7DCA00", VA = "0x7DCA00")]
			public MarkerEmitCommand()
			{
			}
		}

		[Token(Token = "0x20003DC")]
		private class MarkerEmitCommandList
		{
			[Token(Token = "0x4001258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<UnityEngine.Vector3, MarkerEmitCommand> Map;

			[Token(Token = "0x60016BE")]
			[Address(RVA = "0x7DCA08", Offset = "0x7DCA08", VA = "0x7DCA08")]
			public void Add(MarkerEmitCommand command)
			{
			}

			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x7DCA78", Offset = "0x7DCA78", VA = "0x7DCA78")]
			public void Remove(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x7DCAF4", Offset = "0x7DCAF4", VA = "0x7DCAF4")]
			public bool Contains(UnityEngine.Vector3 position, string markerName)
			{
				return default(bool);
			}

			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x7DCBE0", Offset = "0x7DCBE0", VA = "0x7DCBE0")]
			public MarkerEmitCommandList()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C308", Offset = "0x50C308")]
		private sealed class <>c
		{
			[Token(Token = "0x4001259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400125A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MarkerEmitCommand, float> <>9__16_0;

			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x7DC9E0", Offset = "0x7DC9E0", VA = "0x7DC9E0")]
			public <>c()
			{
			}

			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x7DC9E8", Offset = "0x7DC9E8", VA = "0x7DC9E8")]
			internal float <Pass_UpgradeWalls>b__16_0(MarkerEmitCommand c)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DungeonRoomVoxelCell[,,] cells;

		[Token(Token = "0x170002CA")]
		public DungeonRoomVoxelCell[,,] Cells
		{
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x7AF838", Offset = "0x7AF838", VA = "0x7AF838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0x7AD468", Offset = "0x7AD468", VA = "0x7AD468")]
		public DungeonRoomVoxel(int sizeX, int sizeY, int sizeZ)
		{
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0x7AF848", Offset = "0x7AF848", VA = "0x7AF848")]
		public void TagDoorCells(UnityEngine.Vector3 logicalPosition)
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0x7AF84C", Offset = "0x7AF84C", VA = "0x7AF84C")]
		public bool IsValidCoord(IntVector coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x7AF858", Offset = "0x7AF858", VA = "0x7AF858")]
		public bool IsValidCoord(int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x7AF8F8", Offset = "0x7AF8F8", VA = "0x7AF8F8")]
		public void SetState(IntVector coord, DungeonRoomVoxelCellType cellType)
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x7ADF3C", Offset = "0x7ADF3C", VA = "0x7ADF3C")]
		public void SetData(IntVector coord, DungeonRoomVoxelCellData cellData)
		{
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x7AF904", Offset = "0x7AF904", VA = "0x7AF904")]
		public bool IsValidPlatform(IntVector p)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x7AF980", Offset = "0x7AF980", VA = "0x7AF980")]
		public bool ContainsData(IntVector coord, DungeonRoomVoxelCellData cellData)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x7ADE78", Offset = "0x7ADE78", VA = "0x7ADE78")]
		public void SetState(IntVector coord, DungeonRoomVoxelCellType cellType, bool lockState)
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x7AE98C", Offset = "0x7AE98C", VA = "0x7AE98C")]
		public bool IsEmpty(int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x7AE19C", Offset = "0x7AE19C", VA = "0x7AE19C")]
		public void EmitMarkers(LevelMarkerList markerList, IntVector roomPosition, DungeonRoomDoorDesigner[] doors, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x7AFD38", Offset = "0x7AFD38", VA = "0x7AFD38")]
		private void Pass_UpgradeWalls(MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x7AFBA8", Offset = "0x7AFBA8", VA = "0x7AFBA8")]
		private void Pass_AddDoorMarkers(MarkerEmitCommandList commands, DungeonRoomDoorDesigner[] doors)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x7AFA48", Offset = "0x7AFA48", VA = "0x7AFA48")]
		private void EmitMarker(string markerName, float x, float y, float z, float angleY, MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x7AFACC", Offset = "0x7AFACC", VA = "0x7AFACC")]
		private void EmitMarker(string markerName, float x, float y, float z, Quaternion rotation, MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x7ADFF4", Offset = "0x7ADFF4", VA = "0x7ADFF4")]
		public void IterateCells(Action<DungeonRoomVoxelCell, IntVector> callback)
		{
		}
	}
}
namespace DungeonArchitect.RoadNetworks
{
	[Token(Token = "0x20003DE")]
	public class RoadGraphEdge
	{
		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int edgeId;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int ownerNodeId;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int otherNodeId;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float angleToXAxis;

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xA94624", Offset = "0xA94624", VA = "0xA94624")]
		public RoadGraphEdge()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class RoadGraphNode
	{
		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nodeId;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoadGraphEdge[] adjacentEdges;

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xA9462C", Offset = "0xA9462C", VA = "0xA9462C")]
		public RoadGraphNode()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class RoadGraph
	{
		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RoadGraphNode[] nodes;

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xDE1FC0", Offset = "0xDE1FC0", VA = "0xDE1FC0")]
		public RoadGraph()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public class RoadGraphBuilderSettings
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float interNodeDistance;

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xDE22F4", Offset = "0xDE22F4", VA = "0xDE22F4")]
		public RoadGraphBuilderSettings()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class RoadGraphBuilder
	{
		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RoadGraphBuilderSettings settings;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, RoadGraphBuildNode> nodes;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _nodeIdCounter;

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xDE2230", Offset = "0xDE2230", VA = "0xDE2230")]
		public RoadGraphBuilder()
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xDE2304", Offset = "0xDE2304", VA = "0xDE2304")]
		public RoadGraphBuilder(RoadGraphBuilderSettings settings)
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xDE23A4", Offset = "0xDE23A4", VA = "0xDE23A4")]
		public void Initialize(RoadGraph graph)
		{
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xDE25BC", Offset = "0xDE25BC", VA = "0xDE25BC")]
		private RoadGraphBuildNode FindNearestNode(UnityEngine.Vector3 position, float searchRadius)
		{
			return null;
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xDE2764", Offset = "0xDE2764", VA = "0xDE2764")]
		public void CreateLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, float thickness)
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xDE2B54", Offset = "0xDE2B54", VA = "0xDE2B54")]
		public void CreateCircle(UnityEngine.Vector3 center, float radius, float thickness)
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xDE2CA8", Offset = "0xDE2CA8", VA = "0xDE2CA8")]
		public RoadGraph BakeRoadGraph()
		{
			return null;
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xDE2958", Offset = "0xDE2958", VA = "0xDE2958")]
		public RoadGraphBuildNode CreateNode(UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xDE2A24", Offset = "0xDE2A24", VA = "0xDE2A24")]
		public void ConnectNodes(RoadGraphBuildNode a, RoadGraphBuildNode b, float thickness)
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class RoadGraphBuildNode
	{
		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nodeId;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<RoadGraphBuildNode> connectedNodes;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<float> edgeThickness;

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xDE2028", Offset = "0xDE2028", VA = "0xDE2028")]
		public RoadGraphBuildNode(int nodeId, UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xDE2130", Offset = "0xDE2130", VA = "0xDE2130")]
		public RoadGraphBuildNode(RoadGraphNode graphNode)
		{
		}
	}
	[Token(Token = "0x20003E4")]
	internal class RoadGraphBuilderUtils
	{
		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xDE2D00", Offset = "0xDE2D00", VA = "0xDE2D00")]
		public static RoadGraph BakeRoadGraph(IEnumerable<RoadGraphBuildNode> buildNodes)
		{
			return null;
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xDE33C8", Offset = "0xDE33C8", VA = "0xDE33C8")]
		private static int SortEdgesByAngle(RoadGraphEdge a, RoadGraphEdge b)
		{
			return default(int);
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xDE3408", Offset = "0xDE3408", VA = "0xDE3408")]
		public RoadGraphBuilderUtils()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public delegate void RoadBlockLayoutBuiltDelegate(ref UnityEngine.Vector3[] layout);
	[Token(Token = "0x20003E6")]
	public class RoadLayoutBuilder
	{
		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, RoadGraphNode> graphNodes;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshFilter meshFilter;

		[Token(Token = "0x1400002E")]
		public event RoadBlockLayoutBuiltDelegate RoadBlockLayoutBuilt
		{
			[Token(Token = "0x60016DB")]
			[Address(RVA = "0xA94634", Offset = "0xA94634", VA = "0xA94634")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FA0", Offset = "0x518FA0")]
			add
			{
			}
			[Token(Token = "0x60016DC")]
			[Address(RVA = "0xA946D4", Offset = "0xA946D4", VA = "0xA946D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FB0", Offset = "0x518FB0")]
			remove
			{
			}
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xA94774", Offset = "0xA94774", VA = "0xA94774")]
		public RoadLayoutBuilder(RoadGraph roadGraph, MeshFilter meshFilter)
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xA948DC", Offset = "0xA948DC", VA = "0xA948DC")]
		private void GenerateBoundaryMesh(RoadGraphEdge[] edges, UnityEngine.Vector3[] boundaryPoints, List<UnityEngine.Vector3> vertices, List<UnityEngine.Vector2> uv)
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xA94BD0", Offset = "0xA94BD0", VA = "0xA94BD0")]
		private UnityEngine.Vector3[] GenerateBlockBoundary(RoadGraphEdge[] edges)
		{
			return null;
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xA94FAC", Offset = "0xA94FAC", VA = "0xA94FAC")]
		public RoadGraph BakeLayoutGraph()
		{
			return null;
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xA955F4", Offset = "0xA955F4", VA = "0xA955F4")]
		private RoadGraphEdge[] TraverseEdgeBlock(RoadGraphEdge startEdge, HashSet<int> edgeVisited)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Navigation
{
	[Token(Token = "0x20003E7")]
	public abstract class DungeonNavAgent : MonoBehaviour
	{
		[Token(Token = "0x170002CB")]
		public abstract UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x60016E5")]
			get;
			[Token(Token = "0x60016E6")]
			set;
		}

		[Token(Token = "0x170002CC")]
		public abstract UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x60016E7")]
			get;
			[Token(Token = "0x60016E8")]
			set;
		}

		[Token(Token = "0x170002CD")]
		public abstract UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x60016E9")]
			get;
		}

		[Token(Token = "0x60016E2")]
		public abstract void Resume();

		[Token(Token = "0x60016E3")]
		public abstract void Stop();

		[Token(Token = "0x60016E4")]
		public abstract float GetRemainingDistance();

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x7AA5D4", Offset = "0x7AA5D4", VA = "0x7AA5D4")]
		protected DungeonNavAgent()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public class DungeonNavAgent2D : DungeonNavAgent
	{
		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAcceleration;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpeed;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float collisionQueryRange;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pathOptimizationRange;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float separationWeight;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UnityEngine.Vector2 navAgentCollisionOffset;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float updateFrequency;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int agentId;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DungeonNavMesh navMesh;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool running;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 previousDirection;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 destination;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Agent agent;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.Vector3 _debugNavDest;

		[Token(Token = "0x170002CE")]
		public DungeonNavMesh NavMesh
		{
			[Token(Token = "0x60016EB")]
			[Address(RVA = "0x7AA5DC", Offset = "0x7AA5DC", VA = "0x7AA5DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CF")]
		public override UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x60016EC")]
			[Address(RVA = "0x7AA5E4", Offset = "0x7AA5E4", VA = "0x7AA5E4", Slot = "7")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60016ED")]
			[Address(RVA = "0x7AA5F0", Offset = "0x7AA5F0", VA = "0x7AA5F0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		public override UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x60016EE")]
			[Address(RVA = "0x7AA5FC", Offset = "0x7AA5FC", VA = "0x7AA5FC", Slot = "9")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x7AA650", Offset = "0x7AA650", VA = "0x7AA650", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public override UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x7AA6D4", Offset = "0x7AA6D4", VA = "0x7AA6D4", Slot = "11")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170002D2")]
		public float DesiredSpeed
		{
			[Token(Token = "0x60016F1")]
			[Address(RVA = "0x7AA6E0", Offset = "0x7AA6E0", VA = "0x7AA6E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D3")]
		private UnityEngine.Vector3 ActorPosition3DX
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x7AAC50", Offset = "0x7AAC50", VA = "0x7AAC50")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x7AAC74", Offset = "0x7AAC74", VA = "0x7AAC74")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		private UnityEngine.Vector3 ActorPosition3D
		{
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x7AAC1C", Offset = "0x7AAC1C", VA = "0x7AAC1C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x7AACC0", Offset = "0x7AACC0", VA = "0x7AACC0")]
			set
			{
			}
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x7AA724", Offset = "0x7AA724", VA = "0x7AA724")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x7AA7E8", Offset = "0x7AA7E8", VA = "0x7AA7E8")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x7AA7F8", Offset = "0x7AA7F8", VA = "0x7AA7F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x7AA8F0", Offset = "0x7AA8F0", VA = "0x7AA8F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x7AAB4C", Offset = "0x7AAB4C", VA = "0x7AAB4C")]
		private void PositionOnNearestNavMesh()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x7AA6A0", Offset = "0x7AA6A0", VA = "0x7AA6A0")]
		public static SharpNav.Geometry.Vector3 ToSV3(UnityEngine.Vector3 v)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x7AA64C", Offset = "0x7AA64C", VA = "0x7AA64C")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x7AAD00", Offset = "0x7AAD00", VA = "0x7AAD00", Slot = "5")]
		public override void Stop()
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x7AAE04", Offset = "0x7AAE04", VA = "0x7AAE04", Slot = "4")]
		public override void Resume()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x7AAE10", Offset = "0x7AAE10", VA = "0x7AAE10")]
		private void Update()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x7AAE14", Offset = "0x7AAE14", VA = "0x7AAE14", Slot = "6")]
		public override float GetRemainingDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x7AAE9C", Offset = "0x7AAE9C", VA = "0x7AAE9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x7AB1D0", Offset = "0x7AB1D0", VA = "0x7AB1D0")]
		public DungeonNavAgent2D()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class DungeonNavAgent3D : DungeonNavAgent
	{
		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAcceleration;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpeed;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float collisionQueryRange;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pathOptimizationRange;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float separationWeight;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float gravity;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float updateFrequency;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float timeSinceLastNavUpdate;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterController character;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int agentId;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DungeonNavMesh navMesh;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool running;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 destination;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Agent agent;

		[Token(Token = "0x170002D5")]
		public DungeonNavMesh NavMesh
		{
			[Token(Token = "0x6001703")]
			[Address(RVA = "0x7AB244", Offset = "0x7AB244", VA = "0x7AB244")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D6")]
		public override UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x6001704")]
			[Address(RVA = "0x7AB24C", Offset = "0x7AB24C", VA = "0x7AB24C", Slot = "7")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001705")]
			[Address(RVA = "0x7AB258", Offset = "0x7AB258", VA = "0x7AB258", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public override UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6001706")]
			[Address(RVA = "0x7AB264", Offset = "0x7AB264", VA = "0x7AB264", Slot = "9")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001707")]
			[Address(RVA = "0x7AB2B8", Offset = "0x7AB2B8", VA = "0x7AB2B8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002D8")]
		public override UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x6001708")]
			[Address(RVA = "0x7AB33C", Offset = "0x7AB33C", VA = "0x7AB33C", Slot = "11")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170002D9")]
		public float DesiredSpeed
		{
			[Token(Token = "0x6001709")]
			[Address(RVA = "0x7AB37C", Offset = "0x7AB37C", VA = "0x7AB37C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x7AB3C0", Offset = "0x7AB3C0", VA = "0x7AB3C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x7AB418", Offset = "0x7AB418", VA = "0x7AB418")]
		private void Start()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x7AB694", Offset = "0x7AB694", VA = "0x7AB694")]
		private void PositionOnNearestNavMesh()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x7AB308", Offset = "0x7AB308", VA = "0x7AB308")]
		public static SharpNav.Geometry.Vector3 ToSV3(UnityEngine.Vector3 v)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x7AB2B4", Offset = "0x7AB2B4", VA = "0x7AB2B4")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x7AB794", Offset = "0x7AB794", VA = "0x7AB794", Slot = "5")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x7AB87C", Offset = "0x7AB87C", VA = "0x7AB87C", Slot = "4")]
		public override void Resume()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x7AB888", Offset = "0x7AB888", VA = "0x7AB888")]
		private void Update()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x7AB88C", Offset = "0x7AB88C", VA = "0x7AB88C", Slot = "6")]
		public override float GetRemainingDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x7AB924", Offset = "0x7AB924", VA = "0x7AB924")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x7AB99C", Offset = "0x7AB99C", VA = "0x7AB99C")]
		private void ProcessMove(bool recalculatePath)
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x7ABD98", Offset = "0x7ABD98", VA = "0x7ABD98")]
		public DungeonNavAgent3D()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class NavigationEvent
	{
		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xE945CC", Offset = "0xE945CC", VA = "0xE945CC")]
		public NavigationEvent()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	public delegate void OnNavmeshBuiltDelegate(NavigationEvent e);
	[Token(Token = "0x20003EC")]
	public class DungeonNavMesh : MonoBehaviour
	{
		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float agentHeight;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float agentRadius;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float agentClimbHeight;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float cellSize;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int maxCrowdAgents;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Mesh visualization;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color visualizationColor;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool visualize2D;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SharpNav.NavMesh navMesh;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshQuery navMeshQuery;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Crowd crowd;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PolyMesh polyMesh;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PolyMeshDetail polyMeshDetail;

		[Token(Token = "0x170002DA")]
		public SharpNav.NavMesh NavMesh
		{
			[Token(Token = "0x600171D")]
			[Address(RVA = "0x7ABF08", Offset = "0x7ABF08", VA = "0x7ABF08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DB")]
		public NavMeshQuery NavMeshQuery
		{
			[Token(Token = "0x600171E")]
			[Address(RVA = "0x7ABF10", Offset = "0x7ABF10", VA = "0x7ABF10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public Crowd Crowd
		{
			[Token(Token = "0x600171F")]
			[Address(RVA = "0x7ABF18", Offset = "0x7ABF18", VA = "0x7ABF18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DD")]
		public PolyMesh PolyMesh
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x7ABF20", Offset = "0x7ABF20", VA = "0x7ABF20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DE")]
		public PolyMeshDetail PolyMeshDetail
		{
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x7ABF28", Offset = "0x7ABF28", VA = "0x7ABF28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400002F")]
		public event OnNavmeshBuiltDelegate OnNavmeshBuilt
		{
			[Token(Token = "0x600171B")]
			[Address(RVA = "0x7ABDC8", Offset = "0x7ABDC8", VA = "0x7ABDC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FC0", Offset = "0x518FC0")]
			add
			{
			}
			[Token(Token = "0x600171C")]
			[Address(RVA = "0x7ABE68", Offset = "0x7ABE68", VA = "0x7ABE68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FD0", Offset = "0x518FD0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x7ABF30", Offset = "0x7ABF30", VA = "0x7ABF30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x7AC000", Offset = "0x7AC000", VA = "0x7AC000")]
		private void Update()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x7ABF38", Offset = "0x7ABF38", VA = "0x7ABF38")]
		public void SetNavMeshVisible(bool show)
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x7AC03C", Offset = "0x7AC03C", VA = "0x7AC03C")]
		public void Build()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x7AC760", Offset = "0x7AC760", VA = "0x7AC760")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x7AC2E8", Offset = "0x7AC2E8", VA = "0x7AC2E8")]
		private void BuildVisualization()
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x7AC764", Offset = "0x7AC764", VA = "0x7AC764")]
		public DungeonNavMesh()
		{
		}
	}
	[Token(Token = "0x20003ED")]
	public class NavigationBuildInvoker : DungeonEventListener
	{
		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xE93DF0", Offset = "0xE93DF0", VA = "0xE93DF0", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xE93EC8", Offset = "0xE93EC8", VA = "0xE93EC8")]
		public NavigationBuildInvoker()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public class NavigationTriangleProvider : MonoBehaviour
	{
		[Token(Token = "0x600172B")]
		[Address(RVA = "0xE945D4", Offset = "0xE945D4", VA = "0xE945D4", Slot = "4")]
		public virtual void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xE945D8", Offset = "0xE945D8", VA = "0xE945D8")]
		public NavigationTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public class CityLayoutTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x8E5DC8", Offset = "0x8E5DC8", VA = "0x8E5DC8", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x8E627C", Offset = "0x8E627C", VA = "0x8E627C")]
		public CityLayoutTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	public class Collision2DTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3[] cubeVertices;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] cubeIndices;

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x8E6AD4", Offset = "0x8E6AD4", VA = "0x8E6AD4", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x8E6BF8", Offset = "0x8E6BF8", VA = "0x8E6BF8")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x8E6EC4", Offset = "0x8E6EC4", VA = "0x8E6EC4")]
		public Collision2DTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public class CollisionTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3[] cubeVertices;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] cubeIndices;

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x8E70AC", Offset = "0x8E70AC", VA = "0x8E70AC", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x8E71D0", Offset = "0x8E71D0", VA = "0x8E71D0")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x8E74D0", Offset = "0x8E74D0", VA = "0x8E74D0")]
		public CollisionTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class LayoutFloorTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x9E10EC", Offset = "0x9E10EC", VA = "0x9E10EC", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x9E1720", Offset = "0x9E1720", VA = "0x9E1720")]
		public LayoutFloorTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class StaticMeshTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x6001739")]
		[Address(RVA = "0x7FC364", Offset = "0x7FC364", VA = "0x7FC364", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x7FC488", Offset = "0x7FC488", VA = "0x7FC488")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x7FC5A8", Offset = "0x7FC5A8", VA = "0x7FC5A8")]
		public static void AddMeshTriangles(List<Triangle3> triangles, Mesh mesh, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x7FC624", Offset = "0x7FC624", VA = "0x7FC624")]
		public static void AddMeshTriangles(List<Triangle3> triangles, UnityEngine.Vector3[] vertices, int[] indices, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x7FC8EC", Offset = "0x7FC8EC", VA = "0x7FC8EC")]
		public StaticMeshTriangleProvider()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	public class TerrainTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float terrainCellSize;

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xD79E10", Offset = "0xD79E10", VA = "0xD79E10", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xD79F00", Offset = "0xD79F00", VA = "0xD79F00")]
		private void AddTerrainTriangles(List<Triangle3> triangles, Terrain terrain)
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xD7A48C", Offset = "0xD7A48C", VA = "0xD7A48C")]
		public TerrainTriangleProvider()
		{
		}
	}
}
namespace DungeonArchitect.MiniMaps
{
	[Token(Token = "0x20003F5")]
	public abstract class DungeonMiniMap : MonoBehaviour
	{
		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float updateFrequency;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool enableFogOfWar;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RenderTexture minimapTexture;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader compositeShader;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntVector2 textureSize;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture staticImage;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture fogOfWar;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture overlayImage;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float timeSinceLastUpdate;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initialized;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector4 uvTransform;

		[Token(Token = "0x170002DF")]
		protected abstract bool SupportsFogOfWar
		{
			[Token(Token = "0x6001741")]
			get;
		}

		[Token(Token = "0x6001742")]
		protected abstract void CreateTextures(IntVector2 desiredSize, out Texture staticImage, out Texture fogOfWar, out Texture overlayImage, out IntVector2 targetTextureSize);

		[Token(Token = "0x6001743")]
		protected abstract void UpdateStaticTexture(Texture texture);

		[Token(Token = "0x6001744")]
		protected abstract void UpdateFogOfWarTexture(Texture texture);

		[Token(Token = "0x6001745")]
		protected abstract void UpdateOverlayTexture(Texture texture);

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x7A9F94", Offset = "0x7A9F94", VA = "0x7A9F94")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x7AA0C0", Offset = "0x7AA0C0", VA = "0x7AA0C0")]
		private void UpdateDynamicTextures()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x7AA4C0", Offset = "0x7AA4C0", VA = "0x7AA4C0")]
		private bool RequiresUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x7AA508", Offset = "0x7AA508", VA = "0x7AA508")]
		private void Update()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x7AA444", Offset = "0x7AA444", VA = "0x7AA444")]
		private Vector4 GetCompositeUVTransform()
		{
			return default(Vector4);
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x7AA110", Offset = "0x7AA110", VA = "0x7AA110")]
		private void RenderFinalImage()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x7AA564", Offset = "0x7AA564", VA = "0x7AA564")]
		protected DungeonMiniMap()
		{
		}
	}
}
namespace DungeonArchitect.Graphs
{
	[Token(Token = "0x20003F6")]
	public class CommentNode : GraphNode
	{
		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string message;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color background;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int fontSize;

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x8E82CC", Offset = "0x8E82CC", VA = "0x8E82CC", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x8E83C4", Offset = "0x8E83C4", VA = "0x8E83C4")]
		public CommentNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	public class IndexCounter
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int index;

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xCE5F60", Offset = "0xCE5F60", VA = "0xCE5F60")]
		public int GetNext()
		{
			return default(int);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xCE5F74", Offset = "0xCE5F74", VA = "0xCE5F74")]
		public IndexCounter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F8")]
	public class Graph : ScriptableObject
	{
		[Token(Token = "0x20003F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C318", Offset = "0x50C318")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40012BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string id;

			[Token(Token = "0x6001759")]
			[Address(RVA = "0x7E1C6C", Offset = "0x7E1C6C", VA = "0x7E1C6C")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x600175A")]
			[Address(RVA = "0x7E1C74", Offset = "0x7E1C74", VA = "0x7E1C74")]
			internal bool <GetNode>b__0(GraphNode node)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private IndexCounter indexCounter;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IndexCounter topZIndex;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<GraphNode> nodes;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<GraphLink> links;

		[Token(Token = "0x170002E0")]
		public IndexCounter IndexCounter
		{
			[Token(Token = "0x6001751")]
			[Address(RVA = "0x780D00", Offset = "0x780D00", VA = "0x780D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E1")]
		public List<GraphNode> Nodes
		{
			[Token(Token = "0x6001752")]
			[Address(RVA = "0x780D08", Offset = "0x780D08", VA = "0x780D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E2")]
		public List<GraphLink> Links
		{
			[Token(Token = "0x6001753")]
			[Address(RVA = "0x780D10", Offset = "0x780D10", VA = "0x780D10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		public IndexCounter TopZIndex
		{
			[Token(Token = "0x6001754")]
			[Address(RVA = "0x780D18", Offset = "0x780D18", VA = "0x780D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x77F6E8", Offset = "0x77F6E8", VA = "0x77F6E8", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x780D20", Offset = "0x780D20", VA = "0x780D20")]
		public GraphNode GetNode(string id)
		{
			return null;
		}

		[Token(Token = "0x6001757")]
		public T[] GetNodes<T>() where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x77F92C", Offset = "0x77F92C", VA = "0x77F92C")]
		public Graph()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public abstract class GraphBuilder
	{
		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Graph graph;

		[Token(Token = "0x170002E4")]
		public Graph Graph
		{
			[Token(Token = "0x600175B")]
			[Address(RVA = "0x780E6C", Offset = "0x780E6C", VA = "0x780E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x780E74", Offset = "0x780E74", VA = "0x780E74")]
		public GraphBuilder(Graph graph)
		{
		}

		[Token(Token = "0x600175D")]
		public abstract void DestroyNode(GraphNode node, UIUndoSystem undo);

		[Token(Token = "0x600175E")]
		public abstract GraphNode CreateNode(Type nodeType, UIUndoSystem undo);

		[Token(Token = "0x600175F")]
		public abstract TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin) where TLink : GraphLink;

		[Token(Token = "0x6001760")]
		public T CreateNode<T>(UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x780EA8", Offset = "0x780EA8", VA = "0x780EA8")]
		public void DestroyAllNodes(UIUndoSystem undo)
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class NonEditorGraphBuilder : GraphBuilder
	{
		[Token(Token = "0x6001762")]
		[Address(RVA = "0xE94FDC", Offset = "0xE94FDC", VA = "0xE94FDC")]
		public NonEditorGraphBuilder(Graph graph)
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xE94FE4", Offset = "0xE94FE4", VA = "0xE94FE4", Slot = "5")]
		public override GraphNode CreateNode(Type nodeType, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x6001764")]
		public override TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin)
		{
			return null;
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xE95130", Offset = "0xE95130", VA = "0xE95130", Slot = "4")]
		public override void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xE95730", Offset = "0xE95730", VA = "0xE95730")]
		private void DestroyObject(UnityEngine.Object obj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FC")]
	public class GraphCamera
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float maxAllowedZoom;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private UnityEngine.Vector2 position;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector2 ScreenOffset;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float zoomLevel;

		[Token(Token = "0x170002E5")]
		public float MaxAllowedZoom
		{
			[Token(Token = "0x6001767")]
			[Address(RVA = "0x780F78", Offset = "0x780F78", VA = "0x780F78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001768")]
			[Address(RVA = "0x780F80", Offset = "0x780F80", VA = "0x780F80")]
			set
			{
			}
		}

		[Token(Token = "0x170002E6")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6001769")]
			[Address(RVA = "0x780F88", Offset = "0x780F88", VA = "0x780F88")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x600176A")]
			[Address(RVA = "0x780F90", Offset = "0x780F90", VA = "0x780F90")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public float ZoomLevel
		{
			[Token(Token = "0x600176B")]
			[Address(RVA = "0x780F98", Offset = "0x780F98", VA = "0x780F98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600176C")]
			[Address(RVA = "0x780FA0", Offset = "0x780FA0", VA = "0x780FA0")]
			set
			{
			}
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x780FA8", Offset = "0x780FA8", VA = "0x780FA8")]
		public void Pan(int x, int y)
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x780FCC", Offset = "0x780FCC", VA = "0x780FCC")]
		public void Pan(UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x780FE8", Offset = "0x780FE8", VA = "0x780FE8")]
		public void HandleInput(Event e)
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x781180", Offset = "0x781180", VA = "0x781180")]
		public UnityEngine.Vector2 WorldToScreen(UnityEngine.Vector2 worldCoord)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x78115C", Offset = "0x78115C", VA = "0x78115C")]
		public UnityEngine.Vector2 ScreenToWorld(UnityEngine.Vector2 screenCoord)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x7811A8", Offset = "0x7811A8", VA = "0x7811A8")]
		public Rect WorldToScreen(Rect worldCoord)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x781244", Offset = "0x781244", VA = "0x781244")]
		public Rect ScreenToWorld(Rect screenCoord)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x7812DC", Offset = "0x7812DC", VA = "0x7812DC")]
		public void FocusOnBestFit(Graph graph, Rect editorBounds)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x781550", Offset = "0x781550", VA = "0x781550")]
		public void FocusOnNode(GraphNode node, Rect editorBounds)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x7815D8", Offset = "0x7815D8", VA = "0x7815D8")]
		public GraphCamera()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FD")]
	public class GraphLink : ScriptableObject
	{
		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int id;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GraphPin input;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphPin output;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Graph graph;

		[Token(Token = "0x170002E8")]
		public int Id
		{
			[Token(Token = "0x6001777")]
			[Address(RVA = "0x78C458", Offset = "0x78C458", VA = "0x78C458")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001778")]
			[Address(RVA = "0x78C460", Offset = "0x78C460", VA = "0x78C460")]
			set
			{
			}
		}

		[Token(Token = "0x170002E9")]
		public GraphPin Input
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0x78C4D8", Offset = "0x78C4D8", VA = "0x78C4D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x78C4E0", Offset = "0x78C4E0", VA = "0x78C4E0")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public GraphPin Output
		{
			[Token(Token = "0x600177B")]
			[Address(RVA = "0x78C4E8", Offset = "0x78C4E8", VA = "0x78C4E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177C")]
			[Address(RVA = "0x78C4F0", Offset = "0x78C4F0", VA = "0x78C4F0")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public Graph Graph
		{
			[Token(Token = "0x600177D")]
			[Address(RVA = "0x78C4F8", Offset = "0x78C4F8", VA = "0x78C4F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177E")]
			[Address(RVA = "0x78C500", Offset = "0x78C500", VA = "0x78C500")]
			set
			{
			}
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x78C508", Offset = "0x78C508", VA = "0x78C508")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x78C468", Offset = "0x78C468", VA = "0x78C468")]
		private void UpdateName()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x78C534", Offset = "0x78C534", VA = "0x78C534")]
		public float GetTangentStrength()
		{
			return default(float);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x78C660", Offset = "0x78C660", VA = "0x78C660")]
		public GraphLink()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FE")]
	public class GraphNode : ScriptableObject
	{
		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		protected string id;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		protected string caption;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		protected Rect bounds;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		protected bool canBeDeleted;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[HideInInspector]
		[SerializeField]
		protected bool canBeSelected;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[HideInInspector]
		[SerializeField]
		protected bool canBeMoved;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[HideInInspector]
		[SerializeField]
		protected bool selected;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		[SerializeField]
		protected int zIndex;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		protected List<GraphPin> inputPins;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		protected List<GraphPin> outputPins;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		protected Graph graph;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool dragging;

		[Token(Token = "0x170002EC")]
		public string Id
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0x78C668", Offset = "0x78C668", VA = "0x78C668")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001784")]
			[Address(RVA = "0x78C670", Offset = "0x78C670", VA = "0x78C670")]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public string Caption
		{
			[Token(Token = "0x6001785")]
			[Address(RVA = "0x78C678", Offset = "0x78C678", VA = "0x78C678")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001786")]
			[Address(RVA = "0x78C680", Offset = "0x78C680", VA = "0x78C680")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public Rect Bounds
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0x78C688", Offset = "0x78C688", VA = "0x78C688")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001788")]
			[Address(RVA = "0x78C694", Offset = "0x78C694", VA = "0x78C694")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public bool CanBeDeleted
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0x78C6A0", Offset = "0x78C6A0", VA = "0x78C6A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F0")]
		public bool CanBeSelected
		{
			[Token(Token = "0x600178A")]
			[Address(RVA = "0x78C6A8", Offset = "0x78C6A8", VA = "0x78C6A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F1")]
		public bool CanBeMoved
		{
			[Token(Token = "0x600178B")]
			[Address(RVA = "0x78C6B0", Offset = "0x78C6B0", VA = "0x78C6B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F2")]
		public bool Selected
		{
			[Token(Token = "0x600178C")]
			[Address(RVA = "0x78C6B8", Offset = "0x78C6B8", VA = "0x78C6B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600178D")]
			[Address(RVA = "0x783300", Offset = "0x783300", VA = "0x783300")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public UnityEngine.Vector2 Size
		{
			[Token(Token = "0x600178E")]
			[Address(RVA = "0x78C6C0", Offset = "0x78C6C0", VA = "0x78C6C0")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x600178F")]
			[Address(RVA = "0x77F968", Offset = "0x77F968", VA = "0x77F968")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6001790")]
			[Address(RVA = "0x78C6CC", Offset = "0x78C6CC", VA = "0x78C6CC")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6001791")]
			[Address(RVA = "0x788C4C", Offset = "0x788C4C", VA = "0x788C4C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		public int ZIndex
		{
			[Token(Token = "0x6001792")]
			[Address(RVA = "0x78C6D8", Offset = "0x78C6D8", VA = "0x78C6D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001793")]
			[Address(RVA = "0x78C6E0", Offset = "0x78C6E0", VA = "0x78C6E0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public GraphPin[] InputPins
		{
			[Token(Token = "0x6001794")]
			[Address(RVA = "0x78425C", Offset = "0x78425C", VA = "0x78425C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public GraphPin[] OutputPins
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0x7842D4", Offset = "0x7842D4", VA = "0x7842D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F8")]
		public GraphPin OutputPin
		{
			[Token(Token = "0x6001796")]
			[Address(RVA = "0x77FF84", Offset = "0x77FF84", VA = "0x77FF84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F9")]
		public GraphPin InputPin
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0x77FFEC", Offset = "0x77FFEC", VA = "0x77FFEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		public Graph Graph
		{
			[Token(Token = "0x6001798")]
			[Address(RVA = "0x78C6E8", Offset = "0x78C6E8", VA = "0x78C6E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FB")]
		public bool Dragging
		{
			[Token(Token = "0x600179D")]
			[Address(RVA = "0x78C6FC", Offset = "0x78C6FC", VA = "0x78C6FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600179E")]
			[Address(RVA = "0x78C704", Offset = "0x78C704", VA = "0x78C704")]
			set
			{
			}
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x78C6F0", Offset = "0x78C6F0", VA = "0x78C6F0", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x77F934", Offset = "0x77F934", VA = "0x77F934", Slot = "5")]
		public virtual void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x780C58", Offset = "0x780C58", VA = "0x780C58", Slot = "6")]
		public virtual void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x77E5D0", Offset = "0x77E5D0", VA = "0x77E5D0")]
		protected void UpdateName(string prefix)
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x78C710", Offset = "0x78C710", VA = "0x78C710")]
		protected GraphPin CreatePin(GraphPinType pinType, UnityEngine.Vector2 position, Rect boundsOffset, UnityEngine.Vector2 tangent)
		{
			return null;
		}

		[Token(Token = "0x60017A0")]
		protected T CreatePinOfType<T>(GraphPinType pinType, UnityEngine.Vector2 position, Rect boundsOffset, UnityEngine.Vector2 tangent) where T : GraphPin
		{
			return null;
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x78C7CC", Offset = "0x78C7CC", VA = "0x78C7CC")]
		public GraphNode[] GetParentNodes()
		{
			return null;
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x78C9CC", Offset = "0x78C9CC", VA = "0x78C9CC")]
		public GraphNode[] GetChildNodes()
		{
			return null;
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x784214", Offset = "0x784214", VA = "0x784214")]
		public void DragNode(UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x77F974", Offset = "0x77F974", VA = "0x77F974")]
		public GraphNode()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public enum GraphPinType
	{
		[Token(Token = "0x40012D1")]
		Input,
		[Token(Token = "0x40012D2")]
		Output,
		[Token(Token = "0x40012D3")]
		Unknown
	}
	[Token(Token = "0x2000400")]
	public enum GraphPinMouseState
	{
		[Token(Token = "0x40012D5")]
		Hover,
		[Token(Token = "0x40012D6")]
		Clicked,
		[Token(Token = "0x40012D7")]
		None
	}
	[Serializable]
	[Token(Token = "0x2000401")]
	public class GraphPin : ScriptableObject
	{
		[Token(Token = "0x2000402")]
		public delegate void OnPinLinksDestroyed(GraphPin pin);

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphPinMouseState clickState;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private GraphPinType pinType;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphNode node;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Vector2 position;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Rect boundsOffset;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.Vector2 tangent;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float tangentStrength;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool requestLinkDeletionInitiated;

		[Token(Token = "0x170002FC")]
		public GraphPinMouseState ClickState
		{
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0x78E990", Offset = "0x78E990", VA = "0x78E990")]
			get
			{
				return default(GraphPinMouseState);
			}
			[Token(Token = "0x60017A6")]
			[Address(RVA = "0x78E998", Offset = "0x78E998", VA = "0x78E998")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public GraphPinType PinType
		{
			[Token(Token = "0x60017A7")]
			[Address(RVA = "0x78E9A0", Offset = "0x78E9A0", VA = "0x78E9A0")]
			get
			{
				return default(GraphPinType);
			}
			[Token(Token = "0x60017A8")]
			[Address(RVA = "0x78E9A8", Offset = "0x78E9A8", VA = "0x78E9A8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public GraphNode Node
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x78EAF0", Offset = "0x78EAF0", VA = "0x78EAF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x78EAF8", Offset = "0x78EAF8", VA = "0x78EAF8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x78EB00", Offset = "0x78EB00", VA = "0x78EB00")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x60017AE")]
			[Address(RVA = "0x78EB08", Offset = "0x78EB08", VA = "0x78EB08")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		public UnityEngine.Vector2 WorldPosition
		{
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x78C5B8", Offset = "0x78C5B8", VA = "0x78C5B8")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x17000301")]
		public Rect BoundsOffset
		{
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x78EB10", Offset = "0x78EB10", VA = "0x78EB10")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x78EB1C", Offset = "0x78EB1C", VA = "0x78EB1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public UnityEngine.Vector2 Tangent
		{
			[Token(Token = "0x60017B2")]
			[Address(RVA = "0x78EB28", Offset = "0x78EB28", VA = "0x78EB28")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0x78EB30", Offset = "0x78EB30", VA = "0x78EB30")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public float TangentStrength
		{
			[Token(Token = "0x60017B4")]
			[Address(RVA = "0x78EB38", Offset = "0x78EB38", VA = "0x78EB38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017B5")]
			[Address(RVA = "0x78EB40", Offset = "0x78EB40", VA = "0x78EB40")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public bool RequestLinkDeletionInitiated
		{
			[Token(Token = "0x60017BC")]
			[Address(RVA = "0x78EC80", Offset = "0x78EC80", VA = "0x78EC80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017BD")]
			[Address(RVA = "0x78EC88", Offset = "0x78EC88", VA = "0x78EC88")]
			set
			{
			}
		}

		[Token(Token = "0x14000030")]
		public event OnPinLinksDestroyed PinLinksDestroyed
		{
			[Token(Token = "0x60017A9")]
			[Address(RVA = "0x78E9B0", Offset = "0x78E9B0", VA = "0x78E9B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FE0", Offset = "0x518FE0")]
			add
			{
			}
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x78EA50", Offset = "0x78EA50", VA = "0x78EA50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x518FF0", Offset = "0x518FF0")]
			remove
			{
			}
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x78EB48", Offset = "0x78EB48", VA = "0x78EB48")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x78BFA0", Offset = "0x78BFA0", VA = "0x78BFA0")]
		public GraphLink[] GetConntectedLinks()
		{
			return null;
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x78023C", Offset = "0x78023C", VA = "0x78023C", Slot = "4")]
		public virtual bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x78EB54", Offset = "0x78EB54", VA = "0x78EB54")]
		private Rect GetWorldBounds()
		{
			return default(Rect);
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x78EBF0", Offset = "0x78EBF0", VA = "0x78EBF0")]
		public Rect GetBounds()
		{
			return default(Rect);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x78C424", Offset = "0x78C424", VA = "0x78C424")]
		public void NotifyPinLinksDestroyed()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x780294", Offset = "0x780294", VA = "0x780294")]
		public GraphPin()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class GraphSchema
	{
		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x78ED94", Offset = "0x78ED94", VA = "0x78ED94", Slot = "4")]
		public virtual bool CanCreateLink(GraphPin output, GraphPin input)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x78EDC4", Offset = "0x78EDC4", VA = "0x78EDC4", Slot = "5")]
		public virtual bool CanCreateLink(GraphPin output, GraphPin input, out string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x78F42C", Offset = "0x78F42C", VA = "0x78F42C")]
		private static string CombineMarkerNames(List<MarkerNode> markerNodes)
		{
			return null;
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x78F144", Offset = "0x78F144", VA = "0x78F144")]
		private static bool ContainsLoops(GraphPin a, GraphPin b, ref List<MarkerNode> cyclePath)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x78F79C", Offset = "0x78F79C", VA = "0x78F79C")]
		private static bool FindCycles(ref Dictionary<MarkerNode, List<MarkerNode>> markerChildMap, ref List<MarkerNode> cyclePath)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x78FA2C", Offset = "0x78FA2C", VA = "0x78FA2C")]
		private static bool CheckCycleDFS(ref Dictionary<MarkerNode, List<MarkerNode>> markerChildMap, ref List<MarkerNode> traversePath)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x78FCD8", Offset = "0x78FCD8", VA = "0x78FCD8")]
		private static GraphNode[] GetOutgoingNodes(GraphNode node, GraphPin a, GraphPin b)
		{
			return null;
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x78F5DC", Offset = "0x78F5DC", VA = "0x78F5DC")]
		private static MarkerEmitterNode[] GetEmitters(MarkerNode markerNode, GraphPin a, GraphPin b)
		{
			return null;
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x789924", Offset = "0x789924", VA = "0x789924")]
		public GraphSchema()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000404")]
	public class GameObjectArrayNode : VisualNode
	{
		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject[] Templates;

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x1485D84", Offset = "0x1485D84", VA = "0x1485D84", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x1485E34", Offset = "0x1485E34", VA = "0x1485E34", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x1485F70", Offset = "0x1485F70", VA = "0x1485F70")]
		public GameObjectArrayNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000405")]
	public class GameObjectNode : VisualNode
	{
		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject Template;

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x77E510", Offset = "0x77E510", VA = "0x77E510", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x77E60C", Offset = "0x77E60C", VA = "0x77E60C", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x77E708", Offset = "0x77E708", VA = "0x77E708")]
		public GameObjectNode()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public class MarkerEmitterNode : PlaceableNode
	{
		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private MarkerNode marker;

		[Token(Token = "0x17000305")]
		public MarkerNode Marker
		{
			[Token(Token = "0x60017D2")]
			[Address(RVA = "0xC24648", Offset = "0xC24648", VA = "0xC24648")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017D3")]
			[Address(RVA = "0xC24650", Offset = "0xC24650", VA = "0xC24650")]
			set
			{
			}
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xC24658", Offset = "0xC24658", VA = "0xC24658", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xC2480C", Offset = "0xC2480C", VA = "0xC2480C")]
		public MarkerEmitterNode()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class MarkerNode : GraphNode
	{
		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xC24814", Offset = "0xC24814", VA = "0xC24814", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xC249CC", Offset = "0xC249CC", VA = "0xC249CC")]
		public MarkerNode()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class PlaceableNode : GraphNode
	{
		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Matrix4x4 offset;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool consumeOnAttach;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float attachmentProbability;

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x99D0E4", Offset = "0x99D0E4", VA = "0x99D0E4", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x99D1F4", Offset = "0x99D1F4", VA = "0x99D1F4")]
		public PlaceableNode()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public enum DungeonSpriteCollisionType
	{
		[Token(Token = "0x40012E8")]
		None,
		[Token(Token = "0x40012E9")]
		Box,
		[Token(Token = "0x40012EA")]
		Circle,
		[Token(Token = "0x40012EB")]
		Polygon
	}
	[Serializable]
	[Token(Token = "0x200040A")]
	public class SpriteNode : VisualNode
	{
		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Sprite sprite;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color color;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Material materialOverride;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public string sortingLayerName;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int orderInLayer;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public DungeonSpriteCollisionType collisionType;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public PhysicsMaterial2D physicsMaterial;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public UnityEngine.Vector2 physicsOffset;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public UnityEngine.Vector2 physicsSize;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float physicsRadius;

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x7FA7F0", Offset = "0x7FA7F0", VA = "0x7FA7F0", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x7FA8A0", Offset = "0x7FA8A0", VA = "0x7FA8A0", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x7FA9C0", Offset = "0x7FA9C0", VA = "0x7FA9C0")]
		public SpriteNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040B")]
	public class VisualNode : PlaceableNode
	{
		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool IsStatic;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool affectsNavigation;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public bool selectionRuleEnabled;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string selectionRuleClassName;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool transformRuleEnabled;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string transformRuleClassName;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool useSpatialConstraint;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		public SpatialConstraintAsset spatialConstraint;

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x7CF9AC", Offset = "0x7CF9AC", VA = "0x7CF9AC", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x7CFB90", Offset = "0x7CFB90", VA = "0x7CFB90", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x7CFCBC", Offset = "0x7CFCBC", VA = "0x7CFCBC")]
		public VisualNode()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.SpatialConstraints
{
	[Token(Token = "0x200040C")]
	public class SCBaseDomainNode : GraphNode
	{
		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float TileSize;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		protected SCRuleNodeDomain ruleDomain;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected bool isSnapped;

		[Token(Token = "0x17000306")]
		public SCRuleNodeDomain RuleDomain
		{
			[Token(Token = "0x60017E0")]
			[Address(RVA = "0xA974F8", Offset = "0xA974F8", VA = "0xA974F8")]
			get
			{
				return default(SCRuleNodeDomain);
			}
		}

		[Token(Token = "0x17000307")]
		public bool IsSnapped
		{
			[Token(Token = "0x60017E1")]
			[Address(RVA = "0xA97500", Offset = "0xA97500", VA = "0xA97500")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017E2")]
			[Address(RVA = "0xA97508", Offset = "0xA97508", VA = "0xA97508")]
			set
			{
			}
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xA97514", Offset = "0xA97514", VA = "0xA97514", Slot = "7")]
		public virtual Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xA9751C", Offset = "0xA9751C", VA = "0xA9751C", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xA975BC", Offset = "0xA975BC", VA = "0xA975BC")]
		public static UnityEngine.Vector2 GetSnapPosition(UnityEngine.Vector2 position)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xA9766C", Offset = "0xA9766C", VA = "0xA9766C")]
		public bool ContainsOtherNodeAt(UnityEngine.Vector2 snappedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xA9784C", Offset = "0xA9784C", VA = "0xA9784C")]
		public IntVector2 GetHalfGridLogicalCoords()
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xA9792C", Offset = "0xA9792C", VA = "0xA9792C")]
		private void UpdateRuleDomain()
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xA97994", Offset = "0xA97994", VA = "0xA97994", Slot = "8")]
		public virtual bool SnapNode()
		{
			return default(bool);
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xA97A60", Offset = "0xA97A60", VA = "0xA97A60")]
		public SCBaseDomainNode()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class SCReferenceNode : SCRuleNode
	{
		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xA97AC0", Offset = "0xA97AC0", VA = "0xA97AC0", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xA97AE8", Offset = "0xA97AE8", VA = "0xA97AE8", Slot = "7")]
		public override Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xA97B28", Offset = "0xA97B28", VA = "0xA97B28")]
		public SCReferenceNode()
		{
		}
	}
	[Token(Token = "0x200040E")]
	public enum SCRuleNodeDomain
	{
		[Token(Token = "0x4001302")]
		Tile,
		[Token(Token = "0x4001303")]
		Edge,
		[Token(Token = "0x4001304")]
		Corner,
		[Token(Token = "0x4001305")]
		Invalid
	}
	[Token(Token = "0x200040F")]
	public enum SCRuleNodeEvaluationMode
	{
		[Token(Token = "0x4001307")]
		AllRulesMustPass,
		[Token(Token = "0x4001308")]
		AtleastOneRuleShouldPass
	}
	[Token(Token = "0x2000410")]
	public class SCRuleNode : SCBaseDomainNode
	{
		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public ConstraintRule[] constraints;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public SCRuleNodeEvaluationMode constraintEvaluationMode;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		public float exclusionRuleSearchRadius;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public string[] exclusionRuleMarkersToRemove;

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xA97AE4", Offset = "0xA97AE4", VA = "0xA97AE4", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xA97C08", Offset = "0xA97C08", VA = "0xA97C08", Slot = "7")]
		public override Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xA97C10", Offset = "0xA97C10", VA = "0xA97C10", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xA97B2C", Offset = "0xA97B2C", VA = "0xA97B2C")]
		public SCRuleNode()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts
{
	[Token(Token = "0x2000411")]
	public interface IGraphLayout<T>
	{
		[Token(Token = "0x60017F3")]
		void Layout(T[] nodes, IGraphLayoutNodeActions<T> nodeActions);
	}
	[Token(Token = "0x2000412")]
	public interface IGraphLayoutNodeActions<T>
	{
		[Token(Token = "0x60017F4")]
		void SetNodePosition(T node, UnityEngine.Vector2 position);

		[Token(Token = "0x60017F5")]
		UnityEngine.Vector2 GetNodePosition(T node);

		[Token(Token = "0x60017F6")]
		T[] GetOutgoingNodes(T node);
	}
	[Token(Token = "0x2000413")]
	public enum GraphLayoutType
	{
		[Token(Token = "0x400130E")]
		Layered,
		[Token(Token = "0x400130F")]
		Spring
	}
	[Token(Token = "0x2000414")]
	public class GraphLayoutNode<T>
	{
		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5119C0", Offset = "0x5119C0")]
		private T <Payload>k__BackingField;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5119D0", Offset = "0x5119D0")]
		private UnityEngine.Vector2 <Position>k__BackingField;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5119E0", Offset = "0x5119E0")]
		private List<GraphLayoutNode<T>> <Outgoing>k__BackingField;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5119F0", Offset = "0x5119F0")]
		private List<GraphLayoutNode<T>> <Incoming>k__BackingField;

		[Token(Token = "0x17000308")]
		public T Payload
		{
			[Token(Token = "0x60017F7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519000", Offset = "0x519000")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60017F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519010", Offset = "0x519010")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x60017F9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519020", Offset = "0x519020")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x60017FA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519030", Offset = "0x519030")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public List<GraphLayoutNode<T>> Outgoing
		{
			[Token(Token = "0x60017FB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519040", Offset = "0x519040")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519050", Offset = "0x519050")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public List<GraphLayoutNode<T>> Incoming
		{
			[Token(Token = "0x60017FD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519060", Offset = "0x519060")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017FE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519070", Offset = "0x519070")]
			private set
			{
			}
		}

		[Token(Token = "0x60017FF")]
		public GraphLayoutNode(T payload, UnityEngine.Vector2 position)
		{
		}
	}
	[Token(Token = "0x2000415")]
	public abstract class GraphLayoutBase<T> : IGraphLayout<T>
	{
		[Token(Token = "0x6001800")]
		public void Layout(T[] nodes, IGraphLayoutNodeActions<T> nodeActions)
		{
		}

		[Token(Token = "0x6001801")]
		protected abstract void LayoutImpl(GraphLayoutNode<T>[] nodes);

		[Token(Token = "0x6001802")]
		protected GraphLayoutBase()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public class DefaultGraphLayoutNodeActions : IGraphLayoutNodeActions<GraphNode>
	{
		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<GraphNode, List<GraphNode>> outgoingNodes;

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xA570C8", Offset = "0xA570C8", VA = "0xA570C8")]
		public DefaultGraphLayoutNodeActions(Graph graph)
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xA574F0", Offset = "0xA574F0", VA = "0xA574F0", Slot = "4")]
		public void SetNodePosition(GraphNode node, UnityEngine.Vector2 position)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xA5750C", Offset = "0xA5750C", VA = "0xA5750C", Slot = "5")]
		public UnityEngine.Vector2 GetNodePosition(GraphNode node)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xA57528", Offset = "0xA57528", VA = "0xA57528", Slot = "6")]
		public GraphNode[] GetOutgoingNodes(GraphNode node)
		{
			return null;
		}
	}
	[Token(Token = "0x2000417")]
	public class RuntimeGraphLayoutNodeActions : IGraphLayoutNodeActions<RuntimeGraphNode<GrammarRuntimeGraphNodeData>>
	{
		[Token(Token = "0x6001807")]
		[Address(RVA = "0xA97468", Offset = "0xA97468", VA = "0xA97468", Slot = "4")]
		public void SetNodePosition(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node, UnityEngine.Vector2 position)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xA97480", Offset = "0xA97480", VA = "0xA97480", Slot = "5")]
		public UnityEngine.Vector2 GetNodePosition(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xA97498", Offset = "0xA97498", VA = "0xA97498", Slot = "6")]
		public RuntimeGraphNode<GrammarRuntimeGraphNodeData>[] GetOutgoingNodes(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node)
		{
			return null;
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xA974F0", Offset = "0xA974F0", VA = "0xA974F0")]
		public RuntimeGraphLayoutNodeActions()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts.Spring
{
	[Serializable]
	[Token(Token = "0x2000418")]
	public class GraphLayoutSpringConfig
	{
		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public float interNodeDistance;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float interNodeTension;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float springDistance;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float springTension;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public int iterations;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float timeStep;

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x78A4A4", Offset = "0x78A4A4", VA = "0x78A4A4")]
		public GraphLayoutSpringConfig()
		{
		}
	}
	[Token(Token = "0x2000419")]
	internal class SpatialGrid<T>
	{
		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<IntVector2, List<GraphLayoutNode<T>>> grid;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float cellSize;

		[Token(Token = "0x600180C")]
		public SpatialGrid(float cellSize)
		{
		}

		[Token(Token = "0x600180D")]
		public void Refresh(GraphLayoutNode<T>[] nodes)
		{
		}

		[Token(Token = "0x600180E")]
		private IntVector2 GetKey(GraphLayoutNode<T> node)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600180F")]
		public GraphLayoutNode<T>[] GetNearbyNodes(GraphLayoutNode<T> node)
		{
			return null;
		}
	}
	[Token(Token = "0x200041A")]
	public class GraphLayoutSpring<T> : GraphLayoutBase<T>
	{
		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GraphLayoutSpringConfig config;

		[Token(Token = "0x6001810")]
		public GraphLayoutSpring(GraphLayoutSpringConfig config)
		{
		}

		[Token(Token = "0x6001811")]
		protected override void LayoutImpl(GraphLayoutNode<T>[] nodes)
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts.Layered
{
	[Token(Token = "0x200041B")]
	internal class LayoutTreeNode<T>
	{
		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GraphLayoutNode<T> GraphNode;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Depth;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Mod;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LayoutTreeNode<T> Parent;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<LayoutTreeNode<T>> Children;

		[Token(Token = "0x6001812")]
		public LayoutTreeNode()
		{
		}
	}
	[Token(Token = "0x200041C")]
	internal class LayoutTree<T>
	{
		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LayoutTreeNode<T> root;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<LayoutTreeNode<T>> nodes;

		[Token(Token = "0x6001813")]
		public LayoutTree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041D")]
	public class GraphLayoutLayeredConfig
	{
		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public UnityEngine.Vector2 separation;

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x78C444", Offset = "0x78C444", VA = "0x78C444")]
		public GraphLayoutLayeredConfig()
		{
		}
	}
	[Token(Token = "0x200041E")]
	public class GraphLayoutLayered<T> : GraphLayoutBase<T>
	{
		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GraphLayoutLayeredConfig config;

		[Token(Token = "0x6001815")]
		public GraphLayoutLayered(GraphLayoutLayeredConfig config)
		{
		}

		[Token(Token = "0x6001816")]
		private LayoutTreeNode<T> BuildTreeNode(LayoutTree<T> tree, LayoutTreeNode<T> parent, GraphLayoutNode<T> graphNode, HashSet<GraphLayoutNode<T>> visited)
		{
			return null;
		}

		[Token(Token = "0x6001817")]
		private LayoutTree<T> BuildTree(GraphLayoutNode<T>[] nodes)
		{
			return null;
		}

		[Token(Token = "0x6001818")]
		private void TagNodeLevels(LayoutTreeNode<T> node, int depth)
		{
		}

		[Token(Token = "0x6001819")]
		private void CalculateInitialX(LayoutTreeNode<T> Node, LayoutTreeNode<T> LeftSibling)
		{
		}

		[Token(Token = "0x600181A")]
		private void ResolveConflicts(LayoutTreeNode<T> Node)
		{
		}

		[Token(Token = "0x600181B")]
		private void GetLeftContour(LayoutTreeNode<T> Node, float ModSum, Dictionary<int, float> ContourMap)
		{
		}

		[Token(Token = "0x600181C")]
		private void GetRightContour(LayoutTreeNode<T> Node, float ModSum, Dictionary<int, float> ContourMap)
		{
		}

		[Token(Token = "0x600181D")]
		private LayoutTreeNode<T> GetLeftMostSibling(LayoutTreeNode<T> Node)
		{
			return null;
		}

		[Token(Token = "0x600181E")]
		private LayoutTreeNode<T> GetNextSibling(LayoutTreeNode<T> Node)
		{
			return null;
		}

		[Token(Token = "0x600181F")]
		private void CalculateFinalX(LayoutTreeNode<T> Node, float TotalMod)
		{
		}

		[Token(Token = "0x6001820")]
		protected override void LayoutImpl(GraphLayoutNode<T>[] nodes)
		{
		}
	}
}
namespace DungeonArchitect.Landscape
{
	[Token(Token = "0x200041F")]
	public enum RasterizerTextureSpace
	{
		[Token(Token = "0x4001329")]
		HeightMap,
		[Token(Token = "0x400132A")]
		AlphaMap,
		[Token(Token = "0x400132B")]
		DetailMap
	}
	[Token(Token = "0x2000420")]
	public class LandscapeDataRasterizer
	{
		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Terrain terrain;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[,] heights;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool[,] lockedCells;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2Int heightmapFrameStart;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2Int heightmapFrameSize;

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x9DB994", Offset = "0x9DB994", VA = "0x9DB994")]
		public LandscapeDataRasterizer(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x9DBC1C", Offset = "0x9DBC1C", VA = "0x9DBC1C")]
		public void LoadData()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x9DBD40", Offset = "0x9DBD40", VA = "0x9DBD40")]
		private float GetElevation(float worldElevation)
		{
			return default(float);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x9DBDB0", Offset = "0x9DBDB0", VA = "0x9DBDB0")]
		public static float GetHeight(Terrain terrain, float worldX, float worldZ)
		{
			return default(float);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x9DBE3C", Offset = "0x9DBE3C", VA = "0x9DBE3C")]
		public static void WorldToTerrainDistance(Terrain terrain, float worldDistX, float worldDistZ, out int terrainDistX, out int terrainDistZ)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x9DBF08", Offset = "0x9DBF08", VA = "0x9DBF08")]
		public static void TerrainToWorldDistance(Terrain terrain, int terrainDistX, int terrainDistZ, out float worldDistX, out float worldDistZ)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x9DBE34", Offset = "0x9DBE34", VA = "0x9DBE34")]
		public static void WorldToTerrainCoord(Terrain terrain, float x, float y, out int gx, out int gy)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x9DBA8C", Offset = "0x9DBA8C", VA = "0x9DBA8C")]
		public static void WorldToTerrainCoord(Terrain terrain, float x, float y, out int gx, out int gy, RasterizerTextureSpace textureSpace)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x9DBFE8", Offset = "0x9DBFE8", VA = "0x9DBFE8")]
		public static void WorldToTerrainTextureCoord(Terrain terrain, float x, float y, out int tx, out int ty)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x9DC108", Offset = "0x9DC108", VA = "0x9DC108")]
		public static void WorldToTerrainDetailCoord(Terrain terrain, float x, float y, out int tx, out int ty)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x9DC228", Offset = "0x9DC228", VA = "0x9DC228")]
		public void DrawCell(float x, float y, float w, float h, float elevation)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x9DC230", Offset = "0x9DC230", VA = "0x9DC230")]
		public void DrawCell(float x, float y, float w, float h, float elevation, float flatten)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x9DC4B0", Offset = "0x9DC4B0", VA = "0x9DC4B0")]
		public void SmoothCell(float x, float y, float w, float h, float elevation, int smoothingDistance, AnimationCurve smoothingCurve)
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x9DC4B8", Offset = "0x9DC4B8", VA = "0x9DC4B8")]
		public void SmoothCell(float x, float y, float w, float h, float elevation, int smoothingDistance, AnimationCurve smoothingCurve, float flatten)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x9DC794", Offset = "0x9DC794", VA = "0x9DC794")]
		private float Remap(float value, float oldMin, float oldMax, float newMin, float newMax, bool clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x9DC7D8", Offset = "0x9DC7D8", VA = "0x9DC7D8")]
		public void SaveData()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public enum LandscapeTextureType
	{
		[Token(Token = "0x4001332")]
		Room,
		[Token(Token = "0x4001333")]
		Corridor,
		[Token(Token = "0x4001334")]
		Cliff
	}
	[Serializable]
	[Token(Token = "0x2000422")]
	public class LandscapeTexture
	{
		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LandscapeTextureType textureType;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TerrainLayer terrainLayer;

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x9DC828", Offset = "0x9DC828", VA = "0x9DC828")]
		public LandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000423")]
	public class DLCacheBounds
	{
		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[HideInInspector]
		public int x1;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		[HideInInspector]
		public int x2;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		public int y1;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[HideInInspector]
		public int y2;

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xA52B00", Offset = "0xA52B00", VA = "0xA52B00")]
		public DLCacheBounds()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000424")]
	public class DungeonLandscapeRestorationCache : ScriptableObject
	{
		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private float[] dataHeights;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsHeight;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private float[] dataAlphamap;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private int numAlphaMaps;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsAlpha;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private int[] dataDetails;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private int numDetailMaps;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsDetails;

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x7A8FE0", Offset = "0x7A8FE0", VA = "0x7A8FE0")]
		private static void SerializeArray(float[,] array, out float[] result)
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x7A9124", Offset = "0x7A9124", VA = "0x7A9124")]
		private static void SerializeArray(float[,,] array, int numAlphaMaps, out float[] result)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x7A92AC", Offset = "0x7A92AC", VA = "0x7A92AC")]
		private static void DeserializeArray(float[] array, int sx, int sy, out float[,] result)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x7A9438", Offset = "0x7A9438", VA = "0x7A9438")]
		private static void DeserializeArray(float[] array, int sx, int sy, int sm, int desiredSM, out float[,,] result)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x7A9654", Offset = "0x7A9654", VA = "0x7A9654")]
		public void SaveLandscapeData(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x7A9AA4", Offset = "0x7A9AA4", VA = "0x7A9AA4")]
		public void RestoreLandscapeData(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x7A9EC8", Offset = "0x7A9EC8", VA = "0x7A9EC8")]
		public DungeonLandscapeRestorationCache()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class LandscapeTransformerBase : DungeonEventListener
	{
		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Terrain terrain;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private bool cachedTerrainDataRestored;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private Rect worldBounds;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DungeonLandscapeRestorationCache landscapeRestorationCache;

		[Token(Token = "0x600183A")]
		[Address(RVA = "0x9DC830", Offset = "0x9DC830", VA = "0x9DC830", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x9DCA94", Offset = "0x9DCA94", VA = "0x9DCA94", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x9DCAD4", Offset = "0x9DCAD4", VA = "0x9DCAD4", Slot = "10")]
		protected virtual void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x9DCAD8", Offset = "0x9DCAD8", VA = "0x9DCAD8", Slot = "11")]
		protected virtual Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x9DC9D8", Offset = "0x9DC9D8", VA = "0x9DC9D8")]
		private void SaveLandscapeData(DungeonModel model)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x9DC940", Offset = "0x9DC940", VA = "0x9DC940")]
		private void RestoreLandscapeData(DungeonModel model)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0x9DCAE0", Offset = "0x9DCAE0", VA = "0x9DCAE0")]
		public LandscapeTransformerBase()
		{
		}
	}
}
namespace DungeonArchitect.Grammar
{
	[Serializable]
	[Token(Token = "0x2000426")]
	public class DungeonFlowAsset : ScriptableObject
	{
		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		public GrammarExecGraph executionGraph;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public GrammarProductionRule[] productionRules;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		public GrammarNodeType[] nodeTypes;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		public GrammarNodeType wildcardNodeType;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		public GrammarGraph resultGraph;

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x7A7C7C", Offset = "0x7A7C7C", VA = "0x7A7C7C")]
		public DungeonFlowAsset()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class GrammarNodeType : ScriptableObject
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string nodeName;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public string description;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Color nodeColor;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		public bool wildcard;

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x7802FC", Offset = "0x7802FC", VA = "0x7802FC")]
		public GrammarNodeType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000428")]
	public class GrammarProductionRule : ScriptableObject
	{
		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string ruleName;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public GrammarGraph LHSGraph;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		public List<WeightedGrammarGraph> RHSGraphs;

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x780358", Offset = "0x780358", VA = "0x780358")]
		public GrammarProductionRule()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class GrammarExecGraph : Graph
	{
		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public GrammarExecEntryNode entryNode;

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x77F6BC", Offset = "0x77F6BC", VA = "0x77F6BC", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x77F924", Offset = "0x77F924", VA = "0x77F924")]
		public GrammarExecGraph()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class GrammarExecEntryNode : GrammarExecNodeBase
	{
		[Token(Token = "0x6001846")]
		[Address(RVA = "0x77F4F4", Offset = "0x77F4F4", VA = "0x77F4F4", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x77F6B4", Offset = "0x77F6B4", VA = "0x77F6B4")]
		public GrammarExecEntryNode()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public class GrammarExecNodeBase : GraphNode
	{
		[Token(Token = "0x6001848")]
		[Address(RVA = "0x77F568", Offset = "0x77F568", VA = "0x77F568", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x77F6B8", Offset = "0x77F6B8", VA = "0x77F6B8")]
		public GrammarExecNodeBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200042C")]
	public enum GrammarExecRuleRunMode
	{
		[Token(Token = "0x4001355")]
		RunOnce,
		[Token(Token = "0x4001356")]
		RunWithProbability,
		[Token(Token = "0x4001357")]
		Iterate,
		[Token(Token = "0x4001358")]
		IterateRange
	}
	[Token(Token = "0x200042D")]
	public class GrammarExecRuleNode : GrammarExecNodeBase
	{
		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public GrammarProductionRule rule;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public GrammarExecRuleRunMode runMode;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float runProbability;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int iterateCount;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int minIterateCount;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int maxIterateCount;

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x77F9E0", Offset = "0x77F9E0", VA = "0x77F9E0")]
		public GrammarExecRuleNode()
		{
		}
	}
	[Token(Token = "0x200042E")]
	public class GrammarGraph : Graph
	{
		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useProceduralScript;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string generatorScriptClass;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyValueData editorData;

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x77F9FC", Offset = "0x77F9FC", VA = "0x77F9FC", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x77FA28", Offset = "0x77FA28", VA = "0x77FA28")]
		public GrammarGraph()
		{
		}
	}
	[Token(Token = "0x200042F")]
	public interface IGrammarGraphBuildScript
	{
		[Token(Token = "0x600184D")]
		void Generate(IGrammarGraphBuilder grammarBuilder);
	}
	[Token(Token = "0x2000430")]
	public interface IGrammarGraphBuilder
	{
		[Token(Token = "0x600184E")]
		int CreateNode(string nodeName, int executionIndex);

		[Token(Token = "0x600184F")]
		bool LinkNodes(int nodeAId, int nodeBId);
	}
	[Token(Token = "0x2000431")]
	public class GrammarGraphBuilder : IGrammarGraphBuilder
	{
		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GrammarNodeType[] nodeTypes;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphBuilder graphBuilder;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int nodeIdCounter;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GrammarGraph grammarGraph;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, GraphNode> generatedNodes;

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x77FA98", Offset = "0x77FA98", VA = "0x77FA98")]
		public GrammarGraphBuilder(GrammarGraph grammarGraph, GrammarNodeType[] nodeTypes, GraphBuilder graphBuilder)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x77FB68", Offset = "0x77FB68", VA = "0x77FB68", Slot = "4")]
		public int CreateNode(string nodeName, int executionIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x77FD68", Offset = "0x77FD68", VA = "0x77FD68", Slot = "5")]
		public bool LinkNodes(int nodeAId, int nodeBId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x780054", Offset = "0x780054", VA = "0x780054")]
		public void ClearGraph()
		{
		}
	}
	[Token(Token = "0x2000432")]
	public class GrammarNodeBase : GraphNode
	{
		[Token(Token = "0x6001854")]
		[Address(RVA = "0x780168", Offset = "0x780168", VA = "0x780168")]
		public GrammarNodeBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000433")]
	public class GrammarNodePin : GraphPin
	{
		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x78016C", Offset = "0x78016C", VA = "0x78016C", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x780288", Offset = "0x780288", VA = "0x780288")]
		public GrammarNodePin()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public class GrammarRuleNode : GrammarNodeBase
	{
		[Token(Token = "0x6001857")]
		[Address(RVA = "0x7803DC", Offset = "0x7803DC", VA = "0x7803DC")]
		public GrammarRuleNode()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public class GrammarTaskNode : GrammarNodeBase
	{
		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GrammarNodeType NodeType;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int executionIndex;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool DisplayExecutionIndex;

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x780A60", Offset = "0x780A60", VA = "0x780A60", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x780BAC", Offset = "0x780BAC", VA = "0x780BAC", Slot = "6")]
		public override void CopyFrom(GraphNode otherNode)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x780CF4", Offset = "0x780CF4", VA = "0x780CF4")]
		public GrammarTaskNode()
		{
		}
	}
	[Token(Token = "0x2000436")]
	public class GrammarRuntimeGraphNodeData
	{
		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarNodeType nodeType;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x780830", Offset = "0x780830", VA = "0x780830", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x780908", Offset = "0x780908", VA = "0x780908")]
		public GrammarRuntimeGraphNodeData()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public class GrammarRuntimeGraph : RuntimeGraph<GrammarRuntimeGraphNodeData>
	{
		[Token(Token = "0x600185D")]
		[Address(RVA = "0x7803E0", Offset = "0x7803E0", VA = "0x7803E0")]
		public static GrammarRuntimeGraph BuildFrom(GrammarGraph graph)
		{
			return null;
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x780490", Offset = "0x780490", VA = "0x780490")]
		public static void BuildFrom(GrammarGraph graph, GrammarRuntimeGraph runtimeGraph)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x780444", Offset = "0x780444", VA = "0x780444")]
		public GrammarRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class GrammarRuntimeGraphUtils
	{
		[Token(Token = "0x6001860")]
		[Address(RVA = "0x780910", Offset = "0x780910", VA = "0x780910")]
		public static RuntimeGraphNode<GrammarRuntimeGraphNodeData> FindStartNode(GrammarRuntimeGraph graph)
		{
			return null;
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x780A58", Offset = "0x780A58", VA = "0x780A58")]
		public GrammarRuntimeGraphUtils()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public class GrammarRuntimeGraphHandlers : RuntimeGraphBuilderHandlers<GrammarRuntimeGraphNodeData>
	{
		[Serializable]
		[Token(Token = "0x200043A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C328", Offset = "0x50C328")]
		private sealed class <>c
		{
			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GraphNode, GrammarRuntimeGraphNodeData> <>9__0_0;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<GraphNode, bool> <>9__0_1;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action<GraphNode, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> <>9__0_2;

			[Token(Token = "0x6001865")]
			[Address(RVA = "0x7E1B04", Offset = "0x7E1B04", VA = "0x7E1B04")]
			public <>c()
			{
			}

			[Token(Token = "0x6001866")]
			[Address(RVA = "0x7E1B0C", Offset = "0x7E1B0C", VA = "0x7E1B0C")]
			internal GrammarRuntimeGraphNodeData <Create>b__0_0(GraphNode graphNode)
			{
				return null;
			}

			[Token(Token = "0x6001867")]
			[Address(RVA = "0x7E1BEC", Offset = "0x7E1BEC", VA = "0x7E1BEC")]
			internal bool <Create>b__0_1(GraphNode graphNode)
			{
				return default(bool);
			}

			[Token(Token = "0x6001868")]
			[Address(RVA = "0x7E1C68", Offset = "0x7E1C68", VA = "0x7E1C68")]
			internal void <Create>b__0_2(GraphNode graphNode, RuntimeGraphNode<GrammarRuntimeGraphNodeData> runtimeNode)
			{
			}
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x780520", Offset = "0x780520", VA = "0x780520")]
		public static GrammarRuntimeGraphHandlers Create()
		{
			return null;
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x7807E4", Offset = "0x7807E4", VA = "0x7807E4")]
		public GrammarRuntimeGraphHandlers()
		{
		}
	}
	[Token(Token = "0x200043B")]
	public class ExecutionRuntimeGraphNodeData
	{
		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RuntimeGrammarProduction rule;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrammarExecRuleRunMode runMode;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float runProbability;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int iterateCount;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int minIterateCount;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int maxIterateCount;

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x1478B28", Offset = "0x1478B28", VA = "0x1478B28")]
		public ExecutionRuntimeGraphNodeData()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class ExecutionRuntimeGraph : RuntimeGraph<ExecutionRuntimeGraphNodeData>
	{
		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511FD8", Offset = "0x511FD8")]
		private RuntimeGraphNode<ExecutionRuntimeGraphNodeData> <EntryNode>k__BackingField;

		[Token(Token = "0x1700030C")]
		public RuntimeGraphNode<ExecutionRuntimeGraphNodeData> EntryNode
		{
			[Token(Token = "0x600186A")]
			[Address(RVA = "0x1478744", Offset = "0x1478744", VA = "0x1478744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519080", Offset = "0x519080")]
			get
			{
				return null;
			}
			[Token(Token = "0x600186B")]
			[Address(RVA = "0x147874C", Offset = "0x147874C", VA = "0x147874C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519090", Offset = "0x519090")]
			set
			{
			}
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x1478754", Offset = "0x1478754", VA = "0x1478754")]
		public static ExecutionRuntimeGraph BuildFrom(GrammarExecGraph graph, Dictionary<GrammarProductionRule, RuntimeGrammarProduction> mapping)
		{
			return null;
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x14787E8", Offset = "0x14787E8", VA = "0x14787E8")]
		public ExecutionRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public class ExecutionRuntimeGraphHandlers : RuntimeGraphBuilderHandlers<ExecutionRuntimeGraphNodeData>
	{
		[Token(Token = "0x200043E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C338", Offset = "0x50C338")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4001378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<GrammarProductionRule, RuntimeGrammarProduction> mapping;

			[Token(Token = "0x6001870")]
			[Address(RVA = "0x7DDAC8", Offset = "0x7DDAC8", VA = "0x7DDAC8")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001871")]
			[Address(RVA = "0x7DDAD0", Offset = "0x7DDAD0", VA = "0x7DDAD0")]
			internal ExecutionRuntimeGraphNodeData <Create>b__0(GraphNode graphNode)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200043F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C348", Offset = "0x50C348")]
		private sealed class <>c
		{
			[Token(Token = "0x4001379")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400137A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GraphNode, bool> <>9__0_1;

			[Token(Token = "0x400137B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<GraphNode, RuntimeGraphNode<ExecutionRuntimeGraphNodeData>> <>9__0_2;

			[Token(Token = "0x6001873")]
			[Address(RVA = "0x7DD91C", Offset = "0x7DD91C", VA = "0x7DD91C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001874")]
			[Address(RVA = "0x7DD924", Offset = "0x7DD924", VA = "0x7DD924")]
			internal bool <Create>b__0_1(GraphNode graphNode)
			{
				return default(bool);
			}

			[Token(Token = "0x6001875")]
			[Address(RVA = "0x7DD9E0", Offset = "0x7DD9E0", VA = "0x7DD9E0")]
			internal void <Create>b__0_2(GraphNode graphNode, RuntimeGraphNode<ExecutionRuntimeGraphNodeData> runtimeNode)
			{
			}
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x1478834", Offset = "0x1478834", VA = "0x1478834")]
		public static ExecutionRuntimeGraphHandlers Create(Dictionary<GrammarProductionRule, RuntimeGrammarProduction> mapping)
		{
			return null;
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x1478ADC", Offset = "0x1478ADC", VA = "0x1478ADC")]
		public ExecutionRuntimeGraphHandlers()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class WeightedGrammarRuntimeGraph : GrammarRuntimeGraph
	{
		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Weight;

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x7D30CC", Offset = "0x7D30CC", VA = "0x7D30CC")]
		public WeightedGrammarRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class RuntimeGrammarProduction
	{
		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarProductionRule rule;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrammarRuntimeGraph LHS;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WeightedGrammarRuntimeGraph[] RHSList;

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xA97458", Offset = "0xA97458", VA = "0xA97458")]
		public RuntimeGrammarProduction()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class RuntimeGrammar
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarRuntimeGraph ResultGraph;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExecutionRuntimeGraph ExecutionGraph;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RuntimeGrammarProduction[] Rules;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrammarNodeType[] NodeTypes;

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xA97060", Offset = "0xA97060", VA = "0xA97060")]
		public static RuntimeGrammar Build(DungeonFlowAsset flowAsset)
		{
			return null;
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xA97450", Offset = "0xA97450", VA = "0xA97450")]
		public RuntimeGrammar()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class GraphGrammarProcessorSettings
	{
		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int seed;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool runGraphGenerationScripts;

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x78BCD8", Offset = "0x78BCD8", VA = "0x78BCD8")]
		public GraphGrammarProcessorSettings()
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class GraphGrammarProcessor
	{
		[Serializable]
		[Token(Token = "0x2000445")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C358", Offset = "0x50C358")]
		private sealed class <>c
		{
			[Token(Token = "0x4001389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400138A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GraphNode, bool> <>9__8_0;

			[Token(Token = "0x6001887")]
			[Address(RVA = "0x7E2570", Offset = "0x7E2570", VA = "0x7E2570")]
			public <>c()
			{
			}

			[Token(Token = "0x6001888")]
			[Address(RVA = "0x7E2578", Offset = "0x7E2578", VA = "0x7E2578")]
			internal bool <RunGraphGenerationScript>b__8_0(GraphNode n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x511FE8", Offset = "0x511FE8")]
		private RuntimeGrammar <Grammar>k__BackingField;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private System.Random random;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraphGrammarProcessorSettings settings;

		[Token(Token = "0x1700030D")]
		public RuntimeGrammar Grammar
		{
			[Token(Token = "0x600187B")]
			[Address(RVA = "0x789C88", Offset = "0x789C88", VA = "0x789C88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190A0", Offset = "0x5190A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600187C")]
			[Address(RVA = "0x789C90", Offset = "0x789C90", VA = "0x789C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190B0", Offset = "0x5190B0")]
			set
			{
			}
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x789C98", Offset = "0x789C98", VA = "0x789C98")]
		public GraphGrammarProcessor(DungeonFlowAsset asset, GraphGrammarProcessorSettings settings)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x789EB0", Offset = "0x789EB0", VA = "0x789EB0")]
		private void RunGraphGenerationScripts(DungeonFlowAsset asset)
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x78A0B8", Offset = "0x78A0B8", VA = "0x78A0B8")]
		private void RunGraphGenerationScript(GrammarGraph graph, GrammarNodeType[] nodeTypes)
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x78A4C4", Offset = "0x78A4C4", VA = "0x78A4C4")]
		public void Build()
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x78A6B8", Offset = "0x78A6B8", VA = "0x78A6B8")]
		private int GetExecutionCount(ExecutionRuntimeGraphNodeData data)
		{
			return default(int);
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x78A800", Offset = "0x78A800", VA = "0x78A800")]
		private WeightedGrammarRuntimeGraph GetRandomGraph(WeightedGrammarRuntimeGraph[] graphs)
		{
			return null;
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x78A738", Offset = "0x78A738", VA = "0x78A738")]
		private void ApplyRule(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGrammarProduction rule)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x78BB3C", Offset = "0x78BB3C", VA = "0x78BB3C")]
		private Dictionary<int, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> CreateNodeByIndexMap(RuntimeGraph<GrammarRuntimeGraphNodeData> graph)
		{
			return null;
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x78AE2C", Offset = "0x78AE2C", VA = "0x78AE2C")]
		private void ApplyMatch(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGraph<GrammarRuntimeGraphNodeData> lhs, RuntimeGraph<GrammarRuntimeGraphNodeData> rhs, Dictionary<RuntimeGraphNode<GrammarRuntimeGraphNodeData>, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> LHSToDataNode)
		{
		}
	}
	[Token(Token = "0x2000446")]
	internal class GraphPatternMatch
	{
		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<RuntimeGraphNode<GrammarRuntimeGraphNodeData>, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> PatternToDataNode;

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x78E2BC", Offset = "0x78E2BC", VA = "0x78E2BC")]
		public GraphPatternMatch()
		{
		}
	}
	[Token(Token = "0x2000447")]
	internal class GraphPatternMatcher
	{
		[Token(Token = "0x600188A")]
		[Address(RVA = "0x78A8D0", Offset = "0x78A8D0", VA = "0x78A8D0")]
		public static GraphPatternMatch[] Match(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGraph<GrammarRuntimeGraphNodeData> patternGraph)
		{
			return null;
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x78E4E4", Offset = "0x78E4E4", VA = "0x78E4E4")]
		private static bool IsNodeDataEqual(RuntimeGraphNode<GrammarRuntimeGraphNodeData> a, RuntimeGraphNode<GrammarRuntimeGraphNodeData> b)
		{
			return default(bool);
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x78E620", Offset = "0x78E620", VA = "0x78E620")]
		private static bool TraverseChildren(List<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> dataChildNodes, List<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> patternChildNodes, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> unmatchedNodes, GraphPatternMatch match, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x78E340", Offset = "0x78E340", VA = "0x78E340")]
		private static bool MatchRecursive(RuntimeGraphNode<GrammarRuntimeGraphNodeData> dataNode, RuntimeGraphNode<GrammarRuntimeGraphNodeData> patternNode, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> unmatchedNodes, GraphPatternMatch match, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x78E988", Offset = "0x78E988", VA = "0x78E988")]
		public GraphPatternMatcher()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000448")]
	public class WeightedGrammarGraph : ScriptableObject
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float weight;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public GrammarGraph graph;

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x7D30C4", Offset = "0x7D30C4", VA = "0x7D30C4")]
		public WeightedGrammarGraph()
		{
		}
	}
}
namespace DungeonArchitect.SpatialConstraints
{
	[Token(Token = "0x2000449")]
	public class SpatialConstraintRuleDomain
	{
		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SCReferenceNode referenceNode;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x7F448C", Offset = "0x7F448C", VA = "0x7F448C")]
		public SpatialConstraintRuleDomain()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class RuleMetaAttribute : Attribute
	{
		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xA96EF8", Offset = "0xA96EF8", VA = "0xA96EF8")]
		public RuleMetaAttribute()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class ConstraintRuleContext
	{
		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpatialConstraintProcessorContext processorContext;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpatialConstraintRuleDomain domain;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCRuleNode ruleNode;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 ruleNodeWorldPosition;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Matrix4x4 rotationFrame;

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xA49DE0", Offset = "0xA49DE0", VA = "0xA49DE0")]
		public ConstraintRuleContext()
		{
		}
	}
	[Token(Token = "0x200044C")]
	public abstract class ConstraintRule : ScriptableObject
	{
		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public string ruleName;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool inverseRule;

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xA49B5C", Offset = "0xA49B5C", VA = "0xA49B5C", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001894")]
		public abstract bool Process(ConstraintRuleContext context);

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xA49BB8", Offset = "0xA49BB8", VA = "0xA49BB8")]
		public static string GetFullMenuPath(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xA49CD4", Offset = "0xA49CD4", VA = "0xA49CD4")]
		public static string GetScriptName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xA49D54", Offset = "0xA49D54", VA = "0xA49D54")]
		public string GetFullMenuPath()
		{
			return null;
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xA49BA0", Offset = "0xA49BA0", VA = "0xA49BA0")]
		public string GetScriptName()
		{
			return null;
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xA49D6C", Offset = "0xA49D6C", VA = "0xA49D6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xA49DD0", Offset = "0xA49DD0", VA = "0xA49DD0")]
		protected ConstraintRule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200044D")]
	public class SpatialConstraintAsset : ScriptableObject
	{
		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool rotateToFit;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool applyFitRotation;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[SerializeField]
		public bool applyMarkerRotation;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[SerializeField]
		public bool checkRelativeToMarkerRotation;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public GraphNode hostThemeNode;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private SpatialConstraintGraph graph;

		[Token(Token = "0x1700030E")]
		public SpatialConstraintGraph Graph
		{
			[Token(Token = "0x600189B")]
			[Address(RVA = "0x7F41AC", Offset = "0x7F41AC", VA = "0x7F41AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x7F41B4", Offset = "0x7F41B4", VA = "0x7F41B4")]
		public void Init(GraphNode hostThemeNode)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x7F4258", Offset = "0x7F4258", VA = "0x7F4258")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x7F4264", Offset = "0x7F4264", VA = "0x7F4264")]
		public SpatialConstraintAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200044E")]
	public class SpatialConstraintGraph : Graph
	{
		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public SpatialConstraintAsset asset;

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x7F427C", Offset = "0x7F427C", VA = "0x7F427C", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x7F4284", Offset = "0x7F4284", VA = "0x7F4284")]
		public SpatialConstraintGraph()
		{
		}
	}
	[Token(Token = "0x200044F")]
	public class SpatialConstraintProcessorUtils
	{
		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x7F5820", Offset = "0x7F5820", VA = "0x7F5820")]
		public static UnityEngine.Vector2 GetPosition2D(UnityEngine.Vector3 position)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x7F5F78", Offset = "0x7F5F78", VA = "0x7F5F78")]
		public static UnityEngine.Vector3 RotateVector(UnityEngine.Vector3 position, Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x7F5638", Offset = "0x7F5638", VA = "0x7F5638")]
		public static UnityEngine.Vector3 GetRuleNodeWorldPosition(SCRuleNode ruleNode, SCReferenceNode referenceNode, PropSocket marker, UnityEngine.Vector3 gridSize, ref Matrix4x4 rotationFrame)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x7F5FBC", Offset = "0x7F5FBC", VA = "0x7F5FBC")]
		public SpatialConstraintProcessorUtils()
		{
		}
	}
	[Token(Token = "0x2000450")]
	public class SpatialConstraintProcessorContext
	{
		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpatialConstraintAsset constraintAsset;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropSocket marker;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonModel model;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DungeonConfig config;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DungeonBuilder builder;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LevelMarkerList levelMarkers;

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x7F5BF8", Offset = "0x7F5BF8", VA = "0x7F5BF8")]
		public SpatialConstraintProcessorContext()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public abstract class SpatialConstraintProcessor : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000452")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C368", Offset = "0x50C368")]
		private sealed class <>c
		{
			[Token(Token = "0x40013A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40013A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GraphNode, bool> <>9__0_0;

			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<GraphNode, bool> <>9__1_0;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<ConstraintRule, bool> <>9__1_1;

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0xA44164", Offset = "0xA44164", VA = "0xA44164")]
			public <>c()
			{
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0xA4416C", Offset = "0xA4416C", VA = "0xA4416C")]
			internal bool <GetDomain>b__0_0(GraphNode node)
			{
				return default(bool);
			}

			[Token(Token = "0x60018AD")]
			[Address(RVA = "0xA441E8", Offset = "0xA441E8", VA = "0xA441E8")]
			internal bool <ProcessSpatialConstraintFrame>b__1_0(GraphNode node)
			{
				return default(bool);
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0xA44264", Offset = "0xA44264", VA = "0xA44264")]
			internal bool <ProcessSpatialConstraintFrame>b__1_1(ConstraintRule c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x7F428C", Offset = "0x7F428C", VA = "0x7F428C", Slot = "4")]
		public virtual SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x7F44C0", Offset = "0x7F44C0", VA = "0x7F44C0")]
		private bool ProcessSpatialConstraintFrame(SpatialConstraintProcessorContext context, SpatialConstraintRuleDomain domain, Matrix4x4 rotationFrame, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x7F5828", Offset = "0x7F5828", VA = "0x7F5828")]
		public bool ProcessSpatialConstraint(SpatialConstraintProcessorContext context, out Matrix4x4 outOffset, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x7F5BF0", Offset = "0x7F5BF0", VA = "0x7F5BF0")]
		protected SpatialConstraintProcessor()
		{
		}
	}
}
namespace DungeonArchitect.SpatialConstraints.Isaac
{
	[Token(Token = "0x2000453")]
	public class SpatialConstraintProcessorIsaac : SpatialConstraintProcessor
	{
		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x7F5EC0", Offset = "0x7F5EC0", VA = "0x7F5EC0", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x7F5EC8", Offset = "0x7F5EC8", VA = "0x7F5EC8")]
		public SpatialConstraintProcessorIsaac()
		{
		}
	}
}
namespace DungeonArchitect.Builders
{
	[Token(Token = "0x2000454")]
	public class DungeonBuilderDefaultMarkers
	{
		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Type, string[]> DefaultMarkersByBuilder;

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x7A62B4", Offset = "0x7A62B4", VA = "0x7A62B4")]
		public DungeonBuilderDefaultMarkers()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x7A7858", Offset = "0x7A7858", VA = "0x7A7858")]
		public string[] GetDefaultMarkers(Type builderClass)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Builders.BSP
{
	[Token(Token = "0x2000455")]
	internal class BSPDungeonConstants
	{
		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundRoom;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string GroundCorridor;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Door;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string WallRoom;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string WallCorridor;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string WallSeparator;

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x9BAA18", Offset = "0x9BAA18", VA = "0x9BAA18")]
		public BSPDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000456")]
	internal class BSPNodeObject
	{
		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rectangle bounds;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BSPNodeObject[] children;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BSPNodeObject parent;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Guid id;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int depthFromRoot;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int padding;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool horizontalSplit;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color debugColor;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool discarded;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<BSPNodeObject> connectedRooms;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public NodeConnection[] subtreeLeafConnections;

		[Token(Token = "0x1700030F")]
		public Rectangle PaddedBounds
		{
			[Token(Token = "0x60018B5")]
			[Address(RVA = "0x9BA010", Offset = "0x9BA010", VA = "0x9BA010")]
			get
			{
				return default(Rectangle);
			}
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x9B9718", Offset = "0x9B9718", VA = "0x9B9718")]
		public void Split(float splitRatio, System.Random random)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x9B96B4", Offset = "0x9B96B4", VA = "0x9B96B4")]
		public bool MustSplit(int maxSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x9B9648", Offset = "0x9B9648", VA = "0x9B9648")]
		public bool CanSplit(int minSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x9B7A70", Offset = "0x9B7A70", VA = "0x9B7A70")]
		public BSPNodeObject()
		{
		}
	}
	[Token(Token = "0x2000457")]
	internal enum BSPNodeDirection
	{
		[Token(Token = "0x40013BD")]
		Left,
		[Token(Token = "0x40013BE")]
		Right,
		[Token(Token = "0x40013BF")]
		Top,
		[Token(Token = "0x40013C0")]
		Bottom
	}
	[Token(Token = "0x2000458")]
	public class BSPDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x2000459")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C378", Offset = "0x50C378")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x40013C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int numNodes;

			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x7D9464", Offset = "0x7D9464", VA = "0x7D9464")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x7D946C", Offset = "0x7D946C", VA = "0x7D946C")]
			internal void <DiscardExtraRooms>b__1(BSPNodeObject n)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200045A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C388", Offset = "0x50C388")]
		private sealed class <>c
		{
			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<BSPNodeObject> <>9__10_0;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<BSPNodeObject> <>9__11_0;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action<BSPNodeObject> <>9__11_1;

			[Token(Token = "0x40013C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action<BSPNodeObject> <>9__13_0;

			[Token(Token = "0x60018D5")]
			[Address(RVA = "0x7D93F4", Offset = "0x7D93F4", VA = "0x7D93F4")]
			public <>c()
			{
			}

			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x7D93FC", Offset = "0x7D93FC", VA = "0x7D93FC")]
			internal void <DiscardExtraRooms>b__10_0(BSPNodeObject n)
			{
			}

			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x7D9418", Offset = "0x7D9418", VA = "0x7D9418")]
			internal void <FlagConnectedLeafNodes>b__11_0(BSPNodeObject n)
			{
			}

			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x7D9430", Offset = "0x7D9430", VA = "0x7D9430")]
			internal void <FlagConnectedLeafNodes>b__11_1(BSPNodeObject n)
			{
			}

			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x7D9448", Offset = "0x7D9448", VA = "0x7D9448")]
			internal void <DiscardSubtree>b__13_0(BSPNodeObject n)
			{
			}
		}

		[Token(Token = "0x200045B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C398", Offset = "0x50C398")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40013CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool stateModified;

			[Token(Token = "0x40013CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action<BSPNodeObject> <>9__0;

			[Token(Token = "0x40013CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action<BSPNodeObject> <>9__1;

			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x7D947C", Offset = "0x7D947C", VA = "0x7D947C")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x7D9484", Offset = "0x7D9484", VA = "0x7D9484")]
			internal void <ConnectActiveSubtrees>b__0(BSPNodeObject n)
			{
			}

			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x7D94AC", Offset = "0x7D94AC", VA = "0x7D94AC")]
			internal void <ConnectActiveSubtrees>b__1(BSPNodeObject n)
			{
			}
		}

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BSPDungeonConfig bspConfig;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BSPDungeonModel bspModel;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x9B5EFC", Offset = "0x9B5EFC", VA = "0x9B5EFC", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x9B6140", Offset = "0x9B6140", VA = "0x9B6140", Slot = "6")]
		public override void OnDestroyed()
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x9B61E0", Offset = "0x9B61E0", VA = "0x9B61E0", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x9B6064", Offset = "0x9B6064", VA = "0x9B6064")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x9B8134", Offset = "0x9B8134", VA = "0x9B8134")]
		private void DebugRoomLayout(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x9B83EC", Offset = "0x9B83EC", VA = "0x9B83EC")]
		private BSPNodeObject GetCornerSubtreeNode(BSPNodeObject node, bool left)
		{
			return null;
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x9B7DFC", Offset = "0x9B7DFC", VA = "0x9B7DFC")]
		private void GenerateCustomRooms(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x9B7E00", Offset = "0x9B7E00", VA = "0x9B7E00")]
		private void DiscardExtraRooms(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x9B8510", Offset = "0x9B8510", VA = "0x9B8510")]
		private void FlagConnectedLeafNodes(BSPNodeObject node)
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x9B879C", Offset = "0x9B879C", VA = "0x9B879C")]
		private bool ConnectActiveSubtrees(BSPNodeObject node)
		{
			return default(bool);
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x9B8A88", Offset = "0x9B8A88", VA = "0x9B8A88")]
		private void DiscardSubtree(BSPNodeObject node)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x9B8448", Offset = "0x9B8448", VA = "0x9B8448")]
		private void TraverseTree(BSPNodeObject node, Action<BSPNodeObject> visit)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x9B8A10", Offset = "0x9B8A10", VA = "0x9B8A10")]
		private void TraverseParentBranch(BSPNodeObject node, Action<BSPNodeObject> visit)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x9B7D28", Offset = "0x9B7D28", VA = "0x9B7D28")]
		private void ConnectDoors(BSPNodeObject node)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x9B9308", Offset = "0x9B9308", VA = "0x9B9308")]
		private NodeConnection[] GetConnectionCandidates(BSPNodeObject[] leftRooms, BSPNodeObject[] rightRooms)
		{
			return null;
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x9B9530", Offset = "0x9B9530", VA = "0x9B9530")]
		private void Shuffle(List<BSPNodeObject> nodes)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x9B8BA8", Offset = "0x9B8BA8", VA = "0x9B8BA8")]
		private NodeConnection[] ConnectPartitions(BSPNodeObject leftPartition, BSPNodeObject rightPartition, bool horizontalSplit)
		{
			return null;
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x9B82D4", Offset = "0x9B82D4", VA = "0x9B82D4")]
		private void FindBoundaryEdgeRooms(BSPNodeObject node, BSPNodeDirection direction, List<BSPNodeObject> result)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x9B7B9C", Offset = "0x9B7B9C", VA = "0x9B7B9C")]
		private void BuildDungeonGraph(BSPNodeObject node)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x9B6214", Offset = "0x9B6214", VA = "0x9B6214")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x9B7FD4", Offset = "0x9B7FD4", VA = "0x9B7FD4")]
		private void SerializeGraph(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x9B9A20", Offset = "0x9B9A20", VA = "0x9B9A20")]
		private void SerializeGraph(BSPNodeObject node, List<BSPNode> serializedNodes, List<BSPNodeConnection> serializedConnections)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x9BA06C", Offset = "0x9BA06C", VA = "0x9BA06C", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x9BA9D0", Offset = "0x9BA9D0", VA = "0x9BA9D0")]
		public BSPDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x200045C")]
	internal class NodeConnection
	{
		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BSPNodeObject room0;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BSPNodeObject room1;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doorFacingX;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private IntVector doorPosition0;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntVector doorPosition1;

		[Token(Token = "0x17000310")]
		public BSPNodeObject Room0
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xE946B0", Offset = "0xE946B0", VA = "0xE946B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000311")]
		public BSPNodeObject Room1
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xE946B8", Offset = "0xE946B8", VA = "0xE946B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		public bool DoorFacingX
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xE946C0", Offset = "0xE946C0", VA = "0xE946C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000313")]
		public IntVector DoorPosition0
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xE946C8", Offset = "0xE946C8", VA = "0xE946C8")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xE946D8", Offset = "0xE946D8", VA = "0xE946D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public IntVector DoorPosition1
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xE946E4", Offset = "0xE946E4", VA = "0xE946E4")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xE946F4", Offset = "0xE946F4", VA = "0xE946F4")]
			set
			{
			}
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xE94700", Offset = "0xE94700", VA = "0xE94700")]
		public NodeConnection(BSPNodeObject room0, BSPNodeObject room1, int padding)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200045D")]
	public struct BSPRoomCategory
	{
		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string category;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int width;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int length;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int minOccurance;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxOccurance;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color debugColor;
	}
	[Token(Token = "0x200045E")]
	public class BSPDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int dungeonWidth;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int dungeonLength;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minRoomSize;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxRoomSize;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smallerRoomProbability;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float unevenSplitProbability;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int roomPadding;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float loopingProbability;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int randomKillDepthStart;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float randomKillProbability;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minAspectRatio;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BSPRoomCategory[] customRooms;

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x9BA9D8", Offset = "0x9BA9D8", VA = "0x9BA9D8")]
		public BSPDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200045F")]
	public struct BSPNode
	{
		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid id;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rectangle bounds;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rectangle paddedBounds;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int depthFromRoot;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string roomCategory;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Guid parent;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Guid[] children;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Guid[] connectedRooms;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BSPNodeConnection[] subtreeLeafConnections;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color debugColor;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool discarded;
	}
	[Serializable]
	[Token(Token = "0x2000460")]
	public struct BSPNodeConnection
	{
		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid room0;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid room1;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntVector doorPosition0;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public IntVector doorPosition1;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool doorFacingX;
	}
	[Token(Token = "0x2000461")]
	public class BSPDungeonGraphQuery
	{
		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Guid rootNode;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Guid, BSPNode> nodeMap;

		[Token(Token = "0x17000315")]
		public BSPNode RootNode
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x9BACE0", Offset = "0x9BACE0", VA = "0x9BACE0")]
			get
			{
				return default(BSPNode);
			}
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x9BAB4C", Offset = "0x9BAB4C", VA = "0x9BAB4C")]
		public BSPDungeonGraphQuery(Guid rootNode, BSPNode[] nodes)
		{
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x9BA938", Offset = "0x9BA938", VA = "0x9BA938")]
		public BSPNode GetNode(Guid nodeId)
		{
			return default(BSPNode);
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x9BAD20", Offset = "0x9BAD20", VA = "0x9BAD20")]
		public BSPNode[] GetChildren(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x9BAE84", Offset = "0x9BAE84", VA = "0x9BAE84")]
		public BSPNode GetParent(Guid nodeId)
		{
			return default(BSPNode);
		}
	}
	[Token(Token = "0x2000462")]
	public class BSPDungeonModel : DungeonModel
	{
		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public BSPDungeonConfig Config;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Guid rootNode;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public BSPNode[] nodes;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public BSPNodeConnection[] connections;

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x9BA8C4", Offset = "0x9BA8C4", VA = "0x9BA8C4")]
		public BSPDungeonGraphQuery CreateGraphQuery()
		{
			return null;
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x9BAED4", Offset = "0x9BAED4", VA = "0x9BAED4", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x9BAFA4", Offset = "0x9BAFA4", VA = "0x9BAFA4")]
		public BSPDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap
{
	[Token(Token = "0x2000463")]
	public class CellMarkerState
	{
		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HashSet<string> GroundTiles;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HashSet<string> EdgeTileX;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<string> EdgeTileY;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HashSet<string> EdgeTileZ;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HashSet<string> CornerTiles;

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x8E28EC", Offset = "0x8E28EC", VA = "0x8E28EC")]
		public CellMarkerState()
		{
		}
	}
	[Token(Token = "0x2000464")]
	public class ModuleMarkerRegsitry
	{
		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<IntVector, CellMarkerState> MarkerStates;

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xC3150C", Offset = "0xC3150C", VA = "0xC3150C")]
		public CellMarkerState GetState(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xC31614", Offset = "0xC31614", VA = "0xC31614")]
		public ModuleMarkerRegsitry()
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class SnapModuleEditorData
	{
		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector cursorPosition;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int brushSize;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4 worldToCamera;

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x7EE1E8", Offset = "0x7EE1E8", VA = "0x7EE1E8")]
		public SnapModuleEditorData()
		{
		}
	}
	[Token(Token = "0x2000466")]
	public class SnapModule : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000467")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3A8", Offset = "0x50C3A8")]
		private sealed class <>c
		{
			[Token(Token = "0x4001407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SnapGizmoRenderCommand, float> <>9__4_0;

			[Token(Token = "0x60018F9")]
			[Address(RVA = "0xA440E0", Offset = "0xA440E0", VA = "0xA440E0")]
			public <>c()
			{
			}

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0xA440E8", Offset = "0xA440E8", VA = "0xA440E8")]
			internal float <RenderScene>b__4_0(SnapGizmoRenderCommand o)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512198", Offset = "0x512198")]
		public UnityEngine.Vector3 GridCellSize;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapModuleEditorData EditorData;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ModuleMarkerRegsitry MarkerRegistry;

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x7ED914", Offset = "0x7ED914", VA = "0x7ED914")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x7ED918", Offset = "0x7ED918", VA = "0x7ED918")]
		private void RenderScene()
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x7EDEE0", Offset = "0x7EDEE0", VA = "0x7EDEE0")]
		private SnapGizmoRenderCommandTile CreateTileRenderCommand(UnityEngine.Vector3 worldPosition)
		{
			return null;
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x7EDFA4", Offset = "0x7EDFA4", VA = "0x7EDFA4")]
		private void DrawCursor()
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x7EDFF0", Offset = "0x7EDFF0", VA = "0x7EDFF0")]
		private void DrawTile(IntVector position, Color color)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x7EE130", Offset = "0x7EE130", VA = "0x7EE130")]
		public SnapModule()
		{
		}
	}
	[Token(Token = "0x2000468")]
	internal abstract class SnapGizmoRenderCommand
	{
		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float DistanceToCamera;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 worldPosition;

		[Token(Token = "0x60018FB")]
		public abstract void Draw(SnapModule module);

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x7ED710", Offset = "0x7ED710", VA = "0x7ED710")]
		public void CalculateDistanceToCamera(Matrix4x4 worldToCamera)
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x7ED760", Offset = "0x7ED760", VA = "0x7ED760")]
		protected SnapGizmoRenderCommand()
		{
		}
	}
	[Token(Token = "0x2000469")]
	internal class SnapGizmoRenderCommandTile : SnapGizmoRenderCommand
	{
		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color drawColor;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool drawWireframe;

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x7ED768", Offset = "0x7ED768", VA = "0x7ED768", Slot = "4")]
		public override void Draw(SnapModule module)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x7ED84C", Offset = "0x7ED84C", VA = "0x7ED84C")]
		public SnapGizmoRenderCommandTile()
		{
		}
	}
	[Token(Token = "0x200046A")]
	public class SnapBuilder : DungeonBuilder
	{
		[Token(Token = "0x200046B")]
		private delegate void VisitTreeNodeDelegate(ModuleBuildNode Node);

		[Token(Token = "0x200046C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3B8", Offset = "0x50C3B8")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DungeonSceneProvider sceneProvider;

			[Token(Token = "0x4001411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IDungeonSceneObjectInstantiator objectInstantiator;

			[Token(Token = "0x4001412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<SnapModuleInstance> spawnedModuleList;

			[Token(Token = "0x6001916")]
			[Address(RVA = "0xA438E4", Offset = "0xA438E4", VA = "0xA438E4")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001917")]
			[Address(RVA = "0xA438EC", Offset = "0xA438EC", VA = "0xA438EC")]
			internal void <BuildNonThemedDungeon>b__0(ModuleBuildNode Node)
			{
			}
		}

		[Token(Token = "0x200046D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3C8", Offset = "0x50C3C8")]
		private sealed class <>c__DisplayClass6_1
		{
			[Token(Token = "0x4001413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<SnapModuleConnection> connectionList;

			[Token(Token = "0x6001918")]
			[Address(RVA = "0xA43AF4", Offset = "0xA43AF4", VA = "0xA43AF4")]
			public <>c__DisplayClass6_1()
			{
			}

			[Token(Token = "0x6001919")]
			[Address(RVA = "0xA43AFC", Offset = "0xA43AFC", VA = "0xA43AFC")]
			internal void <BuildNonThemedDungeon>b__1(ModuleBuildNode Node)
			{
			}
		}

		[Token(Token = "0x200046E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3D8", Offset = "0x50C3D8")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<GameObject, SnapConnection[]> moduleConnections;

			[Token(Token = "0x600191A")]
			[Address(RVA = "0xA43BEC", Offset = "0xA43BEC", VA = "0xA43BEC")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x600191B")]
			[Address(RVA = "0xA43BF4", Offset = "0xA43BF4", VA = "0xA43BF4")]
			internal void <FixupDoorStates>b__0(ModuleBuildNode node)
			{
			}
		}

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SnapConfig snapConfig;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SnapModel snapModel;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x7E9F24", Offset = "0x7E9F24", VA = "0x7E9F24", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x7E9F5C", Offset = "0x7E9F5C", VA = "0x7E9F5C", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x7E9F64", Offset = "0x7E9F64", VA = "0x7E9F64", Slot = "7")]
		public override bool IsThemingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x7E9F6C", Offset = "0x7E9F6C", VA = "0x7E9F6C", Slot = "8")]
		public override void BuildNonThemedDungeon(DungeonSceneProvider sceneProvider, IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x6001904")]
		private T GetArrayEntry<T>(int index, T[] array) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x7EB250", Offset = "0x7EB250", VA = "0x7EB250")]
		private void FixupDoorStates(ModuleBuildNode rootNode)
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x7EAFF8", Offset = "0x7EAFF8", VA = "0x7EAFF8")]
		private void TraverseTree(ModuleBuildNode RootNode, VisitTreeNodeDelegate VisitTreeNode)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x7EB98C", Offset = "0x7EB98C", VA = "0x7EB98C")]
		private static void CalculateOccupiedBounds(ModuleBuildNode Node, List<Bounds> OccupiedBounds)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x7EBAF8", Offset = "0x7EBAF8", VA = "0x7EBAF8")]
		private static Bounds GetBounds(GameObject target)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x7EBC30", Offset = "0x7EBC30", VA = "0x7EBC30")]
		private void FindConnectionTransforms(SnapModuleEntry moduleEntry, out Matrix4x4[] outTransforms, out string[] outCategories)
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x7EA934", Offset = "0x7EA934", VA = "0x7EA934")]
		private ModuleInfo GenerateModuleInfo(SnapModuleEntry modulePrefab)
		{
			return null;
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x7EBFAC", Offset = "0x7EBFAC", VA = "0x7EBFAC")]
		private void DebugLog(string name, ref Matrix4x4 Transform)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x7EC1FC", Offset = "0x7EC1FC", VA = "0x7EC1FC", Slot = "13")]
		protected virtual Matrix4x4[] FindAttachmentTransforms(ref Matrix4x4 ParentModuleTransform, ref Matrix4x4 IncomingDoorTransform, ref Matrix4x4 AttachmentDoorTransform)
		{
			return null;
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x7EC57C", Offset = "0x7EC57C", VA = "0x7EC57C")]
		private bool FindAttachmentConfiguration(ModuleInfo TargetModule, ModuleInfo IncomingModule, ref Matrix4x4 IncomingModuleTransform, int IncomingDoorIndex, HashSet<Bounds> OccupiedBounds, ref SnapAttachmentConfiguration OutAttachmentConfig)
		{
			return default(bool);
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x7ECBB8", Offset = "0x7ECBB8", VA = "0x7ECBB8")]
		private int[] FindFilteredModuleList(List<ModuleInfo> ModuleInfoList, string category)
		{
			return null;
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x7ECCFC", Offset = "0x7ECCFC", VA = "0x7ECCFC", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x7EAAAC", Offset = "0x7EAAAC", VA = "0x7EAAAC")]
		private ModuleBuildNode BuildLayoutRecursive(ModuleGrowthNode GrowthNode, ref HashSet<Bounds> _OccupiedBounds, RuntimeGraphNode<GrammarRuntimeGraphNodeData> graphNode, SnapLayoutBuildState RecursiveState)
		{
			return null;
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x7ED05C", Offset = "0x7ED05C", VA = "0x7ED05C")]
		public SnapBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200046F")]
	public class SnapModuleEntry
	{
		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public GameObject module;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string category;

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x7EE2A8", Offset = "0x7EE2A8", VA = "0x7EE2A8")]
		public SnapModuleEntry()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class SnapConfig : DungeonConfig
	{
		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5121F0", Offset = "0x5121F0")]
		public SnapModuleEntry[] Modules;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512228", Offset = "0x512228")]
		public DungeonFlowAsset dungeonFlow;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512260", Offset = "0x512260")]
		public bool runGraphGenerationScripts;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512298", Offset = "0x512298")]
		public bool RotateModulesToFit;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5122D0", Offset = "0x5122D0")]
		public float CollisionTestContraction;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512308", Offset = "0x512308")]
		public int MaxProcessingPower;

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x7ED064", Offset = "0x7ED064", VA = "0x7ED064")]
		public SnapConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000471")]
	public class SnapModuleInstance
	{
		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string InstanceID;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 WorldTransform;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Bounds WorldBounds;

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x7EE304", Offset = "0x7EE304", VA = "0x7EE304")]
		public SnapModuleInstance()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000472")]
	public class SnapModuleConnection
	{
		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ModuleAInstanceID;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DoorAIndex;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ModuleBInstanceID;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int DoorBIndex;

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x7EE2A0", Offset = "0x7EE2A0", VA = "0x7EE2A0")]
		public SnapModuleConnection()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public class SnapModel : DungeonModel
	{
		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SnapModuleInstance[] modules;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public SnapModuleConnection[] connections;

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x7ED880", Offset = "0x7ED880", VA = "0x7ED880", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x7ED90C", Offset = "0x7ED90C", VA = "0x7ED90C")]
		public SnapModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap.SideScroller
{
	[Token(Token = "0x2000474")]
	public class SnapSideScrollerBuilder : SnapBuilder
	{
		[Token(Token = "0x6001922")]
		[Address(RVA = "0x7EE5D4", Offset = "0x7EE5D4", VA = "0x7EE5D4", Slot = "13")]
		protected override Matrix4x4[] FindAttachmentTransforms(ref Matrix4x4 ParentModuleTransform, ref Matrix4x4 IncomingDoorTransform, ref Matrix4x4 AttachmentDoorTransform)
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x7EE838", Offset = "0x7EE838", VA = "0x7EE838")]
		public SnapSideScrollerBuilder()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap.Impl
{
	[Token(Token = "0x2000475")]
	internal class ModuleInfo
	{
		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SnapModuleEntry ModuleTemplate;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Guid ModuleGuid;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Bounds Bounds;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Matrix4x4[] ConnectionTransforms;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string[] ConnectionCategory;

		[Token(Token = "0x6001924")]
		[Address(RVA = "0xC31504", Offset = "0xC31504", VA = "0xC31504")]
		public ModuleInfo()
		{
		}
	}
	[Token(Token = "0x2000476")]
	internal class SnapAttachmentConfiguration
	{
		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModuleInfo AttachedModule;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int AttachedModuleDoorIndex;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Bounds AttachedModuleWorldBounds;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Matrix4x4 AttachedModuleTransform;

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x7E9F1C", Offset = "0x7E9F1C", VA = "0x7E9F1C")]
		public SnapAttachmentConfiguration()
		{
		}
	}
	[Token(Token = "0x2000477")]
	internal class ModuleGrowthNode
	{
		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Matrix4x4 ModuleTransform;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ModuleInfo IncomingModule;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int IncomingModuleDoorIndex;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool startNode;

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xC314A0", Offset = "0xC314A0", VA = "0xC314A0")]
		public ModuleGrowthNode()
		{
		}
	}
	[Token(Token = "0x2000478")]
	internal class ModuleBuildNode
	{
		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ModuleInstanceID;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ModuleInfo Module;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int IncomingDoorIndex;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapAttachmentConfiguration AttachmentConfig;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int DepthFromLeaf;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<ModuleBuildNode> Extensions;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ModuleBuildNode Parent;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject spawnedModule;

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xC31354", Offset = "0xC31354", VA = "0xC31354")]
		public static string GenerateModuleInstanceID(Guid ModuleGuid)
		{
			return null;
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xC313C0", Offset = "0xC313C0", VA = "0xC313C0")]
		public ModuleBuildNode()
		{
		}
	}
	[Token(Token = "0x2000479")]
	internal class SnapLayoutBuildState
	{
		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bSafetyBailOut;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int NumTries;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bFoundBestBuild;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ModuleInfo> ModuleInfoList;

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x7EAA18", Offset = "0x7EAA18", VA = "0x7EAA18")]
		public SnapLayoutBuildState()
		{
		}
	}
}
namespace DungeonArchitect.Builders.SimpleCity
{
	[Token(Token = "0x200047A")]
	public enum SimpleCityLandscapeTextureType
	{
		[Token(Token = "0x4001440")]
		Road,
		[Token(Token = "0x4001441")]
		Park,
		[Token(Token = "0x4001442")]
		CityWallPadding
	}
	[Serializable]
	[Token(Token = "0x200047B")]
	public class SimpleCityLandscapeTexture
	{
		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SimpleCityLandscapeTextureType textureType;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TerrainLayer terrainLayer;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x7E7734", Offset = "0x7E7734", VA = "0x7E7734")]
		public SimpleCityLandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200047C")]
	public class SimpleCityFoliageEntry
	{
		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int grassIndex;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float density;

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x7E771C", Offset = "0x7E771C", VA = "0x7E771C")]
		public SimpleCityFoliageEntry()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200047D")]
	public class SimpleCityFoliageTheme
	{
		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SimpleCityLandscapeTextureType textureType;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleCityFoliageEntry[] foliageEntries;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float density;

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x7E7724", Offset = "0x7E7724", VA = "0x7E7724")]
		public SimpleCityFoliageTheme()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public class LandscapeTransformerCity : LandscapeTransformerBase
	{
		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SimpleCityLandscapeTexture[] textures;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SimpleCityFoliageTheme[] foliage;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadBlurDistance;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float corridorBlurThreshold;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float roomBlurThreshold;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float flatten;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int blendingUnits;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve smoothingCurve;

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x9DCBCC", Offset = "0x9DCBCC", VA = "0x9DCBCC", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x9DCF0C", Offset = "0x9DCF0C", VA = "0x9DCF0C")]
		private void UpdateHeights(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x9DD47C", Offset = "0x9DD47C", VA = "0x9DD47C")]
		private void RemoveFoliageFromBaseLayout(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x9DD6AC", Offset = "0x9DD6AC", VA = "0x9DD6AC", Slot = "11")]
		protected override Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x9DD2AC", Offset = "0x9DD2AC", VA = "0x9DD2AC")]
		private Rect GetDungeonBounds(DungeonModel model, int extraPadding)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x9DCCF0", Offset = "0x9DCCF0", VA = "0x9DCCF0")]
		private void SetupTextures()
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x9DD160", Offset = "0x9DD160", VA = "0x9DD160")]
		private void UpdateTerrainTextures(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x9DD6B4", Offset = "0x9DD6B4", VA = "0x9DD6B4")]
		private void UpdateBaseTexture(SimpleCityDungeonModel model, float[,,] map)
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x9DE6F8", Offset = "0x9DE6F8", VA = "0x9DE6F8")]
		private int GetTextureIndex(SimpleCityLandscapeTextureType textureType)
		{
			return default(int);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x9DE880", Offset = "0x9DE880", VA = "0x9DE880")]
		public LandscapeTransformerCity()
		{
		}
	}
	[Token(Token = "0x200047F")]
	internal class SimpleCityDungeonConstants
	{
		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string House;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string Park;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Road_X;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Road_T;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string Road_Corner;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string Road_S;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string Road_E;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string Road;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string WallMarkerName;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string DoorMarkerName;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string GroundMarkerName;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string CornerTowerMarkerName;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string WallPaddingMarkerName;

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x7E7458", Offset = "0x7E7458", VA = "0x7E7458")]
		public SimpleCityDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000480")]
	public class SimpleCityDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x2000481")]
		private delegate void InsertHouseDelegate();

		[Token(Token = "0x2000482")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3E8", Offset = "0x50C3E8")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SimpleCityDungeonBuilder <>4__this;

			[Token(Token = "0x4001465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int x;

			[Token(Token = "0x6001953")]
			[Address(RVA = "0xA43378", Offset = "0xA43378", VA = "0xA43378")]
			public <>c__DisplayClass6_0()
			{
			}
		}

		[Token(Token = "0x2000483")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C3F8", Offset = "0x50C3F8")]
		private sealed class <>c__DisplayClass6_1
		{
			[Token(Token = "0x4001466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int z;

			[Token(Token = "0x4001467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass6_0 CS$<>8__locals1;

			[Token(Token = "0x6001954")]
			[Address(RVA = "0xA43380", Offset = "0xA43380", VA = "0xA43380")]
			public <>c__DisplayClass6_1()
			{
			}
		}

		[Token(Token = "0x2000484")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C408", Offset = "0x50C408")]
		private sealed class <>c__DisplayClass6_2
		{
			[Token(Token = "0x4001468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CityBlockDimension blockDimension;

			[Token(Token = "0x4001469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int BlockWidth;

			[Token(Token = "0x400146A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int BlockHeight;

			[Token(Token = "0x400146B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public <>c__DisplayClass6_1 CS$<>8__locals2;

			[Token(Token = "0x6001955")]
			[Address(RVA = "0xA43388", Offset = "0xA43388", VA = "0xA43388")]
			public <>c__DisplayClass6_2()
			{
			}

			[Token(Token = "0x6001956")]
			[Address(RVA = "0xA43390", Offset = "0xA43390", VA = "0xA43390")]
			internal void <GenerateCityLayout>b__0()
			{
			}

			[Token(Token = "0x6001957")]
			[Address(RVA = "0xA43454", Offset = "0xA43454", VA = "0xA43454")]
			internal void <GenerateCityLayout>b__1()
			{
			}
		}

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SimpleCityDungeonConfig cityConfig;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SimpleCityDungeonModel cityModel;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xAA630C", Offset = "0xAA630C", VA = "0xAA630C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xAA6C60", Offset = "0xAA6C60", VA = "0xAA6C60", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xAA6474", Offset = "0xAA6474", VA = "0xAA6474")]
		private void GenerateCityLayout()
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xAA7ACC", Offset = "0xAA7ACC", VA = "0xAA7ACC")]
		private void RemoveRoadEdge(int x, int z)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xAA7E90", Offset = "0xAA7E90", VA = "0xAA7E90")]
		private bool IsStraightRoad(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xAA7804", Offset = "0xAA7804", VA = "0xAA7804")]
		private void RemoveRoadEdges()
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xAA79FC", Offset = "0xAA79FC", VA = "0xAA79FC")]
		private SimpleCityCell CreateCell(int x, int z, SimpleCityCellType cellType)
		{
			return null;
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xAA7F70", Offset = "0xAA7F70", VA = "0xAA7F70")]
		private SimpleCityCellType GetCellType(int x, int z)
		{
			return default(SimpleCityCellType);
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xAA78B8", Offset = "0xAA78B8", VA = "0xAA78B8")]
		private void FaceHouseTowardsRoad(SimpleCityCell cell)
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xAA8054", Offset = "0xAA8054", VA = "0xAA8054")]
		private bool CanContainBiggerHouse(int x, int z, int w, int h)
		{
			return default(bool);
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xAA81B8", Offset = "0xAA81B8", VA = "0xAA81B8")]
		private bool IsConnectedToRoad(int x, int z, int w, int h)
		{
			return default(bool);
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xAA85DC", Offset = "0xAA85DC", VA = "0xAA85DC")]
		private void InsertBiggerHouse(int x, int z, int w, int h, float Angle, string markerName)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xAA76B0", Offset = "0xAA76B0", VA = "0xAA76B0")]
		private void MakeRoad(int x, int z, bool horizontal)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xAA6C9C", Offset = "0xAA6C9C", VA = "0xAA6C9C")]
		private void EmitCityMarkers()
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xAA70F8", Offset = "0xAA70F8", VA = "0xAA70F8")]
		private void EmitBoundaryMarkers()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xAA87FC", Offset = "0xAA87FC", VA = "0xAA87FC")]
		private void EmitWallMarker(UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xAA8748", Offset = "0xAA8748", VA = "0xAA8748")]
		private void EmitDoorMarker(UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xAA8A44", Offset = "0xAA8A44", VA = "0xAA8A44")]
		private void EmitGroundMarker(int sizeX, int sizeZ, UnityEngine.Vector3 cellSize)
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xAA88B0", Offset = "0xAA88B0", VA = "0xAA88B0")]
		private void EmitMarkerAt(UnityEngine.Vector3 cellSize, string markerName, float x, float z, float angle)
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xAA7668", Offset = "0xAA7668", VA = "0xAA7668")]
		private Quaternion GetRandomRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xAA77D0", Offset = "0xAA77D0", VA = "0xAA77D0")]
		private int GetRandomBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xAA8C1C", Offset = "0xAA8C1C", VA = "0xAA8C1C")]
		public SimpleCityDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000485")]
	public struct CityBlockDimension
	{
		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512360", Offset = "0x512360")]
		public string markerName;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512398", Offset = "0x512398")]
		public int sizeX;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5123D0", Offset = "0x5123D0")]
		public int sizeZ;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512408", Offset = "0x512408")]
		public float probability;
	}
	[Token(Token = "0x2000486")]
	public class SimpleCityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 CellSize;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minSize;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxSize;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minBlockSize;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxBlockSize;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float biggerHouseProbability;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int cityWallPadding;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cityDoorSize;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float roadEdgeRemovalProbability;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CityBlockDimension[] customBlockDimensions;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadWidth;

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x7E742C", Offset = "0x7E742C", VA = "0x7E742C")]
		public SimpleCityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000487")]
	public enum SimpleCityCellType
	{
		[Token(Token = "0x400147C")]
		Road,
		[Token(Token = "0x400147D")]
		House,
		[Token(Token = "0x400147E")]
		Park,
		[Token(Token = "0x400147F")]
		CityWallPadding,
		[Token(Token = "0x4001480")]
		UserDefined,
		[Token(Token = "0x4001481")]
		Empty
	}
	[Token(Token = "0x2000488")]
	public class SimpleCityCell
	{
		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector Position;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SimpleCityCellType CellType;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion Rotation;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 BlockSize;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MarkerNameOverride;

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xAA62F0", Offset = "0xAA62F0", VA = "0xAA62F0")]
		public SimpleCityCell()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public class SimpleCityDungeonModel : DungeonModel
	{
		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SimpleCityCell[,] Cells;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public SimpleCityCell[] WallPaddingCells;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public SimpleCityDungeonConfig Config;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int CityWidth;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public int CityHeight;

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x7E76A4", Offset = "0x7E76A4", VA = "0x7E76A4")]
		public SimpleCityDungeonModel()
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class RoadBeautifier
	{
		[Token(Token = "0x600195B")]
		[Address(RVA = "0xDE1828", Offset = "0xDE1828", VA = "0xDE1828")]
		public static string GetRoadMarkerName(int x, int z, SimpleCityCell[,] cells, out float angle)
		{
			return null;
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xDE1B28", Offset = "0xDE1B28", VA = "0xDE1B28")]
		private static bool MatchesConfig(int x, int z, SimpleCityCell[,] cells, out float angle, params int[] neighbors)
		{
			return default(bool);
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xDE1C60", Offset = "0xDE1C60", VA = "0xDE1C60")]
		private static bool ContainsRoad(int x, int z, SimpleCityCell[,] cells)
		{
			return default(bool);
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xDE1D24", Offset = "0xDE1D24", VA = "0xDE1D24")]
		public RoadBeautifier()
		{
		}
	}
	[Token(Token = "0x200048B")]
	public class StrongholdWallEmitter : DungeonMarkerEmitter
	{
		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int padding;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int doorSize;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string WallMarkerName;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string DoorMarkerName;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string GroundMarkerName;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string CornerTowerMarkerName;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string WallPaddingMarkerName;

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x7FD044", Offset = "0x7FD044", VA = "0x7FD044", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x7FD64C", Offset = "0x7FD64C", VA = "0x7FD64C")]
		private void EmitWallMarker(DungeonBuilder builder, UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x7FD644", Offset = "0x7FD644", VA = "0x7FD644")]
		private void EmitDoorMarker(DungeonBuilder builder, UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x7FD7FC", Offset = "0x7FD7FC", VA = "0x7FD7FC")]
		private void EmitGroundMarker(DungeonBuilder builder, int sizeX, int sizeZ, UnityEngine.Vector3 cellSize)
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x7FD654", Offset = "0x7FD654", VA = "0x7FD654")]
		private void EmitMarkerAt(DungeonBuilder builder, UnityEngine.Vector3 cellSize, string markerName, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x7FD9AC", Offset = "0x7FD9AC", VA = "0x7FD9AC")]
		public StrongholdWallEmitter()
		{
		}
	}
}
namespace DungeonArchitect.Builders.SimpleCity.SpatialConstraints
{
	[Token(Token = "0x200048C")]
	public class SpatialConstraintProcessorSimpleCity3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6001965")]
		[Address(RVA = "0x7F5ED0", Offset = "0x7F5ED0", VA = "0x7F5ED0", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x7F5F70", Offset = "0x7F5F70", VA = "0x7F5F70")]
		public SpatialConstraintProcessorSimpleCity3D()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Maze
{
	[Token(Token = "0x200048D")]
	public class MazeDungeonConstants
	{
		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundBlock;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallBlock;

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xC294D4", Offset = "0xC294D4", VA = "0xC294D4")]
		public MazeDungeonConstants()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class MazeDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MazeDungeonConfig MazeConfig;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MazeDungeonModel MazeModel;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xC2892C", Offset = "0xC2892C", VA = "0xC2892C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xC28E4C", Offset = "0xC28E4C", VA = "0xC28E4C", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xC290D8", Offset = "0xC290D8", VA = "0xC290D8")]
		private bool IsVisited(bool[,] visited, int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xC29198", Offset = "0xC29198", VA = "0xC29198")]
		private bool CanDigToPoint(IntVector2 point, bool[,] visited)
		{
			return default(bool);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xC2924C", Offset = "0xC2924C", VA = "0xC2924C")]
		private bool GetNextNeighbor(IntVector2 currentPoint, out IntVector2 nextPoint, bool[,] visited)
		{
			return default(bool);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xC28A94", Offset = "0xC28A94", VA = "0xC28A94")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xC28E80", Offset = "0xC28E80", VA = "0xC28E80")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xC294B4", Offset = "0xC294B4", VA = "0xC294B4")]
		public MazeDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class MazeDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int mazeWidth;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int mazeHeight;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xC294BC", Offset = "0xC294BC", VA = "0xC294BC")]
		public MazeDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public enum MazeTileState
	{
		[Token(Token = "0x400149C")]
		Empty,
		[Token(Token = "0x400149D")]
		Blocked
	}
	[Token(Token = "0x2000491")]
	public class MazeDungeonModel : DungeonModel
	{
		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MazeDungeonConfig Config;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MazeTileState[,] tileStates;

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xC29568", Offset = "0xC29568", VA = "0xC29568")]
		public MazeDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Mario
{
	[Token(Token = "0x2000492")]
	internal class MarioDungeonConstants
	{
		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Ground;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallFront;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string WallBack;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string WallSide;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string BackgroundGround;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string BackgroundCeiling;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string BackgroundWall;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string Stair;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string Corridor;

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x9ECB94", Offset = "0x9ECB94", VA = "0x9ECB94")]
		public MarioDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000493")]
	public class MarioDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MarioDungeonConfig marioConfig;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MarioDungeonModel marioModel;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x9EAE68", Offset = "0x9EAE68", VA = "0x9EAE68", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x9EB72C", Offset = "0x9EB72C", VA = "0x9EB72C", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x9EAFD0", Offset = "0x9EAFD0", VA = "0x9EAFD0")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x9EB760", Offset = "0x9EB760", VA = "0x9EB760")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x9ECB38", Offset = "0x9ECB38", VA = "0x9ECB38")]
		public MarioDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000494")]
	public class MarioDungeonLevelChunkRule
	{
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numTiles;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string markerName;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float probablity;

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x9ECD40", Offset = "0x9ECD40", VA = "0x9ECD40")]
		public MarioDungeonLevelChunkRule()
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class MarioDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minLength;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxLength;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minY;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxY;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minDepth;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxDepth;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int minGap;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int maxGap;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int minNonGap;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int maxStairHeight;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float heightVariationProbablity;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float gapProbability;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int maxJumpTileDistance;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MarioDungeonLevelChunkRule[] chunkMarkers;

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x9ECB40", Offset = "0x9ECB40", VA = "0x9ECB40")]
		public MarioDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000496")]
	public enum MarioTileType
	{
		[Token(Token = "0x40014BF")]
		Ground,
		[Token(Token = "0x40014C0")]
		Corridor,
		[Token(Token = "0x40014C1")]
		Gap
	}
	[Token(Token = "0x2000497")]
	public class MarioTile
	{
		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector position;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MarioTileType tileType;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] chunkMarkers;

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x9ECB30", Offset = "0x9ECB30", VA = "0x9ECB30")]
		public MarioTile()
		{
		}
	}
	[Token(Token = "0x2000498")]
	public class MarioDungeonModel : DungeonModel
	{
		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MarioDungeonConfig Config;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MarioTile[] tiles;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int levelWidth;

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x9ECDAC", Offset = "0x9ECDAC", VA = "0x9ECDAC")]
		public MarioDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Isaac
{
	[Token(Token = "0x2000499")]
	public class IsaacDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x200049A")]
		private struct LevelGrowthNode
		{
			[Token(Token = "0x40014CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IsaacRoom room;

			[Token(Token = "0x40014CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int moveDirection;
		}

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IsaacDungeonConfig isaacConfig;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IsaacDungeonModel isaacModel;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<IsaacRoom> rooms;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<IsaacDoor> doors;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IntVector[] directions;

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xCEC818", Offset = "0xCEC818", VA = "0xCEC818", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xCECEBC", Offset = "0xCECEBC", VA = "0xCECEBC", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xCEC980", Offset = "0xCEC980", VA = "0xCEC980")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xCED41C", Offset = "0xCED41C", VA = "0xCED41C")]
		private void AddNextRoomNode(IsaacRoomFactory roomFactory, Queue<LevelGrowthNode> queue, HashSet<IntVector> visited, int maxRooms, IsaacRoom parentRoom, int direction, float probability)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xCED764", Offset = "0xCED764", VA = "0xCED764")]
		private void ConnectRoomsWithDoors(IsaacRoom roomA, IsaacRoom roomB)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xCED804", Offset = "0xCED804", VA = "0xCED804")]
		private IsaacRoom GetRoomAt(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xCED988", Offset = "0xCED988", VA = "0xCED988")]
		private bool ContainsDoorBetween(int roomA, int roomB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xCEDAF4", Offset = "0xCEDAF4", VA = "0xCEDAF4")]
		private void CreateDoor(IsaacRoom roomA, IsaacRoom roomB, float ratio)
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xCEDC8C", Offset = "0xCEDC8C", VA = "0xCEDC8C")]
		private bool IsWall(int x, int z, IsaacRoomLayout layout)
		{
			return default(bool);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xCED69C", Offset = "0xCED69C", VA = "0xCED69C")]
		private void GenerateRoomLayout(IsaacRoomLayoutBuilder layoutBuilder, IsaacRoom room)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xCEDD34", Offset = "0xCEDD34", VA = "0xCEDD34")]
		private IsaacRoomLayout GenerateEmptyRoomLayout()
		{
			return null;
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xCECEF0", Offset = "0xCECEF0", VA = "0xCECEF0")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xCEDF6C", Offset = "0xCEDF6C", VA = "0xCEDF6C")]
		public IsaacDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x200049B")]
	internal class IsaacRoomFactory
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int idCounter;

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xCED394", Offset = "0xCED394", VA = "0xCED394")]
		public IsaacRoom CreateRoom(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xCED38C", Offset = "0xCED38C", VA = "0xCED38C")]
		public IsaacRoomFactory()
		{
		}
	}
	[Token(Token = "0x200049C")]
	public class IsaacDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minRooms;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxRooms;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int roomWidth;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int roomHeight;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector2 tileSize;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector2 roomPadding;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float growForwardProbablity;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float growSidewaysProbablity;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float spawnRoomBranchProbablity;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float cycleProbability;

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xCEE0D4", Offset = "0xCEE0D4", VA = "0xCEE0D4")]
		public IsaacDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200049D")]
	public class IsaacRoom
	{
		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int roomId;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public IntVector position;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public IsaacRoomLayout layout;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<int> adjacentRooms;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public List<IntVector> doorPositions;

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xCEE100", Offset = "0xCEE100", VA = "0xCEE100")]
		public IsaacRoom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200049E")]
	public class IsaacDoor
	{
		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int roomA;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public int roomB;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float ratio;

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xCEC808", Offset = "0xCEC808", VA = "0xCEC808")]
		public IsaacDoor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200049F")]
	public class IsaacRoomLayout
	{
		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public IsaacRoomTile[,] Tiles;

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xCEDE24", Offset = "0xCEDE24", VA = "0xCEDE24")]
		public void InitializeTiles(int width, int height, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xCEDDAC", Offset = "0xCEDDAC", VA = "0xCEDDAC")]
		public IsaacRoomLayout()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004A0")]
	public class IsaacRoomTile
	{
		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IsaacRoomTileType tileType;

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xCEC71C", Offset = "0xCEC71C", VA = "0xCEC71C")]
		public IsaacRoomTile()
		{
		}
	}
	[Token(Token = "0x20004A1")]
	public enum IsaacRoomTileType
	{
		[Token(Token = "0x40014E6")]
		Floor,
		[Token(Token = "0x40014E7")]
		Door,
		[Token(Token = "0x40014E8")]
		Empty
	}
	[Token(Token = "0x20004A2")]
	public class IsaacDungeonModel : DungeonModel
	{
		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public IsaacDungeonConfig config;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public IsaacRoom[] rooms;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public IsaacDoor[] doors;

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xCEE0F8", Offset = "0xCEE0F8", VA = "0xCEE0F8")]
		public IsaacDungeonModel()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	public abstract class IsaacRoomLayoutBuilder : MonoBehaviour
	{
		[Token(Token = "0x6001994")]
		public abstract IsaacRoomLayout GenerateLayout(IsaacRoom room, System.Random random, int roomWidth, int roomHeight);

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xCEE1D0", Offset = "0xCEE1D0", VA = "0xCEE1D0")]
		protected IsaacRoomLayoutBuilder()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	public class StylizedIsaacRoomLayoutBuilder : IsaacRoomLayoutBuilder
	{
		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minBrushSize;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxBrushSize;

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x7FDAA0", Offset = "0x7FDAA0", VA = "0x7FDAA0", Slot = "4")]
		public override IsaacRoomLayout GenerateLayout(IsaacRoom room, System.Random random, int roomWidth, int roomHeight)
		{
			return null;
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x7FDCEC", Offset = "0x7FDCEC", VA = "0x7FDCEC")]
		private void ConnectDoors(IsaacRoomLayout layout, IntVector doorA, IntVector doorB, int brushSize)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x7FDEC4", Offset = "0x7FDEC4", VA = "0x7FDEC4")]
		private void PaintTile(IsaacRoomLayout layout, int x, int z, int brushSize, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x7FDFE0", Offset = "0x7FDFE0", VA = "0x7FDFE0")]
		private void SetTile(IsaacRoomLayout layout, int x, int z, int width, int height, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x7FE05C", Offset = "0x7FE05C", VA = "0x7FE05C")]
		public StylizedIsaacRoomLayoutBuilder()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class IsaacBuilderUtils
	{
		[Token(Token = "0x600199B")]
		[Address(RVA = "0xCEC614", Offset = "0xCEC614", VA = "0xCEC614")]
		public static IsaacRoomTile GetTileAt(int x, int z, IsaacRoomLayout layout)
		{
			return null;
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xCEC724", Offset = "0xCEC724", VA = "0xCEC724")]
		public static bool ContainsDoorAt(int x, int z, IsaacRoom room)
		{
			return default(bool);
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xCEC794", Offset = "0xCEC794", VA = "0xCEC794")]
		public static IsaacRoom GetRoom(IsaacDungeonModel model, int roomId)
		{
			return null;
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xCEC800", Offset = "0xCEC800", VA = "0xCEC800")]
		public IsaacBuilderUtils()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Infinity.Caves
{
	[Token(Token = "0x20004A6")]
	public class InfinityCaveChunkConstants
	{
		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundBlock;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallBlock;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string RockBlock;

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xCE6B58", Offset = "0xCE6B58", VA = "0xCE6B58")]
		public InfinityCaveChunkConstants()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	public class InfinityCaveChunkBuilder : DungeonBuilder
	{
		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private InfinityCaveChunkConfig chunkConfig;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private InfinityCaveChunkModel chunkModel;

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xCE5F7C", Offset = "0xCE5F7C", VA = "0xCE5F7C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xCE6528", Offset = "0xCE6528", VA = "0xCE6528", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xCE60A0", Offset = "0xCE60A0", VA = "0xCE60A0")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xCE688C", Offset = "0xCE688C", VA = "0xCE688C")]
		private bool[,] ApplyAutomata(bool[,] world)
		{
			return null;
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xCE655C", Offset = "0xCE655C", VA = "0xCE655C")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xCE6A78", Offset = "0xCE6A78", VA = "0xCE6A78")]
		public InfinityCaveChunkBuilder()
		{
		}
	}
	[Token(Token = "0x20004A8")]
	public class InfinityCaveChunkConfig : InfinityDungeonConfig
	{
		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int iterations;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int neighborRocks;

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xCE6A80", Offset = "0xCE6A80", VA = "0xCE6A80", Slot = "5")]
		public override UnityEngine.Vector3 GetLogicalCoord(UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xCE6B20", Offset = "0xCE6B20", VA = "0xCE6B20", Slot = "6")]
		public override bool BuildAlongX()
		{
			return default(bool);
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xCE6B28", Offset = "0xCE6B28", VA = "0xCE6B28", Slot = "7")]
		public override bool BuildAlongY()
		{
			return default(bool);
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xCE6B30", Offset = "0xCE6B30", VA = "0xCE6B30", Slot = "8")]
		public override bool BuildAlongZ()
		{
			return default(bool);
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xCE6B38", Offset = "0xCE6B38", VA = "0xCE6B38")]
		public InfinityCaveChunkConfig()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	public enum MazeTileState
	{
		[Token(Token = "0x40014F7")]
		Empty,
		[Token(Token = "0x40014F8")]
		Rock,
		[Token(Token = "0x40014F9")]
		Wall
	}
	[Token(Token = "0x20004AA")]
	public class InfinityCaveChunkModel : DungeonModel
	{
		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public InfinityCaveChunkConfig Config;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MazeTileState[,] tileStates;

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xCE6C14", Offset = "0xCE6C14", VA = "0xCE6C14")]
		public InfinityCaveChunkModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow
{
	[Token(Token = "0x20004AB")]
	public class GridFlowDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GridFlowDungeonConfig gridFlowConfig;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GridFlowDungeonModel gridFlowModel;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GridFlowExecNodeStates execNodeStates;

		[Token(Token = "0x17000316")]
		public GridFlowExecNodeStates ExecNodeStates
		{
			[Token(Token = "0x60019AD")]
			[Address(RVA = "0xB40624", Offset = "0xB40624", VA = "0xB40624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xB4062C", Offset = "0xB4062C", VA = "0xB4062C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xB40B24", Offset = "0xB40B24", VA = "0xB40B24", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xB4086C", Offset = "0xB4086C", VA = "0xB4086C")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xB41B30", Offset = "0xB41B30", VA = "0xB41B30")]
		private bool IsCellOfType(GridFlowTilemap tilemap, int x, int y, GridFlowTilemapCellType[] types)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xB41BD4", Offset = "0xB41BD4", VA = "0xB41BD4")]
		private Quaternion GetBaseTransform(GridFlowTilemap tilemap, int x, int y)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xB40B58", Offset = "0xB40B58", VA = "0xB40B58")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xB41E50", Offset = "0xB41E50", VA = "0xB41E50", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xB41E54", Offset = "0xB41E54", VA = "0xB41E54")]
		public GridFlowDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	public class GridFlowDungeonConstants
	{
		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string MarkerGround;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string MarkerWall;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string MarkerDoor;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string MarkerDoorOneWay;

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xB41F28", Offset = "0xB41F28", VA = "0xB41F28")]
		public GridFlowDungeonConstants()
		{
		}
	}
	[Token(Token = "0x20004AD")]
	public class GridFlowDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonGridFlowAsset flowAsset;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xB41E5C", Offset = "0xB41E5C", VA = "0xB41E5C", Slot = "4")]
		public override bool HasValidConfig(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xB41F10", Offset = "0xB41F10", VA = "0xB41F10")]
		public GridFlowDungeonConfig()
		{
		}
	}
	[Token(Token = "0x20004AE")]
	public class GridFlowDungeonModel : DungeonModel
	{
		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public GridFlowAbstractGraph abstractGraph;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xB4200C", Offset = "0xB4200C", VA = "0xB4200C")]
		public GridFlowDungeonModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004AF")]
	public class DungeonGridFlowAsset : ScriptableObject
	{
		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		public GridFlowExecGraph execGraph;

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x7A7C84", Offset = "0x7A7C84", VA = "0x7A7C84")]
		public DungeonGridFlowAsset()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	public class GridFlowExecutionContext
	{
		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512618", Offset = "0x512618")]
		private System.Random <Random>k__BackingField;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512628", Offset = "0x512628")]
		private GridFlowExecGraph <ExecGraph>k__BackingField;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512638", Offset = "0x512638")]
		private GridFlowExecNodeStates <NodeStates>k__BackingField;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512648", Offset = "0x512648")]
		private HashSet<GridFlowExecRuleGraphNode> <Visited>k__BackingField;

		[Token(Token = "0x17000317")]
		public System.Random Random
		{
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xB50028", Offset = "0xB50028", VA = "0xB50028")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190C0", Offset = "0x5190C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019BD")]
			[Address(RVA = "0xB50030", Offset = "0xB50030", VA = "0xB50030")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190D0", Offset = "0x5190D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000318")]
		public GridFlowExecGraph ExecGraph
		{
			[Token(Token = "0x60019BE")]
			[Address(RVA = "0xB50038", Offset = "0xB50038", VA = "0xB50038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190E0", Offset = "0x5190E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019BF")]
			[Address(RVA = "0xB50040", Offset = "0xB50040", VA = "0xB50040")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5190F0", Offset = "0x5190F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000319")]
		public GridFlowExecNodeStates NodeStates
		{
			[Token(Token = "0x60019C0")]
			[Address(RVA = "0xB50048", Offset = "0xB50048", VA = "0xB50048")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519100", Offset = "0x519100")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019C1")]
			[Address(RVA = "0xB50050", Offset = "0xB50050", VA = "0xB50050")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519110", Offset = "0x519110")]
			set
			{
			}
		}

		[Token(Token = "0x1700031A")]
		public HashSet<GridFlowExecRuleGraphNode> Visited
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0xB50058", Offset = "0xB50058", VA = "0xB50058")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519120", Offset = "0x519120")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xB50060", Offset = "0xB50060", VA = "0xB50060")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519130", Offset = "0x519130")]
			private set
			{
			}
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xB50068", Offset = "0xB50068", VA = "0xB50068")]
		public GridFlowExecutionContext()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	public class GridFlowExecutor
	{
		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xB41848", Offset = "0xB41848", VA = "0xB41848")]
		public bool Execute(GridFlowExecGraph execGraph, System.Random random, int numTries, out GridFlowExecNodeStates nodeStates)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xB500EC", Offset = "0xB500EC", VA = "0xB500EC")]
		private GridFlowExecNodeHandlerResultType ExecuteGraph(GridFlowExecutionContext context)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xB5037C", Offset = "0xB5037C", VA = "0xB5037C")]
		private GridFlowExecNodeHandlerResultType ExecuteNode(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xB41840", Offset = "0xB41840", VA = "0xB41840")]
		public GridFlowExecutor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004B2")]
	public enum GridFlowGraphItemType
	{
		[Token(Token = "0x400150D")]
		Key,
		[Token(Token = "0x400150E")]
		Lock,
		[Token(Token = "0x400150F")]
		Enemy,
		[Token(Token = "0x4001510")]
		Bonus,
		[Token(Token = "0x4001511")]
		Entrace,
		[Token(Token = "0x4001512")]
		Exit,
		[Token(Token = "0x4001513")]
		Custom
	}
	[Serializable]
	[Token(Token = "0x20004B3")]
	public class GridFlowItem
	{
		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid itemId;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GridFlowGraphItemType type;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string markerName;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Guid> referencedItemIds;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool editorSelected;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowGraphItemCustomInfo customInfo;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xB3FDBC", Offset = "0xB3FDBC", VA = "0xB3FDBC")]
		public GridFlowItem Clone()
		{
			return null;
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xB42DE4", Offset = "0xB42DE4", VA = "0xB42DE4")]
		public GridFlowItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004B4")]
	public struct GridFlowGraphItemCustomInfo
	{
		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string itemType;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string text;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color textColor;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color backgroundColor;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GridFlowGraphItemCustomInfo Default;

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xB5065C", Offset = "0xB5065C", VA = "0xB5065C")]
		public GridFlowGraphItemCustomInfo(string itemType, string text, Color textColor, Color backgroundColor)
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class GridFlowItemMetadataComponent : MonoBehaviour
	{
		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string itemId;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] referencedItemIds;

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xB50810", Offset = "0xB50810", VA = "0xB50810")]
		public GridFlowItemMetadataComponent()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	[SerializeField]
	public class GridFlowItemMetadata
	{
		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Guid itemId;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid[] referencedItems;

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xB41DAC", Offset = "0xB41DAC", VA = "0xB41DAC")]
		public GridFlowItemMetadata()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public class GridFlowItemMetadataHandler : DungeonItemSpawnListener
	{
		[Token(Token = "0x60019CF")]
		private T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xD3C268", Offset = "0xD3C268", VA = "0xD3C268", Slot = "4")]
		public override void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xD3C450", Offset = "0xD3C450", VA = "0xD3C450")]
		public GridFlowItemMetadataHandler()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public class GridFlowItemPlacementStrategyContext
	{
		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapDistanceField distanceField;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public System.Random random;

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xD3CC14", Offset = "0xD3CC14", VA = "0xD3CC14")]
		public GridFlowItemPlacementStrategyContext()
		{
		}
	}
	[Token(Token = "0x20004B9")]
	public interface IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x60019D3")]
		bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage);
	}
	[Serializable]
	[Token(Token = "0x20004BA")]
	public enum GridFlowItemPlacementMethod
	{
		[Token(Token = "0x400152A")]
		RandomTile,
		[Token(Token = "0x400152B")]
		NearEdges,
		[Token(Token = "0x400152C")]
		Script
	}
	[Serializable]
	[Token(Token = "0x20004BB")]
	public class GridFlowItemPlacementSettings
	{
		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowItemPlacementMethod placementMethod;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool avoidPlacingNextToDoors;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string placementScriptClass;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fallbackToRandomPlacement;

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xD3CB24", Offset = "0xD3CB24", VA = "0xD3CB24")]
		public GridFlowItemPlacementSettings Clone()
		{
			return null;
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xD3CBAC", Offset = "0xD3CBAC", VA = "0xD3CBAC")]
		public GridFlowItemPlacementSettings()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	public class GridFlowItemPlacementStrategyFactory
	{
		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xD3CC1C", Offset = "0xD3CC1C", VA = "0xD3CC1C")]
		public static IGridFlowItemPlacementStrategy Create(GridFlowItemPlacementMethod method)
		{
			return null;
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xD3CCD0", Offset = "0xD3CCD0", VA = "0xD3CCD0")]
		public GridFlowItemPlacementStrategyFactory()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class GridFlowItemPlacementStrategyUtils
	{
		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xD3CCD8", Offset = "0xD3CCD8", VA = "0xD3CCD8")]
		public static bool Validate(GridFlowItemPlacementSettings settings, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xD3CD6C", Offset = "0xD3CD6C", VA = "0xD3CD6C")]
		public GridFlowItemPlacementStrategyUtils()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public class GridFlowItemPlacementStrategy_NearEdge : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xD3CD74", Offset = "0xD3CD74", VA = "0xD3CD74", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xD3CCB8", Offset = "0xD3CCB8", VA = "0xD3CCB8")]
		public GridFlowItemPlacementStrategy_NearEdge()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class GridFlowItemPlacementStrategy_Random : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xD3CFE4", Offset = "0xD3CFE4", VA = "0xD3CFE4", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xD3CCC8", Offset = "0xD3CCC8", VA = "0xD3CCC8")]
		public GridFlowItemPlacementStrategy_Random()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public class GridFlowItemPlacementStrategy_Script : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xD3D1E4", Offset = "0xD3D1E4", VA = "0xD3D1E4", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xD3CCC0", Offset = "0xD3CCC0", VA = "0xD3CCC0")]
		public GridFlowItemPlacementStrategy_Script()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004C1")]
	public enum GridFlowMinimapInitMode
	{
		[Token(Token = "0x4001532")]
		OnDungeonRebuild,
		[Token(Token = "0x4001533")]
		OnPlay,
		[Token(Token = "0x4001534")]
		Manual
	}
	[Serializable]
	[Token(Token = "0x20004C2")]
	public struct GridFlowMinimapIcons
	{
		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D iconOneWayDoor;
	}
	[Token(Token = "0x20004C3")]
	public class GridFlowMinimap : DungeonMiniMap
	{
		[Token(Token = "0x20004C4")]
		private struct FogOfWarItem
		{
			[Token(Token = "0x4001540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector2 position;

			[Token(Token = "0x4001541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float radius;

			[Token(Token = "0x4001542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float falloffStart;
		}

		[Serializable]
		[Token(Token = "0x20004C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C428", Offset = "0x50C428")]
		private sealed class <>c
		{
			[Token(Token = "0x4001543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GridFlowTilemapCell, bool> <>9__17_0;

			[Token(Token = "0x4001545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<GridFlowMinimapTrackedObject, bool> <>9__21_0;

			[Token(Token = "0x60019EE")]
			[Address(RVA = "0x7E3354", Offset = "0x7E3354", VA = "0x7E3354")]
			public <>c()
			{
			}

			[Token(Token = "0x60019EF")]
			[Address(RVA = "0x7E335C", Offset = "0x7E335C", VA = "0x7E335C")]
			internal bool <UpdateStaticTexture>b__17_0(GridFlowTilemapCell cell)
			{
				return default(bool);
			}

			[Token(Token = "0x60019F0")]
			[Address(RVA = "0x7E3364", Offset = "0x7E3364", VA = "0x7E3364")]
			internal bool <UpdateOverlayTexture>b__21_0(GridFlowMinimapTrackedObject trackedObject)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader tileShader;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowMinimapInitMode initMode;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GridFlowMinimapIcons icons;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool seeThroughWalls;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GridFlowTilemapRenderResources resources;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GridFlowDungeonModel model;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GridFlowDungeonConfig config;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int tileSize;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<GridFlowMinimapTrackedObject> trackedObjects;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color[] fogMask;

		[Token(Token = "0x1700031B")]
		protected override bool SupportsFogOfWar
		{
			[Token(Token = "0x60019E0")]
			[Address(RVA = "0xD3D3BC", Offset = "0xD3D3BC", VA = "0xD3D3BC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xD3D3C4", Offset = "0xD3D3C4", VA = "0xD3D3C4")]
		private void Reset()
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xD3D458", Offset = "0xD3D458", VA = "0xD3D458")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xD3D45C", Offset = "0xD3D45C", VA = "0xD3D45C")]
		private void Start()
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xD3D474", Offset = "0xD3D474", VA = "0xD3D474")]
		public void AddTrackedObject(GridFlowMinimapTrackedObject trackedObject)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xD3D4D8", Offset = "0xD3D4D8", VA = "0xD3D4D8", Slot = "5")]
		protected override void CreateTextures(IntVector2 desiredSize, out Texture staticImage, out Texture fogOfWar, out Texture overlayImage, out IntVector2 targetTextureSize)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xD3D970", Offset = "0xD3D970", VA = "0xD3D970", Slot = "6")]
		protected override void UpdateStaticTexture(Texture texture)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xD3DEE8", Offset = "0xD3DEE8", VA = "0xD3DEE8")]
		private IntVector2[] FogOfWarFilterVisibility(IntVector2[] tiles, IntVector2 player)
		{
			return null;
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xD3E27C", Offset = "0xD3E27C", VA = "0xD3E27C", Slot = "7")]
		protected override void UpdateFogOfWarTexture(Texture texture)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xD3EA98", Offset = "0xD3EA98", VA = "0xD3EA98", Slot = "8")]
		protected override void UpdateOverlayTexture(Texture texture)
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xD3F1C0", Offset = "0xD3F1C0", VA = "0xD3F1C0")]
		private UnityEngine.Vector2 WorldToUVCoord(UnityEngine.Vector3 position, int tilemapWidth, int tilemapHeight, int textureWidth, int textureHeight)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xD3F264", Offset = "0xD3F264", VA = "0xD3F264")]
		private void EmitVertex(float cx, float cy, float x, float y, float u, float v, Color color, Quaternion rotation)
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xD3F314", Offset = "0xD3F314", VA = "0xD3F314")]
		public GridFlowMinimap()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class GridFlowMinimapTrackedObject : MonoBehaviour
	{
		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D icon;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float iconScale;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool rotateIcon;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color tint;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool exploresFogOfWar;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fogOfWarNumTileRadius;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fogOfWarLightFalloffStart;

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0xD3F3A8", Offset = "0xD3F3A8", VA = "0xD3F3A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xD3F450", Offset = "0xD3F450", VA = "0xD3F450")]
		public GridFlowMinimapTrackedObject()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class GridFlowDoorKeyComponent : MonoBehaviour
	{
		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string keyId;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] validLockIds;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowDoorLockComponent[] lockRefs;

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xB40524", Offset = "0xB40524", VA = "0xB40524")]
		public GridFlowDoorKeyComponent()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	public class GridFlowDoorLockComponent : MonoBehaviour
	{
		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lockId;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] validKeyIds;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowDoorKeyComponent[] validKeyRefs;

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xB4058C", Offset = "0xB4058C", VA = "0xB4058C")]
		public GridFlowDoorLockComponent()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Tilemap
{
	[Serializable]
	[Token(Token = "0x20004C9")]
	public enum GridFlowTilemapCellType
	{
		[Token(Token = "0x4001554")]
		Empty,
		[Token(Token = "0x4001555")]
		Floor,
		[Token(Token = "0x4001556")]
		Wall,
		[Token(Token = "0x4001557")]
		Door,
		[Token(Token = "0x4001558")]
		Custom
	}
	[Serializable]
	[Token(Token = "0x20004CA")]
	public class GridFlowTilemapCustomCellInfo
	{
		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color defaultColor;

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xD411D8", Offset = "0xD411D8", VA = "0xD411D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xD41204", Offset = "0xD41204", VA = "0xD41204")]
		public GridFlowTilemapCustomCellInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004CB")]
	public enum GridFlowTilemapCellCategory
	{
		[Token(Token = "0x400155C")]
		Layout,
		[Token(Token = "0x400155D")]
		Biome,
		[Token(Token = "0x400155E")]
		Elevation
	}
	[Serializable]
	[Token(Token = "0x20004CC")]
	public class GridFlowTilemapCellOverlay
	{
		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string markerName;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512658", Offset = "0x512658")]
		private float <noiseValue>k__BackingField;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool tileBlockingOverlay;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GridFlowTilemapCellOverlayMergeConfig mergeConfig;

		[Token(Token = "0x1700031C")]
		public float noiseValue
		{
			[Token(Token = "0x60019F7")]
			[Address(RVA = "0xD40FDC", Offset = "0xD40FDC", VA = "0xD40FDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519140", Offset = "0x519140")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019F8")]
			[Address(RVA = "0xD40FE4", Offset = "0xD40FE4", VA = "0xD40FE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519150", Offset = "0x519150")]
			set
			{
			}
		}

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0xD40BC8", Offset = "0xD40BC8", VA = "0xD40BC8")]
		public GridFlowTilemapCellOverlay Clone()
		{
			return null;
		}

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0xD40FEC", Offset = "0xD40FEC", VA = "0xD40FEC")]
		public GridFlowTilemapCellOverlay()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004CD")]
	public enum GridFlowTilemapCellOverlayMergeWallOverlayRule
	{
		[Token(Token = "0x4001565")]
		KeepWallAndOverlay,
		[Token(Token = "0x4001566")]
		KeepWallRemoveOverlay,
		[Token(Token = "0x4001567")]
		KeepOverlayRemoveWall
	}
	[Serializable]
	[Token(Token = "0x20004CE")]
	public class GridFlowTilemapCellOverlayMergeConfig
	{
		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minHeight;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxHeight;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapCellOverlayMergeWallOverlayRule wallOverlayRule;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float markerHeightOffsetForLayoutTiles;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float markerHeightOffsetForNonLayoutTiles;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool removeElevationMarker;

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xD40FFC", Offset = "0xD40FFC", VA = "0xD40FFC")]
		public GridFlowTilemapCellOverlayMergeConfig Clone()
		{
			return null;
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xD41090", Offset = "0xD41090", VA = "0xD41090")]
		public GridFlowTilemapCellOverlayMergeConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004CF")]
	public class GridFlowTilemapCell
	{
		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowTilemapCellType CellType;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapCustomCellInfo CustomCellInfo;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid Item;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Tags;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowTilemapCellOverlay Overlay;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntVector2 NodeCoord;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntVector2 TileCoord;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool UseCustomColor;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color CustomColor;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool MainPath;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool LayoutCell;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int DistanceFromMainPath;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float Height;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public object Userdata;

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0xD409A0", Offset = "0xD409A0", VA = "0xD409A0")]
		public GridFlowTilemapCell Clone()
		{
			return null;
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xD40C84", Offset = "0xD40C84", VA = "0xD40C84")]
		public void Clear()
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xD4071C", Offset = "0xD4071C", VA = "0xD4071C")]
		public GridFlowTilemapCell()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004D0")]
	public class GridFlowTilemapCellDoorInfo : ICloneable
	{
		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool locked;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool oneWay;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntVector2 nodeA;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IntVector2 nodeB;

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xD40F50", Offset = "0xD40F50", VA = "0xD40F50", Slot = "4")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xD40FD4", Offset = "0xD40FD4", VA = "0xD40FD4")]
		public GridFlowTilemapCellDoorInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004D1")]
	public class GridFlowTilemapCellWallInfo : ICloneable
	{
		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IntVector2> owningNodes;

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xD41098", Offset = "0xD41098", VA = "0xD41098", Slot = "4")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xD41154", Offset = "0xD41154", VA = "0xD41154")]
		public GridFlowTilemapCellWallInfo()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	public class GridFlowTilemap
	{
		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Width;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Height;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GridFlowTilemapCellDatabase Cells;

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xD4056C", Offset = "0xD4056C", VA = "0xD4056C")]
		public GridFlowTilemap(int width, int height)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xD40868", Offset = "0xD40868", VA = "0xD40868")]
		public GridFlowTilemap Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x20004D3")]
	public class GridFlowTilemapCellDatabaseEnumerator : IEnumerator<GridFlowTilemapCell>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int position;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GridFlowTilemapCell[] cells;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GridFlowTilemapCell current;

		[Token(Token = "0x1700031D")]
		public GridFlowTilemapCell Current
		{
			[Token(Token = "0x6001A0A")]
			[Address(RVA = "0xD40F40", Offset = "0xD40F40", VA = "0xD40F40", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0xD40F48", Offset = "0xD40F48", VA = "0xD40F48", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xD40DE4", Offset = "0xD40DE4", VA = "0xD40DE4")]
		public GridFlowTilemapCellDatabaseEnumerator(GridFlowTilemapCell[] cells)
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xD40E98", Offset = "0xD40E98", VA = "0xD40E98", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0xD40ECC", Offset = "0xD40ECC", VA = "0xD40ECC", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0xD40F2C", Offset = "0xD40F2C", VA = "0xD40F2C", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004D4")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x50C438", Offset = "0x50C438")]
	public class GridFlowTilemapCellDatabase : IEnumerable<GridFlowTilemapCell>, IEnumerable
	{
		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GridFlowTilemapCell[] cells;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int width;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int height;

		[Token(Token = "0x1700031F")]
		public GridFlowTilemapCell Item
		{
			[Token(Token = "0x6001A0D")]
			[Address(RVA = "0xD4095C", Offset = "0xD4095C", VA = "0xD4095C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0xD407D8", Offset = "0xD407D8", VA = "0xD407D8")]
			set
			{
			}
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xD406A0", Offset = "0xD406A0", VA = "0xD406A0")]
		public GridFlowTilemapCellDatabase(int width, int height)
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xD3E250", Offset = "0xD3E250", VA = "0xD3E250")]
		public GridFlowTilemapCell GetCell(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xD40D60", Offset = "0xD40D60", VA = "0xD40D60")]
		private int Index(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xD40D6C", Offset = "0xD40D6C", VA = "0xD40D6C", Slot = "4")]
		private IEnumerator<GridFlowTilemapCell> System.Collections.Generic.IEnumerable<DungeonArchitect.Builders.GridFlow.Tilemap.GridFlowTilemapCell>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xD40E20", Offset = "0xD40E20", VA = "0xD40E20", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20004D5")]
	public class GridFlowTilemapDistanceFieldCell
	{
		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int DistanceFromEdge;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int DistanceFromDoor;

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xD413BC", Offset = "0xD413BC", VA = "0xD413BC")]
		public GridFlowTilemapDistanceFieldCell()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	public class GridFlowTilemapDistanceField
	{
		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GridFlowTilemap tilemap;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapDistanceFieldCell[,] distanceCells;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] childOffsets;

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xD41238", Offset = "0xD41238", VA = "0xD41238")]
		public GridFlowTilemapDistanceField(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xD413CC", Offset = "0xD413CC", VA = "0xD413CC")]
		private void Build()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xD413F0", Offset = "0xD413F0", VA = "0xD413F0")]
		private void FindDistanceFromEdge()
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xD4180C", Offset = "0xD4180C", VA = "0xD4180C")]
		private void FindDistanceFromDoor()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class GridFlowTilemapRenderResources
	{
		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D iconOneWayDoor;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TexturedMaterialInstances materials;

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xD3D934", Offset = "0xD3D934", VA = "0xD3D934")]
		public GridFlowTilemapRenderResources()
		{
		}
	}
	[Token(Token = "0x20004D8")]
	public class GridFlowTilemapRenderer
	{
		[Token(Token = "0x20004D9")]
		private struct TilemapRenderVert
		{
			[Token(Token = "0x4001591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector2 position;

			[Token(Token = "0x4001592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public UnityEngine.Vector2 uv;

			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x7E35F0", Offset = "0x7E35F0", VA = "0x7E35F0")]
			public TilemapRenderVert(UnityEngine.Vector2 position, UnityEngine.Vector2 uv)
			{
			}

			[Token(Token = "0x6001A21")]
			[Address(RVA = "0x7E35E4", Offset = "0x7E35E4", VA = "0x7E35E4")]
			public TilemapRenderVert Clone()
			{
				return default(TilemapRenderVert);
			}
		}

		[Token(Token = "0x20004DA")]
		private struct TilemapRenderQuad
		{
			[Token(Token = "0x4001593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TilemapRenderVert[] verts;

			[Token(Token = "0x4001594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color color;

			[Token(Token = "0x4001595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float z;

			[Token(Token = "0x4001596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int rotateUV;

			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x7E33CC", Offset = "0x7E33CC", VA = "0x7E33CC")]
			public TilemapRenderQuad(TilemapRenderVert v0, TilemapRenderVert v1, TilemapRenderVert v2, TilemapRenderVert v3, Color color, float z)
			{
			}

			[Token(Token = "0x6001A23")]
			[Address(RVA = "0x7E3514", Offset = "0x7E3514", VA = "0x7E3514")]
			public TilemapRenderQuad Clone()
			{
				return default(TilemapRenderQuad);
			}
		}

		[Token(Token = "0x20004DB")]
		private struct TilemapLayerRenderData
		{
			[Token(Token = "0x4001597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Material material;

			[Token(Token = "0x4001598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TilemapRenderQuad[] quads;
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xD3DB84", Offset = "0xD3DB84", VA = "0xD3DB84")]
		public static void Render(RenderTexture tilemapTexture, GridFlowTilemap tilemap, int tileSize, GridFlowTilemapRenderResources resources, Func<GridFlowTilemapCell, bool> FuncCellSelected)
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xD41C54", Offset = "0xD41C54", VA = "0xD41C54")]
		private static TilemapLayerRenderData[] BuildQuadData(GridFlowTilemap tilemap, int tileSize, GridFlowTilemapRenderResources resources, Func<GridFlowTilemapCell, bool> FuncCellSelected)
		{
			return null;
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xD424D0", Offset = "0xD424D0", VA = "0xD424D0")]
		private static void AddLayerQuad(Dictionary<Material, List<TilemapRenderQuad>> quadsByMaterial, TilemapRenderQuad quad, Material material)
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xD423D0", Offset = "0xD423D0", VA = "0xD423D0")]
		private static Color GetSelectedCellColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xD42434", Offset = "0xD42434", VA = "0xD42434")]
		private static Color GetCellColor(GridFlowTilemapCell cell)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xD42604", Offset = "0xD42604", VA = "0xD42604")]
		public GridFlowTilemapRenderer()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs
{
	[Serializable]
	[Token(Token = "0x20004DC")]
	public class GridFlowExecGraphNodePin : GraphPin
	{
		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xB42194", Offset = "0xB42194", VA = "0xB42194", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xB42268", Offset = "0xB42268", VA = "0xB42268")]
		public GridFlowExecGraphNodePin()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Preview.Tilemap
{
	[Token(Token = "0x20004DD")]
	public class GridFlowPreviewTilemapGraph : Graph
	{
		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xD40314", Offset = "0xD40314", VA = "0xD40314", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xD40344", Offset = "0xD40344", VA = "0xD40344")]
		public GridFlowPreviewTilemapGraph()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public struct GridFlowPreviewTilemapBuildContext
	{
		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GridFlowAbstractGraph abstractGraph;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphBuilder graphBuilder;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowAbstractNodeState selectedNodeState;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GridFlowItem selectedItem;
	}
	[Token(Token = "0x20004DF")]
	public class GridFlowPreviewTilemapGraphBuilder
	{
		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xD4034C", Offset = "0xD4034C", VA = "0xD4034C")]
		public static void Build(GridFlowPreviewTilemapBuildContext context)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xD404D8", Offset = "0xD404D8", VA = "0xD404D8")]
		public GridFlowPreviewTilemapGraphBuilder()
		{
		}
	}
	[Token(Token = "0x20004E0")]
	public class GridFlowPreviewTilemapGraphNode : GraphNode
	{
		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int tileRenderSize;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126A8", Offset = "0x5126A8")]
		private GridFlowTilemap <Tilemap>k__BackingField;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126B8", Offset = "0x5126B8")]
		private GridFlowAbstractGraph <AbstractGraph>k__BackingField;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126C8", Offset = "0x5126C8")]
		private GridFlowAbstractNodeState <SelectedNodeState>k__BackingField;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126D8", Offset = "0x5126D8")]
		private GridFlowItem <SelectedItem>k__BackingField;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126E8", Offset = "0x5126E8")]
		private bool <RequestRecreatePreview>k__BackingField;

		[Token(Token = "0x17000320")]
		public GridFlowTilemap Tilemap
		{
			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0xD404E0", Offset = "0xD404E0", VA = "0xD404E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519160", Offset = "0x519160")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0xD404E8", Offset = "0xD404E8", VA = "0xD404E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519170", Offset = "0x519170")]
			private set
			{
			}
		}

		[Token(Token = "0x17000321")]
		public GridFlowAbstractGraph AbstractGraph
		{
			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0xD404F0", Offset = "0xD404F0", VA = "0xD404F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519180", Offset = "0x519180")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0xD404F8", Offset = "0xD404F8", VA = "0xD404F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519190", Offset = "0x519190")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public GridFlowAbstractNodeState SelectedNodeState
		{
			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0xD40500", Offset = "0xD40500", VA = "0xD40500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191A0", Offset = "0x5191A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0xD40508", Offset = "0xD40508", VA = "0xD40508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191B0", Offset = "0x5191B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public GridFlowItem SelectedItem
		{
			[Token(Token = "0x6001A30")]
			[Address(RVA = "0xD40510", Offset = "0xD40510", VA = "0xD40510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191C0", Offset = "0x5191C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A31")]
			[Address(RVA = "0xD40518", Offset = "0xD40518", VA = "0xD40518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191D0", Offset = "0x5191D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public bool RequestRecreatePreview
		{
			[Token(Token = "0x6001A32")]
			[Address(RVA = "0xD40520", Offset = "0xD40520", VA = "0xD40520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191E0", Offset = "0x5191E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A33")]
			[Address(RVA = "0xD40528", Offset = "0xD40528", VA = "0xD40528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5191F0", Offset = "0x5191F0")]
			set
			{
			}
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xD40534", Offset = "0xD40534", VA = "0xD40534")]
		public GridFlowPreviewTilemapGraphNode()
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xD40564", Offset = "0xD40564", VA = "0xD40564", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xD40454", Offset = "0xD40454", VA = "0xD40454")]
		public void SetTilemap(GridFlowTilemap tilemap)
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Preview.Abstract
{
	[Token(Token = "0x20004E1")]
	public class GridFlowPreviewAbstractGraph : Graph
	{
		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xD3F4A0", Offset = "0xD3F4A0", VA = "0xD3F4A0", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xD3F4D0", Offset = "0xD3F4D0", VA = "0xD3F4D0")]
		public GridFlowPreviewAbstractGraph()
		{
		}
	}
	[Token(Token = "0x20004E2")]
	public class GridFlowPreviewAbstractGraphBuilder
	{
		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xD3F4D8", Offset = "0xD3F4D8", VA = "0xD3F4D8")]
		public static void Build(GridFlowAbstractGraph abstractGraph, GraphBuilder graphBuilder)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xD3FA58", Offset = "0xD3FA58", VA = "0xD3FA58")]
		public GridFlowPreviewAbstractGraphBuilder()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	public class GridFlowPreviewAbstractGraphUtils
	{
		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xD3FC98", Offset = "0xD3FC98", VA = "0xD3FC98")]
		public static GridFlowItem[] GetAllItems(GridFlowPreviewAbstractGraph previewGraph)
		{
			return null;
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xD4030C", Offset = "0xD4030C", VA = "0xD4030C")]
		public GridFlowPreviewAbstractGraphUtils()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class GridFlowPreviewAbstractGraphLink : GraphLink
	{
		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowAbstractGraphLinkState AbstractLinkState;

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xD3FA60", Offset = "0xD3FA60", VA = "0xD3FA60")]
		public GridFlowPreviewAbstractGraphLink()
		{
		}
	}
	[Token(Token = "0x20004E5")]
	public class GridFlowPreviewAbstractGraphNode : GraphNode
	{
		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5126F8", Offset = "0x5126F8")]
		private GridFlowAbstractNodeState <AbstractNodeState>k__BackingField;

		[Token(Token = "0x17000325")]
		public GridFlowAbstractNodeState AbstractNodeState
		{
			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0xD3FA68", Offset = "0xD3FA68", VA = "0xD3FA68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519200", Offset = "0x519200")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0xD3FA70", Offset = "0xD3FA70", VA = "0xD3FA70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519210", Offset = "0x519210")]
			set
			{
			}
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xD3FA78", Offset = "0xD3FA78", VA = "0xD3FA78", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0xD3FBB0", Offset = "0xD3FBB0", VA = "0xD3FBB0")]
		public GridFlowPreviewAbstractGraphNode()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	public class GridFlowPreviewAbstractGraphNodePin : GraphPin
	{
		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xD3FBB8", Offset = "0xD3FBB8", VA = "0xD3FBB8", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xD3FC8C", Offset = "0xD3FC8C", VA = "0xD3FC8C")]
		public GridFlowPreviewAbstractGraphNodePin()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Exec
{
	[Token(Token = "0x20004E7")]
	public class GridFlowExecGraph : Graph
	{
		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public GridFlowExecResultGraphNode resultNode;

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xB42014", Offset = "0xB42014", VA = "0xB42014", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xB42044", Offset = "0xB42044", VA = "0xB42044")]
		public GridFlowExecGraph()
		{
		}
	}
	[Token(Token = "0x20004E8")]
	public class GridFlowExecGraphUtils
	{
		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xB42278", Offset = "0xB42278", VA = "0xB42278")]
		public static GridFlowExecRuleGraphNode[] GetIncomingNodes(GridFlowExecRuleGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xB42428", Offset = "0xB42428", VA = "0xB42428")]
		public GridFlowExecGraphUtils()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	public class GridFlowExecGraphNodeBase : GraphNode
	{
		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xB4204C", Offset = "0xB4204C", VA = "0xB4204C", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xB4218C", Offset = "0xB4218C", VA = "0xB4218C")]
		public GridFlowExecGraphNodeBase()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	public class GridFlowExecResultGraphNode : GridFlowExecRuleGraphNode
	{
		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xB50018", Offset = "0xB50018", VA = "0xB50018")]
		public GridFlowExecResultGraphNode()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public enum GridFlowGraphNodeExecutionStage
	{
		[Token(Token = "0x40015AA")]
		NotExecuted,
		[Token(Token = "0x40015AB")]
		WaitingToExecute,
		[Token(Token = "0x40015AC")]
		Executed
	}
	[Token(Token = "0x20004EC")]
	public class GridFlowGraphNodeExecutionStatus
	{
		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512718", Offset = "0x512718")]
		private GridFlowGraphNodeExecutionStage <ExecutionStage>k__BackingField;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512728", Offset = "0x512728")]
		private GridFlowExecNodeHandlerResultType <Success>k__BackingField;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512738", Offset = "0x512738")]
		private string <ErrorMessage>k__BackingField;

		[Token(Token = "0x17000326")]
		public GridFlowGraphNodeExecutionStage ExecutionStage
		{
			[Token(Token = "0x6001A4B")]
			[Address(RVA = "0xB507E0", Offset = "0xB507E0", VA = "0xB507E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519220", Offset = "0x519220")]
			get
			{
				return default(GridFlowGraphNodeExecutionStage);
			}
			[Token(Token = "0x6001A4C")]
			[Address(RVA = "0xB507E8", Offset = "0xB507E8", VA = "0xB507E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519230", Offset = "0x519230")]
			set
			{
			}
		}

		[Token(Token = "0x17000327")]
		public GridFlowExecNodeHandlerResultType Success
		{
			[Token(Token = "0x6001A4D")]
			[Address(RVA = "0xB507F0", Offset = "0xB507F0", VA = "0xB507F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519240", Offset = "0x519240")]
			get
			{
				return default(GridFlowExecNodeHandlerResultType);
			}
			[Token(Token = "0x6001A4E")]
			[Address(RVA = "0xB507F8", Offset = "0xB507F8", VA = "0xB507F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519250", Offset = "0x519250")]
			set
			{
			}
		}

		[Token(Token = "0x17000328")]
		public string ErrorMessage
		{
			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0xB50800", Offset = "0xB50800", VA = "0xB50800")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519260", Offset = "0x519260")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A50")]
			[Address(RVA = "0xB50808", Offset = "0xB50808", VA = "0xB50808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519270", Offset = "0x519270")]
			set
			{
			}
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xB50314", Offset = "0xB50314", VA = "0xB50314")]
		public GridFlowGraphNodeExecutionStatus()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	public class GridFlowExecRuleGraphNode : GridFlowExecGraphNodeBase
	{
		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GridFlowExecNodeHandler nodeHandler;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GridFlowGraphNodeExecutionStatus executionStatus;

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xB50020", Offset = "0xB50020", VA = "0xB50020")]
		public GridFlowExecRuleGraphNode()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Exec.NodeHandlers
{
	[Token(Token = "0x20004EE")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C470", Offset = "0x50C470")]
	public class GridFlowExecNodeHandler_CreateGrid : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Int resolution;

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xB4248C", Offset = "0xB4248C", VA = "0xB4248C", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xB42764", Offset = "0xB42764", VA = "0xB42764")]
		public GridFlowExecNodeHandler_CreateGrid()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C4C4", Offset = "0x50C4C4")]
	public class GridFlowExecNodeHandler_CreateKeyLock : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string keyBranch;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string lockBranch;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string keyMarkerName;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string lockMarkerName;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xB42774", Offset = "0xB42774", VA = "0xB42774", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0xB429D0", Offset = "0xB429D0", VA = "0xB429D0")]
		private bool FindKeyLockNodes(GridFlowExecutionContext context, GridFlowAbstractGraph graph, out GridFlowAbstractGraphNode keyNode, out GridFlowAbstractGraphNode lockNode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xB434AC", Offset = "0xB434AC", VA = "0xB434AC")]
		public GridFlowExecNodeHandler_CreateKeyLock()
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xB43594", Offset = "0xB43594", VA = "0xB43594")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519280", Offset = "0x519280")]
		private bool <FindKeyLockNodes>b__6_0(GridFlowAbstractGraphNode n)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xB43604", Offset = "0xB43604", VA = "0xB43604")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519290", Offset = "0x519290")]
		private bool <FindKeyLockNodes>b__6_1(GridFlowAbstractGraphNode n)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004F0")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C518", Offset = "0x50C518")]
	public class GridFlowExecNodeHandler_CreateMainPath : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int pathSize;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string pathName;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color nodeColor;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string startMarkerName;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string goalMarkerName;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string startNodePathName;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string goalNodePathName;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GridFlowItemPlacementSettings startPlacementSettings;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GridFlowItemPlacementSettings goalPlacementSettings;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool drawDebug;

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xB43674", Offset = "0xB43674", VA = "0xB43674", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xB439C4", Offset = "0xB439C4", VA = "0xB439C4")]
		private bool GrowPath(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode currentNode, System.Random random, List<GridFlowAbstractGraphNode> path, HashSet<GridFlowAbstractGraphNode> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0xB43BFC", Offset = "0xB43BFC", VA = "0xB43BFC")]
		private void FinalizePath(GridFlowAbstractGraph graph, List<GridFlowAbstractGraphNode> path)
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0xB43F34", Offset = "0xB43F34", VA = "0xB43F34")]
		public GridFlowExecNodeHandler_CreateMainPath()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C56C", Offset = "0x50C56C")]
	public class GridFlowExecNodeHandler_CreatePath : GridFlowExecNodeHandler
	{
		[Token(Token = "0x20004F2")]
		private class StaticGrowthState
		{
			[Token(Token = "0x40015C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraph graph;

			[Token(Token = "0x40015CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GridFlowAbstractGraphNode headNode;

			[Token(Token = "0x40015CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GridFlowAbstractGraphNode[] sinkNodes;

			[Token(Token = "0x40015CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public System.Random random;

			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x7E2F88", Offset = "0x7E2F88", VA = "0x7E2F88")]
			public StaticGrowthState()
			{
			}
		}

		[Token(Token = "0x20004F3")]
		private class GrowthState
		{
			[Token(Token = "0x40015CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<GridFlowAbstractGraphNode> path;

			[Token(Token = "0x40015CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HashSet<GridFlowAbstractGraphNode> visited;

			[Token(Token = "0x40015CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GridFlowAbstractGraphNode tailNode;

			[Token(Token = "0x6001A65")]
			[Address(RVA = "0x7E2F80", Offset = "0x7E2F80", VA = "0x7E2F80")]
			public GrowthState()
			{
			}
		}

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minPathSize;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxPathSize;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string pathName;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color nodeColor;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string startFromPath;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string endOnPath;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool drawDebug;

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0xB44098", Offset = "0xB44098", VA = "0xB44098", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0xB445A0", Offset = "0xB445A0", VA = "0xB445A0")]
		private bool GrowPath(GridFlowAbstractGraphNode currentNode, StaticGrowthState staticState, GrowthState state)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0xB448F8", Offset = "0xB448F8", VA = "0xB448F8")]
		private void FinalizePath(StaticGrowthState staticState, GrowthState state)
		{
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0xB44C18", Offset = "0xB44C18", VA = "0xB44C18")]
		public GridFlowExecNodeHandler_CreatePath()
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0xB44CF0", Offset = "0xB44CF0", VA = "0xB44CF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192A0", Offset = "0x5192A0")]
		private bool <Execute>b__7_0(GridFlowAbstractGraphNode n)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0xB44D60", Offset = "0xB44D60", VA = "0xB44D60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192B0", Offset = "0x5192B0")]
		private bool <Execute>b__7_1(GridFlowAbstractGraphNode n)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004F4")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C5C0", Offset = "0x50C5C0")]
	public class GridFlowExecNodeHandler_FinalizeGraph : GridFlowExecNodeHandler
	{
		[Token(Token = "0x20004F5")]
		private struct ItemInfo
		{
			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GridFlowItem item;

			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraphLink link;

			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x7E3104", Offset = "0x7E3104", VA = "0x7E3104")]
			public ItemInfo(GridFlowItem item, GridFlowAbstractGraphNode node, GridFlowAbstractGraphLink link)
			{
			}

			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x7E3154", Offset = "0x7E3154", VA = "0x7E3154")]
			public object GetParent()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x20004F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C614", Offset = "0x50C614")]
		private sealed class <>c
		{
			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GridFlowItem, bool> <>9__4_0;

			[Token(Token = "0x40015D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<GridFlowItem, bool> <>9__5_0;

			[Token(Token = "0x40015D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<GridFlowItem, bool> <>9__5_1;

			[Token(Token = "0x40015D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<GridFlowItem, bool> <>9__5_2;

			[Token(Token = "0x40015DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<GridFlowItem, bool> <>9__5_3;

			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<GridFlowItem, bool> <>9__5_4;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<GridFlowAbstractGraphLink, bool> <>9__7_0;

			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<GridFlowAbstractGraphLink, bool> <>9__7_1;

			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0x7E2FF4", Offset = "0x7E2FF4", VA = "0x7E2FF4")]
			public <>c()
			{
			}

			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x7E2FFC", Offset = "0x7E2FFC", VA = "0x7E2FFC")]
			internal bool <AssignRoomTypes>b__4_0(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x7E301C", Offset = "0x7E301C", VA = "0x7E301C")]
			internal bool <GetNodeRoomType>b__5_0(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x7E303C", Offset = "0x7E303C", VA = "0x7E303C")]
			internal bool <GetNodeRoomType>b__5_1(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x7E305C", Offset = "0x7E305C", VA = "0x7E305C")]
			internal bool <GetNodeRoomType>b__5_2(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x7E307C", Offset = "0x7E307C", VA = "0x7E307C")]
			internal bool <GetNodeRoomType>b__5_3(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x7E309C", Offset = "0x7E309C", VA = "0x7E309C")]
			internal bool <GetNodeRoomType>b__5_4(GridFlowItem i)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x7E30BC", Offset = "0x7E30BC", VA = "0x7E30BC")]
			internal bool <ResolveKeyLocks>b__7_0(GridFlowAbstractGraphLink link)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x7E30E0", Offset = "0x7E30E0", VA = "0x7E30E0")]
			internal bool <ResolveKeyLocks>b__7_1(GridFlowAbstractGraphLink link)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugDraw;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int oneWayDoorPromotionWeight;

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xB45A98", Offset = "0xB45A98", VA = "0xB45A98", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xB46D80", Offset = "0xB46D80", VA = "0xB46D80")]
		private void AssignRoomTypes(GridFlowAbstractGraph graph, System.Random random)
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xB471F8", Offset = "0xB471F8", VA = "0xB471F8")]
		private GridFlowAbstractNodeRoomType GetNodeRoomType(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode node)
		{
			return default(GridFlowAbstractNodeRoomType);
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xB46B50", Offset = "0xB46B50", VA = "0xB46B50")]
		private void EmitDebugInfo(GridFlowAbstractGraph graph, Dictionary<GridFlowAbstractGraphNode, int> weights)
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xB466D8", Offset = "0xB466D8", VA = "0xB466D8")]
		private bool ResolveKeyLocks(GridFlowAbstractGraph graph, ItemInfo keyInfo, ItemInfo lockInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xB47784", Offset = "0xB47784", VA = "0xB47784")]
		public GridFlowExecNodeHandler_FinalizeGraph()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004F7")]
	public enum GridFlowExecNodeHandler_SpawnItemMethod
	{
		[Token(Token = "0x40015DF")]
		RandomRange,
		[Token(Token = "0x40015E0")]
		LinearDifficulty,
		[Token(Token = "0x40015E1")]
		CurveDifficulty
	}
	[Token(Token = "0x20004F8")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C624", Offset = "0x50C624")]
	public class GridFlowExecNodeHandler_SpawnItems : GridFlowExecNodeHandler
	{
		[Token(Token = "0x20004F9")]
		private class NodeInfo
		{
			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x7E327C", Offset = "0x7E327C", VA = "0x7E327C")]
			public NodeInfo(GridFlowAbstractGraphNode node, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C678", Offset = "0x50C678")]
		private sealed class <>c
		{
			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<NodeInfo, float> <>9__15_0;

			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x7E325C", Offset = "0x7E325C", VA = "0x7E325C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x7E3264", Offset = "0x7E3264", VA = "0x7E3264")]
			internal float <Execute>b__15_0(NodeInfo info)
			{
				return default(float);
			}
		}

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] paths;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string markerName;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowGraphItemCustomInfo customItemInfo;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int minCount;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int maxCount;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowExecNodeHandler_SpawnItemMethod spawnMethod;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve spawnDistributionCurve;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float spawnDistributionVariance;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float minSpawnDifficulty;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float spawnProbability;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool showDifficulty;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color difficultyInfoColor;

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xB4E838", Offset = "0xB4E838", VA = "0xB4E838", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xB4F474", Offset = "0xB4F474", VA = "0xB4F474")]
		private int GetSpawnCount(System.Random random, float weight)
		{
			return default(int);
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0xB4F598", Offset = "0xB4F598", VA = "0xB4F598")]
		private void EmitDebugInfo(NodeInfo[] nodes)
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0xB4F6C4", Offset = "0xB4F6C4", VA = "0xB4F6C4")]
		public GridFlowExecNodeHandler_SpawnItems()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public enum GridFlowExecNodeHandlerResultType
	{
		[Token(Token = "0x40015F5")]
		Success,
		[Token(Token = "0x40015F6")]
		FailRetry,
		[Token(Token = "0x40015F7")]
		FailHalt
	}
	[Token(Token = "0x20004FC")]
	public abstract class GridFlowExecNodeHandler : ScriptableObject
	{
		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Token(Token = "0x6001A80")]
		public abstract GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage);

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xB42430", Offset = "0xB42430", VA = "0xB42430")]
		protected GridFlowExecNodeHandler()
		{
		}
	}
	[Token(Token = "0x20004FD")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x50C688", Offset = "0x50C688")]
	public class GridFlowExecNodeInfoAttribute : Attribute
	{
		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512748", Offset = "0x512748")]
		private string <Title>k__BackingField;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512758", Offset = "0x512758")]
		private string <MenuPrefix>k__BackingField;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512768", Offset = "0x512768")]
		private float <Weight>k__BackingField;

		[Token(Token = "0x17000329")]
		public string Title
		{
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0xB4F8DC", Offset = "0xB4F8DC", VA = "0xB4F8DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192C0", Offset = "0x5192C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A83")]
			[Address(RVA = "0xB4F8E4", Offset = "0xB4F8E4", VA = "0xB4F8E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192D0", Offset = "0x5192D0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		public string MenuPrefix
		{
			[Token(Token = "0x6001A84")]
			[Address(RVA = "0xB4F8EC", Offset = "0xB4F8EC", VA = "0xB4F8EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192E0", Offset = "0x5192E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A85")]
			[Address(RVA = "0xB4F8F4", Offset = "0xB4F8F4", VA = "0xB4F8F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5192F0", Offset = "0x5192F0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032B")]
		public float Weight
		{
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0xB4F8FC", Offset = "0xB4F8FC", VA = "0xB4F8FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519300", Offset = "0x519300")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A87")]
			[Address(RVA = "0xB4F904", Offset = "0xB4F904", VA = "0xB4F904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519310", Offset = "0x519310")]
			private set
			{
			}
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xB4F90C", Offset = "0xB4F90C", VA = "0xB4F90C")]
		public GridFlowExecNodeInfoAttribute(string title)
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xB4F9D0", Offset = "0xB4F9D0", VA = "0xB4F9D0")]
		public GridFlowExecNodeInfoAttribute(string title, string menuPrefix)
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xB4F96C", Offset = "0xB4F96C", VA = "0xB4F96C")]
		public GridFlowExecNodeInfoAttribute(string title, string menuPrefix, float weight)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xB4F9D8", Offset = "0xB4F9D8", VA = "0xB4F9D8")]
		public static GridFlowExecNodeInfoAttribute GetHandlerAttribute(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x20004FE")]
	public class GridFlowExecNodeStates
	{
		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, GridFlowExecNodeState> stateByNodeId;

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xB4FB3C", Offset = "0xB4FB3C", VA = "0xB4FB3C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xB4FB90", Offset = "0xB4FB90", VA = "0xB4FB90")]
		public void Register(string nodeId, GridFlowExecNodeState state)
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xB41A94", Offset = "0xB41A94", VA = "0xB41A94")]
		public GridFlowExecNodeState Get(string nodeId)
		{
			return null;
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xB4FC10", Offset = "0xB4FC10", VA = "0xB4FC10")]
		public GridFlowExecNodeStates()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	public abstract class GridFlowExecNodeState
	{
		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512778", Offset = "0x512778")]
		private GridFlowAbstractGraph <AbstractGraph>k__BackingField;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512788", Offset = "0x512788")]
		private GridFlowTilemap <Tilemap>k__BackingField;

		[Token(Token = "0x1700032C")]
		public GridFlowAbstractGraph AbstractGraph
		{
			[Token(Token = "0x6001A90")]
			[Address(RVA = "0xB4FB14", Offset = "0xB4FB14", VA = "0xB4FB14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519320", Offset = "0x519320")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A91")]
			[Address(RVA = "0xB4FB1C", Offset = "0xB4FB1C", VA = "0xB4FB1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519330", Offset = "0x519330")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public GridFlowTilemap Tilemap
		{
			[Token(Token = "0x6001A92")]
			[Address(RVA = "0xB4FB24", Offset = "0xB4FB24", VA = "0xB4FB24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519340", Offset = "0x519340")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A93")]
			[Address(RVA = "0xB4FB2C", Offset = "0xB4FB2C", VA = "0xB4FB2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519350", Offset = "0x519350")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xB4FB34", Offset = "0xB4FB34", VA = "0xB4FB34")]
		protected GridFlowExecNodeState()
		{
		}
	}
	[Token(Token = "0x2000500")]
	public class GridFlowExecNodeState_AbstractGraph : GridFlowExecNodeState
	{
		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xB42730", Offset = "0xB42730", VA = "0xB42730")]
		public GridFlowExecNodeState_AbstractGraph(GridFlowAbstractGraph graph)
		{
		}
	}
	[Token(Token = "0x2000501")]
	public class GridFlowExecNodeState_Tilemap : GridFlowExecNodeState
	{
		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xB4532C", Offset = "0xB4532C", VA = "0xB4532C")]
		public GridFlowExecNodeState_Tilemap(GridFlowTilemap tilemap, GridFlowAbstractGraph abstractGraph)
		{
		}
	}
	[Token(Token = "0x2000502")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C69C", Offset = "0x50C69C")]
	public class GridFlowExecNodeHandler_Result : GridFlowExecNodeHandler
	{
		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xB4E788", Offset = "0xB4E788", VA = "0xB4E788", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xB4E834", Offset = "0xB4E834", VA = "0xB4E834")]
		public GridFlowExecNodeHandler_Result()
		{
		}
	}
	[Token(Token = "0x2000503")]
	public class GridFlowExecNodeUtils
	{
		[Token(Token = "0x2000504")]
		protected struct NodeWeightAssignInfo
		{
			[Token(Token = "0x40015FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int weight;

			[Token(Token = "0x6001AA1")]
			[Address(RVA = "0x7E32C4", Offset = "0x7E32C4", VA = "0x7E32C4")]
			public NodeWeightAssignInfo(GridFlowAbstractGraphNode node, int weight)
			{
			}
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xB451FC", Offset = "0xB451FC", VA = "0xB451FC")]
		public static GridFlowExecNodeState[] GetIncomingStates(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xB42980", Offset = "0xB42980", VA = "0xB42980")]
		public static GridFlowAbstractGraph CloneIncomingAbstractGraph(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xB478B4", Offset = "0xB478B4", VA = "0xB478B4")]
		public static GridFlowTilemap CloneIncomingTilemap(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xB4FC94", Offset = "0xB4FC94", VA = "0xB4FC94")]
		public static GridFlowAbstractGraphNode FindNodeWithItemType(GridFlowAbstractGraph graph, GridFlowGraphItemType itemType)
		{
			return null;
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xB4334C", Offset = "0xB4334C", VA = "0xB4334C")]
		public static GridFlowAbstractGraphNode[] FilterNodes(GridFlowAbstractGraphNode[] nodes, int minWeight, int maxWeight, Dictionary<GridFlowAbstractGraphNode, int> weights)
		{
			return null;
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xB4FFA4", Offset = "0xB4FFA4", VA = "0xB4FFA4")]
		public static bool ContainsItem(GridFlowItem[] items, GridFlowGraphItemType itemType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xB42F5C", Offset = "0xB42F5C", VA = "0xB42F5C")]
		public static Dictionary<GridFlowAbstractGraphNode, int> CalculateWeights(GridFlowAbstractGraph graph, int lockedWeight)
		{
			return null;
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xB50010", Offset = "0xB50010", VA = "0xB50010")]
		public GridFlowExecNodeUtils()
		{
		}
	}
	[Token(Token = "0x2000505")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C6F0", Offset = "0x50C6F0")]
	public class GridFlowExecNodeHandler_CreateTilemapElevations : GridFlowExecNodeHandler
	{
		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int noiseOctaves;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float noiseFrequency;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float noiseValuePower;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int numSteps;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minHeight;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxHeight;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float seaLevel;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color landColor;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color seaColor;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float minColorMultiplier;

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xB44DD0", Offset = "0xB44DD0", VA = "0xB44DD0", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xB4537C", Offset = "0xB4537C", VA = "0xB4537C")]
		public GridFlowExecNodeHandler_CreateTilemapElevations()
		{
		}
	}
	[Token(Token = "0x2000506")]
	public enum GridFlowExecNodeHandler_CreateTilemapOverlayGenMethod
	{
		[Token(Token = "0x400160D")]
		Noise,
		[Token(Token = "0x400160E")]
		Script
	}
	[Serializable]
	[Token(Token = "0x2000507")]
	public class GridFlowExecNodeTilemapOverlayNoiseSettings
	{
		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int noiseOctaves;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float noiseFrequency;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float noiseValuePower;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float noiseMinValue;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float noiseMaxValue;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float noiseThreshold;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minDistFromMainPath;

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xB45A6C", Offset = "0xB45A6C", VA = "0xB45A6C")]
		public GridFlowExecNodeTilemapOverlayNoiseSettings()
		{
		}
	}
	[Token(Token = "0x2000508")]
	public interface IGridFlowTilemapOverlayGenerator
	{
		[Token(Token = "0x6001AA5")]
		void Init(System.Random random);

		[Token(Token = "0x6001AA6")]
		bool Generate(GridFlowTilemapCell cell, GridFlowTilemapCell incomingCell, System.Random random, ref float overlayValue);
	}
	[Token(Token = "0x2000509")]
	public class NoiseGridFlowTilemapOverlayGenerator : IGridFlowTilemapOverlayGenerator
	{
		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GradientNoiseTable noiseTable;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings;

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xE94C74", Offset = "0xE94C74", VA = "0xE94C74")]
		public NoiseGridFlowTilemapOverlayGenerator(GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xE94CA8", Offset = "0xE94CA8", VA = "0xE94CA8", Slot = "4")]
		public void Init(System.Random random)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xE94D6C", Offset = "0xE94D6C", VA = "0xE94D6C", Slot = "5")]
		public bool Generate(GridFlowTilemapCell cell, GridFlowTilemapCell incomingCell, System.Random random, ref float overlayValue)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200050A")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C744", Offset = "0x50C744")]
	public class GridFlowExecNodeHandler_CreateTilemapOverlay : GridFlowExecNodeHandler
	{
		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color color;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool overlayBlocksTile;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GridFlowExecNodeHandler_CreateTilemapOverlayGenMethod generationMethod;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GridFlowTilemapCellOverlayMergeConfig mergeConfig;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string generatorScriptClass;

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xB45474", Offset = "0xB45474", VA = "0xB45474", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xB45838", Offset = "0xB45838", VA = "0xB45838")]
		private IGridFlowTilemapOverlayGenerator createGeneratorInstance()
		{
			return null;
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xB45968", Offset = "0xB45968", VA = "0xB45968")]
		public GridFlowExecNodeHandler_CreateTilemapOverlay()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C798", Offset = "0x50C798")]
	public class GridFlowExecNodeHandler_FinalizeTilemap : GridFlowExecNodeHandler
	{
		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugUnwalkableCells;

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xB47788", Offset = "0xB47788", VA = "0xB47788", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xB48860", Offset = "0xB48860", VA = "0xB48860")]
		private List<GridFlowTilemapCell> FilterWalkablePath(List<GridFlowTilemapCell> cells)
		{
			return null;
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xB47908", Offset = "0xB47908", VA = "0xB47908")]
		private GridFlowExecNodeHandlerResultType AssignItems(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xB490E4", Offset = "0xB490E4", VA = "0xB490E4")]
		public GridFlowExecNodeHandler_FinalizeTilemap()
		{
		}
	}
	[Token(Token = "0x200050C")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C7EC", Offset = "0x50C7EC")]
	public class GridFlowExecNodeHandler_InitializeTilemap : GridFlowExecNodeHandler
	{
		[Serializable]
		[Token(Token = "0x200050D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C840", Offset = "0x50C840")]
		private sealed class <>c
		{
			[Token(Token = "0x400162C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400162D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GridFlowItem, bool> <>9__29_0;

			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0x7E31D0", Offset = "0x7E31D0", VA = "0x7E31D0")]
			public <>c()
			{
			}

			[Token(Token = "0x6001AC9")]
			[Address(RVA = "0x7E31D8", Offset = "0x7E31D8", VA = "0x7E31D8")]
			internal bool <BuildDoors>b__29_0(GridFlowItem i)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int tilemapSizePerNode;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float perturbAmount;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float corridorLaneWidth;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int layoutPadding;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int caveAutomataNeighbors;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int caveAutomataIterations;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float caveThickness;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float roomColorSaturation;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float roomColorBrightness;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DoorInfo[] doors;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int nodeWidth;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int nodeHeight;

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xB490E8", Offset = "0xB490E8", VA = "0xB490E8", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xB49470", Offset = "0xB49470", VA = "0xB49470")]
		private GridFlowTilemap BuildTilemap(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random)
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xB4B060", Offset = "0xB4B060", VA = "0xB4B060")]
		private GridFlowTilemap CropTilemap(GridFlowTilemap oldTilemap)
		{
			return null;
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xB49880", Offset = "0xB49880", VA = "0xB49880")]
		private void PerturbRoomSizes(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, GridFlowTilemapNodeInfo[,] tileNodes, System.Random random)
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xB49CE4", Offset = "0xB49CE4", VA = "0xB49CE4")]
		private void FixCorridorSizes(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xB49EF4", Offset = "0xB49EF4", VA = "0xB49EF4")]
		private void RasterizeRoomCorridors(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xB4A240", Offset = "0xB4A240", VA = "0xB4A240")]
		private void RasterizeBaseCaveBlocks(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xB4A978", Offset = "0xB4A978", VA = "0xB4A978")]
		private void BuildCaves(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random)
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xB4C3BC", Offset = "0xB4C3BC", VA = "0xB4C3BC")]
		private CaveCellBuildTile[,] GenerateCaveBuildMap(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
			return null;
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xB4C808", Offset = "0xB4C808", VA = "0xB4C808")]
		private void BuildCaveStep_BuildRocks(CaveCellBuildTile[,] caveMap, GridFlowTilemap tilemap, System.Random random)
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xB4C978", Offset = "0xB4C978", VA = "0xB4C978")]
		private void BuildCaveStep_SimulateGrowth(CaveCellBuildTile[,] caveMap, GridFlowTilemap tilemap, System.Random random)
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xB4CCE4", Offset = "0xB4CCE4", VA = "0xB4CCE4")]
		private void BuildCaveStep_Cleanup(CaveCellBuildTile[,] caveMap, GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xB4C0A8", Offset = "0xB4C0A8", VA = "0xB4C0A8")]
		private void DebugPostProcess(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xB4C180", Offset = "0xB4C180", VA = "0xB4C180")]
		private bool ShouldBlockCaveBoundary(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode caveNode, int dx, int dy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xB4A570", Offset = "0xB4A570", VA = "0xB4A570")]
		private void GenerateMainPath(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xB4BB10", Offset = "0xB4BB10", VA = "0xB4BB10")]
		private void CalculateDistanceFromMainPathOnEmptyArea(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xB4B548", Offset = "0xB4B548", VA = "0xB4B548")]
		private void CalculateDistanceFromMainPath(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractNodeRoomType[] allowedRoomTypes)
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xB4AA5C", Offset = "0xB4AA5C", VA = "0xB4AA5C")]
		private void BuildDoors(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xB4D254", Offset = "0xB4D254", VA = "0xB4D254")]
		private IntVector2 NodeCoordToTileCoord(IntVector2 nodeCoord)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xB4926C", Offset = "0xB4926C", VA = "0xB4926C")]
		private bool GetGraphSize(GridFlowAbstractGraph graph, out IntVector2 size)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xB4D30C", Offset = "0xB4D30C", VA = "0xB4D30C")]
		private GridFlowTilemapCellType GetCellType(GridFlowTilemap tilemap, int x, int y)
		{
			return default(GridFlowTilemapCellType);
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xB4D36C", Offset = "0xB4D36C", VA = "0xB4D36C")]
		public GridFlowExecNodeHandler_InitializeTilemap()
		{
		}
	}
	[Token(Token = "0x200050E")]
	internal struct DoorInfo
	{
		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x512798", Offset = "0x512798")]
		private GridFlowAbstractGraphLink <Link>k__BackingField;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5127A8", Offset = "0x5127A8")]
		private IntVector2 <CellCoord>k__BackingField;

		[Token(Token = "0x1700032E")]
		public GridFlowAbstractGraphLink Link
		{
			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0x7A1B2C", Offset = "0x7A1B2C", VA = "0x7A1B2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519360", Offset = "0x519360")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6001ACB")]
			[Address(RVA = "0x7A1B34", Offset = "0x7A1B34", VA = "0x7A1B34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519398", Offset = "0x519398")]
			set
			{
			}
		}

		[Token(Token = "0x1700032F")]
		public IntVector2 CellCoord
		{
			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0x7A1B3C", Offset = "0x7A1B3C", VA = "0x7A1B3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5193A8", Offset = "0x5193A8")]
			readonly get
			{
				return default(IntVector2);
			}
			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0x7A1B44", Offset = "0x7A1B44", VA = "0x7A1B44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5193E0", Offset = "0x5193E0")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200050F")]
	internal struct NodeTilemapBounds
	{
		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x0;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y0;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int x1;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int y1;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int mx;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int my;

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xE94A48", Offset = "0xE94A48", VA = "0xE94A48")]
		public static NodeTilemapBounds Build(GridFlowTilemapNodeInfo tileNode, int tilemapWidth, int tilemapHeight)
		{
			return default(NodeTilemapBounds);
		}
	}
	[Token(Token = "0x2000510")]
	internal class CaveCellBuildTile
	{
		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector2 tileCoord;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool valid;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool rockTile;

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x8E19C4", Offset = "0x8E19C4", VA = "0x8E19C4")]
		public CaveCellBuildTile Clone()
		{
			return null;
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x8E1A40", Offset = "0x8E1A40", VA = "0x8E1A40")]
		public CaveCellBuildTile()
		{
		}
	}
	[Token(Token = "0x2000511")]
	public class GridFlowTilemapNodeInfo
	{
		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x0;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float x1;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float y0;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float y1;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float midX;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float midY;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowAbstractGraphNode node;

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xD41BF0", Offset = "0xD41BF0", VA = "0xD41BF0")]
		public GridFlowTilemapNodeInfo(float x0, float y0, float x1, float y1)
		{
		}
	}
	[Token(Token = "0x2000512")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C850", Offset = "0x50C850")]
	public class GridFlowExecNodeHandler_MergeTilemaps : GridFlowExecNodeHandler
	{
		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xB4D400", Offset = "0xB4D400", VA = "0xB4D400", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xB4DDD8", Offset = "0xB4DDD8", VA = "0xB4DDD8")]
		public GridFlowExecNodeHandler_MergeTilemaps()
		{
		}
	}
	[Token(Token = "0x2000513")]
	[AttributeAttribute(Name = "GridFlowExecNodeInfoAttribute", RVA = "0x50C8A4", Offset = "0x50C8A4")]
	public class GridFlowExecNodeHandler_OptimizeTilemap : GridFlowExecNodeHandler
	{
		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int discardDistanceFromLayout;

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xB4DDDC", Offset = "0xB4DDDC", VA = "0xB4DDDC", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xB4DEE8", Offset = "0xB4DEE8", VA = "0xB4DEE8")]
		private void DiscardDistantTiles(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xB4E77C", Offset = "0xB4E77C", VA = "0xB4E77C")]
		public GridFlowExecNodeHandler_OptimizeTilemap()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Abstract
{
	[Serializable]
	[Token(Token = "0x2000514")]
	public class GridFlowAbstractGraph
	{
		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<GridFlowAbstractGraphNode> Nodes;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<GridFlowAbstractGraphLink> Links;

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xB3DC04", Offset = "0xB3DC04", VA = "0xB3DC04")]
		public void RemoveNode(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xB3DDF0", Offset = "0xB3DDF0", VA = "0xB3DDF0")]
		public void AddNode(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xB3DE54", Offset = "0xB3DE54", VA = "0xB3DE54")]
		public void RemoveLink(GridFlowAbstractGraphLink link)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xB3DEB8", Offset = "0xB3DEB8", VA = "0xB3DEB8")]
		public GridFlowAbstractGraphNode GetNode(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xB3E05C", Offset = "0xB3E05C", VA = "0xB3E05C")]
		public GridFlowAbstractNodeState GetNodeState(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xB3E078", Offset = "0xB3E078", VA = "0xB3E078")]
		public GridFlowAbstractGraphLink GetLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
			return null;
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xB3E080", Offset = "0xB3E080", VA = "0xB3E080")]
		public GridFlowAbstractGraphLink GetLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode, bool ignoreDirection)
		{
			return null;
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xB3E318", Offset = "0xB3E318", VA = "0xB3E318")]
		public GridFlowAbstractGraphLink MakeLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
			return null;
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xB3E494", Offset = "0xB3E494", VA = "0xB3E494")]
		public void BreakLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xB3E524", Offset = "0xB3E524", VA = "0xB3E524")]
		public void BreakAllOutgoingLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xB3E664", Offset = "0xB3E664", VA = "0xB3E664")]
		public void BreakAllIncomingLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xB3DC74", Offset = "0xB3DC74", VA = "0xB3DC74")]
		public void BreakAllLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xB3E7A4", Offset = "0xB3E7A4", VA = "0xB3E7A4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xB3E854", Offset = "0xB3E854", VA = "0xB3E854")]
		public GridFlowAbstractGraphNode[] GetOutgoingNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xB3EA90", Offset = "0xB3EA90", VA = "0xB3EA90")]
		public GridFlowAbstractGraphNode[] GetIncomingNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xB3ECCC", Offset = "0xB3ECCC", VA = "0xB3ECCC")]
		public GridFlowAbstractGraphLink[] GetOutgoingLinks(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xB3EEFC", Offset = "0xB3EEFC", VA = "0xB3EEFC")]
		public GridFlowAbstractGraphLink[] GetIncomingLinks(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xB3F12C", Offset = "0xB3F12C", VA = "0xB3F12C")]
		public GridFlowAbstractGraphNode[] GetConnectedNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xB3F3E8", Offset = "0xB3F3E8", VA = "0xB3F3E8")]
		public GridFlowAbstractGraph Clone()
		{
			return null;
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0xB3F8CC", Offset = "0xB3F8CC", VA = "0xB3F8CC")]
		public GridFlowItem[] GetAllItems()
		{
			return null;
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xB3F6DC", Offset = "0xB3F6DC", VA = "0xB3F6DC")]
		public GridFlowAbstractGraph()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000515")]
	public class GridFlowAbstractGraphLinkState
	{
		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Directional;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool OneWay;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GridFlowItem> Items;

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xB3FC60", Offset = "0xB3FC60", VA = "0xB3FC60")]
		public GridFlowAbstractGraphLinkState Clone()
		{
			return null;
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xB3FEDC", Offset = "0xB3FEDC", VA = "0xB3FEDC")]
		public void AddItem(GridFlowItem item)
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xB3FBDC", Offset = "0xB3FBDC", VA = "0xB3FBDC")]
		public GridFlowAbstractGraphLinkState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000516")]
	public class GridFlowAbstractGraphLink
	{
		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid LinkId;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid Source;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Guid Destination;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowAbstractGraphLinkState state;

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xB3E3EC", Offset = "0xB3E3EC", VA = "0xB3E3EC")]
		public GridFlowAbstractGraphLink()
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xB3F838", Offset = "0xB3F838", VA = "0xB3F838")]
		public GridFlowAbstractGraphLink Clone()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000517")]
	public enum GridFlowAbstractNodeRoomType
	{
		[Token(Token = "0x400164B")]
		Unknown,
		[Token(Token = "0x400164C")]
		Room,
		[Token(Token = "0x400164D")]
		Corridor,
		[Token(Token = "0x400164E")]
		Cave
	}
	[Serializable]
	[Token(Token = "0x2000518")]
	public class GridFlowAbstractNodeState
	{
		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Active;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color Color;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntVector2 GridCoord;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HashSet<string> Tags;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GridFlowItem> Items;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowAbstractNodeRoomType RoomType;

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xB40110", Offset = "0xB40110", VA = "0xB40110")]
		public GridFlowAbstractNodeState Clone()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xB40410", Offset = "0xB40410", VA = "0xB40410")]
		public void AddItem(GridFlowItem item)
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xB403AC", Offset = "0xB403AC", VA = "0xB403AC")]
		public void AddTag(string tag)
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0xB40474", Offset = "0xB40474", VA = "0xB40474")]
		public void AddTags(string[] tags)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xB3FFF4", Offset = "0xB3FFF4", VA = "0xB3FFF4")]
		public GridFlowAbstractNodeState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000519")]
	public class GridFlowAbstractGraphNode
	{
		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid NodeId;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 Position;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowAbstractNodeState state;

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xB3FF40", Offset = "0xB3FF40", VA = "0xB3FF40")]
		public GridFlowAbstractGraphNode()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xB3F7AC", Offset = "0xB3F7AC", VA = "0xB3F7AC")]
		public GridFlowAbstractGraphNode Clone()
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Builders.Grid
{
	[Token(Token = "0x200051A")]
	public class GridCellInfo
	{
		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CellType CellType;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ContainsDoor;

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x79170C", Offset = "0x79170C", VA = "0x79170C")]
		public GridCellInfo()
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x791740", Offset = "0x791740", VA = "0x791740")]
		public GridCellInfo(int pCellId, CellType pCellType)
		{
		}
	}
	[Token(Token = "0x200051B")]
	public class GridBuilderDoorMetadata
	{
		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellA;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int CellB;

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x790B94", Offset = "0x790B94", VA = "0x790B94")]
		public GridBuilderDoorMetadata(int cellIdA, int cellIdB)
		{
		}
	}
	[Token(Token = "0x200051C")]
	public class CellHeightNode
	{
		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Height;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool MarkForIncrease;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool MarkForDecrease;

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x8E28E4", Offset = "0x8E28E4", VA = "0x8E28E4")]
		public CellHeightNode()
		{
		}
	}
	[Token(Token = "0x200051D")]
	public class StairAdjacencyQueueNode
	{
		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int cellId;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x7FB788", Offset = "0x7FB788", VA = "0x7FB788")]
		public StairAdjacencyQueueNode(int pCellId, int pDepth)
		{
		}
	}
	[Token(Token = "0x200051E")]
	public class CellHeightFrameInfo
	{
		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int CurrentHeight;

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x8E28AC", Offset = "0x8E28AC", VA = "0x8E28AC")]
		public CellHeightFrameInfo(int pCellId, int pCurrentHeight)
		{
		}
	}
	[Token(Token = "0x200051F")]
	public struct StairEdgeInfo
	{
		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int CellIdA;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int CellIdB;

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x7FB7C0", Offset = "0x7FB7C0", VA = "0x7FB7C0")]
		public StairEdgeInfo(int pCellIdA, int pCellIdB)
		{
		}
	}
	[Token(Token = "0x2000520")]
	[ExecuteInEditMode]
	public class GridDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x2000521")]
		private class Edge : IComparable<Edge>
		{
			[Token(Token = "0x400166A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int cellA;

			[Token(Token = "0x400166B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int cellB;

			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6001B51")]
			[Address(RVA = "0x7E2E84", Offset = "0x7E2E84", VA = "0x7E2E84")]
			public Edge(int cellA, int cellB, float weight)
			{
			}

			[Token(Token = "0x6001B52")]
			[Address(RVA = "0x7E2ECC", Offset = "0x7E2ECC", VA = "0x7E2ECC", Slot = "4")]
			public int CompareTo(Edge other)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000522")]
		private class ConnectionPointSorter : IComparer<IntVector>
		{
			[Token(Token = "0x400166D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private UnityEngine.Vector3 center;

			[Token(Token = "0x6001B53")]
			[Address(RVA = "0x7E2D84", Offset = "0x7E2D84", VA = "0x7E2D84")]
			public ConnectionPointSorter(UnityEngine.Vector3 center)
			{
			}

			[Token(Token = "0x6001B54")]
			[Address(RVA = "0x7E2DCC", Offset = "0x7E2DCC", VA = "0x7E2DCC", Slot = "4")]
			public int Compare(IntVector x, IntVector y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000523")]
		private class StairConnectionWeight
		{
			[Token(Token = "0x400166E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int position;

			[Token(Token = "0x400166F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int weight;

			[Token(Token = "0x6001B55")]
			[Address(RVA = "0x7E2F00", Offset = "0x7E2F00", VA = "0x7E2F00")]
			public StairConnectionWeight(int position, int weight)
			{
			}
		}

		[Token(Token = "0x2000524")]
		private class StairConnectionWeightComparer : IComparer<StairConnectionWeight>
		{
			[Token(Token = "0x6001B56")]
			[Address(RVA = "0x7E2F38", Offset = "0x7E2F38", VA = "0x7E2F38", Slot = "4")]
			public int Compare(StairConnectionWeight x, StairConnectionWeight y)
			{
				return default(int);
			}

			[Token(Token = "0x6001B57")]
			[Address(RVA = "0x7E2F78", Offset = "0x7E2F78", VA = "0x7E2F78")]
			public StairConnectionWeightComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000525")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50C908", Offset = "0x50C908")]
		private sealed class <>c
		{
			[Token(Token = "0x4001670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<UnityEngine.Vector2, float> <>9__33_0;

			[Token(Token = "0x6001B59")]
			[Address(RVA = "0x7E2D78", Offset = "0x7E2D78", VA = "0x7E2D78")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B5A")]
			[Address(RVA = "0x7E2D80", Offset = "0x7E2D80", VA = "0x7E2D80")]
			internal float <TriangulateRooms>b__33_0(UnityEngine.Vector2 v)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _CellIdCounter;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GridDungeonModel gridModel;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GridDungeonConfig gridConfig;

		[Token(Token = "0x17000330")]
		private Dictionary<int, List<StairInfo>> CellStairs
		{
			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0x7920BC", Offset = "0x7920BC", VA = "0x7920BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000331")]
		private Dictionary<int, Dictionary<int, GridCellInfo>> GridCellInfoLookup
		{
			[Token(Token = "0x6001B00")]
			[Address(RVA = "0x7920D8", Offset = "0x7920D8", VA = "0x7920D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000332")]
		private UnityEngine.Vector3 GridToMeshScale
		{
			[Token(Token = "0x6001B02")]
			[Address(RVA = "0x792110", Offset = "0x792110", VA = "0x792110")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x7920F4", Offset = "0x7920F4", VA = "0x7920F4")]
		private GridCellInfo GetGridCellLookup(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x7921A4", Offset = "0x7921A4", VA = "0x7921A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x792364", Offset = "0x792364", VA = "0x792364", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x796B20", Offset = "0x796B20", VA = "0x796B20")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x796C08", Offset = "0x796C08", VA = "0x796C08", Slot = "5")]
		protected override LevelMarkerList CreateMarkerListObject(DungeonConfig config)
		{
			return null;
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x796CE0", Offset = "0x796CE0", VA = "0x796CE0")]
		private bool CanFitDistributionCell(HashSet<IntVector> Occupancy, ref Rectangle bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x796E30", Offset = "0x796E30", VA = "0x796E30")]
		private void SetDistributionCellOccupied(HashSet<IntVector> Occupancy, ref Rectangle bounds)
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x792590", Offset = "0x792590", VA = "0x792590")]
		public void BuildCellsWithDistribution()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x792884", Offset = "0x792884", VA = "0x792884")]
		public void BuildCellsWithSeparation()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x796F70", Offset = "0x796F70", VA = "0x796F70")]
		private IntVector GenerateCellSize()
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x7970E4", Offset = "0x7970E4", VA = "0x7970E4")]
		private Cell BuildCell()
		{
			return null;
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x797030", Offset = "0x797030", VA = "0x797030")]
		private Cell BuildCell(ref Rectangle bounds)
		{
			return null;
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x7978C0", Offset = "0x7978C0", VA = "0x7978C0")]
		private int GetNextCellId()
		{
			return default(int);
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x7929B0", Offset = "0x7929B0", VA = "0x7929B0")]
		private void ApplyBaseOffset()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x7941DC", Offset = "0x7941DC", VA = "0x7941DC")]
		private void ApplyNegationVolumes()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x7978D4", Offset = "0x7978D4", VA = "0x7978D4")]
		private void ApplyNegationVolume(NegationVolume volume)
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x797CDC", Offset = "0x797CDC", VA = "0x797CDC")]
		private void GetCellBounds(Cell cell, ref Bounds bounds)
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x792C34", Offset = "0x792C34", VA = "0x792C34")]
		private void AddUserDefinedPlatforms()
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x797DD0", Offset = "0x797DD0", VA = "0x797DD0")]
		private void AddPlatformVolume(PlatformVolume platform)
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x797764", Offset = "0x797764", VA = "0x797764")]
		private int GetRandomRoomSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x7977CC", Offset = "0x7977CC", VA = "0x7977CC")]
		private IntVector GetRandomPointInCircle(float radius)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x798040", Offset = "0x798040", VA = "0x798040")]
		private static void Shuffle(GridDungeonModel gridModel)
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x7981FC", Offset = "0x7981FC", VA = "0x7981FC")]
		private static int CompareFromCenter(Cell cellA, Cell cellB)
		{
			return default(int);
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x797144", Offset = "0x797144", VA = "0x797144")]
		public static bool Seperate(GridDungeonModel gridModel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x792FB4", Offset = "0x792FB4", VA = "0x792FB4")]
		public void TriangulateRooms()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x7982A4", Offset = "0x7982A4", VA = "0x7982A4")]
		private static void ConnectCells(Cell c1, Cell c2)
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x798380", Offset = "0x798380", VA = "0x798380")]
		private static List<Cell> GetRooms(List<Cell> cells)
		{
			return null;
		}

		[Token(Token = "0x6001B1D")]
		private void AddUnique<T>(List<T> list, T value)
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x7934E4", Offset = "0x7934E4", VA = "0x7934E4")]
		private void BuildMinimumSpanningTree()
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x7986DC", Offset = "0x7986DC", VA = "0x7986DC")]
		private bool ContainsLoop(List<Cell> rooms)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x798874", Offset = "0x798874", VA = "0x798874")]
		private bool CheckLoop(Cell currentNode, Cell comingFrom, HashSet<Cell> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x7986B0", Offset = "0x7986B0", VA = "0x7986B0")]
		private static float GetDistance(IntVector a, IntVector b)
		{
			return default(float);
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x798510", Offset = "0x798510", VA = "0x798510")]
		private List<Cell> GetCellsOfType(CellType cellType)
		{
			return null;
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x794050", Offset = "0x794050", VA = "0x794050")]
		private void ConnectCorridors()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x798A6C", Offset = "0x798A6C", VA = "0x798A6C")]
		private void ConnectCooridorRecursive(int incomingRoomId, int currentRoomId, HashSet<int> visited)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x799130", Offset = "0x799130", VA = "0x799130")]
		private bool AreCellsAdjacent(int cellAId, int cellBId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x799230", Offset = "0x799230", VA = "0x799230")]
		private void GetCorners(Rectangle bounds, out HashSet<IntVector> corners)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x799470", Offset = "0x799470", VA = "0x799470")]
		private void ConnectAdjacentCells(int roomA, int roomB)
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x7997B0", Offset = "0x7997B0", VA = "0x7997B0")]
		private void Swap(ref int A, ref int B)
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x7997C4", Offset = "0x7997C4", VA = "0x7997C4")]
		private void GetManhattanPathBetween(IntVector start, IntVector end, ref List<IntVector> path)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x799994", Offset = "0x799994", VA = "0x799994")]
		private List<IntVector> GetManhattanPath(IntVector start, IntVector mid, IntVector end)
		{
			return null;
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x799BC8", Offset = "0x799BC8", VA = "0x799BC8")]
		private void RemovePointsInsideBounds(Rectangle bounds, List<IntVector> points)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x799E80", Offset = "0x799E80", VA = "0x799E80")]
		private bool ContainsPointInsideBounds(Rectangle bounds, List<IntVector> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x799FDC", Offset = "0x799FDC", VA = "0x799FDC")]
		private bool ContainsPointsInsideRoomCells(Cell[] roomCells, List<IntVector> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x79A080", Offset = "0x79A080", VA = "0x79A080")]
		private List<IntVector> FindConnectionPath(Cell roomA, Cell roomB)
		{
			return null;
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x798CA4", Offset = "0x798CA4", VA = "0x798CA4")]
		private void ConnectRooms(int roomAId, int roomBId)
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x79AABC", Offset = "0x79AABC", VA = "0x79AABC")]
		private void ConnectIfRoomCorridor(int cellAX, int cellAZ, int cellBX, int cellBZ)
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x79AAB4", Offset = "0x79AAB4", VA = "0x79AAB4")]
		private int RegisterCorridorCell(int cellX, int cellZ, int roomA, int roomB)
		{
			return default(int);
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x79A6EC", Offset = "0x79A6EC", VA = "0x79A6EC")]
		private int RegisterCorridorCell(int cellX, int cellZ, int roomA, int roomB, bool canRegisterDoors)
		{
			return default(int);
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x79828C", Offset = "0x79828C", VA = "0x79828C")]
		private static int GetForceDirectionMultiplier(float a, float b, float a1, float b1)
		{
			return default(int);
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x794730", Offset = "0x794730", VA = "0x794730")]
		private void GenerateDungeonHeights()
		{
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x79ABD8", Offset = "0x79ABD8", VA = "0x79ABD8")]
		private bool FixDungeonCellHeights(Dictionary<int, CellHeightNode> CellHeightNodes)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x798C9C", Offset = "0x798C9C", VA = "0x798C9C")]
		private int HASH(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x7968B0", Offset = "0x7968B0", VA = "0x7968B0")]
		private void RemoveAdjacentDoors()
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x79B2D4", Offset = "0x79B2D4", VA = "0x79B2D4")]
		private bool ContainsAdjacencyPath(int cellIdA, int cellIdB, int maxDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x79B9A8", Offset = "0x79B9A8", VA = "0x79B9A8")]
		private void AddCorridorPadding(int x, int y, int z)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x794E84", Offset = "0x794E84", VA = "0x794E84")]
		private void ConnectStairs(int WeightThreshold)
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x79BC68", Offset = "0x79BC68", VA = "0x79BC68", Slot = "12")]
		public override void OnVolumePositionModified(Volume volume, out IntVector newPositionOnGrid, out IntVector newSizeOnGrid)
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x79BCB0", Offset = "0x79BCB0", VA = "0x79BCB0")]
		private void CheckAndMarkAdjacent(Cell cell, int otherCellX, int otherCellZ)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x794358", Offset = "0x794358", VA = "0x794358")]
		public void GenerateAdjacencyLookup()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x79BDAC", Offset = "0x79BDAC", VA = "0x79BDAC", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x79F378", Offset = "0x79F378", VA = "0x79F378")]
		private int GetElevation(Cell baseCell, int x, int z, out int OutYOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x79F44C", Offset = "0x79F44C", VA = "0x79F44C")]
		private void OffsetTransformY(float Y, ref Matrix4x4 OutTransform)
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x79B7DC", Offset = "0x79B7DC", VA = "0x79B7DC")]
		private bool GetStair(int ownerCell, int connectedToCell, ref StairInfo outStair)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x79BABC", Offset = "0x79BABC", VA = "0x79BABC")]
		private bool ContainsStair(int ownerCellId, int connectedToCellId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x79F48C", Offset = "0x79F48C", VA = "0x79F48C")]
		private bool ContainsStair(Cell baseCell, int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x79F638", Offset = "0x79F638", VA = "0x79F638")]
		public bool V3Equal(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x79F66C", Offset = "0x79F66C", VA = "0x79F66C")]
		private bool CanDrawFence(Cell baseCell, int x, int z, out bool isElevatedFence, out bool drawPillar, out int elevationHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x79F76C", Offset = "0x79F76C", VA = "0x79F76C")]
		private bool ShouldMakeDoor(int x1, int z1, int x2, int z2, out GridCellInfo cellA, out GridCellInfo cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x79BF80", Offset = "0x79BF80", VA = "0x79BF80")]
		private void BuildMesh_Room(Cell cell)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x79D35C", Offset = "0x79D35C", VA = "0x79D35C")]
		private void BuildMesh_RoomDecoration(Cell cell)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x79E440", Offset = "0x79E440", VA = "0x79E440")]
		private void BuildMesh_Corridor_BlockWalls(Cell cell)
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x79D360", Offset = "0x79D360", VA = "0x79D360")]
		private void BuildMesh_Corridor(Cell cell)
		{
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x79FAE4", Offset = "0x79FAE4", VA = "0x79FAE4")]
		private int GetStairHeight(StairInfo stair)
		{
			return default(int);
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x79EB2C", Offset = "0x79EB2C", VA = "0x79EB2C")]
		private void RemoveOverlappingMarkers()
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x79E84C", Offset = "0x79E84C", VA = "0x79E84C")]
		private void BuildMesh_Stairs(Cell cell)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x79F848", Offset = "0x79F848", VA = "0x79F848")]
		private void BuildMesh_Floor(Cell cell)
		{
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x79FB64", Offset = "0x79FB64", VA = "0x79FB64", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x79FED8", Offset = "0x79FED8", VA = "0x79FED8")]
		public GridDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000526")]
	public enum GridDungeonWallType
	{
		[Token(Token = "0x4001673")]
		WallsAsEdges,
		[Token(Token = "0x4001674")]
		WallsAsTileBlocks
	}
	[Token(Token = "0x2000527")]
	public class GridDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5127D8", Offset = "0x5127D8")]
		public UnityEngine.Vector3 GridCellSize;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512810", Offset = "0x512810")]
		public int NumCells;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512848", Offset = "0x512848")]
		public int MinCellSize;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512880", Offset = "0x512880")]
		public int MaxCellSize;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5128B8", Offset = "0x5128B8")]
		public int RoomAreaThreshold;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5128F0", Offset = "0x5128F0")]
		public float RoomAspectDelta;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512928", Offset = "0x512928")]
		public int CorridorWidth;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512960", Offset = "0x512960")]
		public float HeightVariationProbability;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512998", Offset = "0x512998")]
		public int MaxAllowedStairHeight;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5129D0", Offset = "0x5129D0")]
		public float SpanningTreeLoopProbability;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512A08", Offset = "0x512A08")]
		public float StairConnectionTollerance;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512A40", Offset = "0x512A40")]
		public float DoorProximitySteps;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512A78", Offset = "0x512A78")]
		public float NormalMean;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512AB0", Offset = "0x512AB0")]
		public float NormalStd;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512AE8", Offset = "0x512AE8")]
		public float InitialRoomRadius;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x512B20", Offset = "0x512B20")]
		public GridDungeonWallType WallLayoutType;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int FloorHeight;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool UseFastCellDistribution;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int CellDistributionWidth;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int CellDistributionLength;

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xB3B6C4", Offset = "0xB3B6C4", VA = "0xB3B6C4")]
		public GridDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000528")]
	public enum CellType
	{
		[Token(Token = "0x400168A")]
		Room,
		[Token(Token = "0x400168B")]
		Corridor,
		[Token(Token = "0x400168C")]
		CorridorPadding,
		[Token(Token = "0x400168D")]
		Unknown
	}
	[Serializable]
	[Token(Token = "0x2000529")]
	public class StairInfo
	{
		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public int OwnerCell;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public int ConnectedToCell;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion Rotation;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public IntVector IPosition;

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x7FB7C8", Offset = "0x7FB7C8", VA = "0x7FB7C8")]
		public StairInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052A")]
	public class Cell
	{
		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int id;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Rectangle bounds;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private CellType cellType;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool userDefined;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private HashSet<int> connectedRooms;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private HashSet<int> fixedRoomConnections;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HashSet<int> adjacentCells;

		[Token(Token = "0x17000333")]
		public int Id
		{
			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0x8E1C78", Offset = "0x8E1C78", VA = "0x8E1C78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001B60")]
			[Address(RVA = "0x8E1C80", Offset = "0x8E1C80", VA = "0x8E1C80")]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public Rectangle Bounds
		{
			[Token(Token = "0x6001B61")]
			[Address(RVA = "0x8E1C88", Offset = "0x8E1C88", VA = "0x8E1C88")]
			get
			{
				return default(Rectangle);
			}
			[Token(Token = "0x6001B62")]
			[Address(RVA = "0x8E1C9C", Offset = "0x8E1C9C", VA = "0x8E1C9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public CellType CellType
		{
			[Token(Token = "0x6001B63")]
			[Address(RVA = "0x8E1CB0", Offset = "0x8E1CB0", VA = "0x8E1CB0")]
			get
			{
				return default(CellType);
			}
			[Token(Token = "0x6001B64")]
			[Address(RVA = "0x8E1CB8", Offset = "0x8E1CB8", VA = "0x8E1CB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public bool UserDefined
		{
			[Token(Token = "0x6001B66")]
			[Address(RVA = "0x8E1DB4", Offset = "0x8E1DB4", VA = "0x8E1DB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B67")]
			[Address(RVA = "0x8E1DBC", Offset = "0x8E1DBC", VA = "0x8E1DBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public HashSet<int> ConnectedRooms
		{
			[Token(Token = "0x6001B68")]
			[Address(RVA = "0x8E1DC8", Offset = "0x8E1DC8", VA = "0x8E1DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B69")]
			[Address(RVA = "0x8E1DD0", Offset = "0x8E1DD0", VA = "0x8E1DD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000338")]
		public HashSet<int> FixedRoomConnections
		{
			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0x8E1DD8", Offset = "0x8E1DD8", VA = "0x8E1DD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0x8E1DE0", Offset = "0x8E1DE0", VA = "0x8E1DE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000339")]
		public HashSet<int> AdjacentCells
		{
			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0x8E1DE8", Offset = "0x8E1DE8", VA = "0x8E1DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0x8E1DF0", Offset = "0x8E1DF0", VA = "0x8E1DF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700033A")]
		public IntVector Center
		{
			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0x8E1DF8", Offset = "0x8E1DF8", VA = "0x8E1DF8")]
			get
			{
				return default(IntVector);
			}
		}

		[Token(Token = "0x1700033B")]
		public UnityEngine.Vector3 CenterF
		{
			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0x8E1E98", Offset = "0x8E1E98", VA = "0x8E1E98")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x8E1A48", Offset = "0x8E1A48", VA = "0x8E1A48")]
		public Cell()
		{
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x8E1B34", Offset = "0x8E1B34", VA = "0x8E1B34")]
		public Cell(int x, int z, int width, int length)
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x8E1CC0", Offset = "0x8E1CC0", VA = "0x8E1CC0")]
		public Bounds GetWorldBounds(UnityEngine.Vector3 gridSize)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x8E1F30", Offset = "0x8E1F30", VA = "0x8E1F30", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x8E1FC8", Offset = "0x8E1FC8", VA = "0x8E1FC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200052B")]
	public class CellDoor
	{
		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private IntVector[] adjacentTiles;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool enabled;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int[] adjacentCells;

		[Token(Token = "0x1700033C")]
		public IntVector[] AdjacentTiles
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0x8E2708", Offset = "0x8E2708", VA = "0x8E2708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033D")]
		public bool Enabled
		{
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x8E2710", Offset = "0x8E2710", VA = "0x8E2710")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0x8E2718", Offset = "0x8E2718", VA = "0x8E2718")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public int[] AdjacentCells
		{
			[Token(Token = "0x6001B75")]
			[Address(RVA = "0x8E2724", Offset = "0x8E2724", VA = "0x8E2724")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B76")]
			[Address(RVA = "0x8E272C", Offset = "0x8E272C", VA = "0x8E272C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x8E2734", Offset = "0x8E2734", VA = "0x8E2734", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x8E280C", Offset = "0x8E280C", VA = "0x8E280C")]
		public CellDoor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052C")]
	public struct IntVector2Key
	{
		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public IntVector a;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public IntVector b;

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xCE8E40", Offset = "0xCE8E40", VA = "0xCE8E40")]
		public IntVector2Key(IntVector a, IntVector b)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xCE8E54", Offset = "0xCE8E54", VA = "0xCE8E54", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xCE8F40", Offset = "0xCE8F40", VA = "0xCE8F40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200052D")]
	public class DoorManager
	{
		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Dictionary<IntVector2Key, CellDoor> doorLookupCache;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<CellDoor> doors;

		[Token(Token = "0x1700033F")]
		public CellDoor[] Doors
		{
			[Token(Token = "0x6001B81")]
			[Address(RVA = "0x7A270C", Offset = "0x7A270C", VA = "0x7A270C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x7A1B4C", Offset = "0x7A1B4C", VA = "0x7A1B4C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x7A1BC4", Offset = "0x7A1BC4", VA = "0x7A1BC4")]
		public void RemoveDoor(CellDoor door)
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x7A1FD0", Offset = "0x7A1FD0", VA = "0x7A1FD0")]
		public CellDoor CreateDoor(IntVector p1, IntVector p2, int cellId1, int cellId2)
		{
			return null;
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x7A2310", Offset = "0x7A2310", VA = "0x7A2310")]
		public bool ContainsDoorBetweenCells(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x7A24EC", Offset = "0x7A24EC", VA = "0x7A24EC")]
		public bool ContainsDoor(int x1, int z1, int x2, int z2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x7A2760", Offset = "0x7A2760", VA = "0x7A2760")]
		public DoorManager()
		{
		}
	}
	[Token(Token = "0x200052E")]
	public class GridDungeonModel : DungeonModel
	{
		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public DoorManager DoorManager;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public GridDungeonConfig Config;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		public List<Cell> Cells;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		public Dictionary<int, List<StairInfo>> CellStairs;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Dictionary<int, Dictionary<int, GridCellInfo>> GridCellInfoLookup;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, Cell> CellLookup;

		[Token(Token = "0x17000340")]
		public CellDoor[] Doors
		{
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0xB3BBE4", Offset = "0xB3BBE4", VA = "0xB3BBE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xB3B738", Offset = "0xB3B738", VA = "0xB3B738")]
		public GridCellInfo GetGridCellLookup(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xB3B864", Offset = "0xB3B864", VA = "0xB3B864")]
		public void BuildSpatialCellLookup()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xB3BC00", Offset = "0xB3BC00", VA = "0xB3BC00")]
		public void BuildCellLookup()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xB3BD6C", Offset = "0xB3BD6C", VA = "0xB3BD6C")]
		public Cell GetCell(int Id)
		{
			return null;
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xB3BE08", Offset = "0xB3BE08", VA = "0xB3BE08")]
		public Cell FindCellByPosition(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xB3BF8C", Offset = "0xB3BF8C", VA = "0xB3BF8C", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xB3C074", Offset = "0xB3C074", VA = "0xB3C074")]
		public bool ContainsStairAtLocation(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xB3C3A0", Offset = "0xB3C3A0", VA = "0xB3C3A0")]
		public StairInfo GetStairAtLocation(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xB3C6C0", Offset = "0xB3C6C0", VA = "0xB3C6C0")]
		public bool ContainsStair(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xB3C714", Offset = "0xB3C714", VA = "0xB3C714")]
		private bool CheckContainStair(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xB3C8B0", Offset = "0xB3C8B0", VA = "0xB3C8B0")]
		public GridDungeonModel()
		{
		}
	}
	[Token(Token = "0x200052F")]
	public class GridDungeonModelUtils
	{
		[Token(Token = "0x2000530")]
		private struct LongestPathBFSData
		{
			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Cell cell;

			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int length;
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xB3CA50", Offset = "0xB3CA50", VA = "0xB3CA50")]
		public static Cell[] FindFurthestRooms(GridDungeonModel model)
		{
			return null;
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xB3D030", Offset = "0xB3D030", VA = "0xB3D030")]
		public GridDungeonModelUtils()
		{
		}
	}
	[Token(Token = "0x2000531")]
	public class LandscapeTransformerGrid : LandscapeTransformerBase
	{
		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LandscapeTexture[] textures;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float layoutLevelOffset;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int smoothingDistance;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve roomElevationCurve;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve corridorElevationCurve;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int roadBlurDistance;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float corridorBlurThreshold;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float roomBlurThreshold;

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x9DE8A4", Offset = "0x9DE8A4", VA = "0x9DE8A4", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x9DF08C", Offset = "0x9DF08C", VA = "0x9DF08C")]
		private Rectangle EncompassCellBounds(Rectangle cellBounds, Rectangle bounds)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x9DF150", Offset = "0x9DF150", VA = "0x9DF150", Slot = "11")]
		protected override Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x9DE9C8", Offset = "0x9DE9C8", VA = "0x9DE9C8")]
		private void SetupTextures()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x9DEBE4", Offset = "0x9DEBE4", VA = "0x9DEBE4")]
		private void UpdateHeights(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x9DF520", Offset = "0x9DF520", VA = "0x9DF520", Slot = "12")]
		protected virtual void ApplySmoothing(GridDungeonModel model, LandscapeDataRasterizer rasterizer)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x9DEF28", Offset = "0x9DEF28", VA = "0x9DEF28")]
		private void UpdateTerrainTextures(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x9E01CC", Offset = "0x9E01CC", VA = "0x9E01CC")]
		private void RemoveFoliage(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x9DF774", Offset = "0x9DF774", VA = "0x9DF774")]
		private void UpdateBaseTexture(GridDungeonModel model, float[,,] map)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x9DFF84", Offset = "0x9DFF84", VA = "0x9DFF84")]
		private void UpdateCliffTexture(float[,,] map)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x9E0588", Offset = "0x9E0588", VA = "0x9E0588")]
		private int GetTextureIndex(LandscapeTextureType textureType)
		{
			return default(int);
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x9E0710", Offset = "0x9E0710", VA = "0x9E0710")]
		public LandscapeTransformerGrid()
		{
		}
	}
	[Token(Token = "0x2000532")]
	public class MarkerEmitterCornerBeautifier : DungeonMarkerEmitter
	{
		[Token(Token = "0x2000533")]
		private class CellSpatialConfig
		{
			[Token(Token = "0x40016B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x40016B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] neighborConfig;

			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0x7E5660", Offset = "0x7E5660", VA = "0x7E5660")]
			public CellSpatialConfig(string markerName, int[] neighborConfig)
			{
			}
		}

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CellSpatialConfig[] CornerConfigs;

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x9ECDB4", Offset = "0x9ECDB4", VA = "0x9ECDB4", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x9ED104", Offset = "0x9ED104", VA = "0x9ED104")]
		private void EmitForPoint(DungeonBuilder builder, GridDungeonModel model, IntVector point)
		{
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x9ED238", Offset = "0x9ED238", VA = "0x9ED238")]
		private bool ConfigMatches(GridDungeonModel model, IntVector point, CellSpatialConfig config)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x9ED35C", Offset = "0x9ED35C", VA = "0x9ED35C")]
		private void EmitCornerMarker(DungeonBuilder builder, GridDungeonModel model, IntVector point, string markerName)
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x9ED510", Offset = "0x9ED510", VA = "0x9ED510")]
		public MarkerEmitterCornerBeautifier()
		{
		}
	}
	[Token(Token = "0x2000534")]
	public class MarkerEmitterEmptySpace : DungeonMarkerEmitter
	{
		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int distanceToCover;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string indexedMarkerNamePrefix;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool overrideY;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string overrideYBlackboardKey;

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0xC20CF8", Offset = "0xC20CF8", VA = "0xC20CF8", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0xC213BC", Offset = "0xC213BC", VA = "0xC213BC")]
		public MarkerEmitterEmptySpace()
		{
		}
	}
	[Token(Token = "0x2000535")]
	public class MarkerEmitterFindLowestPoint : DungeonMarkerEmitter
	{
		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MarkerName;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string BlackboardKeyLowestY;

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xC21468", Offset = "0xC21468", VA = "0xC21468", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xC21A80", Offset = "0xC21A80", VA = "0xC21A80")]
		public MarkerEmitterFindLowestPoint()
		{
		}
	}
	[Token(Token = "0x2000536")]
	public class MarkerEmitterFreeSpaceDecorator : DungeonMarkerEmitter
	{
		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int distanceFromEdge;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float pushDownAmount;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3[] pushDownTestAxis;

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0xC21B00", Offset = "0xC21B00", VA = "0xC21B00", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0xC223D0", Offset = "0xC223D0", VA = "0xC223D0")]
		public MarkerEmitterFreeSpaceDecorator()
		{
		}
	}
	[Token(Token = "0x2000537")]
	public class MarkerEmitterGridWall2D : DungeonMarkerEmitter
	{
		[Token(Token = "0x2000538")]
		public enum WallPushType
		{
			[Token(Token = "0x40016C2")]
			WallsOutside,
			[Token(Token = "0x40016C3")]
			WallsInside
		}

		[Token(Token = "0x2000539")]
		private class Wall2DMarkerInfo
		{
			[Token(Token = "0x40016C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x40016C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Matrix4x4 transform;

			[Token(Token = "0x40016C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public IntVector gridPosition;

			[Token(Token = "0x40016C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int cellId;

			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0x7E56B0", Offset = "0x7E56B0", VA = "0x7E56B0")]
			public Wall2DMarkerInfo()
			{
			}
		}

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WallPushType wallPushType;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool fixCorners;

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0xC2246C", Offset = "0xC2246C", VA = "0xC2246C", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xC23BB8", Offset = "0xC23BB8", VA = "0xC23BB8")]
		private void AddGround2DMarkers(List<Wall2DMarkerInfo> markerList, Dictionary<string, HashSet<IntVector>> occupied, LevelMarkerList gridMarkers, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xC240E8", Offset = "0xC240E8", VA = "0xC240E8")]
		private HashSet<IntVector> GetHashSet(string name, Dictionary<string, HashSet<IntVector>> occupied)
		{
			return null;
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0xC23114", Offset = "0xC23114", VA = "0xC23114")]
		private void FixCornerWalls(List<Wall2DMarkerInfo> wall2DMarkers, LevelMarkerList gridMarkers, Dictionary<string, HashSet<IntVector>> occupied, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xC24374", Offset = "0xC24374", VA = "0xC24374")]
		private void InsertCornerMarker(int cellId, IntVector gridPosition, UnityEngine.Vector3 gridSize, List<Wall2DMarkerInfo> wall2DMarkers, Dictionary<string, HashSet<IntVector>> occupied)
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xC2457C", Offset = "0xC2457C", VA = "0xC2457C")]
		private bool ContainsWall2D(HashSet<IntVector> walls, HashSet<IntVector> doors, IntVector position)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xC241C0", Offset = "0xC241C0", VA = "0xC241C0")]
		private bool HasValidCornerNeighbors(HashSet<IntVector> walls, HashSet<IntVector> doors, IntVector center, int dx1, int dz1, int dx2, int dz2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xC22ED8", Offset = "0xC22ED8", VA = "0xC22ED8")]
		private void RegisterMarker(Wall2DMarkerInfo markerInfo, List<Wall2DMarkerInfo> markerList, Dictionary<string, HashSet<IntVector>> occupied)
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xC22C6C", Offset = "0xC22C6C", VA = "0xC22C6C")]
		private Wall2DMarkerInfo GetMarker2D(PropSocket prop, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0xC24638", Offset = "0xC24638", VA = "0xC24638")]
		public MarkerEmitterGridWall2D()
		{
		}
	}
	[Token(Token = "0x200053A")]
	public class GridItemDoorMetadata : MonoBehaviour
	{
		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int cellA;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int cellB;

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0xD4260C", Offset = "0xD4260C", VA = "0xD4260C")]
		public GridItemDoorMetadata()
		{
		}
	}
	[Token(Token = "0x200053B")]
	public class GridItemMetadataHandler : DungeonItemSpawnListener
	{
		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0xD42614", Offset = "0xD42614", VA = "0xD42614", Slot = "4")]
		public override void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0xD4284C", Offset = "0xD4284C", VA = "0xD4284C")]
		public GridItemMetadataHandler()
		{
		}
	}
	[Token(Token = "0x200053C")]
	[ExecuteInEditMode]
	public class DungeonPaintModeGrid : DungeonPaintMode
	{
		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int cursorLogicalHeight;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float overlayOpacity;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mode2D;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int brushSize;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridDungeonModel gridModel;

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x7AD064", Offset = "0x7AD064", VA = "0x7AD064")]
		public float GetCursorHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x7AD144", Offset = "0x7AD144", VA = "0x7AD144")]
		public void SetElevationDelta(int delta)
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x7AD154", Offset = "0x7AD154", VA = "0x7AD154")]
		public GridDungeonModel GetDungeonModelGrid()
		{
			return null;
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x7AD30C", Offset = "0x7AD30C", VA = "0x7AD30C")]
		public DungeonPaintModeGrid()
		{
		}
	}
	[Token(Token = "0x200053D")]
	public class GridDungeonQuery : DungeonEventListener
	{
		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Dictionary<int, GameObject[]> DoorObjectsByCellId;

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0xB3D038", Offset = "0xB3D038", VA = "0xB3D038", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0xB3D564", Offset = "0xB3D564", VA = "0xB3D564", Slot = "8")]
		public override void OnPreDungeonDestroy(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xB3D03C", Offset = "0xB3D03C", VA = "0xB3D03C")]
		public void GenerateQuery()
		{
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xB3D5B8", Offset = "0xB3D5B8", VA = "0xB3D5B8")]
		public void GetDoorsForCell(int cellId, out GameObject[] doorGameObjects)
		{
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xB3D680", Offset = "0xB3D680", VA = "0xB3D680")]
		public bool GetCellAtPosition(UnityEngine.Vector3 position, out Cell outCell)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xB3D92C", Offset = "0xB3D92C", VA = "0xB3D92C")]
		public Bounds GetCellBounds(Cell cell)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xB3DA28", Offset = "0xB3DA28", VA = "0xB3DA28")]
		public Cell GetRandomCell()
		{
			return null;
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xB3DB30", Offset = "0xB3DB30", VA = "0xB3DB30")]
		public Cell[] FindFurthestRooms()
		{
			return null;
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xB3DB80", Offset = "0xB3DB80", VA = "0xB3DB80")]
		public GridDungeonQuery()
		{
		}
	}
	[Token(Token = "0x200053E")]
	public class GridBuilderUtils
	{
		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x790BCC", Offset = "0x790BCC", VA = "0x790BCC")]
		public static bool IsCorridor(CellType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x790BDC", Offset = "0x790BDC", VA = "0x790BDC")]
		public static bool IsRoomCorridor(CellType typeA, CellType typeB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x790C10", Offset = "0x790C10", VA = "0x790C10")]
		public static void GetRoomConnectionPointsForTiledMode(Rectangle bounds, ref List<IntVector> positions, bool skipCornersOnPathSelection)
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x790E6C", Offset = "0x790E6C", VA = "0x790E6C")]
		public static bool AreAdjacentCellsReachable(GridDungeonModel gridModel, int cellIdA, int cellIdB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x790F34", Offset = "0x790F34", VA = "0x790F34")]
		public static int[] GetCellCluster(GridDungeonModel gridModel, int sampleCellId)
		{
			return null;
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x791338", Offset = "0x791338", VA = "0x791338")]
		public static void GetAdjacentCorridors(GridDungeonModel gridModel, int startCellId, ref List<int> OutConnectedCorridors, ref List<int> OutConnectedRooms)
		{
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x791704", Offset = "0x791704", VA = "0x791704")]
		public GridBuilderUtils()
		{
		}
	}
	[Token(Token = "0x200053F")]
	public class GridDebugDrawUtils
	{
		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x79177C", Offset = "0x79177C", VA = "0x79177C")]
		public static void DrawCell(Cell cell, Color color, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x7917BC", Offset = "0x7917BC", VA = "0x7917BC")]
		public static void DrawCellId(Cell cell, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x791940", Offset = "0x791940", VA = "0x791940")]
		public static void DrawCellConnectionPoints(Cell cell, GridDungeonModel model, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x791BE0", Offset = "0x791BE0", VA = "0x791BE0")]
		public static void DrawAdjacentCells(Cell cell, GridDungeonModel model, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x7920B4", Offset = "0x7920B4", VA = "0x7920B4")]
		public GridDebugDrawUtils()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class PlatformVolume : Volume
	{
		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public CellType cellType;

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x99D268", Offset = "0x99D268", VA = "0x99D268")]
		public PlatformVolume()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Grid.SpatialConstraints
{
	[Token(Token = "0x2000541")]
	public class SpatialConstraintProcessorGrid2D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x7F5C00", Offset = "0x7F5C00", VA = "0x7F5C00", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x7F5CA8", Offset = "0x7F5CA8", VA = "0x7F5CA8")]
		public SpatialConstraintProcessorGrid2D()
		{
		}
	}
	[Token(Token = "0x2000542")]
	public class SpatialConstraintProcessorGrid3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x7F5CB0", Offset = "0x7F5CB0", VA = "0x7F5CB0", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x7F5D58", Offset = "0x7F5D58", VA = "0x7F5D58")]
		public SpatialConstraintProcessorGrid3D()
		{
		}
	}
	[Token(Token = "0x2000543")]
	public enum ConstraintRuleHeightDifferenceType
	{
		[Token(Token = "0x40016D2")]
		IsSameHeight,
		[Token(Token = "0x40016D3")]
		IsAboveReferenceNode,
		[Token(Token = "0x40016D4")]
		IsBelowReferenceNode
	}
	[Token(Token = "0x2000544")]
	[RuleMeta]
	public class ConstraintRuleHeightDifference : ConstraintRule
	{
		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public string markerName;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float markerSearchRadius;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public float heightCheckTollerance;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public ConstraintRuleHeightDifferenceType heightFunction;

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xA49DE8", Offset = "0xA49DE8", VA = "0xA49DE8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xA49E48", Offset = "0xA49E48", VA = "0xA49E48", Slot = "5")]
		public override bool Process(ConstraintRuleContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xA49F08", Offset = "0xA49F08", VA = "0xA49F08")]
		private PropSocket GetMarkerSearchResult(ConstraintRuleContext context)
		{
			return null;
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xA4A2A8", Offset = "0xA4A2A8", VA = "0xA4A2A8")]
		public ConstraintRuleHeightDifference()
		{
		}
	}
	[Token(Token = "0x2000545")]
	[RuleMeta]
	public class ConstraintRuleMarkerExists : ConstraintRule
	{
		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public string markerName;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float searchRadius;

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xA4A2C4", Offset = "0xA4A2C4", VA = "0xA4A2C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xA4A324", Offset = "0xA4A324", VA = "0xA4A324", Slot = "5")]
		public override bool Process(ConstraintRuleContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xA4A6D8", Offset = "0xA4A6D8", VA = "0xA4A6D8")]
		public ConstraintRuleMarkerExists()
		{
		}
	}
	[Token(Token = "0x2000546")]
	public class SpatialConstraintProcessorGridFlow2D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x7F5D60", Offset = "0x7F5D60", VA = "0x7F5D60", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x7F5E08", Offset = "0x7F5E08", VA = "0x7F5E08")]
		public SpatialConstraintProcessorGridFlow2D()
		{
		}
	}
	[Token(Token = "0x2000547")]
	public class SpatialConstraintProcessorGridFlow3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x7F5E10", Offset = "0x7F5E10", VA = "0x7F5E10", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x7F5EB8", Offset = "0x7F5EB8", VA = "0x7F5EB8")]
		public SpatialConstraintProcessorGridFlow3D()
		{
		}
	}
}
namespace DungeonArchitect.Builders.FloorPlan
{
	[Token(Token = "0x2000548")]
	public class FloorPlanMarkers
	{
		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string MARKER_GROUND;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string MARKER_CEILING;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string MARKER_WALL;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string MARKER_DOOR;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string MARKER_BUILDING_WALL;

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x14805FC", Offset = "0x14805FC", VA = "0x14805FC")]
		public FloorPlanMarkers()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public class FloorPlanBuilder : DungeonBuilder
	{
		[Token(Token = "0x200054A")]
		public class FloorIslandNode
		{
			[Token(Token = "0x40016E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int IslandId;

			[Token(Token = "0x40016E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FloorChunk Chunk;

			[Token(Token = "0x40016E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntVector Location;

			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0x7DE380", Offset = "0x7DE380", VA = "0x7DE380")]
			public FloorIslandNode()
			{
			}
		}

		[Token(Token = "0x200054B")]
		private class FloorIslandAdjacency
		{
			[Token(Token = "0x40016E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FloorIslandNode A;

			[Token(Token = "0x40016EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FloorIslandNode B;

			[Token(Token = "0x6001BF5")]
			[Address(RVA = "0x7DE378", Offset = "0x7DE378", VA = "0x7DE378")]
			public FloorIslandAdjacency()
			{
			}
		}

		[Token(Token = "0x200054C")]
		private class IslandNodePriorityPredicate : IComparer<int>
		{
			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Dictionary<int, FloorChunk> IslandToChunkMap;

			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0x7DE408", Offset = "0x7DE408", VA = "0x7DE408")]
			public IslandNodePriorityPredicate(Dictionary<int, FloorChunk> InIslandToChunkMap)
			{
			}

			[Token(Token = "0x6001BF7")]
			[Address(RVA = "0x7DE43C", Offset = "0x7DE43C", VA = "0x7DE43C", Slot = "4")]
			public int Compare(int IslandA, int IslandB)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private FloorPlanConfig floorPlanConfig;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FloorPlanModel floorPlanModel;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FloorChunkDB ChunkDB;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FloorDoorManager DoorManager;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HashSet<int> Visited;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private new System.Random random;

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x147D2B8", Offset = "0x147D2B8", VA = "0x147D2B8", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x147DC40", Offset = "0x147DC40", VA = "0x147DC40", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x147D434", Offset = "0x147D434", VA = "0x147D434")]
		private void BuildLayout()
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x147E790", Offset = "0x147E790", VA = "0x147E790")]
		private void SplitChunk(FloorChunk Chunk, FloorChunk OutLeft, FloorChunk OutRight, FloorChunk OutHallway)
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x147E94C", Offset = "0x147E94C", VA = "0x147E94C")]
		private void SplitChunk(FloorChunk Chunk, FloorChunk OutLeft, FloorChunk OutRight)
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x147F588", Offset = "0x147F588", VA = "0x147F588")]
		private void EmitMarkerAt(UnityEngine.Vector3 WorldLocation, string MarkerName, Quaternion Rotation)
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x147F704", Offset = "0x147F704", VA = "0x147F704")]
		private void EmitMarkerAt(UnityEngine.Vector3 WorldLocation, string MarkerName, float Angle)
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x147F788", Offset = "0x147F788", VA = "0x147F788")]
		private bool VolumeEncompassesPoint(Volume volume, IntVector GridPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x147F790", Offset = "0x147F790", VA = "0x147F790")]
		private void GetVolumeCells(Volume volume, int y, List<IntVector> OutCells)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x147F7E4", Offset = "0x147F7E4", VA = "0x147F7E4")]
		private static int GetChunkDoorConnectionScore(FloorChunk Chunk)
		{
			return default(int);
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x147F82C", Offset = "0x147F82C", VA = "0x147F82C")]
		private void FloodFill(IntVector StartLocation, int IslandId, HashSet<IntVector> Visited, List<FloorIslandNode> IslandNodes, FloorChunkDB ChunkDB)
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x147FE0C", Offset = "0x147FE0C", VA = "0x147FE0C")]
		private void ConnectIslandRecursive(int IslandId, Dictionary<int, List<FloorIslandAdjacency>> AdjacencyByIslands, HashSet<int> IslandVisited, System.Random random, FloorDoorManager DoorManager, Dictionary<int, FloorChunk> IslandToChunkMap)
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x147EA88", Offset = "0x147EA88", VA = "0x147EA88")]
		private void CreateDoors(int y)
		{
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x1480450", Offset = "0x1480450", VA = "0x1480450")]
		private FloorChunk GetPriorityChunk(FloorChunk A, FloorChunk B)
		{
			return null;
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x1480478", Offset = "0x1480478", VA = "0x1480478")]
		private string GetDoorMarkerName(FloorChunk ChunkA, FloorChunk ChunkB)
		{
			return null;
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x147DC74", Offset = "0x147DC74", VA = "0x147DC74")]
		private void EmitBuildingMarkers()
		{
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x1480550", Offset = "0x1480550", VA = "0x1480550")]
		public FloorPlanBuilder()
		{
		}
	}
	[Token(Token = "0x200054D")]
	public class FloorPlanConfig : DungeonConfig
	{
		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 BuildingSize;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 GridSize;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int MinRoomSize;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int MaxRoomSize;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int HallWidth;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int MinRoomChunkArea;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int RoomSplitProbabilityOffset;

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x14805D4", Offset = "0x14805D4", VA = "0x14805D4")]
		public FloorPlanConfig()
		{
		}
	}
	[Token(Token = "0x200054E")]
	public class FloorPlanModel : DungeonModel
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public FloorPlanConfig Config;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public FloorChunk[] Chunks;

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x1480708", Offset = "0x1480708", VA = "0x1480708")]
		public FloorPlanModel()
		{
		}
	}
	[Token(Token = "0x200054F")]
	public enum FloorChunkType
	{
		[Token(Token = "0x40016F6")]
		Room,
		[Token(Token = "0x40016F7")]
		Hall,
		[Token(Token = "0x40016F8")]
		Outside
	}
	[Token(Token = "0x2000550")]
	public class FloorChunk
	{
		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Id;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FloorChunkType ChunkType;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rect r;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rectangle Bounds;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<IntVector> BoundCells;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool bReachable;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Priority;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool bEmitGroundMarker;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool bEmitCeilingMarker;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool bConnectDoors;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool bCreateWalls;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string WallMarker;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string GroundMarker;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string CeilingMarker;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string DoorMarker;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string CenterMarker;

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x147BA54", Offset = "0x147BA54", VA = "0x147BA54")]
		public FloorChunk()
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x147BB5C", Offset = "0x147BB5C", VA = "0x147BB5C")]
		public int Area()
		{
			return default(int);
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x147BB6C", Offset = "0x147BB6C", VA = "0x147BB6C")]
		public int GetLength()
		{
			return default(int);
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x147BB80", Offset = "0x147BB80", VA = "0x147BB80")]
		public int GetWidth()
		{
			return default(int);
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x147BB94", Offset = "0x147BB94", VA = "0x147BB94")]
		public void SetLength(int Length)
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x147BBB4", Offset = "0x147BBB4", VA = "0x147BBB4")]
		public void OffsetAlongLength(int Offset)
		{
		}
	}
	[Token(Token = "0x2000551")]
	public class FloorChunkDB
	{
		[Token(Token = "0x2000552")]
		private class FChunkCacheNode
		{
			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int ChunkId;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Priority;

			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0x7DE310", Offset = "0x7DE310", VA = "0x7DE310")]
			public FChunkCacheNode()
			{
			}

			[Token(Token = "0x6001C0C")]
			[Address(RVA = "0x7DE33C", Offset = "0x7DE33C", VA = "0x7DE33C")]
			public FChunkCacheNode(int InChunkId, float InPriority)
			{
			}
		}

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<int, FloorChunk> Chunks;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, FChunkCacheNode> CachePositionToChunk;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int IdCounter;

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x147BBE0", Offset = "0x147BBE0", VA = "0x147BBE0")]
		public FloorChunkDB()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x147BCB8", Offset = "0x147BCB8", VA = "0x147BCB8")]
		public FloorChunk Create()
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x147BD28", Offset = "0x147BD28", VA = "0x147BD28")]
		public void Register(FloorChunk Chunk)
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x147BDD0", Offset = "0x147BDD0", VA = "0x147BDD0")]
		public void GetChunks(List<FloorChunk> OutChunks)
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x147BE78", Offset = "0x147BE78", VA = "0x147BE78")]
		public void GetChunks(List<FloorChunk> OutChunks, FloorChunkType ChunkType)
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x147C054", Offset = "0x147C054", VA = "0x147C054")]
		public FloorChunk GetChunk(int Id)
		{
			return null;
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x147C0F0", Offset = "0x147C0F0", VA = "0x147C0F0")]
		public FloorChunk GetChunkAt(int x, int y, int z)
		{
			return null;
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x147C250", Offset = "0x147C250", VA = "0x147C250")]
		public FloorChunk GetChunkAt(IntVector Location)
		{
			return null;
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x147C25C", Offset = "0x147C25C", VA = "0x147C25C")]
		public void CacheChunkPositions()
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x147C200", Offset = "0x147C200", VA = "0x147C200")]
		public int HASH(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x147C764", Offset = "0x147C764", VA = "0x147C764")]
		public FloorChunk[] GetAllChunks()
		{
			return null;
		}
	}
	[Token(Token = "0x2000553")]
	public class FloorDoorManager
	{
		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<IntVector, HashSet<IntVector>> DoorMap;

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x147C86C", Offset = "0x147C86C", VA = "0x147C86C")]
		public void RegisterDoor(IntVector A, IntVector B)
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x147CA5C", Offset = "0x147CA5C", VA = "0x147CA5C")]
		public bool ContainsDoorVolume(UnityEngine.Vector3 WorldLocation, List<Volume> DoorVolumes)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x147CA64", Offset = "0x147CA64", VA = "0x147CA64")]
		public bool ContainsDoor(IntVector A, IntVector B)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x147CB54", Offset = "0x147CB54", VA = "0x147CB54")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x147CBA8", Offset = "0x147CBA8", VA = "0x147CBA8")]
		public FloorDoorManager()
		{
		}
	}
}
namespace DungeonArchitect.Builders.CircularCity
{
	[Token(Token = "0x2000554")]
	internal class CircularCityDungeonConstants
	{
		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string House;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallMarkerName;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string DoorMarkerName;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string GroundMarkerName;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string CornerTowerMarkerName;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string WallPaddingMarkerName;

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x8E5C3C", Offset = "0x8E5C3C", VA = "0x8E5C3C")]
		public CircularCityDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000555")]
	public class CircularCityDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x2000556")]
		private delegate void InsertHouseDelegate();

		[Token(Token = "0x2000557")]
		private class SpatialPartitionCache
		{
			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int gridSize;

			[Token(Token = "0x4001719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<IntVector2, List<UnityEngine.Vector3>> occupancyGrid;

			[Token(Token = "0x6001C24")]
			[Address(RVA = "0x7DA3E8", Offset = "0x7DA3E8", VA = "0x7DA3E8")]
			public SpatialPartitionCache(int gridSize)
			{
			}

			[Token(Token = "0x6001C25")]
			[Address(RVA = "0x7DA480", Offset = "0x7DA480", VA = "0x7DA480")]
			public void RegisterAsOccupied(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x6001C26")]
			[Address(RVA = "0x7DA63C", Offset = "0x7DA63C", VA = "0x7DA63C")]
			public bool IsFree(UnityEngine.Vector3 position, float distanceSearch)
			{
				return default(bool);
			}

			[Token(Token = "0x6001C27")]
			[Address(RVA = "0x7DA754", Offset = "0x7DA754", VA = "0x7DA754")]
			private bool IsFree(UnityEngine.Vector3 sourcePosition, IntVector2 cell, float distanceSearch)
			{
				return default(bool);
			}

			[Token(Token = "0x6001C28")]
			[Address(RVA = "0x7DA5DC", Offset = "0x7DA5DC", VA = "0x7DA5DC")]
			private IntVector2 GetCell(UnityEngine.Vector3 position)
			{
				return default(IntVector2);
			}
		}

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CircularCityDungeonConfig cityConfig;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CircularCityDungeonModel cityModel;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x8E4884", Offset = "0x8E4884", VA = "0x8E4884", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x8E502C", Offset = "0x8E502C", VA = "0x8E502C", Slot = "6")]
		public override void OnDestroyed()
		{
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x8E50D0", Offset = "0x8E50D0", VA = "0x8E50D0", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x8E5434", Offset = "0x8E5434", VA = "0x8E5434")]
		private Texture2D GetSplatTexture(int index)
		{
			return null;
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x8E555C", Offset = "0x8E555C", VA = "0x8E555C")]
		private Texture2D GetRoadmap()
		{
			return null;
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x8E4AF0", Offset = "0x8E4AF0", VA = "0x8E4AF0")]
		private void GenerateCityLayout()
		{
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x8E5564", Offset = "0x8E5564", VA = "0x8E5564")]
		private void LayoutBuilder_RoadBlockLayoutBuilt(ref UnityEngine.Vector3[] layout)
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x8E5568", Offset = "0x8E5568", VA = "0x8E5568")]
		private void DebugDrawGraphGizmo(RoadGraph graph, Color edgeColor, Color nodeColor)
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x8E57EC", Offset = "0x8E57EC", VA = "0x8E57EC", Slot = "10")]
		public override void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x8E5104", Offset = "0x8E5104", VA = "0x8E5104")]
		private void EmitCityMarkers()
		{
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x8E5ABC", Offset = "0x8E5ABC", VA = "0x8E5ABC")]
		private void EmitMarkerAt(string markerName, UnityEngine.Vector3 worldPosition, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x8E5BF4", Offset = "0x8E5BF4", VA = "0x8E5BF4")]
		public CircularCityDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x2000558")]
	public class CircularCityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numRings;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int numRays;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startRadius;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int endRadius;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float mainRoadStrength;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float sideRoadStrength;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float mainRoadRemovalProbability;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sideRoadRemovalProbability;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float randomSideLaneOffsetAngle;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float interNodeDistance;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buildingSize;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MeshFilter roadMesh;

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x8E5BFC", Offset = "0x8E5BFC", VA = "0x8E5BFC")]
		public CircularCityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000559")]
	public enum CircularCityCellType
	{
		[Token(Token = "0x4001727")]
		Road,
		[Token(Token = "0x4001728")]
		House,
		[Token(Token = "0x4001729")]
		Park,
		[Token(Token = "0x400172A")]
		CityWallPadding,
		[Token(Token = "0x400172B")]
		UserDefined,
		[Token(Token = "0x400172C")]
		Empty
	}
	[Token(Token = "0x200055A")]
	public class CircularCityCell
	{
		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector Position;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public CircularCityCellType CellType;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion Rotation;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 BlockSize;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MarkerNameOverride;

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x8E4868", Offset = "0x8E4868", VA = "0x8E4868")]
		public CircularCityCell()
		{
		}
	}
	[Token(Token = "0x200055B")]
	public class CircularCityDungeonModel : DungeonModel
	{
		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public CircularCityDungeonConfig Config;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RoadGraph roadGraph;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RoadGraph layoutGraph;

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x8E5D70", Offset = "0x8E5D70", VA = "0x8E5D70")]
		public CircularCityDungeonModel()
		{
		}
	}
	[Token(Token = "0x200055C")]
	public enum CircularCityLandscapeTextureType
	{
		[Token(Token = "0x4001736")]
		Fill,
		[Token(Token = "0x4001737")]
		Road,
		[Token(Token = "0x4001738")]
		Park,
		[Token(Token = "0x4001739")]
		CityWallPadding
	}
	[Serializable]
	[Token(Token = "0x200055D")]
	public class CircularCityLandscapeTexture
	{
		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CircularCityLandscapeTextureType textureType;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D diffuse;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture2D normal;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float metallic;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector2 size;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UnityEngine.Vector2 offset;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve curve;

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x8E5D90", Offset = "0x8E5D90", VA = "0x8E5D90")]
		public CircularCityLandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200055E")]
	public class CircularCityFoliageEntry
	{
		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int grassIndex;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float density;

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x8E5D78", Offset = "0x8E5D78", VA = "0x8E5D78")]
		public CircularCityFoliageEntry()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200055F")]
	public class CircularCityFoliageTheme
	{
		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CircularCityLandscapeTextureType textureType;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CircularCityFoliageEntry[] foliageEntries;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float density;

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x8E5D80", Offset = "0x8E5D80", VA = "0x8E5D80")]
		public CircularCityFoliageTheme()
		{
		}
	}
	[Token(Token = "0x2000560")]
	public class LandscapeTransformerCity : LandscapeTransformerBase
	{
		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CircularCityLandscapeTexture[] textures;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CircularCityFoliageTheme[] foliage;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadBlurDistance;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float corridorBlurThreshold;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float roomBlurThreshold;

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x9DCAE8", Offset = "0x9DCAE8", VA = "0x9DCAE8", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x9DCBB4", Offset = "0x9DCBB4", VA = "0x9DCBB4")]
		public LandscapeTransformerCity()
		{
		}
	}
}
namespace Fantasy
{
	[Token(Token = "0x2000561")]
	public class DestroyIfCloseToStart : MonoBehaviour
	{
		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _distance;

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0xA59140", Offset = "0xA59140", VA = "0xA59140")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0xA592A8", Offset = "0xA592A8", VA = "0xA592A8")]
		public DestroyIfCloseToStart()
		{
		}
	}
}
namespace Fantasy.UI
{
	[Token(Token = "0x2000562")]
	public class PauseMenu : MonoBehaviour
	{
		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Toggle _freeMovementToggle;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Toggle _smoothTurningToggle;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRPlayerController _playerController;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SnapRotation _snapRotation;

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x998940", Offset = "0x998940", VA = "0x998940")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x998944", Offset = "0x998944", VA = "0x998944")]
		public void Setup()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x998B30", Offset = "0x998B30", VA = "0x998B30")]
		public void LoadLastSettings()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x998A70", Offset = "0x998A70", VA = "0x998A70")]
		public void RefreshCheckboxes()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x998BD8", Offset = "0x998BD8", VA = "0x998BD8")]
		public void SetFreeMovementOn(bool shouldBeOn)
		{
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x998CA0", Offset = "0x998CA0", VA = "0x998CA0")]
		public void SetSmoothTurningOn(bool shouldBeOn)
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x998D64", Offset = "0x998D64", VA = "0x998D64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x998D80", Offset = "0x998D80", VA = "0x998D80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x998D8C", Offset = "0x998D8C", VA = "0x998D8C")]
		public void Resume()
		{
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x998ED8", Offset = "0x998ED8", VA = "0x998ED8")]
		public PauseMenu()
		{
		}
	}
	[Token(Token = "0x2000563")]
	public class PauseMenuToggle : MonoBehaviour
	{
		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _pauseMenuClass;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _height;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _distanceFromCamera;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _pauseMenuInstance;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _cameraTransform;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VRSpellCaster _spellControls;

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x998EE0", Offset = "0x998EE0", VA = "0x998EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x9991E0", Offset = "0x9991E0", VA = "0x9991E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x9992B0", Offset = "0x9992B0", VA = "0x9992B0")]
		private void Pause()
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x998E08", Offset = "0x998E08", VA = "0x998E08")]
		public void UnPause()
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x999518", Offset = "0x999518", VA = "0x999518")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x999524", Offset = "0x999524", VA = "0x999524")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x999528", Offset = "0x999528", VA = "0x999528")]
		private void OnInputFocusAquired()
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x99952C", Offset = "0x99952C", VA = "0x99952C")]
		private void OnApplicationFocus(bool focus)
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x999538", Offset = "0x999538", VA = "0x999538")]
		public PauseMenuToggle()
		{
		}
	}
}
namespace Fantasy.Movement
{
	[Token(Token = "0x2000564")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50C9B0", Offset = "0x50C9B0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50C9B0", Offset = "0x50C9B0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50C9B0", Offset = "0x50C9B0")]
	public class AIMovement : MonoBehaviour
	{
		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _rotationSpeed;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _walkAudioSource;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NavMeshAgent _agent;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator _animator;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _isRotating;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 _rotationTarget;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool isMoving;

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x9AA910", Offset = "0x9AA910", VA = "0x9AA910")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x9AA99C", Offset = "0x9AA99C", VA = "0x9AA99C")]
		public void MoveTo(UnityEngine.Vector3 destination)
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x9AAAB4", Offset = "0x9AAAB4", VA = "0x9AAAB4")]
		public void CancelMovement()
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x9AABA0", Offset = "0x9AABA0", VA = "0x9AABA0")]
		public void RotateTowards(UnityEngine.Vector3 target)
		{
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x9AABB8", Offset = "0x9AABB8", VA = "0x9AABB8")]
		public void CancelRotation()
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x9AABC0", Offset = "0x9AABC0", VA = "0x9AABC0")]
		public float GetStoppingDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x9AABDC", Offset = "0x9AABDC", VA = "0x9AABDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x9AACE4", Offset = "0x9AACE4", VA = "0x9AACE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x9AAD04", Offset = "0x9AAD04", VA = "0x9AAD04")]
		public AIMovement()
		{
		}
	}
}
namespace Fantasy.General
{
	[Token(Token = "0x2000565")]
	public class ColorFlasher : MonoBehaviour
	{
		[Token(Token = "0x2000566")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CA78", Offset = "0x50CA78")]
		private sealed class <FlashCoroutine>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001765")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001766")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001767")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColorFlasher <>4__this;

			[Token(Token = "0x4001768")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <intensity>5__2;

			[Token(Token = "0x17000341")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C57")]
				[Address(RVA = "0x7DAD2C", Offset = "0x7DAD2C", VA = "0x7DAD2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000342")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C59")]
				[Address(RVA = "0x7DAD74", Offset = "0x7DAD74", VA = "0x7DAD74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C54")]
			[Address(RVA = "0x7DA930", Offset = "0x7DA930", VA = "0x7DA930")]
			[DebuggerHidden]
			public <FlashCoroutine>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001C55")]
			[Address(RVA = "0x7DA95C", Offset = "0x7DA95C", VA = "0x7DA95C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C56")]
			[Address(RVA = "0x7DA960", Offset = "0x7DA960", VA = "0x7DA960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C58")]
			[Address(RVA = "0x7DAD34", Offset = "0x7DAD34", VA = "0x7DAD34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _thingToFlash;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color _color;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _maxIntensity;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float _waitDuration;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _intensityDecreaser;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SkinnedMeshRenderer[] _skinnedMeshRenderers;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshRenderer[] _meshRenderers;

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x8E7968", Offset = "0x8E7968", VA = "0x8E7968")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x8D6CF0", Offset = "0x8D6CF0", VA = "0x8D6CF0")]
		public void Flash()
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x8E7A18", Offset = "0x8E7A18", VA = "0x8E7A18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5193F0", Offset = "0x5193F0")]
		private IEnumerator FlashCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x8E7A90", Offset = "0x8E7A90", VA = "0x8E7A90")]
		public void ResetColor()
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x8E7C48", Offset = "0x8E7C48", VA = "0x8E7C48")]
		public ColorFlasher()
		{
		}
	}
	[Token(Token = "0x2000567")]
	public class CountDrachmae : MonoBehaviour
	{
		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xA4D9E8", Offset = "0xA4D9E8", VA = "0xA4D9E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0xA4DA6C", Offset = "0xA4DA6C", VA = "0xA4DA6C")]
		public CountDrachmae()
		{
		}
	}
	[Token(Token = "0x2000568")]
	public class CountFloor : MonoBehaviour
	{
		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xA4DA74", Offset = "0xA4DA74", VA = "0xA4DA74")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xA4DAD8", Offset = "0xA4DAD8", VA = "0xA4DAD8")]
		public CountFloor()
		{
		}
	}
	[Token(Token = "0x2000569")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CA88", Offset = "0x50CA88")]
	public class DisplayScore : MonoBehaviour
	{
		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text _text;

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xA59A64", Offset = "0xA59A64", VA = "0xA59A64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xA59C6C", Offset = "0xA59C6C", VA = "0xA59C6C")]
		public DisplayScore()
		{
		}
	}
	[Token(Token = "0x200056A")]
	public class DrachmaeText : MonoBehaviour
	{
		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TMP_Text text;

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x7A2830", Offset = "0x7A2830", VA = "0x7A2830")]
		public void SetAmount(int amount)
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x7A287C", Offset = "0x7A287C", VA = "0x7A287C")]
		public DrachmaeText()
		{
		}
	}
	[Token(Token = "0x200056B")]
	public class Exit : MonoBehaviour
	{
		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x1478B30", Offset = "0x1478B30", VA = "0x1478B30")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x1478C78", Offset = "0x1478C78", VA = "0x1478C78")]
		public Exit()
		{
		}
	}
	[Token(Token = "0x200056C")]
	public class ExitProcedural : MonoBehaviour
	{
		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x1478C80", Offset = "0x1478C80", VA = "0x1478C80")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x1478F14", Offset = "0x1478F14", VA = "0x1478F14")]
		public ExitProcedural()
		{
		}
	}
	[Token(Token = "0x200056D")]
	public class ExitToHub : MonoBehaviour
	{
		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x1478F1C", Offset = "0x1478F1C", VA = "0x1478F1C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x147905C", Offset = "0x147905C", VA = "0x147905C")]
		public ExitToHub()
		{
		}
	}
	[Token(Token = "0x200056E")]
	public class ExitToShop : MonoBehaviour
	{
		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int minBossRoom;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int maxBossRoom;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float bossRoomChance;

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x1479064", Offset = "0x1479064", VA = "0x1479064")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x1479244", Offset = "0x1479244", VA = "0x1479244")]
		public ExitToShop()
		{
		}
	}
	[Token(Token = "0x200056F")]
	public class FacePlayer : MonoBehaviour
	{
		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _player;

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x1479718", Offset = "0x1479718", VA = "0x1479718")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x1479784", Offset = "0x1479784", VA = "0x1479784")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x1479834", Offset = "0x1479834", VA = "0x1479834")]
		public FacePlayer()
		{
		}
	}
	[Token(Token = "0x2000570")]
	public class FloorCounter : MonoBehaviour
	{
		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int floor;

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x147C7D4", Offset = "0x147C7D4", VA = "0x147C7D4")]
		public static void IncreaseFloor()
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x147C840", Offset = "0x147C840", VA = "0x147C840")]
		public static int GetHighestFloorReached()
		{
			return default(int);
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x147C860", Offset = "0x147C860", VA = "0x147C860")]
		public FloorCounter()
		{
		}
	}
	[Token(Token = "0x2000571")]
	public class LevelLoad : MonoBehaviour
	{
		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x9E1A38", Offset = "0x9E1A38", VA = "0x9E1A38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x9E1B40", Offset = "0x9E1B40", VA = "0x9E1B40")]
		public LevelLoad()
		{
		}
	}
	[Token(Token = "0x2000572")]
	public class LoadFloorCount : MonoBehaviour
	{
		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x9E3CDC", Offset = "0x9E3CDC", VA = "0x9E3CDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x9E3DDC", Offset = "0x9E3DDC", VA = "0x9E3DDC")]
		public LoadFloorCount()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000573")]
	public class PlayerData
	{
		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int totalDrachmae;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int highScore;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int highestFloor;

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x99E1F0", Offset = "0x99E1F0", VA = "0x99E1F0")]
		public PlayerData(int totalDrachmae, int highScore, int highestFloor)
		{
		}
	}
	[Token(Token = "0x2000574")]
	public class ResetProgress : MonoBehaviour
	{
		[Token(Token = "0x2000575")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CAE8", Offset = "0x50CAE8")]
		private sealed class <ResetPlayerProgression>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001776")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ResetProgress <>4__this;

			[Token(Token = "0x17000343")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C7C")]
				[Address(RVA = "0xA42FC0", Offset = "0xA42FC0", VA = "0xA42FC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000344")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C7E")]
				[Address(RVA = "0xA43008", Offset = "0xA43008", VA = "0xA43008", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C79")]
			[Address(RVA = "0xA42ED4", Offset = "0xA42ED4", VA = "0xA42ED4")]
			[DebuggerHidden]
			public <ResetPlayerProgression>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0xA42F00", Offset = "0xA42F00", VA = "0xA42F00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0xA42F04", Offset = "0xA42F04", VA = "0xA42F04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C7D")]
			[Address(RVA = "0xA42FC8", Offset = "0xA42FC8", VA = "0xA42FC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PlayerProgression _playerProgression;

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xDE1674", Offset = "0xDE1674", VA = "0xDE1674")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xDE16A0", Offset = "0xDE16A0", VA = "0xDE16A0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5194A0", Offset = "0x5194A0")]
		private IEnumerator ResetPlayerProgression()
		{
			return null;
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xDE1718", Offset = "0xDE1718", VA = "0xDE1718")]
		public ResetProgress()
		{
		}
	}
	[Token(Token = "0x2000576")]
	public class Restart : MonoBehaviour
	{
		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0xDE1720", Offset = "0xDE1720", VA = "0xDE1720")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xDE1810", Offset = "0xDE1810", VA = "0xDE1810")]
		public Restart()
		{
		}
	}
	[Token(Token = "0x2000577")]
	public static class SaveSystem
	{
		[Token(Token = "0x6001C81")]
		[Address(RVA = "0xAA3870", Offset = "0xAA3870", VA = "0xAA3870")]
		public static void Save(int drachmaeToAdd)
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0xAA3BB4", Offset = "0xAA3BB4", VA = "0xAA3BB4")]
		public static PlayerData Load()
		{
			return null;
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0xAA3B2C", Offset = "0xAA3B2C", VA = "0xAA3B2C")]
		private static string GetSavePath()
		{
			return null;
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0xAA39C4", Offset = "0xAA39C4", VA = "0xAA39C4")]
		private static int GetHighScore()
		{
			return default(int);
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0xAA39A8", Offset = "0xAA39A8", VA = "0xAA39A8")]
		private static int GetTotalDrachmae()
		{
			return default(int);
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0xAA3A78", Offset = "0xAA3A78", VA = "0xAA3A78")]
		private static int GetHighestFloor()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000578")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CAF8", Offset = "0x50CAF8")]
	public class UnlocksText : MonoBehaviour
	{
		[Token(Token = "0x2000579")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CB58", Offset = "0x50CB58")]
		private sealed class <UpdateTextAgainAfterDelay>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400177A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400177B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400177C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnlocksText <>4__this;

			[Token(Token = "0x17000345")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C8E")]
				[Address(RVA = "0xA48DCC", Offset = "0xA48DCC", VA = "0xA48DCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000346")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C90")]
				[Address(RVA = "0xA48E14", Offset = "0xA48E14", VA = "0xA48E14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0xA48CE8", Offset = "0xA48CE8", VA = "0xA48CE8")]
			[DebuggerHidden]
			public <UpdateTextAgainAfterDelay>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0xA48D14", Offset = "0xA48D14", VA = "0xA48D14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0xA48D18", Offset = "0xA48D18", VA = "0xA48D18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C8F")]
			[Address(RVA = "0xA48DD4", Offset = "0xA48DD4", VA = "0xA48DD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<int> _requiredFloors;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<string> _unlockableNames;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text _text;

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0xBE6160", Offset = "0xBE6160", VA = "0xBE6160")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0xBE6610", Offset = "0xBE6610", VA = "0xBE6610")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519550", Offset = "0x519550")]
		private IEnumerator UpdateTextAgainAfterDelay()
		{
			return null;
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xBE6210", Offset = "0xBE6210", VA = "0xBE6210")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0xBE6688", Offset = "0xBE6688", VA = "0xBE6688")]
		public UnlocksText()
		{
		}
	}
	[Token(Token = "0x200057A")]
	public class Wallet : MonoBehaviour
	{
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int drachmae;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int score;

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x7D1448", Offset = "0x7D1448", VA = "0x7D1448")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x7D14C0", Offset = "0x7D14C0", VA = "0x7D14C0")]
		public static void AddDrachmae(int amount)
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x7D1564", Offset = "0x7D1564", VA = "0x7D1564")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x7D15BC", Offset = "0x7D15BC", VA = "0x7D15BC")]
		public static void SaveDrachmae()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x7D1624", Offset = "0x7D1624", VA = "0x7D1624")]
		public Wallet()
		{
		}
	}
	[Token(Token = "0x200057B")]
	public class LoadLevel : MonoBehaviour
	{
		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _levelName;

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x9E3DE4", Offset = "0x9E3DE4", VA = "0x9E3DE4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x9E3F24", Offset = "0x9E3F24", VA = "0x9E3F24")]
		public LoadLevel()
		{
		}
	}
}
namespace Fantasy.General.Shop
{
	[Token(Token = "0x200057C")]
	public class ArmorShopItem : ShopItem
	{
		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x9B45DC", Offset = "0x9B45DC", VA = "0x9B45DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x9B4714", Offset = "0x9B4714", VA = "0x9B4714", Slot = "4")]
		public override void AddItem()
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x9B4730", Offset = "0x9B4730", VA = "0x9B4730")]
		public ArmorShopItem()
		{
		}
	}
	[Token(Token = "0x200057D")]
	public class HealthPotionShopItem : ShopItem
	{
		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xD4A234", Offset = "0xD4A234", VA = "0xD4A234")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xD4A254", Offset = "0xD4A254", VA = "0xD4A254", Slot = "4")]
		public override void AddItem()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xD4A270", Offset = "0xD4A270", VA = "0xD4A270")]
		public HealthPotionShopItem()
		{
		}
	}
	[Token(Token = "0x200057E")]
	public abstract class ShopItem : MonoBehaviour
	{
		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _notEnoughMoneyError;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _shopItem;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected ShopItemText _text;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected PlayerProgression _progressionSystem;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int price;

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0xAA5608", Offset = "0xAA5608", VA = "0xAA5608")]
		public void Buy()
		{
		}

		[Token(Token = "0x6001CA0")]
		public abstract void AddItem();

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0xAA5748", Offset = "0xAA5748", VA = "0xAA5748")]
		protected ShopItem()
		{
		}
	}
	[Token(Token = "0x200057F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CB68", Offset = "0x50CB68")]
	public class ShopItemText : MonoBehaviour
	{
		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _itemName;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _hasLevel;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _nextLevel;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _price;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TMP_Text _text;

		[Token(Token = "0x17000347")]
		public int NextLevel
		{
			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0xAA5750", Offset = "0xAA5750", VA = "0xAA5750")]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public int Price
		{
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xAA5758", Offset = "0xAA5758", VA = "0xAA5758")]
			set
			{
			}
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0xAA5760", Offset = "0xAA5760", VA = "0xAA5760")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0xAA56E8", Offset = "0xAA56E8", VA = "0xAA56E8")]
		public void SwitchToBoughtText()
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xAA5974", Offset = "0xAA5974", VA = "0xAA5974")]
		public ShopItemText()
		{
		}
	}
	[Token(Token = "0x2000580")]
	public class SpellDamageShopItem : ShopItem
	{
		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x7F7BF8", Offset = "0x7F7BF8", VA = "0x7F7BF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x7F7D34", Offset = "0x7F7D34", VA = "0x7F7D34", Slot = "4")]
		public override void AddItem()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x7F7D50", Offset = "0x7F7D50", VA = "0x7F7D50")]
		public SpellDamageShopItem()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class SwordDamageShopItem : ShopItem
	{
		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xD76268", Offset = "0xD76268", VA = "0xD76268")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xD763A4", Offset = "0xD763A4", VA = "0xD763A4", Slot = "4")]
		public override void AddItem()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xD763C0", Offset = "0xD763C0", VA = "0xD763C0")]
		public SwordDamageShopItem()
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class VRBuyControls : MonoBehaviour
	{
		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _controllerIsOverItem;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ShopItem _shopItem;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _bought;

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xBE6690", Offset = "0xBE6690", VA = "0xBE6690")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xBE66EC", Offset = "0xBE66EC", VA = "0xBE66EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xBE67C0", Offset = "0xBE67C0", VA = "0xBE67C0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xBE686C", Offset = "0xBE686C", VA = "0xBE686C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xBE6914", Offset = "0xBE6914", VA = "0xBE6914")]
		public VRBuyControls()
		{
		}
	}
}
namespace Fantasy.Dungeon
{
	[Token(Token = "0x2000583")]
	public class RotatePlayerRandomAmount : MonoBehaviour
	{
		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xA96E20", Offset = "0xA96E20", VA = "0xA96E20")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xA96E7C", Offset = "0xA96E7C", VA = "0xA96E7C")]
		public RotatePlayerRandomAmount()
		{
		}
	}
	[Token(Token = "0x2000584")]
	public class Setup : MonoBehaviour
	{
		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DungeonArchitect.Dungeon _dungeon;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GridDungeonConfig _config;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Light _light;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color[] _lightColors;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material[] _materialsWallGround;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _materialIdx;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int _lightIdx;

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xAA53E4", Offset = "0xAA53E4", VA = "0xAA53E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xAA5594", Offset = "0xAA5594", VA = "0xAA5594")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xAA5600", Offset = "0xAA5600", VA = "0xAA5600")]
		public Setup()
		{
		}
	}
	[Token(Token = "0x2000585")]
	public class Spawner : MonoBehaviour
	{
		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject[] _thingsThatCouldBeSpawned;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int _baseMaxEnemyCount;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int[] _floorRequiredToUnlockStuff;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int[] _numEnemiesToUnlock;

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x7F6540", Offset = "0x7F6540", VA = "0x7F6540")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x7F6718", Offset = "0x7F6718", VA = "0x7F6718")]
		public Spawner()
		{
		}
	}
}
namespace Fantasy.Combat
{
	[Token(Token = "0x2000586")]
	public class Breakable : MonoBehaviour, IDamagable
	{
		[Token(Token = "0x2000587")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CBC8", Offset = "0x50CBC8")]
		private sealed class <DisablePhysicsCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Breakable <>4__this;

			[Token(Token = "0x17000349")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CC4")]
				[Address(RVA = "0x7D95CC", Offset = "0x7D95CC", VA = "0x7D95CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CC6")]
				[Address(RVA = "0x7D9614", Offset = "0x7D9614", VA = "0x7D9614", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CC1")]
			[Address(RVA = "0x7D94DC", Offset = "0x7D94DC", VA = "0x7D94DC")]
			[DebuggerHidden]
			public <DisablePhysicsCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001CC2")]
			[Address(RVA = "0x7D9508", Offset = "0x7D9508", VA = "0x7D9508", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CC3")]
			[Address(RVA = "0x7D950C", Offset = "0x7D950C", VA = "0x7D950C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0x7D95D4", Offset = "0x7D95D4", VA = "0x7D95D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _intactObject;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _brokenObject;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip[] _breakSounds;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private DrachmaeText _drachmaeAmount;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ParticleSystem _hitParticles;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int _minDrachmae;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private int _maxDrachmae;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _timeTillDisablePhysics;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _isBroken;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ColorFlasher _colorFlasher;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _multiplier;

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x8D68E4", Offset = "0x8D68E4", VA = "0x8D68E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x8D69AC", Offset = "0x8D69AC", VA = "0x8D69AC", Slot = "4")]
		public void TakeDamage(float amount)
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x8D6A94", Offset = "0x8D6A94", VA = "0x8D6A94")]
		private void PlayBreakSound()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x8D6B74", Offset = "0x8D6B74", VA = "0x8D6B74")]
		public void AwardDrachmae()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x8D6DC8", Offset = "0x8D6DC8", VA = "0x8D6DC8", Slot = "5")]
		public void PlayParticles(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x8D6D50", Offset = "0x8D6D50", VA = "0x8D6D50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519600", Offset = "0x519600")]
		private IEnumerator DisablePhysicsCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x8D6EA0", Offset = "0x8D6EA0", VA = "0x8D6EA0")]
		private void DisablePhysics()
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x8D6F48", Offset = "0x8D6F48", VA = "0x8D6F48")]
		public Breakable()
		{
		}
	}
	[Token(Token = "0x2000588")]
	public class Chest : MonoBehaviour, IDamagable
	{
		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animator _animator;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _enableOnOpen;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int minDrachmae;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int maxDrachmae;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private DrachmaeText _drachmaeAmount;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _open;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ColorFlasher _colorFlasher;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _multiplier;

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x8E40EC", Offset = "0x8E40EC", VA = "0x8E40EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x8E41B4", Offset = "0x8E41B4", VA = "0x8E41B4", Slot = "4")]
		public void TakeDamage(float amount)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x8E427C", Offset = "0x8E427C", VA = "0x8E427C")]
		public void AwardDrachmae()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x8E43F8", Offset = "0x8E43F8", VA = "0x8E43F8", Slot = "5")]
		public void PlayParticles(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x8E43FC", Offset = "0x8E43FC", VA = "0x8E43FC")]
		public Chest()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public class ForwardDamageToComponent : MonoBehaviour, IDamagable
	{
		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _gameObjectToForwardDamageTo;

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x1480F70", Offset = "0x1480F70", VA = "0x1480F70", Slot = "5")]
		public void PlayParticles(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x1480F74", Offset = "0x1480F74", VA = "0x1480F74", Slot = "4")]
		public void TakeDamage(float amount)
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x1481064", Offset = "0x1481064", VA = "0x1481064")]
		public ForwardDamageToComponent()
		{
		}
	}
	[Token(Token = "0x200058A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CBD8", Offset = "0x50CBD8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CBD8", Offset = "0x50CBD8")]
	public class HealthAudio : MonoBehaviour
	{
		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip[] _getHitSounds;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _dieSounds;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HealthLogic _health;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource _audioSource;

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xD49C3C", Offset = "0xD49C3C", VA = "0xD49C3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0xD49EC4", Offset = "0xD49EC4", VA = "0xD49EC4")]
		private void OnGetHit()
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0xD49F44", Offset = "0xD49F44", VA = "0xD49F44")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0xD49ECC", Offset = "0xD49ECC", VA = "0xD49ECC")]
		private void PlayRandomSoundFromArray(AudioClip[] sounds)
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0xD49F4C", Offset = "0xD49F4C", VA = "0xD49F4C")]
		public HealthAudio()
		{
		}
	}
	[Token(Token = "0x200058B")]
	public class HealthLogic : MonoBehaviour, IDamagable
	{
		[Token(Token = "0x200058C")]
		public delegate void OnDie();

		[Token(Token = "0x200058D")]
		public delegate void OnGetHit();

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _maxHealth;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ParticleSystem _hitParticles;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _currentHealth;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _isDead;

		[Token(Token = "0x1700034B")]
		public float MaxHealth
		{
			[Token(Token = "0x6001CD8")]
			[Address(RVA = "0xD4A094", Offset = "0xD4A094", VA = "0xD4A094")]
			set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		public float CurrentHealth
		{
			[Token(Token = "0x6001CD9")]
			[Address(RVA = "0xD4A09C", Offset = "0xD4A09C", VA = "0xD4A09C")]
			set
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event OnDie onDie
		{
			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0xD49D84", Offset = "0xD49D84", VA = "0xD49D84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5196B0", Offset = "0x5196B0")]
			add
			{
			}
			[Token(Token = "0x6001CD5")]
			[Address(RVA = "0xD49F54", Offset = "0xD49F54", VA = "0xD49F54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5196C0", Offset = "0x5196C0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event OnGetHit onGetHit
		{
			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0xD49E24", Offset = "0xD49E24", VA = "0xD49E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5196D0", Offset = "0x5196D0")]
			add
			{
			}
			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0xD49FF4", Offset = "0xD49FF4", VA = "0xD49FF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5196E0", Offset = "0x5196E0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xD4A0A4", Offset = "0xD4A0A4", VA = "0xD4A0A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xD4A0B0", Offset = "0xD4A0B0", VA = "0xD4A0B0", Slot = "4")]
		public void TakeDamage(float amount)
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xD4A0FC", Offset = "0xD4A0FC", VA = "0xD4A0FC")]
		public float GetHealthAmount()
		{
			return default(float);
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0xD4A104", Offset = "0xD4A104", VA = "0xD4A104")]
		public float GetMaxHealth()
		{
			return default(float);
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0xD4A10C", Offset = "0xD4A10C", VA = "0xD4A10C", Slot = "5")]
		public void PlayParticles(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0xD4A1E4", Offset = "0xD4A1E4", VA = "0xD4A1E4")]
		public void HealToMaxHealth()
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0xD4A1F0", Offset = "0xD4A1F0", VA = "0xD4A1F0")]
		public void ScaleToFloorLevel(int level)
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xD4A214", Offset = "0xD4A214", VA = "0xD4A214")]
		public float GetHealthPercentage()
		{
			return default(float);
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xD4A224", Offset = "0xD4A224", VA = "0xD4A224")]
		public HealthLogic()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public interface IDamagable
	{
		[Token(Token = "0x6001CEB")]
		void TakeDamage(float amount);

		[Token(Token = "0x6001CEC")]
		void PlayParticles(UnityEngine.Vector3 position);
	}
	[Token(Token = "0x200058F")]
	internal class Trap : MonoBehaviour
	{
		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _animation;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _damage;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _damageMultiplierPerFloor;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation _anim;

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xBDBC90", Offset = "0xBDBC90", VA = "0xBDBC90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xBDBCEC", Offset = "0xBDBCEC", VA = "0xBDBCEC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xBDBF04", Offset = "0xBDBF04", VA = "0xBDBF04")]
		private float CalculateRealDamage()
		{
			return default(float);
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xBDBF88", Offset = "0xBDBF88", VA = "0xBDBF88")]
		public Trap()
		{
		}
	}
}
namespace Fantasy.Combat.Spells
{
	[Token(Token = "0x2000590")]
	public class DamageSpell : Spell
	{
		[Token(Token = "0x2000591")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CC6C", Offset = "0x50CC6C")]
		private sealed class <ExplosionForceCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DamageSpell <>4__this;

			[Token(Token = "0x1700034F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CFB")]
				[Address(RVA = "0x7DB97C", Offset = "0x7DB97C", VA = "0x7DB97C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000350")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CFD")]
				[Address(RVA = "0x7DB9C4", Offset = "0x7DB9C4", VA = "0x7DB9C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CF8")]
			[Address(RVA = "0x7DB5EC", Offset = "0x7DB5EC", VA = "0x7DB5EC")]
			[DebuggerHidden]
			public <ExplosionForceCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001CF9")]
			[Address(RVA = "0x7DB618", Offset = "0x7DB618", VA = "0x7DB618", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CFA")]
			[Address(RVA = "0x7DB61C", Offset = "0x7DB61C", VA = "0x7DB61C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CFC")]
			[Address(RVA = "0x7DB984", Offset = "0x7DB984", VA = "0x7DB984", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int _baseDamageAmount;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _radius;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _explosionForce;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float _explosionDistanceFromImpactPoint;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _explosionForceDebugSphere;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _realDamageAmount;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform _cameraTransform;

		[Token(Token = "0x1700034D")]
		public int RealDamageAmount
		{
			[Token(Token = "0x6001CF1")]
			[Address(RVA = "0xA52B08", Offset = "0xA52B08", VA = "0xA52B08")]
			set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public int BaseDamageAmount
		{
			[Token(Token = "0x6001CF2")]
			[Address(RVA = "0xA52B10", Offset = "0xA52B10", VA = "0xA52B10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xA52B18", Offset = "0xA52B18", VA = "0xA52B18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xA52BB4", Offset = "0xA52BB4", VA = "0xA52BB4", Slot = "4")]
		protected override void ExecuteSpellEffects(Collision other)
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xA52D98", Offset = "0xA52D98", VA = "0xA52D98")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5196F0", Offset = "0x5196F0")]
		private IEnumerator ExplosionForceCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xA52E10", Offset = "0xA52E10", VA = "0xA52E10")]
		public void ScaleDamageAmountToFloorLevel(int floorLevel)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xA52E50", Offset = "0xA52E50", VA = "0xA52E50")]
		public DamageSpell()
		{
		}
	}
	[Token(Token = "0x2000592")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CC7C", Offset = "0x50CC7C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CC7C", Offset = "0x50CC7C")]
	public abstract class Spell : MonoBehaviour
	{
		[Token(Token = "0x2000593")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CD10", Offset = "0x50CD10")]
		private sealed class <DisableAfterTimeCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Spell <>4__this;

			[Token(Token = "0x17000351")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D08")]
				[Address(RVA = "0xA443CC", Offset = "0xA443CC", VA = "0xA443CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000352")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D0A")]
				[Address(RVA = "0xA44414", Offset = "0xA44414", VA = "0xA44414", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D05")]
			[Address(RVA = "0xA442CC", Offset = "0xA442CC", VA = "0xA442CC")]
			[DebuggerHidden]
			public <DisableAfterTimeCoroutine>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001D06")]
			[Address(RVA = "0xA442F8", Offset = "0xA442F8", VA = "0xA442F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D07")]
			[Address(RVA = "0xA442FC", Offset = "0xA442FC", VA = "0xA442FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D09")]
			[Address(RVA = "0xA443D4", Offset = "0xA443D4", VA = "0xA443D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _holdEffect;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _spellInAirEffect;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject _explosionEffect;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _timeAliveAfterCollision;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool _thrown;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool _hitSomething;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x7F7694", Offset = "0x7F7694", VA = "0x7F7694")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x7F7730", Offset = "0x7F7730", VA = "0x7F7730")]
		public void Throw()
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x7F777C", Offset = "0x7F777C", VA = "0x7F777C")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x7F7814", Offset = "0x7F7814", VA = "0x7F7814")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5197A0", Offset = "0x5197A0")]
		private IEnumerator DisableAfterTimeCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001D02")]
		protected abstract void ExecuteSpellEffects(Collision other);

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0x7F788C", Offset = "0x7F788C", VA = "0x7F788C")]
		public void SetVelocity(UnityEngine.Vector3 velocity)
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x7F7974", Offset = "0x7F7974", VA = "0x7F7974")]
		protected Spell()
		{
		}
	}
	[Token(Token = "0x2000594")]
	public class TeleportSpell : Spell
	{
		[Token(Token = "0x2000595")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CD20", Offset = "0x50CD20")]
		private sealed class <AfterExecuteSpellEffects>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TeleportSpell <>4__this;

			[Token(Token = "0x40017D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool playerControllerEnabled;

			[Token(Token = "0x17000353")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D12")]
				[Address(RVA = "0xA46B40", Offset = "0xA46B40", VA = "0xA46B40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000354")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D14")]
				[Address(RVA = "0xA46B88", Offset = "0xA46B88", VA = "0xA46B88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0xA46A08", Offset = "0xA46A08", VA = "0xA46A08")]
			[DebuggerHidden]
			public <AfterExecuteSpellEffects>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001D10")]
			[Address(RVA = "0xA46A34", Offset = "0xA46A34", VA = "0xA46A34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D11")]
			[Address(RVA = "0xA46A38", Offset = "0xA46A38", VA = "0xA46A38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D13")]
			[Address(RVA = "0xA46B48", Offset = "0xA46B48", VA = "0xA46B48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _playerTransform;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _cameraTransform;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRPlayerController _playerController;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider _collider;

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xD78B4C", Offset = "0xD78B4C", VA = "0xD78B4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xD78CF0", Offset = "0xD78CF0", VA = "0xD78CF0", Slot = "4")]
		protected override void ExecuteSpellEffects(Collision other)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xD78F3C", Offset = "0xD78F3C", VA = "0xD78F3C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519850", Offset = "0x519850")]
		private IEnumerator AfterExecuteSpellEffects(bool playerControllerEnabled)
		{
			return null;
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xD78FC8", Offset = "0xD78FC8", VA = "0xD78FC8")]
		public TeleportSpell()
		{
		}
	}
}
namespace Fantasy.Combat.Player
{
	[Token(Token = "0x2000596")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CD30", Offset = "0x50CD30")]
	public class DisplayCoins : MonoBehaviour
	{
		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text _text;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int drachmae;

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xA59688", Offset = "0xA59688", VA = "0xA59688")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xA596E4", Offset = "0xA596E4", VA = "0xA596E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xA5976C", Offset = "0xA5976C", VA = "0xA5976C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xA596E8", Offset = "0xA596E8", VA = "0xA596E8")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xA59820", Offset = "0xA59820", VA = "0xA59820")]
		public DisplayCoins()
		{
		}
	}
	[Token(Token = "0x2000597")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CD90", Offset = "0x50CD90")]
	public class DisplayHealth : MonoBehaviour
	{
		[Token(Token = "0x2000598")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CDF0", Offset = "0x50CDF0")]
		private sealed class <ShortlyAfterStartCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DisplayHealth <>4__this;

			[Token(Token = "0x17000355")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D23")]
				[Address(RVA = "0x7DC6E0", Offset = "0x7DC6E0", VA = "0x7DC6E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000356")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D25")]
				[Address(RVA = "0x7DC728", Offset = "0x7DC728", VA = "0x7DC728", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D20")]
			[Address(RVA = "0x7DC5FC", Offset = "0x7DC5FC", VA = "0x7DC5FC")]
			[DebuggerHidden]
			public <ShortlyAfterStartCoroutine>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001D21")]
			[Address(RVA = "0x7DC628", Offset = "0x7DC628", VA = "0x7DC628", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D22")]
			[Address(RVA = "0x7DC62C", Offset = "0x7DC62C", VA = "0x7DC62C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D24")]
			[Address(RVA = "0x7DC6E8", Offset = "0x7DC6E8", VA = "0x7DC6E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HealthLogic _health;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Text _text;

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xA59828", Offset = "0xA59828", VA = "0xA59828")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xA598EC", Offset = "0xA598EC", VA = "0xA598EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xA599E0", Offset = "0xA599E0", VA = "0xA599E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519900", Offset = "0x519900")]
		private IEnumerator ShortlyAfterStartCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xA59A58", Offset = "0xA59A58", VA = "0xA59A58")]
		private void GetHit()
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xA59920", Offset = "0xA59920", VA = "0xA59920")]
		public void UpdateText()
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0xA59A5C", Offset = "0xA59A5C", VA = "0xA59A5C")]
		public DisplayHealth()
		{
		}
	}
	[Token(Token = "0x2000599")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CE00", Offset = "0x50CE00")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CE00", Offset = "0x50CE00")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CE00", Offset = "0x50CE00")]
	public class PlayerDamageReaction : MonoBehaviour
	{
		[Token(Token = "0x200059A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CEC8", Offset = "0x50CEC8")]
		private sealed class <DeathCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerDamageReaction <>4__this;

			[Token(Token = "0x17000357")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D2F")]
				[Address(RVA = "0xA3DF78", Offset = "0xA3DF78", VA = "0xA3DF78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000358")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D31")]
				[Address(RVA = "0xA3DFC0", Offset = "0xA3DFC0", VA = "0xA3DFC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0xA3DDA4", Offset = "0xA3DDA4", VA = "0xA3DDA4")]
			[DebuggerHidden]
			public <DeathCoroutine>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0xA3DDD0", Offset = "0xA3DDD0", VA = "0xA3DDD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0xA3DDD4", Offset = "0xA3DDD4", VA = "0xA3DDD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D30")]
			[Address(RVA = "0xA3DF80", Offset = "0xA3DF80", VA = "0xA3DF80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip[] _hitSounds;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem _damageParticles;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayerProgression _playerProgression;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HealthLogic _health;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource _audioSource;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Light _mainLight;

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x99DE24", Offset = "0x99DE24", VA = "0x99DE24")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x99DFF4", Offset = "0x99DFF4", VA = "0x99DFF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x99E068", Offset = "0x99E068", VA = "0x99E068")]
		private void GetHit()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x99E144", Offset = "0x99E144", VA = "0x99E144")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x99E170", Offset = "0x99E170", VA = "0x99E170")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5199B0", Offset = "0x5199B0")]
		private IEnumerator DeathCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x99E1E8", Offset = "0x99E1E8", VA = "0x99E1E8")]
		public PlayerDamageReaction()
		{
		}
	}
	[Token(Token = "0x200059B")]
	public class PlayerProgression : MonoBehaviour
	{
		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int[] _armorAmountPerLevel;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int[] _swordDamageAmountPerLevels;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float[] _spellDamageMultiplierPerLevels;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int _baseHealth;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private DisplayHealth _healthDisplay;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Sword _sword;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Sword _sword2;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private HealthLogic _health;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private int[] _floorRequiredToUnlockHealth;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private int[] _healthToUnlock;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int[] _floorRequiredToUnlockDamage;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float[] _damageMultiplierToUnlock;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int[] _floorRequiredToUnlockCoin;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private float[] _coinMultiplierToUnlock;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int armorLevel;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int swordDamageLevel;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int spellDamageLevel;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float savedHealth;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int extraBaseHealth;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _extraDamageMultiplier;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _coinMultiplier;

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x99EAD4", Offset = "0x99EAD4", VA = "0x99EAD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x99EEC8", Offset = "0x99EEC8", VA = "0x99EEC8")]
		private void PermanentProgression()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x99F08C", Offset = "0x99F08C", VA = "0x99F08C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x99F47C", Offset = "0x99F47C", VA = "0x99F47C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x99F4F4", Offset = "0x99F4F4", VA = "0x99F4F4")]
		public void ResetLevels()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x99F7C0", Offset = "0x99F7C0", VA = "0x99F7C0")]
		public void IncreaseArmor()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x99F9BC", Offset = "0x99F9BC", VA = "0x99F9BC")]
		public void IncreaseSwordDamage()
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x99FB58", Offset = "0x99FB58", VA = "0x99FB58")]
		public void IncreaseSpellDamage()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x99FCE4", Offset = "0x99FCE4", VA = "0x99FCE4")]
		public void HealToMax()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x99F204", Offset = "0x99F204", VA = "0x99F204")]
		private void RefreshValues()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x99FD20", Offset = "0x99FD20", VA = "0x99FD20")]
		public int GetNextArmorLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x99FDA4", Offset = "0x99FDA4", VA = "0x99FDA4")]
		public int GetNextSwordLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x99FE28", Offset = "0x99FE28", VA = "0x99FE28")]
		public int GetNextSpellLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x99FEAC", Offset = "0x99FEAC", VA = "0x99FEAC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x99FEB0", Offset = "0x99FEB0", VA = "0x99FEB0")]
		public float GetCoinMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x99FEB8", Offset = "0x99FEB8", VA = "0x99FEB8")]
		public PlayerProgression()
		{
		}
	}
	[Token(Token = "0x200059C")]
	public class SpellCaster : MonoBehaviour
	{
		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Spell _primarySpell;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Spell _secondarySpell;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _force;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _mainCamera;

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x7F797C", Offset = "0x7F797C", VA = "0x7F797C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x7F79BC", Offset = "0x7F79BC", VA = "0x7F79BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x7F7A40", Offset = "0x7F7A40", VA = "0x7F7A40")]
		private void CastSpell(Spell spellToCast)
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x7F7BE8", Offset = "0x7F7BE8", VA = "0x7F7BE8")]
		public SpellCaster()
		{
		}
	}
	[Token(Token = "0x200059D")]
	public class Sword : MonoBehaviour
	{
		[Token(Token = "0x200059E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CED8", Offset = "0x50CED8")]
		private sealed class <FullHapticTimer>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sword <>4__this;

			[Token(Token = "0x1700035A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D53")]
				[Address(RVA = "0xA46654", Offset = "0xA46654", VA = "0xA46654", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D55")]
				[Address(RVA = "0xA4669C", Offset = "0xA4669C", VA = "0xA4669C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D50")]
			[Address(RVA = "0xA46550", Offset = "0xA46550", VA = "0xA46550")]
			[DebuggerHidden]
			public <FullHapticTimer>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001D51")]
			[Address(RVA = "0xA4657C", Offset = "0xA4657C", VA = "0xA4657C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D52")]
			[Address(RVA = "0xA46580", Offset = "0xA46580", VA = "0xA46580", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D54")]
			[Address(RVA = "0xA4665C", Offset = "0xA4665C", VA = "0xA4665C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200059F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50CEE8", Offset = "0x50CEE8")]
		private sealed class <ExplosionForceCoroutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400181A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Sword <>4__this;

			[Token(Token = "0x1700035C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D59")]
				[Address(RVA = "0xA46500", Offset = "0xA46500", VA = "0xA46500", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D5B")]
				[Address(RVA = "0xA46548", Offset = "0xA46548", VA = "0xA46548", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D56")]
			[Address(RVA = "0xA461C8", Offset = "0xA461C8", VA = "0xA461C8")]
			[DebuggerHidden]
			public <ExplosionForceCoroutine>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001D57")]
			[Address(RVA = "0xA461F4", Offset = "0xA461F4", VA = "0xA461F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D58")]
			[Address(RVA = "0xA461F8", Offset = "0xA461F8", VA = "0xA461F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0xA46508", Offset = "0xA46508", VA = "0xA46508", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int _damageAmount;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private OVRInput.Controller _controller;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _trackingSpace;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _fullHapticForceTimeInSeconds;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip[] _swordSounds;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip _swordHitEnemySound;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _minSpeedToDoDamage;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _swingHapticAmount;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _radius;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float _explosionForce;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _explosionDistanceFromImpactPoint;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _explosionForceDebugSphere;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 _relativePositionLastFrame;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fullHapticForce;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioSource _audioSource;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _speed;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform _cameraTransform;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 _lastImpactPoint;

		[Token(Token = "0x17000359")]
		public int DamageAmount
		{
			[Token(Token = "0x6001D47")]
			[Address(RVA = "0xD75B14", Offset = "0xD75B14", VA = "0xD75B14")]
			set
			{
			}
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xD75B1C", Offset = "0xD75B1C", VA = "0xD75B1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xD75BB0", Offset = "0xD75BB0", VA = "0xD75BB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xD75C30", Offset = "0xD75C30", VA = "0xD75C30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xD75D80", Offset = "0xD75D80", VA = "0xD75D80")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xD76128", Offset = "0xD76128", VA = "0xD76128")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xD760B0", Offset = "0xD760B0", VA = "0xD760B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519A60", Offset = "0x519A60")]
		private IEnumerator FullHapticTimer()
		{
			return null;
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xD76038", Offset = "0xD76038", VA = "0xD76038")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519AC0", Offset = "0x519AC0")]
		private IEnumerator ExplosionForceCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xD76238", Offset = "0xD76238", VA = "0xD76238")]
		public Sword()
		{
		}
	}
	[Token(Token = "0x20005A0")]
	public class VRSpellCaster : MonoBehaviour
	{
		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _primarySpell;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _secondarySpell;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _rightHand;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform _leftHand;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform _trackingSpace;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _throwForce;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject _sword;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _leftSword;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject _heldRightSpell;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject _heldLeftSpell;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _heldRightSecondarySpell;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _heldLeftSecondarySpell;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 _trackingSpacePositionLastFrame;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3[] _previousThrowVelocitiesRight;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3[] _previousThrowVelocitiesLeft;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3[] _previousAngularVelocitiesRight;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private UnityEngine.Vector3[] _previousAngularVelocitiesLeft;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _throwVelocityIdx;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _swordActive;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _leftSwordActive;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _rHapticPrimary;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _lHapticPrimary;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _rHapticSecondary;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _lHapticSecondary;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _spellDamageMultiplier;

		[Token(Token = "0x1700035E")]
		public static float SpellDamageMultiplier
		{
			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0xBE69F8", Offset = "0xBE69F8", VA = "0xBE69F8")]
			set
			{
			}
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xBE6A68", Offset = "0xBE6A68", VA = "0xBE6A68")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xBE6AAC", Offset = "0xBE6AAC", VA = "0xBE6AAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xBE7640", Offset = "0xBE7640", VA = "0xBE7640")]
		private void UpdateHapticFeedback()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xBE7320", Offset = "0xBE7320", VA = "0xBE7320")]
		private void LetGoOfSpell(GameObject heldSpell, OVRInput.Controller controller)
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xBE70E4", Offset = "0xBE70E4", VA = "0xBE70E4")]
		private static GameObject SummonSpell(GameObject heldSpell, GameObject spell, Transform hand)
		{
			return null;
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xBE77C4", Offset = "0xBE77C4", VA = "0xBE77C4")]
		public VRSpellCaster()
		{
		}
	}
	[Token(Token = "0x20005A1")]
	public class VRSpellCasterVersion2 : MonoBehaviour
	{
		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _attackSpell;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _teleportSpell;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _rightHand;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform _leftHand;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform _trackingSpace;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _teleportThrowForce;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _attackThrowForce;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject _sword;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _shield;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject _heldRightSpell;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject _heldLeftSpell;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _heldRightSecondarySpell;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _heldLeftSecondarySpell;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 _trackingSpacePositionLastFrame;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _swordActive;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool _leftSwordActive;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		private bool _rHapticPrimary;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
		private bool _lHapticPrimary;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _rHapticSecondary;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _lHapticSecondary;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _spellDamageMultiplier;

		[Token(Token = "0x1700035F")]
		public static float SpellDamageMultiplier
		{
			[Token(Token = "0x6001D64")]
			[Address(RVA = "0xBE78D8", Offset = "0xBE78D8", VA = "0xBE78D8")]
			set
			{
			}
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xBE7948", Offset = "0xBE7948", VA = "0xBE7948")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xBE798C", Offset = "0xBE798C", VA = "0xBE798C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xBE7C54", Offset = "0xBE7C54", VA = "0xBE7C54")]
		private void UpdateHapticFeedback()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xBE7DD8", Offset = "0xBE7DD8", VA = "0xBE7DD8")]
		private void LetGoOfSpell(GameObject heldSpell, OVRInput.Controller controller)
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0xBE8034", Offset = "0xBE8034", VA = "0xBE8034")]
		private static GameObject SummonSpell(GameObject heldSpell, GameObject spell, Transform hand)
		{
			return null;
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xBE7A90", Offset = "0xBE7A90", VA = "0xBE7A90")]
		private void CastSpell(Spell spellToCast, Transform hand, float force)
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0xBE8270", Offset = "0xBE8270", VA = "0xBE8270")]
		public VRSpellCasterVersion2()
		{
		}
	}
}
namespace Fantasy.Combat.Enemy
{
	[Token(Token = "0x20005A2")]
	public class BossDoorUnlock : MonoBehaviour
	{
		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animator _doorAnim;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HealthLogic _health;

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x8D58DC", Offset = "0x8D58DC", VA = "0x8D58DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x8D59F0", Offset = "0x8D59F0", VA = "0x8D59F0")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x8D5A48", Offset = "0x8D5A48", VA = "0x8D5A48")]
		public BossDoorUnlock()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CEF8", Offset = "0x50CEF8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CEF8", Offset = "0x50CEF8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CEF8", Offset = "0x50CEF8")]
	public class EnemyBrain : MonoBehaviour
	{
		[Token(Token = "0x20005A4")]
		private enum State
		{
			[Token(Token = "0x4001852")]
			Idle,
			[Token(Token = "0x4001853")]
			Attacking,
			[Token(Token = "0x4001854")]
			WalkingToLastKnownPlayerPosition,
			[Token(Token = "0x4001855")]
			Dead
		}

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _mainCamera;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private EnemySight _sight;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IAttackBehavior _attackBehavior;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AIMovement _movement;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HealthLogic _health;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private State _currentState;

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x7B417C", Offset = "0x7B417C", VA = "0x7B417C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x7B445C", Offset = "0x7B445C", VA = "0x7B445C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x7B4540", Offset = "0x7B4540", VA = "0x7B4540")]
		private void OnSawPlayer()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x7B4610", Offset = "0x7B4610", VA = "0x7B4610")]
		private void OnLostPlayer()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x7B46F4", Offset = "0x7B46F4", VA = "0x7B46F4")]
		private void OnGotHintAboutPlayerLocation()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x7B47D8", Offset = "0x7B47D8", VA = "0x7B47D8")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x7B4A2C", Offset = "0x7B4A2C", VA = "0x7B4A2C")]
		public EnemyBrain()
		{
		}
	}
	[Token(Token = "0x20005A5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50CFC0", Offset = "0x50CFC0")]
	public class EnemyDamageReaction : MonoBehaviour
	{
		[Token(Token = "0x20005A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50D124", Offset = "0x50D124")]
		private sealed class <PushBack>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyDamageReaction <>4__this;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <pushBackForce>5__2;

			[Token(Token = "0x17000360")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D85")]
				[Address(RVA = "0x7DCF28", Offset = "0x7DCF28", VA = "0x7DCF28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000361")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D87")]
				[Address(RVA = "0x7DCF70", Offset = "0x7DCF70", VA = "0x7DCF70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x7DCDB8", Offset = "0x7DCDB8", VA = "0x7DCDB8")]
			[DebuggerHidden]
			public <PushBack>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001D83")]
			[Address(RVA = "0x7DCDE4", Offset = "0x7DCDE4", VA = "0x7DCDE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D84")]
			[Address(RVA = "0x7DCDE8", Offset = "0x7DCDE8", VA = "0x7DCDE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x7DCF30", Offset = "0x7DCF30", VA = "0x7DCF30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50D134", Offset = "0x50D134")]
		private sealed class <DeathCoroutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400186B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyDamageReaction <>4__this;

			[Token(Token = "0x17000362")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D8B")]
				[Address(RVA = "0x7DCD68", Offset = "0x7DCD68", VA = "0x7DCD68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000363")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D8D")]
				[Address(RVA = "0x7DCDB0", Offset = "0x7DCDB0", VA = "0x7DCDB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D88")]
			[Address(RVA = "0x7DCC6C", Offset = "0x7DCC6C", VA = "0x7DCC6C")]
			[DebuggerHidden]
			public <DeathCoroutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001D89")]
			[Address(RVA = "0x7DCC98", Offset = "0x7DCC98", VA = "0x7DCC98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0x7DCC9C", Offset = "0x7DCC9C", VA = "0x7DCC9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0x7DCD70", Offset = "0x7DCD70", VA = "0x7DCD70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxPushBackForce;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _maxPushDecrement;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int _ragdollDamageToTake;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _ragdollMinSpeedToApplyDamage;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _ragdollCoolDownTime;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HealthLogic _health;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator _animator;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CapsuleCollider _collider;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AIMovement _movement;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _dead;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform _player;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ColorFlasher _colorFlasher;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Ragdoll _ragdoll;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _ragdollTimer;

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x7B4D84", Offset = "0x7B4D84", VA = "0x7B4D84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x7B5000", Offset = "0x7B5000", VA = "0x7B5000")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x7B5044", Offset = "0x7B5044", VA = "0x7B5044")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x7B507C", Offset = "0x7B507C", VA = "0x7B507C")]
		private void OnGetHit()
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x7B517C", Offset = "0x7B517C", VA = "0x7B517C")]
		public void OnGetHitEnd()
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x7B51D0", Offset = "0x7B51D0", VA = "0x7B51D0")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x7B5390", Offset = "0x7B5390", VA = "0x7B5390")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519BC0", Offset = "0x519BC0")]
		private IEnumerator PushBack()
		{
			return null;
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x7B5318", Offset = "0x7B5318", VA = "0x7B5318")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519C20", Offset = "0x519C20")]
		private IEnumerator DeathCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x7B5408", Offset = "0x7B5408", VA = "0x7B5408")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x7B540C", Offset = "0x7B540C", VA = "0x7B540C")]
		private bool RagdollTimerDone()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x7B5420", Offset = "0x7B5420", VA = "0x7B5420")]
		public EnemyDamageReaction()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D144", Offset = "0x50D144")]
	public class EnemyHealthBar : MonoBehaviour
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HealthLogic _health;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _wholeHealthBar;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _minDistanceToSeeHealthBar;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private CanvasRenderer[] _canvasRenderers;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TMP_Text[] _texts;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TMP_Text _hpText;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _player;

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x1477720", Offset = "0x1477720", VA = "0x1477720")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x1477948", Offset = "0x1477948", VA = "0x1477948")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0x147786C", Offset = "0x147786C", VA = "0x147786C")]
		private void UpdateHPText()
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x1477B24", Offset = "0x1477B24", VA = "0x1477B24")]
		private void OnGetHit()
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x1477B7C", Offset = "0x1477B7C", VA = "0x1477B7C")]
		private void OnDie()
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x1477BE4", Offset = "0x1477BE4", VA = "0x1477BE4")]
		public EnemyHealthBar()
		{
		}
	}
	[Token(Token = "0x20005A9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D1A4", Offset = "0x50D1A4")]
	public class EnemySight : MonoBehaviour
	{
		[Token(Token = "0x20005AA")]
		public delegate void OnSawPlayer();

		[Token(Token = "0x20005AB")]
		public delegate void OnLostPlayer();

		[Token(Token = "0x20005AC")]
		public delegate void OnGotHintAboutPlayerLocation();

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _minRange;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _player;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HealthLogic _health;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 _lastKnownPlayerLocation;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _seesPlayer;

		[Token(Token = "0x14000033")]
		public event OnSawPlayer onSawPlayer
		{
			[Token(Token = "0x6001D94")]
			[Address(RVA = "0x1477F7C", Offset = "0x1477F7C", VA = "0x1477F7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D20", Offset = "0x519D20")]
			add
			{
			}
			[Token(Token = "0x6001D95")]
			[Address(RVA = "0x147801C", Offset = "0x147801C", VA = "0x147801C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D30", Offset = "0x519D30")]
			remove
			{
			}
		}

		[Token(Token = "0x14000034")]
		public event OnLostPlayer onLostPlayer
		{
			[Token(Token = "0x6001D96")]
			[Address(RVA = "0x14780BC", Offset = "0x14780BC", VA = "0x14780BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D40", Offset = "0x519D40")]
			add
			{
			}
			[Token(Token = "0x6001D97")]
			[Address(RVA = "0x147815C", Offset = "0x147815C", VA = "0x147815C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D50", Offset = "0x519D50")]
			remove
			{
			}
		}

		[Token(Token = "0x14000035")]
		public event OnGotHintAboutPlayerLocation onGotHintAboutPlayerLocation
		{
			[Token(Token = "0x6001D98")]
			[Address(RVA = "0x14781FC", Offset = "0x14781FC", VA = "0x14781FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D60", Offset = "0x519D60")]
			add
			{
			}
			[Token(Token = "0x6001D99")]
			[Address(RVA = "0x147829C", Offset = "0x147829C", VA = "0x147829C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x519D70", Offset = "0x519D70")]
			remove
			{
			}
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x147833C", Offset = "0x147833C", VA = "0x147833C")]
		public UnityEngine.Vector3 GetLastKnownPlayerLocation()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x1478348", Offset = "0x1478348", VA = "0x1478348")]
		public bool IsSeeingPlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x1478350", Offset = "0x1478350", VA = "0x1478350")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x1478438", Offset = "0x1478438", VA = "0x1478438")]
		private void OnGetHit()
		{
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x1478490", Offset = "0x1478490", VA = "0x1478490")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x14784F4", Offset = "0x14784F4", VA = "0x14784F4")]
		private void LookForPlayer()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x1478734", Offset = "0x1478734", VA = "0x1478734")]
		public EnemySight()
		{
		}
	}
	[Token(Token = "0x20005AD")]
	public interface IAttackBehavior
	{
		[Token(Token = "0x6001DAD")]
		void StartAttackBehavior();

		[Token(Token = "0x6001DAE")]
		void CancelAttackBehavior();
	}
	[Token(Token = "0x20005AE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D204", Offset = "0x50D204")]
	public class MeleeAttackBehavior : MonoBehaviour, IAttackBehavior
	{
		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _startAttackRange;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _attackConnectRange;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _damageAmount;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _attackIntervalInSeconds;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _timeUntilFirstAttack;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AIMovement _movement;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _playerTransform;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HealthLogic _playerHealth;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator _animator;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private EnemySight _enemySight;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _isAttacking;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _lastAttackTime;

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xC2AA98", Offset = "0xC2AA98", VA = "0xC2AA98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xC2ACD4", Offset = "0xC2ACD4", VA = "0xC2ACD4", Slot = "5")]
		public void CancelAttackBehavior()
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xC2ACF8", Offset = "0xC2ACF8", VA = "0xC2ACF8", Slot = "4")]
		public void StartAttackBehavior()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xC2AD4C", Offset = "0xC2AD4C", VA = "0xC2AD4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xC2AED8", Offset = "0xC2AED8", VA = "0xC2AED8")]
		public void OnAttack()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xC2AFE0", Offset = "0xC2AFE0", VA = "0xC2AFE0")]
		public void OnAttackFinished()
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xC2B09C", Offset = "0xC2B09C", VA = "0xC2B09C")]
		public MeleeAttackBehavior()
		{
		}
	}
	[Token(Token = "0x20005AF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D264", Offset = "0x50D264")]
	public class Ragdoll : MonoBehaviour
	{
		[Token(Token = "0x20005B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x50D2C4", Offset = "0x50D2C4")]
		private sealed class <DisableRagdollTagCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Ragdoll <>4__this;

			[Token(Token = "0x17000364")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DBE")]
				[Address(RVA = "0xA42A94", Offset = "0xA42A94", VA = "0xA42A94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000365")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DC0")]
				[Address(RVA = "0xA42ADC", Offset = "0xA42ADC", VA = "0xA42ADC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0xA4294C", Offset = "0xA4294C", VA = "0xA4294C")]
			[DebuggerHidden]
			public <DisableRagdollTagCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0xA42978", Offset = "0xA42978", VA = "0xA42978", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0xA4297C", Offset = "0xA4297C", VA = "0xA4297C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0xA42A9C", Offset = "0xA42A9C", VA = "0xA42A9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Rigidbody[] _rigidbodies;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Collider[] _colliders;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CharacterJoint[] _joints;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PhysicMaterial _physicMaterial;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _massMultiplier;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _timeTillDisableRagdollLayer;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator _animator;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NavMeshAgent _navMeshAgent;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider _collider;

		[Token(Token = "0x4001891")]
		private const int RAGDOLL_NOT_AFFECTED_BY_ATTACK_LAYER = 15;

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0xDDB4FC", Offset = "0xDDB4FC", VA = "0xDDB4FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0xDDB674", Offset = "0xDDB674", VA = "0xDDB674")]
		private void SetRagdollEnabled(bool shouldRagdoll)
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0xDDB858", Offset = "0xDDB858", VA = "0xDDB858")]
		public void Die()
		{
		}

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0xDDB890", Offset = "0xDDB890", VA = "0xDDB890")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x519D80", Offset = "0x519D80")]
		private IEnumerator DisableRagdollTagCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0xDDB908", Offset = "0xDDB908", VA = "0xDDB908")]
		public Ragdoll()
		{
		}
	}
	[Token(Token = "0x20005B1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D2D4", Offset = "0x50D2D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x50D2D4", Offset = "0x50D2D4")]
	public class RangedAttackBehavior : MonoBehaviour, IAttackBehavior
	{
		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _projectileSpawnPoint;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Spell _projectile;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _attackIntervalInSecondsMin;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _attackIntervalInSecondsMax;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _throwForce;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AIMovement _movement;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _playerTransform;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _cameraTransform;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator _animator;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _isAttacking;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _lastAttackTime;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _attackIntervalInSeconds;

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0xDDBF78", Offset = "0xDDBF78", VA = "0xDDBF78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0xDDC07C", Offset = "0xDDC07C", VA = "0xDDC07C", Slot = "5")]
		public void CancelAttackBehavior()
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0xDDC0A0", Offset = "0xDDC0A0", VA = "0xDDC0A0", Slot = "4")]
		public void StartAttackBehavior()
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0xDDC0E4", Offset = "0xDDC0E4", VA = "0xDDC0E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xDDC198", Offset = "0xDDC198", VA = "0xDDC198")]
		public void OnThrowProjectile()
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0xDDC400", Offset = "0xDDC400", VA = "0xDDC400")]
		public RangedAttackBehavior()
		{
		}
	}
	[Token(Token = "0x20005B2")]
	public class LevelText : MonoBehaviour
	{
		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x9E294C", Offset = "0x9E294C", VA = "0x9E294C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x9E2A24", Offset = "0x9E2A24", VA = "0x9E2A24")]
		public LevelText()
		{
		}
	}
}
