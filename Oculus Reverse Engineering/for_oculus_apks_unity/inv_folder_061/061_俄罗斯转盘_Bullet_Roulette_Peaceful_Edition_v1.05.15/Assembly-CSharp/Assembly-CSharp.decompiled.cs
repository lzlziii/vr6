using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using EasyButtons;
using ExitGames.Client.Photon;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.PUN;
using Photon.Voice.Unity;
using Photon.Voice.Unity.Demos.DemoVoiceUI;
using Photon.Voice.Unity.UtilityScripts;
using RootMotion;
using RootMotion.FinalIK;
using SaloonSpin;
using Sirenix.OdinInspector;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using VRHardwareService;
using VRTK;
using VRTK.Controllables;
using VRTK.Controllables.ArtificialBased;
using VRTK.Controllables.PhysicsBased;
using VRTK.GrabAttachMechanics;
using VRTK.Highlighters;
using VRTK.SecondaryControllerGrabActions;
using VRTK.UnityEventHelper;
using Valve.VR;
using cakeslice;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class AnimatorSync : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xAE2AA0", Offset = "0xAE2AA0", VA = "0xAE2AA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xAE2AF8", Offset = "0xAE2AF8", VA = "0xAE2AF8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xAE2C24", Offset = "0xAE2C24", VA = "0xAE2C24")]
	public AnimatorSync()
	{
	}
}
[Token(Token = "0x2000003")]
public class AntiBlinkingSystem : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float lastEvent;

	[Token(Token = "0x14000001")]
	public static event Action AntiBlink
	{
		[Token(Token = "0x6000004")]
		[Address(RVA = "0xAE2C2C", Offset = "0xAE2C2C", VA = "0xAE2C2C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000005")]
		[Address(RVA = "0xAE2CE4", Offset = "0xAE2CE4", VA = "0xAE2CE4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xAE2D9C", Offset = "0xAE2D9C", VA = "0xAE2D9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xAE2E24", Offset = "0xAE2E24", VA = "0xAE2E24")]
	public AntiBlinkingSystem()
	{
	}
}
[Token(Token = "0x2000004")]
public class AvatarImageManager : MonoBehaviour
{
	[Token(Token = "0x2000005")]
	[CompilerGenerated]
	private sealed class <FetchPlayerImage>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string userId;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string token;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <url>5__2;

		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WWW <w>5__3;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000013")]
			[Address(RVA = "0xAE3AA0", Offset = "0xAE3AA0", VA = "0xAE3AA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000015")]
			[Address(RVA = "0xAE3AE8", Offset = "0xAE3AE8", VA = "0xAE3AE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000010")]
		[Address(RVA = "0xAE3020", Offset = "0xAE3020", VA = "0xAE3020")]
		[DebuggerHidden]
		public <FetchPlayerImage>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000011")]
		[Address(RVA = "0xAE3628", Offset = "0xAE3628", VA = "0xAE3628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000012")]
		[Address(RVA = "0xAE362C", Offset = "0xAE362C", VA = "0xAE362C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000014")]
		[Address(RVA = "0xAE3AA8", Offset = "0xAE3AA8", VA = "0xAE3AA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000006")]
	[CompilerGenerated]
	private sealed class <GetImage_C>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string uri;

		[Token(Token = "0x4000011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool userProfileImage;

		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<ErrorData> onFail;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AvatarImageManager <>4__this;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<Sprite> onDone;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <uwr>5__2;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600001A")]
			[Address(RVA = "0xAE441C", Offset = "0xAE441C", VA = "0xAE441C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600001C")]
			[Address(RVA = "0xAE4464", Offset = "0xAE4464", VA = "0xAE4464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000016")]
		[Address(RVA = "0xAE3158", Offset = "0xAE3158", VA = "0xAE3158")]
		[DebuggerHidden]
		public <GetImage_C>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000017")]
		[Address(RVA = "0xAE3AF0", Offset = "0xAE3AF0", VA = "0xAE3AF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000018")]
		[Address(RVA = "0xAE3B0C", Offset = "0xAE3B0C", VA = "0xAE3B0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0xAE436C", Offset = "0xAE436C", VA = "0xAE436C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0xAE4424", Offset = "0xAE4424", VA = "0xAE4424", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AvatarImageManager instance;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D myUserPhotoTexture;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite defaultUserIcon;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, Sprite> usersImages;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xAE2E2C", Offset = "0xAE2E2C", VA = "0xAE2E2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xAE2F90", Offset = "0xAE2F90", VA = "0xAE2F90")]
	[IteratorStateMachine(typeof(<FetchPlayerImage>d__5))]
	private IEnumerator FetchPlayerImage(string token, string userId)
	{
		return null;
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xAE3048", Offset = "0xAE3048", VA = "0xAE3048")]
	public void GetImageURL(string token, string userId)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xAE3068", Offset = "0xAE3068", VA = "0xAE3068")]
	public void GetImage(string url, bool userProfileImage, Action<Sprite> onDone, Action<ErrorData> onFail)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xAE308C", Offset = "0xAE308C", VA = "0xAE308C")]
	[IteratorStateMachine(typeof(<GetImage_C>d__8))]
	private IEnumerator GetImage_C(string uri, bool userProfileImage, Action<Sprite> onDone, Action<ErrorData> onFail)
	{
		return null;
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xAE3180", Offset = "0xAE3180", VA = "0xAE3180")]
	private void SetupPlayerProperty()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xAE32A4", Offset = "0xAE32A4", VA = "0xAE32A4")]
	public Sprite LoadImageFromPlayerPropertyOrCache(Photon.Realtime.Player player)
	{
		return null;
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xAE3620", Offset = "0xAE3620", VA = "0xAE3620")]
	public AvatarImageManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000007")]
public class ErrorData
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long errorCode;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string responceStr;

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xAE4334", Offset = "0xAE4334", VA = "0xAE4334")]
	public ErrorData(long responceCode, string responceStr)
	{
	}
}
[Token(Token = "0x2000008")]
public class BafsVisualiser : MonoBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject policeprotection;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject extraLife;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject publicEnemy;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int pos;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string currentPlayerUserId;

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xAE446C", Offset = "0xAE446C", VA = "0xAE446C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xAE451C", Offset = "0xAE451C", VA = "0xAE451C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xAE45CC", Offset = "0xAE45CC", VA = "0xAE45CC")]
	private void Instance_CardVisualise(string userid, PlayingCardType card, bool state)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xAE47A4", Offset = "0xAE47A4", VA = "0xAE47A4")]
	public BafsVisualiser()
	{
	}
}
[Token(Token = "0x2000009")]
public class BlendWaterController : MonoBehaviour
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int blendShapeCount;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh skinnedMesh;

	[Token(Token = "0x17000005")]
	public float weight1
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xAE47AC", Offset = "0xAE47AC", VA = "0xAE47AC")]
		set
		{
		}
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xAE47E0", Offset = "0xAE47E0", VA = "0xAE47E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xAE4880", Offset = "0xAE4880", VA = "0xAE4880")]
	public BlendWaterController()
	{
	}
}
[Token(Token = "0x200000A")]
public class BlinkingObject : MonoBehaviour
{
	[Token(Token = "0x200000B")]
	[CompilerGenerated]
	private sealed class <turnKinematic>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlinkingObject <>4__this;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CollisionDetectionMode mode;

		[Token(Token = "0x17000006")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600002E")]
			[Address(RVA = "0xAE4E20", Offset = "0xAE4E20", VA = "0xAE4E20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000007")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000030")]
			[Address(RVA = "0xAE4E68", Offset = "0xAE4E68", VA = "0xAE4E68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0xAE4CF0", Offset = "0xAE4CF0", VA = "0xAE4CF0")]
		[DebuggerHidden]
		public <turnKinematic>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0xAE4D20", Offset = "0xAE4D20", VA = "0xAE4D20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0xAE4D24", Offset = "0xAE4D24", VA = "0xAE4D24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0xAE4E28", Offset = "0xAE4E28", VA = "0xAE4E28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rb;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VRTK_InteractableObject interactable;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Cigarette cig;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xAE4888", Offset = "0xAE4888", VA = "0xAE4888")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xAE49A4", Offset = "0xAE49A4", VA = "0xAE49A4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xAE4A20", Offset = "0xAE4A20", VA = "0xAE4A20")]
	private void AntiBlinkingSystem_AntiBlink()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xAE4BE8", Offset = "0xAE4BE8", VA = "0xAE4BE8")]
	private void unblink()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xAE4C6C", Offset = "0xAE4C6C", VA = "0xAE4C6C")]
	[IteratorStateMachine(typeof(<turnKinematic>d__7))]
	private IEnumerator turnKinematic(CollisionDetectionMode mode)
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xAE4D18", Offset = "0xAE4D18", VA = "0xAE4D18")]
	public BlinkingObject()
	{
	}
}
[Token(Token = "0x200000C")]
public class ChangeAvatarCalibration : MonoBehaviour
{
	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChangeAvatarCalibration <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000042")]
			[Address(RVA = "0xAE68E8", Offset = "0xAE68E8", VA = "0xAE68E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000044")]
			[Address(RVA = "0xAE6930", Offset = "0xAE6930", VA = "0xAE6930", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003F")]
		[Address(RVA = "0xAE4EE4", Offset = "0xAE4EE4", VA = "0xAE4EE4")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000040")]
		[Address(RVA = "0xAE6534", Offset = "0xAE6534", VA = "0xAE6534", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000041")]
		[Address(RVA = "0xAE6538", Offset = "0xAE6538", VA = "0xAE6538", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0xAE68F0", Offset = "0xAE68F0", VA = "0xAE68F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] gentelman;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] PoliceFemale;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] Bandit;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Dama;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] Ranger;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] Indian;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PlayerType currentType;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Text controllerText;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SaloonSpin.Hand currentHand;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int changableObjectId;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int axis;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Dropdown axisDropDown;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private InputField inputValue;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string currentController;

	[Token(Token = "0x17000008")]
	private float current
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xAE5B30", Offset = "0xAE5B30", VA = "0xAE5B30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xAE5C6C", Offset = "0xAE5C6C", VA = "0xAE5C6C")]
		set
		{
		}
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xAE4E70", Offset = "0xAE4E70", VA = "0xAE4E70")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xAE4F0C", Offset = "0xAE4F0C", VA = "0xAE4F0C")]
	public void OnChange(int value)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xAE534C", Offset = "0xAE534C", VA = "0xAE534C")]
	public void OnChangeHand(int value)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xAE5360", Offset = "0xAE5360", VA = "0xAE5360")]
	public void OnChangeObject(int value)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xAE5980", Offset = "0xAE5980", VA = "0xAE5980")]
	public void OnChangeAxis(int value)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xAE5988", Offset = "0xAE5988", VA = "0xAE5988")]
	public void ChangeAxisToNext()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xAE5A24", Offset = "0xAE5A24", VA = "0xAE5A24")]
	public void AddDeltaByController(bool add)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xAE5308", Offset = "0xAE5308", VA = "0xAE5308")]
	private void Populate()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xAE5DC4", Offset = "0xAE5DC4", VA = "0xAE5DC4")]
	public void OnChangeValue(string value)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xAE5E20", Offset = "0xAE5E20", VA = "0xAE5E20")]
	public void AddDelta(bool add)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xAE5F14", Offset = "0xAE5F14", VA = "0xAE5F14")]
	public SetPosition getCurrentHand()
	{
		return null;
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xAE64DC", Offset = "0xAE64DC", VA = "0xAE64DC")]
	public ChangeAvatarCalibration()
	{
	}
}
[Token(Token = "0x200000E")]
public class ChangeLayerOnGrab : MonoBehaviour
{
	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string grabbedLayer;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int defaultLayer;

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xAE6938", Offset = "0xAE6938", VA = "0xAE6938")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xAE6A6C", Offset = "0xAE6A6C", VA = "0xAE6A6C")]
	private void ChangeLayerOnGrab_InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xAE6A94", Offset = "0xAE6A94", VA = "0xAE6A94")]
	private void ChangeLayerOnGrab_InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xAE6AD4", Offset = "0xAE6AD4", VA = "0xAE6AD4")]
	public ChangeLayerOnGrab()
	{
	}
}
[Token(Token = "0x200000F")]
public class ChangeRegionMenu : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000010")]
	public class RegionItemRef
	{
		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string regionName;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject selectedItem;

		[Token(Token = "0x600004E")]
		[Address(RVA = "0xAE7504", Offset = "0xAE7504", VA = "0xAE7504")]
		public RegionItemRef()
		{
		}
	}

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int startingRegion;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RegionChangeController regionController;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject regionItemPrefab;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<GameObject> currentRegionItems;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool firstTime;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<RegionItemRef> regionItemRefs;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RegionItemRef prewRegionSelected;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color selectedColor;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Color defaultColor;

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xAE6B2C", Offset = "0xAE6B2C", VA = "0xAE6B2C")]
	[ContextMenu("Init Regions")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xAE6BB0", Offset = "0xAE6BB0", VA = "0xAE6BB0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xAE70E4", Offset = "0xAE70E4", VA = "0xAE70E4")]
	public void SelectNewRegionName(string regionCode)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xAE7424", Offset = "0xAE7424", VA = "0xAE7424")]
	public static string ConvertCodeToLocalizeName(string regionCode)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xAE74F4", Offset = "0xAE74F4", VA = "0xAE74F4")]
	public ChangeRegionMenu()
	{
	}
}
[Token(Token = "0x2000013")]
public class ChangeVignete : MonoBehaviour
{
	[Token(Token = "0x2000014")]
	[CompilerGenerated]
	private sealed class <heartBeat>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChangeVignete <>4__this;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600005E")]
			[Address(RVA = "0xAE7B90", Offset = "0xAE7B90", VA = "0xAE7B90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000060")]
			[Address(RVA = "0xAE7BD8", Offset = "0xAE7BD8", VA = "0xAE7BD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0xAE7998", Offset = "0xAE7998", VA = "0xAE7998")]
		[DebuggerHidden]
		public <heartBeat>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0xAE79F0", Offset = "0xAE79F0", VA = "0xAE79F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0xAE79F4", Offset = "0xAE79F4", VA = "0xAE79F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0xAE7B98", Offset = "0xAE7B98", VA = "0xAE7B98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool cutVersion;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationCurve curve;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float loopTime;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PostProcessVolume post;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vignette vignete;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ChangeVignete Instance;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool started;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float maxIntensity;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool toNarmal;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool played;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UnityEvent onBeat;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource beatSource;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("EasyIntensity")]
	[SerializeField]
	private float easyIntensity;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float easyLoopTime;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float easyVolume;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Header("NormalIntensity")]
	[SerializeField]
	private float normalIntensity;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float normalLoopTime;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float normalVolume;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("HardIntensity")]
	[SerializeField]
	private float hardIntensity;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float hardLoopTime;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float hardVolume;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xAE7620", Offset = "0xAE7620", VA = "0xAE7620")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xAE76F8", Offset = "0xAE76F8", VA = "0xAE76F8")]
	public void StartVignete()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xAE7824", Offset = "0xAE7824", VA = "0xAE7824")]
	public void NormalIntensity()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xAE78D8", Offset = "0xAE78D8", VA = "0xAE78D8")]
	public void HardIntensity()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xAE798C", Offset = "0xAE798C", VA = "0xAE798C")]
	public void ReturnToNormal()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xAE77B0", Offset = "0xAE77B0", VA = "0xAE77B0")]
	[IteratorStateMachine(typeof(<heartBeat>d__15))]
	private IEnumerator heartBeat()
	{
		return null;
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xAE79C0", Offset = "0xAE79C0", VA = "0xAE79C0")]
	public ChangeVignete()
	{
	}
}
[Token(Token = "0x2000015")]
public class ChargingHints : MonoBehaviour
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayerController pc;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ChargeState currentState;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xAE7BE0", Offset = "0xAE7BE0", VA = "0xAE7BE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xAE7CC8", Offset = "0xAE7CC8", VA = "0xAE7CC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xAE7E10", Offset = "0xAE7E10", VA = "0xAE7E10")]
	private void OnTurnSwitched()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xAE8870", Offset = "0xAE8870", VA = "0xAE8870")]
	private void Shoot()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xAE8878", Offset = "0xAE8878", VA = "0xAE8878")]
	private void PistolGrab()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xAE893C", Offset = "0xAE893C", VA = "0xAE893C")]
	private void PistolUngrab()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xAE89B8", Offset = "0xAE89B8", VA = "0xAE89B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xAE8B20", Offset = "0xAE8B20", VA = "0xAE8B20")]
	private void BulletGrab()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xAE8BB4", Offset = "0xAE8BB4", VA = "0xAE8BB4")]
	private void BulletUngrab()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xAE811C", Offset = "0xAE811C", VA = "0xAE811C")]
	private void ShowHintForState()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xAE8C6C", Offset = "0xAE8C6C", VA = "0xAE8C6C")]
	public ChargingHints()
	{
	}
}
[Token(Token = "0x2000016")]
public enum ChargeState
{
	[Token(Token = "0x4000064")]
	None,
	[Token(Token = "0x4000065")]
	TakeGun,
	[Token(Token = "0x4000066")]
	OpenBarrel,
	[Token(Token = "0x4000067")]
	TakeBullet,
	[Token(Token = "0x4000068")]
	InsertBullet,
	[Token(Token = "0x4000069")]
	CloseBarrel,
	[Token(Token = "0x400006A")]
	SpinBarrel,
	[Token(Token = "0x400006B")]
	Shoot
}
[Token(Token = "0x2000017")]
public class ColliderHelper : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform rootTransform;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VRTK_InteractableObject interact;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider col;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inHand;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xAE8C74", Offset = "0xAE8C74", VA = "0xAE8C74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xAE8CCC", Offset = "0xAE8CCC", VA = "0xAE8CCC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xAE8DAC", Offset = "0xAE8DAC", VA = "0xAE8DAC")]
	private void pistolUngrabbed(object sender, InteractableObjectEventArgs e)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xAE8DB4", Offset = "0xAE8DB4", VA = "0xAE8DB4")]
	private void pistolGrabbed(object sender, InteractableObjectEventArgs e)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xAE8DE0", Offset = "0xAE8DE0", VA = "0xAE8DE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xAE8F30", Offset = "0xAE8F30", VA = "0xAE8F30")]
	public ColliderHelper()
	{
	}
}
[Token(Token = "0x2000018")]
public class ColliderPositionSetter : MonoBehaviour
{
	[Token(Token = "0x2000019")]
	[CompilerGenerated]
	private sealed class <GetCollider>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColliderPositionSetter <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600007B")]
			[Address(RVA = "0xAE935C", Offset = "0xAE935C", VA = "0xAE935C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600007D")]
			[Address(RVA = "0xAE93A4", Offset = "0xAE93A4", VA = "0xAE93A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0xAE9068", Offset = "0xAE9068", VA = "0xAE9068")]
		[DebuggerHidden]
		public <GetCollider>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0xAE91B4", Offset = "0xAE91B4", VA = "0xAE91B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007A")]
		[Address(RVA = "0xAE91B8", Offset = "0xAE91B8", VA = "0xAE91B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0xAE9364", Offset = "0xAE9364", VA = "0xAE9364", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PositionOfObjects pos;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SphereCollider sphere;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string controller;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SaloonSpin.Hand hand;

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xAE8F38", Offset = "0xAE8F38", VA = "0xAE8F38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xAE8FF4", Offset = "0xAE8FF4", VA = "0xAE8FF4")]
	[IteratorStateMachine(typeof(<GetCollider>d__3))]
	private IEnumerator GetCollider()
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xAE6310", Offset = "0xAE6310", VA = "0xAE6310")]
	public float GetValue(int index)
	{
		return default(float);
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xAE63A0", Offset = "0xAE63A0", VA = "0xAE63A0")]
	public void SetValue(int index, float newValue)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xAE9090", Offset = "0xAE9090", VA = "0xAE9090")]
	[Button]
	private void SavePos()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xAE91AC", Offset = "0xAE91AC", VA = "0xAE91AC")]
	public ColliderPositionSetter()
	{
	}
}
[Token(Token = "0x200001A")]
public class CurrentRegionSetter : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text currentRegionLabel;

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xAE93AC", Offset = "0xAE93AC", VA = "0xAE93AC")]
	private void Update()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xAE9450", Offset = "0xAE9450", VA = "0xAE9450")]
	public CurrentRegionSetter()
	{
	}
}
[Token(Token = "0x200001B")]
public class CurrentRoomSetter : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text currentRoomLabel;

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xAE9458", Offset = "0xAE9458", VA = "0xAE9458")]
	private void Update()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xAE9570", Offset = "0xAE9570", VA = "0xAE9570")]
	public CurrentRoomSetter()
	{
	}
}
[Token(Token = "0x200001C")]
public class DropCollisionEvent : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float lastCollisionTime;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float minTimeBeetweenCollisions;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minForce;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent collisionEvent;

	[Token(Token = "0x1700000F")]
	public bool IgnoreCollision
	{
		[Token(Token = "0x6000082")]
		[Address(RVA = "0xAE9578", Offset = "0xAE9578", VA = "0xAE9578")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000083")]
		[Address(RVA = "0xAE9580", Offset = "0xAE9580", VA = "0xAE9580")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xAE958C", Offset = "0xAE958C", VA = "0xAE958C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xAE9680", Offset = "0xAE9680", VA = "0xAE9680")]
	public DropCollisionEvent()
	{
	}
}
[Token(Token = "0x200001D")]
public class SpawnEffect : MonoBehaviour
{
	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnEffectTime;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pause;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve fadeIn;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int shaderProperty;

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xAE9694", Offset = "0xAE9694", VA = "0xAE9694")]
	private void Start()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xAE9794", Offset = "0xAE9794", VA = "0xAE9794")]
	private void Update()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xAE9854", Offset = "0xAE9854", VA = "0xAE9854")]
	public SpawnEffect()
	{
	}
}
[Token(Token = "0x200001E")]
public class FakeMechanismCreate : MonoBehaviour
{
	[Token(Token = "0x200001F")]
	[CompilerGenerated]
	private sealed class <check>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FakeMechanismCreate <>4__this;

		[Token(Token = "0x17000010")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000091")]
			[Address(RVA = "0xAE9F60", Offset = "0xAE9F60", VA = "0xAE9F60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000093")]
			[Address(RVA = "0xAE9FA8", Offset = "0xAE9FA8", VA = "0xAE9FA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xAE9C60", Offset = "0xAE9C60", VA = "0xAE9C60")]
		[DebuggerHidden]
		public <check>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xAE9C90", Offset = "0xAE9C90", VA = "0xAE9C90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0xAE9C94", Offset = "0xAE9C94", VA = "0xAE9C94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xAE9F68", Offset = "0xAE9F68", VA = "0xAE9F68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject prefab;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MainPistol pistol;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PistolBarrelMechanism barrel;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform currentFakeObject;

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xAE9868", Offset = "0xAE9868", VA = "0xAE9868")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xAE997C", Offset = "0xAE997C", VA = "0xAE997C")]
	private void FakeMechanismCreate_InteractableObjectUngrabbed()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xAE9984", Offset = "0xAE9984", VA = "0xAE9984")]
	private void FakeMechanismCreate_InteractableObjectGrabbed()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xAE9BEC", Offset = "0xAE9BEC", VA = "0xAE9BEC")]
	[IteratorStateMachine(typeof(<check>d__7))]
	private IEnumerator check()
	{
		return null;
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xAE9C88", Offset = "0xAE9C88", VA = "0xAE9C88")]
	public FakeMechanismCreate()
	{
	}
}
[Token(Token = "0x2000020")]
public class FakePlayerController : MonoBehaviour
{
	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTK_SDKSetup sDKSetup;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerParts playerModel;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xAE9FB0", Offset = "0xAE9FB0", VA = "0xAE9FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xAE9FB4", Offset = "0xAE9FB4", VA = "0xAE9FB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xAEA0B8", Offset = "0xAEA0B8", VA = "0xAEA0B8")]
	public FakePlayerController()
	{
	}
}
[Token(Token = "0x2000021")]
public class HoleController : MonoBehaviour
{
	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform endPoint;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform bone1;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform bone2;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xAEA0C0", Offset = "0xAEA0C0", VA = "0xAEA0C0")]
	public void MakeHoleScale(Vector3 point1, Vector3 point2, Vector3 normal1, Vector3 normal2, Vector3 up)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xAEA1B4", Offset = "0xAEA1B4", VA = "0xAEA1B4")]
	public HoleController()
	{
	}
}
[Token(Token = "0x2000022")]
public class InputRedirector : MonoBehaviour
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRTK_ControllerEvents events;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Hand hand;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ChangeAvatarCalibration change;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool changeaxisPressed;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xAEA1BC", Offset = "0xAEA1BC", VA = "0xAEA1BC")]
	private void Start()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xAEA214", Offset = "0xAEA214", VA = "0xAEA214")]
	private void Update()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xAEA348", Offset = "0xAEA348", VA = "0xAEA348")]
	public InputRedirector()
	{
	}
}
[Token(Token = "0x2000023")]
public class InviteFriendEntry : MonoBehaviour
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.UI.Button button;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text nameText;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RawImage avatarImg;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Image checkImage;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image onlinestatus;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Sprite offlineSprite;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite onlineSprite;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xAEA350", Offset = "0xAEA350", VA = "0xAEA350")]
	public void Init(Friend friend, int roomId)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xAEA354", Offset = "0xAEA354", VA = "0xAEA354")]
	private void PlayStationInit()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xAEA358", Offset = "0xAEA358", VA = "0xAEA358")]
	public InviteFriendEntry()
	{
	}
}
[Token(Token = "0x2000024")]
public class InviteFriendMenu : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject entry;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xAEA360", Offset = "0xAEA360", VA = "0xAEA360")]
	public void Init()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xAEA3C8", Offset = "0xAEA3C8", VA = "0xAEA3C8")]
	private void PlayStationInit()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xAEA3CC", Offset = "0xAEA3CC", VA = "0xAEA3CC")]
	public InviteFriendMenu()
	{
	}
}
[Token(Token = "0x2000025")]
public class InviteFromFriendMenu : MonoBehaviour
{
	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text inviteText;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ulong _lobbyId;

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xAEA3D4", Offset = "0xAEA3D4", VA = "0xAEA3D4")]
	public void Init(string userName, ulong lobbyId)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xAEA5F0", Offset = "0xAEA5F0", VA = "0xAEA5F0")]
	public void ClickAccept()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xAEA664", Offset = "0xAEA664", VA = "0xAEA664")]
	public InviteFromFriendMenu()
	{
	}
}
[Token(Token = "0x2000026")]
public class RFX4_AudioCurves : MonoBehaviour
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsLoop;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool canUpdate;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startVolume;

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xAEA66C", Offset = "0xAEA66C", VA = "0xAEA66C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xAEA708", Offset = "0xAEA708", VA = "0xAEA708")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xAEA72C", Offset = "0xAEA72C", VA = "0xAEA72C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xAEA7B8", Offset = "0xAEA7B8", VA = "0xAEA7B8")]
	public RFX4_AudioCurves()
	{
	}
}
[Token(Token = "0x2000027")]
public class RFX4_LightCurves : MonoBehaviour
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool UseShadowsIfPossible;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xAEA800", Offset = "0xAEA800", VA = "0xAEA800")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xAEA884", Offset = "0xAEA884", VA = "0xAEA884")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xAEA8A8", Offset = "0xAEA8A8", VA = "0xAEA8A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xAEA94C", Offset = "0xAEA94C", VA = "0xAEA94C")]
	public RFX4_LightCurves()
	{
	}
}
[Token(Token = "0x2000028")]
public class RFX4_PhysicsForceCurves : MonoBehaviour
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ForceRadius;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ForceMultiplier;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ForceCurve;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ForceMode ForceMode;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsLoop;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float DestoryDistance;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool UseDistanceScale;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve DistanceScaleCurve;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseUPVector;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve DragCurve;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float DragGraphTimeMultiplier;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float DragGraphIntensityMultiplier;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string AffectedName;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float forceAdditionalMultiplier;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool canUpdate;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startTime;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform t;

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xAEA994", Offset = "0xAEA994", VA = "0xAEA994")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xAEA9B8", Offset = "0xAEA9B8", VA = "0xAEA9B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xAEA9E4", Offset = "0xAEA9E4", VA = "0xAEA9E4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xAEAFC4", Offset = "0xAEAFC4", VA = "0xAEAFC4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xAEB018", Offset = "0xAEB018", VA = "0xAEB018")]
	public RFX4_PhysicsForceCurves()
	{
	}
}
[Token(Token = "0x2000029")]
public class RFX4_ScaleCurves : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int nameId;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Projector proj;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startScale;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xAEB0E0", Offset = "0xAEB0E0", VA = "0xAEB0E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xAEB1D4", Offset = "0xAEB1D4", VA = "0xAEB1D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xAEB248", Offset = "0xAEB248", VA = "0xAEB248")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xAEB354", Offset = "0xAEB354", VA = "0xAEB354")]
	public RFX4_ScaleCurves()
	{
	}
}
[Token(Token = "0x200002A")]
public class RFX4_ShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderColorProperty;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient Color;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeMultiplier;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startTime;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color startColor;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string shaderProperty;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Renderer rend;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xAEB39C", Offset = "0xAEB39C", VA = "0xAEB39C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xAEB518", Offset = "0xAEB518", VA = "0xAEB518")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xAEB5F4", Offset = "0xAEB5F4", VA = "0xAEB5F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xAEB85C", Offset = "0xAEB85C", VA = "0xAEB85C")]
	public RFX4_ShaderColorGradient()
	{
	}
}
[Token(Token = "0x200002B")]
public class RFX4_ShaderFloatCurve : MonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderFloatProperty;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool canUpdate;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string shaderProperty;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer rend;

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xAEB8E0", Offset = "0xAEB8E0", VA = "0xAEB8E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xAEBA2C", Offset = "0xAEBA2C", VA = "0xAEBA2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xAEBAA8", Offset = "0xAEBAA8", VA = "0xAEBAA8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xAEBB5C", Offset = "0xAEBB5C", VA = "0xAEBB5C")]
	public RFX4_ShaderFloatCurve()
	{
	}
}
[Token(Token = "0x200002C")]
public enum RFX4_ShaderProperties
{
	[Token(Token = "0x40000E5")]
	_TintColor,
	[Token(Token = "0x40000E6")]
	_Cutoff,
	[Token(Token = "0x40000E7")]
	_Color,
	[Token(Token = "0x40000E8")]
	_EmissionColor,
	[Token(Token = "0x40000E9")]
	_MaskPow,
	[Token(Token = "0x40000EA")]
	_Cutout,
	[Token(Token = "0x40000EB")]
	_Speed,
	[Token(Token = "0x40000EC")]
	_BumpAmt,
	[Token(Token = "0x40000ED")]
	_MainColor,
	[Token(Token = "0x40000EE")]
	_Distortion,
	[Token(Token = "0x40000EF")]
	_FresnelColor
}
[Token(Token = "0x200002D")]
public class RFX4_WindCurves : MonoBehaviour
{
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve WindCurve;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WindZone windZone;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xAEBBAC", Offset = "0xAEBBAC", VA = "0xAEBBAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xAEBC60", Offset = "0xAEBC60", VA = "0xAEBC60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xAEBC84", Offset = "0xAEBC84", VA = "0xAEBC84")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xAEBD10", Offset = "0xAEBD10", VA = "0xAEBD10")]
	public RFX4_WindCurves()
	{
	}
}
[Token(Token = "0x200002E")]
public class RFX4_EffectSettings : MonoBehaviour
{
	[Token(Token = "0x200002F")]
	[CompilerGenerated]
	private sealed class <Fadeout>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_EffectSettings <>4__this;

		[Token(Token = "0x17000012")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D3")]
			[Address(RVA = "0xAED934", Offset = "0xAED934", VA = "0xAED934", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000D5")]
			[Address(RVA = "0xAED97C", Offset = "0xAED97C", VA = "0xAED97C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xAED274", Offset = "0xAED274", VA = "0xAED274")]
		[DebuggerHidden]
		public <Fadeout>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xAED844", Offset = "0xAED844", VA = "0xAED844", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xAED848", Offset = "0xAED848", VA = "0xAED848", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0xAED93C", Offset = "0xAED93C", VA = "0xAED93C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.1f, 1f)]
	public float ParticlesBudget;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseLightShadows;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool UseFastFlatDecalsForMobiles;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool UseCustomColor;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color EffectColor;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsVisible;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float FadeoutTime;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool UseCollisionDetection;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool LimitMaxDistance;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MaxDistnace;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Mass;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Speed;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float AirDrag;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool UseGravity;

	[Token(Token = "0x4000105")]
	private const string distortionNamePC = "KriptoFX/RFX4/Distortion";

	[Token(Token = "0x4000106")]
	private const string distortionNameMobile = "KriptoFX/RFX4/DistortionMobile";

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool isCheckedDistortion;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool prevIsVisible;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentFadeoutTime;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer[] renderers;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Renderer[] skinRenderers;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Light[] lights;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource[] audioSources;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string[] colorProperties;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xAEBD58", Offset = "0xAEBD58", VA = "0xAEBD58")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xAEBE9C", Offset = "0xAEBE9C", VA = "0xAEBE9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xAEC508", Offset = "0xAEC508", VA = "0xAEC508")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xAEBF08", Offset = "0xAEBF08", VA = "0xAEBF08")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xAEC170", Offset = "0xAEC170", VA = "0xAEC170")]
	public void ChangeParticleColor()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xAEC310", Offset = "0xAEC310", VA = "0xAEC310")]
	public void SetFlatDecals()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xAEC398", Offset = "0xAEC398", VA = "0xAEC398")]
	public void DisableShadows()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAEC390", Offset = "0xAEC390", VA = "0xAEC390")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAEC558", Offset = "0xAEC558", VA = "0xAEC558")]
	[IteratorStateMachine(typeof(<Fadeout>d__32))]
	private IEnumerator Fadeout()
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xAED29C", Offset = "0xAED29C", VA = "0xAED29C")]
	private void UpdateAlphaByProperties(Material mat, float overrideAlpha = -1f)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xAED380", Offset = "0xAED380", VA = "0xAED380")]
	private void ChangeAlphaFade()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xAEBD64", Offset = "0xAEBD64", VA = "0xAEBD64")]
	private void CacheRenderers()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xAEC5CC", Offset = "0xAEC5CC", VA = "0xAEC5CC")]
	private void Fadein()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xAED678", Offset = "0xAED678", VA = "0xAED678")]
	public RFX4_EffectSettings()
	{
	}
}
[Token(Token = "0x2000030")]
public class RFX4_CollisionPropertyDeactiavtion : MonoBehaviour
{
	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTimeDelay;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindZone windZone;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.CollisionModule collisionModule;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAED984", Offset = "0xAED984", VA = "0xAED984")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAEDA04", Offset = "0xAEDA04", VA = "0xAEDA04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAEDA2C", Offset = "0xAEDA2C", VA = "0xAEDA2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAEDA68", Offset = "0xAEDA68", VA = "0xAEDA68")]
	public RFX4_CollisionPropertyDeactiavtion()
	{
	}
}
[Token(Token = "0x2000031")]
public class RFX4_ParticleGravityDelay : MonoBehaviour
{
	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve GravityByTime;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeMultiplier;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space]
	public float GravityMultiplierMin;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GravityMultiplierMax;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startTime;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startMinGrav;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startMaxGrav;

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAEDA78", Offset = "0xAEDA78", VA = "0xAEDA78")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAEDB44", Offset = "0xAEDB44", VA = "0xAEDB44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAEDBCC", Offset = "0xAEDBCC", VA = "0xAEDBCC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAEDC94", Offset = "0xAEDC94", VA = "0xAEDC94")]
	public RFX4_ParticleGravityDelay()
	{
	}
}
[Token(Token = "0x2000032")]
[ExecuteInEditMode]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleLight : MonoBehaviour
{
	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float LightIntencityMultiplayer;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseShadows;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int LightsLimit;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light[] lights;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isLocalSpace;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAEDCE8", Offset = "0xAEDCE8", VA = "0xAEDCE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAEE038", Offset = "0xAEE038", VA = "0xAEE038")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAEE3F8", Offset = "0xAEE3F8", VA = "0xAEE3F8")]
	public RFX4_ParticleLight()
	{
	}
}
[Token(Token = "0x2000033")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleTrail : MonoBehaviour
{
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 DefaultSizeMultiplayer;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float VertexLifeTime;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TrailLifeTime;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseShaderMaterial;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material TrailMaterial;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool UseColorOverLifeTime;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Gradient ColorOverLifeTime;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RFX4_ShaderProperties colorShaderProperty;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float ColorLifeTime;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool UseUvAnimation;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int TilesX;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int TilesY;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int FPS;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool IsLoop;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool GetVelocityFromParticleSystem;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float Gravity;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 Force;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float InheritVelocity;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float Drag;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool SmoothCurves;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, LineRenderer> dict;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ParticleSystem ps;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TrailRenderer[] trails;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Color psColor;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform targetT;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int layer;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool isLocalSpace;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform t;

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xAEE410", Offset = "0xAEE410", VA = "0xAEE410")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAEEDD0", Offset = "0xAEEDD0", VA = "0xAEEDD0")]
	private void ClearTrails()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAEE62C", Offset = "0xAEE62C", VA = "0xAEE62C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAEEFF0", Offset = "0xAEEFF0", VA = "0xAEEFF0")]
	private void InitTrailRenderer(GameObject go)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xAEEEC8", Offset = "0xAEEEC8", VA = "0xAEEEC8")]
	private void RemoveEmptyTrails()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xAEF0C8", Offset = "0xAEF0C8", VA = "0xAEF0C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xAEF2C8", Offset = "0xAEF2C8", VA = "0xAEF2C8")]
	public RFX4_ParticleTrail()
	{
	}
}
[Token(Token = "0x2000034")]
[ExecuteInEditMode]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_Turbulence : MonoBehaviour
{
	[Token(Token = "0x2000035")]
	public enum MoveMethodEnum
	{
		[Token(Token = "0x400016B")]
		Position,
		[Token(Token = "0x400016C")]
		Velocity,
		[Token(Token = "0x400016D")]
		RelativePosition
	}

	[Token(Token = "0x2000036")]
	public enum PerfomanceEnum
	{
		[Token(Token = "0x400016F")]
		High,
		[Token(Token = "0x4000170")]
		Low
	}

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TurbulenceStrenght;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool TurbulenceByTime;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve TurbulenceStrengthByTime;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 Frequency;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 OffsetSpeed;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 Amplitude;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 GlobalForce;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool UseGlobalOffset;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MoveMethodEnum MoveMethod;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PerfomanceEnum Perfomance;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float ThreshholdSpeed;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float lastStopTime;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 currentOffset;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float deltaTime;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float deltaTimeLastUpdateOffset;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float time;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int currentSplit;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float fpsTime;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int FPS;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int splitUpdate;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private PerfomanceEnum perfomanceOldSettings;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool skipFrame;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform t;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float currentDelay;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xAEF468", Offset = "0xAEF468", VA = "0xAEF468")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xAEF620", Offset = "0xAEF620", VA = "0xAEF620")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAEF628", Offset = "0xAEF628", VA = "0xAEF628")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAEF5D0", Offset = "0xAEF5D0", VA = "0xAEF5D0")]
	private void UpdatePerfomanceSettings()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAEF834", Offset = "0xAEF834", VA = "0xAEF834")]
	private void UpdateTurbulence()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xAEFF10", Offset = "0xAEFF10", VA = "0xAEFF10")]
	public RFX4_Turbulence()
	{
	}
}
[Token(Token = "0x2000037")]
public class RFX4_MobileDistortion : MonoBehaviour
{
	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer buf;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool bufferIsAdded;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xAEFFC0", Offset = "0xAEFFC0", VA = "0xAEFFC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xAF0020", Offset = "0xAF0020", VA = "0xAF0020")]
	private void CreateBuffer()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xAF0274", Offset = "0xAF0274", VA = "0xAF0274")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xAF02AC", Offset = "0xAF02AC", VA = "0xAF02AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xAF0278", Offset = "0xAF0278", VA = "0xAF0278")]
	private void AddBuffer()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xAF02B0", Offset = "0xAF02B0", VA = "0xAF02B0")]
	private void RemoveBuffer()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xAF02E0", Offset = "0xAF02E0", VA = "0xAF02E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xAF0300", Offset = "0xAF0300", VA = "0xAF0300")]
	private bool IsSupportedHdr()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xAF0320", Offset = "0xAF0320", VA = "0xAF0320")]
	public RFX4_MobileDistortion()
	{
	}
}
[Token(Token = "0x2000038")]
public class RFX4_PerPlatformSettings : MonoBehaviour
{
	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DisableOnMobiles;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RenderMobileDistortion;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.1f, 1f)]
	public float ParticleBudgetForMobiles;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isMobile;

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xAF0330", Offset = "0xAF0330", VA = "0xAF0330")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xAF0334", Offset = "0xAF0334", VA = "0xAF0334")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xAF0770", Offset = "0xAF0770", VA = "0xAF0770")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xAF0888", Offset = "0xAF0888", VA = "0xAF0888")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xAF0884", Offset = "0xAF0884", VA = "0xAF0884")]
	private void LWRP_Rendering()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xAF088C", Offset = "0xAF088C", VA = "0xAF088C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xAF0394", Offset = "0xAF0394", VA = "0xAF0394")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xAF039C", Offset = "0xAF039C", VA = "0xAF039C")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xAF0990", Offset = "0xAF0990", VA = "0xAF0990")]
	public RFX4_PerPlatformSettings()
	{
	}
}
[Token(Token = "0x2000039")]
public class RFX4_CameraShake : MonoBehaviour
{
	[Token(Token = "0x200003A")]
	[CompilerGenerated]
	private sealed class <Shake>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_CameraShake <>4__this;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <camT>5__3;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <originalCamRotation>5__4;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <direction>5__5;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <time>5__6;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <randomStart>5__7;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <distanceDamper>5__8;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 <oldRotation>5__9;

		[Token(Token = "0x17000014")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000108")]
			[Address(RVA = "0xAF11FC", Offset = "0xAF11FC", VA = "0xAF11FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0xAF1244", Offset = "0xAF1244", VA = "0xAF1244", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0xAF0B7C", Offset = "0xAF0B7C", VA = "0xAF0B7C")]
		[DebuggerHidden]
		public <Shake>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0xAF0C00", Offset = "0xAF0C00", VA = "0xAF0C00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0xAF0C04", Offset = "0xAF0C04", VA = "0xAF0C04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0xAF1204", Offset = "0xAF1204", VA = "0xAF1204", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ShakeCurve;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Magnitude;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float DistanceForce;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RotationDamper;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsEnabled;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isPlaying;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xAF09A0", Offset = "0xAF09A0", VA = "0xAF09A0")]
	private void PlayShake()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xAF0A40", Offset = "0xAF0A40", VA = "0xAF0A40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xAF0A5C", Offset = "0xAF0A5C", VA = "0xAF0A5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xAF09CC", Offset = "0xAF09CC", VA = "0xAF09CC")]
	[IteratorStateMachine(typeof(<Shake>d__12))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xAF0BA4", Offset = "0xAF0BA4", VA = "0xAF0BA4")]
	public RFX4_CameraShake()
	{
	}
}
[Token(Token = "0x200003B")]
public static class RFX4_ColorHelper
{
	[Token(Token = "0x200003C")]
	public struct HSBColor
	{
		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000112")]
		[Address(RVA = "0xAF124C", Offset = "0xAF124C", VA = "0xAF124C")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x400018D")]
	private const float TOLERANCE = 0.0001f;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xAEC800", Offset = "0xAEC800", VA = "0xAEC800")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xAF1258", Offset = "0xAF1258", VA = "0xAF1258")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xAEB770", Offset = "0xAEB770", VA = "0xAEB770")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xAEC970", Offset = "0xAEC970", VA = "0xAEC970")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xAF148C", Offset = "0xAF148C", VA = "0xAF148C")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xAF1550", Offset = "0xAF1550", VA = "0xAF1550")]
	private static Material setMatAlphaColor(Material mat, string name, float alpha)
	{
		return null;
	}
}
[Token(Token = "0x200003D")]
public class RFX4_CopyPosition : MonoBehaviour
{
	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CopiedTransform;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xAF190C", Offset = "0xAF190C", VA = "0xAF190C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xAF1930", Offset = "0xAF1930", VA = "0xAF1930")]
	private void Update()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xAF1964", Offset = "0xAF1964", VA = "0xAF1964")]
	public RFX4_CopyPosition()
	{
	}
}
[Token(Token = "0x200003E")]
[ExecuteInEditMode]
public class RFX4_CustomLight : MonoBehaviour
{
	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int MaxLightsCount;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Texture2D PointLightAttenuation;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Light> sceneLights;

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xAF196C", Offset = "0xAF196C", VA = "0xAF196C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xAF1B54", Offset = "0xAF1B54", VA = "0xAF1B54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xAF2DEC", Offset = "0xAF2DEC", VA = "0xAF2DEC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xAF1D34", Offset = "0xAF1D34", VA = "0xAF1D34")]
	private List<Light> GetAllLights()
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xAF1FAC", Offset = "0xAF1FAC", VA = "0xAF1FAC")]
	private int FillDirectionalLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xAF2548", Offset = "0xAF2548", VA = "0xAF2548")]
	private int FillPointLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xAF27D4", Offset = "0xAF27D4", VA = "0xAF27D4")]
	private Vector4[] ListToArrayWithMaxCount(List<Vector4> list, int count)
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xAF2204", Offset = "0xAF2204", VA = "0xAF2204")]
	private List<Light> SortPointLightsByDistance(List<Light> lights)
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xAF2910", Offset = "0xAF2910", VA = "0xAF2910")]
	public Color SampleLightProbesUp(Vector3 pos, float grayScaleFactor)
	{
		return default(Color);
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xAF1A40", Offset = "0xAF1A40", VA = "0xAF1A40")]
	private Texture2D GeneratePointAttenuationTexture()
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xAF2F6C", Offset = "0xAF2F6C", VA = "0xAF2F6C")]
	public RFX4_CustomLight()
	{
	}
}
[Token(Token = "0x200003F")]
public class RFX4_DeactivateByTime : MonoBehaviour
{
	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject DeactivatedGameObject;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DeactivateTime;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isActiveState;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentTime;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xAF2FC0", Offset = "0xAF2FC0", VA = "0xAF2FC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xAF2FD0", Offset = "0xAF2FD0", VA = "0xAF2FD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xAF3034", Offset = "0xAF3034", VA = "0xAF3034")]
	public RFX4_DeactivateByTime()
	{
	}
}
[Token(Token = "0x2000040")]
public class RFX4_DeactivateRigidbodyByTime : MonoBehaviour
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelayToDeactivate;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xAF3044", Offset = "0xAF3044", VA = "0xAF3044")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xAF30DC", Offset = "0xAF30DC", VA = "0xAF30DC")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xAF314C", Offset = "0xAF314C", VA = "0xAF314C")]
	public RFX4_DeactivateRigidbodyByTime()
	{
	}
}
[Token(Token = "0x2000041")]
[ExecuteInEditMode]
public class RFX4_Decal : MonoBehaviour
{
	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsScreenSpace;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.MainModule psMain;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer rend;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xAF315C", Offset = "0xAF315C", VA = "0xAF315C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xAF33D4", Offset = "0xAF33D4", VA = "0xAF33D4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xAF35BC", Offset = "0xAF35BC", VA = "0xAF35BC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xAF3780", Offset = "0xAF3780", VA = "0xAF3780")]
	public RFX4_Decal()
	{
	}
}
[Token(Token = "0x2000042")]
public class RFX4_DemoReactivation : MonoBehaviour
{
	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ReactivationTime;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Effect;

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xAF3790", Offset = "0xAF3790", VA = "0xAF3790")]
	private void Start()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xAF37E4", Offset = "0xAF37E4", VA = "0xAF37E4")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xAF381C", Offset = "0xAF381C", VA = "0xAF381C")]
	public RFX4_DemoReactivation()
	{
	}
}
[Token(Token = "0x2000043")]
public class RFX4_EffectEvent : MonoBehaviour
{
	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CharacterEffect;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CharacterAttachPoint;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float CharacterEffect_DestroyTime;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public GameObject CharacterEffect2;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CharacterAttachPoint2;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float CharacterEffect2_DestroyTime;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	public GameObject MainEffect;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform AttachPoint;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float Effect_DestroyTime;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Space]
	public GameObject AdditionalEffect;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform AdditionalEffectAttachPoint;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float AdditionalEffect_DestroyTime;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public bool IsMobile;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xAF382C", Offset = "0xAF382C", VA = "0xAF382C")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xAF3A4C", Offset = "0xAF3A4C", VA = "0xAF3A4C")]
	public void ActivateAdditionalEffect()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xAF3C38", Offset = "0xAF3C38", VA = "0xAF3C38")]
	public void ActivateCharacterEffect()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xAF3DE8", Offset = "0xAF3DE8", VA = "0xAF3DE8")]
	public void ActivateCharacterEffect2()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xAF39C0", Offset = "0xAF39C0", VA = "0xAF39C0")]
	private void UpdateEffectForMobileIsNeed(GameObject instance)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xAF3F84", Offset = "0xAF3F84", VA = "0xAF3F84")]
	public RFX4_EffectEvent()
	{
	}
}
[Token(Token = "0x2000044")]
[RequireComponent(typeof(Renderer))]
[ExecuteInEditMode]
public class RFX4_MaterialQueue : MonoBehaviour
{
	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Background=1000, Geometry=2000, AlphaTest=2450, Transparent=3000, Overlay=4000")]
	public int queue;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] queues;

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xAF3FA0", Offset = "0xAF3FA0", VA = "0xAF3FA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xAF4120", Offset = "0xAF4120", VA = "0xAF4120")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xAF4124", Offset = "0xAF4124", VA = "0xAF4124")]
	private void Update()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xAF414C", Offset = "0xAF414C", VA = "0xAF414C")]
	public RFX4_MaterialQueue()
	{
	}
}
[Token(Token = "0x2000045")]
public class RFX4_OnEnableResetTransform : MonoBehaviour
{
	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform t;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPosition;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRotation;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startScale;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xAF415C", Offset = "0xAF415C", VA = "0xAF415C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xAF4240", Offset = "0xAF4240", VA = "0xAF4240")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xAF4324", Offset = "0xAF4324", VA = "0xAF4324")]
	public RFX4_OnEnableResetTransform()
	{
	}
}
[Token(Token = "0x2000046")]
public class RFX4_ParticleCollisionGameObject : MonoBehaviour
{
	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject InstancedGO;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DestroyDelay;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject RotationParent;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xAF432C", Offset = "0xAF432C", VA = "0xAF432C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xAF43A8", Offset = "0xAF43A8", VA = "0xAF43A8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xAF4600", Offset = "0xAF4600", VA = "0xAF4600")]
	public RFX4_ParticleCollisionGameObject()
	{
	}
}
[Token(Token = "0x2000047")]
[ExecuteInEditMode]
public class RFX4_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StopDistance;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xAF4690", Offset = "0xAF4690", VA = "0xAF4690")]
	private void Start()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xAF4710", Offset = "0xAF4710", VA = "0xAF4710")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xAF4B3C", Offset = "0xAF4B3C", VA = "0xAF4B3C")]
	public RFX4_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x2000048")]
public class RFX4_PhysicsMotion : MonoBehaviour
{
	[Token(Token = "0x2000049")]
	public class RFX4_CollisionInfo : EventArgs
	{
		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 HitPoint;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider HitCollider;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HitGameObject;

		[Token(Token = "0x600014D")]
		[Address(RVA = "0xAF5684", Offset = "0xAF5684", VA = "0xAF5684")]
		public RFX4_CollisionInfo()
		{
		}
	}

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool UseCollisionDetect;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxDistnace;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Mass;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float RandomSpeedOffset;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AirDrag;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseGravity;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ForceMode ForceMode;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 AddRealtimeForce;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MinSpeed;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float ColliderRadius;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool FreezeRotation;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool UseTargetPositionAfterCollision;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject EffectOnCollision;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool LookAtNormal;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float CollisionEffectDestroyAfter;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] DeactivateObjectsAfterCollision;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rigid;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SphereCollider collid;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ContactPoint lastContactPoint;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Collider lastCollider;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 offsetColliderPoint;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool isCollided;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject targetAnchor;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool isInitializedForce;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float currentSpeedOffset;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RFX4_EffectSettings effectSettings;

	[Token(Token = "0x14000002")]
	public event EventHandler<RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0xAF4B50", Offset = "0xAF4B50", VA = "0xAF4B50")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000143")]
		[Address(RVA = "0xAF4C00", Offset = "0xAF4C00", VA = "0xAF4C00")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xAF4CB0", Offset = "0xAF4CB0", VA = "0xAF4CB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xAF4E4C", Offset = "0xAF4E4C", VA = "0xAF4E4C")]
	private void InitializeRigid()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xAF4EE4", Offset = "0xAF4EE4", VA = "0xAF4EE4")]
	private void InitializeForce()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xAF5044", Offset = "0xAF5044", VA = "0xAF5044")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xAF56DC", Offset = "0xAF56DC", VA = "0xAF56DC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xAF5AD8", Offset = "0xAF5AD8", VA = "0xAF5AD8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xAF59FC", Offset = "0xAF59FC", VA = "0xAF59FC")]
	private void RemoveRigidbody()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xAF5B74", Offset = "0xAF5B74", VA = "0xAF5B74")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xAF5C94", Offset = "0xAF5C94", VA = "0xAF5C94")]
	public RFX4_PhysicsMotion()
	{
	}
}
[Token(Token = "0x200004A")]
public class RFX4_PhysXSetImpulse : MonoBehaviour
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Force;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ForceMode ForceMode;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rig;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAF5D44", Offset = "0xAF5D44", VA = "0xAF5D44")]
	private void Start()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xAF5DB8", Offset = "0xAF5DB8", VA = "0xAF5DB8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xAF5E64", Offset = "0xAF5E64", VA = "0xAF5E64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xAF5F24", Offset = "0xAF5F24", VA = "0xAF5F24")]
	public RFX4_PhysXSetImpulse()
	{
	}
}
[Token(Token = "0x200004B")]
public class RFX4_RaycastCollision : MonoBehaviour
{
	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RaycastDistance;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Effects;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Offset;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float EnableTimeDelay;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float DestroyTime;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UsePivotPosition;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseNormalRotation;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool IsWorldSpace;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool RealTimeUpdateRaycast;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DestroyAfterDisabling;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x40001F4")]
	private const string particlesAdditionalName = "Distance";

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem[] distanceParticles;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canUpdate;

	[Token(Token = "0x14000003")]
	public event EventHandler<RFX4_PhysicsMotion.RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000152")]
		[Address(RVA = "0xAF5F34", Offset = "0xAF5F34", VA = "0xAF5F34")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000153")]
		[Address(RVA = "0xAF5FE4", Offset = "0xAF5FE4", VA = "0xAF5FE4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAF6094", Offset = "0xAF6094", VA = "0xAF6094")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAF6108", Offset = "0xAF6108", VA = "0xAF6108")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAF6A24", Offset = "0xAF6A24", VA = "0xAF6A24")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAF6B8C", Offset = "0xAF6B8C", VA = "0xAF6B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAF61B8", Offset = "0xAF61B8", VA = "0xAF61B8")]
	private void UpdateRaycast()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xAF6B9C", Offset = "0xAF6B9C", VA = "0xAF6B9C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xAF6C6C", Offset = "0xAF6C6C", VA = "0xAF6C6C")]
	public RFX4_RaycastCollision()
	{
	}
}
[Token(Token = "0x200004C")]
public class RFX4_ReplaceModelOnCollision : MonoBehaviour
{
	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PhysicsObjects;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCollided;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAF6D14", Offset = "0xAF6D14", VA = "0xAF6D14")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xAF6E28", Offset = "0xAF6E28", VA = "0xAF6E28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xAF6F24", Offset = "0xAF6F24", VA = "0xAF6F24")]
	public RFX4_ReplaceModelOnCollision()
	{
	}
}
[Token(Token = "0x200004D")]
public class RFX4_RotateAround : MonoBehaviour
{
	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Offset;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 RotateVector;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float LifeTime;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentTime;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion rotation;

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xAF6F2C", Offset = "0xAF6F2C", VA = "0xAF6F2C")]
	private void Start()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xAF6F7C", Offset = "0xAF6F7C", VA = "0xAF6F7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xAF700C", Offset = "0xAF700C", VA = "0xAF700C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xAF70AC", Offset = "0xAF70AC", VA = "0xAF70AC")]
	public RFX4_RotateAround()
	{
	}
}
[Token(Token = "0x200004E")]
public class RFX4_StartDelay : MonoBehaviour
{
	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ActivatedGameObject;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float currentTime;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isEnabled;

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xAF7124", Offset = "0xAF7124", VA = "0xAF7124")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xAF7154", Offset = "0xAF7154", VA = "0xAF7154")]
	private void Update()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xAF71BC", Offset = "0xAF71BC", VA = "0xAF71BC")]
	public RFX4_StartDelay()
	{
	}
}
[Token(Token = "0x200004F")]
public enum RFX4_TextureShaderProperties
{
	[Token(Token = "0x4000206")]
	_MainTex,
	[Token(Token = "0x4000207")]
	_DistortTex,
	[Token(Token = "0x4000208")]
	_Mask,
	[Token(Token = "0x4000209")]
	_Cutout,
	[Token(Token = "0x400020A")]
	_CutoutTex,
	[Token(Token = "0x400020B")]
	_Bump,
	[Token(Token = "0x400020C")]
	_BumpTex,
	[Token(Token = "0x400020D")]
	_EmissionTex
}
[Token(Token = "0x2000050")]
public class RFX4_TornadoParticles : MonoBehaviour
{
	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material TornadoMaterial;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light myLight;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector4 _twistScale;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int materialID;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xAF71CC", Offset = "0xAF71CC", VA = "0xAF71CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xAF73D4", Offset = "0xAF73D4", VA = "0xAF73D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xAF76A4", Offset = "0xAF76A4", VA = "0xAF76A4")]
	public RFX4_TornadoParticles()
	{
	}
}
[Token(Token = "0x2000051")]
[RequireComponent(typeof(LineRenderer))]
public class RFX4_TrailRenderer : MonoBehaviour
{
	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float VertexLifeTime;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TrailLifeTime;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Gravity;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 Force;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float InheritVelocity;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Drag;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool SmoothCurves;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Vector3> positions;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<float> currentTimes;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector3> velocities;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public float currentLifeTime;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform t;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 prevPosition;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 startPosition;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int curveCount;

	[Token(Token = "0x400022D")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x400022E")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x400022F")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float currentVelocity;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float turbulenceRandomOffset;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isInitialized;

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xAF76B4", Offset = "0xAF76B4", VA = "0xAF76B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xAF7A48", Offset = "0xAF7A48", VA = "0xAF7A48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xAF76D0", Offset = "0xAF76D0", VA = "0xAF76D0")]
	private void Init()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xAF7A58", Offset = "0xAF7A58", VA = "0xAF7A58")]
	private void Update()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xAF872C", Offset = "0xAF872C", VA = "0xAF872C")]
	private int GetLastDeletedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xAF7B9C", Offset = "0xAF7B9C", VA = "0xAF7B9C")]
	private void UpdatePositionsCount()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xAF90A8", Offset = "0xAF90A8", VA = "0xAF90A8")]
	private void AddInterpolatedPositions(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xAF8838", Offset = "0xAF8838", VA = "0xAF8838")]
	private void RemovePositionsBeforeIndex(int lastDeletedIndex)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xAF7D84", Offset = "0xAF7D84", VA = "0xAF7D84")]
	private void UpdateForce()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xAF8200", Offset = "0xAF8200", VA = "0xAF8200")]
	private void UpdateImpulse()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xAF8498", Offset = "0xAF8498", VA = "0xAF8498")]
	private void UpdateVelocity()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xAF8954", Offset = "0xAF8954", VA = "0xAF8954")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xAF8FA4", Offset = "0xAF8FA4", VA = "0xAF8FA4")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xAF93DC", Offset = "0xAF93DC", VA = "0xAF93DC")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xAF96C0", Offset = "0xAF96C0", VA = "0xAF96C0")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xAF95AC", Offset = "0xAF95AC", VA = "0xAF95AC")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xAF9A18", Offset = "0xAF9A18", VA = "0xAF9A18")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xAF9AAC", Offset = "0xAF9AAC", VA = "0xAF9AAC")]
	public RFX4_TrailRenderer()
	{
	}
}
[Token(Token = "0x2000052")]
[ExecuteInEditMode]
public class RFX4_UVAnimation : MonoBehaviour
{
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 360f)]
	public int FPS;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int StartFrameOffset;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool IsReverse;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RFX4_TextureShaderProperties[] TextureNames;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int count;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer currentRenderer;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Projector projector;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material instanceMaterial;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float animationStartTime;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool canUpdate;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int previousIndex;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int totalFrames;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int currentIndex;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 size;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitialized;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float prevRealTime;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAF9B9C", Offset = "0xAF9B9C", VA = "0xAF9B9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAF9DD8", Offset = "0xAF9DD8", VA = "0xAF9DD8")]
	private void Start()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAF9DF4", Offset = "0xAF9DF4", VA = "0xAF9DF4")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xAF9E54", Offset = "0xAF9E54", VA = "0xAF9E54")]
	private void Update()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xAF9BAC", Offset = "0xAF9BAC", VA = "0xAF9BAC")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xAF9E1C", Offset = "0xAF9E1C", VA = "0xAF9E1C")]
	private void ManualUpdate()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xAF9E7C", Offset = "0xAF9E7C", VA = "0xAF9E7C")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xAF9F7C", Offset = "0xAF9F7C", VA = "0xAF9F7C")]
	private void SetSpriteAnimation()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xAFA314", Offset = "0xAFA314", VA = "0xAFA314")]
	public float DeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xAFA1A4", Offset = "0xAFA1A4", VA = "0xAFA1A4")]
	private void SetSpriteAnimationIterpolated()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xAFA36C", Offset = "0xAFA36C", VA = "0xAFA36C")]
	public RFX4_UVAnimation()
	{
	}
}
[Token(Token = "0x2000053")]
public class RFX4_UVScroll : MonoBehaviour
{
	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 UvScrollMultiplier;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RFX4_TextureShaderProperties TextureName;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 uvOffset;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xAFA3EC", Offset = "0xAFA3EC", VA = "0xAFA3EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xAFA5EC", Offset = "0xAFA5EC", VA = "0xAFA5EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xAFA6D4", Offset = "0xAFA6D4", VA = "0xAFA6D4")]
	public RFX4_UVScroll()
	{
	}
}
[Token(Token = "0x2000054")]
public class RFX4_MobileBloom : MonoBehaviour
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Camera render texture resolution")]
	[Range(0.2f, 1f)]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.05f, 2f)]
	[Tooltip("Blend factor of the result image.")]
	public float Intensity;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float Threshold;

	[Token(Token = "0x400024F")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/RFX4_Bloom";

	[Token(Token = "0x4000250")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture Source;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material _bloomMaterial;

	[Token(Token = "0x17000016")]
	private Material bloomMaterial
	{
		[Token(Token = "0x6000188")]
		[Address(RVA = "0xAFA738", Offset = "0xAFA738", VA = "0xAFA738")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xAFA880", Offset = "0xAFA880", VA = "0xAFA880")]
	private void Start()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xAFA884", Offset = "0xAFA884", VA = "0xAFA884")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xAFA93C", Offset = "0xAFA93C", VA = "0xAFA93C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xAFA914", Offset = "0xAFA914", VA = "0xAFA914")]
	private RenderTextureFormat SupportedHdrFormat()
	{
		return default(RenderTextureFormat);
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xAFA980", Offset = "0xAFA980", VA = "0xAFA980")]
	private void UpdateBloom(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xAFB0C0", Offset = "0xAFB0C0", VA = "0xAFB0C0")]
	public RFX4_MobileBloom()
	{
	}
}
[Token(Token = "0x2000055")]
public class FPS : MonoBehaviour
{
	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UpdateInterval;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xAFB198", Offset = "0xAFB198", VA = "0xAFB198")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xAFB230", Offset = "0xAFB230", VA = "0xAFB230")]
	private void UpdateFPS()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAFB354", Offset = "0xAFB354", VA = "0xAFB354")]
	private void Update()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAFB364", Offset = "0xAFB364", VA = "0xAFB364")]
	public FPS()
	{
	}
}
[Token(Token = "0x2000056")]
public class RFX4_Debug : MonoBehaviour
{
	[Token(Token = "0x6000194")]
	[Address(RVA = "0xAFB374", Offset = "0xAFB374", VA = "0xAFB374")]
	private void Start()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAFB500", Offset = "0xAFB500", VA = "0xAFB500")]
	private void CollisionEnter(object sender, RFX4_PhysicsMotion.RFX4_CollisionInfo e)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAFB5D4", Offset = "0xAFB5D4", VA = "0xAFB5D4")]
	public RFX4_Debug()
	{
	}
}
[Token(Token = "0x2000057")]
public class RFX4_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] ReactivationTimes;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light[] NightLights;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture HUETexture;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isDay;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentNomber;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentInstance;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float dpiScale;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float colorHUE;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startSunIntensity;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion startSunRotation;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Color startAmbientLight;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float startAmbientIntencity;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float startReflectionIntencity;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private LightShadows startLightShadows;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isButtonPressed;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAFB5DC", Offset = "0xAFB5DC", VA = "0xAFB5DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xAFBB44", Offset = "0xAFBB44", VA = "0xAFBB44")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xAFB8F8", Offset = "0xAFB8F8", VA = "0xAFB8F8")]
	private void ChangeDayNight()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xAFB730", Offset = "0xAFB730", VA = "0xAFB730")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xAFBEF4", Offset = "0xAFBEF4", VA = "0xAFBEF4")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xAFBFF8", Offset = "0xAFBFF8", VA = "0xAFBFF8")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xAFC030", Offset = "0xAFC030", VA = "0xAFC030")]
	public RFX4_DemoGUI()
	{
	}
}
[Token(Token = "0x2000058")]
public class RFX4_FPS : MonoBehaviour
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xAFC104", Offset = "0xAFC104", VA = "0xAFC104")]
	private void Awake()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xAFC154", Offset = "0xAFC154", VA = "0xAFC154")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xAFC24C", Offset = "0xAFC24C", VA = "0xAFC24C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xAFC2A0", Offset = "0xAFC2A0", VA = "0xAFC2A0")]
	public RFX4_FPS()
	{
	}
}
[Token(Token = "0x2000059")]
public class RFX4_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xAFC314", Offset = "0xAFC314", VA = "0xAFC314")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xAFC340", Offset = "0xAFC340", VA = "0xAFC340")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xAFC798", Offset = "0xAFC798", VA = "0xAFC798")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xAFC7D4", Offset = "0xAFC7D4", VA = "0xAFC7D4")]
	public RFX4_MouseOrbit()
	{
	}
}
[Token(Token = "0x200005A")]
public class RFX4_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xAFC7F0", Offset = "0xAFC7F0", VA = "0xAFC7F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xAFC870", Offset = "0xAFC870", VA = "0xAFC870")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xAFC8E4", Offset = "0xAFC8E4", VA = "0xAFC8E4")]
	public RFX4_RealtimeReflection()
	{
	}
}
[Token(Token = "0x200005B")]
public class NextLevelLoad : MonoBehaviour
{
	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool once;

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xAFC8EC", Offset = "0xAFC8EC", VA = "0xAFC8EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xAFC8F4", Offset = "0xAFC8F4", VA = "0xAFC8F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xAFC994", Offset = "0xAFC994", VA = "0xAFC994")]
	private void LoadScene()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xAFCA08", Offset = "0xAFCA08", VA = "0xAFCA08")]
	public NextLevelLoad()
	{
	}
}
[Token(Token = "0x200005C")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x200005D")]
	public delegate void OnClick();

	[Token(Token = "0x200005E")]
	public delegate void OnToggleValueChange(UnityEngine.UI.Toggle t);

	[Token(Token = "0x200005F")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000060")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x400027C")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400027D")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x400027E")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector2[] insertPositions;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xAFCA10", Offset = "0xAFCA10", VA = "0xAFCA10")]
	public void Awake()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xAFCF7C", Offset = "0xAFCF7C", VA = "0xAFCF7C")]
	public void Show()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xAFD2F8", Offset = "0xAFD2F8", VA = "0xAFD2F8")]
	public void Hide()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xAFD474", Offset = "0xAFD474", VA = "0xAFD474")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xAFD68C", Offset = "0xAFD68C", VA = "0xAFD68C")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xAFD2E8", Offset = "0xAFD2E8", VA = "0xAFD2E8")]
	private void Relayout()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xAFD980", Offset = "0xAFD980", VA = "0xAFD980")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xAFDCFC", Offset = "0xAFDCFC", VA = "0xAFDCFC")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xAFE0AC", Offset = "0xAFE0AC", VA = "0xAFE0AC")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xAFE1A4", Offset = "0xAFE1A4", VA = "0xAFE1A4")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xAFE374", Offset = "0xAFE374", VA = "0xAFE374")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xAFE40C", Offset = "0xAFE40C", VA = "0xAFE40C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xAFE5E8", Offset = "0xAFE5E8", VA = "0xAFE5E8")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xAFE7E4", Offset = "0xAFE7E4", VA = "0xAFE7E4")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xAFEADC", Offset = "0xAFEADC", VA = "0xAFEADC")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xAFEBCC", Offset = "0xAFEBCC", VA = "0xAFEBCC")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xAFEC60", Offset = "0xAFEC60", VA = "0xAFEC60")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x2000066")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xAFF2E0", Offset = "0xAFF2E0", VA = "0xAFF2E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xAFF384", Offset = "0xAFF384", VA = "0xAFF384")]
	private void Update()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xAFF420", Offset = "0xAFF420", VA = "0xAFF420")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xAFF458", Offset = "0xAFF458", VA = "0xAFF458")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x2000067")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x2000068")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x40002AE")]
		On,
		[Token(Token = "0x40002AF")]
		Off,
		[Token(Token = "0x40002B0")]
		OnWhenHitTarget
	}

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000017")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xAFF460", Offset = "0xAFF460", VA = "0xAFF460")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xAFCF3C", Offset = "0xAFCF3C", VA = "0xAFCF3C")]
		set
		{
		}
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xAFF468", Offset = "0xAFF468", VA = "0xAFF468")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xAFF4C0", Offset = "0xAFF4C0", VA = "0xAFF4C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xAFF5F8", Offset = "0xAFF5F8", VA = "0xAFF5F8", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xAFF614", Offset = "0xAFF614", VA = "0xAFF614", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xAFF664", Offset = "0xAFF664", VA = "0xAFF664")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xAFF804", Offset = "0xAFF804", VA = "0xAFF804")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xAFF914", Offset = "0xAFF914", VA = "0xAFF914")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xAFF998", Offset = "0xAFF998", VA = "0xAFF998")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xAFFA58", Offset = "0xAFFA58", VA = "0xAFFA58")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xAFFB00", Offset = "0xAFFB00", VA = "0xAFFB00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xAFFBEC", Offset = "0xAFFBEC", VA = "0xAFFBEC")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x2000069")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x40002B1")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x40002B2")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x40002B3")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xAFFBFC", Offset = "0xAFFBFC", VA = "0xAFFBFC")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xAFFC04", Offset = "0xAFFC04", VA = "0xAFFC04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xAFFC94", Offset = "0xAFFC94", VA = "0xAFFC94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xAFFDB8", Offset = "0xAFFDB8", VA = "0xAFFDB8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xAFFEDC", Offset = "0xAFFEDC", VA = "0xAFFEDC")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xB001FC", Offset = "0xB001FC", VA = "0xB001FC")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xB0045C", Offset = "0xB0045C", VA = "0xB0045C")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x200006A")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xB00BB4", Offset = "0xB00BB4", VA = "0xB00BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xB00C60", Offset = "0xB00C60", VA = "0xB00C60")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x200006B")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x200006C")]
	public enum States
	{
		[Token(Token = "0x40002E1")]
		Ready,
		[Token(Token = "0x40002E2")]
		Aim,
		[Token(Token = "0x40002E3")]
		CancelAim,
		[Token(Token = "0x40002E4")]
		PreTeleport,
		[Token(Token = "0x40002E5")]
		CancelTeleport,
		[Token(Token = "0x40002E6")]
		Teleporting,
		[Token(Token = "0x40002E7")]
		PostTeleport
	}

	[Token(Token = "0x200006D")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40002E9")]
		None,
		[Token(Token = "0x40002EA")]
		Aim,
		[Token(Token = "0x40002EB")]
		PreTeleport,
		[Token(Token = "0x40002EC")]
		Teleport
	}

	[Token(Token = "0x200006E")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40002EE")]
		Point,
		[Token(Token = "0x40002EF")]
		Sphere,
		[Token(Token = "0x40002F0")]
		Capsule
	}

	[Token(Token = "0x200006F")]
	public class AimData
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x1700001B")]
		public List<Vector3> Points
		{
			[Token(Token = "0x6000227")]
			[Address(RVA = "0xB029A0", Offset = "0xB029A0", VA = "0xB029A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000228")]
			[Address(RVA = "0xB029A8", Offset = "0xB029A8", VA = "0xB029A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xB02918", Offset = "0xB02918", VA = "0xB02918")]
		public AimData()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xB029B0", Offset = "0xB029B0", VA = "0xB029B0")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000070")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600022D")]
			[Address(RVA = "0xB02B18", Offset = "0xB02B18", VA = "0xB02B18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022F")]
			[Address(RVA = "0xB02B60", Offset = "0xB02B60", VA = "0xB02B60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xB0166C", Offset = "0xB0166C", VA = "0xB0166C")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xB02A08", Offset = "0xB02A08", VA = "0xB02A08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0xB02A0C", Offset = "0xB02A0C", VA = "0xB02A0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xB02B20", Offset = "0xB02B20", VA = "0xB02B20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000071")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000233")]
			[Address(RVA = "0xB02CC4", Offset = "0xB02CC4", VA = "0xB02CC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000235")]
			[Address(RVA = "0xB02D0C", Offset = "0xB02D0C", VA = "0xB02D0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0xB01AF4", Offset = "0xB01AF4", VA = "0xB01AF4")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0xB02B68", Offset = "0xB02B68", VA = "0xB02B68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0xB02B6C", Offset = "0xB02B6C", VA = "0xB02B6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0xB02CCC", Offset = "0xB02CCC", VA = "0xB02CCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000072")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000239")]
			[Address(RVA = "0xB02DC4", Offset = "0xB02DC4", VA = "0xB02DC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600023B")]
			[Address(RVA = "0xB02E0C", Offset = "0xB02E0C", VA = "0xB02E0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0xB01CC8", Offset = "0xB01CC8", VA = "0xB01CC8")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0xB02D14", Offset = "0xB02D14", VA = "0xB02D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xB02D18", Offset = "0xB02D18", VA = "0xB02D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xB02DCC", Offset = "0xB02DCC", VA = "0xB02DCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000073")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600023F")]
			[Address(RVA = "0xB02EFC", Offset = "0xB02EFC", VA = "0xB02EFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000241")]
			[Address(RVA = "0xB02F44", Offset = "0xB02F44", VA = "0xB02F44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xB01E9C", Offset = "0xB01E9C", VA = "0xB01E9C")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0xB02E14", Offset = "0xB02E14", VA = "0xB02E14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xB02E18", Offset = "0xB02E18", VA = "0xB02E18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xB02F04", Offset = "0xB02F04", VA = "0xB02F04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000074")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000245")]
			[Address(RVA = "0xB02FFC", Offset = "0xB02FFC", VA = "0xB02FFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000247")]
			[Address(RVA = "0xB03044", Offset = "0xB03044", VA = "0xB03044", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xB02070", Offset = "0xB02070", VA = "0xB02070")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xB02F4C", Offset = "0xB02F4C", VA = "0xB02F4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0xB02F50", Offset = "0xB02F50", VA = "0xB02F50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0xB03004", Offset = "0xB03004", VA = "0xB03004", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600024B")]
			[Address(RVA = "0xB03130", Offset = "0xB03130", VA = "0xB03130", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600024D")]
			[Address(RVA = "0xB03178", Offset = "0xB03178", VA = "0xB03178", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0xB02244", Offset = "0xB02244", VA = "0xB02244")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xB0304C", Offset = "0xB0304C", VA = "0xB0304C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0xB03050", Offset = "0xB03050", VA = "0xB03050", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xB03138", Offset = "0xB03138", VA = "0xB03138", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000076")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000251")]
			[Address(RVA = "0xB03280", Offset = "0xB03280", VA = "0xB03280", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000253")]
			[Address(RVA = "0xB032C8", Offset = "0xB032C8", VA = "0xB032C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0xB02418", Offset = "0xB02418", VA = "0xB02418")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xB03180", Offset = "0xB03180", VA = "0xB03180", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0xB03184", Offset = "0xB03184", VA = "0xB03184", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0xB03288", Offset = "0xB03288", VA = "0xB03288", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000018")]
	public States CurrentState
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xB00CB0", Offset = "0xB00CB0", VA = "0xB00CB0")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xB00CB8", Offset = "0xB00CB8", VA = "0xB00CB8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xB00E88", Offset = "0xB00E88", VA = "0xB00E88")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001A")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xB00EAC", Offset = "0xB00EAC", VA = "0xB00EAC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xB00EB4", Offset = "0xB00EB4", VA = "0xB00EB4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xB00CC0", Offset = "0xB00CC0", VA = "0xB00CC0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xB00D70", Offset = "0xB00D70", VA = "0xB00D70")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0xB01534", Offset = "0xB01534", VA = "0xB01534")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0xB015D0", Offset = "0xB015D0", VA = "0xB015D0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x6000208")]
		[Address(RVA = "0xB01694", Offset = "0xB01694", VA = "0xB01694")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000209")]
		[Address(RVA = "0xB01730", Offset = "0xB01730", VA = "0xB01730")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xB017CC", Offset = "0xB017CC", VA = "0xB017CC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xB0187C", Offset = "0xB0187C", VA = "0xB0187C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xB01948", Offset = "0xB01948", VA = "0xB01948")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xB019E4", Offset = "0xB019E4", VA = "0xB019E4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xB01B1C", Offset = "0xB01B1C", VA = "0xB01B1C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000211")]
		[Address(RVA = "0xB01BB8", Offset = "0xB01BB8", VA = "0xB01BB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0xB01CF0", Offset = "0xB01CF0", VA = "0xB01CF0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000214")]
		[Address(RVA = "0xB01D8C", Offset = "0xB01D8C", VA = "0xB01D8C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000216")]
		[Address(RVA = "0xB01EC4", Offset = "0xB01EC4", VA = "0xB01EC4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000217")]
		[Address(RVA = "0xB01F60", Offset = "0xB01F60", VA = "0xB01F60")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x6000219")]
		[Address(RVA = "0xB02098", Offset = "0xB02098", VA = "0xB02098")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600021A")]
		[Address(RVA = "0xB02134", Offset = "0xB02134", VA = "0xB02134")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x600021C")]
		[Address(RVA = "0xB0226C", Offset = "0xB0226C", VA = "0xB0226C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600021D")]
		[Address(RVA = "0xB02308", Offset = "0xB02308", VA = "0xB02308")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x600021F")]
		[Address(RVA = "0xB02440", Offset = "0xB02440", VA = "0xB02440")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000220")]
		[Address(RVA = "0xB024F0", Offset = "0xB024F0", VA = "0xB024F0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xB00C68", Offset = "0xB00C68", VA = "0xB00C68")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xB00C8C", Offset = "0xB00C8C", VA = "0xB00C8C")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xB00E20", Offset = "0xB00E20", VA = "0xB00E20")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xB00EBC", Offset = "0xB00EBC", VA = "0xB00EBC")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xB01184", Offset = "0xB01184", VA = "0xB01184")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xB0122C", Offset = "0xB0122C", VA = "0xB0122C")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xB01318", Offset = "0xB01318", VA = "0xB01318")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xB01354", Offset = "0xB01354", VA = "0xB01354")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xB01404", Offset = "0xB01404", VA = "0xB01404")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xB01434", Offset = "0xB01434", VA = "0xB01434")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xB01494", Offset = "0xB01494", VA = "0xB01494", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xB0152C", Offset = "0xB0152C", VA = "0xB0152C", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xB014B8", Offset = "0xB014B8", VA = "0xB014B8")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xB0192C", Offset = "0xB0192C", VA = "0xB0192C")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xB01A80", Offset = "0xB01A80", VA = "0xB01A80")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xB01C54", Offset = "0xB01C54", VA = "0xB01C54")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xB01E28", Offset = "0xB01E28", VA = "0xB01E28")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xB01FFC", Offset = "0xB01FFC", VA = "0xB01FFC")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xB021D0", Offset = "0xB021D0", VA = "0xB021D0")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xB023A4", Offset = "0xB023A4", VA = "0xB023A4")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xB025A0", Offset = "0xB025A0", VA = "0xB025A0")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xB026B4", Offset = "0xB026B4", VA = "0xB026B4")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xB026E4", Offset = "0xB026E4", VA = "0xB026E4")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xB02820", Offset = "0xB02820", VA = "0xB02820")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xB02908", Offset = "0xB02908", VA = "0xB02908")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x2000077")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000F")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x6000254")]
		[Address(RVA = "0xAFFD1C", Offset = "0xAFFD1C", VA = "0xAFFD1C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000255")]
		[Address(RVA = "0xAFFE40", Offset = "0xAFFE40", VA = "0xAFFE40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000256")]
		[Address(RVA = "0xB032D0", Offset = "0xB032D0", VA = "0xB032D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000257")]
		[Address(RVA = "0xB0336C", Offset = "0xB0336C", VA = "0xB0336C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xB03408", Offset = "0xB03408", VA = "0xB03408")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xB034E8", Offset = "0xB034E8", VA = "0xB034E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xB034EC", Offset = "0xB034EC", VA = "0xB034EC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xB03560", Offset = "0xB03560", VA = "0xB03560")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xB03684", Offset = "0xB03684", VA = "0xB03684")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xB038FC", Offset = "0xB038FC", VA = "0xB038FC")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xB03B1C", Offset = "0xB03B1C", VA = "0xB03B1C")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x2000078")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x600025F")]
	[Address(RVA = "0xB03B3C", Offset = "0xB03B3C", VA = "0xB03B3C", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xB03BCC", Offset = "0xB03BCC", VA = "0xB03BCC", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000261")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xB03C9C", Offset = "0xB03C9C", VA = "0xB03C9C")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x2000079")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xB03CAC", Offset = "0xB03CAC", VA = "0xB03CAC", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xB03E3C", Offset = "0xB03E3C", VA = "0xB03E3C")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x200007A")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0.001f, 50f)]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	public float AimVelocity;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	[Range(0.001f, 1f)]
	public float AimStep;

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xB03E4C", Offset = "0xB03E4C", VA = "0xB03E4C", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xB04020", Offset = "0xB04020", VA = "0xB04020")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x200007B")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xB04034", Offset = "0xB04034", VA = "0xB04034")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xB04160", Offset = "0xB04160", VA = "0xB04160")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB0418C", Offset = "0xB0418C", VA = "0xB0418C")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB041B8", Offset = "0xB041B8", VA = "0xB041B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xB0425C", Offset = "0xB0425C", VA = "0xB0425C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xB042B0", Offset = "0xB042B0", VA = "0xB042B0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xB04300", Offset = "0xB04300", VA = "0xB04300")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x200007C")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700002A")]
	public bool IsValidDestination
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0xB043FC", Offset = "0xB043FC", VA = "0xB043FC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600026F")]
		[Address(RVA = "0xB04404", Offset = "0xB04404", VA = "0xB04404")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xB0458C", Offset = "0xB0458C", VA = "0xB0458C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xB0463C", Offset = "0xB0463C", VA = "0xB0463C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xB04410", Offset = "0xB04410", VA = "0xB04410")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xB04494", Offset = "0xB04494", VA = "0xB04494")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xB04558", Offset = "0xB04558", VA = "0xB04558")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xB04588", Offset = "0xB04588", VA = "0xB04588")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xB01330", Offset = "0xB01330", VA = "0xB01330")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xB046EC", Offset = "0xB046EC", VA = "0xB046EC")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xB04708", Offset = "0xB04708", VA = "0xB04708", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x200007D")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x200007E")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000285")]
			[Address(RVA = "0xB04CD0", Offset = "0xB04CD0", VA = "0xB04CD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000287")]
			[Address(RVA = "0xB04D18", Offset = "0xB04D18", VA = "0xB04D18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xB04B3C", Offset = "0xB04B3C", VA = "0xB04B3C")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xB04C40", Offset = "0xB04C40", VA = "0xB04C40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xB04C44", Offset = "0xB04C44", VA = "0xB04C44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xB04CD8", Offset = "0xB04CD8", VA = "0xB04CD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200007F")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600028B")]
			[Address(RVA = "0xB04DBC", Offset = "0xB04DBC", VA = "0xB04DBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028D")]
			[Address(RVA = "0xB04E04", Offset = "0xB04E04", VA = "0xB04E04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xB04BD8", Offset = "0xB04BD8", VA = "0xB04BD8")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xB04D20", Offset = "0xB04D20", VA = "0xB04D20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0xB04D24", Offset = "0xB04D24", VA = "0xB04D24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xB04DC4", Offset = "0xB04DC4", VA = "0xB04DC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xB048FC", Offset = "0xB048FC", VA = "0xB048FC")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xB049D0", Offset = "0xB049D0", VA = "0xB049D0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xB04A1C", Offset = "0xB04A1C", VA = "0xB04A1C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xB04AC8", Offset = "0xB04AC8", VA = "0xB04AC8")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xB04B64", Offset = "0xB04B64", VA = "0xB04B64")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600027E")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x600027F")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x2000080")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x1700002F")]
	public Transform Pointer
	{
		[Token(Token = "0x600028E")]
		[Address(RVA = "0xB04E0C", Offset = "0xB04E0C", VA = "0xB04E0C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600028F")]
		[Address(RVA = "0xB04E14", Offset = "0xB04E14", VA = "0xB04E14")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xB04E1C", Offset = "0xB04E1C", VA = "0xB04E1C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xB04F48", Offset = "0xB04F48", VA = "0xB04F48", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xB04FFC", Offset = "0xB04FFC", VA = "0xB04FFC")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x2000081")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x2000082")]
	public enum InputModes
	{
		[Token(Token = "0x4000341")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4000342")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000343")]
		ThumbstickTeleport,
		[Token(Token = "0x4000344")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x2000083")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000346")]
		A,
		[Token(Token = "0x4000347")]
		B,
		[Token(Token = "0x4000348")]
		LeftTrigger,
		[Token(Token = "0x4000349")]
		LeftThumbstick,
		[Token(Token = "0x400034A")]
		RightTrigger,
		[Token(Token = "0x400034B")]
		RightThumbstick,
		[Token(Token = "0x400034C")]
		X,
		[Token(Token = "0x400034D")]
		Y
	}

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xB05000", Offset = "0xB05000", VA = "0xB05000")]
	private void Start()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xB05004", Offset = "0xB05004", VA = "0xB05004", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xB05438", Offset = "0xB05438", VA = "0xB05438", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xB054F4", Offset = "0xB054F4", VA = "0xB054F4")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x2000084")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x2000085")]
	public enum OrientationModes
	{
		[Token(Token = "0x4000352")]
		HeadRelative,
		[Token(Token = "0x4000353")]
		ForwardFacing
	}

	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000030")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002A3")]
			[Address(RVA = "0xB059A4", Offset = "0xB059A4", VA = "0xB059A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xB059EC", Offset = "0xB059EC", VA = "0xB059EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xB057B4", Offset = "0xB057B4", VA = "0xB057B4")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xB058F4", Offset = "0xB058F4", VA = "0xB058F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xB058F8", Offset = "0xB058F8", VA = "0xB058F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xB059AC", Offset = "0xB059AC", VA = "0xB059AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xB055E4", Offset = "0xB055E4", VA = "0xB055E4")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xB056CC", Offset = "0xB056CC", VA = "0xB056CC")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xB056D4", Offset = "0xB056D4", VA = "0xB056D4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xB0570C", Offset = "0xB0570C", VA = "0xB0570C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xB05740", Offset = "0xB05740", VA = "0xB05740")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600029C")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x600029D")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xB057DC", Offset = "0xB057DC", VA = "0xB057DC")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x2000087")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xB059F4", Offset = "0xB059F4", VA = "0xB059F4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xB059F8", Offset = "0xB059F8", VA = "0xB059F8", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xB05AA0", Offset = "0xB05AA0", VA = "0xB05AA0")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x2000088")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xB05AA4", Offset = "0xB05AA4", VA = "0xB05AA4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xB05AF4", Offset = "0xB05AF4", VA = "0xB05AF4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xB05FB8", Offset = "0xB05FB8", VA = "0xB05FB8")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x2000089")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xB05FBC", Offset = "0xB05FBC", VA = "0xB05FBC", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xB05FF0", Offset = "0xB05FF0", VA = "0xB05FF0", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xB064EC", Offset = "0xB064EC", VA = "0xB064EC")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x200008A")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xB064FC", Offset = "0xB064FC", VA = "0xB064FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xB06500", Offset = "0xB06500", VA = "0xB06500")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xB06508", Offset = "0xB06508", VA = "0xB06508")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xB065F4", Offset = "0xB065F4", VA = "0xB065F4")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xB06610", Offset = "0xB06610", VA = "0xB06610")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x200008B")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000032")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xB06628", Offset = "0xB06628", VA = "0xB06628")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xB06630", Offset = "0xB06630", VA = "0xB06630")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xB03B64", Offset = "0xB03B64", VA = "0xB03B64", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xB03C74", Offset = "0xB03C74", VA = "0xB03C74", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xB06638", Offset = "0xB06638", VA = "0xB06638")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xB042A4", Offset = "0xB042A4", VA = "0xB042A4", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xB042F8", Offset = "0xB042F8", VA = "0xB042F8", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xB03CA4", Offset = "0xB03CA4", VA = "0xB03CA4")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x200008C")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x200008D")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C7")]
			[Address(RVA = "0xB06D28", Offset = "0xB06D28", VA = "0xB06D28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0xB06D70", Offset = "0xB06D70", VA = "0xB06D70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xB068E0", Offset = "0xB068E0", VA = "0xB068E0")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xB06A5C", Offset = "0xB06A5C", VA = "0xB06A5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xB06A60", Offset = "0xB06A60", VA = "0xB06A60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xB06D30", Offset = "0xB06D30", VA = "0xB06D30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x400036D")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xB06708", Offset = "0xB06708", VA = "0xB06708")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xB06820", Offset = "0xB06820", VA = "0xB06820", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xB06848", Offset = "0xB06848", VA = "0xB06848", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xB0686C", Offset = "0xB0686C", VA = "0xB0686C")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xB06908", Offset = "0xB06908", VA = "0xB06908", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x60002C1")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xB06920", Offset = "0xB06920", VA = "0xB06920", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x200008E")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xBF6E5C", Offset = "0xBF6E5C", VA = "0xBF6E5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xBF6EC4", Offset = "0xBF6EC4", VA = "0xBF6EC4", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xBF7030", Offset = "0xBF7030", VA = "0xBF7030", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xBF7124", Offset = "0xBF7124", VA = "0xBF7124")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xBF7128", Offset = "0xBF7128", VA = "0xBF7128")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x200008F")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xBF7138", Offset = "0xBF7138", VA = "0xBF7138", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xBF7338", Offset = "0xBF7338", VA = "0xBF7338")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x2000090")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xBF7348", Offset = "0xBF7348", VA = "0xBF7348", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xBF74B4", Offset = "0xBF74B4", VA = "0xBF74B4")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x2000091")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xBF74BC", Offset = "0xBF74BC", VA = "0xBF74BC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xBF7544", Offset = "0xBF7544", VA = "0xBF7544", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002D5")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xBF75CC", Offset = "0xBF75CC", VA = "0xBF75CC")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x2000092")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000093")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002DD")]
			[Address(RVA = "0xBF7934", Offset = "0xBF7934", VA = "0xBF7934", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002DF")]
			[Address(RVA = "0xBF797C", Offset = "0xBF797C", VA = "0xBF797C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xBF7668", Offset = "0xBF7668", VA = "0xBF7668")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xBF782C", Offset = "0xBF782C", VA = "0xBF782C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xBF7830", Offset = "0xBF7830", VA = "0xBF7830", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xBF793C", Offset = "0xBF793C", VA = "0xBF793C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	public float TeleportDelay;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xBF75D4", Offset = "0xBF75D4", VA = "0xBF75D4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xBF75F4", Offset = "0xBF75F4", VA = "0xBF75F4")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xBF7690", Offset = "0xBF7690", VA = "0xBF7690")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x2000094")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBF7984", Offset = "0xBF7984", VA = "0xBF7984", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBF79A0", Offset = "0xBF79A0", VA = "0xBF79A0")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x2000095")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x2000096")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E8")]
			[Address(RVA = "0xBF7BD0", Offset = "0xBF7BD0", VA = "0xBF7BD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002EA")]
			[Address(RVA = "0xBF7C18", Offset = "0xBF7C18", VA = "0xBF7C18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xBF7A3C", Offset = "0xBF7A3C", VA = "0xBF7A3C")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xBF7AAC", Offset = "0xBF7AAC", VA = "0xBF7AAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xBF7AB0", Offset = "0xBF7AB0", VA = "0xBF7AB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xBF7BD8", Offset = "0xBF7BD8", VA = "0xBF7BD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 1f)]
	[Tooltip("How much time the warp transition takes to complete.")]
	public float TransitionDuration;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBF79A8", Offset = "0xBF79A8", VA = "0xBF79A8", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBF79C8", Offset = "0xBF79C8", VA = "0xBF79C8")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xBF7A64", Offset = "0xBF7A64", VA = "0xBF7A64")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x2000097")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000098")]
	public enum PlabackState
	{
		[Token(Token = "0x400039D")]
		Idle = 1,
		[Token(Token = "0x400039E")]
		Preparing,
		[Token(Token = "0x400039F")]
		Buffering,
		[Token(Token = "0x40003A0")]
		Ready,
		[Token(Token = "0x40003A1")]
		Ended
	}

	[Token(Token = "0x2000099")]
	public enum StereoMode
	{
		[Token(Token = "0x40003A3")]
		Unknown = -1,
		[Token(Token = "0x40003A4")]
		Mono,
		[Token(Token = "0x40003A5")]
		TopBottom,
		[Token(Token = "0x40003A6")]
		LeftRight,
		[Token(Token = "0x40003A7")]
		Mesh
	}

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000039")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xBF7C20", Offset = "0xBF7C20", VA = "0xBF7C20")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003A")]
	private static IntPtr Activity
	{
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xBF7F10", Offset = "0xBF7F10", VA = "0xBF7F10")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003B")]
	public static bool IsAvailable
	{
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xBF8190", Offset = "0xBF8190", VA = "0xBF8190")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003C")]
	public static bool IsPlaying
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xBF8204", Offset = "0xBF8204", VA = "0xBF8204")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003D")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xBF8308", Offset = "0xBF8308", VA = "0xBF8308")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700003E")]
	public static long Duration
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xBF8410", Offset = "0xBF8410", VA = "0xBF8410")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700003F")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xBF8518", Offset = "0xBF8518", VA = "0xBF8518")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000040")]
	public static int VideoWidth
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xBF8620", Offset = "0xBF8620", VA = "0xBF8620")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000041")]
	public static int VideoHeight
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xBF8728", Offset = "0xBF8728", VA = "0xBF8728")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000042")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xBF8830", Offset = "0xBF8830", VA = "0xBF8830")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xBF8938", Offset = "0xBF8938", VA = "0xBF8938")]
		set
		{
		}
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBF8AA0", Offset = "0xBF8AA0", VA = "0xBF8AA0")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBF8CB8", Offset = "0xBF8CB8", VA = "0xBF8CB8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xBF8DC0", Offset = "0xBF8DC0", VA = "0xBF8DC0")]
	public static void Play()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xBF8EC8", Offset = "0xBF8EC8", VA = "0xBF8EC8")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xBF8FD0", Offset = "0xBF8FD0", VA = "0xBF8FD0")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xBF9140", Offset = "0xBF9140", VA = "0xBF9140")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xBF92AC", Offset = "0xBF92AC", VA = "0xBF92AC")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x200009A")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x14000012")]
	public event Action onButtonDown
	{
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xBF9500", Offset = "0xBF9500", VA = "0xBF9500")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xBF959C", Offset = "0xBF959C", VA = "0xBF959C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xBF9638", Offset = "0xBF9638", VA = "0xBF9638", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xBF9654", Offset = "0xBF9654", VA = "0xBF9654")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x200009B")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x200009C")]
	public enum ButtonType
	{
		[Token(Token = "0x40003AB")]
		Play,
		[Token(Token = "0x40003AC")]
		Pause,
		[Token(Token = "0x40003AD")]
		FastForward,
		[Token(Token = "0x40003AE")]
		Rewind,
		[Token(Token = "0x40003AF")]
		SkipForward,
		[Token(Token = "0x40003B0")]
		SkipBack,
		[Token(Token = "0x40003B1")]
		Stop
	}

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000043")]
	public ButtonType buttonType
	{
		[Token(Token = "0x6000302")]
		[Address(RVA = "0xBF965C", Offset = "0xBF965C", VA = "0xBF965C")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000303")]
		[Address(RVA = "0xBF9664", Offset = "0xBF9664", VA = "0xBF9664")]
		set
		{
		}
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xBF9688", Offset = "0xBF9688", VA = "0xBF9688", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xBFA4DC", Offset = "0xBFA4DC", VA = "0xBFA4DC")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x200009D")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x200009E")]
	public enum VideoShape
	{
		[Token(Token = "0x40003C6")]
		_360,
		[Token(Token = "0x40003C7")]
		_180,
		[Token(Token = "0x40003C8")]
		Quad
	}

	[Token(Token = "0x200009F")]
	public enum VideoStereo
	{
		[Token(Token = "0x40003CA")]
		Mono,
		[Token(Token = "0x40003CB")]
		TopBottom,
		[Token(Token = "0x40003CC")]
		LeftRight,
		[Token(Token = "0x40003CD")]
		BottomTop
	}

	[Token(Token = "0x20000A0")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000047")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600031C")]
			[Address(RVA = "0xBFBA04", Offset = "0xBFBA04", VA = "0xBFBA04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600031E")]
			[Address(RVA = "0xBFBA4C", Offset = "0xBFBA4C", VA = "0xBFBA4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xBFABC0", Offset = "0xBFABC0", VA = "0xBFABC0")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xBFB858", Offset = "0xBFB858", VA = "0xBFB858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0xBFB85C", Offset = "0xBFB85C", VA = "0xBFB85C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xBFBA0C", Offset = "0xBFBA0C", VA = "0xBFBA0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000044")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000306")]
		[Address(RVA = "0xBFA534", Offset = "0xBFA534", VA = "0xBFA534")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000307")]
		[Address(RVA = "0xBFA53C", Offset = "0xBFA53C", VA = "0xBFA53C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public long Duration
	{
		[Token(Token = "0x6000308")]
		[Address(RVA = "0xBFA548", Offset = "0xBFA548", VA = "0xBFA548")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000309")]
		[Address(RVA = "0xBFA550", Offset = "0xBFA550", VA = "0xBFA550")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public long PlaybackPosition
	{
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xBFA558", Offset = "0xBFA558", VA = "0xBFA558")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xBFA560", Offset = "0xBFA560", VA = "0xBFA560")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xBFA568", Offset = "0xBFA568", VA = "0xBFA568")]
	private void Awake()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xBFA7EC", Offset = "0xBFA7EC", VA = "0xBFA7EC")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xBFA84C", Offset = "0xBFA84C", VA = "0xBFA84C")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xBFAB4C", Offset = "0xBFAB4C", VA = "0xBFAB4C")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xBFABE8", Offset = "0xBFABE8", VA = "0xBFABE8")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xBFAEC0", Offset = "0xBFAEC0", VA = "0xBFAEC0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xBFAF44", Offset = "0xBFAF44", VA = "0xBFAF44")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xBFAFC4", Offset = "0xBFAFC4", VA = "0xBFAFC4")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xBFB0B0", Offset = "0xBFB0B0", VA = "0xBFB0B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xBFB64C", Offset = "0xBFB64C", VA = "0xBFB64C")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xBFB6E8", Offset = "0xBFB6E8", VA = "0xBFB6E8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xBFB768", Offset = "0xBFB768", VA = "0xBFB768")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xBFB848", Offset = "0xBFB848", VA = "0xBFB848")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000A2")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x20000A3")]
	private enum PlaybackState
	{
		[Token(Token = "0x40003EA")]
		Playing,
		[Token(Token = "0x40003EB")]
		Paused,
		[Token(Token = "0x40003EC")]
		Rewinding,
		[Token(Token = "0x40003ED")]
		FastForwarding
	}

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xBFBB28", Offset = "0xBFBB28", VA = "0xBFBB28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xBFBE54", Offset = "0xBFBE54", VA = "0xBFBE54")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xBFC024", Offset = "0xBFC024", VA = "0xBFC024")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xBFC148", Offset = "0xBFC148", VA = "0xBFC148")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xBFC244", Offset = "0xBFC244", VA = "0xBFC244")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xBFC11C", Offset = "0xBFC11C", VA = "0xBFC11C")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xBFC2A4", Offset = "0xBFC2A4", VA = "0xBFC2A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xBFBD54", Offset = "0xBFBD54", VA = "0xBFBD54")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xBFC5D4", Offset = "0xBFC5D4", VA = "0xBFC5D4")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000A4")]
public static class VectorUtil
{
	[Token(Token = "0x600032A")]
	[Address(RVA = "0xBFB5D4", Offset = "0xBFB5D4", VA = "0xBFB5D4")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000A5")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40003EE")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40003EF")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xBFC5E4", Offset = "0xBFC5E4", VA = "0xBFC5E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xBFCC38", Offset = "0xBFCC38", VA = "0xBFCC38")]
	private void Update()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xBFCE94", Offset = "0xBFCE94", VA = "0xBFCE94")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xBFCFF8", Offset = "0xBFCFF8", VA = "0xBFCFF8")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xBFD160", Offset = "0xBFD160", VA = "0xBFD160")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xBFD2E4", Offset = "0xBFD2E4", VA = "0xBFD2E4")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x20000A6")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40003F8")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xBFD2F4", Offset = "0xBFD2F4", VA = "0xBFD2F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xBFD34C", Offset = "0xBFD34C", VA = "0xBFD34C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xBFD350", Offset = "0xBFD350", VA = "0xBFD350")]
	private void Update()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xBFC9E0", Offset = "0xBFC9E0", VA = "0xBFC9E0")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xBFD354", Offset = "0xBFD354", VA = "0xBFD354")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xBFD570", Offset = "0xBFD570", VA = "0xBFD570")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x20000A7")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xBFD578", Offset = "0xBFD578", VA = "0xBFD578")]
	private void Start()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xBFDAD8", Offset = "0xBFDAD8", VA = "0xBFDAD8")]
	public void TogglePressed(UnityEngine.UI.Toggle t)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xBFDB84", Offset = "0xBFDB84", VA = "0xBFDB84")]
	public void RadioPressed(string radioLabel, string group, UnityEngine.UI.Toggle t)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xBFDE14", Offset = "0xBFDE14", VA = "0xBFDE14")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xBFDEE8", Offset = "0xBFDEE8", VA = "0xBFDEE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xBFDFC0", Offset = "0xBFDFC0", VA = "0xBFDFC0")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xBFE028", Offset = "0xBFE028", VA = "0xBFE028")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x20000A8")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x6000342")]
	[Address(RVA = "0xBFE1D0", Offset = "0xBFE1D0", VA = "0xBFE1D0")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x20000A9")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xBFE1D8", Offset = "0xBFE1D8", VA = "0xBFE1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xBFE270", Offset = "0xBFE270", VA = "0xBFE270")]
	private void Update()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xBFE348", Offset = "0xBFE348", VA = "0xBFE348")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xBFE3A4", Offset = "0xBFE3A4", VA = "0xBFE3A4")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x20000AA")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x6000347")]
	[Address(RVA = "0xBFE3AC", Offset = "0xBFE3AC", VA = "0xBFE3AC")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x20000AB")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x20000AC")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0xBFE7BC", Offset = "0xBFE7BC", VA = "0xBFE7BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000351")]
			[Address(RVA = "0xBFE804", Offset = "0xBFE804", VA = "0xBFE804", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xBFE658", Offset = "0xBFE658", VA = "0xBFE658")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xBFE688", Offset = "0xBFE688", VA = "0xBFE688", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xBFE68C", Offset = "0xBFE68C", VA = "0xBFE68C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0xBFE7C4", Offset = "0xBFE7C4", VA = "0xBFE7C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xBFE3B4", Offset = "0xBFE3B4", VA = "0xBFE3B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xBFE4C0", Offset = "0xBFE4C0", VA = "0xBFE4C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xBFE44C", Offset = "0xBFE44C", VA = "0xBFE44C")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xBFE680", Offset = "0xBFE680", VA = "0xBFE680")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000AD")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xBFE80C", Offset = "0xBFE80C", VA = "0xBFE80C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xC001B4", Offset = "0xC001B4", VA = "0xC001B4")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000AE")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700004B")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x6000354")]
		[Address(RVA = "0xC001BC", Offset = "0xC001BC", VA = "0xC001BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xC0020C", Offset = "0xC0020C", VA = "0xC0020C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xC00644", Offset = "0xC00644", VA = "0xC00644")]
	public void Update()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xC0071C", Offset = "0xC0071C", VA = "0xC0071C")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000358")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000359")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x600035A")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x600035B")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x600035C")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x600035D")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x600035E")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x600035F")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xC00774", Offset = "0xC00774", VA = "0xC00774")]
	protected void UpdateToggle(UnityEngine.UI.Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xC007B4", Offset = "0xC007B4", VA = "0xC007B4")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xC00820", Offset = "0xC00820", VA = "0xC00820")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xC0096C", Offset = "0xC0096C", VA = "0xC0096C")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xC00A3C", Offset = "0xC00A3C", VA = "0xC00A3C")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xC00520", Offset = "0xC00520", VA = "0xC00520")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xC00B0C", Offset = "0xC00B0C", VA = "0xC00B0C")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xC00B58", Offset = "0xC00B58", VA = "0xC00B58")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xC00C68", Offset = "0xC00C68", VA = "0xC00C68")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000AF")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x20000B0")]
	public enum DrawMode
	{
		[Token(Token = "0x4000427")]
		Opaque,
		[Token(Token = "0x4000428")]
		OpaqueWithClip,
		[Token(Token = "0x4000429")]
		TransparentDefaultAlpha,
		[Token(Token = "0x400042A")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private Shader _transparentShader;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700004C")]
	public bool overlayEnabled
	{
		[Token(Token = "0x600036F")]
		[Address(RVA = "0xC022AC", Offset = "0xC022AC", VA = "0xC022AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000370")]
		[Address(RVA = "0xC02330", Offset = "0xC02330", VA = "0xC02330")]
		set
		{
		}
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xC00C70", Offset = "0xC00C70", VA = "0xC00C70")]
	private void Start()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xC01934", Offset = "0xC01934", VA = "0xC01934")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xC019A8", Offset = "0xC019A8", VA = "0xC019A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xC01A78", Offset = "0xC01A78", VA = "0xC01A78")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xC01B48", Offset = "0xC01B48", VA = "0xC01B48", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xC01D4C", Offset = "0xC01D4C", VA = "0xC01D4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xC023EC", Offset = "0xC023EC", VA = "0xC023EC")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000B1")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xC024A8", Offset = "0xC024A8", VA = "0xC024A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xC02848", Offset = "0xC02848", VA = "0xC02848")]
	private void Update()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xC029DC", Offset = "0xC029DC", VA = "0xC029DC")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xC029E4", Offset = "0xC029E4", VA = "0xC029E4")]
	public void Release()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xC029CC", Offset = "0xC029CC", VA = "0xC029CC")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xC029EC", Offset = "0xC029EC", VA = "0xC029EC")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000B2")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000B3")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0xC03134", Offset = "0xC03134", VA = "0xC03134", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000385")]
			[Address(RVA = "0xC0317C", Offset = "0xC0317C", VA = "0xC0317C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xC02FD8", Offset = "0xC02FD8", VA = "0xC02FD8")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xC03030", Offset = "0xC03030", VA = "0xC03030", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xC03034", Offset = "0xC03034", VA = "0xC03034", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xC0313C", Offset = "0xC0313C", VA = "0xC0313C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B4")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000389")]
			[Address(RVA = "0xC03300", Offset = "0xC03300", VA = "0xC03300", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600038B")]
			[Address(RVA = "0xC03348", Offset = "0xC03348", VA = "0xC03348", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xC03000", Offset = "0xC03000", VA = "0xC03000")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xC03184", Offset = "0xC03184", VA = "0xC03184", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xC03188", Offset = "0xC03188", VA = "0xC03188", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xC03308", Offset = "0xC03308", VA = "0xC03308", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xC029F4", Offset = "0xC029F4", VA = "0xC029F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xC02CD4", Offset = "0xC02CD4", VA = "0xC02CD4")]
	private void Update()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xC02D24", Offset = "0xC02D24", VA = "0xC02D24")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xC02E9C", Offset = "0xC02E9C", VA = "0xC02E9C")]
	public void Release()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xC02F40", Offset = "0xC02F40", VA = "0xC02F40")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xC02DDC", Offset = "0xC02DDC", VA = "0xC02DDC")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xC03028", Offset = "0xC03028", VA = "0xC03028")]
	public BrushController()
	{
	}
}
[Token(Token = "0x20000B5")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x600038C")]
	[Address(RVA = "0xC03350", Offset = "0xC03350", VA = "0xC03350")]
	private void Start()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xC033A4", Offset = "0xC033A4", VA = "0xC033A4")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x20000B6")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xC033AC", Offset = "0xC033AC", VA = "0xC033AC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xC03580", Offset = "0xC03580", VA = "0xC03580")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xC03610", Offset = "0xC03610", VA = "0xC03610")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xC0366C", Offset = "0xC0366C", VA = "0xC0366C")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x20000B7")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600039E")]
			[Address(RVA = "0xC04844", Offset = "0xC04844", VA = "0xC04844", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A0")]
			[Address(RVA = "0xC0488C", Offset = "0xC0488C", VA = "0xC0488C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xC045AC", Offset = "0xC045AC", VA = "0xC045AC")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xC04674", Offset = "0xC04674", VA = "0xC04674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xC04678", Offset = "0xC04678", VA = "0xC04678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xC0484C", Offset = "0xC0484C", VA = "0xC0484C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xC03674", Offset = "0xC03674", VA = "0xC03674")]
	private void Start()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xC0395C", Offset = "0xC0395C", VA = "0xC0395C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xC03C48", Offset = "0xC03C48", VA = "0xC03C48")]
	private void FindHands()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xC03F70", Offset = "0xC03F70", VA = "0xC03F70")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xC04248", Offset = "0xC04248", VA = "0xC04248")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xC04330", Offset = "0xC04330", VA = "0xC04330")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xC044C8", Offset = "0xC044C8", VA = "0xC044C8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xC04418", Offset = "0xC04418", VA = "0xC04418")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xC045D4", Offset = "0xC045D4", VA = "0xC045D4")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x20000B9")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x20000BA")]
	public enum ManipulationType
	{
		[Token(Token = "0x400045F")]
		Default,
		[Token(Token = "0x4000460")]
		ForcedHand,
		[Token(Token = "0x4000461")]
		DollyHand,
		[Token(Token = "0x4000462")]
		DollyAttached,
		[Token(Token = "0x4000463")]
		HorizontalScaled,
		[Token(Token = "0x4000464")]
		VerticalScaled,
		[Token(Token = "0x4000465")]
		Menu
	}

	[Token(Token = "0x20000BB")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x20000BC")]
	public delegate void ReleasedObject();

	[Token(Token = "0x20000BD")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xC04894", Offset = "0xC04894", VA = "0xC04894")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xC048F4", Offset = "0xC048F4", VA = "0xC048F4")]
	public void Release()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xC04910", Offset = "0xC04910", VA = "0xC04910")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xC0492C", Offset = "0xC0492C", VA = "0xC0492C")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x20000BE")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xC04BE4", Offset = "0xC04BE4", VA = "0xC04BE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xC04E44", Offset = "0xC04E44", VA = "0xC04E44")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xC0500C", Offset = "0xC0500C", VA = "0xC0500C")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xC05660", Offset = "0xC05660", VA = "0xC05660")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xC05BF8", Offset = "0xC05BF8", VA = "0xC05BF8")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xC07F00", Offset = "0xC07F00", VA = "0xC07F00")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xC08274", Offset = "0xC08274", VA = "0xC08274")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x20000BF")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xC08298", Offset = "0xC08298", VA = "0xC08298")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xC08600", Offset = "0xC08600", VA = "0xC08600")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xC08334", Offset = "0xC08334", VA = "0xC08334")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xC08A68", Offset = "0xC08A68", VA = "0xC08A68")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xC08FD8", Offset = "0xC08FD8", VA = "0xC08FD8")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x20000C1")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003CC")]
			[Address(RVA = "0xCEB99C", Offset = "0xCEB99C", VA = "0xCEB99C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003CE")]
			[Address(RVA = "0xCEB9E4", Offset = "0xCEB9E4", VA = "0xCEB9E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xCEB2DC", Offset = "0xCEB2DC", VA = "0xCEB2DC")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xCEB6C4", Offset = "0xCEB6C4", VA = "0xCEB6C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xCEB6C8", Offset = "0xCEB6C8", VA = "0xCEB6C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xCEB9A4", Offset = "0xCEB9A4", VA = "0xCEB9A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xCE9120", Offset = "0xCE9120", VA = "0xCE9120")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xCE931C", Offset = "0xCE931C", VA = "0xCE931C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xCEA248", Offset = "0xCEA248", VA = "0xCEA248")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xCEAFE0", Offset = "0xCEAFE0", VA = "0xCEAFE0")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xCE92A8", Offset = "0xCE92A8", VA = "0xCE92A8")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xCE956C", Offset = "0xCE956C", VA = "0xCE956C")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xCEA540", Offset = "0xCEA540", VA = "0xCEA540")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xCEB304", Offset = "0xCEB304", VA = "0xCEB304")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xCEB3B8", Offset = "0xCEB3B8", VA = "0xCEB3B8")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xCEB3E8", Offset = "0xCEB3E8", VA = "0xCEB3E8")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xCEB1C0", Offset = "0xCEB1C0", VA = "0xCEB1C0")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xCEB4D8", Offset = "0xCEB4D8", VA = "0xCEB4D8")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x20000C2")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xCEB9EC", Offset = "0xCEB9EC", VA = "0xCEB9EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xCEBB58", Offset = "0xCEBB58", VA = "0xCEBB58")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xCEBC0C", Offset = "0xCEBC0C", VA = "0xCEBC0C")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x20000C3")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x20000C4")]
	public enum BrushState
	{
		[Token(Token = "0x40004A2")]
		Idle,
		[Token(Token = "0x40004A3")]
		Inking
	}

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xCEBC14", Offset = "0xCEBC14", VA = "0xCEBC14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xCEBC1C", Offset = "0xCEBC1C", VA = "0xCEBC1C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xCEBECC", Offset = "0xCEBECC", VA = "0xCEBECC")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xCEC100", Offset = "0xCEC100", VA = "0xCEC100")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xCEC340", Offset = "0xCEC340", VA = "0xCEC340")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xCEBDE4", Offset = "0xCEBDE4", VA = "0xCEBDE4")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xCEC410", Offset = "0xCEC410", VA = "0xCEC410")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x20000C5")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xCEC4AC", Offset = "0xCEC4AC", VA = "0xCEC4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xCEC618", Offset = "0xCEC618", VA = "0xCEC618")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xCEC804", Offset = "0xCEC804", VA = "0xCEC804")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x20000C6")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xCEC80C", Offset = "0xCEC80C", VA = "0xCEC80C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xCEC9F4", Offset = "0xCEC9F4", VA = "0xCEC9F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xCECB94", Offset = "0xCECB94", VA = "0xCECB94")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x20000C7")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x17000055")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003F7")]
			[Address(RVA = "0xCED8B4", Offset = "0xCED8B4", VA = "0xCED8B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003F9")]
			[Address(RVA = "0xCED8FC", Offset = "0xCED8FC", VA = "0xCED8FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xCED6A8", Offset = "0xCED6A8", VA = "0xCED6A8")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xCED828", Offset = "0xCED828", VA = "0xCED828", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xCED82C", Offset = "0xCED82C", VA = "0xCED82C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xCED8BC", Offset = "0xCED8BC", VA = "0xCED8BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C9")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003FD")]
			[Address(RVA = "0xCED988", Offset = "0xCED988", VA = "0xCED988", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003FF")]
			[Address(RVA = "0xCED9D0", Offset = "0xCED9D0", VA = "0xCED9D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0xCED6D0", Offset = "0xCED6D0", VA = "0xCED6D0")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xCED904", Offset = "0xCED904", VA = "0xCED904", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xCED908", Offset = "0xCED908", VA = "0xCED908", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xCED990", Offset = "0xCED990", VA = "0xCED990", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CA")]
	[CompilerGenerated]
	private sealed class <FadeTo>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float styleValueMultiplier;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timer>5__2;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <brightness>5__3;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <contrast>5__4;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <saturation>5__5;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <blend>5__7;

		[Token(Token = "0x17000059")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000403")]
			[Address(RVA = "0xCEDBC8", Offset = "0xCEDBC8", VA = "0xCEDBC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000405")]
			[Address(RVA = "0xCEDC10", Offset = "0xCEDC10", VA = "0xCEDC10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0xCED780", Offset = "0xCED780", VA = "0xCED780")]
		[DebuggerHidden]
		public <FadeTo>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xCED9D8", Offset = "0xCED9D8", VA = "0xCED9D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xCED9DC", Offset = "0xCED9DC", VA = "0xCED9DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xCEDBD0", Offset = "0xCEDBD0", VA = "0xCEDBD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004A8")]
	private const float FadeDuration = 0.2f;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRInput.Controller _controllerHand;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private OVRPassthroughLayer _passthroughLayer;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform _colorWheel;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Texture2D _colorTexture;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Texture2D _colorLutTexture;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private CanvasGroup _mainCanvas;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject[] _compactObjects;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject[] _objectsToHideForColorPassthrough;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 _cursorPosition;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _settingColor;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Color _savedColor;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _savedBrightness;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _savedContrast;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _savedSaturation;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private OVRPassthroughLayer.ColorMapEditorType _currentStyle;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _savedBlend;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OVRPassthroughColorLut _passthroughColorLut;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private IEnumerator _fade;

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xCECB9C", Offset = "0xCECB9C", VA = "0xCECB9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xCECF4C", Offset = "0xCECF4C", VA = "0xCECF4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xCED2EC", Offset = "0xCED2EC", VA = "0xCED2EC")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xCED31C", Offset = "0xCED31C", VA = "0xCED31C")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xCED324", Offset = "0xCED324", VA = "0xCED324")]
	public void OnSaturationChanged(float newValue)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xCED32C", Offset = "0xCED32C", VA = "0xCED32C")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xCED360", Offset = "0xCED360", VA = "0xCED360")]
	public void OnBlendChange(float newValue)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xCED388", Offset = "0xCED388", VA = "0xCED388")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xCED394", Offset = "0xCED394", VA = "0xCED394")]
	public void SetPassthroughStyleToColorAdjustment(bool isOn)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xCED3E4", Offset = "0xCED3E4", VA = "0xCED3E4")]
	public void SetPassthroughStyleToColorLut(bool isOn)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xCED3F4", Offset = "0xCED3F4", VA = "0xCED3F4")]
	private void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xCED554", Offset = "0xCED554", VA = "0xCED554")]
	private void Release()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xCED4D0", Offset = "0xCED4D0", VA = "0xCED4D0")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__31))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xCED624", Offset = "0xCED624", VA = "0xCED624")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__32))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xCED6F8", Offset = "0xCED6F8", VA = "0xCED6F8")]
	[IteratorStateMachine(typeof(<FadeTo>d__33))]
	private IEnumerator FadeTo(float styleValueMultiplier, float duration)
	{
		return null;
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xCED2F4", Offset = "0xCED2F4", VA = "0xCED2F4")]
	private void UpdateBrighnessContrastSaturation()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xCECEE4", Offset = "0xCECEE4", VA = "0xCECEE4")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xCED7A8", Offset = "0xCED7A8", VA = "0xCED7A8")]
	private void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xCECF64", Offset = "0xCECF64", VA = "0xCECF64")]
	private void GetColorFromWheel()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xCED3A8", Offset = "0xCED3A8", VA = "0xCED3A8")]
	private void SetPassthroughStyle(OVRPassthroughLayer.ColorMapEditorType passthroughStyle)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xCED7B4", Offset = "0xCED7B4", VA = "0xCED7B4")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x20000CB")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xCEDC18", Offset = "0xCEDC18", VA = "0xCEDC18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xCEDCCC", Offset = "0xCEDCCC", VA = "0xCEDCCC")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x20000CC")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xCEDCD4", Offset = "0xCEDCD4", VA = "0xCEDCD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xCEDD40", Offset = "0xCEDD40", VA = "0xCEDD40")]
	private void Update()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xCEE034", Offset = "0xCEE034", VA = "0xCEE034")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x20000CD")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xCEE03C", Offset = "0xCEE03C", VA = "0xCEE03C")]
	private void Update()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xCEE490", Offset = "0xCEE490", VA = "0xCEE490")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x20000CE")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xCEE498", Offset = "0xCEE498", VA = "0xCEE498")]
	private void Start()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xCEE700", Offset = "0xCEE700", VA = "0xCEE700")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xCEE74C", Offset = "0xCEE74C", VA = "0xCEE74C")]
	public void Release()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xCEE78C", Offset = "0xCEE78C", VA = "0xCEE78C")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x20000CF")]
public class BouncingBallLogic : MonoBehaviour
{
	[Token(Token = "0x20000D0")]
	[CompilerGenerated]
	private sealed class <PlayPopCallback>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float clipLength;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BouncingBallLogic <>4__this;

		[Token(Token = "0x1700005B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600041C")]
			[Address(RVA = "0xCEEEA8", Offset = "0xCEEEA8", VA = "0xCEEEA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600041E")]
			[Address(RVA = "0xCEEEF0", Offset = "0xCEEEF0", VA = "0xCEEEF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0xCEED70", Offset = "0xCEED70", VA = "0xCEED70")]
		[DebuggerHidden]
		public <PlayPopCallback>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0xCEEDB0", Offset = "0xCEEDB0", VA = "0xCEEDB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0xCEEDB4", Offset = "0xCEEDB4", VA = "0xCEEDB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0xCEEEB0", Offset = "0xCEEEB0", VA = "0xCEEEB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float TTL;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip pop;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip bounce;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip loadball;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material visibleMat;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material hiddenMat;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform centerEyeCamera;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isVisible;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timer;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isReleased;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isReadyForDestroy;

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xCEE794", Offset = "0xCEE794", VA = "0xCEE794")]
	private void OnCollisionEnter()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xCEE7B8", Offset = "0xCEE7B8", VA = "0xCEE7B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xCEE8C0", Offset = "0xCEE8C0", VA = "0xCEE8C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xCEE964", Offset = "0xCEE964", VA = "0xCEE964")]
	private void UpdateVisibility()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xCEEBB8", Offset = "0xCEEBB8", VA = "0xCEEBB8")]
	private void SetVisible(bool setVisible)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xCEEC5C", Offset = "0xCEEC5C", VA = "0xCEEC5C")]
	public void Release(Vector3 pos, Vector3 vel, Vector3 angVel)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xCEEB34", Offset = "0xCEEB34", VA = "0xCEEB34")]
	[IteratorStateMachine(typeof(<PlayPopCallback>d__18))]
	private IEnumerator PlayPopCallback(float clipLength)
	{
		return null;
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xCEED98", Offset = "0xCEED98", VA = "0xCEED98")]
	public BouncingBallLogic()
	{
	}
}
[Token(Token = "0x20000D1")]
public class BouncingBallMgr : MonoBehaviour
{
	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform trackingspace;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject rightControllerPivot;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private OVRInput.RawButton actionBtn;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject ball;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject currentBall;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool ballGrabbed;

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xCEEEF8", Offset = "0xCEEEF8", VA = "0xCEEEF8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xCEF208", Offset = "0xCEF208", VA = "0xCEF208")]
	public BouncingBallMgr()
	{
	}
}
[Token(Token = "0x20000D2")]
[DefaultExecutionOrder(30)]
[RequireComponent(typeof(OVRSceneAnchor))]
public class FurnitureSpawner : MonoBehaviour
{
	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Add a point at ceiling.")]
	public GameObject RoomLightPrefab;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Spawnable> SpawnablePrefabs;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRSceneAnchor _sceneAnchor;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRSemanticClassification _classification;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObject _roomLightRef;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _frameCounter;

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xCEF210", Offset = "0xCEF210", VA = "0xCEF210")]
	private void Start()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xCEF428", Offset = "0xCEF428", VA = "0xCEF428")]
	private void SpawnSpawnable()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xCEF898", Offset = "0xCEF898", VA = "0xCEF898")]
	private bool FindValidSpawnable(out Spawnable currentSpawnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xCEF2B0", Offset = "0xCEF2B0", VA = "0xCEF2B0")]
	private void AddRoomLight()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xCEFAB8", Offset = "0xCEFAB8", VA = "0xCEFAB8")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xCEFFA4", Offset = "0xCEFFA4", VA = "0xCEFFA4")]
	public FurnitureSpawner()
	{
	}
}
[Token(Token = "0x20000D3")]
public class MyCustomSceneModelLoader : OVRSceneModelLoader
{
	[Token(Token = "0x20000D4")]
	[CompilerGenerated]
	private sealed class <DelayedLoad>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MyCustomSceneModelLoader <>4__this;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600042E")]
			[Address(RVA = "0xCF01D8", Offset = "0xCF01D8", VA = "0xCF01D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000430")]
			[Address(RVA = "0xCF0220", Offset = "0xCF0220", VA = "0xCF0220", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xCF0020", Offset = "0xCF0020", VA = "0xCF0020")]
		[DebuggerHidden]
		public <DelayedLoad>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xCF00D8", Offset = "0xCF00D8", VA = "0xCF00D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xCF00DC", Offset = "0xCF00DC", VA = "0xCF00DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xCF01E0", Offset = "0xCF01E0", VA = "0xCF01E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xCEFFAC", Offset = "0xCEFFAC", VA = "0xCEFFAC")]
	[IteratorStateMachine(typeof(<DelayedLoad>d__0))]
	private IEnumerator DelayedLoad()
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xCF0048", Offset = "0xCF0048", VA = "0xCF0048", Slot = "4")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xCF0068", Offset = "0xCF0068", VA = "0xCF0068", Slot = "6")]
	protected override void OnNoSceneModelToLoad()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xCF00D0", Offset = "0xCF00D0", VA = "0xCF00D0")]
	public MyCustomSceneModelLoader()
	{
	}
}
[Token(Token = "0x20000D5")]
[RequireComponent(typeof(OVRManager))]
public class PassthroughPlayInEditor : MonoBehaviour
{
	[Token(Token = "0x6000431")]
	[Address(RVA = "0xCF0228", Offset = "0xCF0228", VA = "0xCF0228")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xCF022C", Offset = "0xCF022C", VA = "0xCF022C")]
	public PassthroughPlayInEditor()
	{
	}
}
[Token(Token = "0x20000D6")]
public class RequestCaptureFlow : MonoBehaviour
{
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button RequestCaptureBtn;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRSceneManager _sceneManager;

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xCF0234", Offset = "0xCF0234", VA = "0xCF0234")]
	private void Start()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xCF02AC", Offset = "0xCF02AC", VA = "0xCF02AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xCF0330", Offset = "0xCF0330", VA = "0xCF0330")]
	public RequestCaptureFlow()
	{
	}
}
[Token(Token = "0x20000D7")]
[ExecuteInEditMode]
public class SimpleResizable : MonoBehaviour
{
	[Token(Token = "0x20000D8")]
	public enum Method
	{
		[Token(Token = "0x4000507")]
		Adapt,
		[Token(Token = "0x4000508")]
		AdaptWithAsymmetricalPadding,
		[Token(Token = "0x4000509")]
		Scale,
		[Token(Token = "0x400050A")]
		None
	}

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space(15f)]
	public Method ScalingX;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 0.5f)]
	public float PaddingX;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(-0.5f, 0f)]
	public float PaddingXMax;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space(15f)]
	public Method ScalingY;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 0.5f)]
	public float PaddingY;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(-0.5f, 0f)]
	public float PaddingYMax;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(15f)]
	public Method ScalingZ;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 0.5f)]
	public float PaddingZ;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(-0.5f, 0f)]
	public float PaddingZMax;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Bounds _bounds;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform _pivotTransform;

	[Token(Token = "0x1700005F")]
	public Vector3 PivotPosition
	{
		[Token(Token = "0x6000436")]
		[Address(RVA = "0xCF0340", Offset = "0xCF0340", VA = "0xCF0340")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000060")]
	public Vector3 NewSize
	{
		[Token(Token = "0x6000437")]
		[Address(RVA = "0xCF035C", Offset = "0xCF035C", VA = "0xCF035C")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000438")]
		[Address(RVA = "0xCF0368", Offset = "0xCF0368", VA = "0xCF0368")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public Vector3 DefaultSize
	{
		[Token(Token = "0x6000439")]
		[Address(RVA = "0xCF0374", Offset = "0xCF0374", VA = "0xCF0374")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600043A")]
		[Address(RVA = "0xCF0380", Offset = "0xCF0380", VA = "0xCF0380")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public Mesh Mesh
	{
		[Token(Token = "0x600043B")]
		[Address(RVA = "0xCF038C", Offset = "0xCF038C", VA = "0xCF038C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600043C")]
		[Address(RVA = "0xCF0394", Offset = "0xCF0394", VA = "0xCF0394")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xCF039C", Offset = "0xCF039C", VA = "0xCF039C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xCF04D8", Offset = "0xCF04D8", VA = "0xCF04D8")]
	public SimpleResizable()
	{
	}
}
[Token(Token = "0x20000D9")]
public class SimpleResizer
{
	[Token(Token = "0x600043F")]
	[Address(RVA = "0xCEFC10", Offset = "0xCEFC10", VA = "0xCEFC10")]
	public void CreateResizedObject(Vector3 newSize, GameObject parent, SimpleResizable sourcePrefab)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xCF04E0", Offset = "0xCF04E0", VA = "0xCF04E0")]
	private Mesh ProcessVertices(SimpleResizable resizable, Vector3 newSize)
	{
		return null;
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xCF0764", Offset = "0xCF0764", VA = "0xCF0764")]
	private float CalculateNewVertexPosition(SimpleResizable.Method resizeMethod, float currentPosition, float currentSize, float newSize, float padding, float paddingMax, float pivot)
	{
		return default(float);
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xCEFC08", Offset = "0xCEFC08", VA = "0xCEFC08")]
	public SimpleResizer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000DA")]
public class Spawnable : ISerializationCallbackReceiver
{
	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleResizable ResizablePrefab;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ClassificationLabel;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int _editorClassificationIndex;

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xCF080C", Offset = "0xCF080C", VA = "0xCF080C", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xCF0810", Offset = "0xCF0810", VA = "0xCF0810", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xCF0C78", Offset = "0xCF0C78", VA = "0xCF0C78")]
	public Spawnable()
	{
	}
}
[Token(Token = "0x20000DB")]
[RequireComponent(typeof(OVRSceneAnchor))]
public class VolumeAndPlaneSwitcher : MonoBehaviour
{
	[Token(Token = "0x20000DC")]
	public enum GeometryType
	{
		[Token(Token = "0x4000512")]
		Plane,
		[Token(Token = "0x4000513")]
		Volume
	}

	[Serializable]
	[Token(Token = "0x20000DD")]
	public struct LabelGeometryPair
	{
		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string label;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GeometryType desiredGeometryType;
	}

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSceneAnchor planePrefab;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRSceneAnchor volumePrefab;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LabelGeometryPair> desiredSwitches;

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xCF0CD0", Offset = "0xCF0CD0", VA = "0xCF0CD0")]
	private void ReplaceAnchor(OVRSceneAnchor prefab, Vector3 position, Quaternion rotation, Vector3 localScale)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xCF10FC", Offset = "0xCF10FC", VA = "0xCF10FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xCF1A34", Offset = "0xCF1A34", VA = "0xCF1A34")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xCF190C", Offset = "0xCF190C", VA = "0xCF190C")]
	private void GetTopPlaneFromVolume(Transform volume, Vector3 dimensions, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xCF1AB4", Offset = "0xCF1AB4", VA = "0xCF1AB4")]
	public VolumeAndPlaneSwitcher()
	{
	}
}
[Token(Token = "0x20000DE")]
[RequireComponent(typeof(OVRSpatialAnchor))]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x20000DF")]
	[CompilerGenerated]
	private sealed class <Start>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Anchor <>4__this;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045F")]
			[Address(RVA = "0xCF287C", Offset = "0xCF287C", VA = "0xCF287C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000461")]
			[Address(RVA = "0xCF28C4", Offset = "0xCF28C4", VA = "0xCF28C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xCF1CB0", Offset = "0xCF1CB0", VA = "0xCF1CB0")]
		[DebuggerHidden]
		public <Start>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xCF2700", Offset = "0xCF2700", VA = "0xCF2700", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xCF2704", Offset = "0xCF2704", VA = "0xCF2704", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xCF2884", Offset = "0xCF2884", VA = "0xCF2884", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000516")]
	public const string NumUuidsPlayerPref = "numUuids";

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("canvas_")]
	[SerializeField]
	private Canvas _canvas;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("pivot_")]
	private Transform _pivot;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("anchorMenu_")]
	[SerializeField]
	private GameObject _anchorMenu;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _isSelected;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _isHovered;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[FormerlySerializedAs("anchorName_")]
	[SerializeField]
	private TextMeshProUGUI _anchorName;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("saveIcon_")]
	[SerializeField]
	private GameObject _saveIcon;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[FormerlySerializedAs("labelImage_")]
	private Image _labelImage;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[FormerlySerializedAs("labelBaseColor_")]
	private Color _labelBaseColor;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("labelHighlightColor_")]
	private Color _labelHighlightColor;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[FormerlySerializedAs("labelSelectedColor_")]
	[SerializeField]
	private Color _labelSelectedColor;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[FormerlySerializedAs("uiManager_")]
	[SerializeField]
	private AnchorUIManager _uiManager;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("renderers_")]
	private MeshRenderer[] _renderers;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _menuIndex;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[FormerlySerializedAs("buttonList_")]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private OVRSpatialAnchor _spatialAnchor;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject _icon;

	[Token(Token = "0x17000063")]
	public bool ShowSaveIcon
	{
		[Token(Token = "0x6000452")]
		[Address(RVA = "0xCF215C", Offset = "0xCF215C", VA = "0xCF215C")]
		set
		{
		}
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xCF1ABC", Offset = "0xCF1ABC", VA = "0xCF1ABC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xCF1C3C", Offset = "0xCF1C3C", VA = "0xCF1C3C")]
	[IteratorStateMachine(typeof(<Start>d__20))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xCF1CD8", Offset = "0xCF1CD8", VA = "0xCF1CD8")]
	private void Update()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xCF1F50", Offset = "0xCF1F50", VA = "0xCF1F50")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xCF2020", Offset = "0xCF2020", VA = "0xCF2020")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xCF208C", Offset = "0xCF208C", VA = "0xCF208C")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xCF217C", Offset = "0xCF217C", VA = "0xCF217C")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xCF2298", Offset = "0xCF2298", VA = "0xCF2298")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xCF23A0", Offset = "0xCF23A0", VA = "0xCF23A0")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xCF1D28", Offset = "0xCF1D28", VA = "0xCF1D28")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xCF1E5C", Offset = "0xCF1E5C", VA = "0xCF1E5C")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xCF2470", Offset = "0xCF2470", VA = "0xCF2470")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xCF25A8", Offset = "0xCF25A8", VA = "0xCF25A8")]
	public Anchor()
	{
	}
}
[Token(Token = "0x20000E0")]
[RequireComponent(typeof(SpatialAnchorLoader))]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x20000E1")]
	public enum AnchorMode
	{
		[Token(Token = "0x400053F")]
		Create,
		[Token(Token = "0x4000540")]
		Select
	}

	[Token(Token = "0x20000E2")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("createModeButton_")]
	[SerializeField]
	private GameObject _createModeButton;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[FormerlySerializedAs("selectModeButton_")]
	[SerializeField]
	private GameObject _selectModeButton;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[FormerlySerializedAs("trackedDevice_")]
	private Transform _trackedDevice;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _raycastOrigin;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _drawRaycast;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("lineRenderer_")]
	[SerializeField]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Anchor _hoveredAnchor;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor _selectedAnchor;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnchorMode _mode;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("buttonList_")]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _menuIndex;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Anchor _anchorPrefab;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[FormerlySerializedAs("placementPreview_")]
	[SerializeField]
	private GameObject _placementPreview;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("anchorPlacementTransform_")]
	private Transform _anchorPlacementTransform;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate _primaryPressDelegate;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool _isFocused;

	[Token(Token = "0x17000066")]
	public Anchor AnchorPrefab
	{
		[Token(Token = "0x6000462")]
		[Address(RVA = "0xCF28CC", Offset = "0xCF28CC", VA = "0xCF28CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xCF28D4", Offset = "0xCF28D4", VA = "0xCF28D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xCF29A0", Offset = "0xCF29A0", VA = "0xCF29A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xCF2AF0", Offset = "0xCF2AF0", VA = "0xCF2AF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xCF2F60", Offset = "0xCF2F60", VA = "0xCF2F60")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xCF2FCC", Offset = "0xCF2FCC", VA = "0xCF2FCC")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xCF2A88", Offset = "0xCF2A88", VA = "0xCF2A88")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xCF324C", Offset = "0xCF324C", VA = "0xCF324C")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xCF32D4", Offset = "0xCF32D4", VA = "0xCF32D4")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xCF32F4", Offset = "0xCF32F4", VA = "0xCF32F4")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xCF322C", Offset = "0xCF322C", VA = "0xCF322C")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xCF2E6C", Offset = "0xCF2E6C", VA = "0xCF2E6C")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xCF34F4", Offset = "0xCF34F4", VA = "0xCF34F4")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xCF337C", Offset = "0xCF337C", VA = "0xCF337C")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xCF3468", Offset = "0xCF3468", VA = "0xCF3468")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xCF35F4", Offset = "0xCF35F4", VA = "0xCF35F4")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xCF3488", Offset = "0xCF3488", VA = "0xCF3488")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xCF34C0", Offset = "0xCF34C0", VA = "0xCF34C0")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xCF2BF0", Offset = "0xCF2BF0", VA = "0xCF2BF0")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xCF36E0", Offset = "0xCF36E0", VA = "0xCF36E0")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xCF3708", Offset = "0xCF3708", VA = "0xCF3708")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xCF3798", Offset = "0xCF3798", VA = "0xCF3798")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xCF38E0", Offset = "0xCF38E0", VA = "0xCF38E0")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x20000E3")]
public class SpatialAnchorLoader : MonoBehaviour
{
	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRSpatialAnchor _anchorPrefab;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<OVRSpatialAnchor.UnboundAnchor, bool> _onLoadAnchor;

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xCF3020", Offset = "0xCF3020", VA = "0xCF3020")]
	public void LoadAnchorsByUuid()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xCF3A9C", Offset = "0xCF3A9C", VA = "0xCF3A9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xCF39BC", Offset = "0xCF39BC", VA = "0xCF39BC")]
	private void Load(OVRSpatialAnchor.LoadOptions options)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xCF3B20", Offset = "0xCF3B20", VA = "0xCF3B20")]
	private void OnLocalized(OVRSpatialAnchor.UnboundAnchor unboundAnchor, bool success)
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xCF3930", Offset = "0xCF3930", VA = "0xCF3930")]
	private static void Log(string message)
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xCF3CD0", Offset = "0xCF3CD0", VA = "0xCF3CD0")]
	public SpatialAnchorLoader()
	{
	}
}
[Token(Token = "0x20000E4")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xCF3E08", Offset = "0xCF3E08", VA = "0xCF3E08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xCF401C", Offset = "0xCF401C", VA = "0xCF401C")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xCF4120", Offset = "0xCF4120", VA = "0xCF4120")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x20000E6")]
public class LocalizedHaptics : MonoBehaviour
{
	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xCF4144", Offset = "0xCF4144", VA = "0xCF4144")]
	private void Start()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xCF416C", Offset = "0xCF416C", VA = "0xCF416C")]
	private void Update()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xCF42A8", Offset = "0xCF42A8", VA = "0xCF42A8")]
	public LocalizedHaptics()
	{
	}
}
[Token(Token = "0x20000E7")]
public class SceneSettings : MonoBehaviour
{
	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Time")]
	private float m_fixedTimeStep;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Header("Physics")]
	private float m_gravityScalar;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_defaultContactOffset;

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xCF42B8", Offset = "0xCF42B8", VA = "0xCF42B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xCF4350", Offset = "0xCF4350", VA = "0xCF4350")]
	private void Start()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xCF4358", Offset = "0xCF4358", VA = "0xCF4358")]
	private static void CollidersSetContactOffset(float contactOffset)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xCF441C", Offset = "0xCF441C", VA = "0xCF441C")]
	public SceneSettings()
	{
	}
}
[Token(Token = "0x20000E8")]
public class StylusTip : MonoBehaviour
{
	[Token(Token = "0x400054D")]
	private const int MaxBreadCrumbs = 60;

	[Token(Token = "0x400054E")]
	private const float BreadCrumbMinSize = 0.005f;

	[Token(Token = "0x400054F")]
	private const float BreadCrumbMaxSize = 0.02f;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("External")]
	[SerializeField]
	private Transform m_trackingSpace;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Settings")]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_breadCrumbPf;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_breadCrumbContainer;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject[] m_breadCrumbs;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_breadCrumbIndexPrev;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_breadCrumbIndexCurr;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xCF443C", Offset = "0xCF443C", VA = "0xCF443C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xCF46BC", Offset = "0xCF46BC", VA = "0xCF46BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xCF4AEC", Offset = "0xCF4AEC", VA = "0xCF4AEC")]
	private static Pose GetT_Device_StylusTip(OVRInput.Controller controller)
	{
		return default(Pose);
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xCF4C18", Offset = "0xCF4C18", VA = "0xCF4C18")]
	public StylusTip()
	{
	}
}
[Token(Token = "0x20000E9")]
public class UiAxis1dInspector : MonoBehaviour
{
	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private float m_minExtent;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_maxExtent;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Slider m_slider;

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xCF4C30", Offset = "0xCF4C30", VA = "0xCF4C30")]
	public void SetExtents(float minExtent, float maxExtent)
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xCF4C38", Offset = "0xCF4C38", VA = "0xCF4C38")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xCF4C5C", Offset = "0xCF4C5C", VA = "0xCF4C5C")]
	public void SetValue(float value)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xCF4D60", Offset = "0xCF4D60", VA = "0xCF4D60")]
	public UiAxis1dInspector()
	{
	}
}
[Token(Token = "0x20000EA")]
public class UiAxis2dInspector : MonoBehaviour
{
	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private Vector2 m_xExtent;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector2 m_yExtent;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_handle;

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xCF4D70", Offset = "0xCF4D70", VA = "0xCF4D70")]
	public void SetExtents(Vector2 xExtent, Vector2 yExtent)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xCF4D7C", Offset = "0xCF4D7C", VA = "0xCF4D7C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xCF4DA0", Offset = "0xCF4DA0", VA = "0xCF4DA0")]
	public void SetValue(bool isTouching, Vector2 value)
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xCF5168", Offset = "0xCF5168", VA = "0xCF5168")]
	public UiAxis2dInspector()
	{
	}
}
[Token(Token = "0x20000EB")]
public class UiBoolInspector : MonoBehaviour
{
	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.UI.Toggle m_toggle;

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xCF517C", Offset = "0xCF517C", VA = "0xCF517C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xCF51A0", Offset = "0xCF51A0", VA = "0xCF51A0")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xCF51C0", Offset = "0xCF51C0", VA = "0xCF51C0")]
	public UiBoolInspector()
	{
	}
}
[Token(Token = "0x20000EC")]
public class UiDeviceInspector : MonoBehaviour
{
	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Left Column Components")]
	private TextMeshProUGUI m_title;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_status;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UiBoolInspector m_thumbRestTouch;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UiAxis1dInspector m_thumbRestForce;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UiAxis1dInspector m_indexTrigger;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UiAxis1dInspector m_gripTrigger;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UiAxis1dInspector m_stylusTipForce;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UiAxis1dInspector m_indexCurl1d;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UiAxis1dInspector m_indexSlider1d;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Right Column Components")]
	private UiBoolInspector m_ax;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UiBoolInspector m_axTouch;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UiBoolInspector m_by;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UiBoolInspector m_byTouch;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UiBoolInspector m_indexTouch;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private UiAxis2dInspector m_thumbstick;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xCF51C8", Offset = "0xCF51C8", VA = "0xCF51C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xCF51F0", Offset = "0xCF51F0", VA = "0xCF51F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xCF5778", Offset = "0xCF5778", VA = "0xCF5778")]
	private static string ToDeviceModel()
	{
		return null;
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xCF57B8", Offset = "0xCF57B8", VA = "0xCF57B8")]
	private static string ToHandednessString(OVRInput.Handedness handedness)
	{
		return null;
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xCF583C", Offset = "0xCF583C", VA = "0xCF583C")]
	public UiDeviceInspector()
	{
	}
}
[Token(Token = "0x20000ED")]
public class UiSceneMenu : MonoBehaviour
{
	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private VerticalLayoutGroup m_layoutGroup;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_labelPf;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 s_lastThumbstickL;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector2 s_lastThumbstickR;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Scene m_activeScene;

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xCF584C", Offset = "0xCF584C", VA = "0xCF584C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xCF5B18", Offset = "0xCF5B18", VA = "0xCF5B18")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xCF5C30", Offset = "0xCF5C30", VA = "0xCF5C30")]
	private bool InputPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xCF5CCC", Offset = "0xCF5CCC", VA = "0xCF5CCC")]
	private bool InputNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xCF5D10", Offset = "0xCF5D10", VA = "0xCF5D10")]
	private bool KeyboardPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xCF5DAC", Offset = "0xCF5DAC", VA = "0xCF5DAC")]
	private bool KeyboardNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xCF5D1C", Offset = "0xCF5D1C", VA = "0xCF5D1C")]
	private bool ThumbstickPrevScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xCF5DB8", Offset = "0xCF5DB8", VA = "0xCF5DB8")]
	private bool ThumbstickNextScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xCF5E48", Offset = "0xCF5E48", VA = "0xCF5E48")]
	private Vector2 GetLastThumbstickValue(OVRInput.Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xCF5C74", Offset = "0xCF5C74", VA = "0xCF5C74")]
	private void ChangeScene(int nextScene)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xCF58F0", Offset = "0xCF58F0", VA = "0xCF58F0")]
	private void CreateLabel(int sceneIndex, string scenePath)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xCF5EB0", Offset = "0xCF5EB0", VA = "0xCF5EB0")]
	public UiSceneMenu()
	{
	}
}
[Token(Token = "0x20000EE")]
public class UiVectorInspector : MonoBehaviour
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xCF5EB8", Offset = "0xCF5EB8", VA = "0xCF5EB8")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xCF5EDC", Offset = "0xCF5EDC", VA = "0xCF5EDC")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xCF5F8C", Offset = "0xCF5F8C", VA = "0xCF5F8C")]
	public UiVectorInspector()
	{
	}
}
[Token(Token = "0x20000EF")]
public class OculusOpenOverlay : MonoBehaviour
{
	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xCF5F94", Offset = "0xCF5F94", VA = "0xCF5F94")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xCF5FEC", Offset = "0xCF5FEC", VA = "0xCF5FEC")]
	public OculusOpenOverlay()
	{
	}
}
[Token(Token = "0x20000F0")]
public class OnEnableDisable : MonoBehaviour
{
	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent onEnable;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent onDisable;

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xCF5FF4", Offset = "0xCF5FF4", VA = "0xCF5FF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xCF6010", Offset = "0xCF6010", VA = "0xCF6010")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xCF602C", Offset = "0xCF602C", VA = "0xCF602C")]
	public OnEnableDisable()
	{
	}
}
[Token(Token = "0x20000F1")]
public class OnPointerEnterEvent : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent onPointerEnter;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent onPointerExit;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Selectable item;

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xCF6034", Offset = "0xCF6034", VA = "0xCF6034")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xCF608C", Offset = "0xCF608C", VA = "0xCF608C", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xCF612C", Offset = "0xCF612C", VA = "0xCF612C", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xCF61CC", Offset = "0xCF61CC", VA = "0xCF61CC")]
	public OnPointerEnterEvent()
	{
	}
}
[Token(Token = "0x20000F2")]
public class OutlineController : MonoBehaviour
{
	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private cakeslice.Outline[] outlines;

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xCF61D4", Offset = "0xCF61D4", VA = "0xCF61D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xCF6234", Offset = "0xCF6234", VA = "0xCF6234")]
	public void SetOutline(bool viewOutline)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xCF61D8", Offset = "0xCF61D8", VA = "0xCF61D8")]
	private void Reset()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xCF629C", Offset = "0xCF629C", VA = "0xCF629C")]
	[ContextMenu("turnOffOutliners")]
	private void TurnOff()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xCF62A4", Offset = "0xCF62A4", VA = "0xCF62A4")]
	public OutlineController()
	{
	}
}
[Token(Token = "0x20000F3")]
[RequireComponent(typeof(Renderer))]
[RequireComponent(typeof(PhotonView))]
public class ChangeColor : MonoBehaviour
{
	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xCF62AC", Offset = "0xCF62AC", VA = "0xCF62AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xCF6410", Offset = "0xCF6410", VA = "0xCF6410")]
	[PunRPC]
	private void ChangeColour(Vector3 randomColor)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xCF64B8", Offset = "0xCF64B8", VA = "0xCF64B8")]
	public ChangeColor()
	{
	}
}
[Token(Token = "0x20000F4")]
[RequireComponent(typeof(PhotonView))]
public class ChangeName : MonoBehaviour
{
	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xCF64C0", Offset = "0xCF64C0", VA = "0xCF64C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xCF657C", Offset = "0xCF657C", VA = "0xCF657C")]
	public ChangeName()
	{
	}
}
[Token(Token = "0x20000F5")]
[RequireComponent(typeof(PhotonVoiceView))]
public class PointersController : MonoBehaviour
{
	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject pointerDown;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject pointerUp;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xCF6584", Offset = "0xCF6584", VA = "0xCF6584")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xCF669C", Offset = "0xCF669C", VA = "0xCF669C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xCF65F4", Offset = "0xCF65F4", VA = "0xCF65F4")]
	private void SetActiveSafe(GameObject go, bool active)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xCF66F4", Offset = "0xCF66F4", VA = "0xCF66F4")]
	public PointersController()
	{
	}
}
[Token(Token = "0x20000F6")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(Collider))]
public class ProximityVoiceTrigger : VoiceComponent
{
	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<byte> groupsToAdd;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte> groupsToRemove;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private byte[] subscribedGroups;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PhotonView photonView;

	[Token(Token = "0x17000067")]
	public byte TargetInterestGroup
	{
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xCF66FC", Offset = "0xCF66FC", VA = "0xCF66FC")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xCF677C", Offset = "0xCF677C", VA = "0xCF677C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xCF6A00", Offset = "0xCF6A00", VA = "0xCF6A00")]
	private void ToggleTransmission()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xCF6C24", Offset = "0xCF6C24", VA = "0xCF6C24")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xCF6ED8", Offset = "0xCF6ED8", VA = "0xCF6ED8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xCF71CC", Offset = "0xCF71CC", VA = "0xCF71CC")]
	protected void Update()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xCF6848", Offset = "0xCF6848", VA = "0xCF6848")]
	private bool IsLocalCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xCF78B4", Offset = "0xCF78B4", VA = "0xCF78B4")]
	public ProximityVoiceTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F7")]
public class MouseLookHelper
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float XSensitivity;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float YSensitivity;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool clampVerticalRotation;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumX;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumX;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool smooth;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float smoothTime;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion m_CharacterTargetRot;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion m_CameraTargetRot;

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xCF796C", Offset = "0xCF796C", VA = "0xCF796C")]
	public void Init(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xCF79BC", Offset = "0xCF79BC", VA = "0xCF79BC")]
	public void LookRotation(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xCF7CFC", Offset = "0xCF7CFC", VA = "0xCF7CFC")]
	private Quaternion ClampRotationAroundXAxis(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xCF7D60", Offset = "0xCF7D60", VA = "0xCF7D60")]
	public MouseLookHelper()
	{
	}
}
[Token(Token = "0x20000F8")]
public class PlayerLocalMenuCaller : MonoBehaviour
{
	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayerController playerController;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VRHardwareService.Button menuCallButton;

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xCF7D8C", Offset = "0xCF7D8C", VA = "0xCF7D8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xCF7DE4", Offset = "0xCF7DE4", VA = "0xCF7DE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xCF7EE8", Offset = "0xCF7EE8", VA = "0xCF7EE8")]
	public PlayerLocalMenuCaller()
	{
	}
}
[Token(Token = "0x20000F9")]
public class PlayerResetPosHelper : MonoBehaviour
{
	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Player playerInputRef;

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xCF7EF8", Offset = "0xCF7EF8", VA = "0xCF7EF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xCF7F70", Offset = "0xCF7F70", VA = "0xCF7F70")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xCF7F9C", Offset = "0xCF7F9C", VA = "0xCF7F9C")]
	private void ResetPosition()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xCF8240", Offset = "0xCF8240", VA = "0xCF8240")]
	public PlayerResetPosHelper()
	{
	}
}
[Token(Token = "0x20000FA")]
public class RatateWater : MonoBehaviour
{
	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private BlendWaterController blendController;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float angle;

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xCF8248", Offset = "0xCF8248", VA = "0xCF8248")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xCF82A0", Offset = "0xCF82A0", VA = "0xCF82A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xCF857C", Offset = "0xCF857C", VA = "0xCF857C")]
	public RatateWater()
	{
	}
}
[Token(Token = "0x20000FB")]
public class RecorderSettingSetter : MonoBehaviour
{
	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Recorder rec;

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xCF858C", Offset = "0xCF858C", VA = "0xCF858C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xCF866C", Offset = "0xCF866C", VA = "0xCF866C")]
	private void MicDropdownValueChanged(MicRef mic)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xCF8758", Offset = "0xCF8758", VA = "0xCF8758")]
	public RecorderSettingSetter()
	{
	}
}
[Token(Token = "0x20000FC")]
public class ReturnerBullet : Singleton<ReturnerBullet>
{
	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xCF8760", Offset = "0xCF8760", VA = "0xCF8760")]
	public void TurnColliderOn()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xCF8764", Offset = "0xCF8764", VA = "0xCF8764")]
	public void TurnColliderOff()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xCF8768", Offset = "0xCF8768", VA = "0xCF8768")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xCF883C", Offset = "0xCF883C", VA = "0xCF883C")]
	public ReturnerBullet()
	{
	}
}
[Token(Token = "0x20000FD")]
public static class AchievementsController
{
	[Token(Token = "0x20000FE")]
	public enum Achivment
	{
		[Token(Token = "0x400059D")]
		none,
		[Token(Token = "0x400059E")]
		GHOST_SIGAR,
		[Token(Token = "0x400059F")]
		SURVIVE_ENEMI_SHOOT,
		[Token(Token = "0x40005A0")]
		SURVIVE_SELF_SHOOT,
		[Token(Token = "0x40005A1")]
		KILL_SOMEONE_ELSE,
		[Token(Token = "0x40005A2")]
		WIN_GAME,
		[Token(Token = "0x40005A3")]
		SURVIVE_SHIELD,
		[Token(Token = "0x40005A4")]
		SHOOT_PIANIST,
		[Token(Token = "0x40005A5")]
		WIN_WITHOUT_SHOOTING,
		[Token(Token = "0x40005A6")]
		SHOOT_USE_AFK_PISTOL,
		[Token(Token = "0x40005A7")]
		KILL_ALL
	}

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int killCounter;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool[] userHadRealShoot;

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xCF8884", Offset = "0xCF8884", VA = "0xCF8884")]
	public static void SendAchivment_Playstation(Achivment achiv)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xCF8888", Offset = "0xCF8888", VA = "0xCF8888")]
	public static void RegisterTrophyPack()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xCF88F8", Offset = "0xCF88F8", VA = "0xCF88F8")]
	internal static void AddKillCounter()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xCF8948", Offset = "0xCF8948", VA = "0xCF8948")]
	internal static void ResetKillCounter()
	{
	}
}
[Token(Token = "0x20000FF")]
public class ActivateIn : MonoBehaviour
{
	[Token(Token = "0x2000100")]
	[CompilerGenerated]
	private sealed class <WaitAndDeactivate>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActivateIn <>4__this;

		[Token(Token = "0x17000068")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F4")]
			[Address(RVA = "0xCF8BC0", Offset = "0xCF8BC0", VA = "0xCF8BC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0xCF8C08", Offset = "0xCF8C08", VA = "0xCF8C08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xCF8A6C", Offset = "0xCF8A6C", VA = "0xCF8A6C")]
		[DebuggerHidden]
		public <WaitAndDeactivate>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xCF8AF4", Offset = "0xCF8AF4", VA = "0xCF8AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xCF8AF8", Offset = "0xCF8AF8", VA = "0xCF8AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xCF8BC8", Offset = "0xCF8BC8", VA = "0xCF8BC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float time;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent onEvent;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine coroutine;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xCF89C8", Offset = "0xCF89C8", VA = "0xCF89C8")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xCF89F8", Offset = "0xCF89F8", VA = "0xCF89F8")]
	[IteratorStateMachine(typeof(<WaitAndDeactivate>d__4))]
	private IEnumerator WaitAndDeactivate()
	{
		return null;
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xCF8A94", Offset = "0xCF8A94", VA = "0xCF8A94")]
	public void Stop()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xCF8AC0", Offset = "0xCF8AC0", VA = "0xCF8AC0")]
	public void Handle()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xCF8ADC", Offset = "0xCF8ADC", VA = "0xCF8ADC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xCF8AE0", Offset = "0xCF8AE0", VA = "0xCF8AE0")]
	public ActivateIn()
	{
	}
}
[Token(Token = "0x2000101")]
public class AddForce : MonoBehaviour
{
	[Token(Token = "0x2000102")]
	public enum Force
	{
		[Token(Token = "0x40005B5")]
		SimpleForce,
		[Token(Token = "0x40005B6")]
		ExplosionForce
	}

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform root;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float ForceMultiplayer;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Force force;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float EplosionRadius;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool addTorque;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float torqueMultiplayer;

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xCF8C10", Offset = "0xCF8C10", VA = "0xCF8C10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xCF8D24", Offset = "0xCF8D24", VA = "0xCF8D24")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xCF8DBC", Offset = "0xCF8DBC", VA = "0xCF8DBC")]
	public AddForce()
	{
	}
}
[Token(Token = "0x2000103")]
public class AmbientSound : MonoBehaviour
{
	[Token(Token = "0x2000104")]
	[CompilerGenerated]
	private sealed class <PlayMusic>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmbientSound <>4__this;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000502")]
			[Address(RVA = "0xCF9134", Offset = "0xCF9134", VA = "0xCF9134", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000504")]
			[Address(RVA = "0xCF917C", Offset = "0xCF917C", VA = "0xCF917C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xCF8EB8", Offset = "0xCF8EB8", VA = "0xCF8EB8")]
		[DebuggerHidden]
		public <PlayMusic>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xCF8FE0", Offset = "0xCF8FE0", VA = "0xCF8FE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0xCF8FE4", Offset = "0xCF8FE4", VA = "0xCF8FE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xCF913C", Offset = "0xCF913C", VA = "0xCF913C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<AudioClip> Sounds;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool pianistExist;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool old_pianistExist;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float voiceTime;

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xCF8DD8", Offset = "0xCF8DD8", VA = "0xCF8DD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xCF8E44", Offset = "0xCF8E44", VA = "0xCF8E44")]
	[IteratorStateMachine(typeof(<PlayMusic>d__6))]
	private IEnumerator PlayMusic()
	{
		return null;
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xCF8EE0", Offset = "0xCF8EE0", VA = "0xCF8EE0")]
	public void ResolvePianistExist(bool exist)
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xCF8F24", Offset = "0xCF8F24", VA = "0xCF8F24")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xCF8FD0", Offset = "0xCF8FD0", VA = "0xCF8FD0")]
	public AmbientSound()
	{
	}
}
[Token(Token = "0x2000105")]
public class AnimatorEvents : MonoBehaviour
{
	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] OnEvent1Activate;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource[] OnEvent1Play;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MonoBehaviour[] OnEvent1monoActivate;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnEvent1;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject[] OnEvent2Activate;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioSource[] OnEvent2Play;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UnityEvent OnEvent2;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject[] OnEvent3Activate;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource[] OnEvent3Play;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UnityEvent OnEvent3;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject[] OnEvent4Activate;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioSource[] OnEvent4Play;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UnityEvent OnEvent4;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject[] OnEvent5Activate;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioSource[] OnEvent5Play;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private UnityEvent OnEvent5;

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xCF9184", Offset = "0xCF9184", VA = "0xCF9184")]
	public void Event1()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xCF9334", Offset = "0xCF9334", VA = "0xCF9334")]
	public void Event2()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xCF9474", Offset = "0xCF9474", VA = "0xCF9474")]
	public void Event3()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xCF95B4", Offset = "0xCF95B4", VA = "0xCF95B4")]
	public void Event4()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xCF96F4", Offset = "0xCF96F4", VA = "0xCF96F4")]
	public void Event5()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xCF9834", Offset = "0xCF9834", VA = "0xCF9834")]
	public void SetBoolTrue(string str)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xCF98A0", Offset = "0xCF98A0", VA = "0xCF98A0")]
	public AnimatorEvents()
	{
	}
}
[Token(Token = "0x2000106")]
public class CardAnimation : MonoBehaviour
{
	[Token(Token = "0x2000107")]
	[CompilerGenerated]
	private sealed class <StartAnimationCoroutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardAnimation <>4__this;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startAnimLocalPosition>5__2;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image[] <imgs>5__3;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <animTime>5__4;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <delay>5__5;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <timer>5__6;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600051A")]
			[Address(RVA = "0xCFA3F4", Offset = "0xCFA3F4", VA = "0xCFA3F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600051C")]
			[Address(RVA = "0xCFA43C", Offset = "0xCFA43C", VA = "0xCFA43C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xCF9BF8", Offset = "0xCF9BF8", VA = "0xCF9BF8")]
		[DebuggerHidden]
		public <StartAnimationCoroutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xCF9E88", Offset = "0xCF9E88", VA = "0xCF9E88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0xCF9E8C", Offset = "0xCF9E8C", VA = "0xCF9E8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0xCFA3FC", Offset = "0xCFA3FC", VA = "0xCFA3FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000108")]
	[CompilerGenerated]
	private sealed class <StartAnimationCoroutine2>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardAnimation <>4__this;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startAnimLocalPosition>5__2;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image[] <imgs>5__3;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <animTime>5__4;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <delay>5__5;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <timer>5__6;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000520")]
			[Address(RVA = "0xCFAAC8", Offset = "0xCFAAC8", VA = "0xCFAAC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000522")]
			[Address(RVA = "0xCFAB10", Offset = "0xCFAB10", VA = "0xCFAB10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0xCF9C40", Offset = "0xCF9C40", VA = "0xCF9C40")]
		[DebuggerHidden]
		public <StartAnimationCoroutine2>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xCFA444", Offset = "0xCFA444", VA = "0xCFA444", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xCFA448", Offset = "0xCFA448", VA = "0xCFA448", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xCFAAD0", Offset = "0xCFAAD0", VA = "0xCFAAD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <OpenRotationAnim>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardAnimation <>4__this;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <locRot>5__3;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <singleTime>5__4;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <delay>5__5;

		[Token(Token = "0x17000070")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000526")]
			[Address(RVA = "0xCFB360", Offset = "0xCFB360", VA = "0xCFB360", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000528")]
			[Address(RVA = "0xCFB3A8", Offset = "0xCFB3A8", VA = "0xCFB3A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xCF9CFC", Offset = "0xCF9CFC", VA = "0xCF9CFC")]
		[DebuggerHidden]
		public <OpenRotationAnim>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xCFAB18", Offset = "0xCFAB18", VA = "0xCFAB18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xCFAB1C", Offset = "0xCFAB1C", VA = "0xCFAB1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xCFB368", Offset = "0xCFB368", VA = "0xCFB368", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <CloseRotationAnim>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CardAnimation <>4__this;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <singleTime>5__3;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <delay>5__4;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <locRot>5__5;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600052C")]
			[Address(RVA = "0xCFBBD8", Offset = "0xCFBBD8", VA = "0xCFBBD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052E")]
			[Address(RVA = "0xCFBC20", Offset = "0xCFBC20", VA = "0xCFBC20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xCF9DB8", Offset = "0xCF9DB8", VA = "0xCF9DB8")]
		[DebuggerHidden]
		public <CloseRotationAnim>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xCFB3B0", Offset = "0xCFB3B0", VA = "0xCFB3B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xCFB3B4", Offset = "0xCFB3B4", VA = "0xCFB3B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xCFBBE0", Offset = "0xCFBBE0", VA = "0xCFBBE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool playStartAnim;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool playSecondAnim;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] menuCards;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] cardBacks;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3[] cardLocalPositions;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion[] cardLocalRotations;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] cardBackLocalPositions;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float startAnimationTime;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve startCurve;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve startAlphaCurve;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float singleStartAnimPercentage;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float startAnimationTime2;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float singleStartAnimPercentage2;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve startCurve2Position;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationCurve startCurve2Rotation;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve startAlphaCurve2;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private float rotation180Time;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private float placingAnimTime;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float singlePlacingPercentage;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private float gatheringAnimTime;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private float singleGatheringPercentage;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve placingCurve;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public UnityEvent OnClose;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int openCounter;

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xCF98A8", Offset = "0xCF98A8", VA = "0xCF98A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xCF9AB8", Offset = "0xCF9AB8", VA = "0xCF9AB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xCF9ABC", Offset = "0xCF9ABC", VA = "0xCF9ABC")]
	public void StartAnimation()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xCF9B10", Offset = "0xCF9B10", VA = "0xCF9B10")]
	[IteratorStateMachine(typeof(<StartAnimationCoroutine>d__27))]
	private IEnumerator StartAnimationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xCF9C20", Offset = "0xCF9C20", VA = "0xCF9C20")]
	public void StartAnimation2()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xCF9B84", Offset = "0xCF9B84", VA = "0xCF9B84")]
	[IteratorStateMachine(typeof(<StartAnimationCoroutine2>d__29))]
	private IEnumerator StartAnimationCoroutine2()
	{
		return null;
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xCF9C68", Offset = "0xCF9C68", VA = "0xCF9C68")]
	public void OpenRotation()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xCF9C88", Offset = "0xCF9C88", VA = "0xCF9C88")]
	[IteratorStateMachine(typeof(<OpenRotationAnim>d__31))]
	private IEnumerator OpenRotationAnim()
	{
		return null;
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xCF9D24", Offset = "0xCF9D24", VA = "0xCF9D24")]
	public void CloseRotation()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xCF9D44", Offset = "0xCF9D44", VA = "0xCF9D44")]
	[IteratorStateMachine(typeof(<CloseRotationAnim>d__33))]
	private IEnumerator CloseRotationAnim()
	{
		return null;
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xCF9DE0", Offset = "0xCF9DE0", VA = "0xCF9DE0")]
	public CardAnimation()
	{
	}
}
[Token(Token = "0x200010B")]
public class CoinEffectManager : MonoBehaviour
{
	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject coinPrefab;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform generatorPoint;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve trajectory;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int maxCoinsInColumn;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float columnDistance;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int[] coinAmounts;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float coinHeight;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float horizontalDisplacement;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public float animationTime;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	public float backAnimationTime;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public float rotationAmount;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	public float animationHeightMult;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int testInd;

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xCFBC28", Offset = "0xCFBC28", VA = "0xCFBC28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xCFBC80", Offset = "0xCFBC80", VA = "0xCFBC80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xCFBC84", Offset = "0xCFBC84", VA = "0xCFBC84")]
	public void ClearAllCoins()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xCFBCD4", Offset = "0xCFBCD4", VA = "0xCFBCD4")]
	public void ThrowCoin(Coin coin, int playerIndex, Transform coinStack)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xCFBE8C", Offset = "0xCFBE8C", VA = "0xCFBE8C")]
	public void ReturnCoin(Coin coin, int playerIndex)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xCFBED0", Offset = "0xCFBED0", VA = "0xCFBED0")]
	internal void ResetState()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xCFBF28", Offset = "0xCFBF28", VA = "0xCFBF28")]
	internal void ResetUserCoinsAmount(int userIndex)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xCFBF58", Offset = "0xCFBF58", VA = "0xCFBF58")]
	public CoinEffectManager()
	{
	}
}
[Token(Token = "0x200010C")]
public class CustomPointer : MonoBehaviour
{
	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTK_CustomRaycast customRaycast;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LineRenderer lr;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LayerMask defaultIgnoreLayer;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Ray pointerRaycast;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private RaycastHit pointerCollidedWith;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool rayHit;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool oldRayHit;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Color hitColor;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Color missColor;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool active;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xCFBF88", Offset = "0xCFBF88", VA = "0xCFBF88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xCFBFEC", Offset = "0xCFBFEC", VA = "0xCFBFEC")]
	public void ActivePointer(bool val)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xCFC014", Offset = "0xCFC014", VA = "0xCFC014")]
	private void Update()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xCFC170", Offset = "0xCFC170", VA = "0xCFC170")]
	public CustomPointer()
	{
	}
}
[Token(Token = "0x200010D")]
public enum PlayerType
{
	[Token(Token = "0x400061D")]
	Gentlman,
	[Token(Token = "0x400061E")]
	Bandit,
	[Token(Token = "0x400061F")]
	PoliceFemale,
	[Token(Token = "0x4000620")]
	Dama,
	[Token(Token = "0x4000621")]
	Ranger,
	[Token(Token = "0x4000622")]
	Indian,
	[Token(Token = "0x4000623")]
	Random
}
[Token(Token = "0x200010E")]
public enum PlayingCardType
{
	[Token(Token = "0x4000625")]
	TurnMoveDirection,
	[Token(Token = "0x4000626")]
	ExtraLife,
	[Token(Token = "0x4000627")]
	SecondBullet,
	[Token(Token = "0x4000628")]
	SeeBullet,
	[Token(Token = "0x4000629")]
	DivideAllMoney,
	[Token(Token = "0x400062A")]
	SkipTurn,
	[Token(Token = "0x400062B")]
	SetTarget,
	[Token(Token = "0x400062C")]
	ProtectYourself,
	[Token(Token = "0x400062D")]
	UndoLastPlayed,
	[Token(Token = "0x400062E")]
	SpinPistol
}
[Token(Token = "0x200010F")]
public class FlatScreenCamera : MonoBehaviour
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera camera;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetCamera;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float positionLerpKoeff;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotationLerpKoeff;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool freezeZRotaion;

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xCFC1A0", Offset = "0xCFC1A0", VA = "0xCFC1A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xCFC254", Offset = "0xCFC254", VA = "0xCFC254")]
	private void Update()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xCFC4F8", Offset = "0xCFC4F8", VA = "0xCFC4F8")]
	public FlatScreenCamera()
	{
	}
}
[Token(Token = "0x2000110")]
public class EnableDisableEvents : MonoBehaviour
{
	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnEnableEv;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnDisableEv;

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xCFC508", Offset = "0xCFC508", VA = "0xCFC508")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xCFC524", Offset = "0xCFC524", VA = "0xCFC524")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xCFC540", Offset = "0xCFC540", VA = "0xCFC540")]
	public EnableDisableEvents()
	{
	}
}
[Token(Token = "0x2000111")]
public class NumpadController : MonoBehaviour
{
	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text numberText;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text errorText;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.UI.Button enterButton;

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xCFC548", Offset = "0xCFC548", VA = "0xCFC548")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xCFC5BC", Offset = "0xCFC5BC", VA = "0xCFC5BC")]
	public string GetCurentNumber()
	{
		return null;
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xCFC5E0", Offset = "0xCFC5E0", VA = "0xCFC5E0")]
	public void AddNumber(int num)
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xCFC54C", Offset = "0xCFC54C", VA = "0xCFC54C")]
	public void ClearText()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xCFC6C0", Offset = "0xCFC6C0", VA = "0xCFC6C0")]
	internal void SetErrorMessage(string message)
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xCFC75C", Offset = "0xCFC75C", VA = "0xCFC75C")]
	private void SwitchOffError()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xCFC794", Offset = "0xCFC794", VA = "0xCFC794")]
	public NumpadController()
	{
	}
}
[Token(Token = "0x2000112")]
public class RegionChangeController : MonoBehaviour
{
	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string regionInfo;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public List<Region> regionsList;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool listNotEmpty;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool connected;

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xCFC79C", Offset = "0xCFC79C", VA = "0xCFC79C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xCFC948", Offset = "0xCFC948", VA = "0xCFC948")]
	private void Update()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xCFC9CC", Offset = "0xCFC9CC", VA = "0xCFC9CC")]
	public void SelectedRegionChange(int optionNum)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xCFCA38", Offset = "0xCFCA38", VA = "0xCFCA38")]
	public void SelectedRegionChange(string regionCode)
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xCFCA40", Offset = "0xCFCA40", VA = "0xCFCA40")]
	[ContextMenu("Set Asia region selection")]
	public void SelectedRegionCodeTest()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xCFCA8C", Offset = "0xCFCA8C", VA = "0xCFCA8C")]
	[ContextMenu("Try Connect selected region")]
	public void TryChangeRegion()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xCFCBA0", Offset = "0xCFCBA0", VA = "0xCFCBA0")]
	public RegionChangeController()
	{
	}
}
[Token(Token = "0x2000113")]
public class OfflineModeObjectDisabler : MonoBehaviour
{
	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.UI.Button currentButton;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CanvasGroup canvasGroup;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _cache;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showInOfflineMode;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject offlineObject;

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xCFCBA8", Offset = "0xCFCBA8", VA = "0xCFCBA8")]
	private void ActivateButton(bool show)
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xCFCC78", Offset = "0xCFCC78", VA = "0xCFCC78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xCFCE08", Offset = "0xCFCE08", VA = "0xCFCE08")]
	public OfflineModeObjectDisabler()
	{
	}
}
[Token(Token = "0x2000114")]
[RequireComponent(typeof(ParticleSystem))]
public class ParticleLookAt : MonoBehaviour
{
	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem m_System;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xCFCE18", Offset = "0xCFCE18", VA = "0xCFCE18")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xCFCF3C", Offset = "0xCFCF3C", VA = "0xCFCF3C")]
	private void InitializeIfNeeded()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xCFD070", Offset = "0xCFD070", VA = "0xCFD070")]
	public ParticleLookAt()
	{
	}
}
[Token(Token = "0x2000115")]
public class NewBehaviourScript : MonoBehaviour
{
	[Token(Token = "0x6000555")]
	[Address(RVA = "0xCFD078", Offset = "0xCFD078", VA = "0xCFD078")]
	private void Start()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xCFD07C", Offset = "0xCFD07C", VA = "0xCFD07C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xCFD080", Offset = "0xCFD080", VA = "0xCFD080")]
	public NewBehaviourScript()
	{
	}
}
[Token(Token = "0x2000116")]
public class PlayerGameElement : MonoBehaviour
{
	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new Text name;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.UI.Button kickBtn;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Button muteBtn;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image muteIcon;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image avatarImage;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image avatarImageBorder;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject buttonsHolder;

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xCFD088", Offset = "0xCFD088", VA = "0xCFD088")]
	public PlayerGameElement()
	{
	}
}
[Token(Token = "0x2000117")]
public class PlayerStateController : MonoBehaviour
{
	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerStateController instance;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool cinemaMode;

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xCFD090", Offset = "0xCFD090", VA = "0xCFD090")]
	public bool GetCinameModeState()
	{
		return default(bool);
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xCFD098", Offset = "0xCFD098", VA = "0xCFD098")]
	public void ShowSetupVRCanvas(bool val)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xCFD09C", Offset = "0xCFD09C", VA = "0xCFD09C")]
	public void CinemaMode2D(bool acitve)
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xCFD0A0", Offset = "0xCFD0A0", VA = "0xCFD0A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xCFD0F8", Offset = "0xCFD0F8", VA = "0xCFD0F8")]
	public PlayerStateController()
	{
	}
}
[Token(Token = "0x2000118")]
public class PSVRDevicesStatusUI : MonoBehaviour
{
	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text text;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image hmdStatus;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image primaryMoveStatus;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image secondaryMoveStatus;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image cameraStatus;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject continueText;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color enableColor;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color disableColor;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private VRDevicesStatus status;

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xCFD100", Offset = "0xCFD100", VA = "0xCFD100")]
	private void Start()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xCFD220", Offset = "0xCFD220", VA = "0xCFD220")]
	public void ActiveText(bool active)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xCFD240", Offset = "0xCFD240", VA = "0xCFD240")]
	private void Update()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xCFD418", Offset = "0xCFD418", VA = "0xCFD418")]
	public PSVRDevicesStatusUI()
	{
	}
}
[Token(Token = "0x2000119")]
public class PSVRTestHelper : MonoBehaviour
{
	[Token(Token = "0x200011A")]
	[CompilerGenerated]
	private sealed class <Debugger>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600056A")]
			[Address(RVA = "0xCFD838", Offset = "0xCFD838", VA = "0xCFD838", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600056C")]
			[Address(RVA = "0xCFD880", Offset = "0xCFD880", VA = "0xCFD880", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xCFD484", Offset = "0xCFD484", VA = "0xCFD484")]
		[DebuggerHidden]
		public <Debugger>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xCFD74C", Offset = "0xCFD74C", VA = "0xCFD74C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xCFD750", Offset = "0xCFD750", VA = "0xCFD750", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xCFD840", Offset = "0xCFD840", VA = "0xCFD840", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer fade;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightHand;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform leftHand;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject rightHandModel;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject leftHandModel;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TrackingControllers trackingControllers;

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xCFD420", Offset = "0xCFD420", VA = "0xCFD420")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xCFD424", Offset = "0xCFD424", VA = "0xCFD424")]
	[IteratorStateMachine(typeof(<Debugger>d__7))]
	private IEnumerator Debugger()
	{
		return null;
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xCFD4AC", Offset = "0xCFD4AC", VA = "0xCFD4AC")]
	public void Fade(float startAlpha, float endAlpha, float stayDur, float dur)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xCFD674", Offset = "0xCFD674", VA = "0xCFD674")]
	private void Update()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xCFD744", Offset = "0xCFD744", VA = "0xCFD744")]
	public PSVRTestHelper()
	{
	}
}
[Token(Token = "0x200011C")]
public enum SetupState
{
	[Token(Token = "0x4000666")]
	none,
	[Token(Token = "0x4000667")]
	devices,
	[Token(Token = "0x4000668")]
	recenter,
	[Token(Token = "0x4000669")]
	compelte
}
[Serializable]
[Token(Token = "0x200011D")]
public class TrackedDevice
{
	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int handle;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 position;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Quaternion orientation;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 velocity;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 angularVelocity;

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xCFDB8C", Offset = "0xCFDB8C", VA = "0xCFDB8C")]
	public TrackedDevice()
	{
	}
}
[Token(Token = "0x200011E")]
public class VRDeviceNames
{
	[Token(Token = "0x400066F")]
	public const string None = "None";

	[Token(Token = "0x4000670")]
	public const string Unknown = "Unknown";

	[Token(Token = "0x4000671")]
	public const string Oculus = "Oculus";

	[Token(Token = "0x4000672")]
	public const string playStationVR = "PlayStationVR";

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xCFDC2C", Offset = "0xCFDC2C", VA = "0xCFDC2C")]
	public VRDeviceNames()
	{
	}
}
[Token(Token = "0x200011F")]
public class TrackingControllers : MonoBehaviour
{
	[Token(Token = "0x2000120")]
	[CompilerGenerated]
	private sealed class <SetupMoves>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrackingControllers <>4__this;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000581")]
			[Address(RVA = "0xCFDF64", Offset = "0xCFDF64", VA = "0xCFDF64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000583")]
			[Address(RVA = "0xCFDFAC", Offset = "0xCFDFAC", VA = "0xCFDFAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xCFDD54", Offset = "0xCFDD54", VA = "0xCFDD54")]
		[DebuggerHidden]
		public <SetupMoves>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xCFDE64", Offset = "0xCFDE64", VA = "0xCFDE64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0xCFDE68", Offset = "0xCFDE68", VA = "0xCFDE68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xCFDF6C", Offset = "0xCFDF6C", VA = "0xCFDF6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000121")]
	[CompilerGenerated]
	private sealed class <RegisterMoveControllers>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000587")]
			[Address(RVA = "0xCFE008", Offset = "0xCFE008", VA = "0xCFE008", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000589")]
			[Address(RVA = "0xCFE050", Offset = "0xCFE050", VA = "0xCFE050", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xCFDDE4", Offset = "0xCFDDE4", VA = "0xCFDDE4")]
		[DebuggerHidden]
		public <RegisterMoveControllers>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xCFDFB4", Offset = "0xCFDFB4", VA = "0xCFDFB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xCFDFB8", Offset = "0xCFDFB8", VA = "0xCFDFB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xCFE010", Offset = "0xCFE010", VA = "0xCFE010", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TrackingControllers instance;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedDevice deviceMovePrimary;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrackedDevice deviceMoveSecondary;

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xCFDC34", Offset = "0xCFDC34", VA = "0xCFDC34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xCFDC8C", Offset = "0xCFDC8C", VA = "0xCFDC8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xCFDC90", Offset = "0xCFDC90", VA = "0xCFDC90")]
	private void Recenter()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xCFDCE0", Offset = "0xCFDCE0", VA = "0xCFDCE0")]
	[IteratorStateMachine(typeof(<SetupMoves>d__6))]
	private IEnumerator SetupMoves()
	{
		return null;
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xCFDD7C", Offset = "0xCFDD7C", VA = "0xCFDD7C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xCFDCC0", Offset = "0xCFDCC0", VA = "0xCFDCC0")]
	public void ResetDeviceTracking()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xCFDD84", Offset = "0xCFDD84", VA = "0xCFDD84")]
	[IteratorStateMachine(typeof(<RegisterMoveControllers>d__9))]
	private IEnumerator RegisterMoveControllers()
	{
		return null;
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xCFDD80", Offset = "0xCFDD80", VA = "0xCFDD80")]
	private void UnregisterMoveControllers()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xCFDE0C", Offset = "0xCFDE0C", VA = "0xCFDE0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xCFDE58", Offset = "0xCFDE58", VA = "0xCFDE58")]
	private void UpdateMoveTransforms()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xCFDE5C", Offset = "0xCFDE5C", VA = "0xCFDE5C")]
	public TrackingControllers()
	{
	}
}
[Serializable]
[Token(Token = "0x2000122")]
public class VRDevicesStatus
{
	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VRManager.VRManagerEvent statusChanged;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _hmdIsOn;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _primaryMove;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool _secondaryMove;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool _camera;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool checkCamera;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int i;

	[Token(Token = "0x1700007A")]
	public bool hmdIsOn
	{
		[Token(Token = "0x600058A")]
		[Address(RVA = "0xCFE058", Offset = "0xCFE058", VA = "0xCFE058")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058B")]
		[Address(RVA = "0xCFE060", Offset = "0xCFE060", VA = "0xCFE060")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public bool primaryMove
	{
		[Token(Token = "0x600058C")]
		[Address(RVA = "0xCFE090", Offset = "0xCFE090", VA = "0xCFE090")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058D")]
		[Address(RVA = "0xCFE098", Offset = "0xCFE098", VA = "0xCFE098")]
		set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	public bool secondaryMove
	{
		[Token(Token = "0x600058E")]
		[Address(RVA = "0xCFE0C8", Offset = "0xCFE0C8", VA = "0xCFE0C8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600058F")]
		[Address(RVA = "0xCFE0D0", Offset = "0xCFE0D0", VA = "0xCFE0D0")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public bool camera
	{
		[Token(Token = "0x6000590")]
		[Address(RVA = "0xCFE100", Offset = "0xCFE100", VA = "0xCFE100")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000591")]
		[Address(RVA = "0xCFE108", Offset = "0xCFE108", VA = "0xCFE108")]
		set
		{
		}
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xCFE138", Offset = "0xCFE138", VA = "0xCFE138")]
	public void UpdateAllData()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xCFE13C", Offset = "0xCFE13C", VA = "0xCFE13C")]
	public void UpdateDataOpt()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xCFE140", Offset = "0xCFE140", VA = "0xCFE140")]
	public VRDevicesStatus()
	{
	}
}
[Token(Token = "0x2000123")]
public class VRManager : MonoBehaviour
{
	[Token(Token = "0x2000124")]
	public delegate void VRManagerEvent();

	[Token(Token = "0x2000125")]
	[CompilerGenerated]
	private sealed class <SetupVR>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700007F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0xCFE858", Offset = "0xCFE858", VA = "0xCFE858", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005AF")]
			[Address(RVA = "0xCFE8A0", Offset = "0xCFE8A0", VA = "0xCFE8A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xCFE624", Offset = "0xCFE624", VA = "0xCFE624")]
		[DebuggerHidden]
		public <SetupVR>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xCFE7D0", Offset = "0xCFE7D0", VA = "0xCFE7D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xCFE7D4", Offset = "0xCFE7D4", VA = "0xCFE7D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xCFE860", Offset = "0xCFE860", VA = "0xCFE860", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000126")]
	[CompilerGenerated]
	private sealed class <ShutdownVR>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005B3")]
			[Address(RVA = "0xCFE8FC", Offset = "0xCFE8FC", VA = "0xCFE8FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B5")]
			[Address(RVA = "0xCFE944", Offset = "0xCFE944", VA = "0xCFE944", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xCFE6CC", Offset = "0xCFE6CC", VA = "0xCFE6CC")]
		[DebuggerHidden]
		public <ShutdownVR>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xCFE8A8", Offset = "0xCFE8A8", VA = "0xCFE8A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xCFE8AC", Offset = "0xCFE8AC", VA = "0xCFE8AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xCFE904", Offset = "0xCFE904", VA = "0xCFE904", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRManagerEvent onCompleteSetup;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hmdIsOn;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool oldHmdIsOn;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRDevicesStatus status;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float renderScale;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool showHmdViewOnMonitor;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool doSetupOnAwake;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRManager s_Instance;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject loadingScreen;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool cinemaMode;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image fade;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PSVRDevicesStatusUI setupVRCanvas;

	[Token(Token = "0x1700007E")]
	public static VRManager instance
	{
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xCFD128", Offset = "0xCFD128", VA = "0xCFD128")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xCFE150", Offset = "0xCFE150", VA = "0xCFE150")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xCFE284", Offset = "0xCFE284", VA = "0xCFE284")]
	private void Start()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xCFE4E0", Offset = "0xCFE4E0", VA = "0xCFE4E0")]
	public void ResolveStatus()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xCFE4E4", Offset = "0xCFE4E4", VA = "0xCFE4E4")]
	public void ShowSetupVRCanvas(bool active)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xCFE514", Offset = "0xCFE514", VA = "0xCFE514")]
	public void ShowLoadingScreen(bool active)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xCFE534", Offset = "0xCFE534", VA = "0xCFE534")]
	public void CinemaMode(bool active)
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xCFE538", Offset = "0xCFE538", VA = "0xCFE538")]
	private void Update()
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xCFDCBC", Offset = "0xCFDCBC", VA = "0xCFDCBC")]
	public void Recenter()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xCFE550", Offset = "0xCFE550", VA = "0xCFE550")]
	public void BeginVRSetup()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xCFE5D0", Offset = "0xCFE5D0", VA = "0xCFE5D0")]
	[ContextMenu("GoToGameScene")]
	public void GoToGameScene()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xCFE570", Offset = "0xCFE570", VA = "0xCFE570")]
	[IteratorStateMachine(typeof(<SetupVR>d__25))]
	private IEnumerator SetupVR()
	{
		return null;
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xCFE64C", Offset = "0xCFE64C", VA = "0xCFE64C")]
	public void BeginShutdownVR()
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xCFE66C", Offset = "0xCFE66C", VA = "0xCFE66C")]
	[IteratorStateMachine(typeof(<ShutdownVR>d__27))]
	private IEnumerator ShutdownVR()
	{
		return null;
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xCFE6F4", Offset = "0xCFE6F4", VA = "0xCFE6F4")]
	public void SetupHmdDevice()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xCFE6F8", Offset = "0xCFE6F8", VA = "0xCFE6F8")]
	public VRManager()
	{
	}
}
[Token(Token = "0x2000127")]
public class VRPlaySpace : MonoBehaviour
{
	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform frustumTransform;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] frustumRenderers;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float safeDistance;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fadeSpeed;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color showColor;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color hideColor;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool showFrustum;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 camAcceleration;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 hmdPositionRaw;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion hmdRotationUnity;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion hmdRotationRaw;

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xCFE94C", Offset = "0xCFE94C", VA = "0xCFE94C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xCFE9C4", Offset = "0xCFE9C4", VA = "0xCFE9C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xCFE9C8", Offset = "0xCFE9C8", VA = "0xCFE9C8")]
	private void UpdateFrustumTransform()
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xCFE9CC", Offset = "0xCFE9CC", VA = "0xCFE9CC")]
	private void UpdateFrustumDisplay()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xCFEB18", Offset = "0xCFEB18", VA = "0xCFEB18")]
	public VRPlaySpace()
	{
	}
}
[Token(Token = "0x2000128")]
public class ScrollSnapSoundHelper : MonoBehaviour
{
	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip swipeElementSound;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xCFEB2C", Offset = "0xCFEB2C", VA = "0xCFEB2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xCFEB30", Offset = "0xCFEB30", VA = "0xCFEB30")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xCFEB34", Offset = "0xCFEB34", VA = "0xCFEB34")]
	public void PlaySwipeElementSound()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xCFEB58", Offset = "0xCFEB58", VA = "0xCFEB58")]
	public ScrollSnapSoundHelper()
	{
	}
}
[Token(Token = "0x2000129")]
public class TestDragonVoice : MonoBehaviour
{
	[Token(Token = "0x200012A")]
	[CompilerGenerated]
	private sealed class <PlayMusic>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TestDragonVoice <>4__this;

		[Token(Token = "0x17000083")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C8")]
			[Address(RVA = "0xCFEE6C", Offset = "0xCFEE6C", VA = "0xCFEE6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CA")]
			[Address(RVA = "0xCFEEB4", Offset = "0xCFEEB4", VA = "0xCFEEB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xCFEC84", Offset = "0xCFEC84", VA = "0xCFEC84")]
		[DebuggerHidden]
		public <PlayMusic>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xCFED18", Offset = "0xCFED18", VA = "0xCFED18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xCFED1C", Offset = "0xCFED1C", VA = "0xCFED1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xCFEE74", Offset = "0xCFEE74", VA = "0xCFEE74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float timeBetweenVoice;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float audioSourceMaxDistance;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<AudioClip> Sounds;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float voiceTime;

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xCFEB60", Offset = "0xCFEB60", VA = "0xCFEB60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xCFEBF0", Offset = "0xCFEBF0", VA = "0xCFEBF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xCFEC10", Offset = "0xCFEC10", VA = "0xCFEC10")]
	[IteratorStateMachine(typeof(<PlayMusic>d__7))]
	private IEnumerator PlayMusic()
	{
		return null;
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xCFECAC", Offset = "0xCFECAC", VA = "0xCFECAC")]
	public void Pause(float time)
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xCFECE8", Offset = "0xCFECE8", VA = "0xCFECE8")]
	public void UnPause()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xCFED04", Offset = "0xCFED04", VA = "0xCFED04")]
	public TestDragonVoice()
	{
	}
}
[Token(Token = "0x200012B")]
public class EnviromentManagment : MonoBehaviour
{
	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnviromentManagment instance;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentAddEnviroment;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int EnviromentCount;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int prevScene;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool firstLoad;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<Transform> painistEnvPoints;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<Transform> waitressEnvPoints;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<Transform> barmenEnvPoints;

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xCFEEBC", Offset = "0xCFEEBC", VA = "0xCFEEBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xCFEF3C", Offset = "0xCFEF3C", VA = "0xCFEF3C")]
	[ContextMenu("try next env")]
	public void SetNextEnviroment()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xCFF068", Offset = "0xCFF068", VA = "0xCFF068")]
	private void SetActive(AsyncOperation obj)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xCFF218", Offset = "0xCFF218", VA = "0xCFF218")]
	private void CleanResources(AsyncOperation obj)
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xCFF220", Offset = "0xCFF220", VA = "0xCFF220")]
	[PunRPC]
	public void SetEnviroment()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xCFF5E0", Offset = "0xCFF5E0", VA = "0xCFF5E0")]
	public Vector3 GetPianistPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xCFF640", Offset = "0xCFF640", VA = "0xCFF640")]
	public Quaternion GetPianistRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xCFF6A0", Offset = "0xCFF6A0", VA = "0xCFF6A0")]
	public Vector3 GetWaitressPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xCFF700", Offset = "0xCFF700", VA = "0xCFF700")]
	public Quaternion GetWaitressRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xCFF760", Offset = "0xCFF760", VA = "0xCFF760")]
	public Vector3 GetBarmenPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xCFF7C0", Offset = "0xCFF7C0", VA = "0xCFF7C0")]
	public Quaternion GetBarmenRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xCFF820", Offset = "0xCFF820", VA = "0xCFF820")]
	public EnviromentManagment()
	{
	}
}
[Token(Token = "0x200012C")]
public class TweenPosition : MonoBehaviour
{
	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TweenType type;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Vector3 startPosition;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 endPosition;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve curve;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float delayTime;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float time;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float innerTime;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool forwardPlay;

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xCFF834", Offset = "0xCFF834", VA = "0xCFF834")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xCFF868", Offset = "0xCFF868", VA = "0xCFF868")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xCFF86C", Offset = "0xCFF86C", VA = "0xCFF86C")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xCFF8B4", Offset = "0xCFF8B4", VA = "0xCFF8B4")]
	public void PlayReverse()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xCFF8F8", Offset = "0xCFF8F8", VA = "0xCFF8F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xCFFACC", Offset = "0xCFFACC", VA = "0xCFFACC")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xCFFB1C", Offset = "0xCFFB1C", VA = "0xCFFB1C")]
	public TweenPosition()
	{
	}
}
[Token(Token = "0x200012D")]
public class TweenRotation : MonoBehaviour
{
	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TweenType type;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 startRotation;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 endRotation;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve curve;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float delayTime;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float time;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float innerTime;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool forwardPlay;

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xCFFC68", Offset = "0xCFFC68", VA = "0xCFFC68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xCFFC9C", Offset = "0xCFFC9C", VA = "0xCFFC9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xCFFCA0", Offset = "0xCFFCA0", VA = "0xCFFCA0")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xCFFCE8", Offset = "0xCFFCE8", VA = "0xCFFCE8")]
	public void PlayReverse()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xCFFD2C", Offset = "0xCFFD2C", VA = "0xCFFD2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xCFFF00", Offset = "0xCFFF00", VA = "0xCFFF00")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xCFFF50", Offset = "0xCFFF50", VA = "0xCFFF50")]
	public TweenRotation()
	{
	}
}
[Token(Token = "0x200012E")]
public class TweenScale : MonoBehaviour
{
	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TweenType type;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Vector3 startScale;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 endScale;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve curve;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float delayTime;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float time;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UnityEvent reversePlayFinishEvent;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float innerTime;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool customEnableAnimation;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool skipDelay;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	private bool forwardPlay;

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xD0009C", Offset = "0xD0009C", VA = "0xD0009C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xD0013C", Offset = "0xD0013C", VA = "0xD0013C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xD00140", Offset = "0xD00140", VA = "0xD00140")]
	public void ResetToBeginning()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xD00194", Offset = "0xD00194", VA = "0xD00194")]
	public void PlayReverse(bool withoutdelay = false)
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xD00224", Offset = "0xD00224", VA = "0xD00224")]
	public void PlayReverse()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xD00268", Offset = "0xD00268", VA = "0xD00268")]
	private void Update()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xD00464", Offset = "0xD00464", VA = "0xD00464")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xD004B4", Offset = "0xD004B4", VA = "0xD004B4")]
	public TweenScale()
	{
	}
}
[Token(Token = "0x200012F")]
public enum TweenType
{
	[Token(Token = "0x40006CB")]
	simple,
	[Token(Token = "0x40006CC")]
	loop
}
[Token(Token = "0x2000130")]
public class UISFXHandler : MonoBehaviour
{
	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audio;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip hoverClip;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip pressClip;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HapticPattern hoverPattern;

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xD00600", Offset = "0xD00600", VA = "0xD00600")]
	public void PlayHoverSound()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xD00648", Offset = "0xD00648", VA = "0xD00648")]
	public void PlayPressSound()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xD00688", Offset = "0xD00688", VA = "0xD00688")]
	public UISFXHandler()
	{
	}
}
[Token(Token = "0x2000131")]
public class RotateObj : MonoBehaviour
{
	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <RotateObjects>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotateObj <>4__this;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion <target>5__2;

		[Token(Token = "0x17000085")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F6")]
			[Address(RVA = "0xD00AB0", Offset = "0xD00AB0", VA = "0xD00AB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005F8")]
			[Address(RVA = "0xD00AF8", Offset = "0xD00AF8", VA = "0xD00AF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xD00808", Offset = "0xD00808", VA = "0xD00808")]
		[DebuggerHidden]
		public <RotateObjects>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xD0089C", Offset = "0xD0089C", VA = "0xD0089C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xD008A0", Offset = "0xD008A0", VA = "0xD008A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xD00AB8", Offset = "0xD00AB8", VA = "0xD00AB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] points;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float smooth;

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xD00690", Offset = "0xD00690", VA = "0xD00690")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xD00784", Offset = "0xD00784", VA = "0xD00784")]
	[IteratorStateMachine(typeof(<RotateObjects>d__3))]
	private IEnumerator RotateObjects(int index)
	{
		return null;
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xD00830", Offset = "0xD00830", VA = "0xD00830")]
	public RotateObj()
	{
	}
}
[Token(Token = "0x2000133")]
public class Fade : MonoBehaviour
{
	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer fade;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color defaultFadeColor;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color fadeColor;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float currentFadeAlpha;

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xD00B00", Offset = "0xD00B00", VA = "0xD00B00")]
	private void Start()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xD00B74", Offset = "0xD00B74", VA = "0xD00B74")]
	public void FadeInOut(float inDuration, float stayDuration, float outDuration)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xD00B04", Offset = "0xD00B04", VA = "0xD00B04")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xD00D94", Offset = "0xD00D94", VA = "0xD00D94")]
	public void SetFade(float val)
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xD00E40", Offset = "0xD00E40", VA = "0xD00E40")]
	public void FadeInOut(float inDuration, float outDuration, [Optional] Action act)
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xD00C70", Offset = "0xD00C70", VA = "0xD00C70")]
	public void FadeIn(float dur)
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xD01008", Offset = "0xD01008", VA = "0xD01008")]
	public void FadeIn(float dur, Action act)
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xD01164", Offset = "0xD01164", VA = "0xD01164")]
	public void FadeOut(float dur, float stayDur = 0f)
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xD01314", Offset = "0xD01314", VA = "0xD01314")]
	public Fade()
	{
	}
}
[Token(Token = "0x2000139")]
public enum HandPose
{
	[Token(Token = "0x40006EA")]
	none,
	[Token(Token = "0x40006EB")]
	rock,
	[Token(Token = "0x40006EC")]
	victory,
	[Token(Token = "0x40006ED")]
	love,
	[Token(Token = "0x40006EE")]
	point,
	[Token(Token = "0x40006EF")]
	fist,
	[Token(Token = "0x40006F0")]
	halfHeart
}
[Token(Token = "0x200013A")]
public class HandPoseController : MonoBehaviour
{
	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Hand hand;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xD015BC", Offset = "0xD015BC", VA = "0xD015BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xD015D8", Offset = "0xD015D8", VA = "0xD015D8")]
	private HandPose ResolveInput()
	{
		return default(HandPose);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xD016F4", Offset = "0xD016F4", VA = "0xD016F4")]
	public void SetPose(HandPose pose)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xD01750", Offset = "0xD01750", VA = "0xD01750")]
	public HandPoseController()
	{
	}
}
[Token(Token = "0x200013B")]
public class BulletGroupPresenceState
{
	[Token(Token = "0x200013C")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass17_0
	{
		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BulletGroupPresenceState <>4__this;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lobbyID;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchID;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool joinable;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string dest;

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xD01B34", Offset = "0xD01B34", VA = "0xD01B34")]
		public <>c__DisplayClass17_0()
		{
		}
	}

	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <Set>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BulletGroupPresenceState <>4__this;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string lobbyID;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string matchID;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool joinable;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string dest;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private <>c__DisplayClass17_0 <>8__1;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GroupPresenceOptions <groupPresenceOptions>5__2;

		[Token(Token = "0x1700008B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000628")]
			[Address(RVA = "0xD01FB0", Offset = "0xD01FB0", VA = "0xD01FB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600062A")]
			[Address(RVA = "0xD01FF8", Offset = "0xD01FF8", VA = "0xD01FF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xD01868", Offset = "0xD01868", VA = "0xD01868")]
		[DebuggerHidden]
		public <Set>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xD01CA0", Offset = "0xD01CA0", VA = "0xD01CA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xD01CA4", Offset = "0xD01CA4", VA = "0xD01CA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xD01FB8", Offset = "0xD01FB8", VA = "0xD01FB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool setError;

	[Token(Token = "0x17000087")]
	public string destination
	{
		[Token(Token = "0x6000615")]
		[Address(RVA = "0xD01758", Offset = "0xD01758", VA = "0xD01758")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000616")]
		[Address(RVA = "0xD01760", Offset = "0xD01760", VA = "0xD01760")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000088")]
	public string lobbySessionID
	{
		[Token(Token = "0x6000617")]
		[Address(RVA = "0xD01768", Offset = "0xD01768", VA = "0xD01768")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000618")]
		[Address(RVA = "0xD01770", Offset = "0xD01770", VA = "0xD01770")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public string matchSessionID
	{
		[Token(Token = "0x6000619")]
		[Address(RVA = "0xD01778", Offset = "0xD01778", VA = "0xD01778")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600061A")]
		[Address(RVA = "0xD01780", Offset = "0xD01780", VA = "0xD01780")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700008A")]
	public bool isJoinable
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xD01788", Offset = "0xD01788", VA = "0xD01788")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xD01790", Offset = "0xD01790", VA = "0xD01790")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xD0179C", Offset = "0xD0179C", VA = "0xD0179C")]
	[IteratorStateMachine(typeof(<Set>d__17))]
	public IEnumerator Set(string dest, string lobbyID, string matchID, bool joinable)
	{
		return null;
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xD01890", Offset = "0xD01890", VA = "0xD01890")]
	public void Print()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xD01A04", Offset = "0xD01A04", VA = "0xD01A04")]
	private void LogError(string message, Error error)
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xD01B2C", Offset = "0xD01B2C", VA = "0xD01B2C")]
	public BulletGroupPresenceState()
	{
	}
}
[Token(Token = "0x200013F")]
public class OnlineCounter : MonoBehaviour
{
	[Token(Token = "0x2000140")]
	[CompilerGenerated]
	private sealed class <GetRegionOnline_C>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnlineCounter <>4__this;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<ErrorData> onFail;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onDone;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <uri>5__2;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <www>5__3;

		[Token(Token = "0x1700008D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000634")]
			[Address(RVA = "0xD02AB8", Offset = "0xD02AB8", VA = "0xD02AB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000636")]
			[Address(RVA = "0xD02B00", Offset = "0xD02B00", VA = "0xD02B00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xD022C8", Offset = "0xD022C8", VA = "0xD022C8")]
		[DebuggerHidden]
		public <GetRegionOnline_C>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xD02300", Offset = "0xD02300", VA = "0xD02300", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xD0231C", Offset = "0xD0231C", VA = "0xD0231C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xD02A08", Offset = "0xD02A08", VA = "0xD02A08")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xD02AC0", Offset = "0xD02AC0", VA = "0xD02AC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text onlineLabel;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image onlineIcon;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float updateInterval;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int onlineCounter;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xD02000", Offset = "0xD02000", VA = "0xD02000")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xD0200C", Offset = "0xD0200C", VA = "0xD0200C")]
	private void Update()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xD021FC", Offset = "0xD021FC", VA = "0xD021FC")]
	public void GetRegionOnline()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xD02224", Offset = "0xD02224", VA = "0xD02224")]
	[IteratorStateMachine(typeof(<GetRegionOnline_C>d__8))]
	private IEnumerator GetRegionOnline_C(Action onDone, Action<ErrorData> onFail)
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xD022F0", Offset = "0xD022F0", VA = "0xD022F0")]
	public OnlineCounter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000141")]
public class RoomsRequestResult
{
	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool success;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RoomInfo[] rooms;

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xD02B08", Offset = "0xD02B08", VA = "0xD02B08")]
	public RoomsRequestResult()
	{
	}
}
[Serializable]
[Token(Token = "0x2000142")]
public class RoomInfo
{
	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string region;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int playerCount;

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xD02B10", Offset = "0xD02B10", VA = "0xD02B10")]
	public RoomInfo()
	{
	}
}
[Token(Token = "0x2000143")]
internal class CustomCertificateHandler : CertificateHandler
{
	[Token(Token = "0x6000639")]
	[Address(RVA = "0xD02B18", Offset = "0xD02B18", VA = "0xD02B18", Slot = "5")]
	protected override bool ValidateCertificate(byte[] certificateData)
	{
		return default(bool);
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xD02A00", Offset = "0xD02A00", VA = "0xD02A00")]
	public CustomCertificateHandler()
	{
	}
}
[Token(Token = "0x2000144")]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x2000145")]
	public enum Mode
	{
		[Token(Token = "0x4000729")]
		OutlineAll,
		[Token(Token = "0x400072A")]
		OutlineVisible,
		[Token(Token = "0x400072B")]
		OutlineHidden,
		[Token(Token = "0x400072C")]
		OutlineAndSilhouette,
		[Token(Token = "0x400072D")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000146")]
	private class ListVector3
	{
		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xD0489C", Offset = "0xD0489C", VA = "0xD0489C")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool inited;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useCustomColor;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Range(0f, 100f)]
	private float outlineWidth;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Optional")]
	[SerializeField]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	private bool precomputeOutline;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool usePreparedObject;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject outlineObject;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Renderer[] renderers;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material outlineFillMaterial;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool needsUpdate;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool outLineShow;

	[Token(Token = "0x1700008F")]
	public Mode OutlineMode
	{
		[Token(Token = "0x600063D")]
		[Address(RVA = "0xD0382C", Offset = "0xD0382C", VA = "0xD0382C")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x600063E")]
		[Address(RVA = "0xD03834", Offset = "0xD03834", VA = "0xD03834")]
		set
		{
		}
	}

	[Token(Token = "0x17000090")]
	public Color OutlineColor
	{
		[Token(Token = "0x600063F")]
		[Address(RVA = "0xD03844", Offset = "0xD03844", VA = "0xD03844")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000640")]
		[Address(RVA = "0xD03850", Offset = "0xD03850", VA = "0xD03850")]
		set
		{
		}
	}

	[Token(Token = "0x17000091")]
	public float OutlineWidth
	{
		[Token(Token = "0x6000641")]
		[Address(RVA = "0xD03864", Offset = "0xD03864", VA = "0xD03864")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000642")]
		[Address(RVA = "0xD0386C", Offset = "0xD0386C", VA = "0xD0386C")]
		set
		{
		}
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xD02B20", Offset = "0xD02B20", VA = "0xD02B20")]
	private void Start()
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xD02B24", Offset = "0xD02B24", VA = "0xD02B24")]
	public void Init()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xD0387C", Offset = "0xD0387C", VA = "0xD0387C")]
	public void ShowOutline()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xD03780", Offset = "0xD03780", VA = "0xD03780")]
	public void HideOutline()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xD038C8", Offset = "0xD038C8", VA = "0xD038C8")]
	public void ShowOutline(bool show)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xD037C8", Offset = "0xD037C8", VA = "0xD037C8")]
	public void SetOutlineWidth(float val)
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xD038D4", Offset = "0xD038D4", VA = "0xD038D4")]
	private void GetAllRenderersFromChilds()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xD0392C", Offset = "0xD0392C", VA = "0xD0392C")]
	private void Bake(List<MeshFilter> meshFilters)
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xD02EF0", Offset = "0xD02EF0", VA = "0xD02EF0")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xD048A4", Offset = "0xD048A4", VA = "0xD048A4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xD03CE4", Offset = "0xD03CE4", VA = "0xD03CE4")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xD03630", Offset = "0xD03630", VA = "0xD03630")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xD04ACC", Offset = "0xD04ACC", VA = "0xD04ACC")]
	public Outline()
	{
	}
}
[Token(Token = "0x2000148")]
public class PickUpController : MonoBehaviour
{
	[Token(Token = "0x2000149")]
	public delegate void PickEvent(PickUpController controller);

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PickEvent onPickEvent;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PickEvent onUnPickEvent;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Hand hand;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float radius;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask layerMask;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform pickUpRealPoint;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PickUpObject pickedObj;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float throwVelocity;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool gripDown;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool gripUp;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Player player;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] velocityDirections;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentVelocityIndex;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private PhotonView photonView;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool lockedByMaster;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool allowPick;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool allowUnpick;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool blockAllInteraction;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Collider[] hits;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PickUpObject currentObject;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PickUpObject newCurrentObject;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float lastPickUpTime;

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xD04DAC", Offset = "0xD04DAC", VA = "0xD04DAC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xD04DF8", Offset = "0xD04DF8", VA = "0xD04DF8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xD04F6C", Offset = "0xD04F6C", VA = "0xD04F6C")]
	public void LockByMaster(bool locked)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xD04FD0", Offset = "0xD04FD0", VA = "0xD04FD0")]
	public void AllowPick(bool allow)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xD05000", Offset = "0xD05000", VA = "0xD05000")]
	public void AllowUnPick(bool allow)
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xD05028", Offset = "0xD05028", VA = "0xD05028")]
	private void Start()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xD050A0", Offset = "0xD050A0", VA = "0xD050A0")]
	public void SetPV(PhotonView pv)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xD050A8", Offset = "0xD050A8", VA = "0xD050A8")]
	public PhotonView GetPhotonView()
	{
		return null;
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xD050B0", Offset = "0xD050B0", VA = "0xD050B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xD05574", Offset = "0xD05574", VA = "0xD05574")]
	public void TryPick()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xD05220", Offset = "0xD05220", VA = "0xD05220")]
	private void CheckNearestObjects()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xD0576C", Offset = "0xD0576C", VA = "0xD0576C")]
	private bool CheckNetworkOwnerIsLocal(PickUpObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xD04DFC", Offset = "0xD04DFC", VA = "0xD04DFC")]
	public void UnpickItem()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xD05930", Offset = "0xD05930", VA = "0xD05930")]
	public void SetPose(HandPose pose)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xD0587C", Offset = "0xD0587C", VA = "0xD0587C")]
	public Vector3 GetControllerAvarageVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xD05934", Offset = "0xD05934", VA = "0xD05934")]
	public Vector3 VelocityRelativeToPlayer(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xD059A4", Offset = "0xD059A4", VA = "0xD059A4")]
	public PickUpController()
	{
	}
}
[Token(Token = "0x200014A")]
public class PlayingCardItem : PickUpObject
{
	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private PlayingCard playingCard;

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xD05BD8", Offset = "0xD05BD8", VA = "0xD05BD8", Slot = "9")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xD05CD8", Offset = "0xD05CD8", VA = "0xD05CD8", Slot = "10")]
	public override void PickUp(PickUpController controller)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xD05ED4", Offset = "0xD05ED4", VA = "0xD05ED4", Slot = "11")]
	public override void OnPickUpLogic()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xD0628C", Offset = "0xD0628C", VA = "0xD0628C", Slot = "14")]
	public override void HoverByHand(bool hovered)
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xD0634C", Offset = "0xD0634C", VA = "0xD0634C", Slot = "13")]
	public override void UnPick()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xD0658C", Offset = "0xD0658C", VA = "0xD0658C")]
	public PlayingCardItem()
	{
	}
}
[Serializable]
[Token(Token = "0x200014B")]
public struct HandSnapPosition
{
	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Hand setIn;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 snapPosition;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 snapRotation;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HandPose pose;
}
[Token(Token = "0x200014C")]
[RequireComponent(typeof(Rigidbody))]
public class PickUpObject : MonoBehaviour, IPunObservable, IPunOwnershipCallbacks
{
	[Token(Token = "0x200014D")]
	[CompilerGenerated]
	private sealed class <SnapPositionCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float snapDuration;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PickUpObject <>4__this;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 startPos;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 endPos;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Quaternion startRot;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 endRot;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float <t>5__2;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600068A")]
			[Address(RVA = "0xD0728C", Offset = "0xD0728C", VA = "0xD0728C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0xD072D4", Offset = "0xD072D4", VA = "0xD072D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xD06A78", Offset = "0xD06A78", VA = "0xD06A78")]
		[DebuggerHidden]
		public <SnapPositionCoroutine>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xD0709C", Offset = "0xD0709C", VA = "0xD0709C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xD070A0", Offset = "0xD070A0", VA = "0xD070A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xD07294", Offset = "0xD07294", VA = "0xD07294", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool _picked;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	protected bool ignoreSerialization;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float snapDuration;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool canPick;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool snapInHand;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool useOutline;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Outline outline;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandSnapPosition handSnapPosition;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool useHaptic;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HapticPattern hapticPattern;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Rigidbody rb;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Hand currentHand;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PickUpController currentController;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	internal PhotonView photonView;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	internal Transform defaultParent;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	internal bool useCustomThrow;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	internal bool waitPickUpLogic;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	internal bool ignoreLatePickUpAfterTransferOwnerShip;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	protected bool snapKostil;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool isSnapping;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MoverType savedSnapMover;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	internal Coroutine currentSnapCoroutine;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	internal bool continueChangeTransform;

	[Token(Token = "0x17000092")]
	public bool picked
	{
		[Token(Token = "0x600066F")]
		[Address(RVA = "0xD065FC", Offset = "0xD065FC", VA = "0xD065FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000670")]
		[Address(RVA = "0xD06604", Offset = "0xD06604", VA = "0xD06604")]
		set
		{
		}
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xD06610", Offset = "0xD06610", VA = "0xD06610")]
	private void CopyTransform()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xD06668", Offset = "0xD06668", VA = "0xD06668", Slot = "8")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xD05C38", Offset = "0xD05C38", VA = "0xD05C38", Slot = "9")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xD05D78", Offset = "0xD05D78", VA = "0xD05D78", Slot = "10")]
	public virtual void PickUp(PickUpController controller)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xD05F54", Offset = "0xD05F54", VA = "0xD05F54", Slot = "11")]
	public virtual void OnPickUpLogic()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xD068F0", Offset = "0xD068F0", VA = "0xD068F0", Slot = "12")]
	public virtual void TransferHand(PickUpController controller)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xD06700", Offset = "0xD06700", VA = "0xD06700")]
	public void Snap(bool ignorePose = false)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xD0697C", Offset = "0xD0697C", VA = "0xD0697C")]
	[IteratorStateMachine(typeof(<SnapPositionCoroutine>d__33))]
	private IEnumerator SnapPositionCoroutine(float snapDuration, Vector3 startPos, Vector3 endPos, Quaternion startRot, Vector3 endRot)
	{
		return null;
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xD063E8", Offset = "0xD063E8", VA = "0xD063E8", Slot = "13")]
	public virtual void UnPick()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xD06AA0", Offset = "0xD06AA0", VA = "0xD06AA0")]
	internal void PhotonSetParent()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xD06C00", Offset = "0xD06C00", VA = "0xD06C00")]
	[PunRPC]
	public void SetupObjectPickedFlags_RPC(bool _picked)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xD0632C", Offset = "0xD0632C", VA = "0xD0632C", Slot = "14")]
	public virtual void HoverByHand(bool hovered)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xD06CD4", Offset = "0xD06CD4", VA = "0xD06CD4")]
	[PunRPC]
	public void SetControllerParent(int controllerViewId, bool ignoreSnap)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xD06B9C", Offset = "0xD06B9C", VA = "0xD06B9C")]
	[PunRPC]
	public void SetDefaultParent()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xD06DCC", Offset = "0xD06DCC", VA = "0xD06DCC")]
	[PunRPC]
	public void DeleteItem_RPC()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xD06E44", Offset = "0xD06E44", VA = "0xD06E44", Slot = "15")]
	public virtual void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xD06F50", Offset = "0xD06F50", VA = "0xD06F50", Slot = "5")]
	private void Photon.Pun.IPunOwnershipCallbacks.OnOwnershipRequest(PhotonView targetView, Photon.Realtime.Player requestingPlayer)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xD06F54", Offset = "0xD06F54", VA = "0xD06F54", Slot = "6")]
	public void OnOwnershipTransfered(PhotonView targetView, Photon.Realtime.Player previousOwner)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xD06F8C", Offset = "0xD06F8C", VA = "0xD06F8C", Slot = "7")]
	private void Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransferFailed(PhotonView targetView, Photon.Realtime.Player senderOfFailedRequest)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xD06FF4", Offset = "0xD06FF4", VA = "0xD06FF4", Slot = "16")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xD065EC", Offset = "0xD065EC", VA = "0xD065EC")]
	public PickUpObject()
	{
	}
}
[Token(Token = "0x200014E")]
public class Player : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRManager ovrManager;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera mainCamera;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform trackingSpace;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Fade fade;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform head;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform leftHandAnchor;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform rightHandAnchor;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float fadeOutDuration;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float _compositorDuration;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject compositorLayer;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject oculusCompositorLayer;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject picoCompositorLayer;

	[Token(Token = "0x17000095")]
	public float compositorDuration
	{
		[Token(Token = "0x600068D")]
		[Address(RVA = "0xD072DC", Offset = "0xD072DC", VA = "0xD072DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xD0734C", Offset = "0xD0734C", VA = "0xD0734C")]
	private void Start()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xD07350", Offset = "0xD07350", VA = "0xD07350")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xD07374", Offset = "0xD07374", VA = "0xD07374")]
	public void ShowCompositor(bool active)
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xD077D8", Offset = "0xD077D8", VA = "0xD077D8")]
	public Player()
	{
	}
}
[Token(Token = "0x200014F")]
[CreateAssetMenu(fileName = "Positions", menuName = "PositionsAsset")]
public class PositionOfObjects : ScriptableObject
{
	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Avatar[] avatars;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ColliderPosition[] controllerColliders;

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xD077EC", Offset = "0xD077EC", VA = "0xD077EC")]
	public ControllerPosAndRot GetAvatarPosAndRot(PlayerType type, string controllerName)
	{
		return null;
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xD07880", Offset = "0xD07880", VA = "0xD07880")]
	private Avatar GetAvatarByType(PlayerType type)
	{
		return null;
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xD079B4", Offset = "0xD079B4", VA = "0xD079B4")]
	public void SetPositionAndRotation(PlayerType type, string controllerName, SaloonSpin.Hand Hand, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xD0818C", Offset = "0xD0818C", VA = "0xD0818C")]
	public void SetColliderSettings(string controllerName, SaloonSpin.Hand hand, Vector3 pos, float r)
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xD084E8", Offset = "0xD084E8", VA = "0xD084E8")]
	public ColliderPosition GetColliderSettings(string controllerName)
	{
		return null;
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xD085DC", Offset = "0xD085DC", VA = "0xD085DC")]
	public PositionOfObjects()
	{
	}
}
[Serializable]
[Token(Token = "0x2000150")]
public class Avatar
{
	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerType type;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ControllerPosAndRot[] diffrentControllers;

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xD078DC", Offset = "0xD078DC", VA = "0xD078DC")]
	public ControllerPosAndRot GetPosAndRot(string controllerName)
	{
		return null;
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xD08184", Offset = "0xD08184", VA = "0xD08184")]
	public Avatar()
	{
	}
}
[Serializable]
[Token(Token = "0x2000151")]
public class ControllerPosAndRot
{
	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] ControllersName;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 PosL;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 RotL;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 PosR;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 RotR;

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xD0810C", Offset = "0xD0810C", VA = "0xD0810C")]
	public bool isEqual(string controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xD079AC", Offset = "0xD079AC", VA = "0xD079AC")]
	public ControllerPosAndRot()
	{
	}
}
[Serializable]
[Token(Token = "0x2000152")]
public class ColliderPosition
{
	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 posL;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 posR;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float radiusL;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float radiusR;

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xD084E0", Offset = "0xD084E0", VA = "0xD084E0")]
	public ColliderPosition()
	{
	}
}
[Token(Token = "0x2000153")]
public enum PlatformType
{
	[Token(Token = "0x400078A")]
	Oculus,
	[Token(Token = "0x400078B")]
	Steam,
	[Token(Token = "0x400078C")]
	SideQuest,
	[Token(Token = "0x400078D")]
	Pico
}
[Token(Token = "0x2000154")]
public static class CommonAudioSource
{
	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AudioSource _source;

	[Token(Token = "0x17000096")]
	public static AudioSource source
	{
		[Token(Token = "0x600069D")]
		[Address(RVA = "0xD085E4", Offset = "0xD085E4", VA = "0xD085E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600069E")]
		[Address(RVA = "0xD0886C", Offset = "0xD0886C", VA = "0xD0886C")]
		private set
		{
		}
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xD08670", Offset = "0xD08670", VA = "0xD08670")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	private static void Init()
	{
	}
}
[Serializable]
[Token(Token = "0x2000155")]
public class BoolUnityEvent : UnityEvent<bool>
{
	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xD088C4", Offset = "0xD088C4", VA = "0xD088C4")]
	public BoolUnityEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000156")]
public class IntUnityEvent : UnityEvent<int>
{
	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xD0890C", Offset = "0xD0890C", VA = "0xD0890C")]
	public IntUnityEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000157")]
public class FloatUnityEvent : UnityEvent<float>
{
	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xD08954", Offset = "0xD08954", VA = "0xD08954")]
	public FloatUnityEvent()
	{
	}
}
[Token(Token = "0x2000158")]
public class MoverType : IDisposable
{
	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected Action onCompelte;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Coroutine coroutine;

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xCFDA88", Offset = "0xCFDA88", VA = "0xCFDA88")]
	public MoverType OnComplete(Action act)
	{
		return null;
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xD0899C", Offset = "0xD0899C", VA = "0xD0899C")]
	public void InvokeOnCompelte()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xD089B8", Offset = "0xD089B8", VA = "0xD089B8", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xD089BC", Offset = "0xD089BC", VA = "0xD089BC")]
	public MoverType()
	{
	}
}
[Token(Token = "0x2000159")]
public class PausableMoverType : MoverType
{
	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool paused;

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xD089C4", Offset = "0xD089C4", VA = "0xD089C4")]
	public new PausableMoverType OnComplete(Action act)
	{
		return null;
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xD089E0", Offset = "0xD089E0", VA = "0xD089E0")]
	public PausableMoverType()
	{
	}
}
[Token(Token = "0x200015A")]
public static class Ext
{
	[Token(Token = "0x200015B")]
	public class MonoCalls : MonoBehaviour
	{
		[Token(Token = "0x200015C")]
		public delegate void ApplicationQuit();

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ApplicationQuit onApplicationQuit;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _coroutines;

		[Token(Token = "0x17000097")]
		public float coroutines
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xD0B458", Offset = "0xD0B458", VA = "0xD0B458")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xD0B460", Offset = "0xD0B460", VA = "0xD0B460")]
			set
			{
			}
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xD0B3C8", Offset = "0xD0B3C8", VA = "0xD0B3C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xD0B410", Offset = "0xD0B410", VA = "0xD0B410")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xD0B468", Offset = "0xD0B468", VA = "0xD0B468")]
		public Coroutine InvokeCoroutine(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xD0B470", Offset = "0xD0B470", VA = "0xD0B470")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xD0B48C", Offset = "0xD0B48C", VA = "0xD0B48C")]
		public MonoCalls()
		{
		}
	}

	[Token(Token = "0x200015D")]
	[CompilerGenerated]
	private sealed class <InvokeInMainThreadCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<object> act;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object[] objs;

		[Token(Token = "0x17000098")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006ED")]
			[Address(RVA = "0xD0B5F8", Offset = "0xD0B5F8", VA = "0xD0B5F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006EF")]
			[Address(RVA = "0xD0B640", Offset = "0xD0B640", VA = "0xD0B640", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xD08E08", Offset = "0xD08E08", VA = "0xD08E08")]
		[DebuggerHidden]
		public <InvokeInMainThreadCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xD0B5A0", Offset = "0xD0B5A0", VA = "0xD0B5A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xD0B5A4", Offset = "0xD0B5A4", VA = "0xD0B5A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xD0B600", Offset = "0xD0B600", VA = "0xD0B600", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015E")]
	[CompilerGenerated]
	private sealed class <LoopIenum>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<int> act;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxtimes;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoverType m;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <t>5__2;

		[Token(Token = "0x1700009A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006F3")]
			[Address(RVA = "0xD0B7B4", Offset = "0xD0B7B4", VA = "0xD0B7B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xD0B7FC", Offset = "0xD0B7FC", VA = "0xD0B7FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xD09F58", Offset = "0xD09F58", VA = "0xD09F58")]
		[DebuggerHidden]
		public <LoopIenum>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xD0B648", Offset = "0xD0B648", VA = "0xD0B648", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xD0B64C", Offset = "0xD0B64C", VA = "0xD0B64C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xD0B7BC", Offset = "0xD0B7BC", VA = "0xD0B7BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015F")]
	[CompilerGenerated]
	private sealed class <PausableContinuouslyIenum>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PausableMoverType m;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<float> act;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <t>5__2;

		[Token(Token = "0x1700009C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006F9")]
			[Address(RVA = "0xD0B94C", Offset = "0xD0B94C", VA = "0xD0B94C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006FB")]
			[Address(RVA = "0xD0B994", Offset = "0xD0B994", VA = "0xD0B994", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xD09F80", Offset = "0xD09F80", VA = "0xD09F80")]
		[DebuggerHidden]
		public <PausableContinuouslyIenum>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xD0B804", Offset = "0xD0B804", VA = "0xD0B804", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xD0B808", Offset = "0xD0B808", VA = "0xD0B808", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xD0B954", Offset = "0xD0B954", VA = "0xD0B954", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000160")]
	[CompilerGenerated]
	private sealed class <ContinuouslyIenum>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action act;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoverType m;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <t>5__2;

		[Token(Token = "0x1700009E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006FF")]
			[Address(RVA = "0xD0BAE0", Offset = "0xD0BAE0", VA = "0xD0BAE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0xD0BB28", Offset = "0xD0BB28", VA = "0xD0BB28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xD09FA8", Offset = "0xD09FA8", VA = "0xD09FA8")]
		[DebuggerHidden]
		public <ContinuouslyIenum>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xD0B99C", Offset = "0xD0B99C", VA = "0xD0B99C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xD0B9A0", Offset = "0xD0B9A0", VA = "0xD0B9A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xD0BAE8", Offset = "0xD0BAE8", VA = "0xD0BAE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000161")]
	[CompilerGenerated]
	private sealed class <WaitUntilIenum>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<bool> predicate;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action act;

		[Token(Token = "0x170000A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0xD0BC4C", Offset = "0xD0BC4C", VA = "0xD0BC4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0xD0BC94", Offset = "0xD0BC94", VA = "0xD0BC94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xD09FD0", Offset = "0xD09FD0", VA = "0xD09FD0")]
		[DebuggerHidden]
		public <WaitUntilIenum>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xD0BB30", Offset = "0xD0BB30", VA = "0xD0BB30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xD0BB34", Offset = "0xD0BB34", VA = "0xD0BB34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xD0BC54", Offset = "0xD0BC54", VA = "0xD0BC54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000162")]
	[CompilerGenerated]
	private sealed class <ContinuouslyIenum>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> act;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoverType m;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <t>5__2;

		[Token(Token = "0x170000A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600070B")]
			[Address(RVA = "0xD0BDE8", Offset = "0xD0BDE8", VA = "0xD0BDE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600070D")]
			[Address(RVA = "0xD0BE30", Offset = "0xD0BE30", VA = "0xD0BE30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xD09FF8", Offset = "0xD09FF8", VA = "0xD09FF8")]
		[DebuggerHidden]
		public <ContinuouslyIenum>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xD0BC9C", Offset = "0xD0BC9C", VA = "0xD0BC9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xD0BCA0", Offset = "0xD0BCA0", VA = "0xD0BCA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xD0BDF0", Offset = "0xD0BDF0", VA = "0xD0BDF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <ContinuouslyIenumFixed>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> act;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoverType m;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <t>5__2;

		[Token(Token = "0x170000A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000711")]
			[Address(RVA = "0xD0BFB0", Offset = "0xD0BFB0", VA = "0xD0BFB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000713")]
			[Address(RVA = "0xD0BFF8", Offset = "0xD0BFF8", VA = "0xD0BFF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xD0A020", Offset = "0xD0A020", VA = "0xD0A020")]
		[DebuggerHidden]
		public <ContinuouslyIenumFixed>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xD0BE38", Offset = "0xD0BE38", VA = "0xD0BE38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xD0BE3C", Offset = "0xD0BE3C", VA = "0xD0BE3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xD0BFB8", Offset = "0xD0BFB8", VA = "0xD0BFB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000164")]
	[CompilerGenerated]
	private sealed class <WaitEndOfFrame>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action act;

		[Token(Token = "0x170000A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000717")]
			[Address(RVA = "0xD0C0B8", Offset = "0xD0C0B8", VA = "0xD0C0B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000719")]
			[Address(RVA = "0xD0C100", Offset = "0xD0C100", VA = "0xD0C100", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xD0A048", Offset = "0xD0A048", VA = "0xD0A048")]
		[DebuggerHidden]
		public <WaitEndOfFrame>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xD0C000", Offset = "0xD0C000", VA = "0xD0C000", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xD0C004", Offset = "0xD0C004", VA = "0xD0C004", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xD0C0C0", Offset = "0xD0C0C0", VA = "0xD0C0C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000165")]
	[CompilerGenerated]
	private sealed class <SafeContinuouslyIenum>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject go;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<float> act;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MoverType m;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <t>5__2;

		[Token(Token = "0x170000A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071D")]
			[Address(RVA = "0xD0C2EC", Offset = "0xD0C2EC", VA = "0xD0C2EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071F")]
			[Address(RVA = "0xD0C334", Offset = "0xD0C334", VA = "0xD0C334", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xD0A070", Offset = "0xD0A070", VA = "0xD0A070")]
		[DebuggerHidden]
		public <SafeContinuouslyIenum>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xD0C108", Offset = "0xD0C108", VA = "0xD0C108", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xD0C10C", Offset = "0xD0C10C", VA = "0xD0C10C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xD0C2F4", Offset = "0xD0C2F4", VA = "0xD0C2F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000166")]
	[CompilerGenerated]
	private sealed class <ContinuousUnscaledlyIenum>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> act;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoverType m;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <t>5__2;

		[Token(Token = "0x170000AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000723")]
			[Address(RVA = "0xD0C49C", Offset = "0xD0C49C", VA = "0xD0C49C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000725")]
			[Address(RVA = "0xD0C4E4", Offset = "0xD0C4E4", VA = "0xD0C4E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xD0A098", Offset = "0xD0A098", VA = "0xD0A098")]
		[DebuggerHidden]
		public <ContinuousUnscaledlyIenum>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xD0C33C", Offset = "0xD0C33C", VA = "0xD0C33C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xD0C340", Offset = "0xD0C340", VA = "0xD0C340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xD0C4A4", Offset = "0xD0C4A4", VA = "0xD0C4A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000167")]
	[CompilerGenerated]
	private sealed class <ScaleAnimation>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transform;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 from;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 to;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MoverType m;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <t>5__2;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000729")]
			[Address(RVA = "0xD0C660", Offset = "0xD0C660", VA = "0xD0C660", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600072B")]
			[Address(RVA = "0xD0C6A8", Offset = "0xD0C6A8", VA = "0xD0C6A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xD0A0C0", Offset = "0xD0A0C0", VA = "0xD0A0C0")]
		[DebuggerHidden]
		public <ScaleAnimation>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xD0C4EC", Offset = "0xD0C4EC", VA = "0xD0C4EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xD0C4F0", Offset = "0xD0C4F0", VA = "0xD0C4F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xD0C668", Offset = "0xD0C668", VA = "0xD0C668", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000168")]
	[CompilerGenerated]
	private sealed class <WaitForCall>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action act;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600072F")]
			[Address(RVA = "0xD0C7D4", Offset = "0xD0C7D4", VA = "0xD0C7D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000731")]
			[Address(RVA = "0xD0C81C", Offset = "0xD0C81C", VA = "0xD0C81C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xD0A0E8", Offset = "0xD0A0E8", VA = "0xD0A0E8")]
		[DebuggerHidden]
		public <WaitForCall>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xD0C6B0", Offset = "0xD0C6B0", VA = "0xD0C6B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xD0C6B4", Offset = "0xD0C6B4", VA = "0xD0C6B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xD0C7DC", Offset = "0xD0C7DC", VA = "0xD0C7DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000169")]
	[CompilerGenerated]
	private sealed class <UnscaledWaitForCall>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action act;

		[Token(Token = "0x170000B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0xD0C948", Offset = "0xD0C948", VA = "0xD0C948", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000737")]
			[Address(RVA = "0xD0C990", Offset = "0xD0C990", VA = "0xD0C990", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xD0A110", Offset = "0xD0A110", VA = "0xD0A110")]
		[DebuggerHidden]
		public <UnscaledWaitForCall>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xD0C824", Offset = "0xD0C824", VA = "0xD0C824", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xD0C828", Offset = "0xD0C828", VA = "0xD0C828", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xD0C950", Offset = "0xD0C950", VA = "0xD0C950", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016A")]
	[CompilerGenerated]
	private sealed class <WaitForFrames>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frames;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action act;

		[Token(Token = "0x170000B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600073B")]
			[Address(RVA = "0xD0CA98", Offset = "0xD0CA98", VA = "0xD0CA98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600073D")]
			[Address(RVA = "0xD0CAE0", Offset = "0xD0CAE0", VA = "0xD0CAE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xD0A138", Offset = "0xD0A138", VA = "0xD0A138")]
		[DebuggerHidden]
		public <WaitForFrames>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xD0C998", Offset = "0xD0C998", VA = "0xD0C998", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xD0C99C", Offset = "0xD0C99C", VA = "0xD0C99C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xD0CAA0", Offset = "0xD0CAA0", VA = "0xD0CAA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016B")]
	[CompilerGenerated]
	private sealed class <MoveObject>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trans;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 endPos;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action act;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <i>5__3;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <rate>5__4;

		[Token(Token = "0x170000B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0xD0CC1C", Offset = "0xD0CC1C", VA = "0xD0CC1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000743")]
			[Address(RVA = "0xD0CC64", Offset = "0xD0CC64", VA = "0xD0CC64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xD0A6D4", Offset = "0xD0A6D4", VA = "0xD0A6D4")]
		[DebuggerHidden]
		public <MoveObject>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xD0CAE8", Offset = "0xD0CAE8", VA = "0xD0CAE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xD0CAEC", Offset = "0xD0CAEC", VA = "0xD0CAEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xD0CC24", Offset = "0xD0CC24", VA = "0xD0CC24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016C")]
	[CompilerGenerated]
	private sealed class <MoveObjectToTransfrom>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trans;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform endPos;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action act;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <i>5__3;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <rate>5__4;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000747")]
			[Address(RVA = "0xD0CDD4", Offset = "0xD0CDD4", VA = "0xD0CDD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000749")]
			[Address(RVA = "0xD0CE1C", Offset = "0xD0CE1C", VA = "0xD0CE1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xD0A7B0", Offset = "0xD0A7B0", VA = "0xD0A7B0")]
		[DebuggerHidden]
		public <MoveObjectToTransfrom>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xD0CC6C", Offset = "0xD0CC6C", VA = "0xD0CC6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xD0CC70", Offset = "0xD0CC70", VA = "0xD0CC70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xD0CDDC", Offset = "0xD0CDDC", VA = "0xD0CDDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <ShakeObject>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float dur;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxX;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxY;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <counter>5__2;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startpos>5__3;

		[Token(Token = "0x170000B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600074D")]
			[Address(RVA = "0xD0CF60", Offset = "0xD0CF60", VA = "0xD0CF60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600074F")]
			[Address(RVA = "0xD0CFA8", Offset = "0xD0CFA8", VA = "0xD0CFA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xD0A7D8", Offset = "0xD0A7D8", VA = "0xD0A7D8")]
		[DebuggerHidden]
		public <ShakeObject>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xD0CE24", Offset = "0xD0CE24", VA = "0xD0CE24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xD0CE28", Offset = "0xD0CE28", VA = "0xD0CE28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xD0CF68", Offset = "0xD0CF68", VA = "0xD0CF68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016E")]
	[CompilerGenerated]
	private sealed class <MoveObjectByCurve>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trans;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 endPos;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve curve;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action act;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <i>5__3;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <rate>5__4;

		[Token(Token = "0x170000BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000753")]
			[Address(RVA = "0xD0D110", Offset = "0xD0D110", VA = "0xD0D110", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0xD0D158", Offset = "0xD0D158", VA = "0xD0D158", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xD0A8CC", Offset = "0xD0A8CC", VA = "0xD0A8CC")]
		[DebuggerHidden]
		public <MoveObjectByCurve>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xD0CFB0", Offset = "0xD0CFB0", VA = "0xD0CFB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xD0CFB4", Offset = "0xD0CFB4", VA = "0xD0CFB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xD0D118", Offset = "0xD0D118", VA = "0xD0D118", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016F")]
	[CompilerGenerated]
	private sealed class <MaterialColor>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material mat;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color endCol;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action act;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color <startPos>5__2;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <i>5__3;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <rate>5__4;

		[Token(Token = "0x170000BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0xD0D288", Offset = "0xD0D288", VA = "0xD0D288", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0xD0D2D0", Offset = "0xD0D2D0", VA = "0xD0D2D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xD0A9BC", Offset = "0xD0A9BC", VA = "0xD0A9BC")]
		[DebuggerHidden]
		public <MaterialColor>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xD0D160", Offset = "0xD0D160", VA = "0xD0D160", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xD0D164", Offset = "0xD0D164", VA = "0xD0D164", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xD0D290", Offset = "0xD0D290", VA = "0xD0D290", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000170")]
	[CompilerGenerated]
	private sealed class <ImageColor>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image img;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color endCol;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action act;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color <startPos>5__2;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <i>5__3;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <rate>5__4;

		[Token(Token = "0x170000BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0xD0D418", Offset = "0xD0D418", VA = "0xD0D418", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xD0D460", Offset = "0xD0D460", VA = "0xD0D460", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xD0AAAC", Offset = "0xD0AAAC", VA = "0xD0AAAC")]
		[DebuggerHidden]
		public <ImageColor>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xD0D2D8", Offset = "0xD0D2D8", VA = "0xD0D2D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xD0D2DC", Offset = "0xD0D2DC", VA = "0xD0D2DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xD0D420", Offset = "0xD0D420", VA = "0xD0D420", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000171")]
	[CompilerGenerated]
	private sealed class <MoveObjectLocal>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trans;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 endPos;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action act;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <i>5__3;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <rate>5__4;

		[Token(Token = "0x170000C0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xD0D59C", Offset = "0xD0D59C", VA = "0xD0D59C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0xD0D5E4", Offset = "0xD0D5E4", VA = "0xD0D5E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xD0AB8C", Offset = "0xD0AB8C", VA = "0xD0AB8C")]
		[DebuggerHidden]
		public <MoveObjectLocal>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xD0D468", Offset = "0xD0D468", VA = "0xD0D468", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xD0D46C", Offset = "0xD0D46C", VA = "0xD0D46C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xD0D5A4", Offset = "0xD0D5A4", VA = "0xD0D5A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000172")]
	[CompilerGenerated]
	private sealed class <RotateObjectLocal>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trans;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion endPos;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action act;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion <startPos>5__2;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <i>5__3;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <rate>5__4;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0xD0D71C", Offset = "0xD0D71C", VA = "0xD0D71C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600076D")]
			[Address(RVA = "0xD0D764", Offset = "0xD0D764", VA = "0xD0D764", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xD0ACB8", Offset = "0xD0ACB8", VA = "0xD0ACB8")]
		[DebuggerHidden]
		public <RotateObjectLocal>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xD0D5EC", Offset = "0xD0D5EC", VA = "0xD0D5EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xD0D5F0", Offset = "0xD0D5F0", VA = "0xD0D5F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xD0D724", Offset = "0xD0D724", VA = "0xD0D724", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MonoCalls mono;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool inited;

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xD089E8", Offset = "0xD089E8", VA = "0xD089E8")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	public static void InitMonoCalls()
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xD08BC8", Offset = "0xD08BC8", VA = "0xD08BC8")]
	public static void StopAllCoroutines()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xCFD5E8", Offset = "0xCFD5E8", VA = "0xCFD5E8")]
	public static void DelayedCall(float time, Action act)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xD08D00", Offset = "0xD08D00", VA = "0xD08D00")]
	public static void InvokeInMainThread(Action<object> act, params object[] objs)
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xD08D78", Offset = "0xD08D78", VA = "0xD08D78")]
	[IteratorStateMachine(typeof(<InvokeInMainThreadCoroutine>d__7))]
	private static IEnumerator InvokeInMainThreadCoroutine(Action<object> act, params object[] objs)
	{
		return null;
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xD00D08", Offset = "0xD00D08", VA = "0xD00D08")]
	public static void UnscaledDelayedCall(float time, Action act)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xD08EB4", Offset = "0xD08EB4", VA = "0xD08EB4")]
	public static void CallAfterFrames(int frames, Action act)
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xD08FC4", Offset = "0xD08FC4", VA = "0xD08FC4")]
	public static void InvokeUntil(Func<bool> predicate, Action act)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xD090E0", Offset = "0xD090E0", VA = "0xD090E0")]
	public static MoverType Continuously(float time, Action act)
	{
		return null;
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xD09244", Offset = "0xD09244", VA = "0xD09244")]
	public static MoverType SelfContinuously(this MonoBehaviour go, float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xD093A8", Offset = "0xD093A8", VA = "0xD093A8")]
	public static PausableMoverType PausableSelfContinuously(this MonoBehaviour go, float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xCFD9B4", Offset = "0xCFD9B4", VA = "0xCFD9B4")]
	public static MoverType Continuously(float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xD0950C", Offset = "0xD0950C", VA = "0xD0950C")]
	public static MoverType ContinuouslyFixedUpdate(float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xD09680", Offset = "0xD09680", VA = "0xD09680")]
	public static MoverType Continuously(this GameObject go, float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xD00F44", Offset = "0xD00F44", VA = "0xD00F44")]
	public static MoverType UnscaledContinuously(float time, Action<float> act)
	{
		return null;
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xD098A8", Offset = "0xD098A8", VA = "0xD098A8")]
	public static MoverType DelayedLoop(int maxtimes, float delay, Action<int> act)
	{
		return null;
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xD09A24", Offset = "0xD09A24", VA = "0xD09A24")]
	public static MoverType DoScale(Transform transform, Vector3 from, Vector3 to, float duration)
	{
		return null;
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xD09C0C", Offset = "0xD09C0C", VA = "0xD09C0C")]
	public static void InvokeOnEndFrame(Action act)
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xD09CE8", Offset = "0xD09CE8", VA = "0xD09CE8")]
	public static MoverType ScaleMe(this Transform transform, Vector3 from, Vector3 to, float duration)
	{
		return null;
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xD09DF4", Offset = "0xD09DF4", VA = "0xD09DF4")]
	public static void Shake(this Transform transform, float duration, float maxX, float maxY)
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xD0997C", Offset = "0xD0997C", VA = "0xD0997C")]
	[IteratorStateMachine(typeof(<LoopIenum>d__23))]
	private static IEnumerator LoopIenum(int maxtimes, float delay, Action<int> act, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xD0946C", Offset = "0xD0946C", VA = "0xD0946C")]
	[IteratorStateMachine(typeof(<PausableContinuouslyIenum>d__24))]
	private static IEnumerator PausableContinuouslyIenum(float duration, Action<float> act, PausableMoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xD091A4", Offset = "0xD091A4", VA = "0xD091A4")]
	[IteratorStateMachine(typeof(<ContinuouslyIenum>d__25))]
	private static IEnumerator ContinuouslyIenum(float duration, Action act, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xD09050", Offset = "0xD09050", VA = "0xD09050")]
	[IteratorStateMachine(typeof(<WaitUntilIenum>d__26))]
	private static IEnumerator WaitUntilIenum(Func<bool> predicate, Action act)
	{
		return null;
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xD09308", Offset = "0xD09308", VA = "0xD09308")]
	[IteratorStateMachine(typeof(<ContinuouslyIenum>d__27))]
	private static IEnumerator ContinuouslyIenum(float duration, Action<float> act, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xD095E0", Offset = "0xD095E0", VA = "0xD095E0")]
	[IteratorStateMachine(typeof(<ContinuouslyIenumFixed>d__28))]
	private static IEnumerator ContinuouslyIenumFixed(float duration, Action<float> act, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xD09C74", Offset = "0xD09C74", VA = "0xD09C74")]
	[IteratorStateMachine(typeof(<WaitEndOfFrame>d__29))]
	public static IEnumerator WaitEndOfFrame(Action act)
	{
		return null;
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xD09754", Offset = "0xD09754", VA = "0xD09754")]
	[IteratorStateMachine(typeof(<SafeContinuouslyIenum>d__30))]
	private static IEnumerator SafeContinuouslyIenum(float duration, Action<float> act, MoverType m, GameObject go)
	{
		return null;
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xD09808", Offset = "0xD09808", VA = "0xD09808")]
	[IteratorStateMachine(typeof(<ContinuousUnscaledlyIenum>d__31))]
	private static IEnumerator ContinuousUnscaledlyIenum(float duration, Action<float> act, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xD09B30", Offset = "0xD09B30", VA = "0xD09B30")]
	[IteratorStateMachine(typeof(<ScaleAnimation>d__32))]
	private static IEnumerator ScaleAnimation(Transform transform, Vector3 from, Vector3 to, float duration, MoverType m)
	{
		return null;
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xD08C7C", Offset = "0xD08C7C", VA = "0xD08C7C")]
	[IteratorStateMachine(typeof(<WaitForCall>d__33))]
	private static IEnumerator WaitForCall(float time, Action act)
	{
		return null;
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xD08E30", Offset = "0xD08E30", VA = "0xD08E30")]
	[IteratorStateMachine(typeof(<UnscaledWaitForCall>d__34))]
	private static IEnumerator UnscaledWaitForCall(float time, Action act)
	{
		return null;
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xD08F40", Offset = "0xD08F40", VA = "0xD08F40")]
	[IteratorStateMachine(typeof(<WaitForFrames>d__35))]
	private static IEnumerator WaitForFrames(int frames, Action act)
	{
		return null;
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xD0A160", Offset = "0xD0A160", VA = "0xD0A160")]
	public static float ClosestToInList(List<float> collection, float target, out int index)
	{
		return default(float);
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xD0A2E8", Offset = "0xD0A2E8", VA = "0xD0A2E8")]
	public static float SnapValue(float value, float factor)
	{
		return default(float);
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xD0A3B4", Offset = "0xD0A3B4", VA = "0xD0A3B4")]
	public static float NearestRound(float x, float delX)
	{
		return default(float);
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xD0A4B0", Offset = "0xD0A4B0", VA = "0xD0A4B0")]
	public static string TimeString(int s)
	{
		return null;
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xD0A5A4", Offset = "0xD0A5A4", VA = "0xD0A5A4")]
	public static Quaternion LookAtByZ(Transform from, Transform to)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xD0A61C", Offset = "0xD0A61C", VA = "0xD0A61C")]
	[IteratorStateMachine(typeof(<MoveObject>d__41))]
	public static IEnumerator MoveObject(Transform trans, Vector3 endPos, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xD0A6FC", Offset = "0xD0A6FC", VA = "0xD0A6FC")]
	[IteratorStateMachine(typeof(<MoveObjectToTransfrom>d__42))]
	public static IEnumerator MoveObjectToTransfrom(Transform trans, Transform endPos, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xD09EC0", Offset = "0xD09EC0", VA = "0xD09EC0")]
	[IteratorStateMachine(typeof(<ShakeObject>d__43))]
	public static IEnumerator ShakeObject(Transform t, float dur, float maxX, float maxY)
	{
		return null;
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xD0A800", Offset = "0xD0A800", VA = "0xD0A800")]
	[IteratorStateMachine(typeof(<MoveObjectByCurve>d__44))]
	public static IEnumerator MoveObjectByCurve(Transform trans, Vector3 endPos, float time, AnimationCurve curve, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xD0A8F4", Offset = "0xD0A8F4", VA = "0xD0A8F4")]
	[IteratorStateMachine(typeof(<MaterialColor>d__45))]
	public static IEnumerator MaterialColor(Material mat, Color endCol, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xD0A9E4", Offset = "0xD0A9E4", VA = "0xD0A9E4")]
	[IteratorStateMachine(typeof(<ImageColor>d__46))]
	public static IEnumerator ImageColor(Image img, Color endCol, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xD0AAD4", Offset = "0xD0AAD4", VA = "0xD0AAD4")]
	[IteratorStateMachine(typeof(<MoveObjectLocal>d__47))]
	public static IEnumerator MoveObjectLocal(Transform trans, Vector3 endPos, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xD0ABB4", Offset = "0xD0ABB4", VA = "0xD0ABB4")]
	public static Vector3 LockVector(Vector3 target, Vector3 lockVector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xD0ABC4", Offset = "0xD0ABC4", VA = "0xD0ABC4")]
	public static Vector3 GetPointBetween(Vector3 pos1, Vector3 pos2)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xD0ABF0", Offset = "0xD0ABF0", VA = "0xD0ABF0")]
	[IteratorStateMachine(typeof(<RotateObjectLocal>d__50))]
	public static IEnumerator RotateObjectLocal(Transform trans, Quaternion endPos, float time, [Optional] Action act)
	{
		return null;
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xD0ACE0", Offset = "0xD0ACE0", VA = "0xD0ACE0")]
	public static Vector3 QuadraticBezier(Vector3 point0, Vector3 point1, Vector3 point2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xD0AD44", Offset = "0xD0AD44", VA = "0xD0AD44")]
	public static Vector3 SignedEuler(Vector3 rot)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xD0AD7C", Offset = "0xD0AD7C", VA = "0xD0AD7C")]
	public static float FindDegree(float x, float y)
	{
		return default(float);
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xD0ADB8", Offset = "0xD0ADB8", VA = "0xD0ADB8")]
	public static bool RangeContains(float data, float min, float max)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xD0ADD0", Offset = "0xD0ADD0", VA = "0xD0ADD0")]
	public static Vector3[] MakeSmoothCurve(Vector3[] arrayToCurve, float smoothness)
	{
		return null;
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xD0B130", Offset = "0xD0B130", VA = "0xD0B130")]
	public static void UILookAt(this RectTransform rt, Vector3 target)
	{
	}
}
[Token(Token = "0x2000173")]
public static class ExtPhysics
{
	[Token(Token = "0x600076E")]
	[Address(RVA = "0xD0D76C", Offset = "0xD0D76C", VA = "0xD0D76C")]
	public static bool CurveCast(Vector3 origin, Vector3 direction, Vector3 gravityDirection, int smoothness, out RaycastHit hitInfo, float maxDistance, out List<Vector3> points, LayerMask mask)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000174")]
public static class extensions
{
	[Token(Token = "0x600076F")]
	[Address(RVA = "0xD0DB80", Offset = "0xD0DB80", VA = "0xD0DB80")]
	public static Vector2 Rotate(this Vector2 v, float degrees)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xD0DBD0", Offset = "0xD0DBD0", VA = "0xD0DBD0")]
	public static string TrimLongString(this string str, int maxChars, string endChars = "...")
	{
		return null;
	}

	[Token(Token = "0x6000771")]
	public static void RemoveAll<T>(this LinkedList<T> linkedList, Func<T, bool> predicate)
	{
	}

	[Token(Token = "0x6000772")]
	public static void Shuffle<T>(this IList<T> list)
	{
	}

	[Token(Token = "0x6000773")]
	public static void ChangeAlpha<T>(this T g, float newAlpha) where T : Graphic
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xD0DC10", Offset = "0xD0DC10", VA = "0xD0DC10")]
	public static void SetParentInZeroPos(this Transform child, Transform parent)
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xD0DCB0", Offset = "0xD0DCB0", VA = "0xD0DCB0")]
	public static void SetPositionRotation(this Transform to, Transform from, Vector3 positionOffset, Vector3 rotationOffset)
	{
	}
}
[Token(Token = "0x2000175")]
public static class ExtDebug
{
	[Token(Token = "0x2000176")]
	public struct Box
	{
		[Token(Token = "0x170000C4")]
		public Vector3 LocalFrontTopLeft
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xD0ED1C", Offset = "0xD0ED1C", VA = "0xD0ED1C")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xD0ED28", Offset = "0xD0ED28", VA = "0xD0ED28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public Vector3 LocalFrontTopRight
		{
			[Token(Token = "0x600077F")]
			[Address(RVA = "0xD0ED34", Offset = "0xD0ED34", VA = "0xD0ED34")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xD0ED40", Offset = "0xD0ED40", VA = "0xD0ED40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public Vector3 LocalFrontBottomLeft
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xD0ED4C", Offset = "0xD0ED4C", VA = "0xD0ED4C")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xD0ED58", Offset = "0xD0ED58", VA = "0xD0ED58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public Vector3 LocalFrontBottomRight
		{
			[Token(Token = "0x6000783")]
			[Address(RVA = "0xD0ED64", Offset = "0xD0ED64", VA = "0xD0ED64")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000784")]
			[Address(RVA = "0xD0ED70", Offset = "0xD0ED70", VA = "0xD0ED70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public Vector3 LocalBackTopLeft
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0xD0ED7C", Offset = "0xD0ED7C", VA = "0xD0ED7C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C9")]
		public Vector3 LocalBackTopRight
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0xD0ED94", Offset = "0xD0ED94", VA = "0xD0ED94")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CA")]
		public Vector3 LocalBackBottomLeft
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0xD0EDAC", Offset = "0xD0EDAC", VA = "0xD0EDAC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CB")]
		public Vector3 LocalBackBottomRight
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xD0EDC4", Offset = "0xD0EDC4", VA = "0xD0EDC4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CC")]
		public Vector3 FrontTopLeft
		{
			[Token(Token = "0x6000789")]
			[Address(RVA = "0xD0E5F8", Offset = "0xD0E5F8", VA = "0xD0E5F8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CD")]
		public Vector3 FrontTopRight
		{
			[Token(Token = "0x600078A")]
			[Address(RVA = "0xD0E618", Offset = "0xD0E618", VA = "0xD0E618")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CE")]
		public Vector3 FrontBottomLeft
		{
			[Token(Token = "0x600078B")]
			[Address(RVA = "0xD0E638", Offset = "0xD0E638", VA = "0xD0E638")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CF")]
		public Vector3 FrontBottomRight
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xD0E658", Offset = "0xD0E658", VA = "0xD0E658")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D0")]
		public Vector3 BackTopLeft
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xD0E5B8", Offset = "0xD0E5B8", VA = "0xD0E5B8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D1")]
		public Vector3 BackTopRight
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xD0E5D8", Offset = "0xD0E5D8", VA = "0xD0E5D8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D2")]
		public Vector3 BackBottomLeft
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0xD0E578", Offset = "0xD0E578", VA = "0xD0E578")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D3")]
		public Vector3 BackBottomRight
		{
			[Token(Token = "0x6000790")]
			[Address(RVA = "0xD0E598", Offset = "0xD0E598", VA = "0xD0E598")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D4")]
		public Vector3 Origin
		{
			[Token(Token = "0x6000791")]
			[Address(RVA = "0xD0EDDC", Offset = "0xD0EDDC", VA = "0xD0EDDC")]
			[CompilerGenerated]
			readonly get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000792")]
			[Address(RVA = "0xD0EDE8", Offset = "0xD0EDE8", VA = "0xD0EDE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xD0E530", Offset = "0xD0E530", VA = "0xD0E530")]
		public Box(Vector3 origin, Vector3 halfExtents, Quaternion orientation)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xD0EDF4", Offset = "0xD0EDF4", VA = "0xD0EDF4")]
		public Box(Vector3 origin, Vector3 halfExtents)
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xD0EE24", Offset = "0xD0EE24", VA = "0xD0EE24")]
		public void Rotate(Quaternion orientation)
		{
		}
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xD0DDE4", Offset = "0xD0DDE4", VA = "0xD0DDE4")]
	public static void DrawBoxCastOnHit(Vector3 origin, Vector3 halfExtents, Quaternion orientation, Vector3 direction, float hitInfoDistance, Color color)
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xD0E02C", Offset = "0xD0E02C", VA = "0xD0E02C")]
	public static void DrawBoxCastBox(Vector3 origin, Vector3 halfExtents, Quaternion orientation, Vector3 direction, float distance, Color color)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xD0DFB0", Offset = "0xD0DFB0", VA = "0xD0DFB0")]
	public static void DrawBox(Vector3 origin, Vector3 halfExtents, Quaternion orientation, Color color)
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xD0E678", Offset = "0xD0E678", VA = "0xD0E678")]
	public static void DrawBox(Box box, Color color)
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xD0EA04", Offset = "0xD0EA04", VA = "0xD0EA04")]
	public static void DrawBox(float minX, float maxX, float minY, float maxY, float minZ, float maxZ, Color color)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xD0DEA8", Offset = "0xD0DEA8", VA = "0xD0DEA8")]
	private static Vector3 CastCenterOnCollision(Vector3 origin, Vector3 direction, float hitInfoDistance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xD0ECC0", Offset = "0xD0ECC0", VA = "0xD0ECC0")]
	private static Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Quaternion rotation)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000177")]
public enum Hand
{
	[Token(Token = "0x400082F")]
	right,
	[Token(Token = "0x4000830")]
	left,
	[Token(Token = "0x4000831")]
	none
}
[Token(Token = "0x2000178")]
public class InviteFriendsStartPoint : MonoBehaviour
{
	[Token(Token = "0x6000796")]
	[Address(RVA = "0xD0EFD0", Offset = "0xD0EFD0", VA = "0xD0EFD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xD0EFD4", Offset = "0xD0EFD4", VA = "0xD0EFD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xD0EFD8", Offset = "0xD0EFD8", VA = "0xD0EFD8")]
	public void On_ClickInviteFriend()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xD0F038", Offset = "0xD0F038", VA = "0xD0F038")]
	public InviteFriendsStartPoint()
	{
	}
}
[Token(Token = "0x2000179")]
public class OVRCameraRigWrapper : OVRCameraRig
{
	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public bool XRActive;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public float defaultPlayerHeight;

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xD0F040", Offset = "0xD0F040", VA = "0xD0F040", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xD0F0C0", Offset = "0xD0F0C0", VA = "0xD0F0C0", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xD0F134", Offset = "0xD0F134", VA = "0xD0F134", Slot = "9")]
	protected override void UpdateAnchors(bool updateEyeAnchors, bool updateHandAnchors)
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xD0F2D8", Offset = "0xD0F2D8", VA = "0xD0F2D8")]
	public OVRCameraRigWrapper()
	{
	}
}
[Token(Token = "0x200017A")]
public class Singletone<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static T instance;

	[Token(Token = "0x600079E")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x600079F")]
	public Singletone()
	{
	}
}
[Token(Token = "0x200017B")]
public class SteamVRHapticsHandler : IHapticHandler
{
	[Token(Token = "0x200017C")]
	[CompilerGenerated]
	private sealed class <DoHaptic>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HapticPattern pattern;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVRHapticsHandler <>4__this;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Hand hand;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <t>5__2;

		[Token(Token = "0x170000D5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0xD0F640", Offset = "0xD0F640", VA = "0xD0F640", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0xD0F688", Offset = "0xD0F688", VA = "0xD0F688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xD0F51C", Offset = "0xD0F51C", VA = "0xD0F51C")]
		[DebuggerHidden]
		public <DoHaptic>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xD0F54C", Offset = "0xD0F54C", VA = "0xD0F54C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xD0F550", Offset = "0xD0F550", VA = "0xD0F550", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xD0F648", Offset = "0xD0F648", VA = "0xD0F648", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isPlayRight;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool isPlayLeft;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Coroutine rightHapticCororutine;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Coroutine leftHapticCororutine;

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xD0F2E0", Offset = "0xD0F2E0", VA = "0xD0F2E0")]
	private bool GetPlayState(Hand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xD0F2F4", Offset = "0xD0F2F4", VA = "0xD0F2F4")]
	private void SetPlayState(Hand hand, bool state)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xD0F30C", Offset = "0xD0F30C", VA = "0xD0F30C", Slot = "4")]
	public void PlayHaptic(Hand hand, HapticPattern pattern)
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xD0F518", Offset = "0xD0F518", VA = "0xD0F518", Slot = "5")]
	public void StartHaptic(Hand hand, float frequency, float amplitude)
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xD0F3E8", Offset = "0xD0F3E8", VA = "0xD0F3E8", Slot = "6")]
	public void StopHaptic(Hand hand)
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xD0F480", Offset = "0xD0F480", VA = "0xD0F480")]
	[IteratorStateMachine(typeof(<DoHaptic>d__9))]
	private IEnumerator DoHaptic(Hand hand, HapticPattern pattern)
	{
		return null;
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xD0F544", Offset = "0xD0F544", VA = "0xD0F544")]
	public SteamVRHapticsHandler()
	{
	}
}
[Token(Token = "0x200017D")]
public abstract class Friend
{
	[Token(Token = "0x200017E")]
	public enum OnlineState
	{
		[Token(Token = "0x4000844")]
		Online,
		[Token(Token = "0x4000845")]
		Offline
	}

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong uniqId;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OnlineState status;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D avatarTexture;

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xD0F690", Offset = "0xD0F690", VA = "0xD0F690")]
	protected Friend()
	{
	}
}
[Token(Token = "0x200017F")]
public class HoldUIButton : UIButton
{
	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool fingerIn;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UIFingerPointer pointer;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float holdDuration;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float holdProgress;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image fill;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool invokeByTrigger;

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xD0F698", Offset = "0xD0F698", VA = "0xD0F698")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xD0F734", Offset = "0xD0F734", VA = "0xD0F734", Slot = "8")]
	public override void Click(UIFingerPointer pointer)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xD0F744", Offset = "0xD0F744", VA = "0xD0F744")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xD0F6A0", Offset = "0xD0F6A0", VA = "0xD0F6A0")]
	private void SetFill(float val)
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xD0F8E0", Offset = "0xD0F8E0", VA = "0xD0F8E0")]
	private void Invoke()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xD0F92C", Offset = "0xD0F92C", VA = "0xD0F92C")]
	public HoldUIButton()
	{
	}
}
[Token(Token = "0x2000180")]
[RequireComponent(typeof(Slider))]
public class PlaybackSlider : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
{
	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Slider slider;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float currentValue;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isDragging;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FloatUnityEvent onCustomValueChanged;

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xD0FA14", Offset = "0xD0FA14", VA = "0xD0FA14")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xD0FA6C", Offset = "0xD0FA6C", VA = "0xD0FA6C")]
	public void SetValue(float val)
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xD0FA74", Offset = "0xD0FA74", VA = "0xD0FA74")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xD0FB18", Offset = "0xD0FB18", VA = "0xD0FB18", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xD0FB24", Offset = "0xD0FB24", VA = "0xD0FB24", Slot = "5")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xD0FB58", Offset = "0xD0FB58", VA = "0xD0FB58")]
	public PlaybackSlider()
	{
	}
}
[Token(Token = "0x2000181")]
[RequireComponent(typeof(BoxCollider), typeof(Selectable))]
public class UIButton : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected UnityEngine.UI.Button button;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticPattern hoverHaptic;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HapticPattern clickHaptic;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useCustomSfxFeedback;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip customFeebackClip;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool handleFingerClick;

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xD0FB60", Offset = "0xD0FB60", VA = "0xD0FB60", Slot = "5")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xD0FBC8", Offset = "0xD0FBC8", VA = "0xD0FBC8", Slot = "6")]
	protected virtual void InitSFX()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xD0FD10", Offset = "0xD0FD10", VA = "0xD0FD10")]
	public void AutoConfigure()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xD0FF00", Offset = "0xD0FF00", VA = "0xD0FF00", Slot = "7")]
	public virtual void DebugClick()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xD0FF2C", Offset = "0xD0FF2C", VA = "0xD0FF2C", Slot = "8")]
	public virtual void Click(UIFingerPointer pointer)
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xD0FF80", Offset = "0xD0FF80", VA = "0xD0FF80", Slot = "9")]
	public virtual void Click()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xD0FFDC", Offset = "0xD0FFDC", VA = "0xD0FFDC", Slot = "10")]
	public virtual void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xD0F940", Offset = "0xD0F940", VA = "0xD0F940")]
	public UIButton()
	{
	}
}
[Token(Token = "0x2000183")]
public class UICheckBox : UIButton, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool state;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image image;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Sprite trueState;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sprite falseState;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image toggle;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite toggleTrue;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Sprite toggleFalse;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color bgTrue;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color bgFalse;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Color tgTrue;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Color tgFalse;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public BoolUnityEvent onStateChange;

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xD100F0", Offset = "0xD100F0", VA = "0xD100F0", Slot = "5")]
	public override void Start()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xD10190", Offset = "0xD10190", VA = "0xD10190", Slot = "9")]
	public override void Click()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xD1038C", Offset = "0xD1038C", VA = "0xD1038C", Slot = "8")]
	public override void Click(UIFingerPointer pointer)
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xD101F8", Offset = "0xD101F8", VA = "0xD101F8")]
	public void UpdateView()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xD10398", Offset = "0xD10398", VA = "0xD10398")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xD1039C", Offset = "0xD1039C", VA = "0xD1039C")]
	public UICheckBox()
	{
	}
}
[Token(Token = "0x2000184")]
public class UIFingerPointer : MonoBehaviour
{
	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Hand hand;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float allowInteractionDistance;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform lastBtn;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastClickPosition;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool allowInteraction;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HapticPattern clickHaptic;

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xD103B8", Offset = "0xD103B8", VA = "0xD103B8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xD10724", Offset = "0xD10724", VA = "0xD10724")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xD10730", Offset = "0xD10730", VA = "0xD10730")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xD10868", Offset = "0xD10868", VA = "0xD10868")]
	public UIFingerPointer()
	{
	}
}
[Token(Token = "0x2000185")]
public class UIScrollDots : MonoBehaviour
{
	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIScrollView scrollView;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Image> dots;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool inited;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color defaultColor;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color selectedColor;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color blind_defaultColor;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Color blind_selectedColor;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool blindMode;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int pagesCount;

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xD10884", Offset = "0xD10884", VA = "0xD10884")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xD1096C", Offset = "0xD1096C", VA = "0xD1096C")]
	private void Init()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xD10AEC", Offset = "0xD10AEC", VA = "0xD10AEC")]
	private void UpdateView(int page)
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xD10C40", Offset = "0xD10C40", VA = "0xD10C40")]
	public UIScrollDots()
	{
	}
}
[Token(Token = "0x2000187")]
[RequireComponent(typeof(ScrollRect))]
public class UIScrollView : MonoBehaviour
{
	[Token(Token = "0x2000188")]
	[CompilerGenerated]
	private sealed class <Start>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIScrollView <>4__this;

		[Token(Token = "0x170000D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E6")]
			[Address(RVA = "0xD1195C", Offset = "0xD1195C", VA = "0xD1195C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E8")]
			[Address(RVA = "0xD119A4", Offset = "0xD119A4", VA = "0xD119A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xD10EA4", Offset = "0xD10EA4", VA = "0xD10EA4")]
		[DebuggerHidden]
		public <Start>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xD116CC", Offset = "0xD116CC", VA = "0xD116CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xD116D0", Offset = "0xD116D0", VA = "0xD116D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xD11964", Offset = "0xD11964", VA = "0xD11964", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ScrollRect scroll;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float normalizedScrollStep;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int pagesCount;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _currentPage;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<int> onScroll;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider[,] itemColliders;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inited;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Rect visibleRect;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useScrollButtons;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UIButton scrollLeft;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UIButton scrollRight;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider[] items;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 oldScrollPosition;

	[Token(Token = "0x170000D7")]
	public int currentPage
	{
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xD10DE4", Offset = "0xD10DE4", VA = "0xD10DE4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xD10DEC", Offset = "0xD10DEC", VA = "0xD10DEC")]
		set
		{
		}
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xD10E30", Offset = "0xD10E30", VA = "0xD10E30")]
	[IteratorStateMachine(typeof(<Start>d__14))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xD10ECC", Offset = "0xD10ECC", VA = "0xD10ECC")]
	public void Init()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xD11160", Offset = "0xD11160", VA = "0xD11160")]
	private void ResolveScrollButtons(int page)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xD11218", Offset = "0xD11218", VA = "0xD11218")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xD11340", Offset = "0xD11340", VA = "0xD11340")]
	private void CheckVisibility()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xD1147C", Offset = "0xD1147C", VA = "0xD1147C")]
	public void ScrollRight()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xD11598", Offset = "0xD11598", VA = "0xD11598")]
	public void ScrollLeft()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xD116AC", Offset = "0xD116AC", VA = "0xD116AC")]
	public UIScrollView()
	{
	}
}
[Token(Token = "0x200018B")]
public class UIToggle : UIButton
{
	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.UI.Toggle toggle;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onSelect;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onDeselect;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent visualSelect;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent visualDeselect;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool inited;

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xD11A44", Offset = "0xD11A44", VA = "0xD11A44", Slot = "5")]
	public override void Start()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xD11B4C", Offset = "0xD11B4C", VA = "0xD11B4C")]
	public void SetStateWithOutNotify(bool value)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xD11A54", Offset = "0xD11A54", VA = "0xD11A54")]
	private void Init()
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xD11BB4", Offset = "0xD11BB4", VA = "0xD11BB4", Slot = "6")]
	protected override void InitSFX()
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xD11D1C", Offset = "0xD11D1C", VA = "0xD11D1C", Slot = "8")]
	public override void Click(UIFingerPointer pointer)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xD11D7C", Offset = "0xD11D7C", VA = "0xD11D7C")]
	private void OnValueChanged(bool val)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xD11DCC", Offset = "0xD11DCC", VA = "0xD11DCC", Slot = "7")]
	public override void DebugClick()
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xD11DDC", Offset = "0xD11DDC", VA = "0xD11DDC")]
	public UIToggle()
	{
	}
}
[Token(Token = "0x200018D")]
public class VRCursorPointer : MonoBehaviour
{
	[Token(Token = "0x200018E")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x400089E")]
		On,
		[Token(Token = "0x400089F")]
		Off,
		[Token(Token = "0x40008A0")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 _hitNormal;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool _hitTarget;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x170000DA")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xD11F2C", Offset = "0xD11F2C", VA = "0xD11F2C")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xD11EEC", Offset = "0xD11EEC", VA = "0xD11EEC")]
		set
		{
		}
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xD11F34", Offset = "0xD11F34", VA = "0xD11F34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xD11F8C", Offset = "0xD11F8C", VA = "0xD11F8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xD120C4", Offset = "0xD120C4", VA = "0xD120C4")]
	public void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xD120F0", Offset = "0xD120F0", VA = "0xD120F0")]
	public void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xD12140", Offset = "0xD12140", VA = "0xD12140")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xD12304", Offset = "0xD12304", VA = "0xD12304")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xD124A0", Offset = "0xD124A0", VA = "0xD124A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xD12524", Offset = "0xD12524", VA = "0xD12524")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xD125E4", Offset = "0xD125E4", VA = "0xD125E4")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xD1268C", Offset = "0xD1268C", VA = "0xD1268C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xD12778", Offset = "0xD12778", VA = "0xD12778")]
	public VRCursorPointer()
	{
	}
}
[Token(Token = "0x200018F")]
public class RegionButtonChanger : MonoBehaviour
{
	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.UI.Button button;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BoxCollider _collider;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TMP_Text textLabel;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Image icon;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image back;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color disableColor;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color activeColor;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float timer;

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xD12788", Offset = "0xD12788", VA = "0xD12788")]
	public void DisableRegionButton()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xD12868", Offset = "0xD12868", VA = "0xD12868")]
	public void EnableRegionButton()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xD12948", Offset = "0xD12948", VA = "0xD12948")]
	public void TryChangeRegionButton()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xD12A78", Offset = "0xD12A78", VA = "0xD12A78")]
	private void Update()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xD12B78", Offset = "0xD12B78", VA = "0xD12B78")]
	public RegionButtonChanger()
	{
	}
}
[Token(Token = "0x2000190")]
public class TextHoverColor : MonoBehaviour
{
	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color defaultTextColor;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Graphic[] texts;

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xD12B80", Offset = "0xD12B80", VA = "0xD12B80")]
	private void Awake()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xD12BC8", Offset = "0xD12BC8", VA = "0xD12BC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xD12C40", Offset = "0xD12C40", VA = "0xD12C40")]
	public void SetHoverText()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xD12BCC", Offset = "0xD12BCC", VA = "0xD12BCC")]
	public void SetUnhoverText()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xD12CEC", Offset = "0xD12CEC", VA = "0xD12CEC")]
	public TextHoverColor()
	{
	}
}
[Serializable]
[Token(Token = "0x2000191")]
public class XRRigContainer
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<MonoBehaviour> behaviours;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform head;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftHandAnchor;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightHandAnchor;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 leftHandLocalRotation;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 rightHandLocalRotation;

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xD12CF4", Offset = "0xD12CF4", VA = "0xD12CF4")]
	public void SetActive(bool active)
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xD12E0C", Offset = "0xD12E0C", VA = "0xD12E0C")]
	public XRRigContainer()
	{
	}
}
[Token(Token = "0x2000193")]
public class XRRigResolver : MonoBehaviour
{
	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRRigContainer oculus;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public XRRigContainer steam;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public XRRigContainer pico;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PlatformType platform;

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xD12F64", Offset = "0xD12F64", VA = "0xD12F64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xD12FC0", Offset = "0xD12FC0", VA = "0xD12FC0")]
	private void ResolveRig()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xD130B0", Offset = "0xD130B0", VA = "0xD130B0")]
	private void SetupPico()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xD130B4", Offset = "0xD130B4", VA = "0xD130B4")]
	public XRRigResolver()
	{
	}
}
[Token(Token = "0x2000194")]
public class SetPosition : MonoBehaviour
{
	[Token(Token = "0x2000195")]
	[CompilerGenerated]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SetPosition <>4__this;

		[Token(Token = "0x170000DB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000821")]
			[Address(RVA = "0xD13C08", Offset = "0xD13C08", VA = "0xD13C08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000823")]
			[Address(RVA = "0xD13C50", Offset = "0xD13C50", VA = "0xD13C50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xD13130", Offset = "0xD13130", VA = "0xD13130")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xD134B8", Offset = "0xD134B8", VA = "0xD134B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xD134BC", Offset = "0xD134BC", VA = "0xD134BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xD13C10", Offset = "0xD13C10", VA = "0xD13C10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView view;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 winMRpos;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Vector3 winMRrot;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayerType type;

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xD130BC", Offset = "0xD130BC", VA = "0xD130BC")]
	[IteratorStateMachine(typeof(<Start>d__3))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xD13158", Offset = "0xD13158", VA = "0xD13158")]
	public float GetValue(int index)
	{
		return default(float);
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xD131B8", Offset = "0xD131B8", VA = "0xD131B8")]
	public void SetValue(int index, float newValue, string controller)
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xD13324", Offset = "0xD13324", VA = "0xD13324")]
	[PunRPC]
	private void SetPosAndRot(string controller)
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xD13460", Offset = "0xD13460", VA = "0xD13460")]
	private void Reset()
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xD134B0", Offset = "0xD134B0", VA = "0xD134B0")]
	public SetPosition()
	{
	}
}
[Token(Token = "0x2000196")]
public class SettingsUI : MonoBehaviour
{
	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioMixer mixer;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Slider masterSlider;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Slider sfxSlider;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Slider musicSlider;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Slider voiceSlider;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Dropdown micDropdown;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<MicRef> micOptions;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject RefreshButton;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Recorder recorder;

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xD13C58", Offset = "0xD13C58", VA = "0xD13C58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xD13E04", Offset = "0xD13E04", VA = "0xD13E04")]
	public void OnChangeMaster(float value)
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xD13E78", Offset = "0xD13E78", VA = "0xD13E78")]
	public void OnChangeSfx(float value)
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xD13EEC", Offset = "0xD13EEC", VA = "0xD13EEC")]
	public void OnChangeEnv(float value)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xD13F60", Offset = "0xD13F60", VA = "0xD13F60")]
	public void OnChangeVoice(float value)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xD13FD4", Offset = "0xD13FD4", VA = "0xD13FD4")]
	private void Start()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xD13FD8", Offset = "0xD13FD8", VA = "0xD13FD8")]
	private void SetupMicDropdown()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xD13FDC", Offset = "0xD13FDC", VA = "0xD13FDC")]
	private void MicDropdownValueChanged(MicRef mic)
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xD14168", Offset = "0xD14168", VA = "0xD14168")]
	private void SetCurrentValue()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xD1437C", Offset = "0xD1437C", VA = "0xD1437C")]
	public void PhotonMicToggled(bool on)
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xD14468", Offset = "0xD14468", VA = "0xD14468")]
	public void RefreshMicrophones()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xD1446C", Offset = "0xD1446C", VA = "0xD1446C")]
	public SettingsUI()
	{
	}
}
[Token(Token = "0x2000197")]
[CreateAssetMenu]
public class RampAsset : ScriptableObject
{
	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gradient gradient;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int size;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool up;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool overwriteExisting;

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xD14474", Offset = "0xD14474", VA = "0xD14474")]
	public RampAsset()
	{
	}
}
[Token(Token = "0x2000198")]
public class AdjustTimeScale : MonoBehaviour
{
	[Token(Token = "0x6000831")]
	[Address(RVA = "0xD144F8", Offset = "0xD144F8", VA = "0xD144F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xD144FC", Offset = "0xD144FC", VA = "0xD144FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xD145E0", Offset = "0xD145E0", VA = "0xD145E0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xD14604", Offset = "0xD14604", VA = "0xD14604")]
	public AdjustTimeScale()
	{
	}
}
[Token(Token = "0x2000199")]
public class ProximityActivate : MonoBehaviour
{
	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform distanceActivator;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform lookAtActivator;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distance;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform activator;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool activeState;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CanvasGroup target;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool lookAtCamera;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool enableInfoPanel;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject infoIcon;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float alpha;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CanvasGroup infoPanel;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion originRotation;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion targetRotation;

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xD1460C", Offset = "0xD1460C", VA = "0xD1460C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xD1471C", Offset = "0xD1471C", VA = "0xD1471C")]
	private bool IsTargetNear()
	{
		return default(bool);
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xD14AD4", Offset = "0xD14AD4", VA = "0xD14AD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xD14D8C", Offset = "0xD14D8C", VA = "0xD14D8C")]
	public ProximityActivate()
	{
	}
}
[Token(Token = "0x200019A")]
[RequireComponent(typeof(CharacterController))]
public class SimpleCharacterMotor : MonoBehaviour
{
	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CursorLockMode cursorLockMode;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool cursorVisible;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Movement")]
	public float walkSpeed;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float runSpeed;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float gravity;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	[Header("Look")]
	public Transform cameraPivot;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float lookSpeed;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool invertY;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Smoothing")]
	[Space]
	public float movementAcceleration;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CharacterController controller;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 movement;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 finalMovement;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float speed;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion targetRotation;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion targetPivotRotation;

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xD14D9C", Offset = "0xD14D9C", VA = "0xD14D9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xD14E5C", Offset = "0xD14E5C", VA = "0xD14E5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xD15024", Offset = "0xD15024", VA = "0xD15024")]
	private void UpdateLookRotation()
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xD14E74", Offset = "0xD14E74", VA = "0xD14E74")]
	private void UpdateTranslation()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xD153C4", Offset = "0xD153C4", VA = "0xD153C4")]
	public SimpleCharacterMotor()
	{
	}
}
[Token(Token = "0x200019B")]
public class ShootOnMesh : MonoBehaviour
{
	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask mask;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform shootingPoint;

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xD15400", Offset = "0xD15400", VA = "0xD15400")]
	private void Update()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xD1542C", Offset = "0xD1542C", VA = "0xD1542C")]
	public void Shoot()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xD157E8", Offset = "0xD157E8", VA = "0xD157E8")]
	public ShootOnMesh()
	{
	}
}
[Token(Token = "0x200019C")]
public class StartGameButtonLogic : MonoBehaviour
{
	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float enableTime;

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xD157F0", Offset = "0xD157F0", VA = "0xD157F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xD1580C", Offset = "0xD1580C", VA = "0xD1580C")]
	public void StartClick()
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xD15944", Offset = "0xD15944", VA = "0xD15944")]
	public StartGameButtonLogic()
	{
	}
}
[Token(Token = "0x200019D")]
public struct GazeEventArgs
{
	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float distance;
}
[Token(Token = "0x200019E")]
public delegate void GazeEventHandler(object sender, GazeEventArgs e);
[Token(Token = "0x200019F")]
public class SteamVR_GazeTracker : MonoBehaviour
{
	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInGaze;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gazeInCutoff;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float gazeOutCutoff;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform hmdTrackedObject;

	[Token(Token = "0x14000013")]
	public event GazeEventHandler GazeOn
	{
		[Token(Token = "0x6000848")]
		[Address(RVA = "0xD15B40", Offset = "0xD15B40", VA = "0xD15B40")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000849")]
		[Address(RVA = "0xD15BDC", Offset = "0xD15BDC", VA = "0xD15BDC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event GazeEventHandler GazeOff
	{
		[Token(Token = "0x600084A")]
		[Address(RVA = "0xD15C78", Offset = "0xD15C78", VA = "0xD15C78")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600084B")]
		[Address(RVA = "0xD15D14", Offset = "0xD15D14", VA = "0xD15D14")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xD15DB0", Offset = "0xD15DB0", VA = "0xD15DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xD15DB4", Offset = "0xD15DB4", VA = "0xD15DB4", Slot = "4")]
	public virtual void OnGazeOn(GazeEventArgs e)
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xD15DD4", Offset = "0xD15DD4", VA = "0xD15DD4", Slot = "5")]
	public virtual void OnGazeOff(GazeEventArgs e)
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xD15DF4", Offset = "0xD15DF4", VA = "0xD15DF4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xD1613C", Offset = "0xD1613C", VA = "0xD1613C")]
	public SteamVR_GazeTracker()
	{
	}
}
[Token(Token = "0x20001A0")]
public struct PointerEventArgs
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float distance;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;
}
[Token(Token = "0x20001A1")]
public delegate void PointerEventHandler(object sender, PointerEventArgs e);
[Token(Token = "0x20001A2")]
public class SteamVR_LaserPointer : MonoBehaviour
{
	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool active;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject holder;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject pointer;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool addRigidBody;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform reference;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform previousContact;

	[Token(Token = "0x14000015")]
	public event PointerEventHandler PointerIn
	{
		[Token(Token = "0x6000855")]
		[Address(RVA = "0xD1636C", Offset = "0xD1636C", VA = "0xD1636C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000856")]
		[Address(RVA = "0xD16408", Offset = "0xD16408", VA = "0xD16408")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event PointerEventHandler PointerOut
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0xD164A4", Offset = "0xD164A4", VA = "0xD164A4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000858")]
		[Address(RVA = "0xD16540", Offset = "0xD16540", VA = "0xD16540")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xD165DC", Offset = "0xD165DC", VA = "0xD165DC")]
	private void Start()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xD169CC", Offset = "0xD169CC", VA = "0xD169CC", Slot = "4")]
	public virtual void OnPointerIn(PointerEventArgs e)
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xD16A1C", Offset = "0xD16A1C", VA = "0xD16A1C", Slot = "5")]
	public virtual void OnPointerOut(PointerEventArgs e)
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xD16A6C", Offset = "0xD16A6C", VA = "0xD16A6C")]
	private void Update()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xD16ED4", Offset = "0xD16ED4", VA = "0xD16ED4")]
	public SteamVR_LaserPointer()
	{
	}
}
[Token(Token = "0x20001A3")]
public class SteamVR_Teleporter : MonoBehaviour
{
	[Token(Token = "0x20001A4")]
	public enum TeleportType
	{
		[Token(Token = "0x4000902")]
		TeleportTypeUseTerrain,
		[Token(Token = "0x4000903")]
		TeleportTypeUseCollider,
		[Token(Token = "0x4000904")]
		TeleportTypeUseZeroY
	}

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool teleportOnClick;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TeleportType teleportType;

	[Token(Token = "0x170000DD")]
	private Transform reference
	{
		[Token(Token = "0x600085E")]
		[Address(RVA = "0xD16EF0", Offset = "0xD16EF0", VA = "0xD16EF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xD16FA0", Offset = "0xD16FA0", VA = "0xD16FA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xD17348", Offset = "0xD17348", VA = "0xD17348")]
	private void DoClick(object sender, ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xD17684", Offset = "0xD17684", VA = "0xD17684")]
	public SteamVR_Teleporter()
	{
	}
}
[Token(Token = "0x20001A5")]
[RequireComponent(typeof(SteamVR_TrackedObject))]
public class SteamVR_TestThrow : MonoBehaviour
{
	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody attachPoint;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SteamVR_TrackedObject trackedObj;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FixedJoint joint;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xD17694", Offset = "0xD17694", VA = "0xD17694")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xD176EC", Offset = "0xD176EC", VA = "0xD176EC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xD17D08", Offset = "0xD17D08", VA = "0xD17D08")]
	public SteamVR_TestThrow()
	{
	}
}
[Token(Token = "0x20001A6")]
public class SteamVR_TestTrackedCamera : MonoBehaviour
{
	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool undistorted;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cropped;

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xD17D10", Offset = "0xD17D10", VA = "0xD17D10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xD17D74", Offset = "0xD17D74", VA = "0xD17D74")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xD17DB4", Offset = "0xD17DB4", VA = "0xD17DB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xD17FE8", Offset = "0xD17FE8", VA = "0xD17FE8")]
	public SteamVR_TestTrackedCamera()
	{
	}
}
[Token(Token = "0x20001A7")]
public struct ClickedEventArgs
{
	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float padX;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float padY;
}
[Token(Token = "0x20001A8")]
public delegate void ClickedEventHandler(object sender, ClickedEventArgs e);
[Token(Token = "0x20001A9")]
public class SteamVR_TrackedController : MonoBehaviour
{
	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uint controllerIndex;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRControllerState_t controllerState;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool triggerPressed;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool steamPressed;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool menuPressed;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool padPressed;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool padTouched;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool gripped;

	[Token(Token = "0x14000017")]
	public event ClickedEventHandler MenuButtonClicked
	{
		[Token(Token = "0x600086D")]
		[Address(RVA = "0xD180AC", Offset = "0xD180AC", VA = "0xD180AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600086E")]
		[Address(RVA = "0xD18148", Offset = "0xD18148", VA = "0xD18148")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public event ClickedEventHandler MenuButtonUnclicked
	{
		[Token(Token = "0x600086F")]
		[Address(RVA = "0xD181E4", Offset = "0xD181E4", VA = "0xD181E4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000870")]
		[Address(RVA = "0xD18280", Offset = "0xD18280", VA = "0xD18280")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event ClickedEventHandler TriggerClicked
	{
		[Token(Token = "0x6000871")]
		[Address(RVA = "0xD172AC", Offset = "0xD172AC", VA = "0xD172AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000872")]
		[Address(RVA = "0xD1831C", Offset = "0xD1831C", VA = "0xD1831C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public event ClickedEventHandler TriggerUnclicked
	{
		[Token(Token = "0x6000873")]
		[Address(RVA = "0xD183B8", Offset = "0xD183B8", VA = "0xD183B8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000874")]
		[Address(RVA = "0xD18454", Offset = "0xD18454", VA = "0xD18454")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event ClickedEventHandler SteamClicked
	{
		[Token(Token = "0x6000875")]
		[Address(RVA = "0xD184F0", Offset = "0xD184F0", VA = "0xD184F0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000876")]
		[Address(RVA = "0xD1858C", Offset = "0xD1858C", VA = "0xD1858C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public event ClickedEventHandler PadClicked
	{
		[Token(Token = "0x6000877")]
		[Address(RVA = "0xD18628", Offset = "0xD18628", VA = "0xD18628")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000878")]
		[Address(RVA = "0xD186C4", Offset = "0xD186C4", VA = "0xD186C4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event ClickedEventHandler PadUnclicked
	{
		[Token(Token = "0x6000879")]
		[Address(RVA = "0xD18760", Offset = "0xD18760", VA = "0xD18760")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600087A")]
		[Address(RVA = "0xD187FC", Offset = "0xD187FC", VA = "0xD187FC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public event ClickedEventHandler PadTouched
	{
		[Token(Token = "0x600087B")]
		[Address(RVA = "0xD18898", Offset = "0xD18898", VA = "0xD18898")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600087C")]
		[Address(RVA = "0xD18934", Offset = "0xD18934", VA = "0xD18934")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public event ClickedEventHandler PadUntouched
	{
		[Token(Token = "0x600087D")]
		[Address(RVA = "0xD189D0", Offset = "0xD189D0", VA = "0xD189D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600087E")]
		[Address(RVA = "0xD18A6C", Offset = "0xD18A6C", VA = "0xD18A6C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000020")]
	public event ClickedEventHandler Gripped
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0xD18B08", Offset = "0xD18B08", VA = "0xD18B08")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000880")]
		[Address(RVA = "0xD18BA4", Offset = "0xD18BA4", VA = "0xD18BA4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	public event ClickedEventHandler Ungripped
	{
		[Token(Token = "0x6000881")]
		[Address(RVA = "0xD18C40", Offset = "0xD18C40", VA = "0xD18C40")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000882")]
		[Address(RVA = "0xD18CDC", Offset = "0xD18CDC", VA = "0xD18CDC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xD18D78", Offset = "0xD18D78", VA = "0xD18D78", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xD18ED0", Offset = "0xD18ED0", VA = "0xD18ED0")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xD18ED8", Offset = "0xD18ED8", VA = "0xD18ED8", Slot = "5")]
	public virtual void OnTriggerClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xD18F04", Offset = "0xD18F04", VA = "0xD18F04", Slot = "6")]
	public virtual void OnTriggerUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xD18F30", Offset = "0xD18F30", VA = "0xD18F30", Slot = "7")]
	public virtual void OnMenuClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xD18F5C", Offset = "0xD18F5C", VA = "0xD18F5C", Slot = "8")]
	public virtual void OnMenuUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xD18F88", Offset = "0xD18F88", VA = "0xD18F88", Slot = "9")]
	public virtual void OnSteamClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xD18FB4", Offset = "0xD18FB4", VA = "0xD18FB4", Slot = "10")]
	public virtual void OnPadClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xD18FE0", Offset = "0xD18FE0", VA = "0xD18FE0", Slot = "11")]
	public virtual void OnPadUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xD1900C", Offset = "0xD1900C", VA = "0xD1900C", Slot = "12")]
	public virtual void OnPadTouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xD19038", Offset = "0xD19038", VA = "0xD19038", Slot = "13")]
	public virtual void OnPadUntouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xD19064", Offset = "0xD19064", VA = "0xD19064", Slot = "14")]
	public virtual void OnGripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xD19090", Offset = "0xD19090", VA = "0xD19090", Slot = "15")]
	public virtual void OnUngripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xD190BC", Offset = "0xD190BC", VA = "0xD190BC", Slot = "16")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xD19394", Offset = "0xD19394", VA = "0xD19394")]
	public SteamVR_TrackedController()
	{
	}
}
[Token(Token = "0x20001AA")]
public class SteamVR : IDisposable
{
	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _enabled;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR _instance;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool[] connected;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ETextureType textureType;

	[Token(Token = "0x170000DE")]
	public static bool active
	{
		[Token(Token = "0x6000892")]
		[Address(RVA = "0xD1939C", Offset = "0xD1939C", VA = "0xD1939C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DF")]
	public static bool enabled
	{
		[Token(Token = "0x6000893")]
		[Address(RVA = "0xD193FC", Offset = "0xD193FC", VA = "0xD193FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000894")]
		[Address(RVA = "0xD19470", Offset = "0xD19470", VA = "0xD19470")]
		set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	public static SteamVR instance
	{
		[Token(Token = "0x6000895")]
		[Address(RVA = "0xD19584", Offset = "0xD19584", VA = "0xD19584")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E1")]
	public static bool usingNativeSupport
	{
		[Token(Token = "0x6000896")]
		[Address(RVA = "0xD19864", Offset = "0xD19864", VA = "0xD19864")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E2")]
	public CVRSystem hmd
	{
		[Token(Token = "0x6000899")]
		[Address(RVA = "0xD1A1EC", Offset = "0xD1A1EC", VA = "0xD1A1EC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600089A")]
		[Address(RVA = "0xD1A1F4", Offset = "0xD1A1F4", VA = "0xD1A1F4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E3")]
	public CVRCompositor compositor
	{
		[Token(Token = "0x600089B")]
		[Address(RVA = "0xD1A1FC", Offset = "0xD1A1FC", VA = "0xD1A1FC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600089C")]
		[Address(RVA = "0xD1A204", Offset = "0xD1A204", VA = "0xD1A204")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E4")]
	public CVROverlay overlay
	{
		[Token(Token = "0x600089D")]
		[Address(RVA = "0xD1A20C", Offset = "0xD1A20C", VA = "0xD1A20C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600089E")]
		[Address(RVA = "0xD1A214", Offset = "0xD1A214", VA = "0xD1A214")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E5")]
	public static bool initializing
	{
		[Token(Token = "0x600089F")]
		[Address(RVA = "0xD1A21C", Offset = "0xD1A21C", VA = "0xD1A21C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xD1A274", Offset = "0xD1A274", VA = "0xD1A274")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public static bool calibrating
	{
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xD1A2D0", Offset = "0xD1A2D0", VA = "0xD1A2D0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xD1A328", Offset = "0xD1A328", VA = "0xD1A328")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	public static bool outOfRange
	{
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xD1A384", Offset = "0xD1A384", VA = "0xD1A384")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xD1A3DC", Offset = "0xD1A3DC", VA = "0xD1A3DC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public float sceneWidth
	{
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xD1A438", Offset = "0xD1A438", VA = "0xD1A438")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xD1A440", Offset = "0xD1A440", VA = "0xD1A440")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public float sceneHeight
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xD1A448", Offset = "0xD1A448", VA = "0xD1A448")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xD1A450", Offset = "0xD1A450", VA = "0xD1A450")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EA")]
	public float aspect
	{
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xD1A458", Offset = "0xD1A458", VA = "0xD1A458")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xD1A460", Offset = "0xD1A460", VA = "0xD1A460")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EB")]
	public float fieldOfView
	{
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xD1A468", Offset = "0xD1A468", VA = "0xD1A468")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xD1A470", Offset = "0xD1A470", VA = "0xD1A470")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EC")]
	public Vector2 tanHalfFov
	{
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xD1A478", Offset = "0xD1A478", VA = "0xD1A478")]
		[CompilerGenerated]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xD1A480", Offset = "0xD1A480", VA = "0xD1A480")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000ED")]
	public VRTextureBounds_t[] textureBounds
	{
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xD1A488", Offset = "0xD1A488", VA = "0xD1A488")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xD1A490", Offset = "0xD1A490", VA = "0xD1A490")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EE")]
	public SteamVR_Utils.RigidTransform[] eyes
	{
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xD1A498", Offset = "0xD1A498", VA = "0xD1A498")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xD1A4A0", Offset = "0xD1A4A0", VA = "0xD1A4A0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EF")]
	public string hmd_TrackingSystemName
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xD1A4A8", Offset = "0xD1A4A8", VA = "0xD1A4A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F0")]
	public string hmd_ModelNumber
	{
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xD1A5EC", Offset = "0xD1A5EC", VA = "0xD1A5EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F1")]
	public string hmd_SerialNumber
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xD1A5F8", Offset = "0xD1A5F8", VA = "0xD1A5F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F2")]
	public float hmd_SecondsFromVsyncToPhotons
	{
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xD1A604", Offset = "0xD1A604", VA = "0xD1A604")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000F3")]
	public float hmd_DisplayFrequency
	{
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xD1A644", Offset = "0xD1A644", VA = "0xD1A644")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xD19668", Offset = "0xD19668", VA = "0xD19668")]
	private static SteamVR CreateInstance()
	{
		return null;
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xD198B8", Offset = "0xD198B8", VA = "0xD198B8")]
	private static void ReportError(EVRInitError error)
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xD1A650", Offset = "0xD1A650", VA = "0xD1A650")]
	public string GetTrackedDeviceString(uint deviceId)
	{
		return null;
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xD1A4B4", Offset = "0xD1A4B4", VA = "0xD1A4B4")]
	public string GetStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return null;
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xD1A610", Offset = "0xD1A610", VA = "0xD1A610")]
	public float GetFloatProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return default(float);
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xD1A728", Offset = "0xD1A728", VA = "0xD1A728")]
	private void OnInitializing(bool initializing)
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0xD1A7B8", Offset = "0xD1A7B8", VA = "0xD1A7B8")]
	private void OnCalibrating(bool calibrating)
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0xD1A848", Offset = "0xD1A848", VA = "0xD1A848")]
	private void OnOutOfRange(bool outOfRange)
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0xD1A8D8", Offset = "0xD1A8D8", VA = "0xD1A8D8")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xD1A964", Offset = "0xD1A964", VA = "0xD1A964")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xD199C8", Offset = "0xD199C8", VA = "0xD199C8")]
	private SteamVR()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xD1AD80", Offset = "0xD1AD80", VA = "0xD1AD80", Slot = "1")]
	~SteamVR()
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0xD1B0CC", Offset = "0xD1B0CC", VA = "0xD1B0CC", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0xD1AE18", Offset = "0xD1AE18", VA = "0xD1AE18")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xD194F8", Offset = "0xD194F8", VA = "0xD194F8")]
	public static void SafeDispose()
	{
	}
}
[Token(Token = "0x20001AB")]
[RequireComponent(typeof(Camera))]
public class SteamVR_Camera : MonoBehaviour
{
	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _head;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform _ears;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wireframe;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static System.Collections.Hashtable values;

	[Token(Token = "0x400093A")]
	private const string eyeSuffix = " (eye)";

	[Token(Token = "0x400093B")]
	private const string earsSuffix = " (ears)";

	[Token(Token = "0x400093C")]
	private const string headSuffix = " (head)";

	[Token(Token = "0x400093D")]
	private const string originSuffix = " (origin)";

	[Token(Token = "0x170000F4")]
	public Transform head
	{
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xD1B1B0", Offset = "0xD1B1B0", VA = "0xD1B1B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F5")]
	public Transform offset
	{
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xD1B1B8", Offset = "0xD1B1B8", VA = "0xD1B1B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F6")]
	public Transform origin
	{
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xD16F84", Offset = "0xD16F84", VA = "0xD16F84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F7")]
	public Camera camera
	{
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xD1B1C0", Offset = "0xD1B1C0", VA = "0xD1B1C0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xD1B1C8", Offset = "0xD1B1C8", VA = "0xD1B1C8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000F8")]
	public Transform ears
	{
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xD1B1D0", Offset = "0xD1B1D0", VA = "0xD1B1D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F9")]
	public static float sceneResolutionScale
	{
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xD1B25C", Offset = "0xD1B25C", VA = "0xD1B25C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xD1B264", Offset = "0xD1B264", VA = "0xD1B264")]
		set
		{
		}
	}

	[Token(Token = "0x170000FA")]
	public string baseName
	{
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xD1C5AC", Offset = "0xD1C5AC", VA = "0xD1C5AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xD1B1D8", Offset = "0xD1B1D8", VA = "0xD1B1D8")]
	public Ray GetRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xD1B26C", Offset = "0xD1B26C", VA = "0xD1B26C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xD1B274", Offset = "0xD1B274", VA = "0xD1B274")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xD1BE6C", Offset = "0xD1BE6C", VA = "0xD1BE6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xD1BECC", Offset = "0xD1BECC", VA = "0xD1BECC")]
	public void ForceLast()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xD1B63C", Offset = "0xD1B63C", VA = "0xD1B63C")]
	public void Expand()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xD1C674", Offset = "0xD1C674", VA = "0xD1C674")]
	public void Collapse()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xD1CAB4", Offset = "0xD1CAB4", VA = "0xD1CAB4")]
	public SteamVR_Camera()
	{
	}
}
[Token(Token = "0x20001AC")]
[ExecuteInEditMode]
public class SteamVR_CameraFlip : MonoBehaviour
{
	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xD1CABC", Offset = "0xD1CABC", VA = "0xD1CABC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xD1CB58", Offset = "0xD1CB58", VA = "0xD1CB58")]
	public SteamVR_CameraFlip()
	{
	}
}
[Token(Token = "0x20001AD")]
[ExecuteInEditMode]
public class SteamVR_CameraMask : MonoBehaviour
{
	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xD1CB60", Offset = "0xD1CB60", VA = "0xD1CB60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xD1CBFC", Offset = "0xD1CBFC", VA = "0xD1CBFC")]
	public SteamVR_CameraMask()
	{
	}
}
[Token(Token = "0x20001AE")]
public class SteamVR_Controller
{
	[Token(Token = "0x20001AF")]
	public class ButtonMask
	{
		[Token(Token = "0x400093F")]
		public const ulong System = 1uL;

		[Token(Token = "0x4000940")]
		public const ulong ApplicationMenu = 2uL;

		[Token(Token = "0x4000941")]
		public const ulong Grip = 4uL;

		[Token(Token = "0x4000942")]
		public const ulong Axis0 = 4294967296uL;

		[Token(Token = "0x4000943")]
		public const ulong Axis1 = 8589934592uL;

		[Token(Token = "0x4000944")]
		public const ulong Axis2 = 17179869184uL;

		[Token(Token = "0x4000945")]
		public const ulong Axis3 = 34359738368uL;

		[Token(Token = "0x4000946")]
		public const ulong Axis4 = 68719476736uL;

		[Token(Token = "0x4000947")]
		public const ulong Touchpad = 4294967296uL;

		[Token(Token = "0x4000948")]
		public const ulong Trigger = 8589934592uL;

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xD1D1AC", Offset = "0xD1D1AC", VA = "0xD1D1AC")]
		public ButtonMask()
		{
		}
	}

	[Token(Token = "0x20001B0")]
	public class Device
	{
		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRControllerState_t state;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRControllerState_t prevState;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TrackedDevicePose_t pose;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int prevFrameCount;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float hairTriggerDelta;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float hairTriggerLimit;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool hairTriggerState;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool hairTriggerPrevState;

		[Token(Token = "0x170000FB")]
		public uint index
		{
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xD1D1B4", Offset = "0xD1D1B4", VA = "0xD1D1B4")]
			[CompilerGenerated]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xD1D1BC", Offset = "0xD1D1BC", VA = "0xD1D1BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public bool valid
		{
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xD1D1C4", Offset = "0xD1D1C4", VA = "0xD1D1C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xD1D1CC", Offset = "0xD1D1CC", VA = "0xD1D1CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public bool connected
		{
			[Token(Token = "0x60008E5")]
			[Address(RVA = "0xD1D18C", Offset = "0xD1D18C", VA = "0xD1D18C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FE")]
		public bool hasTracking
		{
			[Token(Token = "0x60008E6")]
			[Address(RVA = "0xD1D1D8", Offset = "0xD1D1D8", VA = "0xD1D1D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FF")]
		public bool outOfRange
		{
			[Token(Token = "0x60008E7")]
			[Address(RVA = "0xD1D1F0", Offset = "0xD1D1F0", VA = "0xD1D1F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000100")]
		public bool calibrating
		{
			[Token(Token = "0x60008E8")]
			[Address(RVA = "0xD1D21C", Offset = "0xD1D21C", VA = "0xD1D21C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000101")]
		public bool uninitialized
		{
			[Token(Token = "0x60008E9")]
			[Address(RVA = "0xD1D240", Offset = "0xD1D240", VA = "0xD1D240")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000102")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x60008EA")]
			[Address(RVA = "0xD1D134", Offset = "0xD1D134", VA = "0xD1D134")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x17000103")]
		public Vector3 velocity
		{
			[Token(Token = "0x60008EB")]
			[Address(RVA = "0xD17CC4", Offset = "0xD17CC4", VA = "0xD17CC4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000104")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x60008EC")]
			[Address(RVA = "0xD17CE4", Offset = "0xD17CE4", VA = "0xD17CE4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xD1CC04", Offset = "0xD1CC04", VA = "0xD1CC04")]
		public Device(uint i)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xD1D260", Offset = "0xD1D260", VA = "0xD1D260")]
		public VRControllerState_t GetState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xD1D298", Offset = "0xD1D298", VA = "0xD1D298")]
		public VRControllerState_t GetPrevState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xD1D2D0", Offset = "0xD1D2D0", VA = "0xD1D2D0")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xD1CC68", Offset = "0xD1CC68", VA = "0xD1CC68")]
		public void Update()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xD1D370", Offset = "0xD1D370", VA = "0xD1D370")]
		public bool GetPress(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xD1D39C", Offset = "0xD1D39C", VA = "0xD1D39C")]
		public bool GetPressDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xD1D3DC", Offset = "0xD1D3DC", VA = "0xD1D3DC")]
		public bool GetPressUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xD1D41C", Offset = "0xD1D41C", VA = "0xD1D41C")]
		public bool GetPress(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xD1D44C", Offset = "0xD1D44C", VA = "0xD1D44C")]
		public bool GetPressDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xD1D490", Offset = "0xD1D490", VA = "0xD1D490")]
		public bool GetPressUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xD1D4D4", Offset = "0xD1D4D4", VA = "0xD1D4D4")]
		public bool GetTouch(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xD17C44", Offset = "0xD17C44", VA = "0xD17C44")]
		public bool GetTouchDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xD17C84", Offset = "0xD17C84", VA = "0xD17C84")]
		public bool GetTouchUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xD1D500", Offset = "0xD1D500", VA = "0xD1D500")]
		public bool GetTouch(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xD1D530", Offset = "0xD1D530", VA = "0xD1D530")]
		public bool GetTouchDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xD1D574", Offset = "0xD1D574", VA = "0xD1D574")]
		public bool GetTouchUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xD1D5B8", Offset = "0xD1D5B8", VA = "0xD1D5B8")]
		public Vector2 GetAxis(EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xD1D674", Offset = "0xD1D674", VA = "0xD1D674")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xD1D2FC", Offset = "0xD1D2FC", VA = "0xD1D2FC")]
		private void UpdateHairTrigger()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xD1D6BC", Offset = "0xD1D6BC", VA = "0xD1D6BC")]
		public bool GetHairTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xD1D6D4", Offset = "0xD1D6D4", VA = "0xD1D6D4")]
		public bool GetHairTriggerDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xD1D704", Offset = "0xD1D704", VA = "0xD1D704")]
		public bool GetHairTriggerUp()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20001B1")]
	public enum DeviceRelation
	{
		[Token(Token = "0x4000954")]
		First,
		[Token(Token = "0x4000955")]
		Leftmost,
		[Token(Token = "0x4000956")]
		Rightmost,
		[Token(Token = "0x4000957")]
		FarthestLeft,
		[Token(Token = "0x4000958")]
		FarthestRight
	}

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Device[] devices;

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xD17ACC", Offset = "0xD17ACC", VA = "0xD17ACC")]
	public static Device Input(int deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xD1CC38", Offset = "0xD1CC38", VA = "0xD1CC38")]
	public static void Update()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0xD1CDD4", Offset = "0xD1CDD4", VA = "0xD1CDD4")]
	public static int GetDeviceIndex(DeviceRelation relation, ETrackedDeviceClass deviceClass = ETrackedDeviceClass.Controller, int relativeTo = 0)
	{
		return default(int);
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xD1D1A4", Offset = "0xD1D1A4", VA = "0xD1D1A4")]
	public SteamVR_Controller()
	{
	}
}
[Token(Token = "0x20001B2")]
public class SteamVR_ControllerManager : MonoBehaviour
{
	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject left;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject right;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Populate with objects you want to assign to additional controllers")]
	public GameObject[] objects;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Set to true if you want objects arbitrarily assigned to controllers before their role (left vs right) is identified")]
	public bool assignAllBeforeIdentified;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint[] indices;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool[] connected;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private uint leftIndex;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private uint rightIndex;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action inputFocusAction;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SteamVR_Events.Action trackedDeviceRoleChangedAction;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string hiddenPrefix;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string hiddenPostfix;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[] labels;

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xD1D734", Offset = "0xD1D734", VA = "0xD1D734")]
	private void SetUniqueObject(GameObject o, int index)
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xD1D840", Offset = "0xD1D840", VA = "0xD1D840")]
	public void UpdateTargets()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xD1D9A0", Offset = "0xD1D9A0", VA = "0xD1D9A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xD1D9A4", Offset = "0xD1D9A4", VA = "0xD1D9A4")]
	private SteamVR_ControllerManager()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xD1DD78", Offset = "0xD1DD78", VA = "0xD1DD78")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xD1E22C", Offset = "0xD1E22C", VA = "0xD1E22C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xD1E284", Offset = "0xD1E284", VA = "0xD1E284")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xD1E5CC", Offset = "0xD1E5CC", VA = "0xD1E5CC")]
	private void HideObject(Transform t, string name)
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xD1E4F4", Offset = "0xD1E4F4", VA = "0xD1E4F4")]
	private void ShowObject(Transform t, string name)
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xD1E748", Offset = "0xD1E748", VA = "0xD1E748")]
	private void SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex)
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xD1E970", Offset = "0xD1E970", VA = "0xD1E970")]
	private void OnTrackedDeviceRoleChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xD1E168", Offset = "0xD1E168", VA = "0xD1E168")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xD1DF3C", Offset = "0xD1DF3C", VA = "0xD1DF3C")]
	public void Refresh()
	{
	}
}
[Token(Token = "0x20001B3")]
[RequireComponent(typeof(AudioListener))]
public class SteamVR_Ears : MonoBehaviour
{
	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_Camera vrcam;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool usingSpeakers;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion offset;

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xD1EB14", Offset = "0xD1EB14", VA = "0xD1EB14")]
	private void OnNewPosesApplied()
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xD1EC94", Offset = "0xD1EC94", VA = "0xD1EC94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xD1EE1C", Offset = "0xD1EE1C", VA = "0xD1EE1C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xD1EEF0", Offset = "0xD1EEF0", VA = "0xD1EEF0")]
	public SteamVR_Ears()
	{
	}
}
[Token(Token = "0x20001B4")]
public static class SteamVR_Events
{
	[Token(Token = "0x20001B5")]
	public abstract class Action
	{
		[Token(Token = "0x17000105")]
		public bool enabled
		{
			[Token(Token = "0x6000927")]
			[Address(RVA = "0xD1E21C", Offset = "0xD1E21C", VA = "0xD1E21C")]
			set
			{
			}
		}

		[Token(Token = "0x6000926")]
		public abstract void Enable(bool enabled);

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xD1FC5C", Offset = "0xD1FC5C", VA = "0xD1FC5C")]
		protected Action()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001B6")]
	public class ActionNoArgs : Action
	{
		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Event _event;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityAction action;

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xD1F0E4", Offset = "0xD1F0E4", VA = "0xD1F0E4")]
		public ActionNoArgs(Event _event, UnityAction action)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xD1FC64", Offset = "0xD1FC64", VA = "0xD1FC64", Slot = "4")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001B7")]
	public class Action<T> : Action
	{
		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T> _event;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T> action;

		[Token(Token = "0x600092B")]
		public Action(Event<T> _event, UnityAction<T> action)
		{
		}

		[Token(Token = "0x600092C")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001B8")]
	public class Action<T0, T1> : Action
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1> _event;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1> action;

		[Token(Token = "0x600092D")]
		public Action(Event<T0, T1> _event, UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x600092E")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001B9")]
	public class Action<T0, T1, T2> : Action
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1, T2> _event;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1, T2> action;

		[Token(Token = "0x600092F")]
		public Action(Event<T0, T1, T2> _event, UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6000930")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Token(Token = "0x20001BA")]
	public class Event : UnityEvent
	{
		[Token(Token = "0x6000931")]
		[Address(RVA = "0xD1EE14", Offset = "0xD1EE14", VA = "0xD1EE14")]
		public void Listen(UnityAction action)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xD1EEE8", Offset = "0xD1EEE8", VA = "0xD1EEE8")]
		public void Remove(UnityAction action)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xD1FC98", Offset = "0xD1FC98", VA = "0xD1FC98")]
		public void Send()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xD1FC54", Offset = "0xD1FC54", VA = "0xD1FC54")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20001BB")]
	public class Event<T> : UnityEvent<T>
	{
		[Token(Token = "0x6000935")]
		public void Listen(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6000936")]
		public void Remove(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6000937")]
		public void Send(T arg0)
		{
		}

		[Token(Token = "0x6000938")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20001BC")]
	public class Event<T0, T1> : UnityEvent<T0, T1>
	{
		[Token(Token = "0x6000939")]
		public void Listen(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x600093A")]
		public void Remove(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x600093B")]
		public void Send(T0 arg0, T1 arg1)
		{
		}

		[Token(Token = "0x600093C")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20001BD")]
	public class Event<T0, T1, T2> : UnityEvent<T0, T1, T2>
	{
		[Token(Token = "0x600093D")]
		public void Listen(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x600093E")]
		public void Remove(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x600093F")]
		public void Send(T0 arg0, T1 arg1, T2 arg2)
		{
		}

		[Token(Token = "0x6000940")]
		public Event()
		{
		}
	}

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Event<bool> Calibrating;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Event<int, bool> DeviceConnected;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Event<Color, float, bool> Fade;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Event FadeReady;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Event<bool> HideRenderModels;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Event<bool> Initializing;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Event<bool> InputFocus;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Event<bool> Loading;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Event<float> LoadingFadeIn;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Event<float> LoadingFadeOut;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Event<TrackedDevicePose_t[]> NewPoses;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Event NewPosesApplied;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Event<bool> OutOfRange;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Event<SteamVR_RenderModel, bool> RenderModelLoaded;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Dictionary<EVREventType, Event<VREvent_t>> systemEvents;

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xD1EEF8", Offset = "0xD1EEF8", VA = "0xD1EEF8")]
	public static Action CalibratingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xD1DC10", Offset = "0xD1DC10", VA = "0xD1DC10")]
	public static Action DeviceConnectedAction(UnityAction<int, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xD1EFA4", Offset = "0xD1EFA4", VA = "0xD1EFA4")]
	public static Action FadeAction(UnityAction<Color, float, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xD1F050", Offset = "0xD1F050", VA = "0xD1F050")]
	public static Action FadeReadyAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xD1F128", Offset = "0xD1F128", VA = "0xD1F128")]
	public static Action HideRenderModelsAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xD1F1D4", Offset = "0xD1F1D4", VA = "0xD1F1D4")]
	public static Action InitializingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xD1DB64", Offset = "0xD1DB64", VA = "0xD1DB64")]
	public static Action InputFocusAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xD1F280", Offset = "0xD1F280", VA = "0xD1F280")]
	public static Action LoadingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xD1F32C", Offset = "0xD1F32C", VA = "0xD1F32C")]
	public static Action LoadingFadeInAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xD1F3D8", Offset = "0xD1F3D8", VA = "0xD1F3D8")]
	public static Action LoadingFadeOutAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xD1F484", Offset = "0xD1F484", VA = "0xD1F484")]
	public static Action NewPosesAction(UnityAction<TrackedDevicePose_t[]> action)
	{
		return null;
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xD1F530", Offset = "0xD1F530", VA = "0xD1F530")]
	public static Action NewPosesAppliedAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xD1F5C4", Offset = "0xD1F5C4", VA = "0xD1F5C4")]
	public static Action OutOfRangeAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xD1F670", Offset = "0xD1F670", VA = "0xD1F670")]
	public static Action RenderModelLoadedAction(UnityAction<SteamVR_RenderModel, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xD1F71C", Offset = "0xD1F71C", VA = "0xD1F71C")]
	public static Event<VREvent_t> System(EVREventType eventType)
	{
		return null;
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xD1DCBC", Offset = "0xD1DCBC", VA = "0xD1DCBC")]
	public static Action SystemAction(EVREventType eventType, UnityAction<VREvent_t> action)
	{
		return null;
	}
}
[Token(Token = "0x20001BE")]
public class SteamVR_ExternalCamera : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001BF")]
	public struct Config
	{
		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rx;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float ry;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rz;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fov;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float near;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float far;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sceneResolutionScale;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float frameSkip;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float nearOffset;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farOffset;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hmdOffset;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float r;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float g;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float b;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float a;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool disableStandardAssets;
	}

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Config config;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string configPath;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private FileSystemWatcher watcher;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Camera cam;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform target;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject clipQuad;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material clipMaterial;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Material colorMat;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Material alphaMat;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Camera[] cameras;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] cameraRects;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float sceneResolutionScale;

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xD1FCA0", Offset = "0xD1FCA0", VA = "0xD1FCA0")]
	public void ReadConfig()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xD2053C", Offset = "0xD2053C", VA = "0xD2053C")]
	private void OnChanged(object source, FileSystemEventArgs e)
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xD20540", Offset = "0xD20540", VA = "0xD20540")]
	public void AttachToCamera(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xD20C28", Offset = "0xD20C28", VA = "0xD20C28")]
	public float GetTargetDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xD20F1C", Offset = "0xD20F1C", VA = "0xD20F1C")]
	public void RenderNear()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xD21610", Offset = "0xD21610", VA = "0xD21610")]
	public void RenderFar()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xD21720", Offset = "0xD21720", VA = "0xD21720")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xD21724", Offset = "0xD21724", VA = "0xD21724")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0xD21990", Offset = "0xD21990", VA = "0xD21990")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xD21AD8", Offset = "0xD21AD8", VA = "0xD21AD8")]
	public SteamVR_ExternalCamera()
	{
	}
}
[Token(Token = "0x20001C0")]
public class SteamVR_Fade : MonoBehaviour
{
	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color currentColor;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color targetColor;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color deltaColor;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool fadeOverlay;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material fadeMaterial;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int fadeMaterialColorID;

	[Token(Token = "0x600094B")]
	[Address(RVA = "0xD21AE0", Offset = "0xD21AE0", VA = "0xD21AE0")]
	public static void Start(Color newColor, float duration, bool fadeOverlay = false)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xD21BA0", Offset = "0xD21BA0", VA = "0xD21BA0")]
	public static void View(Color newColor, float duration)
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xD21C14", Offset = "0xD21C14", VA = "0xD21C14")]
	public void OnStartFade(Color newColor, float duration, bool fadeOverlay)
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0xD21C54", Offset = "0xD21C54", VA = "0xD21C54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xD21E5C", Offset = "0xD21E5C", VA = "0xD21E5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xD21F28", Offset = "0xD21F28", VA = "0xD21F28")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xD221CC", Offset = "0xD221CC", VA = "0xD221CC")]
	public SteamVR_Fade()
	{
	}
}
[Token(Token = "0x20001C1")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer), typeof(MeshFilter))]
public class SteamVR_Frustum : MonoBehaviour
{
	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fovLeft;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fovRight;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fovTop;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fovBottom;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float nearZ;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float farZ;

	[Token(Token = "0x6000953")]
	[Address(RVA = "0xD2224C", Offset = "0xD2224C", VA = "0xD2224C")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0xD22960", Offset = "0xD22960", VA = "0xD22960")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0xD22AEC", Offset = "0xD22AEC", VA = "0xD22AEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xD22BE8", Offset = "0xD22BE8", VA = "0xD22BE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xD22CEC", Offset = "0xD22CEC", VA = "0xD22CEC")]
	public SteamVR_Frustum()
	{
	}
}
[Token(Token = "0x20001C2")]
[ExecuteInEditMode]
public class SteamVR_GameView : MonoBehaviour
{
	[Token(Token = "0x6000958")]
	[Address(RVA = "0xD22D0C", Offset = "0xD22D0C", VA = "0xD22D0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xD22DA8", Offset = "0xD22DA8", VA = "0xD22DA8")]
	public SteamVR_GameView()
	{
	}
}
[Token(Token = "0x20001C3")]
public class SteamVR_IK : MonoBehaviour
{
	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform start;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform joint;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform end;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform poleVector;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform upVector;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float blendPct;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Transform startXform;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform jointXform;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Transform endXform;

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xD22DB0", Offset = "0xD22DB0", VA = "0xD22DB0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xD23814", Offset = "0xD23814", VA = "0xD23814")]
	public static bool Solve(Vector3 start, Vector3 end, Vector3 poleVector, float jointDist, float targetDist, ref Vector3 result, out Vector3 forward, out Vector3 up)
	{
		return default(bool);
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xD23D6C", Offset = "0xD23D6C", VA = "0xD23D6C")]
	public SteamVR_IK()
	{
	}
}
[Token(Token = "0x20001C4")]
public class SteamVR_LoadLevel : MonoBehaviour
{
	[Token(Token = "0x20001C5")]
	[CompilerGenerated]
	private sealed class <LoadLevel>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_LoadLevel <>4__this;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVROverlay <overlay>5__2;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <fadedForeground>5__3;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRCompositor <compositor>5__4;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_Controller.Device <hmd>5__5;

		[Token(Token = "0x17000109")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600096B")]
			[Address(RVA = "0xD261B4", Offset = "0xD261B4", VA = "0xD261B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600096D")]
			[Address(RVA = "0xD261FC", Offset = "0xD261FC", VA = "0xD261FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xD24964", Offset = "0xD24964", VA = "0xD24964")]
		[DebuggerHidden]
		public <LoadLevel>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xD24FA8", Offset = "0xD24FA8", VA = "0xD24FA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xD24FAC", Offset = "0xD24FAC", VA = "0xD24FAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xD261BC", Offset = "0xD261BC", VA = "0xD261BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SteamVR_LoadLevel _active;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string levelName;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string internalProcessPath;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string internalProcessArgs;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadAdditive;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool loadAsync;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture loadingScreen;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture progressBarEmpty;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture progressBarFull;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float loadingScreenWidthInMeters;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float progressBarWidthInMeters;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float loadingScreenDistance;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform loadingScreenTransform;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform progressBarTransform;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture front;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture back;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture left;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Texture right;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture top;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Texture bottom;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color backgroundColor;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool showGrid;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float fadeOutTime;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float fadeInTime;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float postLoadSettleTime;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float loadingScreenFadeInTime;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float loadingScreenFadeOutTime;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float fadeRate;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float alpha;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AsyncOperation async;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RenderTexture renderTexture;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ulong loadingScreenOverlayHandle;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ulong progressBarOverlayHandle;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool autoTriggerOnEnable;

	[Token(Token = "0x17000106")]
	public static bool loading
	{
		[Token(Token = "0x600095D")]
		[Address(RVA = "0xD23D7C", Offset = "0xD23D7C", VA = "0xD23D7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000107")]
	public static float progress
	{
		[Token(Token = "0x600095E")]
		[Address(RVA = "0xD23DF4", Offset = "0xD23DF4", VA = "0xD23DF4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000108")]
	public static Texture progressTexture
	{
		[Token(Token = "0x600095F")]
		[Address(RVA = "0xD23EA4", Offset = "0xD23EA4", VA = "0xD23EA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xD23F44", Offset = "0xD23F44", VA = "0xD23F44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xD23F54", Offset = "0xD23F54", VA = "0xD23F54")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xD2400C", Offset = "0xD2400C", VA = "0xD2400C")]
	public static void Begin(string levelName, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xD24104", Offset = "0xD24104", VA = "0xD24104")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xD24854", Offset = "0xD24854", VA = "0xD24854")]
	private void Update()
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xD23F98", Offset = "0xD23F98", VA = "0xD23F98")]
	[IteratorStateMachine(typeof(<LoadLevel>d__45))]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xD24530", Offset = "0xD24530", VA = "0xD24530")]
	private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xD24F64", Offset = "0xD24F64", VA = "0xD24F64")]
	public SteamVR_LoadLevel()
	{
	}
}
[Token(Token = "0x20001C6")]
public class SteamVR_Menu : MonoBehaviour
{
	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture cursor;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture background;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture logo;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float logoHeight;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float menuOffset;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 scaleLimits;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float scaleRate;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Overlay overlay;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera overlayCam;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector4 uvOffset;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string scaleLimitX;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string scaleLimitY;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string scaleRateText;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CursorLockMode savedCursorLockState;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool savedCursorVisible;

	[Token(Token = "0x1700010B")]
	public RenderTexture texture
	{
		[Token(Token = "0x600096E")]
		[Address(RVA = "0xD26204", Offset = "0xD26204", VA = "0xD26204")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010C")]
	public float scale
	{
		[Token(Token = "0x600096F")]
		[Address(RVA = "0xD262CC", Offset = "0xD262CC", VA = "0xD262CC")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000970")]
		[Address(RVA = "0xD262D4", Offset = "0xD262D4", VA = "0xD262D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0xD262DC", Offset = "0xD262DC", VA = "0xD262DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0xD2646C", Offset = "0xD2646C", VA = "0xD2646C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xD27A3C", Offset = "0xD27A3C", VA = "0xD27A3C")]
	public void ShowMenu()
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xD27930", Offset = "0xD27930", VA = "0xD27930")]
	public void HideMenu()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xD27DEC", Offset = "0xD27DEC", VA = "0xD27DEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xD27878", Offset = "0xD27878", VA = "0xD27878")]
	private void SetScale(float scale)
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xD27D9C", Offset = "0xD27D9C", VA = "0xD27D9C")]
	private void SaveCursorState()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xD27DC8", Offset = "0xD27DC8", VA = "0xD27DC8")]
	private void RestoreCursorState()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xD27F3C", Offset = "0xD27F3C", VA = "0xD27F3C")]
	public SteamVR_Menu()
	{
	}
}
[Token(Token = "0x20001C7")]
public class SteamVR_Overlay : MonoBehaviour
{
	[Token(Token = "0x20001C8")]
	public struct IntersectionResults
	{
		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 point;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 normal;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 UVs;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;
	}

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture texture;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool curved;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool antialias;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool highquality;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Size of overlay view.")]
	public float scale;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Distance from surface.")]
	public float distance;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	[Tooltip("Opacity")]
	public float alpha;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 uvOffset;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 mouseScale;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 curvedRange;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VROverlayInputMethod inputMethod;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ulong handle;

	[Token(Token = "0x1700010D")]
	public static SteamVR_Overlay instance
	{
		[Token(Token = "0x600097A")]
		[Address(RVA = "0xD27F58", Offset = "0xD27F58", VA = "0xD27F58")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600097B")]
		[Address(RVA = "0xD27FA0", Offset = "0xD27FA0", VA = "0xD27FA0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700010E")]
	public static string key
	{
		[Token(Token = "0x600097C")]
		[Address(RVA = "0xD2498C", Offset = "0xD2498C", VA = "0xD2498C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xD27FF8", Offset = "0xD27FF8", VA = "0xD27FF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xD28114", Offset = "0xD28114", VA = "0xD28114")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xD28188", Offset = "0xD28188", VA = "0xD28188")]
	public void UpdateOverlay()
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xD2855C", Offset = "0xD2855C", VA = "0xD2855C")]
	public bool PollNextEvent(ref VREvent_t pEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xD28648", Offset = "0xD28648", VA = "0xD28648")]
	public bool ComputeIntersection(Vector3 source, Vector3 direction, ref IntersectionResults results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xD28764", Offset = "0xD28764", VA = "0xD28764")]
	public SteamVR_Overlay()
	{
	}
}
[Token(Token = "0x20001C9")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer), typeof(MeshFilter))]
public class SteamVR_PlayArea : MonoBehaviour
{
	[Token(Token = "0x20001CA")]
	public enum Size
	{
		[Token(Token = "0x4000A0A")]
		Calibrated,
		[Token(Token = "0x4000A0B")]
		_400x300,
		[Token(Token = "0x4000A0C")]
		_300x225,
		[Token(Token = "0x4000A0D")]
		_200x150
	}

	[Token(Token = "0x20001CB")]
	[CompilerGenerated]
	private sealed class <UpdateBounds>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_PlayArea <>4__this;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVRChaperone <chaperone>5__2;

		[Token(Token = "0x1700010F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600098E")]
			[Address(RVA = "0xD29790", Offset = "0xD29790", VA = "0xD29790", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000990")]
			[Address(RVA = "0xD297D8", Offset = "0xD297D8", VA = "0xD297D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xD29648", Offset = "0xD29648", VA = "0xD29648")]
		[DebuggerHidden]
		public <UpdateBounds>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xD29698", Offset = "0xD29698", VA = "0xD29698", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xD2969C", Offset = "0xD2969C", VA = "0xD2969C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xD29798", Offset = "0xD29798", VA = "0xD29798", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float borderThickness;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wireframeHeight;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool drawWireframeWhenSelectedOnly;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool drawInGame;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Size size;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Vector3[] vertices;

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xD287A4", Offset = "0xD287A4", VA = "0xD287A4")]
	public static bool GetBounds(Size size, ref HmdQuad_t pRect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xD28AA4", Offset = "0xD28AA4", VA = "0xD28AA4")]
	public void BuildMesh()
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xD292EC", Offset = "0xD292EC", VA = "0xD292EC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xD29518", Offset = "0xD29518", VA = "0xD29518")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xD292FC", Offset = "0xD292FC", VA = "0xD292FC")]
	public void DrawWireframe()
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xD29528", Offset = "0xD29528", VA = "0xD29528")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xD295D4", Offset = "0xD295D4", VA = "0xD295D4")]
	[IteratorStateMachine(typeof(<UpdateBounds>d__14))]
	private IEnumerator UpdateBounds()
	{
		return null;
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xD29670", Offset = "0xD29670", VA = "0xD29670")]
	public SteamVR_PlayArea()
	{
	}
}
[Token(Token = "0x20001CC")]
public class SteamVR_Render : MonoBehaviour
{
	[Token(Token = "0x20001CD")]
	[CompilerGenerated]
	private sealed class <RenderLoop>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_Render <>4__this;

		[Token(Token = "0x17000114")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xD2C260", Offset = "0xD2C260", VA = "0xD2C260", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B0")]
			[Address(RVA = "0xD2C2A8", Offset = "0xD2C2A8", VA = "0xD2C2A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xD29F38", Offset = "0xD29F38", VA = "0xD29F38")]
		[DebuggerHidden]
		public <RenderLoop>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xD2C0E0", Offset = "0xD2C0E0", VA = "0xD2C0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xD2C0E4", Offset = "0xD2C0E4", VA = "0xD2C0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xD2C268", Offset = "0xD2C268", VA = "0xD2C268", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool pauseGameWhenDashboardIsVisible;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool lockPhysicsUpdateRateToRenderFrequency;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SteamVR_ExternalCamera externalCamera;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string externalCameraConfigPath;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ETrackingUniverseOrigin trackingSpace;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR_Render _instance;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isQuitting;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SteamVR_Camera[] cameras;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TrackedDevicePose_t[] poses;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TrackedDevicePose_t[] gamePoses;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool _pauseRendering;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float sceneResolutionScale;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeScale;

	[Token(Token = "0x17000111")]
	public static EVREye eye
	{
		[Token(Token = "0x6000991")]
		[Address(RVA = "0xD297E0", Offset = "0xD297E0", VA = "0xD297E0")]
		[CompilerGenerated]
		get
		{
			return default(EVREye);
		}
		[Token(Token = "0x6000992")]
		[Address(RVA = "0xD29828", Offset = "0xD29828", VA = "0xD29828")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000112")]
	public static SteamVR_Render instance
	{
		[Token(Token = "0x6000993")]
		[Address(RVA = "0xD24DAC", Offset = "0xD24DAC", VA = "0xD24DAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000113")]
	public static bool pauseRendering
	{
		[Token(Token = "0x600099C")]
		[Address(RVA = "0xD29E7C", Offset = "0xD29E7C", VA = "0xD29E7C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600099D")]
		[Address(RVA = "0xD26114", Offset = "0xD26114", VA = "0xD26114")]
		set
		{
		}
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xD29874", Offset = "0xD29874", VA = "0xD29874")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xD298C0", Offset = "0xD298C0", VA = "0xD298C0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xD29934", Offset = "0xD29934", VA = "0xD29934")]
	public static void Add(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xD29BC8", Offset = "0xD29BC8", VA = "0xD29BC8")]
	public static void Remove(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xD24A08", Offset = "0xD24A08", VA = "0xD24A08")]
	public static SteamVR_Camera Top()
	{
		return null;
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xD299A0", Offset = "0xD299A0", VA = "0xD299A0")]
	private void AddInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xD29C70", Offset = "0xD29C70", VA = "0xD29C70")]
	private void RemoveInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xD29E3C", Offset = "0xD29E3C", VA = "0xD29E3C")]
	private SteamVR_Camera TopInternal()
	{
		return null;
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xD29EC4", Offset = "0xD29EC4", VA = "0xD29EC4")]
	[IteratorStateMachine(typeof(<RenderLoop>d__29))]
	private IEnumerator RenderLoop()
	{
		return null;
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xD29F60", Offset = "0xD29F60", VA = "0xD29F60")]
	private void RenderExternalCamera()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xD2A080", Offset = "0xD2A080", VA = "0xD2A080")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xD2A0E0", Offset = "0xD2A0E0", VA = "0xD2A0E0")]
	private void OnQuit(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xD2A0E8", Offset = "0xD2A0E8", VA = "0xD2A0E8")]
	private string GetScreenshotFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames screenshotPropertyFilename)
	{
		return null;
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xD2A1EC", Offset = "0xD2A1EC", VA = "0xD2A1EC")]
	private void OnRequestScreenshot(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xD2B498", Offset = "0xD2B498", VA = "0xD2B498")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xD2B758", Offset = "0xD2B758", VA = "0xD2B758")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xD2B96C", Offset = "0xD2B96C", VA = "0xD2B96C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xD2BB10", Offset = "0xD2BB10", VA = "0xD2BB10")]
	public void UpdatePoses()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xD2BBCC", Offset = "0xD2BBCC", VA = "0xD2BBCC")]
	private void OnBeforeRender()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xD2BBD0", Offset = "0xD2BBD0", VA = "0xD2BBD0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0xD2BFA4", Offset = "0xD2BFA4", VA = "0xD2BFA4")]
	public SteamVR_Render()
	{
	}
}
[Token(Token = "0x20001CE")]
[ExecuteInEditMode]
public class SteamVR_RenderModel : MonoBehaviour
{
	[Token(Token = "0x20001CF")]
	public class RenderModel
	{
		[Token(Token = "0x17000117")]
		public Mesh mesh
		{
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xD2F054", Offset = "0xD2F054", VA = "0xD2F054")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xD2F05C", Offset = "0xD2F05C", VA = "0xD2F05C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public Material material
		{
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xD2F064", Offset = "0xD2F064", VA = "0xD2F064")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xD2F06C", Offset = "0xD2F06C", VA = "0xD2F06C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xD2E95C", Offset = "0xD2E95C", VA = "0xD2E95C")]
		public RenderModel(Mesh mesh, Material material)
		{
		}
	}

	[Token(Token = "0x20001D0")]
	public sealed class RenderModelInterfaceHolder : IDisposable
	{
		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool needsShutdown;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool failedLoadInterface;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CVRRenderModels _instance;

		[Token(Token = "0x17000119")]
		public CVRRenderModels instance
		{
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0xD2D4C4", Offset = "0xD2D4C4", VA = "0xD2D4C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xD2F074", Offset = "0xD2F074", VA = "0xD2F074", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xD2CD38", Offset = "0xD2CD38", VA = "0xD2CD38")]
		public RenderModelInterfaceHolder()
		{
		}
	}

	[Token(Token = "0x20001D1")]
	[CompilerGenerated]
	private sealed class <SetModelAsync>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string renderModelName;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_RenderModel <>4__this;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderModelInterfaceHolder <holder>5__2;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRRenderModels <renderModels>5__3;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string[] <renderModelNames>5__4;

		[Token(Token = "0x1700011A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xD2FB10", Offset = "0xD2FB10", VA = "0xD2FB10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xD2FB58", Offset = "0xD2FB58", VA = "0xD2FB58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xD2C6D4", Offset = "0xD2C6D4", VA = "0xD2C6D4")]
		[DebuggerHidden]
		public <SetModelAsync>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xD2F088", Offset = "0xD2F088", VA = "0xD2F088", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xD2F0A4", Offset = "0xD2F0A4", VA = "0xD2F0A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xD2FA60", Offset = "0xD2FA60", VA = "0xD2FA60")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xD2FB18", Offset = "0xD2FB18", VA = "0xD2FB18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D2")]
	[CompilerGenerated]
	private sealed class <FreeRenderModel>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr pRenderModel;

		[Token(Token = "0x1700011C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xD2FD70", Offset = "0xD2FD70", VA = "0xD2FD70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xD2FDB8", Offset = "0xD2FDB8", VA = "0xD2FDB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xD2E9A0", Offset = "0xD2E9A0", VA = "0xD2E9A0")]
		[DebuggerHidden]
		public <FreeRenderModel>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xD2FB60", Offset = "0xD2FB60", VA = "0xD2FB60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xD2FB64", Offset = "0xD2FB64", VA = "0xD2FB64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xD2FD78", Offset = "0xD2FD78", VA = "0xD2FD78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x4000A25")]
	public const string modelOverrideWarning = "Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.";

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.")]
	public string modelOverride;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Shader to apply to model.")]
	public Shader shader;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Enable to print out when render models are loaded.")]
	public bool verbose;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[Tooltip("If available, break down into separate components instead of loading as a single mesh.")]
	public bool createComponents;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[Tooltip("Update transforms of components at runtime to reflect user action.")]
	public bool updateDynamically;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public RenderModel_ControllerMode_State_t controllerModeState;

	[Token(Token = "0x4000A2C")]
	public const string k_localTransformName = "attach";

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static System.Collections.Hashtable models;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static System.Collections.Hashtable materials;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Events.Action hideRenderModelsAction;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action modelSkinSettingsHaveChangedAction;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<int, string> nameCache;

	[Token(Token = "0x17000116")]
	public string renderModelName
	{
		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xD2C2B0", Offset = "0xD2C2B0", VA = "0xD2C2B0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xD2C2B8", Offset = "0xD2C2B8", VA = "0xD2C2B8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0xD2C2C0", Offset = "0xD2C2C0", VA = "0xD2C2C0")]
	private void OnModelSkinSettingsHaveChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xD2C4F8", Offset = "0xD2C4F8", VA = "0xD2C4F8")]
	private void OnHideRenderModels(bool hidden)
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xD2C62C", Offset = "0xD2C62C", VA = "0xD2C62C")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xD2C334", Offset = "0xD2C334", VA = "0xD2C334")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xD2C644", Offset = "0xD2C644", VA = "0xD2C644")]
	[IteratorStateMachine(typeof(<SetModelAsync>d__21))]
	private IEnumerator SetModelAsync(string renderModelName)
	{
		return null;
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0xD2C6FC", Offset = "0xD2C6FC", VA = "0xD2C6FC")]
	private bool SetModel(string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0xD2DA74", Offset = "0xD2DA74", VA = "0xD2DA74")]
	private RenderModel LoadRenderModel(CVRRenderModels renderModels, string renderModelName, string baseName)
	{
		return null;
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0xD2E8F4", Offset = "0xD2E8F4", VA = "0xD2E8F4")]
	[IteratorStateMachine(typeof(<FreeRenderModel>d__24))]
	private IEnumerator FreeRenderModel(IntPtr pRenderModel)
	{
		return null;
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0xD2E9C8", Offset = "0xD2E9C8", VA = "0xD2E9C8")]
	public Transform FindComponent(string componentName)
	{
		return null;
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0xD2CC0C", Offset = "0xD2CC0C", VA = "0xD2CC0C")]
	private void StripMesh(GameObject go)
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0xD2CD40", Offset = "0xD2CD40", VA = "0xD2CD40")]
	private bool LoadComponents(RenderModelInterfaceHolder holder, string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0xD2EA60", Offset = "0xD2EA60", VA = "0xD2EA60")]
	private SteamVR_RenderModel()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0xD2EC04", Offset = "0xD2EC04", VA = "0xD2EC04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0xD2ECFC", Offset = "0xD2ECFC", VA = "0xD2ECFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0xD2ED48", Offset = "0xD2ED48", VA = "0xD2ED48")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0xD2D5F0", Offset = "0xD2D5F0", VA = "0xD2D5F0")]
	public void UpdateComponents(CVRRenderModels renderModels)
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0xD2EF20", Offset = "0xD2EF20", VA = "0xD2EF20")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0xD2E4D8", Offset = "0xD2E4D8", VA = "0xD2E4D8")]
	private static void Sleep()
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0xD2E4E4", Offset = "0xD2E4E4", VA = "0xD2E4E4")]
	private RenderModel_t MarshalRenderModel(IntPtr pRenderModel)
	{
		return default(RenderModel_t);
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xD2E6F4", Offset = "0xD2E6F4", VA = "0xD2E6F4")]
	private RenderModel_TextureMap_t MarshalRenderModel_TextureMap(IntPtr pRenderModel)
	{
		return default(RenderModel_TextureMap_t);
	}
}
[Token(Token = "0x20001D3")]
public class SteamVR_Skybox : MonoBehaviour
{
	[Token(Token = "0x20001D4")]
	public enum CellSize
	{
		[Token(Token = "0x4000A4C")]
		x1024,
		[Token(Token = "0x4000A4D")]
		x64,
		[Token(Token = "0x4000A4E")]
		x32,
		[Token(Token = "0x4000A4F")]
		x16,
		[Token(Token = "0x4000A50")]
		x8
	}

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture front;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture back;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture left;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture right;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture top;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture bottom;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CellSize StereoCellSize;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float StereoIpdMm;

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xD2FDC0", Offset = "0xD2FDC0", VA = "0xD2FDC0")]
	public void SetTextureByIndex(int i, Texture t)
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xD2FE20", Offset = "0xD2FE20", VA = "0xD2FE20")]
	public Texture GetTextureByIndex(int i)
	{
		return null;
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xD25CFC", Offset = "0xD25CFC", VA = "0xD25CFC")]
	public static void SetOverride([Optional] Texture front, [Optional] Texture back, [Optional] Texture left, [Optional] Texture right, [Optional] Texture top, [Optional] Texture bottom)
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xD26190", Offset = "0xD26190", VA = "0xD26190")]
	public static void ClearOverride()
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xD2FE80", Offset = "0xD2FE80", VA = "0xD2FE80")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0xD2FE94", Offset = "0xD2FE94", VA = "0xD2FE94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0xD2FE98", Offset = "0xD2FE98", VA = "0xD2FE98")]
	public SteamVR_Skybox()
	{
	}
}
[Token(Token = "0x20001D5")]
[ExecuteInEditMode]
public class SteamVR_SphericalProjection : MonoBehaviour
{
	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material material;

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0xD2FEAC", Offset = "0xD2FEAC", VA = "0xD2FEAC")]
	public void Set(Vector3 N, float phi0, float phi1, float theta0, float theta1, Vector3 uAxis, Vector3 uOrigin, float uScale, Vector3 vAxis, Vector3 vOrigin, float vScale)
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0xD302CC", Offset = "0xD302CC", VA = "0xD302CC")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0xD30358", Offset = "0xD30358", VA = "0xD30358")]
	public SteamVR_SphericalProjection()
	{
	}
}
[Token(Token = "0x20001D6")]
[ExecuteInEditMode]
public class SteamVR_Stats : MonoBehaviour
{
	[Token(Token = "0x60009E7")]
	[Address(RVA = "0xD30360", Offset = "0xD30360", VA = "0xD30360")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0xD303FC", Offset = "0xD303FC", VA = "0xD303FC")]
	public SteamVR_Stats()
	{
	}
}
[Token(Token = "0x20001D7")]
public class SteamVR_TestController : MonoBehaviour
{
	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> controllerIndices;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EVRButtonId[] buttonIds;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EVRButtonId[] axisIds;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform point;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pointer;

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0xD30404", Offset = "0xD30404", VA = "0xD30404")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0xD30A9C", Offset = "0xD30A9C", VA = "0xD30A9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0xD30B68", Offset = "0xD30B68", VA = "0xD30B68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0xD305F4", Offset = "0xD305F4", VA = "0xD305F4")]
	private void PrintControllerStatus(int index)
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0xD30C34", Offset = "0xD30C34", VA = "0xD30C34")]
	private void Update()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0xD31520", Offset = "0xD31520", VA = "0xD31520")]
	public SteamVR_TestController()
	{
	}
}
[Token(Token = "0x20001D8")]
public class SteamVR_TrackedCamera
{
	[Token(Token = "0x20001D9")]
	public class VideoStreamTexture
	{
		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D _texture;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int prevFrameCount;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint glTextureId;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VideoStream videostream;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraVideoStreamFrameHeader_t header;

		[Token(Token = "0x1700011E")]
		public bool undistorted
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xD31B10", Offset = "0xD31B10", VA = "0xD31B10")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xD31B18", Offset = "0xD31B18", VA = "0xD31B18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public uint deviceIndex
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xD31B24", Offset = "0xD31B24", VA = "0xD31B24")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000120")]
		public bool hasCamera
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xD31B40", Offset = "0xD31B40", VA = "0xD31B40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000121")]
		public bool hasTracking
		{
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0xD31B5C", Offset = "0xD31B5C", VA = "0xD31B5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		public uint frameId
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xD31EE8", Offset = "0xD31EE8", VA = "0xD31EE8")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000123")]
		public VRTextureBounds_t frameBounds
		{
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0xD31F00", Offset = "0xD31F00", VA = "0xD31F00")]
			[CompilerGenerated]
			get
			{
				return default(VRTextureBounds_t);
			}
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xD31F0C", Offset = "0xD31F0C", VA = "0xD31F0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public EVRTrackedCameraFrameType frameType
		{
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0xD31F18", Offset = "0xD31F18", VA = "0xD31F18")]
			get
			{
				return default(EVRTrackedCameraFrameType);
			}
		}

		[Token(Token = "0x17000125")]
		public Texture2D texture
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xD31F20", Offset = "0xD31F20", VA = "0xD31F20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0xD31F38", Offset = "0xD31F38", VA = "0xD31F38")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x17000127")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0xD31F8C", Offset = "0xD31F8C", VA = "0xD31F8C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000128")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0xD31FAC", Offset = "0xD31FAC", VA = "0xD31FAC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xD317A8", Offset = "0xD317A8", VA = "0xD317A8")]
		public VideoStreamTexture(uint deviceIndex, bool undistorted)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xD31FD0", Offset = "0xD31FD0", VA = "0xD31FD0")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xD31FFC", Offset = "0xD31FFC", VA = "0xD31FFC")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xD32068", Offset = "0xD32068", VA = "0xD32068")]
		public ulong Release()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xD31B74", Offset = "0xD31B74", VA = "0xD31B74")]
		private void Update()
		{
		}
	}

	[Token(Token = "0x20001DA")]
	private class VideoStream
	{
		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong _handle;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _hasCamera;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ulong refCount;

		[Token(Token = "0x17000129")]
		public uint deviceIndex
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0xD32154", Offset = "0xD32154", VA = "0xD32154")]
			[CompilerGenerated]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0xD3215C", Offset = "0xD3215C", VA = "0xD3215C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public ulong handle
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0xD32164", Offset = "0xD32164", VA = "0xD32164")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700012B")]
		public bool hasCamera
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0xD3216C", Offset = "0xD3216C", VA = "0xD3216C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xD31ABC", Offset = "0xD31ABC", VA = "0xD31ABC")]
		public VideoStream(uint deviceIndex)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xD32014", Offset = "0xD32014", VA = "0xD32014")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xD32100", Offset = "0xD32100", VA = "0xD32100")]
		public ulong Release()
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VideoStreamTexture[] distorted;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static VideoStreamTexture[] undistorted;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static VideoStream[] videostreams;

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0xD31648", Offset = "0xD31648", VA = "0xD31648")]
	public static VideoStreamTexture Distorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0xD317F4", Offset = "0xD317F4", VA = "0xD317F4")]
	public static VideoStreamTexture Undistorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0xD31950", Offset = "0xD31950", VA = "0xD31950")]
	public static VideoStreamTexture Source(bool undistorted, int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0xD31964", Offset = "0xD31964", VA = "0xD31964")]
	private static VideoStream Stream(uint deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xD31B08", Offset = "0xD31B08", VA = "0xD31B08")]
	public SteamVR_TrackedCamera()
	{
	}
}
[Token(Token = "0x20001DB")]
public class SteamVR_TrackedObject : MonoBehaviour
{
	[Token(Token = "0x20001DC")]
	public enum EIndex
	{
		[Token(Token = "0x4000A6A")]
		None = -1,
		[Token(Token = "0x4000A6B")]
		Hmd,
		[Token(Token = "0x4000A6C")]
		Device1,
		[Token(Token = "0x4000A6D")]
		Device2,
		[Token(Token = "0x4000A6E")]
		Device3,
		[Token(Token = "0x4000A6F")]
		Device4,
		[Token(Token = "0x4000A70")]
		Device5,
		[Token(Token = "0x4000A71")]
		Device6,
		[Token(Token = "0x4000A72")]
		Device7,
		[Token(Token = "0x4000A73")]
		Device8,
		[Token(Token = "0x4000A74")]
		Device9,
		[Token(Token = "0x4000A75")]
		Device10,
		[Token(Token = "0x4000A76")]
		Device11,
		[Token(Token = "0x4000A77")]
		Device12,
		[Token(Token = "0x4000A78")]
		Device13,
		[Token(Token = "0x4000A79")]
		Device14,
		[Token(Token = "0x4000A7A")]
		Device15
	}

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EIndex index;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If not set, relative to parent")]
	public Transform origin;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SteamVR_Events.Action newPosesAction;

	[Token(Token = "0x1700012C")]
	public bool isValid
	{
		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xD32174", Offset = "0xD32174", VA = "0xD32174")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xD3217C", Offset = "0xD3217C", VA = "0xD3217C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xD32188", Offset = "0xD32188", VA = "0xD32188")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xD323B0", Offset = "0xD323B0", VA = "0xD323B0")]
	private SteamVR_TrackedObject()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xD32470", Offset = "0xD32470", VA = "0xD32470")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xD3250C", Offset = "0xD3250C", VA = "0xD3250C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xD32538", Offset = "0xD32538", VA = "0xD32538")]
	public void SetDeviceIndex(int index)
	{
	}
}
[Token(Token = "0x20001DD")]
[ExecuteInEditMode]
public class SteamVR_UpdatePoses : MonoBehaviour
{
	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xD3262C", Offset = "0xD3262C", VA = "0xD3262C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xD326C8", Offset = "0xD326C8", VA = "0xD326C8")]
	public SteamVR_UpdatePoses()
	{
	}
}
[Token(Token = "0x20001DE")]
public static class SteamVR_Utils
{
	[Serializable]
	[Token(Token = "0x20001DF")]
	public struct RigidTransform
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 pos;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rot;

		[Token(Token = "0x1700012D")]
		public static RigidTransform identity
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xD32B2C", Offset = "0xD32B2C", VA = "0xD32B2C")]
			get
			{
				return default(RigidTransform);
			}
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xD32BD8", Offset = "0xD32BD8", VA = "0xD32BD8")]
		public static RigidTransform FromLocal(Transform t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xD32BC4", Offset = "0xD32BC4", VA = "0xD32BC4")]
		public RigidTransform(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xD24F18", Offset = "0xD24F18", VA = "0xD24F18")]
		public RigidTransform(Transform t)
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xD24A70", Offset = "0xD24A70", VA = "0xD24A70")]
		public RigidTransform(Transform from, Transform to)
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xD2ED78", Offset = "0xD2ED78", VA = "0xD2ED78")]
		public RigidTransform(HmdMatrix34_t pose)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xD32C3C", Offset = "0xD32C3C", VA = "0xD32C3C")]
		public RigidTransform(HmdMatrix44_t pose)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xD32E38", Offset = "0xD32E38", VA = "0xD32E38")]
		public HmdMatrix44_t ToHmdMatrix44()
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xD24BB4", Offset = "0xD24BB4", VA = "0xD24BB4")]
		public HmdMatrix34_t ToHmdMatrix34()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xD330A0", Offset = "0xD330A0", VA = "0xD330A0", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xD33180", Offset = "0xD33180", VA = "0xD33180", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xD33228", Offset = "0xD33228", VA = "0xD33228")]
		public static bool operator ==(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xD332AC", Offset = "0xD332AC", VA = "0xD332AC")]
		public static bool operator !=(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xD33330", Offset = "0xD33330", VA = "0xD33330")]
		public static RigidTransform operator *(RigidTransform a, RigidTransform b)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xD3340C", Offset = "0xD3340C", VA = "0xD3340C")]
		public void Inverse()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xD33458", Offset = "0xD33458", VA = "0xD33458")]
		public RigidTransform GetInverse()
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xD334A0", Offset = "0xD334A0", VA = "0xD334A0")]
		public void Multiply(RigidTransform a, RigidTransform b)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xD33574", Offset = "0xD33574", VA = "0xD33574")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xD335CC", Offset = "0xD335CC", VA = "0xD335CC")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xD33620", Offset = "0xD33620", VA = "0xD33620")]
		public static Vector3 operator *(RigidTransform t, Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xD33624", Offset = "0xD33624", VA = "0xD33624")]
		public static RigidTransform Interpolate(RigidTransform a, RigidTransform b, float t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xD336B0", Offset = "0xD336B0", VA = "0xD336B0")]
		public void Interpolate(RigidTransform to, float t)
		{
		}
	}

	[Token(Token = "0x20001E0")]
	public delegate object SystemFn(CVRSystem system, params object[] args);

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xD326D0", Offset = "0xD326D0", VA = "0xD326D0")]
	public static Quaternion Slerp(Quaternion A, Quaternion B, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xD32800", Offset = "0xD32800", VA = "0xD32800")]
	public static Vector3 Lerp(Vector3 A, Vector3 B, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xD32828", Offset = "0xD32828", VA = "0xD32828")]
	public static float Lerp(float A, float B, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xD32838", Offset = "0xD32838", VA = "0xD32838")]
	public static double Lerp(double A, double B, double t)
	{
		return default(double);
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xD32848", Offset = "0xD32848", VA = "0xD32848")]
	public static float InverseLerp(Vector3 A, Vector3 B, Vector3 result)
	{
		return default(float);
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xD32880", Offset = "0xD32880", VA = "0xD32880")]
	public static float InverseLerp(float A, float B, float result)
	{
		return default(float);
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xD32890", Offset = "0xD32890", VA = "0xD32890")]
	public static double InverseLerp(double A, double B, double result)
	{
		return default(double);
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xD328A0", Offset = "0xD328A0", VA = "0xD328A0")]
	public static float Saturate(float A)
	{
		return default(float);
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xD328BC", Offset = "0xD328BC", VA = "0xD328BC")]
	public static Vector2 Saturate(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xD328E0", Offset = "0xD328E0", VA = "0xD328E0")]
	public static float Abs(float A)
	{
		return default(float);
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xD328F0", Offset = "0xD328F0", VA = "0xD328F0")]
	public static Vector2 Abs(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xD3290C", Offset = "0xD3290C", VA = "0xD3290C")]
	private static float _copysign(float sizeval, float signval)
	{
		return default(float);
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xD32920", Offset = "0xD32920", VA = "0xD32920")]
	public static Quaternion GetRotation(this Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xD329DC", Offset = "0xD329DC", VA = "0xD329DC")]
	public static Vector3 GetPosition(this Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xD329E8", Offset = "0xD329E8", VA = "0xD329E8")]
	public static Vector3 GetScale(this Matrix4x4 m)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xD32A38", Offset = "0xD32A38", VA = "0xD32A38")]
	public static object CallSystemFn(SystemFn fn, params object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0xD2A39C", Offset = "0xD2A39C", VA = "0xD2A39C")]
	public static void TakeStereoScreenshot(uint screenshotHandle, GameObject target, int cellSize, float ipd, ref string previewFilename, ref string VRFilename)
	{
	}
}
[Token(Token = "0x20001E1")]
public class Table : MonoBehaviour
{
	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xD338A4", Offset = "0xD338A4", VA = "0xD338A4")]
	public Table()
	{
	}
}
[Token(Token = "0x20001E2")]
public class testEnable : MonoBehaviour
{
	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xD338AC", Offset = "0xD338AC", VA = "0xD338AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xD338B0", Offset = "0xD338B0", VA = "0xD338B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xD338B4", Offset = "0xD338B4", VA = "0xD338B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xD3391C", Offset = "0xD3391C", VA = "0xD3391C")]
	public testEnable()
	{
	}
}
[Token(Token = "0x20001E3")]
public class TurnRenderer : MonoBehaviour
{
	[Token(Token = "0x20001E4")]
	[CompilerGenerated]
	private sealed class <GetControllersRenderer>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TurnRenderer <>4__this;

		[Token(Token = "0x1700012E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xD33B7C", Offset = "0xD33B7C", VA = "0xD33B7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0xD33BC4", Offset = "0xD33BC4", VA = "0xD33BC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xD33A88", Offset = "0xD33A88", VA = "0xD33A88")]
		[DebuggerHidden]
		public <GetControllersRenderer>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xD33AB8", Offset = "0xD33AB8", VA = "0xD33AB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xD33ABC", Offset = "0xD33ABC", VA = "0xD33ABC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xD33B84", Offset = "0xD33B84", VA = "0xD33B84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer[] renderers;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool init;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float lastTime;

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xD33924", Offset = "0xD33924", VA = "0xD33924")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xD33964", Offset = "0xD33964", VA = "0xD33964")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0xD33944", Offset = "0xD33944", VA = "0xD33944")]
	private void hide()
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0xD33A14", Offset = "0xD33A14", VA = "0xD33A14")]
	[IteratorStateMachine(typeof(<GetControllersRenderer>d__6))]
	private IEnumerator GetControllersRenderer()
	{
		return null;
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0xD339A4", Offset = "0xD339A4", VA = "0xD339A4")]
	private void turnOffRends()
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0xD33AB0", Offset = "0xD33AB0", VA = "0xD33AB0")]
	public TurnRenderer()
	{
	}
}
[Token(Token = "0x20001E5")]
public class Readme : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20001E6")]
	public class Section
	{
		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string heading;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string linkText;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string url;

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xD33BD4", Offset = "0xD33BD4", VA = "0xD33BD4")]
		public Section()
		{
		}
	}

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D icon;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string title;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Section[] sections;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadedLayout;

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0xD33BCC", Offset = "0xD33BCC", VA = "0xD33BCC")]
	public Readme()
	{
	}
}
[Token(Token = "0x20001E7")]
public class UvMeshFinder : MonoBehaviour
{
	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer skin;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshCollider collider;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SphereCollider sphere;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture mat;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int radius;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject HolePrefab;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> holes;

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0xD33BDC", Offset = "0xD33BDC", VA = "0xD33BDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0xD33CD0", Offset = "0xD33CD0", VA = "0xD33CD0")]
	public void Bake()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0xD33D78", Offset = "0xD33D78", VA = "0xD33D78")]
	public void TurnOff()
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xD33DB0", Offset = "0xD33DB0", VA = "0xD33DB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xD33EE8", Offset = "0xD33EE8", VA = "0xD33EE8")]
	public void MakeHall(Vector2 hole1, Vector2 hole2, Vector3 point1, Vector3 point2, Vector3 point1Normal, Vector3 point2Normal)
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xD33DDC", Offset = "0xD33DDC", VA = "0xD33DDC")]
	public void ResetToNormalState()
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xD34568", Offset = "0xD34568", VA = "0xD34568")]
	public UvMeshFinder()
	{
	}
}
[Token(Token = "0x20001E8")]
public class MoveBlock : MonoBehaviour
{
	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveYAmount;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float moveSpeed;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waitTime;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotateSpeed;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startY;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool goingUp;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float stoppedUntilTime;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float moveUpAmount;

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xD345F8", Offset = "0xD345F8", VA = "0xD345F8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xD34658", Offset = "0xD34658", VA = "0xD34658", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xD347E4", Offset = "0xD347E4", VA = "0xD347E4")]
	public MoveBlock()
	{
	}
}
[Token(Token = "0x20001E9")]
public class Wall : MonoBehaviour
{
	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xD34800", Offset = "0xD34800", VA = "0xD34800")]
	public Wall()
	{
	}
}
[Token(Token = "0x20001EA")]
public class WaterFade : MonoBehaviour
{
	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer skinrenderer;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color fullColor;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color emptyColor;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int colorId;

	[Token(Token = "0x17000130")]
	public float waterInGlass
	{
		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xD34808", Offset = "0xD34808", VA = "0xD34808")]
		set
		{
		}
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xD348D8", Offset = "0xD348D8", VA = "0xD348D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xD349C0", Offset = "0xD349C0", VA = "0xD349C0")]
	private void WaterFade_onWaterInGlassChange(float obj)
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xD34A10", Offset = "0xD34A10", VA = "0xD34A10")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xD34A4C", Offset = "0xD34A4C", VA = "0xD34A4C")]
	public WaterFade()
	{
	}
}
namespace VRTK
{
	[Serializable]
	[Token(Token = "0x20001EB")]
	public sealed class AxisOverrides
	{
		[Token(Token = "0x20001EC")]
		public enum ApplyOverrideType
		{
			[Token(Token = "0x4000AAB")]
			Never,
			[Token(Token = "0x4000AAC")]
			Always,
			[Token(Token = "0x4000AAD")]
			DigitalState,
			[Token(Token = "0x4000AAE")]
			AxisState,
			[Token(Token = "0x4000AAF")]
			SenseAxisState,
			[Token(Token = "0x4000AB0")]
			AxisAndSenseAxisState
		}

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Global Override Settings")]
		[Tooltip("Determines whether to ignore all of the given overrides on an Interaction event.")]
		public bool ignoreAllOverrides;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Sets the Animation parameter for the interaction type and can be used to change the Idle pose based on interaction type.")]
		public float stateValue;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines when to apply the given thumb override.")]
		[Header("Thumb Override Settings")]
		public ApplyOverrideType applyThumbOverride;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		[Tooltip("The axis override for the thumb on an Interact Touch event. Will only be applicable if the thumb button state is not touched.")]
		public float thumbOverride;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Index Finger Override Settings")]
		[Tooltip("Determines when to apply the given index finger override.")]
		public ApplyOverrideType applyIndexOverride;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The axis override for the index finger on an Interact Touch event. Will only be applicable if the index finger button state is not touched.")]
		[Range(0f, 1f)]
		public float indexOverride;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Middle Finger Override Settings")]
		[Tooltip("Determines when to apply the given middle finger override.")]
		public ApplyOverrideType applyMiddleOverride;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The axis override for the middle finger on an Interact Touch event. Will only be applicable if the middle finger button state is not touched.")]
		[Range(0f, 1f)]
		public float middleOverride;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Determines when to apply the given ring finger override.")]
		[Header("Ring Finger Override Settings")]
		public ApplyOverrideType applyRingOverride;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The axis override for the ring finger on an Interact Touch event. Will only be applicable if the ring finger button state is not touched.")]
		[Range(0f, 1f)]
		public float ringOverride;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Pinky Finger Override Settings")]
		[Tooltip("Determines when to apply the given pinky finger override.")]
		public ApplyOverrideType applyPinkyOverride;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The axis override for the pinky finger on an Interact Touch event.  Will only be applicable if the pinky finger button state is not touched.")]
		[Range(0f, 1f)]
		public float pinkyOverride;

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xD34AA8", Offset = "0xD34AA8", VA = "0xD34AA8")]
		public AxisOverrides()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class VRTK_AvatarHandController : MonoBehaviour
	{
		[Token(Token = "0x20001EE")]
		protected enum OverrideState
		{
			[Token(Token = "0x4000AEA")]
			NoOverride,
			[Token(Token = "0x4000AEB")]
			IsOverriding,
			[Token(Token = "0x4000AEC")]
			WasOverring,
			[Token(Token = "0x4000AED")]
			KeepOverring
		}

		[Token(Token = "0x20001EF")]
		[CompilerGenerated]
		private sealed class <ChangePosition>d__103 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float startAxis;

			[Token(Token = "0x4000AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float targetAxis;

			[Token(Token = "0x4000AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_AvatarHandController <>4__this;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int arrayIndex;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x17000131")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A99")]
				[Address(RVA = "0xD37FC0", Offset = "0xD37FC0", VA = "0xD37FC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A9B")]
				[Address(RVA = "0xD38008", Offset = "0xD38008", VA = "0xD38008", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A96")]
			[Address(RVA = "0xD37E6C", Offset = "0xD37E6C", VA = "0xD37E6C")]
			[DebuggerHidden]
			public <ChangePosition>d__103(int <>1__state)
			{
			}

			[Token(Token = "0x6000A97")]
			[Address(RVA = "0xD37E94", Offset = "0xD37E94", VA = "0xD37E94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A98")]
			[Address(RVA = "0xD37E98", Offset = "0xD37E98", VA = "0xD37E98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xD37FC8", Offset = "0xD37FC8", VA = "0xD37FC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller type to use for default finger settings.")]
		[Header("Hand Settings")]
		public SDK_BaseController.ControllerType controllerType;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines whether the Finger and State settings are auto set based on the connected controller type.")]
		public bool setFingersForControllerType;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("If this is checked then the model will be mirrored, tick this if the avatar hand is for the left hand controller.")]
		public bool mirrorModel;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The speed in which a finger will transition to it's destination position if the finger state is `Digital`.")]
		public float animationSnapSpeed;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The button alias to control the thumb if the thumb state is `Digital`.")]
		[Header("Digital Finger Settings")]
		public VRTK_ControllerEvents.ButtonAlias thumbButton;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The button alias to control the index finger if the index finger state is `Digital`.")]
		public VRTK_ControllerEvents.ButtonAlias indexButton;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The button alias to control the middle finger if the middle finger state is `Digital`.")]
		public VRTK_ControllerEvents.ButtonAlias middleButton;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The button alias to control the ring finger if the ring finger state is `Digital`.")]
		public VRTK_ControllerEvents.ButtonAlias ringButton;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The button alias to control the pinky finger if the pinky finger state is `Digital`.")]
		public VRTK_ControllerEvents.ButtonAlias pinkyButton;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The button alias to control the middle, ring and pinky finger if the three finger state is `Digital`.")]
		public VRTK_ControllerEvents.ButtonAlias threeFingerButton;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The button type to listen for axis changes to control the thumb.")]
		[Header("Axis Finger Settings")]
		public SDK_BaseController.ButtonTypes thumbAxisButton;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The button type to listen for axis changes to control the index finger.")]
		public SDK_BaseController.ButtonTypes indexAxisButton;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The button type to listen for axis changes to control the middle finger.")]
		public SDK_BaseController.ButtonTypes middleAxisButton;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The button type to listen for axis changes to control the ring finger.")]
		public SDK_BaseController.ButtonTypes ringAxisButton;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The button type to listen for axis changes to control the pinky finger.")]
		public SDK_BaseController.ButtonTypes pinkyAxisButton;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The button type to listen for axis changes to control the middle, ring and pinky finger.")]
		public SDK_BaseController.ButtonTypes threeFingerAxisButton;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Finger State Settings")]
		[Tooltip("The Axis Type to utilise when dealing with the thumb state. Not all controllers support all axis types on all of the available buttons.")]
		public VRTK_ControllerEvents.AxisType thumbState;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRTK_ControllerEvents.AxisType indexState;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public VRTK_ControllerEvents.AxisType middleState;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerEvents.AxisType ringState;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public VRTK_ControllerEvents.AxisType pinkyState;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public VRTK_ControllerEvents.AxisType threeFingerState;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Finger axis overrides on an Interact NearTouch event.")]
		[Header("Finger Axis Overrides")]
		public AxisOverrides nearTouchOverrides;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Finger axis overrides on an Interact Touch event.")]
		public AxisOverrides touchOverrides;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Finger axis overrides on an Interact Grab event.")]
		public AxisOverrides grabOverrides;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Finger axis overrides on an Interact Use event.")]
		public AxisOverrides useOverrides;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The Transform that contains the avatar hand model. If this is left blank then a child GameObject named `Model` will be searched for to use as the Transform.")]
		[Header("Custom Settings")]
		public Transform handModel;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The controller to listen for the events on. If this is left blank as it will be auto populated by finding the Controller Events script on the parent GameObject.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("An optional Interact NearTouch to listen for near touch events on. If this is left blank as it will attempt to be auto populated by finding the Interact NearTouch script on the parent GameObject.")]
		public VRTK_InteractNearTouch interactNearTouch;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("An optional Interact Touch to listen for touch events on. If this is left blank as it will attempt to be auto populated by finding the Interact Touch script on the parent GameObject.")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("An optional Interact Grab to listen for grab events on. If this is left blank as it will attempt to be auto populated by finding the Interact Grab script on the parent GameObject.")]
		public VRTK_InteractGrab interactGrab;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("An optional Interact Use to listen for use events on. If this is left blank as it will attempt to be auto populated by finding the Interact Use script on the parent GameObject.")]
		public VRTK_InteractUse interactUse;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Animator animator;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool[] fingerStates;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool[] fingerChangeStates;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected float[] fingerAxis;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float[] fingerRawAxis;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float[] fingerUntouchedAxis;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float[] fingerSaveAxis;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float[] fingerForceAxis;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected OverrideState[] overrideAxisValues;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_ControllerEvents.AxisType[] axisTypes;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected Coroutine[] fingerAnimationRoutine;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected VRTK_ControllerEvents.ButtonAlias savedThumbButtonState;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected VRTK_ControllerEvents.ButtonAlias savedIndexButtonState;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected VRTK_ControllerEvents.ButtonAlias savedMiddleButtonState;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected VRTK_ControllerEvents.ButtonAlias savedRingButtonState;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_ControllerEvents.ButtonAlias savedPinkyButtonState;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected VRTK_ControllerEvents.ButtonAlias savedThreeFingerButtonState;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected SDK_BaseController.ButtonTypes savedThumbAxisButtonState;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		protected SDK_BaseController.ButtonTypes savedIndexAxisButtonState;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected SDK_BaseController.ButtonTypes savedMiddleAxisButtonState;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		protected SDK_BaseController.ButtonTypes savedRingAxisButtonState;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected SDK_BaseController.ButtonTypes savedPinkyAxisButtonState;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		protected SDK_BaseController.ButtonTypes savedThreeFingerAxisButtonState;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_ControllerReference controllerReference;

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xD34AD4", Offset = "0xD34AD4", VA = "0xD34AD4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xD34D98", Offset = "0xD34D98", VA = "0xD34D98", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xD34E18", Offset = "0xD34E18", VA = "0xD34E18", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xD34F30", Offset = "0xD34F30", VA = "0xD34F30", Slot = "7")]
		protected virtual void SubscribeButtonEvent(VRTK_ControllerEvents.ButtonAlias buttonType, ref VRTK_ControllerEvents.ButtonAlias saveType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xD34FA8", Offset = "0xD34FA8", VA = "0xD34FA8", Slot = "8")]
		protected virtual void UnsubscribeButtonEvent(VRTK_ControllerEvents.ButtonAlias buttonType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xD3501C", Offset = "0xD3501C", VA = "0xD3501C", Slot = "9")]
		protected virtual void SubscribeButtonAxisEvent(SDK_BaseController.ButtonTypes buttonType, ref SDK_BaseController.ButtonTypes saveType, VRTK_ControllerEvents.AxisType axisType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xD35050", Offset = "0xD35050", VA = "0xD35050", Slot = "10")]
		protected virtual void UnsubscribeButtonAxisEvent(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerEvents.AxisType axisType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xD35074", Offset = "0xD35074", VA = "0xD35074", Slot = "11")]
		protected virtual void SubscribeEvents()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xD35738", Offset = "0xD35738", VA = "0xD35738", Slot = "12")]
		protected virtual void UnsubscribeEvents()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xD35D9C", Offset = "0xD35D9C", VA = "0xD35D9C", Slot = "13")]
		protected virtual void SetFingerEvent(int fingerIndex, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xD35E1C", Offset = "0xD35E1C", VA = "0xD35E1C", Slot = "14")]
		protected virtual void SetFingerAxisEvent(int fingerIndex, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xD35E94", Offset = "0xD35E94", VA = "0xD35E94", Slot = "15")]
		protected virtual void DoThumbEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xD35ED8", Offset = "0xD35ED8", VA = "0xD35ED8", Slot = "16")]
		protected virtual void DoIndexEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xD35F1C", Offset = "0xD35F1C", VA = "0xD35F1C", Slot = "17")]
		protected virtual void DoMiddleEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xD35F60", Offset = "0xD35F60", VA = "0xD35F60", Slot = "18")]
		protected virtual void DoRingEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xD35FA4", Offset = "0xD35FA4", VA = "0xD35FA4", Slot = "19")]
		protected virtual void DoPinkyEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xD35FE8", Offset = "0xD35FE8", VA = "0xD35FE8", Slot = "20")]
		protected virtual void DoThreeFingerEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xD360B4", Offset = "0xD360B4", VA = "0xD360B4", Slot = "21")]
		protected virtual void DoThumbAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xD360F8", Offset = "0xD360F8", VA = "0xD360F8", Slot = "22")]
		protected virtual void DoIndexAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xD3613C", Offset = "0xD3613C", VA = "0xD3613C", Slot = "23")]
		protected virtual void DoMiddleAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xD36180", Offset = "0xD36180", VA = "0xD36180", Slot = "24")]
		protected virtual void DoRingAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xD361C4", Offset = "0xD361C4", VA = "0xD361C4", Slot = "25")]
		protected virtual void DoPinkyAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xD36208", Offset = "0xD36208", VA = "0xD36208", Slot = "26")]
		protected virtual void DoThreeFingerAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xD362D4", Offset = "0xD362D4", VA = "0xD362D4", Slot = "27")]
		protected virtual bool IsButtonPressed(int arrayIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xD363DC", Offset = "0xD363DC", VA = "0xD363DC", Slot = "28")]
		protected virtual void SaveFingerAxis(int arrayIndex, float updateAxis)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xD36438", Offset = "0xD36438", VA = "0xD36438", Slot = "29")]
		protected virtual void HandleOverrideOn(bool ignoreAllOverrides, float[] givenFingerAxis, bool[] overridePermissions, float[] overrideValues)
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xD365E0", Offset = "0xD365E0", VA = "0xD365E0", Slot = "30")]
		protected virtual void HandleOverrideOff(bool ignoreAllOverrides, bool[] overridePermissions, bool keepOverriding)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xD36720", Offset = "0xD36720", VA = "0xD36720", Slot = "31")]
		protected virtual float CorrectOverrideValue(float givenOverride)
		{
			return default(float);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xD36734", Offset = "0xD36734", VA = "0xD36734", Slot = "32")]
		protected virtual bool ApplyFingerOverrides(AxisOverrides.ApplyOverrideType overrideType, int arrayIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xD36818", Offset = "0xD36818", VA = "0xD36818", Slot = "33")]
		protected virtual bool[] GetOverridePermissions(AxisOverrides overrideType)
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xD36974", Offset = "0xD36974", VA = "0xD36974", Slot = "34")]
		protected virtual float[] GetOverrideValues(AxisOverrides overrideType)
		{
			return null;
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xD36AA8", Offset = "0xD36AA8", VA = "0xD36AA8", Slot = "35")]
		protected virtual void SetAnimatorStateOn(string state, AxisOverrides overrides)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xD36ADC", Offset = "0xD36ADC", VA = "0xD36ADC", Slot = "36")]
		protected virtual void SetAnimatorStateOff(string state)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xD36AFC", Offset = "0xD36AFC", VA = "0xD36AFC", Slot = "37")]
		protected virtual void DoControllerNearTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xD36C50", Offset = "0xD36C50", VA = "0xD36C50", Slot = "38")]
		protected virtual void DoControllerNearUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xD36E4C", Offset = "0xD36E4C", VA = "0xD36E4C", Slot = "39")]
		protected virtual void DoControllerTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xD36F14", Offset = "0xD36F14", VA = "0xD36F14", Slot = "40")]
		protected virtual void DoControllerUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xD3709C", Offset = "0xD3709C", VA = "0xD3709C", Slot = "41")]
		protected virtual void DoControllerGrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xD37218", Offset = "0xD37218", VA = "0xD37218", Slot = "42")]
		protected virtual void DoControllerUngrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xD372B4", Offset = "0xD372B4", VA = "0xD372B4", Slot = "43")]
		protected virtual void DoControllerUse(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xD3741C", Offset = "0xD3741C", VA = "0xD3741C", Slot = "44")]
		protected virtual void DoControllerUnuse(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xD374B4", Offset = "0xD374B4", VA = "0xD374B4", Slot = "45")]
		protected virtual void DetectController()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xD375F8", Offset = "0xD375F8", VA = "0xD375F8", Slot = "46")]
		protected virtual void MirrorHand()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xD3771C", Offset = "0xD3771C", VA = "0xD3771C", Slot = "47")]
		protected virtual void SetOverrideValue(int stateIndex, ref OverrideState[] overrideState, OverrideState stateValue)
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xD3774C", Offset = "0xD3774C", VA = "0xD3774C", Slot = "48")]
		protected virtual void ProcessFinger(VRTK_ControllerEvents.AxisType state, int arrayIndex)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xD37A84", Offset = "0xD37A84", VA = "0xD37A84", Slot = "49")]
		protected virtual void LerpChangePosition(int arrayIndex, float startPosition, float targetPosition, float speed)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xD37B10", Offset = "0xD37B10", VA = "0xD37B10", Slot = "50")]
		[IteratorStateMachine(typeof(<ChangePosition>d__103))]
		protected virtual IEnumerator ChangePosition(int arrayIndex, float startAxis, float targetAxis, float time)
		{
			return null;
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xD37BB8", Offset = "0xD37BB8", VA = "0xD37BB8", Slot = "51")]
		protected virtual void SetFingerPosition(int arrayIndex, float axis)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xD37C6C", Offset = "0xD37C6C", VA = "0xD37C6C")]
		public VRTK_AvatarHandController()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class VRTK_ConsoleViewer : MonoBehaviour
	{
		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The size of the font the log text is displayed in.")]
		public int fontSize;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The colour of the text for an info log message.")]
		public Color infoMessage;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The colour of the text for an assertion log message.")]
		public Color assertMessage;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The colour of the text for a warning log message.")]
		public Color warningMessage;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The colour of the text for an error log message.")]
		public Color errorMessage;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The colour of the text for an exception log message.")]
		public Color exceptionMessage;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Dictionary<LogType, Color> logTypeColors;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected ScrollRect scrollWindow;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected RectTransform consoleRect;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Text consoleOutput;

		[Token(Token = "0x4000B00")]
		protected const string NEWLINE = "\n";

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int lineBuffer;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected int currentBuffer;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected string lastMessage;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool collapseLog;

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xD38010", Offset = "0xD38010", VA = "0xD38010", Slot = "4")]
		public virtual void SetCollapse(bool state)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xD3801C", Offset = "0xD3801C", VA = "0xD3801C", Slot = "5")]
		public virtual void ClearLog()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xD3808C", Offset = "0xD3808C", VA = "0xD3808C", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xD382DC", Offset = "0xD382DC", VA = "0xD382DC", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xD38350", Offset = "0xD38350", VA = "0xD38350", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xD3840C", Offset = "0xD3840C", VA = "0xD3840C", Slot = "9")]
		protected virtual string GetMessage(string message, LogType type)
		{
			return null;
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xD3863C", Offset = "0xD3863C", VA = "0xD3863C", Slot = "10")]
		protected virtual void HandleLog(string message, string stackTrace, LogType type)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xD3887C", Offset = "0xD3887C", VA = "0xD3887C")]
		public VRTK_ConsoleViewer()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public struct ControllerRigidbodyActivatorEventArgs
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_InteractTouch touchingObject;
	}
	[Token(Token = "0x20001F2")]
	public delegate void ControllerRigidbodyActivatorEventHandler(object sender, ControllerRigidbodyActivatorEventArgs e);
	[Token(Token = "0x20001F3")]
	public class VRTK_ControllerRigidbodyActivator : MonoBehaviour
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is checked then the Collider will have it's Rigidbody toggled on and off during a collision.")]
		public bool isEnabled;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If this is checked then the Rigidbody Activator will activate the rigidbody and colliders on the Interact Touch script.")]
		public bool activateInteractTouch;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If this is checked then the Rigidbody Activator will activate the rigidbody and colliders on the Controller Tracked Collider script.")]
		public bool activateTrackedCollider;

		[Token(Token = "0x14000022")]
		public event ControllerRigidbodyActivatorEventHandler ControllerRigidbodyOn
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0xD38ABC", Offset = "0xD38ABC", VA = "0xD38ABC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xD38B58", Offset = "0xD38B58", VA = "0xD38B58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event ControllerRigidbodyActivatorEventHandler ControllerRigidbodyOff
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xD38BF4", Offset = "0xD38BF4", VA = "0xD38BF4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xD38C90", Offset = "0xD38C90", VA = "0xD38C90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xD38D2C", Offset = "0xD38D2C", VA = "0xD38D2C", Slot = "4")]
		public virtual void OnControllerRigidbodyOn(ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xD38D54", Offset = "0xD38D54", VA = "0xD38D54", Slot = "5")]
		public virtual void OnControllerRigidbodyOff(ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xD38D7C", Offset = "0xD38D7C", VA = "0xD38D7C", Slot = "6")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xD38D8C", Offset = "0xD38D8C", VA = "0xD38D8C", Slot = "7")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xD38D9C", Offset = "0xD38D9C", VA = "0xD38D9C", Slot = "8")]
		protected virtual void ToggleRigidbody(Collider collider, bool state)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xD38F38", Offset = "0xD38F38", VA = "0xD38F38", Slot = "9")]
		protected virtual void EmitEvent(bool state, VRTK_InteractTouch touch)
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xD38F84", Offset = "0xD38F84", VA = "0xD38F84")]
		public VRTK_ControllerRigidbodyActivator()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public struct ControllerTooltipsEventArgs
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerTooltips.TooltipButtons element;
	}
	[Token(Token = "0x20001F5")]
	public delegate void ControllerTooltipsEventHandler(object sender, ControllerTooltipsEventArgs e);
	[Token(Token = "0x20001F6")]
	public class VRTK_ControllerTooltips : MonoBehaviour
	{
		[Token(Token = "0x20001F7")]
		public enum TooltipButtons
		{
			[Token(Token = "0x4000B2A")]
			None,
			[Token(Token = "0x4000B2B")]
			TriggerTooltip,
			[Token(Token = "0x4000B2C")]
			GripTooltip,
			[Token(Token = "0x4000B2D")]
			TouchpadTooltip,
			[Token(Token = "0x4000B2E")]
			TouchpadTwoTooltip,
			[Token(Token = "0x4000B2F")]
			ButtonOneTooltip,
			[Token(Token = "0x4000B30")]
			ButtonTwoTooltip,
			[Token(Token = "0x4000B31")]
			StartMenuTooltip
		}

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Button Text Settings")]
		[Tooltip("The text to display for the trigger button action.")]
		public string triggerText;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The text to display for the grip button action.")]
		public string gripText;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The text to display for the touchpad action.")]
		public string touchpadText;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The text to display for the touchpad two action.")]
		public string touchpadTwoText;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The text to display for button one action.")]
		public string buttonOneText;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The text to display for button two action.")]
		public string buttonTwoText;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The text to display for the start menu action.")]
		public string startMenuText;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The colour to use for the tooltip background container.")]
		[Header("Tooltip Colour Settings")]
		public Color tipBackgroundColor;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The colour to use for the text within the tooltip.")]
		public Color tipTextColor;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The colour to use for the line between the tooltip and the relevant controller button.")]
		public Color tipLineColor;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The transform for the position of the trigger button on the controller.")]
		[Header("Button Transform Settings")]
		public Transform trigger;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The transform for the position of the grip button on the controller.")]
		public Transform grip;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The transform for the position of the touchpad button on the controller.")]
		public Transform touchpad;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The transform for the position of the touchpad two button on the controller.")]
		public Transform touchpadTwo;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The transform for the position of button one on the controller.")]
		public Transform buttonOne;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The transform for the position of button two on the controller.")]
		public Transform buttonTwo;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The transform for the position of the start menu on the controller.")]
		public Transform startMenu;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Custom Settings")]
		[Tooltip("The controller to read the controller events from. If this is blank then it will attempt to get a controller events script from the same or parent GameObject.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The headset controller aware script to use to see if the headset is looking at the controller. If this is blank then it will attempt to get a controller events script from the same or parent GameObject.")]
		public VRTK_HeadsetControllerAware headsetControllerAware;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("If this is checked then the tooltips will be hidden when the headset is not looking at the controller.")]
		public bool hideWhenNotInView;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Header("Obsolete Settings")]
		[Obsolete("`VRTK_ControllerTooltips.retryInitMaxTries` has been deprecated as tooltip initialisation now uses the `VRTK_TrackedController.ControllerModelAvailable` event.")]
		[ObsoleteInspector]
		public int retryInitMaxTries;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Obsolete("`VRTK_ControllerTooltips.retryInitCounter` has been deprecated as tooltip initialisation now uses the `VRTK_TrackedController.ControllerModelAvailable` event.")]
		[ObsoleteInspector]
		public float retryInitCounter;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected TooltipButtons[] availableButtons;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected VRTK_ObjectTooltip[] buttonTooltips;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool[] tooltipStates;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected bool overallState;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_TrackedController trackedController;

		[Token(Token = "0x14000024")]
		public event ControllerTooltipsEventHandler ControllerTooltipOn
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0xD3918C", Offset = "0xD3918C", VA = "0xD3918C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0xD39228", Offset = "0xD39228", VA = "0xD39228")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event ControllerTooltipsEventHandler ControllerTooltipOff
		{
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0xD392C4", Offset = "0xD392C4", VA = "0xD392C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xD39360", Offset = "0xD39360", VA = "0xD39360")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xD393FC", Offset = "0xD393FC", VA = "0xD393FC", Slot = "4")]
		public virtual void OnControllerTooltipOn(ControllerTooltipsEventArgs e)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xD39424", Offset = "0xD39424", VA = "0xD39424", Slot = "5")]
		public virtual void OnControllerTooltipOff(ControllerTooltipsEventArgs e)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xD3944C", Offset = "0xD3944C", VA = "0xD3944C", Slot = "6")]
		public virtual void ResetTooltip()
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xD3945C", Offset = "0xD3945C", VA = "0xD3945C", Slot = "7")]
		public virtual void UpdateText(TooltipButtons element, string newText)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xD394DC", Offset = "0xD394DC", VA = "0xD394DC", Slot = "8")]
		public virtual void ToggleTips(bool state, TooltipButtons element = TooltipButtons.None)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xD395E4", Offset = "0xD395E4", VA = "0xD395E4", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xD39650", Offset = "0xD39650", VA = "0xD39650", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xD39730", Offset = "0xD39730", VA = "0xD39730", Slot = "11")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xD399E4", Offset = "0xD399E4", VA = "0xD399E4", Slot = "12")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xD39A3C", Offset = "0xD39A3C", VA = "0xD39A3C", Slot = "13")]
		protected virtual void EmitEvent(bool state, TooltipButtons element)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xD39A5C", Offset = "0xD39A5C", VA = "0xD39A5C", Slot = "14")]
		protected virtual void InitButtonsArray()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xD39C90", Offset = "0xD39C90", VA = "0xD39C90", Slot = "15")]
		protected virtual void InitListeners()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xD3A000", Offset = "0xD3A000", VA = "0xD3A000", Slot = "16")]
		protected virtual void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xD3A10C", Offset = "0xD3A10C", VA = "0xD3A10C", Slot = "17")]
		protected virtual void DoControllerVisible(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xD3A18C", Offset = "0xD3A18C", VA = "0xD3A18C", Slot = "18")]
		protected virtual void DoControllerInvisible(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xD3A238", Offset = "0xD3A238", VA = "0xD3A238", Slot = "19")]
		protected virtual void DoControllerModelAvailable(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xD3A244", Offset = "0xD3A244", VA = "0xD3A244", Slot = "20")]
		protected virtual void TrackedControllerDoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xD3A250", Offset = "0xD3A250", VA = "0xD3A250", Slot = "21")]
		protected virtual void DoGlanceEnterController(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xD3A348", Offset = "0xD3A348", VA = "0xD3A348", Slot = "22")]
		protected virtual void DoGlanceExitController(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xD3A440", Offset = "0xD3A440", VA = "0xD3A440", Slot = "23")]
		protected virtual void InitialiseTips()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xD3A8D8", Offset = "0xD3A8D8", VA = "0xD3A8D8", Slot = "24")]
		protected virtual Transform GetTransform(Transform setTransform, SDK_BaseController.ControllerElements findElement)
		{
			return null;
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xD3AA98", Offset = "0xD3AA98", VA = "0xD3AA98")]
		public VRTK_ControllerTooltips()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	[AddComponentMenu("VRTK/Scripts/Prefabs/VRTK_DesktopCamera")]
	public class VRTK_DesktopCamera : MonoBehaviour
	{
		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Desktop Camera")]
		[Tooltip("The camera to use for the desktop view. If left blank the camera on the game object this script is attached to or any of its children will be used.")]
		public Camera desktopCamera;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The follow script to use for following the headset. If left blank the follow script on the game object this script is attached to or any of its children will be used.")]
		public VRTK_ObjectFollow followScript;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Headset Image")]
		[Tooltip("The optional image to render the headset's view into. Can be left blank.")]
		public RawImage headsetImage;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The optional render texture to render the headset's view into. Can be left blank. If this is blank and `headsetImage` is set a default render texture will be created.")]
		public RenderTexture headsetRenderTexture;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Camera headsetCameraCopy;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_TransformFollow headsetCameraTransformFollow;

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xD3AB94", Offset = "0xD3AB94", VA = "0xD3AB94", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xD3B144", Offset = "0xD3B144", VA = "0xD3B144", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xD3B270", Offset = "0xD3B270", VA = "0xD3B270", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xD3B27C", Offset = "0xD3B27C", VA = "0xD3B27C", Slot = "7")]
		protected virtual void ConfigureForCurrentSDKSetup()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xD3BE2C", Offset = "0xD3BE2C", VA = "0xD3BE2C")]
		public VRTK_DesktopCamera()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public delegate void DestinationPointEventHandler(object sender);
	[Token(Token = "0x20001FA")]
	public class VRTK_DestinationPoint : VRTK_DestinationMarker
	{
		[Token(Token = "0x20001FB")]
		public enum RotationTypes
		{
			[Token(Token = "0x4000B54")]
			NoRotation,
			[Token(Token = "0x4000B55")]
			RotateWithNoHeadsetOffset,
			[Token(Token = "0x4000B56")]
			RotateWithHeadsetOffset
		}

		[Token(Token = "0x20001FC")]
		[CompilerGenerated]
		private sealed class <ManageDestinationMarkersAtEndOfFrame>d__51 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_DestinationPoint <>4__this;

			[Token(Token = "0x17000133")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B05")]
				[Address(RVA = "0xD3E260", Offset = "0xD3E260", VA = "0xD3E260", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000134")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B07")]
				[Address(RVA = "0xD3E2A8", Offset = "0xD3E2A8", VA = "0xD3E2A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B02")]
			[Address(RVA = "0xD3CD4C", Offset = "0xD3CD4C", VA = "0xD3CD4C")]
			[DebuggerHidden]
			public <ManageDestinationMarkersAtEndOfFrame>d__51(int <>1__state)
			{
			}

			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xD3E0B0", Offset = "0xD3E0B0", VA = "0xD3E0B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xD3E0B4", Offset = "0xD3E0B4", VA = "0xD3E0B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B06")]
			[Address(RVA = "0xD3E268", Offset = "0xD3E268", VA = "0xD3E268", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Destination Point Settings")]
		[Tooltip("The GameObject to use to represent the default cursor state.")]
		public GameObject defaultCursorObject;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject to use to represent the hover cursor state.")]
		public GameObject hoverCursorObject;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject to use to represent the locked cursor state.")]
		public GameObject lockedCursorObject;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("An optional transform to determine the destination location for the destination marker. This can be useful to offset the destination location from the destination point. If this is left empty then the destiantion point transform will be used.")]
		public Transform destinationLocation;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If this is checked then after teleporting, the play area will be snapped to the origin of the destination point. If this is false then it's possible to teleport to anywhere within the destination point collider.")]
		public bool snapToPoint;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("If this is checked, then the pointer cursor will be hidden when a valid destination point is hovered over.")]
		public bool hidePointerCursorOnHover;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		[Tooltip("If this is checked, then the pointer direction indicator will be hidden when a valid destination point is hovered over. A pointer direction indicator will always be hidden if snap to rotation is set.")]
		public bool hideDirectionIndicatorOnHover;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Determines if the play area will be rotated to the rotation of the destination point upon the destination marker being set.")]
		public RotationTypes snapToRotation;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Custom Settings")]
		[Tooltip("The scene teleporter that is used. If this is not specified then it will be auto looked up in the scene.")]
		public VRTK_BasicTeleport teleporter;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_DestinationPoint currentDestinationPoint;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Collider pointCollider;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool createdCollider;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Rigidbody pointRigidbody;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool createdRigidbody;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine initaliseListeners;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected bool isActive;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected VRTK_BasePointerRenderer.VisibilityStates storedCursorState;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool storedDirectionIndicatorState;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool currentTeleportState;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool customTeleporter;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform playArea;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Transform headset;

		[Token(Token = "0x14000026")]
		public event DestinationPointEventHandler DestinationPointEnabled
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xD3C078", Offset = "0xD3C078", VA = "0xD3C078")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xD3C114", Offset = "0xD3C114", VA = "0xD3C114")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event DestinationPointEventHandler DestinationPointDisabled
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xD3C1B0", Offset = "0xD3C1B0", VA = "0xD3C1B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xD3C24C", Offset = "0xD3C24C", VA = "0xD3C24C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event DestinationPointEventHandler DestinationPointLocked
		{
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xD3C2E8", Offset = "0xD3C2E8", VA = "0xD3C2E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xD3C384", Offset = "0xD3C384", VA = "0xD3C384")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event DestinationPointEventHandler DestinationPointUnlocked
		{
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xD3C420", Offset = "0xD3C420", VA = "0xD3C420")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xD3C4BC", Offset = "0xD3C4BC", VA = "0xD3C4BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event DestinationPointEventHandler DestinationPointReset
		{
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xD3C558", Offset = "0xD3C558", VA = "0xD3C558")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xD3C5F4", Offset = "0xD3C5F4", VA = "0xD3C5F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xD3C690", Offset = "0xD3C690", VA = "0xD3C690", Slot = "15")]
		public virtual void OnDestinationPointEnabled()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xD3C6B0", Offset = "0xD3C6B0", VA = "0xD3C6B0", Slot = "16")]
		public virtual void OnDestinationPointDisabled()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xD3C6D0", Offset = "0xD3C6D0", VA = "0xD3C6D0", Slot = "17")]
		public virtual void OnDestinationPointLocked()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xD3C6F0", Offset = "0xD3C6F0", VA = "0xD3C6F0", Slot = "18")]
		public virtual void OnDestinationPointUnlocked()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xD3C710", Offset = "0xD3C710", VA = "0xD3C710", Slot = "19")]
		public virtual void OnDestinationPointReset()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xD3C730", Offset = "0xD3C730", VA = "0xD3C730", Slot = "20")]
		public virtual void ResetDestinationPoint()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xD3C740", Offset = "0xD3C740", VA = "0xD3C740", Slot = "21")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xD3C798", Offset = "0xD3C798", VA = "0xD3C798", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xD3C914", Offset = "0xD3C914", VA = "0xD3C914", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xD3CA30", Offset = "0xD3CA30", VA = "0xD3CA30", Slot = "22")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xD3CA88", Offset = "0xD3CA88", VA = "0xD3CA88", Slot = "23")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xD3CAC4", Offset = "0xD3CAC4", VA = "0xD3CAC4", Slot = "24")]
		protected virtual void CreateColliderIfRequired()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xD3CBC4", Offset = "0xD3CBC4", VA = "0xD3CBC4", Slot = "25")]
		protected virtual void SetupRigidbody()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xD3CCD8", Offset = "0xD3CCD8", VA = "0xD3CCD8", Slot = "26")]
		[IteratorStateMachine(typeof(<ManageDestinationMarkersAtEndOfFrame>d__51))]
		protected virtual IEnumerator ManageDestinationMarkersAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xD3CD74", Offset = "0xD3CD74", VA = "0xD3CD74", Slot = "27")]
		protected virtual void ManageDestinationMarkers(bool state)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xD3CEE8", Offset = "0xD3CEE8", VA = "0xD3CEE8", Slot = "28")]
		protected virtual void ManageDestinationMarkerListeners(GameObject markerMaker, bool register)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xD3D124", Offset = "0xD3D124", VA = "0xD3D124", Slot = "29")]
		protected virtual void DoDestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xD3D3EC", Offset = "0xD3D3EC", VA = "0xD3D3EC", Slot = "30")]
		protected virtual void DoDestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xD3D64C", Offset = "0xD3D64C", VA = "0xD3D64C", Slot = "31")]
		protected virtual void DoDestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xD3D900", Offset = "0xD3D900", VA = "0xD3D900", Slot = "32")]
		protected virtual void ToggleCursor(object sender, bool state)
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xD3DAB4", Offset = "0xD3DAB4", VA = "0xD3DAB4", Slot = "33")]
		protected virtual void TogglePointerCursor(VRTK_BasePointerRenderer pointerRenderer, bool state)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xD3DAF4", Offset = "0xD3DAF4", VA = "0xD3DAF4", Slot = "34")]
		protected virtual void ToggleDirectionIndicator(VRTK_BasePointerRenderer pointerRenderer, bool state)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xD3DBA4", Offset = "0xD3DBA4", VA = "0xD3DBA4", Slot = "35")]
		protected virtual void EnablePoint()
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xD3DC14", Offset = "0xD3DC14", VA = "0xD3DC14", Slot = "36")]
		protected virtual void SetColliderState(bool state)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xD3DCAC", Offset = "0xD3DCAC", VA = "0xD3DCAC", Slot = "37")]
		protected virtual void DisablePoint()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xD3DD34", Offset = "0xD3DD34", VA = "0xD3DD34", Slot = "38")]
		protected virtual void ResetPoint()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xD3DEB8", Offset = "0xD3DEB8", VA = "0xD3DEB8", Slot = "39")]
		protected virtual void ToggleObject(GameObject givenObject, bool state)
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xD3DF4C", Offset = "0xD3DF4C", VA = "0xD3DF4C", Slot = "40")]
		protected virtual Quaternion? GetRotation()
		{
			return null;
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xD3E0A0", Offset = "0xD3E0A0", VA = "0xD3E0A0")]
		public VRTK_DestinationPoint()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class VRTK_FramesPerSecondViewer : MonoBehaviour
	{
		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Toggles whether the FPS text is visible.")]
		public bool displayFPS;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The frames per second deemed acceptable that is used as the benchmark to change the FPS text colour.")]
		public int targetFPS;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The size of the font the FPS is displayed in.")]
		public int fontSize;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The position of the FPS text within the headset view.")]
		public Vector3 position;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The colour of the FPS text when the frames per second are within reasonable limits of the Target FPS.")]
		public Color goodColor;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The colour of the FPS text when the frames per second are falling short of reasonable limits of the Target FPS.")]
		public Color warnColor;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The colour of the FPS text when the frames per second are at an unreasonable level of the Target FPS.")]
		public Color badColor;

		[Token(Token = "0x4000B61")]
		protected const float updateInterval = 0.5f;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected int framesCount;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float framesTime;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Canvas canvas;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Text text;

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xD3E2B0", Offset = "0xD3E2B0", VA = "0xD3E2B0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xD3E358", Offset = "0xD3E358", VA = "0xD3E358", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xD3E418", Offset = "0xD3E418", VA = "0xD3E418", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xD3E5F8", Offset = "0xD3E5F8", VA = "0xD3E5F8", Slot = "7")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xD3E6C4", Offset = "0xD3E6C4", VA = "0xD3E6C4", Slot = "8")]
		protected virtual void InitCanvas()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xD3E82C", Offset = "0xD3E82C", VA = "0xD3E82C", Slot = "9")]
		protected virtual void SetCanvasCamera()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xD3E90C", Offset = "0xD3E90C", VA = "0xD3E90C")]
		public VRTK_FramesPerSecondViewer()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public struct ObjectTooltipEventArgs
	{
		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string newText;
	}
	[Token(Token = "0x20001FF")]
	public delegate void ObjectTooltipEventHandler(object sender, ObjectTooltipEventArgs e);
	[Token(Token = "0x2000200")]
	public class VRTK_ObjectTooltip : MonoBehaviour
	{
		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The text that is displayed on the tooltip.")]
		public string displayText;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The size of the text that is displayed.")]
		public int fontSize;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The size of the tooltip container where `x = width` and `y = height`.")]
		public Vector2 containerSize;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("An optional transform of where to start drawing the line from. If one is not provided the centre of the tooltip is used for the initial line position.")]
		public Transform drawLineFrom;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A transform of another object in the scene that a line will be drawn from the tooltip to, this helps denote what the tooltip is in relation to. If no transform is provided and the tooltip is a child of another object, then the parent object's transform will be used as this destination position.")]
		public Transform drawLineTo;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The width of the line drawn between the tooltip and the destination transform.")]
		public float lineWidth;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The colour to use for the text on the tooltip.")]
		public Color fontColor;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The colour to use for the background container of the tooltip.")]
		public Color containerColor;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The colour to use for the line drawn between the tooltip and the destination transform.")]
		public Color lineColor;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If this is checked then the tooltip will be rotated so it always face the headset.")]
		public bool alwaysFaceHeadset;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected LineRenderer line;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Transform headset;

		[Token(Token = "0x1400002B")]
		public event ObjectTooltipEventHandler ObjectTooltipReset
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xD3EB8C", Offset = "0xD3EB8C", VA = "0xD3EB8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xD3EC28", Offset = "0xD3EC28", VA = "0xD3EC28")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event ObjectTooltipEventHandler ObjectTooltipTextUpdated
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xD3ECC4", Offset = "0xD3ECC4", VA = "0xD3ECC4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xD3ED60", Offset = "0xD3ED60", VA = "0xD3ED60")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xD3EDFC", Offset = "0xD3EDFC", VA = "0xD3EDFC", Slot = "4")]
		public virtual void OnObjectTooltipReset(ObjectTooltipEventArgs e)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xD3EE24", Offset = "0xD3EE24", VA = "0xD3EE24", Slot = "5")]
		public virtual void OnObjectTooltipTextUpdated(ObjectTooltipEventArgs e)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xD3EE4C", Offset = "0xD3EE4C", VA = "0xD3EE4C", Slot = "6")]
		public virtual void ResetTooltip()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xD3EFE8", Offset = "0xD3EFE8", VA = "0xD3EFE8", Slot = "7")]
		public virtual void UpdateText(string newText)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xD3F040", Offset = "0xD3F040", VA = "0xD3F040", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xD3F098", Offset = "0xD3F098", VA = "0xD3F098", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xD3F10C", Offset = "0xD3F10C", VA = "0xD3F10C", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xD3F164", Offset = "0xD3F164", VA = "0xD3F164", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xD3F1B0", Offset = "0xD3F1B0", VA = "0xD3F1B0", Slot = "12")]
		protected virtual ObjectTooltipEventArgs SetEventPayload(string newText = "")
		{
			return default(ObjectTooltipEventArgs);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xD3F1CC", Offset = "0xD3F1CC", VA = "0xD3F1CC", Slot = "13")]
		protected virtual void SetContainer()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xD3F2E4", Offset = "0xD3F2E4", VA = "0xD3F2E4", Slot = "14")]
		protected virtual void SetText(string name)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xD3F498", Offset = "0xD3F498", VA = "0xD3F498", Slot = "15")]
		protected virtual void SetLine()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xD3F698", Offset = "0xD3F698", VA = "0xD3F698", Slot = "16")]
		protected virtual void DrawLine()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xD3F75C", Offset = "0xD3F75C", VA = "0xD3F75C")]
		public VRTK_ObjectTooltip()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class VRTK_PanelMenuController : MonoBehaviour
	{
		[Token(Token = "0x2000202")]
		public enum TouchpadPressPosition
		{
			[Token(Token = "0x4000B8F")]
			None,
			[Token(Token = "0x4000B90")]
			Top,
			[Token(Token = "0x4000B91")]
			Bottom,
			[Token(Token = "0x4000B92")]
			Left,
			[Token(Token = "0x4000B93")]
			Right
		}

		[Token(Token = "0x2000203")]
		[CompilerGenerated]
		private sealed class <TweenMenuScale>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool show;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_PanelMenuController <>4__this;

			[Token(Token = "0x4000B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <targetScale>5__2;

			[Token(Token = "0x4000B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <direction>5__3;

			[Token(Token = "0x4000B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__4;

			[Token(Token = "0x17000135")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B49")]
				[Address(RVA = "0xD41754", Offset = "0xD41754", VA = "0xD41754", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B4B")]
				[Address(RVA = "0xD4179C", Offset = "0xD4179C", VA = "0xD4179C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B46")]
			[Address(RVA = "0xD409B0", Offset = "0xD409B0", VA = "0xD409B0")]
			[DebuggerHidden]
			public <TweenMenuScale>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6000B47")]
			[Address(RVA = "0xD41448", Offset = "0xD41448", VA = "0xD41448", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xD4144C", Offset = "0xD4144C", VA = "0xD4144C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0xD4175C", Offset = "0xD4175C", VA = "0xD4175C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject the panel should rotate towards, which is the Camera (eye) by default.")]
		public GameObject rotateTowards;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The scale multiplier, which relates to the scale of parent interactable object.")]
		public float zoomScaleMultiplier;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The top PanelMenuItemController, which is triggered by pressing up on the controller touchpad.")]
		public VRTK_PanelMenuItemController topPanelMenuItemController;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The bottom PanelMenuItemController, which is triggered by pressing down on the controller touchpad.")]
		public VRTK_PanelMenuItemController bottomPanelMenuItemController;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The left PanelMenuItemController, which is triggered by pressing left on the controller touchpad.")]
		public VRTK_PanelMenuItemController leftPanelMenuItemController;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The right PanelMenuItemController, which is triggered by pressing right on the controller touchpad.")]
		public VRTK_PanelMenuItemController rightPanelMenuItemController;

		[Token(Token = "0x4000B7B")]
		protected const float CanvasScaleSize = 0.001f;

		[Token(Token = "0x4000B7C")]
		protected const float AngleTolerance = 30f;

		[Token(Token = "0x4000B7D")]
		protected const float SwipeMinDist = 0.2f;

		[Token(Token = "0x4000B7E")]
		protected const float SwipeMinVelocity = 4f;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_PanelMenuItemController currentPanelMenuItemController;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject interactableObject;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject canvasObject;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected readonly Vector2 xAxis;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected readonly Vector2 yAxis;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector2 touchStartPosition;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector2 touchEndPosition;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float touchStartTime;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float currentAngle;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool isTrackingSwipe;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		protected bool isPendingSwipeCheck;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool isGrabbed;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		protected bool isShown;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Coroutine tweenMenuScaleRoutine;

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xD3F79C", Offset = "0xD3F79C", VA = "0xD3F79C", Slot = "4")]
		public virtual void ToggleMenu()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xD3F7BC", Offset = "0xD3F7BC", VA = "0xD3F7BC", Slot = "5")]
		public virtual void ShowMenu()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xD3F7E4", Offset = "0xD3F7E4", VA = "0xD3F7E4", Slot = "6")]
		public virtual void HideMenu(bool force)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xD3F80C", Offset = "0xD3F80C", VA = "0xD3F80C", Slot = "7")]
		public virtual void HideMenuImmediate()
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xD3F94C", Offset = "0xD3F94C", VA = "0xD3F94C", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xD3F9B4", Offset = "0xD3F9B4", VA = "0xD3F9B4", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xD3FEA0", Offset = "0xD3FEA0", VA = "0xD3FEA0", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xD3FEF8", Offset = "0xD3FEF8", VA = "0xD3FEF8", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xD402C4", Offset = "0xD402C4", VA = "0xD402C4", Slot = "12")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xD40468", Offset = "0xD40468", VA = "0xD40468", Slot = "13")]
		protected virtual void BindControllerEvents()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xD405DC", Offset = "0xD405DC", VA = "0xD405DC", Slot = "14")]
		protected virtual void UnbindControllerEvents()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xD40750", Offset = "0xD40750", VA = "0xD40750", Slot = "15")]
		protected virtual void HandlePanelMenuItemControllerVisibility(VRTK_PanelMenuItemController targetPanelItemController)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xD408A0", Offset = "0xD408A0", VA = "0xD408A0", Slot = "16")]
		protected virtual void InitTweenMenuScale(bool show)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xD40928", Offset = "0xD40928", VA = "0xD40928", Slot = "17")]
		[IteratorStateMachine(typeof(<TweenMenuScale>d__39))]
		protected virtual IEnumerator TweenMenuScale(bool show)
		{
			return null;
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xD409D8", Offset = "0xD409D8", VA = "0xD409D8", Slot = "18")]
		protected virtual void DoInteractableObjectIsGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xD40A9C", Offset = "0xD40A9C", VA = "0xD40A9C", Slot = "19")]
		protected virtual void DoInteractableObjectIsUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xD40B5C", Offset = "0xD40B5C", VA = "0xD40B5C", Slot = "20")]
		protected virtual void DoTouchpadPress(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xD40CC0", Offset = "0xD40CC0", VA = "0xD40CC0", Slot = "21")]
		protected virtual void DoTouchpadTouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xD40CEC", Offset = "0xD40CEC", VA = "0xD40CEC", Slot = "22")]
		protected virtual void DoTouchpadUntouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xD40CF8", Offset = "0xD40CF8", VA = "0xD40CF8", Slot = "23")]
		protected virtual void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xD40D70", Offset = "0xD40D70", VA = "0xD40D70", Slot = "24")]
		protected virtual void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xD40D8C", Offset = "0xD40D8C", VA = "0xD40D8C", Slot = "25")]
		protected virtual void ChangeAngle(float angle, [Optional] object sender)
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xD40D94", Offset = "0xD40D94", VA = "0xD40D94", Slot = "26")]
		protected virtual void CalculateSwipeAction()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xD40FD4", Offset = "0xD40FD4", VA = "0xD40FD4", Slot = "27")]
		protected virtual TouchpadPressPosition CalculateTouchpadPressPosition()
		{
			return default(TouchpadPressPosition);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xD4109C", Offset = "0xD4109C", VA = "0xD4109C", Slot = "28")]
		protected virtual void OnSwipeLeft()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xD4112C", Offset = "0xD4112C", VA = "0xD4112C", Slot = "29")]
		protected virtual void OnSwipeRight()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xD411BC", Offset = "0xD411BC", VA = "0xD411BC", Slot = "30")]
		protected virtual void OnSwipeTop()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xD4124C", Offset = "0xD4124C", VA = "0xD4124C", Slot = "31")]
		protected virtual void OnSwipeBottom()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xD412DC", Offset = "0xD412DC", VA = "0xD412DC", Slot = "32")]
		protected virtual void OnTriggerPressed()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xD4136C", Offset = "0xD4136C", VA = "0xD4136C", Slot = "33")]
		protected virtual float CalculateAngle(ControllerInteractionEventArgs e)
		{
			return default(float);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xD41374", Offset = "0xD41374", VA = "0xD41374", Slot = "34")]
		protected virtual float NormAngle(float currentDegree, float maxAngle = 360f)
		{
			return default(float);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xD41384", Offset = "0xD41384", VA = "0xD41384", Slot = "35")]
		protected virtual bool CheckAnglePosition(float currentDegree, float tolerance, float targetDegree)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xD4142C", Offset = "0xD4142C", VA = "0xD4142C")]
		public VRTK_PanelMenuController()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public struct PanelMenuItemControllerEventArgs
	{
		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactableObject;
	}
	[Token(Token = "0x2000205")]
	public delegate void PanelMenuItemControllerEventHandler(object sender, PanelMenuItemControllerEventArgs e);
	[Token(Token = "0x2000206")]
	public class VRTK_PanelMenuItemController : MonoBehaviour
	{
		[Token(Token = "0x1400002D")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemShowing
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xD41994", Offset = "0xD41994", VA = "0xD41994")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0xD41A30", Offset = "0xD41A30", VA = "0xD41A30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002E")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemHiding
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xD41ACC", Offset = "0xD41ACC", VA = "0xD41ACC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xD41B68", Offset = "0xD41B68", VA = "0xD41B68")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeLeft
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xD41C04", Offset = "0xD41C04", VA = "0xD41C04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xD41CA0", Offset = "0xD41CA0", VA = "0xD41CA0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000030")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeRight
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xD41D3C", Offset = "0xD41D3C", VA = "0xD41D3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xD41DD8", Offset = "0xD41DD8", VA = "0xD41DD8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeTop
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xD41E74", Offset = "0xD41E74", VA = "0xD41E74")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xD41F10", Offset = "0xD41F10", VA = "0xD41F10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeBottom
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xD41FAC", Offset = "0xD41FAC", VA = "0xD41FAC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xD42048", Offset = "0xD42048", VA = "0xD42048")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event PanelMenuItemControllerEventHandler PanelMenuItemTriggerPressed
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0xD420E4", Offset = "0xD420E4", VA = "0xD420E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0xD42180", Offset = "0xD42180", VA = "0xD42180")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xD4221C", Offset = "0xD4221C", VA = "0xD4221C", Slot = "4")]
		public virtual void OnPanelMenuItemShowing(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xD42244", Offset = "0xD42244", VA = "0xD42244", Slot = "5")]
		public virtual void OnPanelMenuItemHiding(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xD4226C", Offset = "0xD4226C", VA = "0xD4226C", Slot = "6")]
		public virtual void OnPanelMenuItemSwipeLeft(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xD42294", Offset = "0xD42294", VA = "0xD42294", Slot = "7")]
		public virtual void OnPanelMenuItemSwipeRight(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xD422BC", Offset = "0xD422BC", VA = "0xD422BC", Slot = "8")]
		public virtual void OnPanelMenuItemSwipeTop(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xD422E4", Offset = "0xD422E4", VA = "0xD422E4", Slot = "9")]
		public virtual void OnPanelMenuItemSwipeBottom(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xD4230C", Offset = "0xD4230C", VA = "0xD4230C", Slot = "10")]
		public virtual PanelMenuItemControllerEventArgs SetPanelMenuItemEvent(GameObject interactableObject)
		{
			return default(PanelMenuItemControllerEventArgs);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xD42328", Offset = "0xD42328", VA = "0xD42328", Slot = "11")]
		public virtual void Show(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xD42384", Offset = "0xD42384", VA = "0xD42384", Slot = "12")]
		public virtual void Hide(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xD423E0", Offset = "0xD423E0", VA = "0xD423E0", Slot = "13")]
		public virtual void SwipeLeft(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xD4240C", Offset = "0xD4240C", VA = "0xD4240C", Slot = "14")]
		public virtual void SwipeRight(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xD42438", Offset = "0xD42438", VA = "0xD42438", Slot = "15")]
		public virtual void SwipeTop(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xD42464", Offset = "0xD42464", VA = "0xD42464", Slot = "16")]
		public virtual void SwipeBottom(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xD42490", Offset = "0xD42490", VA = "0xD42490", Slot = "17")]
		public virtual void TriggerPressed(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xD424C0", Offset = "0xD424C0", VA = "0xD424C0", Slot = "18")]
		protected virtual void OnPanelMenuItemTriggerPressed(PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xD424E8", Offset = "0xD424E8", VA = "0xD424E8")]
		public VRTK_PanelMenuItemController()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public delegate void PointerDirectionIndicatorEventHandler(object sender);
	[Token(Token = "0x2000208")]
	public class VRTK_PointerDirectionIndicator : MonoBehaviour
	{
		[Token(Token = "0x2000209")]
		public enum VisibilityState
		{
			[Token(Token = "0x4000BB1")]
			OnWhenPointerActive,
			[Token(Token = "0x4000BB2")]
			AlwaysOnWithPointerCursor
		}

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Control Settings")]
		[Tooltip("The touchpad axis needs to be above this deadzone for it to register as a valid touchpad angle.")]
		public Vector2 touchpadDeadzone;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The axis to use for the direction coordinates.")]
		public VRTK_ControllerEvents.Vector2AxisAlias coordinateAxis;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Appearance Settings")]
		[Tooltip("If this is checked then the reported rotation will include the offset of the headset rotation in relation to the play area.")]
		public bool includeHeadsetOffset;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("If this is checked then the direction indicator will be displayed when the location is invalid.")]
		public bool displayOnInvalidLocation;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[Tooltip("If this is checked then the pointer valid/invalid colours will also be used to change the colour of the direction indicator.")]
		public bool usePointerColor;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Determines when the direction indicator will be visible.")]
		public VisibilityState indicatorVisibility;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public bool isActive;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform playArea;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform headset;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject validLocation;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject invalidLocation;

		[Token(Token = "0x14000034")]
		public event PointerDirectionIndicatorEventHandler PointerDirectionIndicatorPositionSet
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0xD4266C", Offset = "0xD4266C", VA = "0xD4266C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0xD42708", Offset = "0xD42708", VA = "0xD42708")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xD427A4", Offset = "0xD427A4", VA = "0xD427A4", Slot = "4")]
		public virtual void OnPointerDirectionIndicatorPositionSet()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xD427C4", Offset = "0xD427C4", VA = "0xD427C4", Slot = "5")]
		public virtual void Initialize(VRTK_ControllerEvents events)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xD4285C", Offset = "0xD4285C", VA = "0xD4285C", Slot = "6")]
		public virtual void SetPosition(bool active, Vector3 position)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xD428E8", Offset = "0xD428E8", VA = "0xD428E8", Slot = "7")]
		public virtual Quaternion GetRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xD42970", Offset = "0xD42970", VA = "0xD42970", Slot = "8")]
		public virtual void SetMaterialColor(Color color, bool validity)
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xD42AF4", Offset = "0xD42AF4", VA = "0xD42AF4", Slot = "9")]
		public virtual VRTK_ControllerEvents GetControllerEvents()
		{
			return null;
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xD42AFC", Offset = "0xD42AFC", VA = "0xD42AFC", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xD42BDC", Offset = "0xD42BDC", VA = "0xD42BDC", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xD42D24", Offset = "0xD42D24", VA = "0xD42D24", Slot = "12")]
		protected virtual bool InsideDeadzone(Vector2 currentAxis)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xD42DD4", Offset = "0xD42DD4", VA = "0xD42DD4")]
		public VRTK_PointerDirectionIndicator()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class RadialButtonIcon : MonoBehaviour
	{
		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xD42E40", Offset = "0xD42E40", VA = "0xD42E40")]
		public RadialButtonIcon()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[ExecuteInEditMode]
	public class UICircle : Graphic
	{
		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 100f)]
		public int fillPercent;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool fill;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int thickness;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 360f)]
		public int segments;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		protected Texture setTexture;

		[Token(Token = "0x17000137")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xD42E48", Offset = "0xD42E48", VA = "0xD42E48", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000138")]
		public Texture texture
		{
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xD42EE4", Offset = "0xD42EE4", VA = "0xD42EE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0xD42EEC", Offset = "0xD42EEC", VA = "0xD42EEC")]
			set
			{
			}
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xD42FA8", Offset = "0xD42FA8", VA = "0xD42FA8", Slot = "50")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xD4303C", Offset = "0xD4303C", VA = "0xD4303C", Slot = "51")]
		protected virtual UIVertex[] SetVbo(Vector2[] vertices, Vector2[] uvs)
		{
			return null;
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xD434AC", Offset = "0xD434AC", VA = "0xD434AC", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xD43818", Offset = "0xD43818", VA = "0xD43818")]
		public UICircle()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class VRTK_IndependentRadialMenuController : VRTK_RadialMenuController
	{
		[Token(Token = "0x200020D")]
		[CompilerGenerated]
		private sealed class <DelayedSetColliderEnabled>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_IndependentRadialMenuController <>4__this;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool enabled;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public InteractableObjectEventArgs e;

			[Token(Token = "0x17000139")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B9D")]
				[Address(RVA = "0xD459F0", Offset = "0xD459F0", VA = "0xD459F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B9F")]
				[Address(RVA = "0xD45A38", Offset = "0xD45A38", VA = "0xD45A38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0xD457EC", Offset = "0xD457EC", VA = "0xD457EC")]
			[DebuggerHidden]
			public <DelayedSetColliderEnabled>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000B9B")]
			[Address(RVA = "0xD45920", Offset = "0xD45920", VA = "0xD45920", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B9C")]
			[Address(RVA = "0xD45924", Offset = "0xD45924", VA = "0xD45924", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xD459F8", Offset = "0xD459F8", VA = "0xD459F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If the RadialMenu is the child of an object with VRTK_InteractableObject attached, this will be automatically obtained. It can also be manually set.")]
		public VRTK_InteractableObject eventsManager;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Whether or not the script should dynamically add a SphereCollider to surround the menu.")]
		public bool addMenuCollider;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("This times the size of the RadialMenu is the size of the collider.")]
		[Range(0f, 10f)]
		public float colliderRadiusMultiplier;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true, after a button is clicked, the RadialMenu will hide.")]
		public bool hideAfterExecution;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(-10f, 10f)]
		[Tooltip("How far away from the object the menu should be placed, relative to the size of the RadialMenu.")]
		public float offsetMultiplier;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The object the RadialMenu should face towards. If left empty, it will automatically try to find the Headset Camera.")]
		public GameObject rotateTowards;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<GameObject> interactingObjects;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected HashSet<GameObject> collidingObjects;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected SphereCollider menuCollider;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Coroutine delayedSetColliderEnabledRoutine;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 desiredColliderCenter;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Quaternion initialRotation;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool isClicked;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool waitingToDisableCollider;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int counter;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xD43884", Offset = "0xD43884", VA = "0xD43884", Slot = "20")]
		public virtual void UpdateEventsManager()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xD43BD8", Offset = "0xD43BD8", VA = "0xD43BD8", Slot = "5")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xD4413C", Offset = "0xD4413C", VA = "0xD4413C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xD441CC", Offset = "0xD441CC", VA = "0xD441CC", Slot = "21")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xD441D8", Offset = "0xD441D8", VA = "0xD441D8", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xD44520", Offset = "0xD44520", VA = "0xD44520", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xD44788", Offset = "0xD44788", VA = "0xD44788", Slot = "22")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xD447E0", Offset = "0xD447E0", VA = "0xD447E0", Slot = "23")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xD44C5C", Offset = "0xD44C5C", VA = "0xD44C5C", Slot = "24")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xD44CA8", Offset = "0xD44CA8", VA = "0xD44CA8", Slot = "13")]
		protected override void AttemptHapticPulse(float strength)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xD44D74", Offset = "0xD44D74", VA = "0xD44D74", Slot = "25")]
		protected virtual void ObjectClicked(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xD44DE0", Offset = "0xD44DE0", VA = "0xD44DE0", Slot = "26")]
		protected virtual void ObjectUnClicked(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xD44EA4", Offset = "0xD44EA4", VA = "0xD44EA4", Slot = "27")]
		protected virtual void ObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xD44FE0", Offset = "0xD44FE0", VA = "0xD44FE0", Slot = "28")]
		protected virtual void ObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xD451A0", Offset = "0xD451A0", VA = "0xD451A0", Slot = "29")]
		protected virtual TouchAngleDeflection CalculateAngle(GameObject interactingObject)
		{
			return default(TouchAngleDeflection);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xD453F4", Offset = "0xD453F4", VA = "0xD453F4", Slot = "30")]
		protected virtual float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xD45464", Offset = "0xD45464", VA = "0xD45464", Slot = "31")]
		protected virtual void ImmediatelyHideMenu(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xD454C4", Offset = "0xD454C4", VA = "0xD454C4", Slot = "32")]
		protected virtual void SetColliderState(bool state, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xD45740", Offset = "0xD45740", VA = "0xD45740", Slot = "33")]
		[IteratorStateMachine(typeof(<DelayedSetColliderEnabled>d__33))]
		protected virtual IEnumerator DelayedSetColliderEnabled(bool enabled, float delay, InteractableObjectEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xD45814", Offset = "0xD45814", VA = "0xD45814")]
		public VRTK_IndependentRadialMenuController()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public struct TouchAngleDeflection
	{
		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float angle;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float deflection;

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xD453EC", Offset = "0xD453EC", VA = "0xD453EC")]
		public TouchAngleDeflection(float angle, float deflection)
		{
		}
	}
	[Token(Token = "0x200020F")]
	public delegate void HapticPulseEventHandler(float strength);
	[Token(Token = "0x2000210")]
	[ExecuteInEditMode]
	public class VRTK_RadialMenu : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000211")]
		public class RadialMenuButton
		{
			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Sprite ButtonIcon;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEvent OnClick;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEvent OnHold;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEvent OnHoverEnter;

			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public UnityEvent OnHoverExit;

			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xD4707C", Offset = "0xD4707C", VA = "0xD4707C")]
			public RadialMenuButton()
			{
			}
		}

		[Token(Token = "0x2000212")]
		public enum ButtonEvent
		{
			[Token(Token = "0x4000BE8")]
			hoverOn,
			[Token(Token = "0x4000BE9")]
			hoverOff,
			[Token(Token = "0x4000BEA")]
			click,
			[Token(Token = "0x4000BEB")]
			unclick
		}

		[Token(Token = "0x2000213")]
		[CompilerGenerated]
		private sealed class <TweenMenuScale>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool show;

			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_RadialMenu <>4__this;

			[Token(Token = "0x4000BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <targetScale>5__2;

			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <Dir>5__3;

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__4;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BC0")]
				[Address(RVA = "0xD473B8", Offset = "0xD473B8", VA = "0xD473B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BC2")]
				[Address(RVA = "0xD47400", Offset = "0xD47400", VA = "0xD47400", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xD46E2C", Offset = "0xD46E2C", VA = "0xD46E2C")]
			[DebuggerHidden]
			public <TweenMenuScale>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0xD47168", Offset = "0xD47168", VA = "0xD47168", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0xD4716C", Offset = "0xD4716C", VA = "0xD4716C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xD473C0", Offset = "0xD473C0", VA = "0xD473C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("An array of Buttons that define the interactive buttons required to be displayed as part of the radial menu.")]
		public List<RadialMenuButton> buttons;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The base for each button in the menu, by default set to a dynamic circle arc that will fill up a portion of the menu.")]
		public GameObject buttonPrefab;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If checked, then the buttons will be auto generated on awake.")]
		public bool generateOnAwake;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Percentage of the menu the buttons should fill, 1.0 is a pie slice, 0.1 is a thin ring.")]
		[Range(0f, 1f)]
		public float buttonThickness;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The background colour of the buttons, default is white.")]
		public Color buttonColor;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The distance the buttons should move away from the centre. This creates space between the individual buttons.")]
		public float offsetDistance;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The additional rotation of the Radial Menu.")]
		[Range(0f, 359f)]
		public float offsetRotation;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Whether button icons should rotate according to their arc or be vertical compared to the controller.")]
		public bool rotateIcons;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The margin in pixels that the icon should keep within the button.")]
		public float iconMargin;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Whether the buttons are shown")]
		public bool isShown;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Whether the buttons should be visible when not in use.")]
		public bool hideOnRelease;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[Tooltip("Whether the button action should happen when the button is released, as opposed to happening immediately when the button is pressed.")]
		public bool executeOnUnclick;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		[Tooltip("The base strength of the haptic pulses when the selected button is changed, or a button is pressed. Set to zero to disable.")]
		public float baseHapticStrength;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[Tooltip("The dead zone in the middle of the dial where the menu does not consider a button is selected. Set to zero to disable.")]
		public float deadZone;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The actual GameObjects that make up the radial menu.")]
		public List<GameObject> menuButtons;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected int currentHover;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected int currentPress;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Coroutine tweenMenuScaleRoutine;

		[Token(Token = "0x14000035")]
		public event HapticPulseEventHandler FireHapticPulse
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xD44484", Offset = "0xD44484", VA = "0xD44484")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xD446EC", Offset = "0xD446EC", VA = "0xD446EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xD45AE4", Offset = "0xD45AE4", VA = "0xD45AE4", Slot = "4")]
		[Obsolete("`VRTK_RadialMenu.HoverButton(float)` has been replaced with `VRTK_RadialMenu.HoverButton(TouchAngleDeflection)`. This method will be removed in a future version of VRTK.")]
		public virtual void HoverButton(float angle)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xD45AF4", Offset = "0xD45AF4", VA = "0xD45AF4", Slot = "5")]
		public virtual void HoverButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xD45B08", Offset = "0xD45B08", VA = "0xD45B08", Slot = "6")]
		[Obsolete("`VRTK_RadialMenu.ClickButton(float)` has been replaced with `VRTK_RadialMenu.ClickButton(TouchAngleDeflection)`. This method will be removed in a future version of VRTK.")]
		public virtual void ClickButton(float angle)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xD45B18", Offset = "0xD45B18", VA = "0xD45B18", Slot = "7")]
		public virtual void ClickButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xD45B2C", Offset = "0xD45B2C", VA = "0xD45B2C", Slot = "8")]
		[Obsolete("`VRTK_RadialMenu.UnClickButton(float)` has been replaced with `VRTK_RadialMenu.UnClickButton(TouchAngleDeflection)`. This method will be removed in a future version of VRTK.")]
		public virtual void UnClickButton(float angle)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xD45B3C", Offset = "0xD45B3C", VA = "0xD45B3C", Slot = "9")]
		public virtual void UnClickButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xD45B50", Offset = "0xD45B50", VA = "0xD45B50", Slot = "10")]
		public virtual void ToggleMenu()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xD45B74", Offset = "0xD45B74", VA = "0xD45B74", Slot = "11")]
		public virtual void StopTouching()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xD45D14", Offset = "0xD45D14", VA = "0xD45D14", Slot = "12")]
		public virtual void ShowMenu()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xD45D3C", Offset = "0xD45D3C", VA = "0xD45D3C", Slot = "13")]
		public virtual RadialMenuButton GetButton(int id)
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xD45DBC", Offset = "0xD45DBC", VA = "0xD45DBC", Slot = "14")]
		public virtual void HideMenu(bool force)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xD45DF0", Offset = "0xD45DF0", VA = "0xD45DF0")]
		public void RegenerateButtons()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xD46544", Offset = "0xD46544", VA = "0xD46544")]
		public void AddButton(RadialMenuButton newButton)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xD465A8", Offset = "0xD465A8", VA = "0xD465A8", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xD46648", Offset = "0xD46648", VA = "0xD46648", Slot = "16")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xD466C4", Offset = "0xD466C4", VA = "0xD466C4", Slot = "17")]
		protected virtual void InteractButton(TouchAngleDeflection givenTouchAngleDeflection, ButtonEvent evt)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xD46D38", Offset = "0xD46D38", VA = "0xD46D38", Slot = "18")]
		protected virtual void InitTweenMenuScale(bool isShown)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xD46DA4", Offset = "0xD46DA4", VA = "0xD46DA4", Slot = "19")]
		[IteratorStateMachine(typeof(<TweenMenuScale>d__40))]
		protected virtual IEnumerator TweenMenuScale(bool show)
		{
			return null;
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xD46E54", Offset = "0xD46E54", VA = "0xD46E54", Slot = "20")]
		protected virtual void AttempHapticPulse(float strength)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xD46E78", Offset = "0xD46E78", VA = "0xD46E78", Slot = "21")]
		protected virtual void RemoveAllButtons()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xD46F74", Offset = "0xD46F74", VA = "0xD46F74")]
		public VRTK_RadialMenu()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[RequireComponent(typeof(VRTK_RadialMenu))]
	public class VRTK_RadialMenuController : MonoBehaviour
	{
		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller to listen to the controller events on.")]
		public VRTK_ControllerEvents events;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_RadialMenu menu;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TouchAngleDeflection currentTad;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool touchpadTouched;

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xD47408", Offset = "0xD47408", VA = "0xD47408", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xD47470", Offset = "0xD47470", VA = "0xD47470", Slot = "5")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xD47520", Offset = "0xD47520", VA = "0xD47520", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xD47908", Offset = "0xD47908", VA = "0xD47908", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xD47AC4", Offset = "0xD47AC4", VA = "0xD47AC4", Slot = "8")]
		protected virtual void DoClickButton([Optional] object sender)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xD47AEC", Offset = "0xD47AEC", VA = "0xD47AEC", Slot = "9")]
		protected virtual void DoUnClickButton([Optional] object sender)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xD47B14", Offset = "0xD47B14", VA = "0xD47B14", Slot = "10")]
		protected virtual void DoShowMenu(TouchAngleDeflection initialTad, [Optional] object sender)
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xD47B64", Offset = "0xD47B64", VA = "0xD47B64", Slot = "11")]
		protected virtual void DoHideMenu(bool force, [Optional] object sender)
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xD47BB0", Offset = "0xD47BB0", VA = "0xD47BB0", Slot = "12")]
		protected virtual void DoChangeAngle(TouchAngleDeflection givenTouchAngleDeflection, [Optional] object sender)
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xD47BD8", Offset = "0xD47BD8", VA = "0xD47BD8", Slot = "13")]
		protected virtual void AttemptHapticPulse(float strength)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xD47CAC", Offset = "0xD47CAC", VA = "0xD47CAC", Slot = "14")]
		protected virtual void DoTouchpadClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xD47CBC", Offset = "0xD47CBC", VA = "0xD47CBC", Slot = "15")]
		protected virtual void DoTouchpadUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xD47CCC", Offset = "0xD47CCC", VA = "0xD47CCC", Slot = "16")]
		protected virtual void DoTouchpadTouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xD47D2C", Offset = "0xD47D2C", VA = "0xD47D2C", Slot = "17")]
		protected virtual void DoTouchpadUntouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xD47D44", Offset = "0xD47D44", VA = "0xD47D44", Slot = "18")]
		protected virtual void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xD47DA4", Offset = "0xD47DA4", VA = "0xD47DA4", Slot = "19")]
		protected virtual TouchAngleDeflection CalculateAngle(ControllerInteractionEventArgs e)
		{
			return default(TouchAngleDeflection);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xD45918", Offset = "0xD45918", VA = "0xD45918")]
		public VRTK_RadialMenuController()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class VRTK_SDKSetupSwitcher : MonoBehaviour
	{
		[Token(Token = "0x2000216")]
		protected enum ViewingState
		{
			[Token(Token = "0x4000C03")]
			Status,
			[Token(Token = "0x4000C04")]
			Selection
		}

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Fallback Objects")]
		[SerializeField]
		protected Camera fallbackCamera;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected EventSystem eventSystem;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Object References")]
		[SerializeField]
		protected Text currentText;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected RectTransform statusPanel;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected RectTransform selectionPanel;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected UnityEngine.UI.Button switchButton;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected UnityEngine.UI.Button cancelButton;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected UnityEngine.UI.Button chooseButton;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected bool playareaSync;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected readonly List<GameObject> chooseButtonGameObjects;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform currentPlayarea;

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xD47E2C", Offset = "0xD47E2C", VA = "0xD47E2C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xD47E9C", Offset = "0xD47E9C", VA = "0xD47E9C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xD47FEC", Offset = "0xD47FEC", VA = "0xD47FEC", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xD4813C", Offset = "0xD4813C", VA = "0xD4813C", Slot = "7")]
		protected virtual void OnLoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xD482C8", Offset = "0xD482C8", VA = "0xD482C8", Slot = "8")]
		protected virtual void OnSwitchButtonClick()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xD482D8", Offset = "0xD482D8", VA = "0xD482D8", Slot = "9")]
		protected virtual void OnCancelButtonClick()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xD482E8", Offset = "0xD482E8", VA = "0xD482E8", Slot = "10")]
		protected virtual void Show(ViewingState viewingState)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xD48714", Offset = "0xD48714", VA = "0xD48714", Slot = "11")]
		protected virtual void UpdateCurrentText()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xD487FC", Offset = "0xD487FC", VA = "0xD487FC", Slot = "12")]
		protected virtual void AddSelectionButtons()
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xD48EFC", Offset = "0xD48EFC", VA = "0xD48EFC", Slot = "13")]
		protected virtual void RemoveCreatedChooseButtons()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xD48FE0", Offset = "0xD48FE0", VA = "0xD48FE0")]
		public VRTK_SDKSetupSwitcher()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public struct SnapDropZoneEventArgs
	{
		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject snappedObject;
	}
	[Token(Token = "0x200021B")]
	public delegate void SnapDropZoneEventHandler(object sender, SnapDropZoneEventArgs e);
	[Token(Token = "0x200021C")]
	[ExecuteInEditMode]
	public class VRTK_SnapDropZone : MonoBehaviour
	{
		[Token(Token = "0x200021D")]
		public enum SnapTypes
		{
			[Token(Token = "0x4000C32")]
			UseKinematic,
			[Token(Token = "0x4000C33")]
			UseJoint,
			[Token(Token = "0x4000C34")]
			UseParenting
		}

		[Token(Token = "0x200021E")]
		[CompilerGenerated]
		private sealed class <CheckCanSnapObjectAtEndOfFrame>d__95 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SnapDropZone <>4__this;

			[Token(Token = "0x4000C38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractableObject interactableObjectCheck;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C3F")]
				[Address(RVA = "0xD4FAD0", Offset = "0xD4FAD0", VA = "0xD4FAD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C41")]
				[Address(RVA = "0xD4FB18", Offset = "0xD4FB18", VA = "0xD4FB18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xD4F9EC", Offset = "0xD4F9EC", VA = "0xD4F9EC")]
			[DebuggerHidden]
			public <CheckCanSnapObjectAtEndOfFrame>d__95(int <>1__state)
			{
			}

			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xD4FA14", Offset = "0xD4FA14", VA = "0xD4FA14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0xD4FA18", Offset = "0xD4FA18", VA = "0xD4FA18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xD4FAD8", Offset = "0xD4FAD8", VA = "0xD4FAD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200021F")]
		[CompilerGenerated]
		private sealed class <UpdateTransformDimensions>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject ioCheck;

			[Token(Token = "0x4000C3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject endSettings;

			[Token(Token = "0x4000C3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float duration;

			[Token(Token = "0x4000C3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 endScale;

			[Token(Token = "0x4000C3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public VRTK_SnapDropZone <>4__this;

			[Token(Token = "0x4000C40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x4000C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Transform <ioTransform>5__3;

			[Token(Token = "0x4000C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 <startPosition>5__4;

			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private Quaternion <startRotation>5__5;

			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Vector3 <startScale>5__6;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private bool <storedKinematicState>5__7;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C45")]
				[Address(RVA = "0xD50060", Offset = "0xD50060", VA = "0xD50060", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C47")]
				[Address(RVA = "0xD500A8", Offset = "0xD500A8", VA = "0xD500A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xD4FB20", Offset = "0xD4FB20", VA = "0xD4FB20")]
			[DebuggerHidden]
			public <UpdateTransformDimensions>d__96(int <>1__state)
			{
			}

			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xD4FB48", Offset = "0xD4FB48", VA = "0xD4FB48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xD4FB4C", Offset = "0xD4FB4C", VA = "0xD4FB4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xD50068", Offset = "0xD50068", VA = "0xD50068", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000220")]
		[CompilerGenerated]
		private sealed class <AttemptForceSnapAtEndOfFrame>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject objectToSnap;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_SnapDropZone <>4__this;

			[Token(Token = "0x17000141")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C4B")]
				[Address(RVA = "0xD501AC", Offset = "0xD501AC", VA = "0xD501AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000142")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C4D")]
				[Address(RVA = "0xD501F4", Offset = "0xD501F4", VA = "0xD501F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C48")]
			[Address(RVA = "0xD500B0", Offset = "0xD500B0", VA = "0xD500B0")]
			[DebuggerHidden]
			public <AttemptForceSnapAtEndOfFrame>d__105(int <>1__state)
			{
			}

			[Token(Token = "0x6000C49")]
			[Address(RVA = "0xD500D8", Offset = "0xD500D8", VA = "0xD500D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0xD500DC", Offset = "0xD500DC", VA = "0xD500DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0xD501B4", Offset = "0xD501B4", VA = "0xD501B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000221")]
		[CompilerGenerated]
		private sealed class <OverridePreviousStateAtEndOfFrame>d__118 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject io;

			[Token(Token = "0x4000C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform parent;

			[Token(Token = "0x4000C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool kinematic;

			[Token(Token = "0x4000C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool grabbable;

			[Token(Token = "0x17000143")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C51")]
				[Address(RVA = "0xD502E8", Offset = "0xD502E8", VA = "0xD502E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000144")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C53")]
				[Address(RVA = "0xD50330", Offset = "0xD50330", VA = "0xD50330", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xD501FC", Offset = "0xD501FC", VA = "0xD501FC")]
			[DebuggerHidden]
			public <OverridePreviousStateAtEndOfFrame>d__118(int <>1__state)
			{
			}

			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xD50224", Offset = "0xD50224", VA = "0xD50224", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xD50228", Offset = "0xD50228", VA = "0xD50228", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xD502F0", Offset = "0xD502F0", VA = "0xD502F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("A game object that is used to draw the highlighted destination for within the drop zone. This object will also be created in the Editor for easy placement.")]
		public GameObject highlightObjectPrefab;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Snap Type to apply when a valid interactable object is dropped within the snap zone.")]
		public SnapTypes snapType;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of time it takes for the object being snapped to move into the new snapped position, rotation and scale.")]
		public float snapDuration;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If this is checked then the scaled size of the snap drop zone will be applied to the object that is snapped to it.")]
		public bool applyScalingOnSnap;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If this is checked then when the snapped object is unsnapped from the drop zone, a clone of the unsnapped object will be snapped back into the drop zone.")]
		public bool cloneNewOnUnsnap;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The colour to use when showing the snap zone is active. This is used as the highlight colour when no object is hovering but `Highlight Always Active` is true.")]
		public Color highlightColor;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The colour to use when showing the snap zone is active and a valid object is hovering. If this is `Color.clear` then the `Highlight Color` will be used.")]
		public Color validHighlightColor;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The highlight object will always be displayed when the snap drop zone is available even if a valid item isn't being hovered over.")]
		public bool highlightAlwaysActive;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A specified VRTK_PolicyList to use to determine which interactable objects will be snapped to the snap drop zone on release.")]
		public VRTK_PolicyList validObjectListPolicy;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If this is checked then the drop zone highlight section will be displayed in the scene editor window.")]
		public bool displayDropZoneInEditor;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Interactable Object to snap into the dropzone when the drop zone is enabled. The Interactable Object must be valid in any given policy list to snap.")]
		public VRTK_InteractableObject defaultSnappedInteractableObject;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Obsolete("`VRTK_SnapDropZone.defaultSnappedObject` has been replaced with the `VRTK_SnapDropZone.defaultSnappedInteractableObject`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		[Header("Obsolete Settings")]
		public GameObject defaultSnappedObject;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GameObject previousPrefab;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject highlightContainer;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected GameObject highlightObject;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected GameObject highlightEditorObject;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<VRTK_InteractableObject> currentValidSnapInteractableObjects;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected VRTK_InteractableObject currentSnappedObject;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected GameObject objectToClone;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool[] clonedObjectColliderStates;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool willSnap;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool isSnapped;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool wasSnapped;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		protected bool isHighlighted;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected VRTK_BaseHighlighter objectHighlighter;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine transitionInPlaceRoutine;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Coroutine attemptTransitionAtEndOfFrameRoutine;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine checkCanSnapRoutine;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool originalJointCollisionState;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Coroutine overridePreviousStateAtEndOfFrameRoutine;

		[Token(Token = "0x4000C2E")]
		protected const string HIGHLIGHT_CONTAINER_NAME = "HighlightContainer";

		[Token(Token = "0x4000C2F")]
		protected const string HIGHLIGHT_OBJECT_NAME = "HighlightObject";

		[Token(Token = "0x4000C30")]
		protected const string HIGHLIGHT_EDITOR_OBJECT_NAME = "EditorHighlightObject";

		[Token(Token = "0x14000036")]
		public event SnapDropZoneEventHandler ObjectEnteredSnapDropZone
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xD49430", Offset = "0xD49430", VA = "0xD49430")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0xD494CC", Offset = "0xD494CC", VA = "0xD494CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event SnapDropZoneEventHandler ObjectExitedSnapDropZone
		{
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0xD49568", Offset = "0xD49568", VA = "0xD49568")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0xD49604", Offset = "0xD49604", VA = "0xD49604")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000038")]
		public event SnapDropZoneEventHandler ObjectSnappedToDropZone
		{
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0xD496A0", Offset = "0xD496A0", VA = "0xD496A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xD4973C", Offset = "0xD4973C", VA = "0xD4973C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000039")]
		public event SnapDropZoneEventHandler ObjectUnsnappedFromDropZone
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0xD497D8", Offset = "0xD497D8", VA = "0xD497D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0xD49874", Offset = "0xD49874", VA = "0xD49874")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xD49910", Offset = "0xD49910", VA = "0xD49910", Slot = "4")]
		public virtual void OnObjectEnteredSnapDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xD49938", Offset = "0xD49938", VA = "0xD49938", Slot = "5")]
		public virtual void OnObjectExitedSnapDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xD49960", Offset = "0xD49960", VA = "0xD49960", Slot = "6")]
		public virtual void OnObjectSnappedToDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xD49988", Offset = "0xD49988", VA = "0xD49988", Slot = "7")]
		public virtual void OnObjectUnsnappedFromDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xD499E0", Offset = "0xD499E0", VA = "0xD499E0", Slot = "8")]
		public virtual SnapDropZoneEventArgs SetSnapDropZoneEvent(GameObject interactableObject)
		{
			return default(SnapDropZoneEventArgs);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xD499FC", Offset = "0xD499FC", VA = "0xD499FC", Slot = "9")]
		public virtual void InitaliseHighlightObject(bool removeOldObject = false)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xD49AD0", Offset = "0xD49AD0", VA = "0xD49AD0", Slot = "10")]
		public virtual void ForceSnap(GameObject objectToSnap)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xD49B38", Offset = "0xD49B38", VA = "0xD49B38", Slot = "11")]
		protected virtual void ForceSnap(VRTK_InteractableObject interactableObjectToSnap)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xD49C6C", Offset = "0xD49C6C", VA = "0xD49C6C", Slot = "12")]
		public virtual void ForceUnsnap()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xD49CCC", Offset = "0xD49CCC", VA = "0xD49CCC", Slot = "13")]
		public virtual bool ValidSnappableObjectIsHovering()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xD49D74", Offset = "0xD49D74", VA = "0xD49D74", Slot = "14")]
		public virtual bool IsObjectHovering(GameObject checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xD49E40", Offset = "0xD49E40", VA = "0xD49E40", Slot = "15")]
		public virtual bool IsInteractableObjectHovering(VRTK_InteractableObject checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xD49EEC", Offset = "0xD49EEC", VA = "0xD49EEC", Slot = "16")]
		public virtual List<GameObject> GetHoveringObjects()
		{
			return null;
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xD49FEC", Offset = "0xD49FEC", VA = "0xD49FEC", Slot = "17")]
		public virtual List<VRTK_InteractableObject> GetHoveringInteractableObjects()
		{
			return null;
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xD49FF4", Offset = "0xD49FF4", VA = "0xD49FF4", Slot = "18")]
		public virtual GameObject GetCurrentSnappedObject()
		{
			return null;
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xD4A07C", Offset = "0xD4A07C", VA = "0xD4A07C", Slot = "19")]
		public virtual VRTK_InteractableObject GetCurrentSnappedInteractableObject()
		{
			return null;
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xD4A084", Offset = "0xD4A084", VA = "0xD4A084", Slot = "20")]
		public virtual GameObject Clone(Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xD4A41C", Offset = "0xD4A41C", VA = "0xD4A41C", Slot = "21")]
		public virtual GameObject Clone()
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xD4A47C", Offset = "0xD4A47C", VA = "0xD4A47C", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xD4A4B0", Offset = "0xD4A4B0", VA = "0xD4A4B0", Slot = "23")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xD4A55C", Offset = "0xD4A55C", VA = "0xD4A55C", Slot = "24")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xD4A734", Offset = "0xD4A734", VA = "0xD4A734", Slot = "25")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xD4A7CC", Offset = "0xD4A7CC", VA = "0xD4A7CC", Slot = "26")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xD4A848", Offset = "0xD4A848", VA = "0xD4A848", Slot = "27")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xD4A8B4", Offset = "0xD4A8B4", VA = "0xD4A8B4", Slot = "28")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xD4A920", Offset = "0xD4A920", VA = "0xD4A920", Slot = "29")]
		protected virtual void CheckCanSnap(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xD4AA78", Offset = "0xD4AA78", VA = "0xD4AA78", Slot = "30")]
		protected virtual void CheckCanUnsnap(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xD4AC5C", Offset = "0xD4AC5C", VA = "0xD4AC5C", Slot = "31")]
		protected virtual bool ValidUnsnap(VRTK_InteractableObject interactableObjectCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xD4AD5C", Offset = "0xD4AD5C", VA = "0xD4AD5C", Slot = "32")]
		protected virtual void SnapObjectToZone(VRTK_InteractableObject objectToSnap)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xD4ADBC", Offset = "0xD4ADBC", VA = "0xD4ADBC", Slot = "33")]
		protected virtual void UnregisterAllUngrabEvents()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xD4AEF4", Offset = "0xD4AEF4", VA = "0xD4AEF4", Slot = "34")]
		protected virtual bool ValidSnapObject(VRTK_InteractableObject interactableObjectCheck, bool grabState, bool checkGrabState = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xD4AFCC", Offset = "0xD4AFCC", VA = "0xD4AFCC", Slot = "35")]
		protected virtual string ObjectPath(string name)
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xD4B018", Offset = "0xD4B018", VA = "0xD4B018", Slot = "36")]
		protected virtual void CheckSnappedItemExists()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xD4B128", Offset = "0xD4B128", VA = "0xD4B128", Slot = "37")]
		protected virtual void CheckPrefabUpdate()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xD4B1D8", Offset = "0xD4B1D8", VA = "0xD4B1D8", Slot = "38")]
		protected virtual void SetObjectHighlight()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xD4B270", Offset = "0xD4B270", VA = "0xD4B270", Slot = "39")]
		protected virtual void ToggleHighlightColor()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xD4B3A8", Offset = "0xD4B3A8", VA = "0xD4B3A8", Slot = "40")]
		protected virtual void CreateHighlightersInEditor()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xD4B6CC", Offset = "0xD4B6CC", VA = "0xD4B6CC", Slot = "41")]
		protected virtual void CheckCurrentValidSnapObjectStillValid()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xD4B888", Offset = "0xD4B888", VA = "0xD4B888", Slot = "42")]
		protected virtual void ForceSetObjects()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xD4BB18", Offset = "0xD4BB18", VA = "0xD4BB18", Slot = "43")]
		protected virtual void GenerateContainer()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xD4BD78", Offset = "0xD4BD78", VA = "0xD4BD78", Slot = "44")]
		protected virtual void DisableHighlightShadows()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xD4BE78", Offset = "0xD4BE78", VA = "0xD4BE78", Slot = "45")]
		protected virtual void SetContainer()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xD4BF40", Offset = "0xD4BF40", VA = "0xD4BF40", Slot = "46")]
		protected virtual void GenerateObjects()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xD4C000", Offset = "0xD4C000", VA = "0xD4C000", Slot = "47")]
		protected virtual void SnapObject(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xD4C250", Offset = "0xD4C250", VA = "0xD4C250", Slot = "48")]
		protected virtual void CreatePermanentClone()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xD4C4FC", Offset = "0xD4C4FC", VA = "0xD4C4FC", Slot = "49")]
		protected virtual void ResetPermanentCloneColliders(GameObject objectToReset)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xD4C614", Offset = "0xD4C614", VA = "0xD4C614", Slot = "50")]
		protected virtual void ResnapPermanentClone()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xD4C6CC", Offset = "0xD4C6CC", VA = "0xD4C6CC", Slot = "51")]
		protected virtual void UnsnapObject()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xD4C85C", Offset = "0xD4C85C", VA = "0xD4C85C", Slot = "52")]
		protected virtual Vector3 GetNewLocalScale(VRTK_InteractableObject checkObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xD4C90C", Offset = "0xD4C90C", VA = "0xD4C90C", Slot = "53")]
		[IteratorStateMachine(typeof(<CheckCanSnapObjectAtEndOfFrame>d__95))]
		protected virtual IEnumerator CheckCanSnapObjectAtEndOfFrame(VRTK_InteractableObject interactableObjectCheck)
		{
			return null;
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xD4C99C", Offset = "0xD4C99C", VA = "0xD4C99C", Slot = "54")]
		[IteratorStateMachine(typeof(<UpdateTransformDimensions>d__96))]
		protected virtual IEnumerator UpdateTransformDimensions(VRTK_InteractableObject ioCheck, GameObject endSettings, Vector3 endScale, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xD4CA68", Offset = "0xD4CA68", VA = "0xD4CA68", Slot = "55")]
		protected virtual void SetDropSnapType(VRTK_InteractableObject ioCheck)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xD4CBB0", Offset = "0xD4CBB0", VA = "0xD4CBB0", Slot = "56")]
		protected virtual void SetSnapDropZoneJoint(Rigidbody snapTo)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xD4CFD4", Offset = "0xD4CFD4", VA = "0xD4CFD4", Slot = "57")]
		protected virtual void ResetSnapDropZoneJoint()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xD4D08C", Offset = "0xD4D08C", VA = "0xD4D08C", Slot = "58")]
		protected virtual void AddCurrentValidSnapObject(VRTK_InteractableObject givenObject)
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xD4D1B8", Offset = "0xD4D1B8", VA = "0xD4D1B8", Slot = "59")]
		protected virtual void RemoveCurrentValidSnapObject(VRTK_InteractableObject givenObject)
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xD4D2E4", Offset = "0xD4D2E4", VA = "0xD4D2E4", Slot = "60")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xD4D394", Offset = "0xD4D394", VA = "0xD4D394", Slot = "61")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xD4D45C", Offset = "0xD4D45C", VA = "0xD4D45C", Slot = "62")]
		protected virtual void AttemptForceSnap(VRTK_InteractableObject objectToSnap)
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xD4D474", Offset = "0xD4D474", VA = "0xD4D474", Slot = "63")]
		[IteratorStateMachine(typeof(<AttemptForceSnapAtEndOfFrame>d__105))]
		protected virtual IEnumerator AttemptForceSnapAtEndOfFrame(VRTK_InteractableObject objectToSnap)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xD4D504", Offset = "0xD4D504", VA = "0xD4D504", Slot = "64")]
		protected virtual void ToggleHighlight(VRTK_InteractableObject checkObject, bool state)
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xD4D5C8", Offset = "0xD4D5C8", VA = "0xD4D5C8", Slot = "65")]
		protected virtual void CopyObject(GameObject objectBlueprint, ref GameObject clonedObject, string givenName)
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xD4D820", Offset = "0xD4D820", VA = "0xD4D820", Slot = "66")]
		protected virtual void GenerateHighlightObject()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xD4DAB0", Offset = "0xD4DAB0", VA = "0xD4DAB0", Slot = "67")]
		protected virtual void SetHighlightObjectActive(bool state)
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xD4DB44", Offset = "0xD4DB44", VA = "0xD4DB44", Slot = "68")]
		protected virtual void DeleteHighlightObject()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xD4DBE8", Offset = "0xD4DBE8", VA = "0xD4DBE8", Slot = "69")]
		protected virtual void GenerateEditorHighlightObject()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xD4DE2C", Offset = "0xD4DE2C", VA = "0xD4DE2C", Slot = "70")]
		protected virtual void CleanHighlightObject(GameObject objectToClean)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xD4E278", Offset = "0xD4E278", VA = "0xD4E278", Slot = "71")]
		protected virtual void InitialiseHighlighter()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xD4E504", Offset = "0xD4E504", VA = "0xD4E504", Slot = "72")]
		protected virtual void ChooseDestroyType(Transform deleteTransform)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xD4E5AC", Offset = "0xD4E5AC", VA = "0xD4E5AC", Slot = "73")]
		protected virtual void ChooseDestroyType(GameObject deleteObject)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xD4E670", Offset = "0xD4E670", VA = "0xD4E670", Slot = "74")]
		protected virtual void ChooseDestroyType(Component deleteComponent)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xD4E734", Offset = "0xD4E734", VA = "0xD4E734", Slot = "75")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xD4E870", Offset = "0xD4E870", VA = "0xD4E870", Slot = "76")]
		[IteratorStateMachine(typeof(<OverridePreviousStateAtEndOfFrame>d__118))]
		protected virtual IEnumerator OverridePreviousStateAtEndOfFrame(VRTK_InteractableObject io, Transform parent, bool kinematic, bool grabbable)
		{
			return null;
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xD4E920", Offset = "0xD4E920", VA = "0xD4E920")]
		public VRTK_SnapDropZone()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[Obsolete("`VRTK_ContentHandler` has been deprecated. This script will be removed in a future version of VRTK.")]
	public class VRTK_ContentHandler : MonoBehaviour
	{
		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The 3D control responsible for the content.")]
		public VRTK_Control control;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The transform containing the meshes or colliders that define the inside of the control.")]
		public Transform inside;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Any transform that will act as the parent while the object is not inside the control.")]
		public Transform outside;

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xD50338", Offset = "0xD50338", VA = "0xD50338", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xD504EC", Offset = "0xD504EC", VA = "0xD504EC", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xD50664", Offset = "0xD50664", VA = "0xD50664")]
		public VRTK_ContentHandler()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public delegate void Button3DEventHandler(object sender, Control3DEventArgs e);
	[Token(Token = "0x2000224")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Button")]
	[Obsolete("`VRTK.VRTK_Button` has been replaced with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsPusher`. This script will be removed in a future version of VRTK.")]
	public class VRTK_Button : VRTK_Control
	{
		[Token(Token = "0x2000225")]
		public enum ButtonDirection
		{
			[Token(Token = "0x4000C62")]
			autodetect,
			[Token(Token = "0x4000C63")]
			x,
			[Token(Token = "0x4000C64")]
			y,
			[Token(Token = "0x4000C65")]
			z,
			[Token(Token = "0x4000C66")]
			negX,
			[Token(Token = "0x4000C67")]
			negY,
			[Token(Token = "0x4000C68")]
			negZ
		}

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the button will be connected. If the game object moves the button will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The axis on which the button should move. All other axis will be frozen.")]
		public ButtonDirection direction;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The local distance the button needs to be pushed until a push event is triggered.")]
		public float activationDistance;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The amount of force needed to push the button down as well as the speed with which it will go back into its original position.")]
		public float buttonStrength;

		[Token(Token = "0x4000C59")]
		protected const float MAX_AUTODETECT_ACTIVATION_LENGTH = 4f;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected ButtonDirection finalDirection;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected Vector3 restingPosition;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3 activationDir;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Rigidbody buttonRigidbody;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConfigurableJoint buttonJoint;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected ConstantForce buttonForce;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected int forceCount;

		[Token(Token = "0x1400003A")]
		public event Button3DEventHandler Pushed
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0xD50860", Offset = "0xD50860", VA = "0xD50860")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xD508FC", Offset = "0xD508FC", VA = "0xD508FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003B")]
		public event Button3DEventHandler Released
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xD50998", Offset = "0xD50998", VA = "0xD50998")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xD50A34", Offset = "0xD50A34", VA = "0xD50A34")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xD50AD0", Offset = "0xD50AD0", VA = "0xD50AD0", Slot = "19")]
		public virtual void OnPushed(Control3DEventArgs e)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xD50AF0", Offset = "0xD50AF0", VA = "0xD50AF0", Slot = "20")]
		public virtual void OnReleased(Control3DEventArgs e)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xD50B10", Offset = "0xD50B10", VA = "0xD50B10", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xD50D3C", Offset = "0xD50D3C", VA = "0xD50D3C", Slot = "21")]
		protected virtual void SetupCollider()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xD50E0C", Offset = "0xD50E0C", VA = "0xD50E0C", Slot = "22")]
		protected virtual void SetupRigidbody()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xD50F14", Offset = "0xD50F14", VA = "0xD50F14", Slot = "23")]
		protected virtual void SetupConstantForce()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xD51004", Offset = "0xD51004", VA = "0xD51004", Slot = "24")]
		protected virtual void SetupConnectedTo()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xD51104", Offset = "0xD51104", VA = "0xD51104", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xD51180", Offset = "0xD51180", VA = "0xD51180", Slot = "25")]
		protected virtual void DetectJointSetup()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xD51544", Offset = "0xD51544", VA = "0xD51544", Slot = "26")]
		protected virtual void DetectJointLimitsSetup()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xD51614", Offset = "0xD51614", VA = "0xD51614", Slot = "27")]
		protected virtual void DetectJointDirectionSetup()
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xD51D14", Offset = "0xD51D14", VA = "0xD51D14", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xD51E94", Offset = "0xD51E94", VA = "0xD51E94", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xD51EA0", Offset = "0xD51EA0", VA = "0xD51EA0", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xD51F44", Offset = "0xD51F44", VA = "0xD51F44", Slot = "28")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xD51FEC", Offset = "0xD51FEC", VA = "0xD51FEC", Slot = "29")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xD51FFC", Offset = "0xD51FFC", VA = "0xD51FFC", Slot = "30")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xD5200C", Offset = "0xD5200C", VA = "0xD5200C", Slot = "31")]
		protected virtual ButtonDirection DetectDirection()
		{
			return default(ButtonDirection);
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xD52A88", Offset = "0xD52A88", VA = "0xD52A88", Slot = "32")]
		protected virtual Vector3 CalculateActivationDir()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xD534E0", Offset = "0xD534E0", VA = "0xD534E0", Slot = "33")]
		protected virtual bool ReachedActivationDistance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xD535A4", Offset = "0xD535A4", VA = "0xD535A4", Slot = "34")]
		protected virtual Vector3 GetForceVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xD5368C", Offset = "0xD5368C", VA = "0xD5368C")]
		public VRTK_Button()
		{
		}
	}
	[Token(Token = "0x2000226")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Chest")]
	[Obsolete("`VRTK.VRTK_Chest` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsRotator`. This script will be removed in a future version of VRTK.")]
	public class VRTK_Chest : VRTK_Control
	{
		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The axis on which the chest should open. All other axis will be frozen.")]
		public Direction direction;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The game object for the lid.")]
		public GameObject lid;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The game object for the body.")]
		public GameObject body;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The game object for the handle.")]
		public GameObject handle;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The parent game object for the chest content elements.")]
		public GameObject content;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Makes the content invisible while the chest is closed.")]
		public bool hideContent;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The maximum opening angle of the chest.")]
		public float maxAngle;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float minAngle;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float stepSize;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody bodyRigidbody;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody handleRigidbody;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected FixedJoint handleJoint;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Rigidbody lidRigidbody;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected HingeJoint lidJoint;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool lidJointCreated;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected Direction finalDirection;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float subDirection;

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xD53708", Offset = "0xD53708", VA = "0xD53708", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xD53A14", Offset = "0xD53A14", VA = "0xD53A14", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xD53A70", Offset = "0xD53A70", VA = "0xD53A70", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xD53EF0", Offset = "0xD53EF0", VA = "0xD53EF0", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xD53F8C", Offset = "0xD53F8C", VA = "0xD53F8C", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xD53FB0", Offset = "0xD53FB0", VA = "0xD53FB0", Slot = "19")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xD54314", Offset = "0xD54314", VA = "0xD54314", Slot = "20")]
		protected virtual void InitBody()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xD54408", Offset = "0xD54408", VA = "0xD54408", Slot = "21")]
		protected virtual void InitLid()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xD545E0", Offset = "0xD545E0", VA = "0xD545E0", Slot = "22")]
		protected virtual void InitHandle()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xD547D8", Offset = "0xD547D8", VA = "0xD547D8", Slot = "23")]
		protected virtual void CreateInteractableObject(GameObject targetGameObject)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xD54930", Offset = "0xD54930", VA = "0xD54930", Slot = "24")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xD54A94", Offset = "0xD54A94", VA = "0xD54A94")]
		public VRTK_Chest()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public struct Control3DEventArgs
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float value;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float normalizedValue;
	}
	[Token(Token = "0x2000228")]
	public delegate void Control3DEventHandler(object sender, Control3DEventArgs e);
	[Token(Token = "0x2000229")]
	[Obsolete("`VRTK_Control` has been deprecated. This script will be removed in a future version of VRTK.")]
	[ExecuteInEditMode]
	public abstract class VRTK_Control : MonoBehaviour
	{
		[Token(Token = "0x200022A")]
		public struct ControlValueRange
		{
			[Token(Token = "0x4000C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float controlMin;

			[Token(Token = "0x4000C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float controlMax;
		}

		[Token(Token = "0x200022B")]
		public enum Direction
		{
			[Token(Token = "0x4000C8B")]
			autodetect,
			[Token(Token = "0x4000C8C")]
			x,
			[Token(Token = "0x4000C8D")]
			y,
			[Token(Token = "0x4000C8E")]
			z
		}

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If active the control will react to the controller without the need to push the grab button.")]
		public bool interactWithoutGrab;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Bounds bounds;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool setupSuccessful;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerRigidbodyActivator autoTriggerVolume;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float value;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Color COLOR_OK;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static Color COLOR_ERROR;

		[Token(Token = "0x4000C84")]
		protected const float MIN_OPENING_DISTANCE = 20f;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected ControlValueRange valueRange;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject controlContent;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected bool hideControlContent;

		[Token(Token = "0x1400003C")]
		public event Control3DEventHandler ValueChanged
		{
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0xD54D00", Offset = "0xD54D00", VA = "0xD54D00")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xD54D9C", Offset = "0xD54D9C", VA = "0xD54D9C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C87")]
		protected abstract void InitRequiredComponents();

		[Token(Token = "0x6000C88")]
		protected abstract bool DetectSetup();

		[Token(Token = "0x6000C89")]
		protected abstract ControlValueRange RegisterValueRange();

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xD54E38", Offset = "0xD54E38", VA = "0xD54E38", Slot = "7")]
		public virtual void OnValueChanged(Control3DEventArgs e)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xD54E58", Offset = "0xD54E58", VA = "0xD54E58", Slot = "8")]
		public virtual float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xD54E60", Offset = "0xD54E60", VA = "0xD54E60", Slot = "9")]
		public virtual float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xD54F14", Offset = "0xD54F14", VA = "0xD54F14", Slot = "10")]
		public virtual void SetContent(GameObject content, bool hideContent)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xD54F40", Offset = "0xD54F40", VA = "0xD54F40", Slot = "11")]
		public virtual GameObject GetContent()
		{
			return null;
		}

		[Token(Token = "0x6000C8F")]
		protected abstract void HandleUpdate();

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xD54F48", Offset = "0xD54F48", VA = "0xD54F48", Slot = "13")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xD54FE0", Offset = "0xD54FE0", VA = "0xD54FE0", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xD55084", Offset = "0xD55084", VA = "0xD55084", Slot = "15")]
		protected virtual Control3DEventArgs SetControlEvent()
		{
			return default(Control3DEventArgs);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xD50BB4", Offset = "0xD50BB4", VA = "0xD50BB4", Slot = "16")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xD550C4", Offset = "0xD550C4", VA = "0xD550C4", Slot = "17")]
		protected virtual void CreateTriggerVolume()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xD552A4", Offset = "0xD552A4", VA = "0xD552A4")]
		protected Vector3 GetThirdDirection(Vector3 axis1, Vector3 axis2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xD553CC", Offset = "0xD553CC", VA = "0xD553CC", Slot = "18")]
		protected virtual void HandleInteractables()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xD536F8", Offset = "0xD536F8", VA = "0xD536F8")]
		protected VRTK_Control()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[Obsolete("`VRTK.VRTK_Door` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsRotator`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Door")]
	public class VRTK_Door : VRTK_Control
	{
		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The axis on which the door should open.")]
		public Direction direction;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The game object for the door. Can also be an empty parent or left empty if the script is put onto the actual door mesh. If no colliders exist yet a collider will tried to be automatically attached to all children that expose renderers.")]
		public GameObject door;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The game object for the handles. Can also be an empty parent or left empty. If empty the door can only be moved using the rigidbody mode of the controller. If no collider exists yet a compound collider made up of all children will try to be calculated but this will fail if the door is rotated. In that case a manual collider will need to be assigned.")]
		public GameObject handles;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The game object for the frame to which the door is attached. Should only be set if the frame will move as well to ensure that the door moves along with the frame.")]
		public GameObject frame;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The parent game object for the door content elements.")]
		public GameObject content;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Makes the content invisible while the door is closed.")]
		public bool hideContent;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The maximum opening angle of the door.")]
		public float maxAngle;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Can the door be pulled to open.")]
		public bool openInward;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[Tooltip("Can the door be pushed to open.")]
		public bool openOutward;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The range at which the door must be to being closed before it snaps shut. Only works if either inward or outward is selected, not both.")]
		[Range(0f, 1f)]
		public float minSnapClose;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The amount of friction the door will have whilst swinging when it is not grabbed.")]
		public float releasedFriction;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("The amount of friction the door will have whilst swinging when it is grabbed.")]
		public float grabbedFriction;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("If this is checked then only the door handle is grabbale to operate the door.")]
		public bool handleInteractableOnly;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float stepSize;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Rigidbody doorRigidbody;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected HingeJoint doorHinge;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConstantForce doorSnapForce;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Rigidbody frameRigidbody;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Direction finalDirection;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float subDirection;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Vector3 secondaryDirection;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected bool doorHingeCreated;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		protected bool doorSnapForceCreated;

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xD55548", Offset = "0xD55548", VA = "0xD55548", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xD56364", Offset = "0xD56364", VA = "0xD56364", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xD563C0", Offset = "0xD563C0", VA = "0xD563C0", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xD56EB8", Offset = "0xD56EB8", VA = "0xD56EB8", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xD56F54", Offset = "0xD56F54", VA = "0xD56F54", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xD56FC0", Offset = "0xD56FC0", VA = "0xD56FC0", Slot = "19")]
		protected virtual float GetDirectionFromJoint()
		{
			return default(float);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xD57024", Offset = "0xD57024", VA = "0xD57024", Slot = "20")]
		protected virtual Vector3 Direction2Axis(Direction givenDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xD570B4", Offset = "0xD570B4", VA = "0xD570B4", Slot = "21")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xD57450", Offset = "0xD57450", VA = "0xD57450", Slot = "22")]
		protected virtual void InitFrame()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xD57580", Offset = "0xD57580", VA = "0xD57580", Slot = "23")]
		protected virtual void InitDoor()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xD57834", Offset = "0xD57834", VA = "0xD57834", Slot = "24")]
		protected virtual void InitHandle()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xD57A44", Offset = "0xD57A44", VA = "0xD57A44", Slot = "25")]
		protected virtual void CreateInteractableObject(GameObject target)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xD57E78", Offset = "0xD57E78", VA = "0xD57E78", Slot = "26")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xD57E9C", Offset = "0xD57E9C", VA = "0xD57E9C", Slot = "27")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xD57EC0", Offset = "0xD57EC0", VA = "0xD57EC0", Slot = "28")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xD57F70", Offset = "0xD57F70", VA = "0xD57F70", Slot = "29")]
		protected virtual GameObject GetDoor()
		{
			return null;
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xD57FEC", Offset = "0xD57FEC", VA = "0xD57FEC")]
		public VRTK_Door()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[Obsolete("`VRTK.VRTK_Drawer` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsSlider`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Drawer")]
	public class VRTK_Drawer : VRTK_Control
	{
		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the drawer will be connected. If the game object moves the drawer will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The axis on which the drawer should open. All other axis will be frozen.")]
		public Direction direction;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The game object for the body.")]
		public GameObject body;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The game object for the handle.")]
		public GameObject handle;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The parent game object for the drawer content elements.")]
		public GameObject content;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Makes the content invisible while the drawer is closed.")]
		public bool hideContent;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("If the extension of the drawer is below this percentage then the drawer will snap shut.")]
		[Range(0f, 1f)]
		public float minSnapClose;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The maximum percentage of the drawer's total length that the drawer will open to.")]
		[Range(0f, 1f)]
		public float maxExtend;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody drawerRigidbody;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Rigidbody handleRigidbody;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected FixedJoint handleFixedJoint;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConfigurableJoint drawerJoint;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected VRTK_InteractableObject drawerInteractableObject;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected ConstantForce drawerSnapForce;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Direction finalDirection;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float subDirection;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float pullDistance;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected Vector3 initialPosition;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool drawerJointCreated;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool drawerSnapForceCreated;

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xD5807C", Offset = "0xD5807C", VA = "0xD5807C", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xD58354", Offset = "0xD58354", VA = "0xD58354", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xD583C0", Offset = "0xD583C0", VA = "0xD583C0", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xD589B0", Offset = "0xD589B0", VA = "0xD589B0", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xD589C0", Offset = "0xD589C0", VA = "0xD589C0", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xD58A88", Offset = "0xD58A88", VA = "0xD58A88", Slot = "19")]
		protected virtual void InitBody()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xD58ED4", Offset = "0xD58ED4", VA = "0xD58ED4", Slot = "20")]
		protected virtual void InitHandle()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xD590D0", Offset = "0xD590D0", VA = "0xD590D0", Slot = "21")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xD595CC", Offset = "0xD595CC", VA = "0xD595CC", Slot = "22")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xD5970C", Offset = "0xD5970C", VA = "0xD5970C", Slot = "23")]
		protected virtual GameObject GetBody()
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xD59788", Offset = "0xD59788", VA = "0xD59788", Slot = "24")]
		protected virtual GameObject GetHandle()
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xD59804", Offset = "0xD59804", VA = "0xD59804")]
		public VRTK_Drawer()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[Obsolete("`VRTK.VRTK_Knob` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsRotator`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Knob")]
	public class VRTK_Knob : VRTK_Control
	{
		[Token(Token = "0x200022F")]
		public enum KnobDirection
		{
			[Token(Token = "0x4000CC8")]
			x,
			[Token(Token = "0x4000CC9")]
			y,
			[Token(Token = "0x4000CCA")]
			z
		}

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the knob will be connected. If the game object moves the knob will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The axis on which the knob should rotate. All other axis will be frozen.")]
		public KnobDirection direction;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The minimum value of the knob.")]
		public float min;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The maximum value of the knob.")]
		public float max;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The increments in which knob values can change.")]
		public float stepSize;

		[Token(Token = "0x4000CBF")]
		protected const float MAX_AUTODETECT_KNOB_WIDTH = 3f;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected KnobDirection finalDirection;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected KnobDirection subDirection;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool subDirectionFound;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Quaternion initialRotation;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected Vector3 initialLocalRotation;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected ConfigurableJoint knobJoint;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool knobJointCreated;

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xD59878", Offset = "0xD59878", VA = "0xD59878", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xD598FC", Offset = "0xD598FC", VA = "0xD598FC", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xD59AAC", Offset = "0xD59AAC", VA = "0xD59AAC", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xD59AB4", Offset = "0xD59AB4", VA = "0xD59AB4", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xD59AD8", Offset = "0xD59AD8", VA = "0xD59AD8", Slot = "19")]
		protected virtual void InitKnob()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xD59E54", Offset = "0xD59E54", VA = "0xD59E54", Slot = "20")]
		protected virtual KnobDirection DetectDirection()
		{
			return default(KnobDirection);
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xD5A6AC", Offset = "0xD5A6AC", VA = "0xD5A6AC", Slot = "21")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xD5AF28", Offset = "0xD5AF28", VA = "0xD5AF28")]
		public VRTK_Knob()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Lever")]
	[Obsolete("`VRTK.VRTK_Lever` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsRotator`. This script will be removed in a future version of VRTK.")]
	public class VRTK_Lever : VRTK_Control
	{
		[Token(Token = "0x2000231")]
		public enum LeverDirection
		{
			[Token(Token = "0x4000CD6")]
			x,
			[Token(Token = "0x4000CD7")]
			y,
			[Token(Token = "0x4000CD8")]
			z
		}

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the lever will be connected. If the game object moves the lever will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The axis on which the lever should rotate. All other axis will be frozen.")]
		public LeverDirection direction;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The minimum angle of the lever counted from its initial position.")]
		public float minAngle;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The maximum angle of the lever counted from its initial position.")]
		public float maxAngle;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The increments in which lever values can change.")]
		public float stepSize;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The amount of friction the lever will have whilst swinging when it is not grabbed.")]
		public float releasedFriction;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("The amount of friction the lever will have whilst swinging when it is grabbed.")]
		public float grabbedFriction;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected HingeJoint leverHingeJoint;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool leverHingeJointCreated;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody leverRigidbody;

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xD5AF94", Offset = "0xD5AF94", VA = "0xD5AF94", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xD5B074", Offset = "0xD5B074", VA = "0xD5B074", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xD5B460", Offset = "0xD5B460", VA = "0xD5B460", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xD5B468", Offset = "0xD5B468", VA = "0xD5B468", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xD5B49C", Offset = "0xD5B49C", VA = "0xD5B49C", Slot = "19")]
		protected virtual void InitRigidbody()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xD5B5CC", Offset = "0xD5B5CC", VA = "0xD5B5CC", Slot = "20")]
		protected virtual void InitInteractableObject()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xD5B79C", Offset = "0xD5B79C", VA = "0xD5B79C", Slot = "21")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xD5B7C0", Offset = "0xD5B7C0", VA = "0xD5B7C0", Slot = "22")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xD5B7E4", Offset = "0xD5B7E4", VA = "0xD5B7E4", Slot = "23")]
		protected virtual void InitHingeJoint()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xD5B98C", Offset = "0xD5B98C", VA = "0xD5B98C", Slot = "24")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xD5BA3C", Offset = "0xD5BA3C", VA = "0xD5BA3C", Slot = "25")]
		protected virtual void SnapToValue(float value)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xD5BBF4", Offset = "0xD5BBF4", VA = "0xD5BBF4")]
		public VRTK_Lever()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[Obsolete("`VRTK.VRTK_Drawer` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsSlider`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Slider")]
	public class VRTK_Slider : VRTK_Control
	{
		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the wheel will be connected. If the game object moves the wheel will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The axis on which the slider should move. All other axis will be frozen.")]
		public Direction direction;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The collider to specify the minimum limit of the slider.")]
		public Collider minimumLimit;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The collider to specify the maximum limit of the slider.")]
		public Collider maximumLimit;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The minimum value of the slider.")]
		public float minimumValue;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The maximum value of the slider.")]
		public float maximumValue;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The increments in which slider values can change.")]
		public float stepSize;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("If this is checked then when the slider is released, it will snap to the nearest value position.")]
		public bool snapToStep;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The amount of friction the slider will have when it is released.")]
		public float releasedFriction;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected Direction finalDirection;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody sliderRigidbody;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected ConfigurableJoint sliderJoint;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool sliderJointCreated;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected Vector3 minimumLimitDiff;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Vector3 maximumLimitDiff;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Vector3 snapPosition;

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xD5BC64", Offset = "0xD5BC64", VA = "0xD5BC64", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xD5BD70", Offset = "0xD5BD70", VA = "0xD5BD70", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xD5BDC4", Offset = "0xD5BDC4", VA = "0xD5BDC4", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xD5CB30", Offset = "0xD5CB30", VA = "0xD5CB30", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xD5CB38", Offset = "0xD5CB38", VA = "0xD5CB38", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xD5CB78", Offset = "0xD5CB78", VA = "0xD5CB78", Slot = "19")]
		protected virtual Vector3 CalculateDiff(Vector3 initialPosition, Vector3 givenDirection, float scaleValue, float diffMultiplier, bool addition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xD5CBD8", Offset = "0xD5CBD8", VA = "0xD5CBD8", Slot = "20")]
		protected virtual void InitRigidbody()
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xD5CDC4", Offset = "0xD5CDC4", VA = "0xD5CDC4", Slot = "21")]
		protected virtual void InitInteractableObject()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xD5CF28", Offset = "0xD5CF28", VA = "0xD5CF28", Slot = "22")]
		protected virtual void InitJoint()
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xD5D0C8", Offset = "0xD5D0C8", VA = "0xD5D0C8", Slot = "23")]
		protected virtual void CalculateValue()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xD5D358", Offset = "0xD5D358", VA = "0xD5D358", Slot = "24")]
		protected virtual void ToggleSpring(bool state)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xD5D420", Offset = "0xD5D420", VA = "0xD5D420", Slot = "25")]
		protected virtual void SnapToValue()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xD5D4BC", Offset = "0xD5D4BC", VA = "0xD5D4BC")]
		public VRTK_Slider()
		{
		}
	}
	[Token(Token = "0x2000233")]
	[Obsolete("`VRTK.VRTK_SpringLever` has been deprecated and can be recreated with `VRTK.Controllables.PhysicsBased.VRTK_PhysicsRotator`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_SpringLever")]
	public class VRTK_SpringLever : VRTK_Lever
	{
		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The strength of the spring force that will be applied upon the lever.")]
		public float springStrength;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("The damper of the spring force that will be applied upon the lever.")]
		public float springDamper;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If this is checked then the spring will snap the lever to the nearest end point (either min or max angle). If it is unchecked, the lever will always snap to the min angle position.")]
		public bool snapToNearestLimit;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[Tooltip("If this is checked then the spring will always be active even when grabbing the lever.")]
		public bool alwaysActive;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		protected bool wasTowardZero;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		protected bool isGrabbed;

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xD5D530", Offset = "0xD5D530", VA = "0xD5D530", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xD5D5B0", Offset = "0xD5D5B0", VA = "0xD5D5B0", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xD5D5F8", Offset = "0xD5D5F8", VA = "0xD5D5F8", Slot = "21")]
		protected override void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xD5D628", Offset = "0xD5D628", VA = "0xD5D628", Slot = "22")]
		protected override void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xD5D654", Offset = "0xD5D654", VA = "0xD5D654", Slot = "26")]
		protected virtual float GetSpringTarget(bool towardZero)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xD5D66C", Offset = "0xD5D66C", VA = "0xD5D66C", Slot = "27")]
		protected virtual void ApplySpringForce()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xD5D760", Offset = "0xD5D760", VA = "0xD5D760")]
		public VRTK_SpringLever()
		{
		}
	}
	[Token(Token = "0x2000234")]
	[AddComponentMenu("VRTK/Scripts/Controls/3D/VRTK_Wheel")]
	[Obsolete("`VRTK.VRTK_Wheel` has been deprecated and can be recreated with `VRTK.Controllables.ArtificialBased.VRTK_ArtificialRotator`. This script will be removed in a future version of VRTK.")]
	public class VRTK_Wheel : VRTK_Control
	{
		[Token(Token = "0x2000235")]
		public enum GrabTypes
		{
			[Token(Token = "0x4000D04")]
			TrackObject,
			[Token(Token = "0x4000D05")]
			RotatorTrack
		}

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional game object to which the wheel will be connected. If the game object moves the wheel will follow along.")]
		public GameObject connectedTo;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The grab attach mechanic to use. Track Object allows for rotations of the controller, Rotator Track allows for grabbing the wheel and spinning it.")]
		public GrabTypes grabType;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The maximum distance the grabbing controller is away from the wheel before it is automatically released.")]
		public float detatchDistance;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The minimum value the wheel can be set to.")]
		public float minimumValue;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The maximum value the wheel can be set to.")]
		public float maximumValue;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The increments in which values can change.")]
		public float stepSize;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("If this is checked then when the wheel is released, it will snap to the step rotation.")]
		public bool snapToStep;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The amount of friction the wheel will have when it is grabbed.")]
		public float grabbedFriction;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The amount of friction the wheel will have when it is released.")]
		public float releasedFriction;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(0f, 359f)]
		[Tooltip("The maximum angle the wheel has to be turned to reach it's maximum value.")]
		public float maxAngle;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("If this is checked then the wheel cannot be turned beyond the minimum and maximum value.")]
		public bool lockAtLimits;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float angularVelocityLimit;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float springStrengthValue;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float springDamperValue;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Rigidbody wheelRigidbody;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected HingeJoint wheelHinge;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool wheelHingeCreated;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool initialValueCalculated;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float springAngle;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xD5D774", Offset = "0xD5D774", VA = "0xD5D774", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xD5D7B4", Offset = "0xD5D7B4", VA = "0xD5D7B4", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xD5D8F8", Offset = "0xD5D8F8", VA = "0xD5D8F8", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xD5D900", Offset = "0xD5D900", VA = "0xD5D900", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xD5D95C", Offset = "0xD5D95C", VA = "0xD5D95C", Slot = "19")]
		protected virtual void InitWheel()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xD5D9A0", Offset = "0xD5D9A0", VA = "0xD5D9A0", Slot = "20")]
		protected virtual void SetupRigidbody()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xD5DB74", Offset = "0xD5DB74", VA = "0xD5DB74", Slot = "21")]
		protected virtual void SetupHinge()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xD5DC70", Offset = "0xD5DC70", VA = "0xD5DC70", Slot = "22")]
		protected virtual void SetupHingeRestrictions()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xD5DFC0", Offset = "0xD5DFC0", VA = "0xD5DFC0", Slot = "23")]
		protected virtual void ConfigureHingeSpring()
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xD5E04C", Offset = "0xD5E04C", VA = "0xD5E04C", Slot = "24")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xD5E260", Offset = "0xD5E260", VA = "0xD5E260", Slot = "25")]
		protected virtual void WheelInteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xD5E298", Offset = "0xD5E298", VA = "0xD5E298", Slot = "26")]
		protected virtual void WheelInteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xD5E2F4", Offset = "0xD5E2F4", VA = "0xD5E2F4", Slot = "27")]
		protected virtual void CalculateValue()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xD5E4DC", Offset = "0xD5E4DC", VA = "0xD5E4DC")]
		public VRTK_Wheel()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class VRTK_IgnoreInteractTouchColliders : VRTK_SDKControllerReady
	{
		[Token(Token = "0x2000237")]
		[CompilerGenerated]
		private sealed class <DisableAllCollidersAtEndOfFrame>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_IgnoreInteractTouchColliders <>4__this;

			[Token(Token = "0x17000145")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CF8")]
				[Address(RVA = "0xD5EF50", Offset = "0xD5EF50", VA = "0xD5EF50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000146")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CFA")]
				[Address(RVA = "0xD5EF98", Offset = "0xD5EF98", VA = "0xD5EF98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0xD5E730", Offset = "0xD5E730", VA = "0xD5E730")]
			[DebuggerHidden]
			public <DisableAllCollidersAtEndOfFrame>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0xD5EE94", Offset = "0xD5EE94", VA = "0xD5EE94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0xD5EE98", Offset = "0xD5EE98", VA = "0xD5EE98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0xD5EF58", Offset = "0xD5EF58", VA = "0xD5EF58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000238")]
		[CompilerGenerated]
		private sealed class <DisableControllerColliderAtEndOfFrame>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_IgnoreInteractTouchColliders <>4__this;

			[Token(Token = "0x4000D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractTouch touchToIgnore;

			[Token(Token = "0x17000147")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CFE")]
				[Address(RVA = "0xD5F060", Offset = "0xD5F060", VA = "0xD5F060", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000148")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D00")]
				[Address(RVA = "0xD5F0A8", Offset = "0xD5F0A8", VA = "0xD5F0A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0xD5E7E8", Offset = "0xD5E7E8", VA = "0xD5E7E8")]
			[DebuggerHidden]
			public <DisableControllerColliderAtEndOfFrame>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xD5EFA0", Offset = "0xD5EFA0", VA = "0xD5EFA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xD5EFA4", Offset = "0xD5EFA4", VA = "0xD5EFA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xD5F068", Offset = "0xD5F068", VA = "0xD5F068", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Interact Touch scripts to ignore collisions with.")]
		public List<VRTK_InteractTouch> interactTouchToIgnore;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A collection of GameObjects to not include when ignoring collisions with the provided Interact Touch colliders.")]
		public List<GameObject> skipIgnore;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Collider[] localColliders;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Coroutine disableAllCollidersRoutine;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine disableControllerCollidersRoutine;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xD5E57C", Offset = "0xD5E57C", VA = "0xD5E57C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xD5E618", Offset = "0xD5E618", VA = "0xD5E618", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xD5E6BC", Offset = "0xD5E6BC", VA = "0xD5E6BC", Slot = "15")]
		[IteratorStateMachine(typeof(<DisableAllCollidersAtEndOfFrame>d__7))]
		protected virtual IEnumerator DisableAllCollidersAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xD5E758", Offset = "0xD5E758", VA = "0xD5E758", Slot = "16")]
		[IteratorStateMachine(typeof(<DisableControllerColliderAtEndOfFrame>d__8))]
		protected virtual IEnumerator DisableControllerColliderAtEndOfFrame(VRTK_InteractTouch touchToIgnore)
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xD5E810", Offset = "0xD5E810", VA = "0xD5E810", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xD5E928", Offset = "0xD5E928", VA = "0xD5E928", Slot = "17")]
		protected virtual void ManageAllCollisions(bool ignore)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xD5E9D4", Offset = "0xD5E9D4", VA = "0xD5E9D4", Slot = "18")]
		protected virtual bool ShouldExclude(Transform checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xD5EACC", Offset = "0xD5EACC", VA = "0xD5EACC", Slot = "19")]
		protected virtual void ManageTouchCollision(VRTK_InteractTouch touchToIgnore, bool ignore)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xD5ED8C", Offset = "0xD5ED8C", VA = "0xD5ED8C")]
		public VRTK_IgnoreInteractTouchColliders()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public abstract class VRTK_InteractableListener : MonoBehaviour
	{
		[Token(Token = "0x200023A")]
		[CompilerGenerated]
		private sealed class <SetupListenersAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableListener <>4__this;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D0A")]
				[Address(RVA = "0xD5F2B0", Offset = "0xD5F2B0", VA = "0xD5F2B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D0C")]
				[Address(RVA = "0xD5F2F8", Offset = "0xD5F2F8", VA = "0xD5F2F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xD5F1C8", Offset = "0xD5F1C8", VA = "0xD5F1C8")]
			[DebuggerHidden]
			public <SetupListenersAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xD5F1F8", Offset = "0xD5F1F8", VA = "0xD5F1F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xD5F1FC", Offset = "0xD5F1FC", VA = "0xD5F1FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xD5F2B8", Offset = "0xD5F2B8", VA = "0xD5F2B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Coroutine setupInteractableListenersRoutine;

		[Token(Token = "0x6000D01")]
		protected abstract bool SetupListeners(bool throwError);

		[Token(Token = "0x6000D02")]
		protected abstract void TearDownListeners();

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xD5F0B0", Offset = "0xD5F0B0", VA = "0xD5F0B0", Slot = "6")]
		protected virtual void EnableListeners()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xD5F108", Offset = "0xD5F108", VA = "0xD5F108", Slot = "7")]
		protected virtual void DisableListeners()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xD5F154", Offset = "0xD5F154", VA = "0xD5F154", Slot = "8")]
		[IteratorStateMachine(typeof(<SetupListenersAtEndOfFrame>d__5))]
		protected virtual IEnumerator SetupListenersAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xD5F1F0", Offset = "0xD5F1F0", VA = "0xD5F1F0")]
		protected VRTK_InteractableListener()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public struct InteractableObjectEventArgs
	{
		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;
	}
	[Token(Token = "0x200023C")]
	public delegate void InteractableObjectEventHandler(object sender, InteractableObjectEventArgs e);
	[Token(Token = "0x200023D")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_InteractableObject")]
	public class VRTK_InteractableObject : MonoBehaviour
	{
		[Token(Token = "0x200023E")]
		public enum InteractionType
		{
			[Token(Token = "0x4000D50")]
			None,
			[Token(Token = "0x4000D51")]
			NearTouch,
			[Token(Token = "0x4000D52")]
			NearUntouch,
			[Token(Token = "0x4000D53")]
			Touch,
			[Token(Token = "0x4000D54")]
			Untouch,
			[Token(Token = "0x4000D55")]
			Grab,
			[Token(Token = "0x4000D56")]
			Ungrab,
			[Token(Token = "0x4000D57")]
			Use,
			[Token(Token = "0x4000D58")]
			Unuse
		}

		[Token(Token = "0x200023F")]
		public enum AllowedController
		{
			[Token(Token = "0x4000D5A")]
			Both,
			[Token(Token = "0x4000D5B")]
			LeftOnly,
			[Token(Token = "0x4000D5C")]
			RightOnly
		}

		[Token(Token = "0x2000240")]
		public enum ValidDropTypes
		{
			[Token(Token = "0x4000D5E")]
			NoDrop,
			[Token(Token = "0x4000D5F")]
			DropAnywhere,
			[Token(Token = "0x4000D60")]
			DropValidSnapDropZone
		}

		[Token(Token = "0x2000241")]
		[CompilerGenerated]
		private sealed class <RegisterTeleportersAtEndOfFrame>d__175 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject <>4__this;

			[Token(Token = "0x1700014C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D9A")]
				[Address(RVA = "0xD65BA0", Offset = "0xD65BA0", VA = "0xD65BA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D9C")]
				[Address(RVA = "0xD65BE8", Offset = "0xD65BE8", VA = "0xD65BE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xD659A0", Offset = "0xD659A0", VA = "0xD659A0")]
			[DebuggerHidden]
			public <RegisterTeleportersAtEndOfFrame>d__175(int <>1__state)
			{
			}

			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xD659C8", Offset = "0xD659C8", VA = "0xD659C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xD659CC", Offset = "0xD659CC", VA = "0xD659CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xD65BA8", Offset = "0xD65BA8", VA = "0xD65BA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000242")]
		[CompilerGenerated]
		private sealed class <ForceStopInteractingAtEndOfFrame>d__177 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject <>4__this;

			[Token(Token = "0x1700014E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DA0")]
				[Address(RVA = "0xD65CD0", Offset = "0xD65CD0", VA = "0xD65CD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DA2")]
				[Address(RVA = "0xD65D18", Offset = "0xD65D18", VA = "0xD65D18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xD65BF0", Offset = "0xD65BF0", VA = "0xD65BF0")]
			[DebuggerHidden]
			public <ForceStopInteractingAtEndOfFrame>d__177(int <>1__state)
			{
			}

			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0xD65C18", Offset = "0xD65C18", VA = "0xD65C18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xD65C1C", Offset = "0xD65C1C", VA = "0xD65C1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xD65CD8", Offset = "0xD65CD8", VA = "0xD65CD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is checked then the Interactable Object component will be disabled when the Interactable Object is not being interacted with.")]
		[Header("General Settings")]
		public bool disableWhenIdle;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines which controller can initiate a near touch action.")]
		[Header("Near Touch Settings")]
		public AllowedController allowedNearTouchControllers;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Touch Settings")]
		[Tooltip("Determines which controller can initiate a touch action.")]
		public AllowedController allowedTouchControllers;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An array of colliders on the GameObject to ignore when being touched.")]
		public Collider[] ignoredColliders;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Grab Settings")]
		[Tooltip("Determines if the Interactable Object can be grabbed.")]
		public bool isGrabbable;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("If this is checked then the grab button on the controller needs to be continually held down to keep grabbing. If this is unchecked the grab button toggles the grab action with one button press to grab and another to release.")]
		public bool holdButtonToGrab;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Tooltip("If this is checked then the Interactable Object will stay grabbed to the controller when a teleport occurs. If it is unchecked then the Interactable Object will be released when a teleport occurs.")]
		public bool stayGrabbedOnTeleport;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Determines in what situation the Interactable Object can be dropped by the controller grab button.")]
		public ValidDropTypes validDrop;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Setting to a button will ensure the override button is used to grab this specific Interactable Object. Setting to `Undefined` will mean the `Grab Button` on the Interact Grab script will grab the object.")]
		public VRTK_ControllerEvents.ButtonAlias grabOverrideButton;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Determines which controller can initiate a grab action.")]
		public AllowedController allowedGrabControllers;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This determines how the grabbed Interactable Object will be attached to the controller when it is grabbed. If one isn't provided then the first Grab Attach script on the GameObject will be used, if one is not found and the object is grabbable then a Fixed Joint Grab Attach script will be created at runtime.")]
		public VRTK_BaseGrabAttach grabAttachMechanicScript;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The script to utilise when processing the secondary controller action on a secondary grab attempt. If one isn't provided then the first Secondary Controller Grab Action script on the GameObject will be used, if one is not found then no action will be taken on secondary grab.")]
		public VRTK_BaseGrabAction secondaryGrabActionScript;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Determines if the Interactable Object can be used.")]
		[Header("Use Settings")]
		public bool isUsable;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If this is checked then the use button on the controller needs to be continually held down to keep using. If this is unchecked the the use button toggles the use action with one button press to start using and another to stop using.")]
		public bool holdButtonToUse;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[Tooltip("If this is checked the Interactable Object can be used only if it is currently being grabbed.")]
		public bool useOnlyIfGrabbed;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[Tooltip("If this is checked then when a Pointer collides with the Interactable Object it will activate it's use action. If the the `Hold Button To Use` parameter is unchecked then whilst the Pointer is collising with the Interactable Object it will run the `Using` method. If `Hold Button To Use` is unchecked then the `Using` method will be run when the Pointer is deactivated. The Pointer will not emit the `Destination Set` event if it is affecting an Interactable Object with this setting checked as this prevents unwanted teleporting from happening when using an Interactable Object with a pointer.")]
		public bool pointerActivatesUseAction;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Setting to a button will ensure the override button is used to use this specific Interactable Object. Setting to `Undefined` will mean the `Use Button` on the Interact Use script will use the object.")]
		public VRTK_ControllerEvents.ButtonAlias useOverrideButton;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines which controller can initiate a use action.")]
		public AllowedController allowedUseControllers;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Obsolete("`VRTK_InteractableObject.objectHighlighter` has been replaced with `VRTK_InteractObjectHighlighter.objectHighlighter`. This parameter will be removed in a future version of VRTK.")]
		[Header("Obsolete Settings")]
		[ObsoleteInspector]
		public VRTK_BaseHighlighter objectHighlighter;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Obsolete("`VRTK_InteractableObject.touchHighlightColor` has been replaced with `VRTK_InteractObjectHighlighter.touchHighlight`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public Color touchHighlightColor;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody interactableRigidbody;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected HashSet<GameObject> currentIgnoredColliders;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HashSet<GameObject> hoveredSnapObjects;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected HashSet<GameObject> nearTouchingObjects;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected HashSet<GameObject> touchingObjects;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<GameObject> grabbingObjects;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_InteractUse usingObject;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Transform trackPoint;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool customTrackPoint;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Transform primaryControllerAttachPoint;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Transform secondaryControllerAttachPoint;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Transform previousParent;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool previousKinematicState;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool previousIsGrabbable;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool forcedDropped;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		protected bool forceDisabled;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected bool hoveredOverSnapDropZone;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
		protected bool snappedInSnapDropZone;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected VRTK_SnapDropZone storedSnapDropZone;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Vector3 previousLocalScale;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected bool startDisabled;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[HideInInspector]
		public int usingState;

		[Token(Token = "0x1700014B")]
		public bool isKinematic
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xD4FF40", Offset = "0xD4FF40", VA = "0xD4FF40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xD4FFC8", Offset = "0xD4FFC8", VA = "0xD4FFC8")]
			set
			{
			}
		}

		[Token(Token = "0x1400003D")]
		public event InteractableObjectEventHandler InteractableObjectEnabled
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0xD5F3B0", Offset = "0xD5F3B0", VA = "0xD5F3B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xD5F44C", Offset = "0xD5F44C", VA = "0xD5F44C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003E")]
		public event InteractableObjectEventHandler InteractableObjectDisabled
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0xD5F4E8", Offset = "0xD5F4E8", VA = "0xD5F4E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xD5F588", Offset = "0xD5F588", VA = "0xD5F588")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003F")]
		public event InteractableObjectEventHandler InteractableObjectNearTouched
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xD5F628", Offset = "0xD5F628", VA = "0xD5F628")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xD5F6C8", Offset = "0xD5F6C8", VA = "0xD5F6C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000040")]
		public event InteractableObjectEventHandler InteractableObjectNearUntouched
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xD5F768", Offset = "0xD5F768", VA = "0xD5F768")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xD5F808", Offset = "0xD5F808", VA = "0xD5F808")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000041")]
		public event InteractableObjectEventHandler InteractableObjectTouched
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xD5F8A8", Offset = "0xD5F8A8", VA = "0xD5F8A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xD5F948", Offset = "0xD5F948", VA = "0xD5F948")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000042")]
		public event InteractableObjectEventHandler InteractableObjectUntouched
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xD5F9E8", Offset = "0xD5F9E8", VA = "0xD5F9E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xD5FA88", Offset = "0xD5FA88", VA = "0xD5FA88")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000043")]
		public event InteractableObjectEventHandler InteractableObjectGrabbed
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xD57D38", Offset = "0xD57D38", VA = "0xD57D38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xD5FB28", Offset = "0xD5FB28", VA = "0xD5FB28")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000044")]
		public event InteractableObjectEventHandler InteractableObjectUngrabbed
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xD57DD8", Offset = "0xD57DD8", VA = "0xD57DD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xD5FBC8", Offset = "0xD5FBC8", VA = "0xD5FBC8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000045")]
		public event InteractableObjectEventHandler InteractableObjectUsed
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xD5FC68", Offset = "0xD5FC68", VA = "0xD5FC68")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xD5FD08", Offset = "0xD5FD08", VA = "0xD5FD08")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000046")]
		public event InteractableObjectEventHandler InteractableObjectUnused
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xD5FDA8", Offset = "0xD5FDA8", VA = "0xD5FDA8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xD5FE48", Offset = "0xD5FE48", VA = "0xD5FE48")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000047")]
		public event InteractableObjectEventHandler InteractableObjectEnteredSnapDropZone
		{
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xD5FEE8", Offset = "0xD5FEE8", VA = "0xD5FEE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xD5FF88", Offset = "0xD5FF88", VA = "0xD5FF88")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000048")]
		public event InteractableObjectEventHandler InteractableObjectExitedSnapDropZone
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xD60028", Offset = "0xD60028", VA = "0xD60028")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xD600C8", Offset = "0xD600C8", VA = "0xD600C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000049")]
		public event InteractableObjectEventHandler InteractableObjectSnappedToDropZone
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xD60168", Offset = "0xD60168", VA = "0xD60168")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xD60208", Offset = "0xD60208", VA = "0xD60208")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004A")]
		public event InteractableObjectEventHandler InteractableObjectUnsnappedFromDropZone
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xD602A8", Offset = "0xD602A8", VA = "0xD602A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xD60348", Offset = "0xD60348", VA = "0xD60348")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xD603E8", Offset = "0xD603E8", VA = "0xD603E8", Slot = "4")]
		public virtual void OnInteractableObjectEnabled(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xD60410", Offset = "0xD60410", VA = "0xD60410", Slot = "5")]
		public virtual void OnInteractableObjectDisabled(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xD60438", Offset = "0xD60438", VA = "0xD60438", Slot = "6")]
		public virtual void OnInteractableObjectNearTouched(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xD60460", Offset = "0xD60460", VA = "0xD60460", Slot = "7")]
		public virtual void OnInteractableObjectNearUntouched(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xD60488", Offset = "0xD60488", VA = "0xD60488", Slot = "8")]
		public virtual void OnInteractableObjectTouched(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xD604B0", Offset = "0xD604B0", VA = "0xD604B0", Slot = "9")]
		public virtual void OnInteractableObjectUntouched(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xD604D8", Offset = "0xD604D8", VA = "0xD604D8", Slot = "10")]
		public virtual void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xD60500", Offset = "0xD60500", VA = "0xD60500", Slot = "11")]
		public virtual void OnInteractableObjectUngrabbed(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xD60528", Offset = "0xD60528", VA = "0xD60528", Slot = "12")]
		public virtual void OnInteractableObjectUsed(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xD60550", Offset = "0xD60550", VA = "0xD60550", Slot = "13")]
		public virtual void OnInteractableObjectUnused(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xD60578", Offset = "0xD60578", VA = "0xD60578", Slot = "14")]
		public virtual void OnInteractableObjectEnteredSnapDropZone(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xD605A0", Offset = "0xD605A0", VA = "0xD605A0", Slot = "15")]
		public virtual void OnInteractableObjectExitedSnapDropZone(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xD605C8", Offset = "0xD605C8", VA = "0xD605C8", Slot = "16")]
		public virtual void OnInteractableObjectSnappedToDropZone(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xD605F0", Offset = "0xD605F0", VA = "0xD605F0", Slot = "17")]
		public virtual void OnInteractableObjectUnsnappedFromDropZone(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xD60618", Offset = "0xD60618", VA = "0xD60618")]
		public InteractableObjectEventArgs SetInteractableObjectEvent(GameObject interactingObject)
		{
			return default(InteractableObjectEventArgs);
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xD60634", Offset = "0xD60634", VA = "0xD60634", Slot = "18")]
		public virtual bool IsNearTouched()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xD606A4", Offset = "0xD606A4", VA = "0xD606A4", Slot = "19")]
		public virtual bool IsTouched()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xD606F4", Offset = "0xD606F4", VA = "0xD606F4", Slot = "20")]
		public virtual bool IsGrabbed([Optional] GameObject grabbedBy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xD607C4", Offset = "0xD607C4", VA = "0xD607C4", Slot = "21")]
		public virtual bool IsUsing([Optional] GameObject usedBy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xD608C4", Offset = "0xD608C4", VA = "0xD608C4", Slot = "22")]
		public virtual void StartNearTouching([Optional] VRTK_InteractNearTouch currentNearTouchingObject)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xD609DC", Offset = "0xD609DC", VA = "0xD609DC", Slot = "23")]
		public virtual void StopNearTouching([Optional] VRTK_InteractNearTouch previousNearTouchingObject)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xD60ADC", Offset = "0xD60ADC", VA = "0xD60ADC", Slot = "24")]
		public virtual void StartTouching([Optional] VRTK_InteractTouch currentTouchingObject)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xD60C0C", Offset = "0xD60C0C", VA = "0xD60C0C", Slot = "25")]
		public virtual void StopTouching([Optional] VRTK_InteractTouch previousTouchingObject)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xD60D24", Offset = "0xD60D24", VA = "0xD60D24", Slot = "26")]
		public virtual void Grabbed([Optional] VRTK_InteractGrab currentGrabbingObject)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xD60E48", Offset = "0xD60E48", VA = "0xD60E48", Slot = "27")]
		public virtual void Ungrabbed([Optional] VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xD60FAC", Offset = "0xD60FAC", VA = "0xD60FAC", Slot = "28")]
		public virtual void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xD610D0", Offset = "0xD610D0", VA = "0xD610D0", Slot = "29")]
		public virtual void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xD611B8", Offset = "0xD611B8", VA = "0xD611B8", Slot = "30")]
		[Obsolete("`VRTK_InteractableObject.ToggleHighlight` has been replaced with `VRTK_InteractableObject.Highlight` and `VRTK_InteractableObject.Unhighlight`. This method will be removed in a future version of VRTK.")]
		public virtual void ToggleHighlight(bool toggle, [Optional] Color? highlightColor)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xD61278", Offset = "0xD61278", VA = "0xD61278", Slot = "31")]
		[Obsolete("`VRTK_InteractableObject.Highlight` has been replaced with `VRTK_InteractObjectHighlighter.Highlight`. This method will be removed in a future version of VRTK.")]
		public virtual void Highlight(Color highlightColor)
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xD61368", Offset = "0xD61368", VA = "0xD61368", Slot = "32")]
		[Obsolete("`VRTK_InteractableObject.Unhighlight` has been replaced with `VRTK_InteractObjectHighlighter.Unhighlight`. This method will be removed in a future version of VRTK.")]
		public virtual void Unhighlight()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xD61424", Offset = "0xD61424", VA = "0xD61424", Slot = "33")]
		[Obsolete("`VRTK_InteractableObject.ResetHighlighter` has been replaced with `VRTK_InteractObjectHighlighter.ResetHighlighter`. This method will be removed in a future version of VRTK.")]
		public virtual void ResetHighlighter()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xD614DC", Offset = "0xD614DC", VA = "0xD614DC", Slot = "34")]
		public virtual void PauseCollisions(float delay)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xD615C0", Offset = "0xD615C0", VA = "0xD615C0", Slot = "35")]
		public virtual void ZeroVelocity()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xD616CC", Offset = "0xD616CC", VA = "0xD616CC", Slot = "36")]
		public virtual void SaveCurrentState()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xD617BC", Offset = "0xD617BC", VA = "0xD617BC", Slot = "37")]
		public virtual void GetPreviousState(out Transform previousParent, out bool previousKinematic, out bool previousGrabbable)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xD61800", Offset = "0xD61800", VA = "0xD61800", Slot = "38")]
		public virtual void OverridePreviousState(Transform previousParent, bool previousKinematic, bool previousGrabbable)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xD61834", Offset = "0xD61834", VA = "0xD61834", Slot = "39")]
		public virtual List<GameObject> GetNearTouchingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xD618B0", Offset = "0xD618B0", VA = "0xD618B0", Slot = "40")]
		public virtual List<GameObject> GetTouchingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xD6192C", Offset = "0xD6192C", VA = "0xD6192C", Slot = "41")]
		public virtual GameObject GetGrabbingObject()
		{
			return null;
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xD619AC", Offset = "0xD619AC", VA = "0xD619AC", Slot = "42")]
		public virtual GameObject GetSecondaryGrabbingObject()
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xD61A28", Offset = "0xD61A28", VA = "0xD61A28", Slot = "43")]
		public virtual GameObject GetUsingObject()
		{
			return null;
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xD61A44", Offset = "0xD61A44", VA = "0xD61A44", Slot = "44")]
		public virtual VRTK_InteractUse GetUsingScript()
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xD61A4C", Offset = "0xD61A4C", VA = "0xD61A4C", Slot = "45")]
		public virtual bool IsValidInteractableController(GameObject actualController, AllowedController controllerCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xD61B4C", Offset = "0xD61B4C", VA = "0xD61B4C", Slot = "46")]
		public virtual void ForceStopInteracting()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xD61BDC", Offset = "0xD61BDC", VA = "0xD61BDC", Slot = "47")]
		public virtual void ForceStopSecondaryGrabInteraction()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xD61CA0", Offset = "0xD61CA0", VA = "0xD61CA0", Slot = "48")]
		public virtual void RegisterTeleporters()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xD61CCC", Offset = "0xD61CCC", VA = "0xD61CCC", Slot = "49")]
		public virtual void UnregisterTeleporters()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xD61E30", Offset = "0xD61E30", VA = "0xD61E30", Slot = "50")]
		public virtual void StoreLocalScale()
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xD61E60", Offset = "0xD61E60", VA = "0xD61E60", Slot = "51")]
		public virtual void ToggleSnapDropZone(VRTK_SnapDropZone snapDropZone, bool state)
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xD61F90", Offset = "0xD61F90", VA = "0xD61F90", Slot = "52")]
		public virtual bool IsInSnapDropZone()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xD61F98", Offset = "0xD61F98", VA = "0xD61F98", Slot = "53")]
		public virtual void SetSnapDropZoneHover(VRTK_SnapDropZone snapDropZone, bool state)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xD620C8", Offset = "0xD620C8", VA = "0xD620C8", Slot = "54")]
		public virtual VRTK_SnapDropZone GetStoredSnapDropZone()
		{
			return null;
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xD620D0", Offset = "0xD620D0", VA = "0xD620D0", Slot = "55")]
		public virtual bool IsHoveredOverSnapDropZone()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xD620D8", Offset = "0xD620D8", VA = "0xD620D8", Slot = "56")]
		public virtual bool IsDroppable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xD6210C", Offset = "0xD6210C", VA = "0xD6210C", Slot = "57")]
		public virtual bool IsSwappable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xD62198", Offset = "0xD62198", VA = "0xD62198", Slot = "58")]
		public virtual bool PerformSecondaryAction()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xD622A4", Offset = "0xD622A4", VA = "0xD622A4", Slot = "59")]
		public virtual void ResetIgnoredColliders()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xD6257C", Offset = "0xD6257C", VA = "0xD6257C", Slot = "60")]
		public virtual void SubscribeToInteractionEvent(InteractionType givenType, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xD62594", Offset = "0xD62594", VA = "0xD62594", Slot = "61")]
		public virtual void UnsubscribeFromInteractionEvent(InteractionType givenType, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xD625AC", Offset = "0xD625AC", VA = "0xD625AC", Slot = "62")]
		public virtual Transform GetPrimaryAttachPoint()
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xD625B4", Offset = "0xD625B4", VA = "0xD625B4", Slot = "63")]
		public virtual Transform GetSecondaryAttachPoint()
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xD625BC", Offset = "0xD625BC", VA = "0xD625BC", Slot = "64")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xD627F0", Offset = "0xD627F0", VA = "0xD627F0", Slot = "65")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xD62864", Offset = "0xD62864", VA = "0xD62864", Slot = "66")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xD628D4", Offset = "0xD628D4", VA = "0xD628D4", Slot = "67")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xD629C4", Offset = "0xD629C4", VA = "0xD629C4", Slot = "68")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xD62ADC", Offset = "0xD62ADC", VA = "0xD62ADC", Slot = "69")]
		protected virtual bool IsIdle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xD62B5C", Offset = "0xD62B5C", VA = "0xD62B5C", Slot = "70")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xD62BA4", Offset = "0xD62BA4", VA = "0xD62BA4", Slot = "71")]
		protected virtual void LoadPreviousState()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xD62C80", Offset = "0xD62C80", VA = "0xD62C80", Slot = "72")]
		protected virtual void IgnoreColliders(GameObject touchingObject)
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xD62DEC", Offset = "0xD62DEC", VA = "0xD62DEC", Slot = "73")]
		protected virtual void ToggleEnableState(bool state)
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xD62E04", Offset = "0xD62E04", VA = "0xD62E04", Slot = "74")]
		protected virtual void AttemptSetGrabMechanic()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xD62F1C", Offset = "0xD62F1C", VA = "0xD62F1C", Slot = "75")]
		protected virtual void AttemptSetSecondaryGrabAction()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xD62FC8", Offset = "0xD62FC8", VA = "0xD62FC8", Slot = "76")]
		protected virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xD6308C", Offset = "0xD6308C", VA = "0xD6308C", Slot = "77")]
		protected virtual void PrimaryControllerGrab(GameObject currentGrabbingObject)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xD6316C", Offset = "0xD6316C", VA = "0xD6316C", Slot = "78")]
		protected virtual void SecondaryControllerGrab(GameObject currentGrabbingObject)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xD63304", Offset = "0xD63304", VA = "0xD63304", Slot = "79")]
		protected virtual void PrimaryControllerUngrab(GameObject previousGrabbingObject, GameObject previousSecondaryGrabbingObject)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xD63478", Offset = "0xD63478", VA = "0xD63478", Slot = "80")]
		protected virtual void SecondaryControllerUngrab(GameObject previousGrabbingObject)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xD63564", Offset = "0xD63564", VA = "0xD63564", Slot = "81")]
		protected virtual void UnpauseCollisions()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xD63600", Offset = "0xD63600", VA = "0xD63600", Slot = "82")]
		protected virtual void SetTrackPoint(GameObject currentGrabbingObject)
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xD63728", Offset = "0xD63728", VA = "0xD63728", Slot = "83")]
		protected virtual Transform CreateAttachPoint(string namePrefix, string nameSuffix, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xD639BC", Offset = "0xD639BC", VA = "0xD639BC", Slot = "84")]
		protected virtual void AddTrackPoint(GameObject currentGrabbingObject)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xD63B1C", Offset = "0xD63B1C", VA = "0xD63B1C", Slot = "85")]
		protected virtual void RemoveTrackPoint()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xD63C3C", Offset = "0xD63C3C", VA = "0xD63C3C", Slot = "86")]
		protected virtual void OnTeleporting(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xD63C7C", Offset = "0xD63C7C", VA = "0xD63C7C", Slot = "87")]
		protected virtual void OnTeleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xD63E08", Offset = "0xD63E08", VA = "0xD63E08", Slot = "88")]
		[IteratorStateMachine(typeof(<RegisterTeleportersAtEndOfFrame>d__175))]
		protected virtual IEnumerator RegisterTeleportersAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xD63E7C", Offset = "0xD63E7C", VA = "0xD63E7C", Slot = "89")]
		protected virtual void ResetUseState(GameObject checkObject)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xD63F68", Offset = "0xD63F68", VA = "0xD63F68", Slot = "90")]
		[IteratorStateMachine(typeof(<ForceStopInteractingAtEndOfFrame>d__177))]
		protected virtual IEnumerator ForceStopInteractingAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xD63FDC", Offset = "0xD63FDC", VA = "0xD63FDC", Slot = "91")]
		protected virtual void ForceStopAllInteractions()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xD64030", Offset = "0xD64030", VA = "0xD64030", Slot = "92")]
		protected virtual void StopTouchingInteractions()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xD64220", Offset = "0xD64220", VA = "0xD64220", Slot = "93")]
		protected virtual void StopGrabbingInteractions()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xD6436C", Offset = "0xD6436C", VA = "0xD6436C", Slot = "94")]
		protected virtual void StopUsingInteractions()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xD6446C", Offset = "0xD6446C", VA = "0xD6446C", Slot = "95")]
		protected virtual void ResetDropSnapType()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xD6460C", Offset = "0xD6460C", VA = "0xD6460C", Slot = "96")]
		protected virtual void ResetUsingObject()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xD64698", Offset = "0xD64698", VA = "0xD64698", Slot = "97")]
		protected virtual void ManageInteractionEvent(InteractionType givenType, bool state, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xD6474C", Offset = "0xD6474C", VA = "0xD6474C", Slot = "98")]
		protected virtual void ManageNearTouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xD64760", Offset = "0xD64760", VA = "0xD64760", Slot = "99")]
		protected virtual void ManageTouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xD64774", Offset = "0xD64774", VA = "0xD64774", Slot = "100")]
		protected virtual void ManageGrabSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xD64788", Offset = "0xD64788", VA = "0xD64788", Slot = "101")]
		protected virtual void ManageUseSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xD6479C", Offset = "0xD6479C", VA = "0xD6479C", Slot = "102")]
		protected virtual void ManageNearUntouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xD647B0", Offset = "0xD647B0", VA = "0xD647B0", Slot = "103")]
		protected virtual void ManageUntouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xD647C4", Offset = "0xD647C4", VA = "0xD647C4", Slot = "104")]
		protected virtual void ManageUngrabSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xD647D8", Offset = "0xD647D8", VA = "0xD647D8", Slot = "105")]
		protected virtual void ManageUnuseSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xD647EC", Offset = "0xD647EC", VA = "0xD647EC")]
		public VRTK_InteractableObject()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[Obsolete("`InteractControllerAppearanceEventArgs` will be removed in a future version of VRTK.")]
	public struct InteractControllerAppearanceEventArgs
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject ignoredObject;
	}
	[Token(Token = "0x2000244")]
	[Obsolete("`InteractControllerAppearanceEventHandler` will be removed in a future version of VRTK.")]
	public delegate void InteractControllerAppearanceEventHandler(object sender, InteractControllerAppearanceEventArgs e);
	[Token(Token = "0x2000245")]
	[Obsolete("`VRTK_InteractControllerAppearance` has been replaced with `VRTK_InteractObjectAppearance`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_InteractControllerAppearance")]
	public class VRTK_InteractControllerAppearance : MonoBehaviour
	{
		[Token(Token = "0x2000246")]
		[CompilerGenerated]
		private sealed class <HideController>d__48 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4000D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject interactingObject;

			[Token(Token = "0x4000D7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject ignoredObject;

			[Token(Token = "0x4000D7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public VRTK_InteractControllerAppearance <>4__this;

			[Token(Token = "0x17000150")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DCC")]
				[Address(RVA = "0xD67378", Offset = "0xD67378", VA = "0xD67378", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000151")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DCE")]
				[Address(RVA = "0xD673C0", Offset = "0xD673C0", VA = "0xD673C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xD671FC", Offset = "0xD671FC", VA = "0xD671FC")]
			[DebuggerHidden]
			public <HideController>d__48(int <>1__state)
			{
			}

			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xD6727C", Offset = "0xD6727C", VA = "0xD6727C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xD67280", Offset = "0xD67280", VA = "0xD67280", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xD67380", Offset = "0xD67380", VA = "0xD67380", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Hides the controller model when a valid touch occurs.")]
		[Header("Touch Visibility")]
		public bool hideControllerOnTouch;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The amount of seconds to wait before hiding the controller on touch.")]
		public float hideDelayOnTouch;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Hides the controller model when a valid grab occurs.")]
		[Header("Grab Visibility")]
		public bool hideControllerOnGrab;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of seconds to wait before hiding the controller on grab.")]
		public float hideDelayOnGrab;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Use Visibility")]
		[Tooltip("Hides the controller model when a valid use occurs.")]
		public bool hideControllerOnUse;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The amount of seconds to wait before hiding the controller on use.")]
		public float hideDelayOnUse;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool touchControllerShow;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool grabControllerShow;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Coroutine hideControllerRoutine;

		[Token(Token = "0x1400004B")]
		public event InteractControllerAppearanceEventHandler ControllerHidden
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0xD65F14", Offset = "0xD65F14", VA = "0xD65F14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0xD65FB0", Offset = "0xD65FB0", VA = "0xD65FB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004C")]
		public event InteractControllerAppearanceEventHandler ControllerVisible
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xD6604C", Offset = "0xD6604C", VA = "0xD6604C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xD660E8", Offset = "0xD660E8", VA = "0xD660E8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004D")]
		public event InteractControllerAppearanceEventHandler HiddenOnTouch
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xD66184", Offset = "0xD66184", VA = "0xD66184")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xD66220", Offset = "0xD66220", VA = "0xD66220")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004E")]
		public event InteractControllerAppearanceEventHandler VisibleOnTouch
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xD662BC", Offset = "0xD662BC", VA = "0xD662BC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xD66358", Offset = "0xD66358", VA = "0xD66358")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004F")]
		public event InteractControllerAppearanceEventHandler HiddenOnGrab
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xD663F4", Offset = "0xD663F4", VA = "0xD663F4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xD66490", Offset = "0xD66490", VA = "0xD66490")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000050")]
		public event InteractControllerAppearanceEventHandler VisibleOnGrab
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0xD6652C", Offset = "0xD6652C", VA = "0xD6652C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0xD665C8", Offset = "0xD665C8", VA = "0xD665C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000051")]
		public event InteractControllerAppearanceEventHandler HiddenOnUse
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xD66664", Offset = "0xD66664", VA = "0xD66664")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xD66700", Offset = "0xD66700", VA = "0xD66700")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000052")]
		public event InteractControllerAppearanceEventHandler VisibleOnUse
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xD6679C", Offset = "0xD6679C", VA = "0xD6679C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xD66838", Offset = "0xD66838", VA = "0xD66838")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xD668D4", Offset = "0xD668D4", VA = "0xD668D4", Slot = "4")]
		public virtual void OnControllerHidden(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xD66900", Offset = "0xD66900", VA = "0xD66900", Slot = "5")]
		public virtual void OnControllerVisible(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xD6692C", Offset = "0xD6692C", VA = "0xD6692C", Slot = "6")]
		public virtual void OnHiddenOnTouch(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xD66958", Offset = "0xD66958", VA = "0xD66958", Slot = "7")]
		public virtual void OnVisibleOnTouch(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xD66984", Offset = "0xD66984", VA = "0xD66984", Slot = "8")]
		public virtual void OnHiddenOnGrab(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xD669B0", Offset = "0xD669B0", VA = "0xD669B0", Slot = "9")]
		public virtual void OnVisibleOnGrab(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xD669DC", Offset = "0xD669DC", VA = "0xD669DC", Slot = "10")]
		public virtual void OnHiddenOnUse(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xD66A08", Offset = "0xD66A08", VA = "0xD66A08", Slot = "11")]
		public virtual void OnVisibleOnUse(InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xD66A34", Offset = "0xD66A34", VA = "0xD66A34", Slot = "12")]
		public virtual void ToggleControllerOnTouch(bool showController, GameObject touchingObject, GameObject ignoredObject)
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xD66AD8", Offset = "0xD66AD8", VA = "0xD66AD8", Slot = "13")]
		public virtual void ToggleControllerOnGrab(bool showController, GameObject grabbingObject, GameObject ignoredObject)
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xD66C5C", Offset = "0xD66C5C", VA = "0xD66C5C", Slot = "14")]
		public virtual void ToggleControllerOnUse(bool showController, GameObject usingObject, GameObject ignoredObject)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xD66E20", Offset = "0xD66E20", VA = "0xD66E20", Slot = "15")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xD67048", Offset = "0xD67048", VA = "0xD67048", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xD6705C", Offset = "0xD6705C", VA = "0xD6705C", Slot = "17")]
		protected virtual void ToggleController(bool showController, GameObject interactingObject, GameObject ignoredObject, float delayTime)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xD670C8", Offset = "0xD670C8", VA = "0xD670C8", Slot = "18")]
		protected virtual void ShowController(GameObject interactingObject, GameObject ignoredObject)
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xD67148", Offset = "0xD67148", VA = "0xD67148", Slot = "19")]
		[IteratorStateMachine(typeof(<HideController>d__48))]
		protected virtual IEnumerator HideController(GameObject interactingObject, GameObject ignoredObject, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xD67224", Offset = "0xD67224", VA = "0xD67224", Slot = "20")]
		protected virtual InteractControllerAppearanceEventArgs SetEventPayload(GameObject interactingObject, GameObject ignroedObject)
		{
			return default(InteractControllerAppearanceEventArgs);
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xD6726C", Offset = "0xD6726C", VA = "0xD6726C")]
		public VRTK_InteractControllerAppearance()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public struct InteractHapticsEventArgs
	{
		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;
	}
	[Token(Token = "0x2000248")]
	public delegate void InteractHapticsEventHandler(object sender, InteractHapticsEventArgs e);
	[Token(Token = "0x2000249")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_InteractHaptics")]
	public class VRTK_InteractHaptics : VRTK_InteractableListener
	{
		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Haptics On Near Touch Settings")]
		[Tooltip("Denotes the audio clip to use to rumble the controller on near touch.")]
		public AudioClip clipOnNearTouch;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[Tooltip("Denotes how strong the rumble in the controller will be on near touch.")]
		public float strengthOnNearTouch;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Denotes how long the rumble in the controller will last on near touch.")]
		public float durationOnNearTouch;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Denotes interval betweens rumble in the controller on near touch.")]
		public float intervalOnNearTouch;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If this is checked then the rumble will be cancelled when the controller is no longer near touching.")]
		public bool cancelOnNearUntouch;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Haptics On Touch Settings")]
		[Tooltip("Denotes the audio clip to use to rumble the controller on touch.")]
		public AudioClip clipOnTouch;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[Tooltip("Denotes how strong the rumble in the controller will be on touch.")]
		public float strengthOnTouch;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Denotes how long the rumble in the controller will last on touch.")]
		public float durationOnTouch;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Denotes interval betweens rumble in the controller on touch.")]
		public float intervalOnTouch;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If this is checked then the rumble will be cancelled when the controller is no longer touching.")]
		public bool cancelOnUntouch;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Denotes the audio clip to use to rumble the controller on grab.")]
		[Header("Haptics On Grab Settings")]
		public AudioClip clipOnGrab;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Denotes how strong the rumble in the controller will be on grab.")]
		[Range(0f, 1f)]
		public float strengthOnGrab;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Denotes how long the rumble in the controller will last on grab.")]
		public float durationOnGrab;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Denotes interval betweens rumble in the controller on grab.")]
		public float intervalOnGrab;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("If this is checked then the rumble will be cancelled when the controller is no longer grabbing.")]
		public bool cancelOnUngrab;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Haptics On Use Settings")]
		[Tooltip("Denotes the audio clip to use to rumble the controller on use.")]
		public AudioClip clipOnUse;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		[Tooltip("Denotes how strong the rumble in the controller will be on use.")]
		public float strengthOnUse;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Denotes how long the rumble in the controller will last on use.")]
		public float durationOnUse;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Denotes interval betweens rumble in the controller on use.")]
		public float intervalOnUse;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("If this is checked then the rumble will be cancelled when the controller is no longer using.")]
		public bool cancelOnUnuse;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Custom Settings")]
		[Tooltip("The Interactable Object to initiate the haptics from. If this is left blank, then the Interactable Object will need to be on the current or a parent GameObject.")]
		public VRTK_InteractableObject objectToAffect;

		[Token(Token = "0x4000D9A")]
		protected const float minInterval = 0.05f;

		[Token(Token = "0x14000053")]
		public event InteractHapticsEventHandler InteractHapticsNearTouched
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xD675B8", Offset = "0xD675B8", VA = "0xD675B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xD67654", Offset = "0xD67654", VA = "0xD67654")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000054")]
		public event InteractHapticsEventHandler InteractHapticsTouched
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xD676F0", Offset = "0xD676F0", VA = "0xD676F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xD6778C", Offset = "0xD6778C", VA = "0xD6778C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000055")]
		public event InteractHapticsEventHandler InteractHapticsGrabbed
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xD67828", Offset = "0xD67828", VA = "0xD67828")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xD678C4", Offset = "0xD678C4", VA = "0xD678C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000056")]
		public event InteractHapticsEventHandler InteractHapticsUsed
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xD67960", Offset = "0xD67960", VA = "0xD67960")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xD679FC", Offset = "0xD679FC", VA = "0xD679FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xD67A98", Offset = "0xD67A98", VA = "0xD67A98", Slot = "9")]
		public virtual void OnInteractHapticsNearTouched(InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xD67AC0", Offset = "0xD67AC0", VA = "0xD67AC0", Slot = "10")]
		public virtual void OnInteractHapticsTouched(InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xD67AE8", Offset = "0xD67AE8", VA = "0xD67AE8", Slot = "11")]
		public virtual void OnInteractHapticsGrabbed(InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xD67B10", Offset = "0xD67B10", VA = "0xD67B10", Slot = "12")]
		public virtual void OnInteractHapticsUsed(InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xD67B38", Offset = "0xD67B38", VA = "0xD67B38", Slot = "13")]
		public virtual void CancelHaptics(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xD67B44", Offset = "0xD67B44", VA = "0xD67B44", Slot = "14")]
		public virtual void HapticsOnNearTouch(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xD67C38", Offset = "0xD67C38", VA = "0xD67C38", Slot = "15")]
		public virtual void HapticsOnTouch(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xD67D2C", Offset = "0xD67D2C", VA = "0xD67D2C", Slot = "16")]
		public virtual void HapticsOnGrab(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xD67E20", Offset = "0xD67E20", VA = "0xD67E20", Slot = "17")]
		public virtual void HapticsOnUse(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xD67F14", Offset = "0xD67F14", VA = "0xD67F14", Slot = "18")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xD67F20", Offset = "0xD67F20", VA = "0xD67F20", Slot = "19")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xD67F2C", Offset = "0xD67F2C", VA = "0xD67F2C", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xD683F4", Offset = "0xD683F4", VA = "0xD683F4", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xD686C8", Offset = "0xD686C8", VA = "0xD686C8", Slot = "20")]
		protected virtual void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float interval)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xD686E0", Offset = "0xD686E0", VA = "0xD686E0", Slot = "21")]
		protected virtual InteractHapticsEventArgs SetEventPayload(VRTK_ControllerReference givenControllerReference)
		{
			return default(InteractHapticsEventArgs);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xD686FC", Offset = "0xD686FC", VA = "0xD686FC", Slot = "22")]
		protected virtual void NearTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xD68798", Offset = "0xD68798", VA = "0xD68798", Slot = "23")]
		protected virtual void TouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xD68834", Offset = "0xD68834", VA = "0xD68834", Slot = "24")]
		protected virtual void GrabHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xD688D0", Offset = "0xD688D0", VA = "0xD688D0", Slot = "25")]
		protected virtual void UseHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xD6896C", Offset = "0xD6896C", VA = "0xD6896C", Slot = "26")]
		protected virtual void CancelOn(GameObject givenObject)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xD68A08", Offset = "0xD68A08", VA = "0xD68A08", Slot = "27")]
		protected virtual void CancelNearTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xD68A2C", Offset = "0xD68A2C", VA = "0xD68A2C", Slot = "28")]
		protected virtual void CancelTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xD68A50", Offset = "0xD68A50", VA = "0xD68A50", Slot = "29")]
		protected virtual void CancelGrabHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xD68A74", Offset = "0xD68A74", VA = "0xD68A74", Slot = "30")]
		protected virtual void CancelUseHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xD68A98", Offset = "0xD68A98", VA = "0xD68A98")]
		public VRTK_InteractHaptics()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public struct InteractObjectAppearanceEventArgs
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject affectingObject;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject objectToIgnore;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VRTK_InteractableObject monitoringObject;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject.InteractionType interactionType;
	}
	[Token(Token = "0x200024B")]
	public delegate void InteractObjectAppearanceEventHandler(object sender, InteractObjectAppearanceEventArgs e);
	[Token(Token = "0x200024C")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_InteractObjectAppearance")]
	public class VRTK_InteractObjectAppearance : VRTK_InteractableListener
	{
		[Token(Token = "0x200024D")]
		public enum ValidInteractingObject
		{
			[Token(Token = "0x4000DC1")]
			Anything,
			[Token(Token = "0x4000DC2")]
			EitherController,
			[Token(Token = "0x4000DC3")]
			NeitherController,
			[Token(Token = "0x4000DC4")]
			LeftControllerOnly,
			[Token(Token = "0x4000DC5")]
			RightControllerOnly
		}

		[Token(Token = "0x200024E")]
		[CompilerGenerated]
		private sealed class <ToggleStateAfterTime>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractObjectAppearance <>4__this;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject objectToToggle;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool gameObjectShow;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool rendererShow;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public VRTK_InteractableObject.InteractionType interactionType;

			[Token(Token = "0x17000152")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E1F")]
				[Address(RVA = "0xD6B7D4", Offset = "0xD6B7D4", VA = "0xD6B7D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000153")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E21")]
				[Address(RVA = "0xD6B81C", Offset = "0xD6B81C", VA = "0xD6B81C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xD6A418", Offset = "0xD6A418", VA = "0xD6A418")]
			[DebuggerHidden]
			public <ToggleStateAfterTime>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xD6B6FC", Offset = "0xD6B6FC", VA = "0xD6B6FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xD6B700", Offset = "0xD6B700", VA = "0xD6B700", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xD6B7DC", Offset = "0xD6B7DC", VA = "0xD6B7DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("General Settings")]
		[Tooltip("The GameObject to affect the appearance of. If this is null then then the interacting object will be used (usually the controller).")]
		public GameObject objectToAffect;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Interactable Object to monitor for the interaction event (near touch/touch/grab/use).")]
		[SerializeField]
		protected VRTK_InteractableObject objectToMonitor;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Default Appearance Settings")]
		[Tooltip("If this is checked then the `Object To Affect` will be an active GameObject when the script is enabled. If it's unchecked then it will be disabled. This only takes effect if `Affect Interacting Object` is unticked.")]
		public bool gameObjectActiveByDefault;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("If this is checked then the `Object To Affect` will have visible renderers when the script is enabled. If it's unchecked then it will have it's renderers disabled. This only takes effect if `Affect Interacting Object` is unticked.")]
		public bool rendererVisibleByDefault;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Tooltip("If this is checked then the `Object To Affect` will be an active GameObject when the `Object To Monitor` is near touched. If it's unchecked then it will be disabled on near touch.")]
		[Header("Near Touch Appearance Settings")]
		public bool gameObjectActiveOnNearTouch;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[Tooltip("If this is checked then the `Object To Affect` will have visible renderers when the `Object To Monitor` is near touched. If it's unchecked then it will have it's renderers disabled on near touch.")]
		public bool rendererVisibleOnNearTouch;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The amount of time to wait before the near touch appearance settings are applied after the near touch event.")]
		public float nearTouchAppearanceDelay;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The amount of time to wait before the previous appearance settings are applied after the near untouch event.")]
		public float nearUntouchAppearanceDelay;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Determines what type of interacting object will affect the appearance of the `Object To Affect` after the near touch and near untouch event.")]
		public ValidInteractingObject validNearTouchInteractingObject;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Touch Appearance Settings")]
		[Tooltip("If this is checked then the `Object To Affect` will be an active GameObject when the `Object To Monitor` is touched. If it's unchecked then it will be disabled on touch.")]
		public bool gameObjectActiveOnTouch;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this is checked then the `Object To Affect` will have visible renderers when the `Object To Monitor` is touched. If it's unchecked then it will have it's renderers disabled on touch.")]
		public bool rendererVisibleOnTouch;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The amount of time to wait before the touch appearance settings are applied after the touch event.")]
		public float touchAppearanceDelay;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of time to wait before the previous appearance settings are applied after the untouch event.")]
		public float untouchAppearanceDelay;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Determines what type of interacting object will affect the appearance of the `Object To Affect` after the touch/untouch event.")]
		public ValidInteractingObject validTouchInteractingObject;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Grab Appearance Settings")]
		[Tooltip("If this is checked then the `Object To Affect` will be an active GameObject when the `Object To Monitor` is grabbed. If it's unchecked then it will be disabled on grab.")]
		public bool gameObjectActiveOnGrab;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("If this is checked then the `Object To Affect` will have visible renderers when the `Object To Monitor` is grabbed. If it's unchecked then it will have it's renderers disabled on grab.")]
		public bool rendererVisibleOnGrab;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The amount of time to wait before the grab appearance settings are applied after the grab event.")]
		public float grabAppearanceDelay;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of time to wait before the previous appearance settings are applied after the ungrab event.")]
		public float ungrabAppearanceDelay;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Determines what type of interacting object will affect the appearance of the `Object To Affect` after the grab/ungrab event.")]
		public ValidInteractingObject validGrabInteractingObject;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Use Appearance Settings")]
		[Tooltip("If this is checked then the `Object To Affect` will be an active GameObject when the `Object To Monitor` is used. If it's unchecked then it will be disabled on use.")]
		public bool gameObjectActiveOnUse;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("If this is checked then the `Object To Affect` will have visible renderers when the `Object To Monitor` is used. If it's unchecked then it will have it's renderers disabled on use.")]
		public bool rendererVisibleOnUse;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The amount of time to wait before the use appearance settings are applied after the use event.")]
		public float useAppearanceDelay;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The amount of time to wait before the previous appearance settings are applied after the unuse event.")]
		public float unuseAppearanceDelay;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Determines what type of interacting object will affect the appearance of the `Object To Affect` after the use/unuse event.")]
		public ValidInteractingObject validUseInteractingObject;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<GameObject, bool> currentRenderStates;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Dictionary<GameObject, bool> currentGameObjectStates;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<GameObject, Coroutine> affectingRoutines;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected HashSet<GameObject> nearTouchingObjects;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected HashSet<GameObject> touchingObjects;

		[Token(Token = "0x14000057")]
		public event InteractObjectAppearanceEventHandler GameObjectEnabled
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xD68CE0", Offset = "0xD68CE0", VA = "0xD68CE0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xD68D7C", Offset = "0xD68D7C", VA = "0xD68D7C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000058")]
		public event InteractObjectAppearanceEventHandler GameObjectDisabled
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xD68E18", Offset = "0xD68E18", VA = "0xD68E18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xD68EB4", Offset = "0xD68EB4", VA = "0xD68EB4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000059")]
		public event InteractObjectAppearanceEventHandler RenderersEnabled
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xD68F50", Offset = "0xD68F50", VA = "0xD68F50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0xD68FEC", Offset = "0xD68FEC", VA = "0xD68FEC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005A")]
		public event InteractObjectAppearanceEventHandler RenderersDisabled
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xD69088", Offset = "0xD69088", VA = "0xD69088")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0xD69124", Offset = "0xD69124", VA = "0xD69124")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xD691C0", Offset = "0xD691C0", VA = "0xD691C0", Slot = "9")]
		public virtual void OnGameObjectEnabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xD69204", Offset = "0xD69204", VA = "0xD69204", Slot = "10")]
		public virtual void OnGameObjectDisabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xD69248", Offset = "0xD69248", VA = "0xD69248", Slot = "11")]
		public virtual void OnRenderersEnabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xD6928C", Offset = "0xD6928C", VA = "0xD6928C", Slot = "12")]
		public virtual void OnRenderersDisabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xD692D0", Offset = "0xD692D0", VA = "0xD692D0", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xD69404", Offset = "0xD69404", VA = "0xD69404", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xD69434", Offset = "0xD69434", VA = "0xD69434", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xD69994", Offset = "0xD69994", VA = "0xD69994", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xD69C28", Offset = "0xD69C28", VA = "0xD69C28", Slot = "15")]
		protected virtual InteractObjectAppearanceEventArgs SetPayload(GameObject affectingObject, VRTK_InteractableObject.InteractionType interactionType)
		{
			return default(InteractObjectAppearanceEventArgs);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xD69CB0", Offset = "0xD69CB0", VA = "0xD69CB0", Slot = "16")]
		protected virtual void RestoreDefaults()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xD69F9C", Offset = "0xD69F9C", VA = "0xD69F9C", Slot = "17")]
		protected virtual GameObject ObjectToIgnore()
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xD6A024", Offset = "0xD6A024", VA = "0xD6A024", Slot = "18")]
		protected virtual void EmitRenderEvent(GameObject objectToToggle, bool rendererShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xD6A0BC", Offset = "0xD6A0BC", VA = "0xD6A0BC", Slot = "19")]
		protected virtual void EmitGameObjectEvent(GameObject objectToToggle, bool gameObjectShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xD6A154", Offset = "0xD6A154", VA = "0xD6A154", Slot = "20")]
		protected virtual void ToggleState(GameObject objectToToggle, bool gameObjectShow, bool rendererShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xD6A350", Offset = "0xD6A350", VA = "0xD6A350", Slot = "21")]
		[IteratorStateMachine(typeof(<ToggleStateAfterTime>d__56))]
		protected virtual IEnumerator ToggleStateAfterTime(GameObject objectToToggle, bool gameObjectShow, bool rendererShow, float delayTime, VRTK_InteractableObject.InteractionType interactionType)
		{
			return null;
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xD6A440", Offset = "0xD6A440", VA = "0xD6A440", Slot = "22")]
		protected virtual void CancelRoutines([Optional] GameObject currentAffectingObject)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xD6A65C", Offset = "0xD6A65C", VA = "0xD6A65C", Slot = "23")]
		protected virtual GameObject GetActualController(GameObject givenObject)
		{
			return null;
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xD6A6E8", Offset = "0xD6A6E8", VA = "0xD6A6E8", Slot = "24")]
		protected virtual void InteractableObjectDisabled(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xD6A790", Offset = "0xD6A790", VA = "0xD6A790", Slot = "25")]
		protected virtual bool IsValidInteractingObject(GameObject givenObject, ValidInteractingObject givenInteractingObjectValidType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xD6A910", Offset = "0xD6A910", VA = "0xD6A910", Slot = "26")]
		protected virtual void InteractableObjectNearTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xD6AA80", Offset = "0xD6AA80", VA = "0xD6AA80", Slot = "27")]
		protected virtual void InteractableObjectNearUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xD6ABF0", Offset = "0xD6ABF0", VA = "0xD6ABF0", Slot = "28")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xD6AD60", Offset = "0xD6AD60", VA = "0xD6AD60", Slot = "29")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xD6AF0C", Offset = "0xD6AF0C", VA = "0xD6AF0C", Slot = "30")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xD6B050", Offset = "0xD6B050", VA = "0xD6B050", Slot = "31")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xD6B238", Offset = "0xD6B238", VA = "0xD6B238", Slot = "32")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xD6B37C", Offset = "0xD6B37C", VA = "0xD6B37C", Slot = "33")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xD6B564", Offset = "0xD6B564", VA = "0xD6B564")]
		public VRTK_InteractObjectAppearance()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public struct InteractObjectHighlighterEventArgs
	{
		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_InteractableObject.InteractionType interactionType;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color highlightColor;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject affectingObject;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_InteractableObject objectToMonitor;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject affectedObject;
	}
	[Token(Token = "0x2000250")]
	public delegate void InteractObjectHighlighterEventHandler(object sender, InteractObjectHighlighterEventArgs e);
	[Token(Token = "0x2000251")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_InteractObjectHighlighter")]
	public class VRTK_InteractObjectHighlighter : VRTK_InteractableListener
	{
		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The colour to highlight the object on the near touch interaction.")]
		[Header("Object Interaction Settings")]
		public Color nearTouchHighlight;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The colour to highlight the object on the touch interaction.")]
		public Color touchHighlight;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The colour to highlight the object on the grab interaction.")]
		public Color grabHighlight;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The colour to highlight the object on the use interaction.")]
		public Color useHighlight;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Interactable Object to monitor the interactions on. If this is left blank, then the Interactable Object will need to be on the current or a parent GameObject.")]
		[Header("Custom Settings")]
		public VRTK_InteractableObject objectToMonitor;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to highlight.")]
		public GameObject objectToHighlight;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An optional Highlighter to use when highlighting the specified Object. If this is left blank, then the first active highlighter on the same GameObject will be used, if one isn't found then a Material Color Swap Highlighter will be created at runtime.")]
		public VRTK_BaseHighlighter objectHighlighter;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Obsolete Settings")]
		[Obsolete("`objectToAffect` has been replaced with `objectToHighlight`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public VRTK_InteractableObject objectToAffect;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Color currentColour;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_BaseHighlighter baseHighlighter;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool createBaseHighlighter;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected GameObject currentAffectingObject;

		[Token(Token = "0x1400005B")]
		public event InteractObjectHighlighterEventHandler InteractObjectHighlighterHighlighted
		{
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xD6BA40", Offset = "0xD6BA40", VA = "0xD6BA40")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xD6BADC", Offset = "0xD6BADC", VA = "0xD6BADC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005C")]
		public event InteractObjectHighlighterEventHandler InteractObjectHighlighterUnhighlighted
		{
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xD6BB78", Offset = "0xD6BB78", VA = "0xD6BB78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xD6BC14", Offset = "0xD6BC14", VA = "0xD6BC14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xD6BCB0", Offset = "0xD6BCB0", VA = "0xD6BCB0", Slot = "9")]
		public virtual void OnInteractObjectHighlighterHighlighted(InteractObjectHighlighterEventArgs e)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xD6BD00", Offset = "0xD6BD00", VA = "0xD6BD00", Slot = "10")]
		public virtual void OnInteractObjectHighlighterUnhighlighted(InteractObjectHighlighterEventArgs e)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xD6BD50", Offset = "0xD6BD50", VA = "0xD6BD50", Slot = "11")]
		public virtual void ResetHighlighter()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xD6BDD8", Offset = "0xD6BDD8", VA = "0xD6BDD8", Slot = "12")]
		public virtual void Highlight(Color highlightColor)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xD6BF58", Offset = "0xD6BF58", VA = "0xD6BF58", Slot = "13")]
		public virtual void Unhighlight()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xD6C004", Offset = "0xD6C004", VA = "0xD6C004", Slot = "14")]
		public virtual Color GetCurrentHighlightColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xD6C010", Offset = "0xD6C010", VA = "0xD6C010", Slot = "15")]
		public virtual GameObject GetAffectingObject()
		{
			return null;
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xD6C018", Offset = "0xD6C018", VA = "0xD6C018", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xD6C1D8", Offset = "0xD6C1D8", VA = "0xD6C1D8", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xD6C24C", Offset = "0xD6C24C", VA = "0xD6C24C", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xD6C714", Offset = "0xD6C714", VA = "0xD6C714", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xD6C9E8", Offset = "0xD6C9E8", VA = "0xD6C9E8", Slot = "18")]
		protected virtual InteractObjectHighlighterEventArgs SetEventArgs(VRTK_InteractableObject.InteractionType interactionType, GameObject affectingObject)
		{
			return default(InteractObjectHighlighterEventArgs);
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xD6CA94", Offset = "0xD6CA94", VA = "0xD6CA94", Slot = "19")]
		protected virtual void NearTouchHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xD6CB1C", Offset = "0xD6CB1C", VA = "0xD6CB1C", Slot = "20")]
		protected virtual void NearTouchUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xD6CC20", Offset = "0xD6CC20", VA = "0xD6CC20", Slot = "21")]
		protected virtual void TouchHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xD6CCA8", Offset = "0xD6CCA8", VA = "0xD6CCA8", Slot = "22")]
		protected virtual void TouchUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xD6CE0C", Offset = "0xD6CE0C", VA = "0xD6CE0C", Slot = "23")]
		protected virtual void GrabHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xD6CF18", Offset = "0xD6CF18", VA = "0xD6CF18", Slot = "24")]
		protected virtual void GrabUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xD6D0E4", Offset = "0xD6D0E4", VA = "0xD6D0E4", Slot = "25")]
		protected virtual void UseHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xD6D16C", Offset = "0xD6D16C", VA = "0xD6D16C", Slot = "26")]
		protected virtual void UseUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xD6D3A0", Offset = "0xD6D3A0", VA = "0xD6D3A0", Slot = "27")]
		protected virtual void InitialiseHighlighter(Color highlightColor)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xD6D570", Offset = "0xD6D570", VA = "0xD6D570", Slot = "28")]
		protected virtual VRTK_BaseHighlighter GetValidHighlighter()
		{
			return null;
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xD6D5F0", Offset = "0xD6D5F0", VA = "0xD6D5F0")]
		public VRTK_InteractObjectHighlighter()
		{
		}
	}
	[Token(Token = "0x2000252")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/VRTK_ObjectTouchAutoInteract")]
	public class VRTK_ObjectTouchAutoInteract : VRTK_InteractableListener
	{
		[Token(Token = "0x2000253")]
		public enum AutoInteractions
		{
			[Token(Token = "0x4000DEC")]
			Never,
			[Token(Token = "0x4000DED")]
			NoButtonHeld,
			[Token(Token = "0x4000DEE")]
			ButtonHeld
		}

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Determines when a grab on touch should occur.")]
		[Header("Auto Grab")]
		public AutoInteractions grabOnTouchWhen;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("After being ungrabbed, another auto grab on touch can only occur after this time.")]
		public float regrabDelay;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If this is checked then the grab on touch check will happen every frame and not only on the first touch of the Interactable Object.")]
		public bool continuousGrabCheck;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Auto Use")]
		[Tooltip("Determines when a use on touch should occur.")]
		public AutoInteractions useOnTouchWhen;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("After being unused, another auto use on touch can only occur after this time.")]
		public float reuseDelay;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If this is checked then the use on touch check will happen every frame and not only on the first touch of the Interactable Object.")]
		public bool continuousUseCheck;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Custom Settings")]
		[Tooltip("The Interactable Object that the auto interaction will occur on. If this is blank then the script must be on the same GameObject as the Interactable Object script.")]
		public VRTK_InteractableObject interactableObject;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float regrabTimer;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float reuseTimer;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<GameObject> touchers;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xD6D608", Offset = "0xD6D608", VA = "0xD6D608", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xD6D680", Offset = "0xD6D680", VA = "0xD6D680", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xD6D68C", Offset = "0xD6D68C", VA = "0xD6D68C", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xD6D7AC", Offset = "0xD6D7AC", VA = "0xD6D7AC", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xD6DB24", Offset = "0xD6DB24", VA = "0xD6DB24", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xD6DCA8", Offset = "0xD6DCA8", VA = "0xD6DCA8", Slot = "12")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xD6DD08", Offset = "0xD6DD08", VA = "0xD6DD08", Slot = "13")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xD6DD20", Offset = "0xD6DD20", VA = "0xD6DD20", Slot = "14")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xD6DD4C", Offset = "0xD6DD4C", VA = "0xD6DD4C", Slot = "15")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xD6DD78", Offset = "0xD6DD78", VA = "0xD6DD78", Slot = "16")]
		protected virtual void ManageTouchers(GameObject interactingObject, bool add)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xD6DE10", Offset = "0xD6DE10", VA = "0xD6DE10", Slot = "17")]
		protected virtual void CheckGrab(GameObject interactingObject)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xD6DF18", Offset = "0xD6DF18", VA = "0xD6DF18", Slot = "18")]
		protected virtual void CheckUse(GameObject interactingObject)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xD6E064", Offset = "0xD6E064", VA = "0xD6E064")]
		public VRTK_ObjectTouchAutoInteract()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public struct ControllerInteractionEventArgs
	{
		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float buttonPressure;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector2 touchpadAxis;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float touchpadAngle;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 touchpadTwoAxis;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float touchpadTwoAngle;
	}
	[Token(Token = "0x2000255")]
	public enum Hand
	{
		[Token(Token = "0x4000DF6")]
		left,
		[Token(Token = "0x4000DF7")]
		right
	}
	[Token(Token = "0x2000256")]
	public delegate void ControllerInteractionEventHandler(object sender, ControllerInteractionEventArgs e);
	[Token(Token = "0x2000257")]
	public class VRTK_ControllerEvents : MonoBehaviour
	{
		[Token(Token = "0x2000258")]
		public enum ButtonAlias
		{
			[Token(Token = "0x4000E61")]
			Undefined,
			[Token(Token = "0x4000E62")]
			TriggerHairline,
			[Token(Token = "0x4000E63")]
			TriggerTouch,
			[Token(Token = "0x4000E64")]
			TriggerPress,
			[Token(Token = "0x4000E65")]
			TriggerClick,
			[Token(Token = "0x4000E66")]
			GripHairline,
			[Token(Token = "0x4000E67")]
			GripTouch,
			[Token(Token = "0x4000E68")]
			GripPress,
			[Token(Token = "0x4000E69")]
			GripClick,
			[Token(Token = "0x4000E6A")]
			TouchpadTouch,
			[Token(Token = "0x4000E6B")]
			TouchpadPress,
			[Token(Token = "0x4000E6C")]
			TouchpadTwoTouch,
			[Token(Token = "0x4000E6D")]
			TouchpadTwoPress,
			[Token(Token = "0x4000E6E")]
			ButtonOneTouch,
			[Token(Token = "0x4000E6F")]
			ButtonOnePress,
			[Token(Token = "0x4000E70")]
			ButtonTwoTouch,
			[Token(Token = "0x4000E71")]
			ButtonTwoPress,
			[Token(Token = "0x4000E72")]
			StartMenuPress,
			[Token(Token = "0x4000E73")]
			TouchpadSense,
			[Token(Token = "0x4000E74")]
			TriggerSense,
			[Token(Token = "0x4000E75")]
			MiddleFingerSense,
			[Token(Token = "0x4000E76")]
			RingFingerSense,
			[Token(Token = "0x4000E77")]
			PinkyFingerSense,
			[Token(Token = "0x4000E78")]
			GripSense,
			[Token(Token = "0x4000E79")]
			GripSensePress
		}

		[Token(Token = "0x2000259")]
		public enum Vector2AxisAlias
		{
			[Token(Token = "0x4000E7B")]
			Undefined,
			[Token(Token = "0x4000E7C")]
			Touchpad,
			[Token(Token = "0x4000E7D")]
			TouchpadTwo
		}

		[Token(Token = "0x200025A")]
		public enum AxisType
		{
			[Token(Token = "0x4000E7F")]
			Digital,
			[Token(Token = "0x4000E80")]
			Axis,
			[Token(Token = "0x4000E81")]
			SenseAxis
		}

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The amount of fidelity in the changes on the axis, which is defaulted to 1. Any number higher than 2 will probably give too sensitive results.")]
		[Header("Axis Refinement Settings")]
		public int axisFidelity;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		[Tooltip("The level on a sense axis to reach before the sense axis is forced to 0f")]
		public float senseAxisForceZeroThreshold;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The amount of pressure required to be applied to a sense button before considering the sense button pressed.")]
		public float senseAxisPressThreshold;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Trigger Refinement Settings")]
		[Tooltip("The level on the trigger axis to reach before a click is registered.")]
		public float triggerClickThreshold;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The level on the trigger axis to reach before the axis is forced to 0f.")]
		public float triggerForceZeroThreshold;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If this is checked then the trigger axis will be forced to 0f when the trigger button reports an untouch event.")]
		public bool triggerAxisZeroOnUntouch;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The level on the grip axis to reach before a click is registered.")]
		[Header("Grip Refinement Settings")]
		public float gripClickThreshold;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The level on the grip axis to reach before the axis is forced to 0f.")]
		public float gripForceZeroThreshold;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If this is checked then the grip axis will be forced to 0f when the grip button reports an untouch event.")]
		public bool gripAxisZeroOnUntouch;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[HideInInspector]
		public bool triggerPressed;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[HideInInspector]
		public bool triggerTouched;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[HideInInspector]
		public bool triggerHairlinePressed;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public bool triggerClicked;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[HideInInspector]
		public bool triggerAxisChanged;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[HideInInspector]
		public bool triggerSenseAxisChanged;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		[HideInInspector]
		public bool gripPressed;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool gripTouched;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[HideInInspector]
		public bool gripHairlinePressed;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[HideInInspector]
		public bool gripClicked;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[HideInInspector]
		public bool gripAxisChanged;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public bool touchpadPressed;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[HideInInspector]
		public bool touchpadTouched;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[HideInInspector]
		public bool touchpadAxisChanged;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[HideInInspector]
		public bool touchpadSenseAxisChanged;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool touchpadTwoTouched;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[HideInInspector]
		public bool touchpadTwoPressed;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[HideInInspector]
		public bool touchpadTwoAxisChanged;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[HideInInspector]
		public bool buttonOnePressed;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public bool buttonOneTouched;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[HideInInspector]
		public bool buttonTwoPressed;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		[HideInInspector]
		public bool buttonTwoTouched;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		[HideInInspector]
		public bool startMenuPressed;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public bool middleFingerSenseAxisChanged;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[HideInInspector]
		public bool ringFingerSenseAxisChanged;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[HideInInspector]
		public bool pinkyFingerSenseAxisChanged;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[HideInInspector]
		public bool gripSenseAxisChanged;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public bool gripSensePressed;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[HideInInspector]
		public bool controllerVisible;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected Vector2 touchpadAxis;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected Vector2 touchpadTwoAxis;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected Vector2 triggerAxis;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected Vector2 gripAxis;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		protected float touchpadSenseAxis;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		protected float triggerSenseAxis;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		protected float middleFingerSenseAxis;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		protected float ringFingerSenseAxis;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		protected float pinkyFingerSenseAxis;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		protected float gripSenseAxis;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		protected float hairTriggerDelta;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		protected float hairGripDelta;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		protected VRTK_TrackedController trackedController;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public Hand hand;

		[Token(Token = "0x1400005D")]
		public event ControllerInteractionEventHandler TriggerPressed
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0xD6E318", Offset = "0xD6E318", VA = "0xD6E318")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0xD6E3B4", Offset = "0xD6E3B4", VA = "0xD6E3B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005E")]
		public event ControllerInteractionEventHandler TriggerReleased
		{
			[Token(Token = "0x6000E54")]
			[Address(RVA = "0xD6E450", Offset = "0xD6E450", VA = "0xD6E450")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0xD6E4EC", Offset = "0xD6E4EC", VA = "0xD6E4EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005F")]
		public event ControllerInteractionEventHandler TriggerTouchStart
		{
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0xD6E588", Offset = "0xD6E588", VA = "0xD6E588")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0xD6E624", Offset = "0xD6E624", VA = "0xD6E624")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000060")]
		public event ControllerInteractionEventHandler TriggerTouchEnd
		{
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0xD6E6C0", Offset = "0xD6E6C0", VA = "0xD6E6C0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xD6E75C", Offset = "0xD6E75C", VA = "0xD6E75C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000061")]
		public event ControllerInteractionEventHandler TriggerHairlineStart
		{
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0xD6E7F8", Offset = "0xD6E7F8", VA = "0xD6E7F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0xD6E894", Offset = "0xD6E894", VA = "0xD6E894")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000062")]
		public event ControllerInteractionEventHandler TriggerHairlineEnd
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0xD6E930", Offset = "0xD6E930", VA = "0xD6E930")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0xD6E9CC", Offset = "0xD6E9CC", VA = "0xD6E9CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000063")]
		public event ControllerInteractionEventHandler TriggerClicked
		{
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0xD6EA68", Offset = "0xD6EA68", VA = "0xD6EA68")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0xD6EB04", Offset = "0xD6EB04", VA = "0xD6EB04")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000064")]
		public event ControllerInteractionEventHandler TriggerUnclicked
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0xD6EBA0", Offset = "0xD6EBA0", VA = "0xD6EBA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0xD6EC3C", Offset = "0xD6EC3C", VA = "0xD6EC3C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000065")]
		public event ControllerInteractionEventHandler TriggerAxisChanged
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xD6ECD8", Offset = "0xD6ECD8", VA = "0xD6ECD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0xD6ED74", Offset = "0xD6ED74", VA = "0xD6ED74")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000066")]
		public event ControllerInteractionEventHandler TriggerSenseAxisChanged
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xD6EE10", Offset = "0xD6EE10", VA = "0xD6EE10")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0xD6EEAC", Offset = "0xD6EEAC", VA = "0xD6EEAC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000067")]
		public event ControllerInteractionEventHandler GripPressed
		{
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0xD6EF48", Offset = "0xD6EF48", VA = "0xD6EF48")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xD6EFE4", Offset = "0xD6EFE4", VA = "0xD6EFE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000068")]
		public event ControllerInteractionEventHandler GripReleased
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xD6F080", Offset = "0xD6F080", VA = "0xD6F080")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xD6F11C", Offset = "0xD6F11C", VA = "0xD6F11C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000069")]
		public event ControllerInteractionEventHandler GripTouchStart
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xD6F1B8", Offset = "0xD6F1B8", VA = "0xD6F1B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0xD6F254", Offset = "0xD6F254", VA = "0xD6F254")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006A")]
		public event ControllerInteractionEventHandler GripTouchEnd
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xD6F2F0", Offset = "0xD6F2F0", VA = "0xD6F2F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xD6F38C", Offset = "0xD6F38C", VA = "0xD6F38C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006B")]
		public event ControllerInteractionEventHandler GripHairlineStart
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xD6F428", Offset = "0xD6F428", VA = "0xD6F428")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xD6F4C4", Offset = "0xD6F4C4", VA = "0xD6F4C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006C")]
		public event ControllerInteractionEventHandler GripHairlineEnd
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xD6F560", Offset = "0xD6F560", VA = "0xD6F560")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xD6F5FC", Offset = "0xD6F5FC", VA = "0xD6F5FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006D")]
		public event ControllerInteractionEventHandler GripClicked
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xD6F698", Offset = "0xD6F698", VA = "0xD6F698")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xD6F734", Offset = "0xD6F734", VA = "0xD6F734")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006E")]
		public event ControllerInteractionEventHandler GripUnclicked
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xD6F7D0", Offset = "0xD6F7D0", VA = "0xD6F7D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xD6F86C", Offset = "0xD6F86C", VA = "0xD6F86C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006F")]
		public event ControllerInteractionEventHandler GripAxisChanged
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xD6F908", Offset = "0xD6F908", VA = "0xD6F908")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xD6F9A4", Offset = "0xD6F9A4", VA = "0xD6F9A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000070")]
		public event ControllerInteractionEventHandler TouchpadPressed
		{
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xD6FA40", Offset = "0xD6FA40", VA = "0xD6FA40")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xD6FADC", Offset = "0xD6FADC", VA = "0xD6FADC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000071")]
		public event ControllerInteractionEventHandler TouchpadReleased
		{
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0xD6FB78", Offset = "0xD6FB78", VA = "0xD6FB78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xD6FC14", Offset = "0xD6FC14", VA = "0xD6FC14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000072")]
		public event ControllerInteractionEventHandler TouchpadTouchStart
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xD6FCB0", Offset = "0xD6FCB0", VA = "0xD6FCB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xD6FD50", Offset = "0xD6FD50", VA = "0xD6FD50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000073")]
		public event ControllerInteractionEventHandler TouchpadTouchEnd
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xD6FDF0", Offset = "0xD6FDF0", VA = "0xD6FDF0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xD6FE90", Offset = "0xD6FE90", VA = "0xD6FE90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000074")]
		public event ControllerInteractionEventHandler TouchpadAxisChanged
		{
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0xD6FF30", Offset = "0xD6FF30", VA = "0xD6FF30")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0xD6FFD0", Offset = "0xD6FFD0", VA = "0xD6FFD0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000075")]
		public event ControllerInteractionEventHandler TouchpadSenseAxisChanged
		{
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0xD70070", Offset = "0xD70070", VA = "0xD70070")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E83")]
			[Address(RVA = "0xD70110", Offset = "0xD70110", VA = "0xD70110")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000076")]
		public event ControllerInteractionEventHandler TouchpadTwoPressed
		{
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0xD701B0", Offset = "0xD701B0", VA = "0xD701B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0xD70250", Offset = "0xD70250", VA = "0xD70250")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000077")]
		public event ControllerInteractionEventHandler TouchpadTwoReleased
		{
			[Token(Token = "0x6000E86")]
			[Address(RVA = "0xD702F0", Offset = "0xD702F0", VA = "0xD702F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xD70390", Offset = "0xD70390", VA = "0xD70390")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000078")]
		public event ControllerInteractionEventHandler TouchpadTwoTouchStart
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xD70430", Offset = "0xD70430", VA = "0xD70430")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xD704D0", Offset = "0xD704D0", VA = "0xD704D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000079")]
		public event ControllerInteractionEventHandler TouchpadTwoTouchEnd
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xD70570", Offset = "0xD70570", VA = "0xD70570")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xD70610", Offset = "0xD70610", VA = "0xD70610")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007A")]
		public event ControllerInteractionEventHandler TouchpadTwoAxisChanged
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xD706B0", Offset = "0xD706B0", VA = "0xD706B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xD70750", Offset = "0xD70750", VA = "0xD70750")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007B")]
		public event ControllerInteractionEventHandler ButtonOneTouchStart
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xD707F0", Offset = "0xD707F0", VA = "0xD707F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0xD70890", Offset = "0xD70890", VA = "0xD70890")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007C")]
		public event ControllerInteractionEventHandler ButtonOneTouchEnd
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0xD70930", Offset = "0xD70930", VA = "0xD70930")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xD709D0", Offset = "0xD709D0", VA = "0xD709D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007D")]
		public event ControllerInteractionEventHandler ButtonOnePressed
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xD70A70", Offset = "0xD70A70", VA = "0xD70A70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xD70B10", Offset = "0xD70B10", VA = "0xD70B10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007E")]
		public event ControllerInteractionEventHandler ButtonOneReleased
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xD70BB0", Offset = "0xD70BB0", VA = "0xD70BB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xD70C50", Offset = "0xD70C50", VA = "0xD70C50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007F")]
		public event ControllerInteractionEventHandler ButtonTwoTouchStart
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xD70CF0", Offset = "0xD70CF0", VA = "0xD70CF0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xD70D90", Offset = "0xD70D90", VA = "0xD70D90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000080")]
		public event ControllerInteractionEventHandler ButtonTwoTouchEnd
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xD70E30", Offset = "0xD70E30", VA = "0xD70E30")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xD70ED0", Offset = "0xD70ED0", VA = "0xD70ED0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000081")]
		public event ControllerInteractionEventHandler ButtonTwoPressed
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xD70F70", Offset = "0xD70F70", VA = "0xD70F70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xD71010", Offset = "0xD71010", VA = "0xD71010")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000082")]
		public event ControllerInteractionEventHandler ButtonTwoReleased
		{
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xD710B0", Offset = "0xD710B0", VA = "0xD710B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xD71150", Offset = "0xD71150", VA = "0xD71150")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000083")]
		public event ControllerInteractionEventHandler StartMenuPressed
		{
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xD711F0", Offset = "0xD711F0", VA = "0xD711F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xD71290", Offset = "0xD71290", VA = "0xD71290")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000084")]
		public event ControllerInteractionEventHandler StartMenuReleased
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xD71330", Offset = "0xD71330", VA = "0xD71330")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xD713D0", Offset = "0xD713D0", VA = "0xD713D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000085")]
		public event ControllerInteractionEventHandler MiddleFingerSenseAxisChanged
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xD71470", Offset = "0xD71470", VA = "0xD71470")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xD71510", Offset = "0xD71510", VA = "0xD71510")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000086")]
		public event ControllerInteractionEventHandler RingFingerSenseAxisChanged
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xD715B0", Offset = "0xD715B0", VA = "0xD715B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xD71650", Offset = "0xD71650", VA = "0xD71650")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000087")]
		public event ControllerInteractionEventHandler PinkyFingerSenseAxisChanged
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xD716F0", Offset = "0xD716F0", VA = "0xD716F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xD71790", Offset = "0xD71790", VA = "0xD71790")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000088")]
		public event ControllerInteractionEventHandler GripSenseAxisChanged
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xD71830", Offset = "0xD71830", VA = "0xD71830")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xD718D0", Offset = "0xD718D0", VA = "0xD718D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000089")]
		public event ControllerInteractionEventHandler GripSensePressed
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xD71970", Offset = "0xD71970", VA = "0xD71970")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xD71A10", Offset = "0xD71A10", VA = "0xD71A10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008A")]
		public event ControllerInteractionEventHandler GripSenseReleased
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xD71AB0", Offset = "0xD71AB0", VA = "0xD71AB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xD71B50", Offset = "0xD71B50", VA = "0xD71B50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008B")]
		public event ControllerInteractionEventHandler ControllerEnabled
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xD71BF0", Offset = "0xD71BF0", VA = "0xD71BF0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xD71C90", Offset = "0xD71C90", VA = "0xD71C90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008C")]
		public event ControllerInteractionEventHandler ControllerDisabled
		{
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xD71D30", Offset = "0xD71D30", VA = "0xD71D30")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xD71DD0", Offset = "0xD71DD0", VA = "0xD71DD0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008D")]
		public event ControllerInteractionEventHandler ControllerIndexChanged
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xD71E70", Offset = "0xD71E70", VA = "0xD71E70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xD71F10", Offset = "0xD71F10", VA = "0xD71F10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008E")]
		public event ControllerInteractionEventHandler ControllerModelAvailable
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xD71FB0", Offset = "0xD71FB0", VA = "0xD71FB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xD72050", Offset = "0xD72050", VA = "0xD72050")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008F")]
		public event ControllerInteractionEventHandler ControllerVisible
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xD720F0", Offset = "0xD720F0", VA = "0xD720F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xD72190", Offset = "0xD72190", VA = "0xD72190")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000090")]
		public event ControllerInteractionEventHandler ControllerHidden
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xD72230", Offset = "0xD72230", VA = "0xD72230")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xD722D0", Offset = "0xD722D0", VA = "0xD722D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xD72370", Offset = "0xD72370", VA = "0xD72370", Slot = "4")]
		public virtual void OnTriggerPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xD723C0", Offset = "0xD723C0", VA = "0xD723C0", Slot = "5")]
		public virtual void OnTriggerReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xD72410", Offset = "0xD72410", VA = "0xD72410", Slot = "6")]
		public virtual void OnTriggerTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xD72460", Offset = "0xD72460", VA = "0xD72460", Slot = "7")]
		public virtual void OnTriggerTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xD724B0", Offset = "0xD724B0", VA = "0xD724B0", Slot = "8")]
		public virtual void OnTriggerHairlineStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xD72500", Offset = "0xD72500", VA = "0xD72500", Slot = "9")]
		public virtual void OnTriggerHairlineEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xD72550", Offset = "0xD72550", VA = "0xD72550", Slot = "10")]
		public virtual void OnTriggerClicked(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xD725A0", Offset = "0xD725A0", VA = "0xD725A0", Slot = "11")]
		public virtual void OnTriggerUnclicked(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xD725F0", Offset = "0xD725F0", VA = "0xD725F0", Slot = "12")]
		public virtual void OnTriggerAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xD72640", Offset = "0xD72640", VA = "0xD72640", Slot = "13")]
		public virtual void OnTriggerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xD72690", Offset = "0xD72690", VA = "0xD72690", Slot = "14")]
		public virtual void OnGripPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xD726E0", Offset = "0xD726E0", VA = "0xD726E0", Slot = "15")]
		public virtual void OnGripReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xD72730", Offset = "0xD72730", VA = "0xD72730", Slot = "16")]
		public virtual void OnGripTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xD72780", Offset = "0xD72780", VA = "0xD72780", Slot = "17")]
		public virtual void OnGripTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xD727D0", Offset = "0xD727D0", VA = "0xD727D0", Slot = "18")]
		public virtual void OnGripHairlineStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xD72820", Offset = "0xD72820", VA = "0xD72820", Slot = "19")]
		public virtual void OnGripHairlineEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xD72870", Offset = "0xD72870", VA = "0xD72870", Slot = "20")]
		public virtual void OnGripClicked(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xD728C0", Offset = "0xD728C0", VA = "0xD728C0", Slot = "21")]
		public virtual void OnGripUnclicked(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xD72910", Offset = "0xD72910", VA = "0xD72910", Slot = "22")]
		public virtual void OnGripAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xD72960", Offset = "0xD72960", VA = "0xD72960", Slot = "23")]
		public virtual void OnTouchpadPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xD729B0", Offset = "0xD729B0", VA = "0xD729B0", Slot = "24")]
		public virtual void OnTouchpadReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xD72A00", Offset = "0xD72A00", VA = "0xD72A00", Slot = "25")]
		public virtual void OnTouchpadTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xD72A50", Offset = "0xD72A50", VA = "0xD72A50", Slot = "26")]
		public virtual void OnTouchpadTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xD72AA0", Offset = "0xD72AA0", VA = "0xD72AA0", Slot = "27")]
		public virtual void OnTouchpadAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xD72AF0", Offset = "0xD72AF0", VA = "0xD72AF0", Slot = "28")]
		public virtual void OnTouchpadSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xD72B40", Offset = "0xD72B40", VA = "0xD72B40", Slot = "29")]
		public virtual void OnTouchpadTwoPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xD72B90", Offset = "0xD72B90", VA = "0xD72B90", Slot = "30")]
		public virtual void OnTouchpadTwoReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xD72BE0", Offset = "0xD72BE0", VA = "0xD72BE0", Slot = "31")]
		public virtual void OnTouchpadTwoTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xD72C30", Offset = "0xD72C30", VA = "0xD72C30", Slot = "32")]
		public virtual void OnTouchpadTwoTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xD72C80", Offset = "0xD72C80", VA = "0xD72C80", Slot = "33")]
		public virtual void OnTouchpadTwoAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xD72CD0", Offset = "0xD72CD0", VA = "0xD72CD0", Slot = "34")]
		public virtual void OnButtonOneTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xD72D20", Offset = "0xD72D20", VA = "0xD72D20", Slot = "35")]
		public virtual void OnButtonOneTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xD72D70", Offset = "0xD72D70", VA = "0xD72D70", Slot = "36")]
		public virtual void OnButtonOnePressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xD72DC0", Offset = "0xD72DC0", VA = "0xD72DC0", Slot = "37")]
		public virtual void OnButtonOneReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xD72E10", Offset = "0xD72E10", VA = "0xD72E10", Slot = "38")]
		public virtual void OnButtonTwoTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xD72E60", Offset = "0xD72E60", VA = "0xD72E60", Slot = "39")]
		public virtual void OnButtonTwoTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xD72EB0", Offset = "0xD72EB0", VA = "0xD72EB0", Slot = "40")]
		public virtual void OnButtonTwoPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xD72F00", Offset = "0xD72F00", VA = "0xD72F00", Slot = "41")]
		public virtual void OnButtonTwoReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xD72F50", Offset = "0xD72F50", VA = "0xD72F50", Slot = "42")]
		public virtual void OnStartMenuPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xD72FA0", Offset = "0xD72FA0", VA = "0xD72FA0", Slot = "43")]
		public virtual void OnStartMenuReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xD72FF0", Offset = "0xD72FF0", VA = "0xD72FF0", Slot = "44")]
		public virtual void OnMiddleFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xD73040", Offset = "0xD73040", VA = "0xD73040", Slot = "45")]
		public virtual void OnRingFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xD73090", Offset = "0xD73090", VA = "0xD73090", Slot = "46")]
		public virtual void OnPinkyFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xD730E0", Offset = "0xD730E0", VA = "0xD730E0", Slot = "47")]
		public virtual void OnGripSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xD73130", Offset = "0xD73130", VA = "0xD73130", Slot = "48")]
		public virtual void OnGripSensePressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xD73180", Offset = "0xD73180", VA = "0xD73180", Slot = "49")]
		public virtual void OnGripSenseReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xD731D0", Offset = "0xD731D0", VA = "0xD731D0", Slot = "50")]
		public virtual void OnControllerEnabled(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xD73220", Offset = "0xD73220", VA = "0xD73220", Slot = "51")]
		public virtual void OnControllerDisabled(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xD73270", Offset = "0xD73270", VA = "0xD73270", Slot = "52")]
		public virtual void OnControllerIndexChanged(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xD732C0", Offset = "0xD732C0", VA = "0xD732C0", Slot = "53")]
		public virtual void OnControllerModelAvailable(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xD73310", Offset = "0xD73310", VA = "0xD73310", Slot = "54")]
		public virtual void OnControllerVisible(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xD73368", Offset = "0xD73368", VA = "0xD73368", Slot = "55")]
		public virtual void OnControllerHidden(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xD733BC", Offset = "0xD733BC", VA = "0xD733BC", Slot = "56")]
		public virtual ControllerInteractionEventArgs SetControllerEvent()
		{
			return default(ControllerInteractionEventArgs);
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xD73408", Offset = "0xD73408", VA = "0xD73408", Slot = "57")]
		public virtual ControllerInteractionEventArgs SetControllerEvent(ref bool buttonBool, bool value = false, float buttonPressure = 0f)
		{
			return default(ControllerInteractionEventArgs);
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xD73538", Offset = "0xD73538", VA = "0xD73538", Slot = "58")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xD735C4", Offset = "0xD735C4", VA = "0xD735C4", Slot = "59")]
		public virtual Vector2 GetAxis(Vector2AxisAlias vector2AxisType)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xD73638", Offset = "0xD73638", VA = "0xD73638", Slot = "60")]
		public virtual Vector2 GetTouchpadAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xD73644", Offset = "0xD73644", VA = "0xD73644", Slot = "61")]
		public virtual Vector2 GetTouchpadTwoAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xD73650", Offset = "0xD73650", VA = "0xD73650", Slot = "62")]
		public virtual float GetAxisAngle(Vector2AxisAlias vector2AxisType)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xD73688", Offset = "0xD73688", VA = "0xD73688", Slot = "63")]
		public virtual float GetTouchpadAxisAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xD736A0", Offset = "0xD736A0", VA = "0xD736A0", Slot = "64")]
		public virtual float GetTouchpadTwoAxisAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xD736B8", Offset = "0xD736B8", VA = "0xD736B8", Slot = "65")]
		public virtual float GetTriggerAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xD736C0", Offset = "0xD736C0", VA = "0xD736C0", Slot = "66")]
		public virtual float GetGripAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xD736C8", Offset = "0xD736C8", VA = "0xD736C8", Slot = "67")]
		public virtual float GetHairTriggerDelta()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xD736D0", Offset = "0xD736D0", VA = "0xD736D0", Slot = "68")]
		public virtual float GetHairGripDelta()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xD736D8", Offset = "0xD736D8", VA = "0xD736D8", Slot = "69")]
		public virtual float GetTouchpadSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xD736E0", Offset = "0xD736E0", VA = "0xD736E0", Slot = "70")]
		public virtual float GetTriggerSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xD736E8", Offset = "0xD736E8", VA = "0xD736E8", Slot = "71")]
		public virtual float GetMiddleFingerSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xD736F0", Offset = "0xD736F0", VA = "0xD736F0", Slot = "72")]
		public virtual float GetRingFingerSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xD736F8", Offset = "0xD736F8", VA = "0xD736F8", Slot = "73")]
		public virtual float GetPinkyFingerSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xD73700", Offset = "0xD73700", VA = "0xD73700", Slot = "74")]
		public virtual float GetGripSenseAxis()
		{
			return default(float);
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xD73708", Offset = "0xD73708", VA = "0xD73708", Slot = "75")]
		public virtual bool AnyButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xD73758", Offset = "0xD73758", VA = "0xD73758", Slot = "76")]
		public virtual bool GetAxisState(Vector2AxisAlias axis, SDK_BaseController.ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xD737B8", Offset = "0xD737B8", VA = "0xD737B8", Slot = "77")]
		public virtual bool IsButtonPressed(ButtonAlias button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xD738B8", Offset = "0xD738B8", VA = "0xD738B8", Slot = "78")]
		public virtual void SubscribeToButtonAliasEvent(ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xD738E0", Offset = "0xD738E0", VA = "0xD738E0", Slot = "79")]
		public virtual void UnsubscribeToButtonAliasEvent(ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xD73900", Offset = "0xD73900", VA = "0xD73900", Slot = "80")]
		public virtual void SubscribeToAxisAliasEvent(SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xD73924", Offset = "0xD73924", VA = "0xD73924", Slot = "81")]
		public virtual void UnsubscribeToAxisAliasEvent(SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xD73944", Offset = "0xD73944", VA = "0xD73944", Slot = "82")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xD7399C", Offset = "0xD7399C", VA = "0xD7399C", Slot = "83")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xD73BC8", Offset = "0xD73BC8", VA = "0xD73BC8", Slot = "84")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xD73C18", Offset = "0xD73C18", VA = "0xD73C18", Slot = "85")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xD73C70", Offset = "0xD73C70", VA = "0xD73C70", Slot = "86")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xD73DB8", Offset = "0xD73DB8", VA = "0xD73DB8", Slot = "87")]
		protected virtual float ProcessSenseAxis(float axisValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xD73DCC", Offset = "0xD73DCC", VA = "0xD73DCC", Slot = "88")]
		protected virtual void CheckTriggerEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xD743C8", Offset = "0xD743C8", VA = "0xD743C8", Slot = "89")]
		protected virtual void CheckGripEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xD748B4", Offset = "0xD748B4", VA = "0xD748B4", Slot = "90")]
		protected virtual void CheckTouchpadEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xD74C60", Offset = "0xD74C60", VA = "0xD74C60", Slot = "91")]
		protected virtual void CheckTouchpadTwoEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xD74F38", Offset = "0xD74F38", VA = "0xD74F38", Slot = "92")]
		protected virtual void CheckButtonOneEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xD75104", Offset = "0xD75104", VA = "0xD75104", Slot = "93")]
		protected virtual void CheckButtonTwoEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xD752D0", Offset = "0xD752D0", VA = "0xD752D0", Slot = "94")]
		protected virtual void CheckStartMenuEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xD753C4", Offset = "0xD753C4", VA = "0xD753C4", Slot = "95")]
		protected virtual void CheckExtraFingerEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xD7582C", Offset = "0xD7582C", VA = "0xD7582C", Slot = "96")]
		protected virtual void ButtonAliasEventSubscription(bool subscribe, ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xD75ADC", Offset = "0xD75ADC", VA = "0xD75ADC", Slot = "97")]
		protected virtual void AxisAliasEventSubscription(bool subscribe, SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xD75C14", Offset = "0xD75C14", VA = "0xD75C14", Slot = "98")]
		protected virtual void TrackedControllerEnabled(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xD75C70", Offset = "0xD75C70", VA = "0xD75C70", Slot = "99")]
		protected virtual void TrackedControllerDisabled(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xD75CE0", Offset = "0xD75CE0", VA = "0xD75CE0", Slot = "100")]
		protected virtual void TrackedControllerIndexChanged(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xD75D3C", Offset = "0xD75D3C", VA = "0xD75D3C", Slot = "101")]
		protected virtual void TrackedControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xD75D98", Offset = "0xD75D98", VA = "0xD75D98", Slot = "102")]
		protected virtual float CalculateVector2AxisAngle(Vector2 axis)
		{
			return default(float);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xD75DE0", Offset = "0xD75DE0", VA = "0xD75DE0", Slot = "103")]
		protected virtual void DisableEvents()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xD76858", Offset = "0xD76858", VA = "0xD76858")]
		public VRTK_ControllerEvents()
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_ControllerHighlighter")]
	public class VRTK_ControllerHighlighter : MonoBehaviour
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The amount of time to take to transition to the set highlight colour.")]
		[Header("General Settings")]
		public float transitionDuration;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Controller Highlight")]
		[Tooltip("The colour to set the entire controller highlight colour to.")]
		public Color highlightController;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Element Highlights")]
		[Tooltip("The colour to set the body highlight colour to.")]
		public Color highlightBody;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The colour to set the trigger highlight colour to.")]
		public Color highlightTrigger;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The colour to set the grip highlight colour to.")]
		public Color highlightGrip;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The colour to set the touchpad highlight colour to.")]
		public Color highlightTouchpad;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The colour to set the touchpad two highlight colour to.")]
		public Color highlightTouchpadTwo;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The colour to set the button one highlight colour to.")]
		public Color highlightButtonOne;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("The colour to set the button two highlight colour to.")]
		public Color highlightButtonTwo;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The colour to set the system menu highlight colour to.")]
		public Color highlightSystemMenu;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("The colour to set the start menu highlight colour to.")]
		public Color highlightStartMenu;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("A collection of strings that determine the path to the controller model sub elements for identifying the model parts at runtime. If the paths are left empty they will default to the model element paths of the selected SDK Bridge.")]
		[Header("Custom Settings")]
		public VRTK_ControllerModelElementPaths modelElementPaths;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("A collection of highlighter overrides for each controller model sub element. If no highlighter override is given then highlighter on the Controller game object is used.")]
		public VRTK_ControllerElementHighlighters elementHighlighterOverrides;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("An optional GameObject to specify which controller to apply the script methods to. If this is left blank then this script is required to be placed on a controller script alias GameObject and it will use the Actual Controller GameObject linked to the controller script alias.")]
		public GameObject controllerAlias;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("An optional GameObject to specifiy where the controller models are. If this is left blank then the controller Model Alias object will be used.")]
		public GameObject modelContainer;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("An optional Highlighter to use when highlighting the controller element. If this is left blank, then the first active highlighter on the same GameObject will be used, if one isn't found then a Material Color Swap Highlighter will be created at runtime.")]
		public VRTK_BaseHighlighter controllerHighlighter;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected bool controllerHighlighted;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Dictionary<string, Transform> cachedElements;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Dictionary<string, object> highlighterOptions;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected VRTK_BaseHighlighter baseHighlighter;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected bool autoHighlighter;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		protected bool trackedControllerReady;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected Color lastHighlightController;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected Color lastHighlightBody;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected Color lastHighlightTrigger;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		protected Color lastHighlightGrip;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		protected Color lastHighlightTouchpad;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		protected Color lastHighlightTouchpadTwo;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		protected Color lastHighlightButtonOne;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected Color lastHighlightButtonTwo;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		protected Color lastHighlightSystemMenu;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Color lastHighlightStartMenu;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected SDK_BaseController.ControllerElements[] bodyElements;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected SDK_BaseController.ControllerElements[] triggerElements;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected SDK_BaseController.ControllerElements[] gripElements;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected SDK_BaseController.ControllerElements[] touchpadElements;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected SDK_BaseController.ControllerElements[] touchpadTwoElements;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected SDK_BaseController.ControllerElements[] buttonOneElements;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		protected SDK_BaseController.ControllerElements[] buttonTwoElements;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		protected SDK_BaseController.ControllerElements[] systemMenuElements;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		protected SDK_BaseController.ControllerElements[] startMenuElements;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected GameObject scriptControllerAlias;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected GameObject actualController;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected GameObject actualModelContainer;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected VRTK_TrackedController trackedController;

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xD768F8", Offset = "0xD768F8", VA = "0xD768F8", Slot = "4")]
		public virtual void ConfigureControllerPaths()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xD76B50", Offset = "0xD76B50", VA = "0xD76B50", Slot = "5")]
		public virtual void PopulateHighlighters()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xD770B0", Offset = "0xD770B0", VA = "0xD770B0", Slot = "6")]
		public virtual void HighlightController(Color color, float fadeDuration = 0f)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xD7728C", Offset = "0xD7728C", VA = "0xD7728C", Slot = "7")]
		public virtual void UnhighlightController()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xD77378", Offset = "0xD77378", VA = "0xD77378", Slot = "8")]
		public virtual void HighlightElement(SDK_BaseController.ControllerElements elementType, Color color, float fadeDuration = 0f)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xD774F0", Offset = "0xD774F0", VA = "0xD774F0", Slot = "9")]
		public virtual void UnhighlightElement(SDK_BaseController.ControllerElements elementType)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xD776AC", Offset = "0xD776AC", VA = "0xD776AC", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xD77704", Offset = "0xD77704", VA = "0xD77704", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xD77AD4", Offset = "0xD77AD4", VA = "0xD77AD4", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xD77BF4", Offset = "0xD77BF4", VA = "0xD77BF4", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xD77C4C", Offset = "0xD77C4C", VA = "0xD77C4C", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xD77DAC", Offset = "0xD77DAC", VA = "0xD77DAC", Slot = "15")]
		protected virtual void DoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xD77DC4", Offset = "0xD77DC4", VA = "0xD77DC4", Slot = "16")]
		protected virtual void ControllerAvailable()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xD77F04", Offset = "0xD77F04", VA = "0xD77F04", Slot = "17")]
		protected virtual void ResetLastHighlights()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xD77F20", Offset = "0xD77F20", VA = "0xD77F20", Slot = "18")]
		protected virtual void SetColourParameter(SDK_BaseController.ControllerElements element, Color color)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xD780AC", Offset = "0xD780AC", VA = "0xD780AC", Slot = "19")]
		protected virtual Color GetColourParameter(SDK_BaseController.ControllerElements element)
		{
			return default(Color);
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xD78180", Offset = "0xD78180", VA = "0xD78180", Slot = "20")]
		protected virtual void ToggleControllerState()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xD78218", Offset = "0xD78218", VA = "0xD78218", Slot = "21")]
		protected virtual void ToggleHighlightState(Color currentColor, ref Color lastColorState, SDK_BaseController.ControllerElements[] elements)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xD78380", Offset = "0xD78380", VA = "0xD78380", Slot = "22")]
		protected virtual void AddHighlighterToElement(Transform element, VRTK_BaseHighlighter parentHighlighter, VRTK_BaseHighlighter overrideHighlighter)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xD78578", Offset = "0xD78578", VA = "0xD78578", Slot = "23")]
		protected virtual string GetElementPath(string currentPath, SDK_BaseController.ControllerElements elementType)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xD78658", Offset = "0xD78658", VA = "0xD78658", Slot = "24")]
		protected virtual string GetPathForControllerElement(SDK_BaseController.ControllerElements controllerElement)
		{
			return null;
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xD78768", Offset = "0xD78768", VA = "0xD78768", Slot = "25")]
		protected virtual Transform GetElementTransform(string path)
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xD789B4", Offset = "0xD789B4", VA = "0xD789B4", Slot = "26")]
		protected virtual void ToggleHighlightAlias(bool state, string transformPath, Color? highlight, float duration = 0f)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xD78B2C", Offset = "0xD78B2C", VA = "0xD78B2C", Slot = "27")]
		protected virtual VRTK_BaseHighlighter GetValidHighlighter()
		{
			return null;
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xD78BAC", Offset = "0xD78BAC", VA = "0xD78BAC")]
		public VRTK_ControllerHighlighter()
		{
		}
	}
	[Token(Token = "0x200025C")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_ControllerTrackedCollider")]
	public class VRTK_ControllerTrackedCollider : VRTK_SDKControllerReady
	{
		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Interact Touch script to relate the tracked collider to.")]
		[Header("Tracked Controller Settings")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The maximum distance the collider object can be from the controller before it automatically snaps back to the same position.")]
		public float maxResnapDistance;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The button to press to activate the colliders on the tracked collider set. If `Undefined` then it will always be active.")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Custom Settings")]
		[Tooltip("An optional Controller Events to use for listening to the button events. If this is left blank then it will attempt to be retrieved from the same controller as the `Interact Touch` parameter.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_TrackedController trackedController;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_ControllerReference controllerReference;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody trackedRigidbody;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool createRigidbody;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Collider[] trackedColliders;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject customColliderContainer;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected bool createColliders;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_RigidbodyFollow rigidbodyFollow;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool createRigidbodyFollow;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xD78EE4", Offset = "0xD78EE4", VA = "0xD78EE4", Slot = "15")]
		public virtual void ToggleColliders(bool state)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xD78F5C", Offset = "0xD78F5C", VA = "0xD78F5C", Slot = "16")]
		public virtual Collider[] TrackedColliders()
		{
			return null;
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xD78F64", Offset = "0xD78F64", VA = "0xD78F64", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xD791BC", Offset = "0xD791BC", VA = "0xD791BC", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xD79278", Offset = "0xD79278", VA = "0xD79278", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference passedControllerReference)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xD79490", Offset = "0xD79490", VA = "0xD79490", Slot = "17")]
		protected virtual void Cleanup(bool immediate)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xD79568", Offset = "0xD79568", VA = "0xD79568", Slot = "18")]
		protected virtual void DestroyObject(UnityEngine.Object toDestroy, bool immediate)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xD795E0", Offset = "0xD795E0", VA = "0xD795E0", Slot = "19")]
		protected virtual void ManageActivationListeners(bool state)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xD797CC", Offset = "0xD797CC", VA = "0xD797CC", Slot = "20")]
		protected virtual void DoActivationPress(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xD797E0", Offset = "0xD797E0", VA = "0xD797E0", Slot = "21")]
		protected virtual void DoActivationRelease(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xD797F4", Offset = "0xD797F4", VA = "0xD797F4", Slot = "22")]
		protected virtual void SetupRigidbody()
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xD7992C", Offset = "0xD7992C", VA = "0xD7992C", Slot = "23")]
		protected virtual void SetupColliders()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xD79F54", Offset = "0xD79F54", VA = "0xD79F54", Slot = "24")]
		protected virtual void SetupFollower()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xD7A080", Offset = "0xD7A080", VA = "0xD7A080")]
		public VRTK_ControllerTrackedCollider()
		{
		}
	}
	[Token(Token = "0x200025D")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_InteractGrab")]
	public class VRTK_InteractGrab : MonoBehaviour
	{
		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Grab Settings")]
		[Tooltip("The button used to grab/release a touched Interactable Object.")]
		public VRTK_ControllerEvents.ButtonAlias grabButton;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("An amount of time between when the grab button is pressed to when the controller is touching an Interactable Object to grab it.")]
		public float grabPrecognition;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("An amount to multiply the velocity of any Interactable Object being thrown.")]
		public float throwMultiplier;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If this is checked and the Interact Touch is not touching an Interactable Object when the grab button is pressed then a Rigidbody is added to the interacting object to allow it to push other Rigidbody objects around.")]
		public bool createRigidBodyWhenNotTouching;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Custom Settings")]
		[Tooltip("The rigidbody point on the controller model to snap the grabbed Interactable Object to. If blank it will be set to the SDK default.")]
		public Rigidbody controllerAttachPoint;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Controller Events to listen for the events on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Interact Touch to listen for touches on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedGrabButton;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected VRTK_ControllerEvents.ButtonAlias savedGrabButton;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool grabPressed;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GameObject grabbedObject;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected bool influencingGrabbedObject;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected int grabEnabledState;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float grabPrecognitionTimer;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject undroppableGrabbedObject;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody originalControllerAttachPoint;

		[Token(Token = "0x17000154")]
		protected VRTK_ControllerReference controllerReference
		{
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xB074C8", Offset = "0xB074C8", VA = "0xB074C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000091")]
		public event ControllerInteractionEventHandler GrabButtonPressed
		{
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0xB06D78", Offset = "0xB06D78", VA = "0xB06D78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xB06E14", Offset = "0xB06E14", VA = "0xB06E14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000092")]
		public event ControllerInteractionEventHandler GrabButtonReleased
		{
			[Token(Token = "0x6000F48")]
			[Address(RVA = "0xB06EB0", Offset = "0xB06EB0", VA = "0xB06EB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xB06F4C", Offset = "0xB06F4C", VA = "0xB06F4C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000093")]
		public event ObjectInteractEventHandler ControllerStartGrabInteractableObject
		{
			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0xB06FE8", Offset = "0xB06FE8", VA = "0xB06FE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0xB07084", Offset = "0xB07084", VA = "0xB07084")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000094")]
		public event ObjectInteractEventHandler ControllerGrabInteractableObject
		{
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0xB07120", Offset = "0xB07120", VA = "0xB07120")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0xB071BC", Offset = "0xB071BC", VA = "0xB071BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000095")]
		public event ObjectInteractEventHandler ControllerStartUngrabInteractableObject
		{
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0xB07258", Offset = "0xB07258", VA = "0xB07258")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0xB072F4", Offset = "0xB072F4", VA = "0xB072F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000096")]
		public event ObjectInteractEventHandler ControllerUngrabInteractableObject
		{
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0xB07390", Offset = "0xB07390", VA = "0xB07390")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xB0742C", Offset = "0xB0742C", VA = "0xB0742C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xB07670", Offset = "0xB07670", VA = "0xB07670", Slot = "4")]
		public virtual void OnControllerStartGrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xB0769C", Offset = "0xB0769C", VA = "0xB0769C", Slot = "5")]
		public virtual void OnControllerGrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xB076C8", Offset = "0xB076C8", VA = "0xB076C8", Slot = "6")]
		public virtual void OnControllerStartUngrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xB076F4", Offset = "0xB076F4", VA = "0xB076F4", Slot = "7")]
		public virtual void OnControllerUngrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xB07720", Offset = "0xB07720", VA = "0xB07720", Slot = "8")]
		public virtual void OnGrabButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xB07770", Offset = "0xB07770", VA = "0xB07770", Slot = "9")]
		public virtual void OnGrabButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xB077C0", Offset = "0xB077C0", VA = "0xB077C0", Slot = "10")]
		public virtual bool IsGrabButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xB077C8", Offset = "0xB077C8", VA = "0xB077C8", Slot = "11")]
		public virtual void ForceRelease(bool applyGrabbingObjectVelocity = false)
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xB077DC", Offset = "0xB077DC", VA = "0xB077DC", Slot = "12")]
		public virtual void AttemptGrab()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xB077EC", Offset = "0xB077EC", VA = "0xB077EC", Slot = "13")]
		public virtual GameObject GetGrabbedObject()
		{
			return null;
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xB077F4", Offset = "0xB077F4", VA = "0xB077F4", Slot = "14")]
		public virtual void ForceControllerAttachPoint(Rigidbody forcedAttachPoint)
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xB07824", Offset = "0xB07824", VA = "0xB07824", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xB07D38", Offset = "0xB07D38", VA = "0xB07D38", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xB07E8C", Offset = "0xB07E8C", VA = "0xB07E8C", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xB07FF0", Offset = "0xB07FF0", VA = "0xB07FF0", Slot = "18")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xB08048", Offset = "0xB08048", VA = "0xB08048", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xB080A4", Offset = "0xB080A4", VA = "0xB080A4", Slot = "20")]
		protected virtual void DoControllerModelUpdate(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xB080B4", Offset = "0xB080B4", VA = "0xB080B4", Slot = "21")]
		protected virtual void ManageInteractTouchListener(bool state)
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xB08608", Offset = "0xB08608", VA = "0xB08608", Slot = "22")]
		protected virtual void ControllerTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xB08708", Offset = "0xB08708", VA = "0xB08708", Slot = "23")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xB087F0", Offset = "0xB087F0", VA = "0xB087F0", Slot = "24")]
		protected virtual void ManageGrabListener(bool state)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xB08A20", Offset = "0xB08A20", VA = "0xB08A20", Slot = "25")]
		protected virtual void RegrabUndroppableObject()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xB08B94", Offset = "0xB08B94", VA = "0xB08B94", Slot = "26")]
		protected virtual void SetUndroppableObject()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xB08CA0", Offset = "0xB08CA0", VA = "0xB08CA0", Slot = "27")]
		protected virtual void SetControllerAttachPoint()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xB08EF0", Offset = "0xB08EF0", VA = "0xB08EF0", Slot = "28")]
		protected virtual bool IsObjectGrabbable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xB09010", Offset = "0xB09010", VA = "0xB09010", Slot = "29")]
		protected virtual bool IsObjectHoldOnGrab(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xB090E0", Offset = "0xB090E0", VA = "0xB090E0", Slot = "30")]
		protected virtual void ChooseGrabSequence(VRTK_InteractableObject grabbedObjectScript)
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xB0915C", Offset = "0xB0915C", VA = "0xB0915C", Slot = "31")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xB09364", Offset = "0xB09364", VA = "0xB09364", Slot = "32")]
		protected virtual void InitGrabbedObject()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xB094F0", Offset = "0xB094F0", VA = "0xB094F0", Slot = "33")]
		protected virtual void InitPrimaryGrab(VRTK_InteractableObject currentGrabbedObject)
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xB09658", Offset = "0xB09658", VA = "0xB09658", Slot = "34")]
		protected virtual void InitSecondaryGrab(VRTK_InteractableObject currentGrabbedObject)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xB0968C", Offset = "0xB0968C", VA = "0xB0968C", Slot = "35")]
		protected virtual void CheckInfluencingObjectOnRelease()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xB09734", Offset = "0xB09734", VA = "0xB09734", Slot = "36")]
		protected virtual void InitUngrabbedObject(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xB09918", Offset = "0xB09918", VA = "0xB09918", Slot = "37")]
		protected virtual GameObject GetGrabbableObject()
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xB099EC", Offset = "0xB099EC", VA = "0xB099EC", Slot = "38")]
		protected virtual void IncrementGrabState()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xB09A94", Offset = "0xB09A94", VA = "0xB09A94", Slot = "39")]
		protected virtual GameObject GetUndroppableObject()
		{
			return null;
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xB09B88", Offset = "0xB09B88", VA = "0xB09B88", Slot = "40")]
		protected virtual void AttemptGrabObject()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xB09C3C", Offset = "0xB09C3C", VA = "0xB09C3C", Slot = "41")]
		protected virtual void PerformGrabAttempt(GameObject objectToGrab)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xB09CA4", Offset = "0xB09CA4", VA = "0xB09CA4", Slot = "42")]
		protected virtual bool ScriptValidGrab(VRTK_InteractableObject objectToGrabScript)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xB09D6C", Offset = "0xB09D6C", VA = "0xB09D6C", Slot = "43")]
		protected virtual bool IsValidGrabAttempt(GameObject objectToGrab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xB09F08", Offset = "0xB09F08", VA = "0xB09F08", Slot = "44")]
		protected virtual bool CanRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xB09FE8", Offset = "0xB09FE8", VA = "0xB09FE8", Slot = "45")]
		protected virtual void AttemptReleaseObject()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xB0A050", Offset = "0xB0A050", VA = "0xB0A050", Slot = "46")]
		protected virtual void DoGrabObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xB0A0D8", Offset = "0xB0A0D8", VA = "0xB0A0D8", Slot = "47")]
		protected virtual void DoReleaseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xB0A15C", Offset = "0xB0A15C", VA = "0xB0A15C", Slot = "48")]
		protected virtual void CheckControllerAttachPointSet()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xB0A1E0", Offset = "0xB0A1E0", VA = "0xB0A1E0", Slot = "49")]
		protected virtual void CreateNonTouchingRigidbody()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xB0A2EC", Offset = "0xB0A2EC", VA = "0xB0A2EC", Slot = "50")]
		protected virtual void CheckPrecognitionGrab()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xB0A3E0", Offset = "0xB0A3E0", VA = "0xB0A3E0")]
		public VRTK_InteractGrab()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_InteractNearTouch")]
	public class VRTK_InteractNearTouch : MonoBehaviour
	{
		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The radius of the auto generated collider if a `Custom Collider Container` is not supplied.")]
		public float colliderRadius;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("An optional GameObject that contains the compound colliders to represent the near touching object. If this is empty then the collider will be auto generated at runtime.")]
		public GameObject customColliderContainer;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Interact Touch script to associate the near touches with. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected GameObject neartouchColliderContainer;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<GameObject> nearTouchedObjects;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_InteractNearTouchCollider interactNearTouchColliderScript;

		[Token(Token = "0x14000097")]
		public event ObjectInteractEventHandler ControllerNearTouchInteractableObject
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xB0A3F8", Offset = "0xB0A3F8", VA = "0xB0A3F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0xB0A494", Offset = "0xB0A494", VA = "0xB0A494")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000098")]
		public event ObjectInteractEventHandler ControllerNearUntouchInteractableObject
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xB0A530", Offset = "0xB0A530", VA = "0xB0A530")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0xB0A5CC", Offset = "0xB0A5CC", VA = "0xB0A5CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xB0A668", Offset = "0xB0A668", VA = "0xB0A668", Slot = "4")]
		public virtual void OnControllerNearTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xB0A6FC", Offset = "0xB0A6FC", VA = "0xB0A6FC", Slot = "5")]
		public virtual void OnControllerNearUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xB0A794", Offset = "0xB0A794", VA = "0xB0A794", Slot = "6")]
		public virtual List<GameObject> GetNearTouchedObjects()
		{
			return null;
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xB0A79C", Offset = "0xB0A79C", VA = "0xB0A79C", Slot = "7")]
		public virtual void ForceNearTouch(GameObject obj)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xB0A884", Offset = "0xB0A884", VA = "0xB0A884", Slot = "8")]
		public virtual void ForceStopNearTouching([Optional] GameObject obj)
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xB0AA1C", Offset = "0xB0AA1C", VA = "0xB0AA1C", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xB0AC64", Offset = "0xB0AC64", VA = "0xB0AC64", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xB0AE08", Offset = "0xB0AE08", VA = "0xB0AE08", Slot = "11")]
		protected virtual void ControllerStartTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xB0AE18", Offset = "0xB0AE18", VA = "0xB0AE18", Slot = "12")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xB0AEA4", Offset = "0xB0AEA4", VA = "0xB0AEA4", Slot = "13")]
		protected virtual void CreateNearTouchCollider()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xB0B4E8", Offset = "0xB0B4E8", VA = "0xB0B4E8")]
		public VRTK_InteractNearTouch()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class VRTK_InteractNearTouchCollider : MonoBehaviour
	{
		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_InteractNearTouch interactNearTouch;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<GameObject> nearTouchedObjects;

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xB0B57C", Offset = "0xB0B57C", VA = "0xB0B57C", Slot = "4")]
		public virtual void SetInteractNearTouch(VRTK_InteractNearTouch givenInteractNearTouch)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xB0B584", Offset = "0xB0B584", VA = "0xB0B584", Slot = "5")]
		public virtual List<GameObject> GetNearTouchedObjects()
		{
			return null;
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xB0B58C", Offset = "0xB0B58C", VA = "0xB0B58C", Slot = "6")]
		public virtual void StartNearTouch(Collider collider)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xB0B780", Offset = "0xB0B780", VA = "0xB0B780", Slot = "7")]
		public virtual void EndNearTouch(Collider collider)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xB0B8C4", Offset = "0xB0B8C4", VA = "0xB0B8C4", Slot = "8")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xB0B944", Offset = "0xB0B944", VA = "0xB0B944", Slot = "9")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xB0B9C4", Offset = "0xB0B9C4", VA = "0xB0B9C4", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xB0BA34", Offset = "0xB0BA34", VA = "0xB0BA34", Slot = "11")]
		protected virtual bool validObject(VRTK_InteractableObject checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xB0BAF0", Offset = "0xB0BAF0", VA = "0xB0BAF0")]
		public VRTK_InteractNearTouchCollider()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public struct ObjectInteractEventArgs
	{
		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject target;
	}
	[Token(Token = "0x2000261")]
	public delegate void ObjectInteractEventHandler(object sender, ObjectInteractEventArgs e);
	[Token(Token = "0x2000262")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_InteractTouch")]
	public class VRTK_InteractTouch : MonoBehaviour
	{
		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("An optional GameObject that contains the compound colliders to represent the touching object. If this is empty then the collider will be auto generated at runtime to match the SDK default controller.")]
		public GameObject customColliderContainer;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject touchedObject;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<Collider> touchedObjectColliders;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<Collider> touchedObjectActiveColliders;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject controllerCollisionDetector;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool destroyColliderOnDisable;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool triggerIsColliding;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool triggerWasColliding;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool rigidBodyForcedActive;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody touchRigidBody;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected VRTK_TrackedController trackedController;

		[Token(Token = "0x17000155")]
		protected VRTK_ControllerReference controllerReference
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xB0BFD4", Offset = "0xB0BFD4", VA = "0xB0BFD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000099")]
		public event ObjectInteractEventHandler ControllerStartTouchInteractableObject
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0xB0ABC8", Offset = "0xB0ABC8", VA = "0xB0ABC8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0xB0AD6C", Offset = "0xB0AD6C", VA = "0xB0AD6C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400009A")]
		public event ObjectInteractEventHandler ControllerTouchInteractableObject
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0xB084D0", Offset = "0xB084D0", VA = "0xB084D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xB08398", Offset = "0xB08398", VA = "0xB08398")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400009B")]
		public event ObjectInteractEventHandler ControllerStartUntouchInteractableObject
		{
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0xB0BC2C", Offset = "0xB0BC2C", VA = "0xB0BC2C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xB0BCC8", Offset = "0xB0BCC8", VA = "0xB0BCC8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400009C")]
		public event ObjectInteractEventHandler ControllerUntouchInteractableObject
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xB0856C", Offset = "0xB0856C", VA = "0xB0856C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xB08434", Offset = "0xB08434", VA = "0xB08434")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400009D")]
		public event ObjectInteractEventHandler ControllerRigidbodyActivated
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xB0BD64", Offset = "0xB0BD64", VA = "0xB0BD64")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xB0BE00", Offset = "0xB0BE00", VA = "0xB0BE00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400009E")]
		public event ObjectInteractEventHandler ControllerRigidbodyDeactivated
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xB0BE9C", Offset = "0xB0BE9C", VA = "0xB0BE9C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xB0BF38", Offset = "0xB0BF38", VA = "0xB0BF38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xB0C03C", Offset = "0xB0C03C", VA = "0xB0C03C", Slot = "4")]
		public virtual void OnControllerStartTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xB0C068", Offset = "0xB0C068", VA = "0xB0C068", Slot = "5")]
		public virtual void OnControllerTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xB0C094", Offset = "0xB0C094", VA = "0xB0C094", Slot = "6")]
		public virtual void OnControllerStartUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xB0C0C0", Offset = "0xB0C0C0", VA = "0xB0C0C0", Slot = "7")]
		public virtual void OnControllerUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xB0C0EC", Offset = "0xB0C0EC", VA = "0xB0C0EC", Slot = "8")]
		public virtual void OnControllerRigidbodyActivated(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xB0C118", Offset = "0xB0C118", VA = "0xB0C118", Slot = "9")]
		public virtual void OnControllerRigidbodyDeactivated(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xB0C144", Offset = "0xB0C144", VA = "0xB0C144", Slot = "10")]
		public virtual ObjectInteractEventArgs SetControllerInteractEvent(GameObject target)
		{
			return default(ObjectInteractEventArgs);
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xB0C194", Offset = "0xB0C194", VA = "0xB0C194", Slot = "11")]
		public virtual void ForceTouch(GameObject obj)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xB0C27C", Offset = "0xB0C27C", VA = "0xB0C27C", Slot = "12")]
		public virtual GameObject GetTouchedObject()
		{
			return null;
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xB0C284", Offset = "0xB0C284", VA = "0xB0C284", Slot = "13")]
		public virtual bool IsObjectInteractable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xB0C378", Offset = "0xB0C378", VA = "0xB0C378", Slot = "14")]
		public virtual void ToggleControllerRigidBody(bool state, bool forceToggle = false)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xB0C4D4", Offset = "0xB0C4D4", VA = "0xB0C4D4", Slot = "15")]
		public virtual bool IsRigidBodyActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xB0C4FC", Offset = "0xB0C4FC", VA = "0xB0C4FC", Slot = "16")]
		public virtual bool IsRigidBodyForcedActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xB0C534", Offset = "0xB0C534", VA = "0xB0C534", Slot = "17")]
		public virtual void ForceStopTouching()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xB0C5BC", Offset = "0xB0C5BC", VA = "0xB0C5BC", Slot = "18")]
		public virtual Collider[] ControllerColliders()
		{
			return null;
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xB0C670", Offset = "0xB0C670", VA = "0xB0C670", Slot = "19")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xB0C6FC", Offset = "0xB0C6FC", VA = "0xB0C6FC", Slot = "20")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xB0C754", Offset = "0xB0C754", VA = "0xB0C754", Slot = "21")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xB0CB64", Offset = "0xB0CB64", VA = "0xB0CB64", Slot = "22")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xB0CCE4", Offset = "0xB0CCE4", VA = "0xB0CCE4", Slot = "23")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xB0CD3C", Offset = "0xB0CD3C", VA = "0xB0CD3C", Slot = "24")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xB0CED4", Offset = "0xB0CED4", VA = "0xB0CED4", Slot = "25")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xB0CF2C", Offset = "0xB0CF2C", VA = "0xB0CF2C", Slot = "26")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xB0D208", Offset = "0xB0D208", VA = "0xB0D208", Slot = "27")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xB0D258", Offset = "0xB0D258", VA = "0xB0D258", Slot = "28")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xB0D2C0", Offset = "0xB0D2C0", VA = "0xB0D2C0", Slot = "29")]
		protected virtual void DoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xB0D2D0", Offset = "0xB0D2D0", VA = "0xB0D2D0", Slot = "30")]
		protected virtual GameObject GetColliderInteractableObject(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xB0D380", Offset = "0xB0D380", VA = "0xB0D380", Slot = "31")]
		protected virtual void AddActiveCollider(Collider collider)
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xB0D458", Offset = "0xB0D458", VA = "0xB0D458", Slot = "32")]
		protected virtual void StoreTouchedObjectColliders(Collider collider)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xB0D598", Offset = "0xB0D598", VA = "0xB0D598", Slot = "33")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xB0D6E0", Offset = "0xB0D6E0", VA = "0xB0D6E0", Slot = "34")]
		protected virtual void CheckStopTouching()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xB0D810", Offset = "0xB0D810", VA = "0xB0D810", Slot = "35")]
		protected virtual GameObject TriggerStart(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xB0D87C", Offset = "0xB0D87C", VA = "0xB0D87C", Slot = "36")]
		protected virtual bool IsSnapDropZone(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xB0D904", Offset = "0xB0D904", VA = "0xB0D904", Slot = "37")]
		protected virtual void StopTouching(GameObject untouched)
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xB0DA90", Offset = "0xB0DA90", VA = "0xB0DA90", Slot = "38")]
		protected virtual void CleanupEndTouch()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xB0DB40", Offset = "0xB0DB40", VA = "0xB0DB40", Slot = "39")]
		protected virtual void DestroyTouchCollider()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xB0DBB0", Offset = "0xB0DBB0", VA = "0xB0DBB0", Slot = "40")]
		protected virtual bool CustomRigidBodyIsChild()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xB0DCE4", Offset = "0xB0DCE4", VA = "0xB0DCE4", Slot = "41")]
		protected virtual void CreateTouchCollider()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xB0E35C", Offset = "0xB0E35C", VA = "0xB0E35C", Slot = "42")]
		protected virtual void CreateTouchRigidBody()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xB0E490", Offset = "0xB0E490", VA = "0xB0E490", Slot = "43")]
		protected virtual void EmitControllerRigidbodyEvent(bool state)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xB0E4E4", Offset = "0xB0E4E4", VA = "0xB0E4E4")]
		public VRTK_InteractTouch()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_InteractUse")]
	public class VRTK_InteractUse : MonoBehaviour
	{
		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Use Settings")]
		[Tooltip("The button used to use/unuse a touched Interactable Object.")]
		public VRTK_ControllerEvents.ButtonAlias useButton;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Custom Settings")]
		[Tooltip("The Controller Events to listen for the events on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Interact Touch to listen for touches on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Interact Grab to listen for grab actions on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractGrab interactGrab;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedUseButton;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected VRTK_ControllerEvents.ButtonAlias savedUseButton;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool usePressed;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected GameObject usingObject;

		[Token(Token = "0x17000156")]
		protected VRTK_ControllerReference controllerReference
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xB0ECEC", Offset = "0xB0ECEC", VA = "0xB0ECEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400009F")]
		public event ControllerInteractionEventHandler UseButtonPressed
		{
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0xB0E59C", Offset = "0xB0E59C", VA = "0xB0E59C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0xB0E638", Offset = "0xB0E638", VA = "0xB0E638")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A0")]
		public event ControllerInteractionEventHandler UseButtonReleased
		{
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xB0E6D4", Offset = "0xB0E6D4", VA = "0xB0E6D4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xB0E770", Offset = "0xB0E770", VA = "0xB0E770")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A1")]
		public event ObjectInteractEventHandler ControllerStartUseInteractableObject
		{
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xB0E80C", Offset = "0xB0E80C", VA = "0xB0E80C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xB0E8A8", Offset = "0xB0E8A8", VA = "0xB0E8A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A2")]
		public event ObjectInteractEventHandler ControllerUseInteractableObject
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xB0E944", Offset = "0xB0E944", VA = "0xB0E944")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xB0E9E0", Offset = "0xB0E9E0", VA = "0xB0E9E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A3")]
		public event ObjectInteractEventHandler ControllerStartUnuseInteractableObject
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xB0EA7C", Offset = "0xB0EA7C", VA = "0xB0EA7C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xB0EB18", Offset = "0xB0EB18", VA = "0xB0EB18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A4")]
		public event ObjectInteractEventHandler ControllerUnuseInteractableObject
		{
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xB0EBB4", Offset = "0xB0EBB4", VA = "0xB0EBB4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xB0EC50", Offset = "0xB0EC50", VA = "0xB0EC50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xB0ED98", Offset = "0xB0ED98", VA = "0xB0ED98", Slot = "4")]
		public virtual void OnControllerStartUseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xB0EDC4", Offset = "0xB0EDC4", VA = "0xB0EDC4", Slot = "5")]
		public virtual void OnControllerUseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xB0EDF0", Offset = "0xB0EDF0", VA = "0xB0EDF0", Slot = "6")]
		public virtual void OnControllerStartUnuseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xB0EE1C", Offset = "0xB0EE1C", VA = "0xB0EE1C", Slot = "7")]
		public virtual void OnControllerUnuseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xB0EE48", Offset = "0xB0EE48", VA = "0xB0EE48", Slot = "8")]
		public virtual void OnUseButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xB0EE98", Offset = "0xB0EE98", VA = "0xB0EE98", Slot = "9")]
		public virtual void OnUseButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xB0EEE8", Offset = "0xB0EEE8", VA = "0xB0EEE8", Slot = "10")]
		public virtual bool IsUseButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xB0EEF0", Offset = "0xB0EEF0", VA = "0xB0EEF0", Slot = "11")]
		public virtual GameObject GetUsingObject()
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xB0EEF8", Offset = "0xB0EEF8", VA = "0xB0EEF8", Slot = "12")]
		public virtual void ForceStopUsing()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xB0EF7C", Offset = "0xB0EF7C", VA = "0xB0EF7C", Slot = "13")]
		public virtual void ForceResetUsing()
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xB0F004", Offset = "0xB0F004", VA = "0xB0F004", Slot = "14")]
		public virtual void AttemptUse()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xB0F014", Offset = "0xB0F014", VA = "0xB0F014", Slot = "15")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xB0F3BC", Offset = "0xB0F3BC", VA = "0xB0F3BC", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xB0F408", Offset = "0xB0F408", VA = "0xB0F408", Slot = "17")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xB0F41C", Offset = "0xB0F41C", VA = "0xB0F41C", Slot = "18")]
		protected virtual void ManageInteractTouchListener(bool state)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xB0F5C0", Offset = "0xB0F5C0", VA = "0xB0F5C0", Slot = "19")]
		protected virtual void ControllerTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xB0F6C0", Offset = "0xB0F6C0", VA = "0xB0F6C0", Slot = "20")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xB0F7D8", Offset = "0xB0F7D8", VA = "0xB0F7D8", Slot = "21")]
		protected virtual void ManageUseListener(bool state)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xB0FA08", Offset = "0xB0FA08", VA = "0xB0FA08", Slot = "22")]
		protected virtual bool IsObjectUsable(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xB0FB50", Offset = "0xB0FB50", VA = "0xB0FB50", Slot = "23")]
		protected virtual bool IsObjectHoldOnUse(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xB0FC20", Offset = "0xB0FC20", VA = "0xB0FC20", Slot = "24")]
		protected virtual int GetObjectUsingState(GameObject obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xB0FCE8", Offset = "0xB0FCE8", VA = "0xB0FCE8", Slot = "25")]
		protected virtual void SetObjectUsingState(GameObject obj, int value)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xB0FDB4", Offset = "0xB0FDB4", VA = "0xB0FDB4", Slot = "26")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xB0FEBC", Offset = "0xB0FEBC", VA = "0xB0FEBC", Slot = "27")]
		protected virtual void UseInteractedObject(GameObject touchedObject)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xB10124", Offset = "0xB10124", VA = "0xB10124", Slot = "28")]
		protected virtual void UnuseInteractedObject(bool completeStop)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xB102E0", Offset = "0xB102E0", VA = "0xB102E0", Slot = "29")]
		protected virtual GameObject GetFromGrab()
		{
			return null;
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xB10370", Offset = "0xB10370", VA = "0xB10370", Slot = "30")]
		protected virtual void StopUsing()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xB103AC", Offset = "0xB103AC", VA = "0xB103AC", Slot = "31")]
		protected virtual void AttemptUseObject()
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xB105FC", Offset = "0xB105FC", VA = "0xB105FC", Slot = "32")]
		protected virtual void DoStartUseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xB10684", Offset = "0xB10684", VA = "0xB10684", Slot = "33")]
		protected virtual void DoStopUseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xB10744", Offset = "0xB10744", VA = "0xB10744")]
		public VRTK_InteractUse()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public delegate void ObjectAutoGrabEventHandler(object sender);
	[Token(Token = "0x2000265")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactors/VRTK_ObjectAutoGrab")]
	public class VRTK_ObjectAutoGrab : MonoBehaviour
	{
		[Token(Token = "0x2000266")]
		[CompilerGenerated]
		private sealed class <AutoGrab>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ObjectAutoGrab <>4__this;

			[Token(Token = "0x17000157")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001011")]
				[Address(RVA = "0xB116E0", Offset = "0xB116E0", VA = "0xB116E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000158")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001013")]
				[Address(RVA = "0xB11728", Offset = "0xB11728", VA = "0xB11728", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600100E")]
			[Address(RVA = "0xB10B08", Offset = "0xB10B08", VA = "0xB10B08")]
			[DebuggerHidden]
			public <AutoGrab>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600100F")]
			[Address(RVA = "0xB10E64", Offset = "0xB10E64", VA = "0xB10E64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001010")]
			[Address(RVA = "0xB10E68", Offset = "0xB10E68", VA = "0xB10E68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0xB116E8", Offset = "0xB116E8", VA = "0xB116E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Interactable Object that will be grabbed by the Interact Grab.")]
		public VRTK_InteractableObject objectToGrab;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If the `Object To Grab` is a prefab then this needs to be checked, if the `Object To Grab` already exists in the scene then this needs to be unchecked.")]
		public bool objectIsPrefab;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If this is checked then the `Object To Grab` will be cloned into a new Interactable Object and grabbed by the Interact Grab leaving the existing Interactable Object in the scene. This is required if the same Interactable Object is to be grabbed to multiple instances of Interact Grab. It is also required to clone a grabbed Interactable Object if it is a prefab as it needs to exist within the scene to be grabbed.")]
		public bool cloneGrabbedObject;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("If `Clone Grabbed Object` is checked and this is checked, then whenever this script is disabled and re-enabled, it will always create a new clone of the Interactable Object to grab. If this is unchecked then the original cloned Interactable Object will attempt to be grabbed again. If the original cloned object no longer exists then a new clone will be created.")]
		public bool alwaysCloneOnEnable;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[Tooltip("If this is checked then the `Object To Grab` will attempt to be secondary grabbed as well as primary grabbed.")]
		public bool attemptSecondaryGrab;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Custom Settings")]
		[Tooltip("The Interact Touch to listen for touches on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractTouch interactTouch;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Interact Grab to listen for grab actions on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_InteractGrab interactGrab;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The secondary controller Interact Touch to listen for touches on. If this field is left blank then it will be looked up on the opposite controller script alias at runtime.")]
		public VRTK_InteractTouch secondaryInteractTouch;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The secondary controller Interact Grab to listen for grab actions on. If this field is left blank then it will be looked up on the opposite controller script alias at runtime.")]
		public VRTK_InteractGrab secondaryInteractGrab;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject previousClonedObject;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Coroutine autoGrabRoutine;

		[Token(Token = "0x140000A5")]
		public event ObjectAutoGrabEventHandler ObjectAutoGrabCompleted
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xB108D0", Offset = "0xB108D0", VA = "0xB108D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001006")]
			[Address(RVA = "0xB1096C", Offset = "0xB1096C", VA = "0xB1096C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xB10A08", Offset = "0xB10A08", VA = "0xB10A08", Slot = "4")]
		public virtual void OnObjectAutoGrabCompleted()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xB10A28", Offset = "0xB10A28", VA = "0xB10A28", Slot = "5")]
		public virtual void ClearPreviousClone()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xB10A34", Offset = "0xB10A34", VA = "0xB10A34", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xB10A80", Offset = "0xB10A80", VA = "0xB10A80", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xB10A94", Offset = "0xB10A94", VA = "0xB10A94", Slot = "8")]
		[IteratorStateMachine(typeof(<AutoGrab>d__18))]
		protected virtual IEnumerator AutoGrab()
		{
			return null;
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xB10B30", Offset = "0xB10B30", VA = "0xB10B30", Slot = "9")]
		protected virtual void AttemptSecondaryGrab(VRTK_InteractableObject grabbableObject)
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xB10E5C", Offset = "0xB10E5C", VA = "0xB10E5C")]
		public VRTK_ObjectAutoGrab()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class VRTK_ControllerHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000268")]
		[CompilerGenerated]
		private sealed class <SimpleHapticPulseRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float pulseInterval;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_ControllerReference controllerReference;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float hapticPulseStrength;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float duration;

			[Token(Token = "0x17000159")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001024")]
				[Address(RVA = "0xB1217C", Offset = "0xB1217C", VA = "0xB1217C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001026")]
				[Address(RVA = "0xB121C4", Offset = "0xB121C4", VA = "0xB121C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001021")]
			[Address(RVA = "0xB11F28", Offset = "0xB11F28", VA = "0xB11F28")]
			[DebuggerHidden]
			public <SimpleHapticPulseRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001022")]
			[Address(RVA = "0xB12090", Offset = "0xB12090", VA = "0xB12090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001023")]
			[Address(RVA = "0xB12094", Offset = "0xB12094", VA = "0xB12094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001025")]
			[Address(RVA = "0xB12184", Offset = "0xB12184", VA = "0xB12184", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000269")]
		[CompilerGenerated]
		private sealed class <AudioClipHapticsRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioClip clip;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_ControllerReference controllerReference;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private SDK_ControllerHapticModifiers <hapticModifiers>5__2;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <hapticScalar>5__3;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float[] <audioData>5__4;

			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <sampleOffset>5__5;

			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <startTime>5__6;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <length>5__7;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <endTime>5__8;

			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <sampleRate>5__9;

			[Token(Token = "0x1700015B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600102A")]
				[Address(RVA = "0xB123D0", Offset = "0xB123D0", VA = "0xB123D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600102C")]
				[Address(RVA = "0xB12418", Offset = "0xB12418", VA = "0xB12418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001027")]
			[Address(RVA = "0xB11FE0", Offset = "0xB11FE0", VA = "0xB11FE0")]
			[DebuggerHidden]
			public <AudioClipHapticsRoutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001028")]
			[Address(RVA = "0xB121CC", Offset = "0xB121CC", VA = "0xB121CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001029")]
			[Address(RVA = "0xB121D0", Offset = "0xB121D0", VA = "0xB121D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600102B")]
			[Address(RVA = "0xB123D8", Offset = "0xB123D8", VA = "0xB123D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static VRTK_ControllerHaptics instance;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<VRTK_ControllerReference, Coroutine> hapticLoopCoroutines;

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xB11730", Offset = "0xB11730", VA = "0xB11730")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xB11920", Offset = "0xB11920", VA = "0xB11920")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float pulseInterval)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xB11A10", Offset = "0xB11A10", VA = "0xB11A10")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xB11AD8", Offset = "0xB11AD8", VA = "0xB11AD8")]
		public static void CancelHapticPulse(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xB11B98", Offset = "0xB11B98", VA = "0xB11B98", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xB11804", Offset = "0xB11804", VA = "0xB11804")]
		protected static void SetupInstance()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xB11BF4", Offset = "0xB11BF4", VA = "0xB11BF4", Slot = "5")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xB11C38", Offset = "0xB11C38", VA = "0xB11C38", Slot = "6")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float pulseInterval)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xB11D18", Offset = "0xB11D18", VA = "0xB11D18", Slot = "7")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xB11DE0", Offset = "0xB11DE0", VA = "0xB11DE0", Slot = "8")]
		protected virtual void InternalCancelHapticPulse(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xB11E90", Offset = "0xB11E90", VA = "0xB11E90", Slot = "9")]
		[IteratorStateMachine(typeof(<SimpleHapticPulseRoutine>d__12))]
		protected virtual IEnumerator SimpleHapticPulseRoutine(VRTK_ControllerReference controllerReference, float duration, float hapticPulseStrength, float pulseInterval)
		{
			return null;
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xB11F50", Offset = "0xB11F50", VA = "0xB11F50", Slot = "10")]
		[IteratorStateMachine(typeof(<AudioClipHapticsRoutine>d__13))]
		protected virtual IEnumerator AudioClipHapticsRoutine(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xB12008", Offset = "0xB12008", VA = "0xB12008")]
		public VRTK_ControllerHaptics()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class VRTK_ObjectAppearance : MonoBehaviour
	{
		[Token(Token = "0x200026B")]
		[CompilerGenerated]
		private sealed class <TransitionRendererOpacity>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float initialAlpha;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float targetAlpha;

			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float transitionDuration;

			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_ObjectAppearance <>4__this;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public GameObject model;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x1700015D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001044")]
				[Address(RVA = "0xB13BB4", Offset = "0xB13BB4", VA = "0xB13BB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001046")]
				[Address(RVA = "0xB13BFC", Offset = "0xB13BFC", VA = "0xB13BFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001041")]
			[Address(RVA = "0xB13998", Offset = "0xB13998", VA = "0xB13998")]
			[DebuggerHidden]
			public <TransitionRendererOpacity>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0xB13ACC", Offset = "0xB13ACC", VA = "0xB13ACC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0xB13AD0", Offset = "0xB13AD0", VA = "0xB13AD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001045")]
			[Address(RVA = "0xB13BBC", Offset = "0xB13BBC", VA = "0xB13BBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static VRTK_ObjectAppearance instance;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<GameObject, Coroutine> setOpacityCoroutines;

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xB12420", Offset = "0xB12420", VA = "0xB12420")]
		public static void SetOpacity(GameObject model, float alpha, float transitionDuration = 0f)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xB0929C", Offset = "0xB0929C", VA = "0xB0929C")]
		public static void SetRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xB12618", Offset = "0xB12618", VA = "0xB12618")]
		public static void SetRendererHidden(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xB126E0", Offset = "0xB126E0", VA = "0xB126E0")]
		public static void ToggleRenderer(bool state, GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xB126FC", Offset = "0xB126FC", VA = "0xB126FC")]
		public static bool IsRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xB12890", Offset = "0xB12890", VA = "0xB12890")]
		public static void HighlightObject(GameObject model, Color? highlightColor, float fadeDuration = 0f)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xB12988", Offset = "0xB12988", VA = "0xB12988")]
		public static void UnhighlightObject(GameObject model)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xB12A48", Offset = "0xB12A48", VA = "0xB12A48", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xB124FC", Offset = "0xB124FC", VA = "0xB124FC")]
		protected static void SetupInstance()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xB12B94", Offset = "0xB12B94", VA = "0xB12B94", Slot = "5")]
		protected virtual void InternalSetOpacity(GameObject model, float alpha, float transitionDuration = 0f)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xB12CF0", Offset = "0xB12CF0", VA = "0xB12CF0", Slot = "6")]
		protected virtual void InternalSetRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xB12E98", Offset = "0xB12E98", VA = "0xB12E98", Slot = "7")]
		protected virtual void InternalSetRendererHidden(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xB13040", Offset = "0xB13040", VA = "0xB13040", Slot = "8")]
		protected virtual void InternalHighlightObject(GameObject model, Color? highlightColor, float fadeDuration = 0f)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xB131A0", Offset = "0xB131A0", VA = "0xB131A0", Slot = "9")]
		protected virtual void InternalUnhighlightObject(GameObject model)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xB13280", Offset = "0xB13280", VA = "0xB13280", Slot = "10")]
		protected virtual void EmitControllerEvents(GameObject model, bool state)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xB13484", Offset = "0xB13484", VA = "0xB13484", Slot = "11")]
		protected virtual void ChangeRendererOpacity(GameObject model, float alpha)
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xB13834", Offset = "0xB13834", VA = "0xB13834", Slot = "12")]
		protected virtual float GetInitialAlpha(GameObject model)
		{
			return default(float);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xB138E4", Offset = "0xB138E4", VA = "0xB138E4", Slot = "13")]
		[IteratorStateMachine(typeof(<TransitionRendererOpacity>d__19))]
		protected virtual IEnumerator TransitionRendererOpacity(GameObject model, float initialAlpha, float targetAlpha, float transitionDuration)
		{
			return null;
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xB139C0", Offset = "0xB139C0", VA = "0xB139C0", Slot = "14")]
		protected virtual void CancelSetOpacityCoroutine(GameObject model)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xB13A44", Offset = "0xB13A44", VA = "0xB13A44")]
		public VRTK_ObjectAppearance()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class MinMaxRangeAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float max;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float min;

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xB13C04", Offset = "0xB13C04", VA = "0xB13C04")]
		public MinMaxRangeAttribute(float min, float max)
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class ObsoleteInspectorAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001048")]
		[Address(RVA = "0xB13C30", Offset = "0xB13C30", VA = "0xB13C30")]
		public ObsoleteInspectorAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026E")]
	public class Limits2D
	{
		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minimum;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maximum;

		[Token(Token = "0x1700015F")]
		public static Limits2D zero
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0xB13C38", Offset = "0xB13C38", VA = "0xB13C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xB13C98", Offset = "0xB13C98", VA = "0xB13C98")]
		public Limits2D(float min, float max)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xB13CC4", Offset = "0xB13CC4", VA = "0xB13CC4")]
		public Limits2D(Vector2 limits)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xB13CF0", Offset = "0xB13CF0", VA = "0xB13CF0")]
		public bool WithinLimits(float value)
		{
			return default(bool);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xB13D14", Offset = "0xB13D14", VA = "0xB13D14")]
		public Vector2 AsVector2()
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x200026F")]
	public class Vector3State
	{
		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool xState;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool yState;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool zState;

		[Token(Token = "0x17000160")]
		public static Vector3State False
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0xB13D1C", Offset = "0xB13D1C", VA = "0xB13D1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000161")]
		public static Vector3State True
		{
			[Token(Token = "0x600104F")]
			[Address(RVA = "0xB13DC0", Offset = "0xB13DC0", VA = "0xB13DC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xB13D80", Offset = "0xB13D80", VA = "0xB13D80")]
		public Vector3State(bool x, bool y, bool z)
		{
		}
	}
	[Token(Token = "0x2000270")]
	public struct CollisionTrackerEventArgs
	{
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isTrigger;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Collision collision;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Collider collider;
	}
	[Token(Token = "0x2000271")]
	public delegate void CollisionTrackerEventHandler(object sender, CollisionTrackerEventArgs e);
	[Token(Token = "0x2000272")]
	public class VRTK_CollisionTracker : MonoBehaviour
	{
		[Token(Token = "0x140000A6")]
		public event CollisionTrackerEventHandler CollisionEnter
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xB14048", Offset = "0xB14048", VA = "0xB14048")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001056")]
			[Address(RVA = "0xB140E4", Offset = "0xB140E4", VA = "0xB140E4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A7")]
		public event CollisionTrackerEventHandler CollisionStay
		{
			[Token(Token = "0x6001057")]
			[Address(RVA = "0xB14180", Offset = "0xB14180", VA = "0xB14180")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001058")]
			[Address(RVA = "0xB1421C", Offset = "0xB1421C", VA = "0xB1421C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A8")]
		public event CollisionTrackerEventHandler CollisionExit
		{
			[Token(Token = "0x6001059")]
			[Address(RVA = "0xB142B8", Offset = "0xB142B8", VA = "0xB142B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600105A")]
			[Address(RVA = "0xB14354", Offset = "0xB14354", VA = "0xB14354")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000A9")]
		public event CollisionTrackerEventHandler TriggerEnter
		{
			[Token(Token = "0x600105B")]
			[Address(RVA = "0xB143F0", Offset = "0xB143F0", VA = "0xB143F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600105C")]
			[Address(RVA = "0xB1448C", Offset = "0xB1448C", VA = "0xB1448C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000AA")]
		public event CollisionTrackerEventHandler TriggerStay
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0xB14528", Offset = "0xB14528", VA = "0xB14528")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600105E")]
			[Address(RVA = "0xB145C4", Offset = "0xB145C4", VA = "0xB145C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000AB")]
		public event CollisionTrackerEventHandler TriggerExit
		{
			[Token(Token = "0x600105F")]
			[Address(RVA = "0xB14660", Offset = "0xB14660", VA = "0xB14660")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001060")]
			[Address(RVA = "0xB146FC", Offset = "0xB146FC", VA = "0xB146FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xB14798", Offset = "0xB14798", VA = "0xB14798")]
		protected void OnCollisionEnterEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xB147E8", Offset = "0xB147E8", VA = "0xB147E8")]
		protected void OnCollisionStayEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xB14838", Offset = "0xB14838", VA = "0xB14838")]
		protected void OnCollisionExitEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xB14888", Offset = "0xB14888", VA = "0xB14888")]
		protected void OnTriggerEnterEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xB148D8", Offset = "0xB148D8", VA = "0xB148D8")]
		protected void OnTriggerStayEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xB14928", Offset = "0xB14928", VA = "0xB14928")]
		protected void OnTriggerExitEvent(CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xB14978", Offset = "0xB14978", VA = "0xB14978", Slot = "4")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xB14A10", Offset = "0xB14A10", VA = "0xB14A10", Slot = "5")]
		protected virtual void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xB14AA8", Offset = "0xB14AA8", VA = "0xB14AA8", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xB14B40", Offset = "0xB14B40", VA = "0xB14B40", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xB14BB4", Offset = "0xB14BB4", VA = "0xB14BB4", Slot = "8")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xB14C28", Offset = "0xB14C28", VA = "0xB14C28", Slot = "9")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xB14C9C", Offset = "0xB14C9C", VA = "0xB14C9C", Slot = "10")]
		protected virtual CollisionTrackerEventArgs SetCollisionTrackerEvent(bool isTrigger, Collision givenCollision, Collider givenCollider)
		{
			return default(CollisionTrackerEventArgs);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xB14D04", Offset = "0xB14D04", VA = "0xB14D04")]
		public VRTK_CollisionTracker()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class VRTK_ControllerReference : IEquatable<VRTK_ControllerReference>
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<uint, VRTK_ControllerReference> controllerReferences;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected uint storedControllerIndex;

		[Token(Token = "0x17000162")]
		public uint index
		{
			[Token(Token = "0x6001077")]
			[Address(RVA = "0xB15174", Offset = "0xB15174", VA = "0xB15174")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000163")]
		public GameObject scriptAlias
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0xB10E4C", Offset = "0xB10E4C", VA = "0xB10E4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public GameObject actual
		{
			[Token(Token = "0x6001079")]
			[Address(RVA = "0xB1517C", Offset = "0xB1517C", VA = "0xB1517C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		public GameObject model
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0xB08ED4", Offset = "0xB08ED4", VA = "0xB08ED4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public SDK_BaseController.ControllerHand hand
		{
			[Token(Token = "0x600107B")]
			[Address(RVA = "0xB1518C", Offset = "0xB1518C", VA = "0xB1518C")]
			get
			{
				return default(SDK_BaseController.ControllerHand);
			}
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xB14D0C", Offset = "0xB14D0C", VA = "0xB14D0C")]
		public static VRTK_ControllerReference GetControllerReference(uint controllerIndex)
		{
			return null;
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xB07574", Offset = "0xB07574", VA = "0xB07574")]
		public static VRTK_ControllerReference GetControllerReference(GameObject controllerObject)
		{
			return null;
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xB10D74", Offset = "0xB10D74", VA = "0xB10D74")]
		public static VRTK_ControllerReference GetControllerReference(SDK_BaseController.ControllerHand controllerHand)
		{
			return null;
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xB10E38", Offset = "0xB10E38", VA = "0xB10E38")]
		public static bool IsValid(VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xB14FF4", Offset = "0xB14FF4", VA = "0xB14FF4")]
		public static uint GetRealIndex(VRTK_ControllerReference controllerReference)
		{
			return default(uint);
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xB14DC8", Offset = "0xB14DC8", VA = "0xB14DC8")]
		public VRTK_ControllerReference(uint controllerIndex)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xB14F78", Offset = "0xB14F78", VA = "0xB14F78")]
		public VRTK_ControllerReference(GameObject controllerObject)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xB150E4", Offset = "0xB150E4", VA = "0xB150E4")]
		public VRTK_ControllerReference(SDK_BaseController.ControllerHand controllerHand)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xB14FE4", Offset = "0xB14FE4", VA = "0xB14FE4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xB151F8", Offset = "0xB151F8", VA = "0xB151F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xB156E4", Offset = "0xB156E4", VA = "0xB156E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xB156EC", Offset = "0xB156EC", VA = "0xB156EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xB15778", Offset = "0xB15778", VA = "0xB15778", Slot = "4")]
		public bool Equals(VRTK_ControllerReference other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xB15798", Offset = "0xB15798", VA = "0xB15798", Slot = "5")]
		protected virtual GameObject GetValidObjectFromIndex()
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xB15830", Offset = "0xB15830", VA = "0xB15830", Slot = "6")]
		protected virtual void AddToCache()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xB14E84", Offset = "0xB14E84", VA = "0xB14E84")]
		private static GameObject GetValidObjectFromHand(SDK_BaseController.ControllerHand controllerHand)
		{
			return null;
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xB15058", Offset = "0xB15058", VA = "0xB15058")]
		private static SDK_BaseController.ControllerHand GetControllerHand(GameObject controllerObject)
		{
			return default(SDK_BaseController.ControllerHand);
		}
	}
	[Token(Token = "0x2000274")]
	public static class Bezier
	{
		[Token(Token = "0x6001086")]
		[Address(RVA = "0xB15960", Offset = "0xB15960", VA = "0xB15960")]
		public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xB159D4", Offset = "0xB159D4", VA = "0xB159D4")]
		public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xB15A30", Offset = "0xB15A30", VA = "0xB15A30")]
		public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xB15ADC", Offset = "0xB15ADC", VA = "0xB15ADC")]
		public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000275")]
	public class VRTK_CurveGenerator : MonoBehaviour
	{
		[Token(Token = "0x2000276")]
		public enum BezierControlPointMode
		{
			[Token(Token = "0x4000F48")]
			Free,
			[Token(Token = "0x4000F49")]
			Aligned,
			[Token(Token = "0x4000F4A")]
			Mirrored
		}

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Vector3[] points;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject[] items;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected BezierControlPointMode[] modes;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool loop;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int frequency;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool customTracer;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		protected bool rescalePointerTracer;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject tracerLineRenderer;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected LineRenderer customLineRenderer;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool lineRendererAndItem;

		[Token(Token = "0x17000167")]
		protected virtual bool Loop
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0xB1667C", Offset = "0xB1667C", VA = "0xB1667C", Slot = "11")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xB16684", Offset = "0xB16684", VA = "0xB16684", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		protected virtual int ControlPointCount
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0xB166F8", Offset = "0xB166F8", VA = "0xB166F8", Slot = "13")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000169")]
		protected virtual int CurveCount
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0xB16C70", Offset = "0xB16C70", VA = "0xB16C70", Slot = "17")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xB15B8C", Offset = "0xB15B8C", VA = "0xB15B8C", Slot = "4")]
		public virtual void Create(int setFrequency, float radius, GameObject tracer, bool rescaleTracer = false)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xB161A4", Offset = "0xB161A4", VA = "0xB161A4", Slot = "5")]
		public virtual void SetPoints(Vector3[] controlPoints, Material material, Color color)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xB16210", Offset = "0xB16210", VA = "0xB16210", Slot = "6")]
		public virtual Vector3[] GetPoints(Vector3[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xB1632C", Offset = "0xB1632C", VA = "0xB1632C", Slot = "7")]
		public virtual void TogglePoints(bool state)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xB163D4", Offset = "0xB163D4", VA = "0xB163D4", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xB1645C", Offset = "0xB1645C", VA = "0xB1645C", Slot = "9")]
		protected virtual void PointsInit(Vector3[] controlPoints)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xB164D0", Offset = "0xB164D0", VA = "0xB164D0", Slot = "10")]
		protected virtual GameObject CreateSphere()
		{
			return null;
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xB16714", Offset = "0xB16714", VA = "0xB16714", Slot = "14")]
		protected virtual Vector3 GetControlPoint(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xB16750", Offset = "0xB16750", VA = "0xB16750", Slot = "15")]
		protected virtual void SetControlPoint(int index, Vector3 point)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xB1699C", Offset = "0xB1699C", VA = "0xB1699C", Slot = "16")]
		protected virtual void EnforceMode(int index)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xB16CA8", Offset = "0xB16CA8", VA = "0xB16CA8", Slot = "18")]
		protected virtual Vector3 GetPoint(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xB16E08", Offset = "0xB16E08", VA = "0xB16E08", Slot = "19")]
		protected virtual void SetObjects(Material material, Color color)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xB16EAC", Offset = "0xB16EAC", VA = "0xB16EAC", Slot = "20")]
		protected virtual void SetPointData(Material material, Color color, float stepSize)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xB17064", Offset = "0xB17064", VA = "0xB17064", Slot = "21")]
		protected virtual void SetItemPosition(int currentIndex, Vector3 setPosition, Material material, Color color, float stepSize)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xB17404", Offset = "0xB17404", VA = "0xB17404", Slot = "22")]
		protected virtual void SetItemMaterial(GameObject item, Material material, Color color)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xB1755C", Offset = "0xB1755C", VA = "0xB1755C", Slot = "23")]
		protected virtual void SetMaterial(Material material, Color color)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xB176B8", Offset = "0xB176B8", VA = "0xB176B8")]
		public VRTK_CurveGenerator()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public static class VRTK_Defines
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version CurrentVersion;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Version[] PreviousVersions;

		[Token(Token = "0x4000F4E")]
		public const string VersionScriptingDefineSymbolPrefix = "VRTK_VERSION_";

		[Token(Token = "0x4000F4F")]
		public const string VersionScriptingDefineSymbolSuffix = "_OR_NEWER";

		[Token(Token = "0x1700016A")]
		public static string CurrentExactVersionScriptingDefineSymbol
		{
			[Token(Token = "0x600109F")]
			[Address(RVA = "0xB176C0", Offset = "0xB176C0", VA = "0xB176C0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0xB17718", Offset = "0xB17718", VA = "0xB17718")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xB17778", Offset = "0xB17778", VA = "0xB17778")]
		static VRTK_Defines()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xB179B0", Offset = "0xB179B0", VA = "0xB179B0")]
		private static string ExactVersionSymbol(Version version)
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xB17A6C", Offset = "0xB17A6C", VA = "0xB17A6C")]
		private static string AtLeastVersionSymbol(Version version)
		{
			return null;
		}
	}
	[Token(Token = "0x2000278")]
	public class VRTK_EventSystem : EventSystem
	{
		[Token(Token = "0x2000279")]
		[CompilerGenerated]
		private sealed class <SetEventSystemOfBaseInputModulesAfterFrameDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSystem eventSystem;

			[Token(Token = "0x1700016B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010B0")]
				[Address(RVA = "0xB1848C", Offset = "0xB1848C", VA = "0xB1848C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010B2")]
				[Address(RVA = "0xB184D4", Offset = "0xB184D4", VA = "0xB184D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010AD")]
			[Address(RVA = "0xB18118", Offset = "0xB18118", VA = "0xB18118")]
			[DebuggerHidden]
			public <SetEventSystemOfBaseInputModulesAfterFrameDelay>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xB183EC", Offset = "0xB183EC", VA = "0xB183EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xB183F0", Offset = "0xB183F0", VA = "0xB183F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010B1")]
			[Address(RVA = "0xB18494", Offset = "0xB18494", VA = "0xB18494", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected EventSystem previousEventSystem;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_VRInputModule vrInputModule;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly FieldInfo[] EVENT_SYSTEM_FIELD_INFOS;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly PropertyInfo[] EVENT_SYSTEM_PROPERTY_INFOS;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly FieldInfo BASE_INPUT_MODULE_EVENT_SYSTEM_FIELD_INFO;

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xB17B00", Offset = "0xB17B00", VA = "0xB17B00", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xB17E60", Offset = "0xB17E60", VA = "0xB17E60", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xB1804C", Offset = "0xB1804C", VA = "0xB1804C", Slot = "18")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xB18114", Offset = "0xB18114", VA = "0xB18114", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xB17C68", Offset = "0xB17C68", VA = "0xB17C68")]
		private static void CopyValuesFrom(EventSystem fromEventSystem, EventSystem toEventSystem)
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xB17DEC", Offset = "0xB17DEC", VA = "0xB17DEC")]
		[IteratorStateMachine(typeof(<SetEventSystemOfBaseInputModulesAfterFrameDelay>d__10))]
		private static IEnumerator SetEventSystemOfBaseInputModulesAfterFrameDelay(EventSystem eventSystem)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xB17F3C", Offset = "0xB17F3C", VA = "0xB17F3C")]
		private static void SetEventSystemOfBaseInputModules(EventSystem eventSystem)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xB18140", Offset = "0xB18140", VA = "0xB18140")]
		public VRTK_EventSystem()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class VRTK_Logger : MonoBehaviour
	{
		[Token(Token = "0x200027B")]
		public enum LogLevels
		{
			[Token(Token = "0x4000F5E")]
			Trace,
			[Token(Token = "0x4000F5F")]
			Debug,
			[Token(Token = "0x4000F60")]
			Info,
			[Token(Token = "0x4000F61")]
			Warn,
			[Token(Token = "0x4000F62")]
			Error,
			[Token(Token = "0x4000F63")]
			Fatal,
			[Token(Token = "0x4000F64")]
			None
		}

		[Token(Token = "0x200027C")]
		public enum CommonMessageKeys
		{
			[Token(Token = "0x4000F66")]
			NOT_DEFINED,
			[Token(Token = "0x4000F67")]
			REQUIRED_COMPONENT_MISSING_FROM_SCENE,
			[Token(Token = "0x4000F68")]
			REQUIRED_COMPONENT_MISSING_FROM_GAMEOBJECT,
			[Token(Token = "0x4000F69")]
			REQUIRED_COMPONENT_MISSING_FROM_PARAMETER,
			[Token(Token = "0x4000F6A")]
			REQUIRED_COMPONENT_MISSING_NOT_INJECTED,
			[Token(Token = "0x4000F6B")]
			COULD_NOT_FIND_OBJECT_FOR_ACTION,
			[Token(Token = "0x4000F6C")]
			SDK_OBJECT_NOT_FOUND,
			[Token(Token = "0x4000F6D")]
			SDK_NOT_FOUND,
			[Token(Token = "0x4000F6E")]
			SDK_MANAGER_ERRORS,
			[Token(Token = "0x4000F6F")]
			SCRIPTING_DEFINE_SYMBOLS_ADDED,
			[Token(Token = "0x4000F70")]
			SCRIPTING_DEFINE_SYMBOLS_REMOVED,
			[Token(Token = "0x4000F71")]
			SCRIPTING_DEFINE_SYMBOLS_NOT_FOUND
		}

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_Logger instance;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Dictionary<CommonMessageKeys, string> commonMessages;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<CommonMessageKeys, int> commonMessageParts;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LogLevels minLevel;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool throwExceptions;

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xB184DC", Offset = "0xB184DC", VA = "0xB184DC")]
		public static void CreateIfNotExists()
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xB07B78", Offset = "0xB07B78", VA = "0xB07B78")]
		public static string GetCommonMessage(CommonMessageKeys messageKey, params object[] parameters)
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xB18AA4", Offset = "0xB18AA4", VA = "0xB18AA4")]
		public static void Trace(string message)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xB18CD0", Offset = "0xB18CD0", VA = "0xB18CD0")]
		public static void Debug(string message)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xB18D2C", Offset = "0xB18D2C", VA = "0xB18D2C")]
		public static void Info(string message)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xB18D88", Offset = "0xB18D88", VA = "0xB18D88")]
		public static void Warn(string message)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xB07CD0", Offset = "0xB07CD0", VA = "0xB07CD0")]
		public static void Error(string message, bool forcePause = false)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xB18DE4", Offset = "0xB18DE4", VA = "0xB18DE4")]
		public static void Fatal(string message, bool forcePause = false)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xB18E4C", Offset = "0xB18E4C", VA = "0xB18E4C")]
		public static void Fatal(Exception exception, bool forcePause = false)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xB18B00", Offset = "0xB18B00", VA = "0xB18B00")]
		public static void Log(LogLevels level, string message, bool forcePause = false)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xB18ECC", Offset = "0xB18ECC", VA = "0xB18ECC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xB18F78", Offset = "0xB18F78", VA = "0xB18F78")]
		public VRTK_Logger()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public static class VRTK_ObjectCache
	{
		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<VRTK_BasicTeleport> registeredTeleporters;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<VRTK_DestinationMarker> registeredDestinationMarkers;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<VRTK_InteractTouch, VRTK_ControllerTrackedCollider> registeredTrackedColliderToInteractTouches;
	}
	[Token(Token = "0x200027F")]
	public sealed class VRTK_PlayerObject : MonoBehaviour
	{
		[Token(Token = "0x2000280")]
		public enum ObjectTypes
		{
			[Token(Token = "0x4000F79")]
			Null,
			[Token(Token = "0x4000F7A")]
			CameraRig,
			[Token(Token = "0x4000F7B")]
			Headset,
			[Token(Token = "0x4000F7C")]
			Controller,
			[Token(Token = "0x4000F7D")]
			Pointer,
			[Token(Token = "0x4000F7E")]
			Highlighter,
			[Token(Token = "0x4000F7F")]
			Collider
		}

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObjectTypes objectType;

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xB0C8C4", Offset = "0xB0C8C4", VA = "0xB0C8C4")]
		public static void SetPlayerObject(GameObject obj, ObjectTypes objType)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xB0B6D0", Offset = "0xB0B6D0", VA = "0xB0B6D0")]
		public static bool IsPlayerObject(GameObject obj, ObjectTypes ofType = ObjectTypes.Null)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xB19480", Offset = "0xB19480", VA = "0xB19480")]
		public VRTK_PlayerObject()
		{
		}
	}
	[Token(Token = "0x2000281")]
	[Obsolete("`VRTK_RoomExtender_PlayAreaGizmo` will be removed in a future version of VRTK.")]
	[ExecuteInEditMode]
	public class VRTK_RoomExtender_PlayAreaGizmo : MonoBehaviour
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float wireframeHeight;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool drawWireframeWhenSelectedOnly;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform playArea;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_RoomExtender roomExtender;

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xB19488", Offset = "0xB19488", VA = "0xB19488", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xB194E0", Offset = "0xB194E0", VA = "0xB194E0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xB1975C", Offset = "0xB1975C", VA = "0xB1975C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xB197B4", Offset = "0xB197B4", VA = "0xB197B4", Slot = "7")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xB197CC", Offset = "0xB197CC", VA = "0xB197CC", Slot = "8")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xB197E4", Offset = "0xB197E4", VA = "0xB197E4", Slot = "9")]
		protected virtual void DrawWireframe()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xB19C94", Offset = "0xB19C94", VA = "0xB19C94")]
		public VRTK_RoomExtender_PlayAreaGizmo()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class VRTK_ScreenFade : MonoBehaviour
	{
		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_ScreenFade instance;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Material fadeMaterial;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Color currentColor;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color targetColor;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Color deltaColor;

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xB19CB0", Offset = "0xB19CB0", VA = "0xB19CB0")]
		public static void Start(Color newColor, float duration)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xB19DA0", Offset = "0xB19DA0", VA = "0xB19DA0", Slot = "4")]
		public virtual void StartFade(Color newColor, float duration)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xB19DE0", Offset = "0xB19DE0", VA = "0xB19DE0", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xB19EAC", Offset = "0xB19EAC", VA = "0xB19EAC", Slot = "6")]
		protected virtual void OnPostRender()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xB1A0DC", Offset = "0xB1A0DC", VA = "0xB1A0DC")]
		public VRTK_ScreenFade()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public abstract class VRTK_SDKControllerReady : MonoBehaviour
	{
		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SDK_BaseController previousControllerSDK;

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xB1A0F0", Offset = "0xB1A0F0", VA = "0xB1A0F0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xB1A198", Offset = "0xB1A198", VA = "0xB1A198", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xB1A260", Offset = "0xB1A260", VA = "0xB1A260", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xB1A290", Offset = "0xB1A290", VA = "0xB1A290", Slot = "7")]
		protected virtual void CheckControllersReady()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xB1A3C4", Offset = "0xB1A3C4", VA = "0xB1A3C4", Slot = "8")]
		protected virtual void UnregisterPreviousLeftController()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xB1A4C0", Offset = "0xB1A4C0", VA = "0xB1A4C0", Slot = "9")]
		protected virtual void UnregisterPreviousRightController()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xB1A5BC", Offset = "0xB1A5BC", VA = "0xB1A5BC", Slot = "10")]
		protected virtual void RegisterLeftControllerReady()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xB1A788", Offset = "0xB1A788", VA = "0xB1A788", Slot = "11")]
		protected virtual void RegisterRightControllerReady()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xB1A954", Offset = "0xB1A954", VA = "0xB1A954", Slot = "12")]
		protected virtual void RightControllerReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xB1A96C", Offset = "0xB1A96C", VA = "0xB1A96C", Slot = "13")]
		protected virtual void LeftControllerReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xB1A984", Offset = "0xB1A984", VA = "0xB1A984", Slot = "14")]
		protected virtual void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xB1A988", Offset = "0xB1A988", VA = "0xB1A988")]
		protected VRTK_SDKControllerReady()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public struct VRTKTrackedControllerEventArgs
	{
		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint currentIndex;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint previousIndex;
	}
	[Token(Token = "0x2000285")]
	public delegate void VRTKTrackedControllerEventHandler(object sender, VRTKTrackedControllerEventArgs e);
	[Token(Token = "0x2000286")]
	public class VRTK_TrackedController : MonoBehaviour
	{
		[Token(Token = "0x2000287")]
		[CompilerGenerated]
		private sealed class <EmitControllerEnabledAtEndOfFrame>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TrackedController <>4__this;

			[Token(Token = "0x1700016E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001108")]
				[Address(RVA = "0xB1BA88", Offset = "0xB1BA88", VA = "0xB1BA88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600110A")]
				[Address(RVA = "0xB1BAD0", Offset = "0xB1BAD0", VA = "0xB1BAD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001105")]
			[Address(RVA = "0xB1B778", Offset = "0xB1B778", VA = "0xB1B778")]
			[DebuggerHidden]
			public <EmitControllerEnabledAtEndOfFrame>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6001106")]
			[Address(RVA = "0xB1B9B8", Offset = "0xB1B9B8", VA = "0xB1B9B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001107")]
			[Address(RVA = "0xB1B9BC", Offset = "0xB1B9BC", VA = "0xB1B9BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001109")]
			[Address(RVA = "0xB1BA90", Offset = "0xB1BA90", VA = "0xB1BA90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000288")]
		[CompilerGenerated]
		private sealed class <EmitControllerModelReadyAtEndOfFrame>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TrackedController <>4__this;

			[Token(Token = "0x17000170")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600110E")]
				[Address(RVA = "0xB1BBA8", Offset = "0xB1BBA8", VA = "0xB1BBA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000171")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001110")]
				[Address(RVA = "0xB1BBF0", Offset = "0xB1BBF0", VA = "0xB1BBF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600110B")]
			[Address(RVA = "0xB1B944", Offset = "0xB1B944", VA = "0xB1B944")]
			[DebuggerHidden]
			public <EmitControllerModelReadyAtEndOfFrame>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x600110C")]
			[Address(RVA = "0xB1BAD8", Offset = "0xB1BAD8", VA = "0xB1BAD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600110D")]
			[Address(RVA = "0xB1BADC", Offset = "0xB1BADC", VA = "0xB1BADC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600110F")]
			[Address(RVA = "0xB1BBB0", Offset = "0xB1BBB0", VA = "0xB1BBB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint index;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject aliasController;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected SDK_BaseController.ControllerType controllerType;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected bool controllerModelWaitSubscribed;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Coroutine emitControllerEnabledRoutine;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Coroutine emitControllerModelAvailableRoutine;

		[Token(Token = "0x1700016D")]
		protected VRTK_ControllerReference controllerReference
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xB1ADE8", Offset = "0xB1ADE8", VA = "0xB1ADE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x140000AC")]
		public event VRTKTrackedControllerEventHandler ControllerEnabled
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xB1AA40", Offset = "0xB1AA40", VA = "0xB1AA40")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xB1AADC", Offset = "0xB1AADC", VA = "0xB1AADC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000AD")]
		public event VRTKTrackedControllerEventHandler ControllerDisabled
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xB1AB78", Offset = "0xB1AB78", VA = "0xB1AB78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xB1AC14", Offset = "0xB1AC14", VA = "0xB1AC14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000AE")]
		public event VRTKTrackedControllerEventHandler ControllerIndexChanged
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xB1ACB0", Offset = "0xB1ACB0", VA = "0xB1ACB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xB1AD4C", Offset = "0xB1AD4C", VA = "0xB1AD4C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000AF")]
		public event VRTKTrackedControllerEventHandler ControllerModelAvailable
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xB0CAC8", Offset = "0xB0CAC8", VA = "0xB0CAC8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xB0CC48", Offset = "0xB0CC48", VA = "0xB0CC48")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xB1AE40", Offset = "0xB1AE40", VA = "0xB1AE40", Slot = "4")]
		public virtual void OnControllerEnabled(VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xB1AE68", Offset = "0xB1AE68", VA = "0xB1AE68", Slot = "5")]
		public virtual void OnControllerDisabled(VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xB1AE90", Offset = "0xB1AE90", VA = "0xB1AE90", Slot = "6")]
		public virtual void OnControllerIndexChanged(VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xB1AEB8", Offset = "0xB1AEB8", VA = "0xB1AEB8", Slot = "7")]
		public virtual void OnControllerModelAvailable(VRTKTrackedControllerEventArgs e)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xB1AEE0", Offset = "0xB1AEE0", VA = "0xB1AEE0", Slot = "8")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xB1AEE8", Offset = "0xB1AEE8", VA = "0xB1AEE8", Slot = "9")]
		protected virtual VRTKTrackedControllerEventArgs SetEventPayload(uint previousIndex = uint.MaxValue)
		{
			return default(VRTKTrackedControllerEventArgs);
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xB1AEF4", Offset = "0xB1AEF4", VA = "0xB1AEF4", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xB1AF4C", Offset = "0xB1AF4C", VA = "0xB1AF4C", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xB1B0A0", Offset = "0xB1B0A0", VA = "0xB1B0A0", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xB1B104", Offset = "0xB1B104", VA = "0xB1B104", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xB1B15C", Offset = "0xB1B15C", VA = "0xB1B15C", Slot = "14")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xB1B1C0", Offset = "0xB1B1C0", VA = "0xB1B1C0", Slot = "15")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xB1B38C", Offset = "0xB1B38C", VA = "0xB1B38C", Slot = "16")]
		protected virtual void ManageLeftControllerListener(bool register, VRTKSDKBaseControllerEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xB1B3D0", Offset = "0xB1B3D0", VA = "0xB1B3D0", Slot = "17")]
		protected virtual void ManageRightControllerListener(bool register, VRTKSDKBaseControllerEventHandler callbackMethod)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xB1B414", Offset = "0xB1B414", VA = "0xB1B414", Slot = "18")]
		protected virtual void RegisterHandControllerListener(bool register, SDK_BaseController.ControllerHand givenHand)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xB1B4FC", Offset = "0xB1B4FC", VA = "0xB1B4FC", Slot = "19")]
		protected virtual void ManageControllerModelListener(bool register, SDK_BaseController.ControllerHand givenHand)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xB1B588", Offset = "0xB1B588", VA = "0xB1B588", Slot = "20")]
		protected virtual void ManageControllerModelListeners(bool register)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xB1B61C", Offset = "0xB1B61C", VA = "0xB1B61C", Slot = "21")]
		protected virtual void SetControllerType()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xB1B6A0", Offset = "0xB1B6A0", VA = "0xB1B6A0", Slot = "22")]
		protected virtual void StartEmitControllerEnabledAtEndOfFrame()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xB1B704", Offset = "0xB1B704", VA = "0xB1B704", Slot = "23")]
		[IteratorStateMachine(typeof(<EmitControllerEnabledAtEndOfFrame>d__39))]
		protected virtual IEnumerator EmitControllerEnabledAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xB1B7A0", Offset = "0xB1B7A0", VA = "0xB1B7A0", Slot = "24")]
		protected virtual void ControllerModelReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xB1B7FC", Offset = "0xB1B7FC", VA = "0xB1B7FC", Slot = "25")]
		protected virtual void StartEmitControllerModelReadyAtEndOfFrame()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xB1B8D0", Offset = "0xB1B8D0", VA = "0xB1B8D0", Slot = "26")]
		[IteratorStateMachine(typeof(<EmitControllerModelReadyAtEndOfFrame>d__42))]
		protected virtual IEnumerator EmitControllerModelReadyAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xB1B96C", Offset = "0xB1B96C", VA = "0xB1B96C", Slot = "27")]
		protected virtual void CancelCoroutines()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xB1B9A8", Offset = "0xB1B9A8", VA = "0xB1B9A8")]
		public VRTK_TrackedController()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class VRTK_TrackedHeadset : MonoBehaviour
	{
		[Token(Token = "0x6001111")]
		[Address(RVA = "0xB1BBF8", Offset = "0xB1BBF8", VA = "0xB1BBF8", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xB1BC04", Offset = "0xB1BC04", VA = "0xB1BC04", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xB1BC10", Offset = "0xB1BC10", VA = "0xB1BC10")]
		public VRTK_TrackedHeadset()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class VRTK_TunnelEffect : MonoBehaviour
	{
		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Material material;

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xB1BC18", Offset = "0xB1BC18", VA = "0xB1BC18", Slot = "4")]
		public virtual void SetMaterial(Material material)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xB1BC20", Offset = "0xB1BC20", VA = "0xB1BC20", Slot = "5")]
		protected virtual void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xB1BC94", Offset = "0xB1BC94", VA = "0xB1BC94")]
		public VRTK_TunnelEffect()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class VRTK_UIGraphicRaycaster : GraphicRaycaster
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Canvas currentCanvas;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Vector2 lastKnownPosition;

		[Token(Token = "0x4000FA0")]
		protected const float UI_CONTROL_OFFSET = 1E-05f;

		[NonSerialized]
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<RaycastResult> s_RaycastResults;

		[Token(Token = "0x17000172")]
		protected virtual Canvas canvas
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0xB1C998", Offset = "0xB1C998", VA = "0xB1C998", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xB1BC9C", Offset = "0xB1BC9C", VA = "0xB1BC9C", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xB1BEA4", Offset = "0xB1BEA4", VA = "0xB1BEA4", Slot = "22")]
		protected virtual void SetNearestRaycast(ref PointerEventData eventData, ref List<RaycastResult> resultAppendList, ref List<RaycastResult> raycastResults)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xB1C110", Offset = "0xB1C110", VA = "0xB1C110", Slot = "23")]
		protected virtual float GetHitDistance(Ray ray, float hitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xB1C430", Offset = "0xB1C430", VA = "0xB1C430", Slot = "24")]
		protected virtual void Raycast(Canvas canvas, Camera eventCamera, PointerEventData eventData, Ray ray, ref List<RaycastResult> results)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xB1CA50", Offset = "0xB1CA50", VA = "0xB1CA50")]
		public VRTK_UIGraphicRaycaster()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class VRTK_VRInputModule : PointerInputModule
	{
		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<VRTK_UIPointer> pointers;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool allowHover;

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xB1CBC8", Offset = "0xB1CBC8", VA = "0xB1CBC8", Slot = "31")]
		public virtual void Initialise()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xB1CC38", Offset = "0xB1CC38", VA = "0xB1CC38", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xB1CC40", Offset = "0xB1CC40", VA = "0xB1CC40", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xB1CDEC", Offset = "0xB1CDEC", VA = "0xB1CDEC", Slot = "32")]
		protected virtual List<RaycastResult> CheckRaycasts(VRTK_UIPointer pointer)
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xB1CF68", Offset = "0xB1CF68", VA = "0xB1CF68", Slot = "33")]
		protected virtual bool CheckTransformTree(Transform target, Transform source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xB1D054", Offset = "0xB1D054", VA = "0xB1D054", Slot = "34")]
		protected virtual bool NoValidCollision(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
			return default(bool);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xB1D138", Offset = "0xB1D138", VA = "0xB1D138", Slot = "35")]
		protected virtual bool IsHovering(VRTK_UIPointer pointer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xB1D29C", Offset = "0xB1D29C", VA = "0xB1D29C", Slot = "36")]
		protected virtual bool ValidElement(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xB1D34C", Offset = "0xB1D34C", VA = "0xB1D34C", Slot = "37")]
		protected virtual void CheckPointerHoverClick(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xB1D3D8", Offset = "0xB1D3D8", VA = "0xB1D3D8", Slot = "38")]
		protected virtual void Hover(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xB1DC04", Offset = "0xB1DC04", VA = "0xB1DC04", Slot = "39")]
		protected virtual void Click(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xB1DC54", Offset = "0xB1DC54", VA = "0xB1DC54", Slot = "40")]
		protected virtual void ClickOnUp(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xB1DCF4", Offset = "0xB1DCF4", VA = "0xB1DCF4", Slot = "41")]
		protected virtual void ClickOnDown(VRTK_UIPointer pointer, List<RaycastResult> results, bool forceClick = false)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xB1DDB0", Offset = "0xB1DDB0", VA = "0xB1DDB0", Slot = "42")]
		protected virtual bool IsEligibleClick(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
			return default(bool);
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xB1DFF0", Offset = "0xB1DFF0", VA = "0xB1DFF0", Slot = "43")]
		protected virtual bool AttemptClick(VRTK_UIPointer pointer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xB1E2A0", Offset = "0xB1E2A0", VA = "0xB1E2A0", Slot = "44")]
		protected virtual void Drag(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xB1E888", Offset = "0xB1E888", VA = "0xB1E888", Slot = "45")]
		protected virtual void Scroll(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xB1EB38", Offset = "0xB1EB38", VA = "0xB1EB38")]
		public VRTK_VRInputModule()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public abstract class VRTK_BaseObjectControlAction : MonoBehaviour
	{
		[Token(Token = "0x200028F")]
		public enum AxisListeners
		{
			[Token(Token = "0x4000FB3")]
			XAxisChanged,
			[Token(Token = "0x4000FB4")]
			YAxisChanged
		}

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Object Control script to receive axis change events from.")]
		public VRTK_ObjectControl objectControlScript;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Determines which Object Control Axis event to listen to.")]
		public AxisListeners listenOnAxisChange;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Collider centerCollider;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 colliderCenter;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float colliderRadius;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float colliderHeight;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform controlledTransform;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_BodyPhysics internalBodyPhysics;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3 playerHeadPositionBeforeRotation;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Transform headsetTransform;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool validPlayerObject;

		[Token(Token = "0x6001133")]
		protected abstract void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive);

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xB1EBC8", Offset = "0xB1EBC8", VA = "0xB1EBC8", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xB1EC20", Offset = "0xB1EC20", VA = "0xB1EC20", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xB1EDCC", Offset = "0xB1EDCC", VA = "0xB1EDCC", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xB1EEE0", Offset = "0xB1EEE0", VA = "0xB1EEE0", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xB1EF38", Offset = "0xB1EF38", VA = "0xB1EF38", Slot = "9")]
		protected virtual void AxisChanged(object sender, ObjectControlEventArgs e)
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xB1EF68", Offset = "0xB1EF68", VA = "0xB1EF68", Slot = "10")]
		protected virtual void RotateAroundPlayer(GameObject controlledGameObject, float angle)
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xB1F0D8", Offset = "0xB1F0D8", VA = "0xB1F0D8", Slot = "11")]
		protected virtual void Blink(float blinkSpeed)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xB1F130", Offset = "0xB1F130", VA = "0xB1F130", Slot = "12")]
		protected virtual void ReleaseBlink(float blinkSpeed)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xB1F150", Offset = "0xB1F150", VA = "0xB1F150", Slot = "13")]
		protected virtual Vector3 GetObjectCenter(Transform checkObject)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xB1F684", Offset = "0xB1F684", VA = "0xB1F684", Slot = "14")]
		protected virtual int GetAxisDirection(float axis)
		{
			return default(int);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xB1F69C", Offset = "0xB1F69C", VA = "0xB1F69C", Slot = "15")]
		protected virtual bool CanMove(VRTK_BodyPhysics givenBodyPhysics, Vector3 currentPosition, Vector3 proposedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xB1F888", Offset = "0xB1F888", VA = "0xB1F888", Slot = "16")]
		protected virtual void CheckForPlayerBeforeRotation(GameObject controlledGameObject)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xB1F9F0", Offset = "0xB1F9F0", VA = "0xB1F9F0", Slot = "17")]
		protected virtual void CheckForPlayerAfterRotation(GameObject controlledGameObject)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xB1FA98", Offset = "0xB1FA98", VA = "0xB1FA98")]
		protected VRTK_BaseObjectControlAction()
		{
		}
	}
	[Token(Token = "0x2000290")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/Object Control Actions/VRTK_RotateObjectControlAction")]
	public class VRTK_RotateObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The maximum speed the controlled object can be rotated based on the position of the axis.")]
		public float maximumRotationSpeed;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The rotation multiplier to be applied when the modifier button is pressed.")]
		public float rotationMultiplier;

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xB20AF8", Offset = "0xB20AF8", VA = "0xB20AF8", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xB20B80", Offset = "0xB20B80", VA = "0xB20B80", Slot = "18")]
		protected virtual float Rotate(float axis, bool modifierActive)
		{
			return default(float);
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xB20BD8", Offset = "0xB20BD8", VA = "0xB20BD8")]
		public VRTK_RotateObjectControlAction()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/Object Control Actions/VRTK_SlideObjectControlAction")]
	public class VRTK_SlideObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Slide Settings")]
		[Tooltip("The maximum speed the controlled object can be moved in based on the position of the axis.")]
		public float maximumSpeed;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The rate of speed deceleration when the axis is no longer being changed.")]
		public float deceleration;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The rate of speed deceleration when the axis is no longer being changed and the object is falling.")]
		public float fallingDeceleration;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The speed multiplier to be applied when the modifier button is pressed.")]
		public float speedMultiplier;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Custom Settings")]
		[Tooltip("An optional Body Physics script to check for potential collisions in the moving direction. If any potential collision is found then the move will not take place. This can help reduce collision tunnelling.")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float currentSpeed;

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xB20BEC", Offset = "0xB20BEC", VA = "0xB20BEC", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xB20C70", Offset = "0xB20C70", VA = "0xB20C70", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xB20C94", Offset = "0xB20C94", VA = "0xB20C94", Slot = "18")]
		protected virtual float CalculateSpeed(float inputValue, bool currentlyFalling, bool modifierActive)
		{
			return default(float);
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xB20CCC", Offset = "0xB20CCC", VA = "0xB20CCC", Slot = "19")]
		protected virtual float Decelerate(float speed, bool currentlyFalling)
		{
			return default(float);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xB20D4C", Offset = "0xB20D4C", VA = "0xB20D4C", Slot = "20")]
		protected virtual void Move(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xB20F04", Offset = "0xB20F04", VA = "0xB20F04")]
		public VRTK_SlideObjectControlAction()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/Object Control Actions/VRTK_SnapRotateObjectControlAction")]
	public class VRTK_SnapRotateObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The angle to rotate for each snap.")]
		public float anglePerSnap;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The snap angle multiplier to be applied when the modifier button is pressed.")]
		public float angleMultiplier;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The amount of time required to pass before another snap rotation can be carried out.")]
		public float snapDelay;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The speed for the headset to fade out and back in. Having a blink between rotations can reduce nausia.")]
		public float blinkTransitionSpeed;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(-1f, 1f)]
		[Tooltip("The threshold the listened axis needs to exceed before the action occurs. This can be used to limit the snap rotate to a single axis direction (e.g. pull down to flip rotate). The threshold is ignored if it is 0.")]
		public float axisThreshold;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float snapDelayTimer;

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xB20F18", Offset = "0xB20F18", VA = "0xB20F18", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xB20FEC", Offset = "0xB20FEC", VA = "0xB20FEC", Slot = "18")]
		protected virtual bool ValidThreshold(float axis)
		{
			return default(bool);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xB21024", Offset = "0xB21024", VA = "0xB21024", Slot = "19")]
		protected virtual float Rotate(float axis, bool modifierActive)
		{
			return default(float);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xB21098", Offset = "0xB21098", VA = "0xB21098")]
		public VRTK_SnapRotateObjectControlAction()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/Object Control Actions/VRTK_WarpObjectControlAction")]
	public class VRTK_WarpObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The distance to warp in the facing direction.")]
		[Header("Warp Settings")]
		public float warpDistance;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The multiplier to be applied to the warp when the modifier button is pressed.")]
		public float warpMultiplier;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The amount of time required to pass before another warp can be carried out.")]
		public float warpDelay;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The height different in floor allowed to be a valid warp.")]
		public float floorHeightTolerance;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("The speed for the headset to fade out and back in. Having a blink between warps can reduce nausia.")]
		public float blinkTransitionSpeed;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Custom Settings")]
		[Tooltip("An optional Body Physics script to check for potential collisions in the moving direction. If any potential collision is found then the move will not take place. This can help reduce collision tunnelling.")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float warpDelayTimer;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Transform headset;

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xB210AC", Offset = "0xB210AC", VA = "0xB210AC", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xB21164", Offset = "0xB21164", VA = "0xB21164", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xB211E4", Offset = "0xB211E4", VA = "0xB211E4", Slot = "18")]
		protected virtual void Warp(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, bool modifierActive)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xB21608", Offset = "0xB21608", VA = "0xB21608")]
		public VRTK_WarpObjectControlAction()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public delegate void TeleportEventHandler(object sender, DestinationMarkerEventArgs e);
	[Token(Token = "0x2000295")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_BasicTeleport")]
	public class VRTK_BasicTeleport : MonoBehaviour
	{
		[Token(Token = "0x2000296")]
		[CompilerGenerated]
		private sealed class <InitListenersAtEndOfFrame>d__53 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BasicTeleport <>4__this;

			[Token(Token = "0x17000173")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600117D")]
				[Address(RVA = "0xB237F8", Offset = "0xB237F8", VA = "0xB237F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000174")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600117F")]
				[Address(RVA = "0xB23840", Offset = "0xB23840", VA = "0xB23840", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600117A")]
			[Address(RVA = "0xB23464", Offset = "0xB23464", VA = "0xB23464")]
			[DebuggerHidden]
			public <InitListenersAtEndOfFrame>d__53(int <>1__state)
			{
			}

			[Token(Token = "0x600117B")]
			[Address(RVA = "0xB23728", Offset = "0xB23728", VA = "0xB23728", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600117C")]
			[Address(RVA = "0xB2372C", Offset = "0xB2372C", VA = "0xB2372C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600117E")]
			[Address(RVA = "0xB23800", Offset = "0xB23800", VA = "0xB23800", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The colour to fade to when fading on teleport.")]
		[Header("Base Settings")]
		public Color blinkToColor;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The time taken to fade to the `Blink To Color`. Setting the speed to `0` will mean no fade effect is present.")]
		public float blinkTransitionSpeed;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 32f)]
		[Tooltip("Determines how long the fade will stay present out depending on the distance being teleported. A value of `0` will not delay the teleport fade effect over any distance, a max value will delay the teleport fade in even when the distance teleported is very close to the original position.")]
		public float distanceBlinkDelay;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If this is checked then the teleported location will be the position of the headset within the play area. If it is unchecked then the teleported location will always be the centre of the play area even if the headset position is not in the centre of the play area.")]
		public bool headsetPositionCompensation;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether destination targets will be acted upon by the teleporter.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("An optional NavMeshData object that will be utilised for limiting the teleport to within any scene NavMesh.")]
		public VRTK_NavMeshData navMeshData;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Obsolete Settings")]
		[ObsoleteInspector]
		[Obsolete("`VRTK_BasicTeleport.navMeshLimitDistance` is no longer used, use `VRTK_BasicTeleport.processNavMesh` instead. This parameter will be removed in a future version of VRTK.")]
		public float navMeshLimitDistance;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform headset;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform playArea;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool adjustYForTerrain;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool enableTeleport;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected float blinkPause;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float fadeInTime;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float maxBlinkTransitionSpeed;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected float maxBlinkDistance;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Coroutine initaliseListeners;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool useGivenForcedPosition;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Vector3 givenForcedPosition;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Quaternion? givenForcedRotation;

		[Token(Token = "0x140000B0")]
		public event TeleportEventHandler Teleporting
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0xB21864", Offset = "0xB21864", VA = "0xB21864")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001158")]
			[Address(RVA = "0xB21900", Offset = "0xB21900", VA = "0xB21900")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000B1")]
		public event TeleportEventHandler Teleported
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xB2199C", Offset = "0xB2199C", VA = "0xB2199C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xB21A38", Offset = "0xB21A38", VA = "0xB21A38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xB21AD4", Offset = "0xB21AD4", VA = "0xB21AD4", Slot = "4")]
		public virtual void InitDestinationSetListener(GameObject markerMaker, bool register)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xB21C88", Offset = "0xB21C88", VA = "0xB21C88", Slot = "5")]
		public virtual void ToggleTeleportEnabled(bool state)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xB21C94", Offset = "0xB21C94", VA = "0xB21C94", Slot = "6")]
		public virtual bool ValidLocation(Transform target, Vector3 destinationPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xB21E20", Offset = "0xB21E20", VA = "0xB21E20", Slot = "7")]
		public virtual void Teleport(DestinationMarkerEventArgs teleportArgs)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xB21E78", Offset = "0xB21E78", VA = "0xB21E78", Slot = "8")]
		public virtual void Teleport(Transform target, Vector3 destinationPosition, [Optional] Quaternion? destinationRotation, bool forceDestinationPosition = false)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xB21F28", Offset = "0xB21F28", VA = "0xB21F28", Slot = "9")]
		public virtual void ForceTeleport(Vector3 destinationPosition, [Optional] Quaternion? destinationRotation)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xB2217C", Offset = "0xB2217C", VA = "0xB2217C", Slot = "10")]
		public virtual void SetActualTeleportDestination(Vector3 actualPosition, Quaternion? actualRotation)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xB221A0", Offset = "0xB221A0", VA = "0xB221A0", Slot = "11")]
		public virtual void ResetActualTeleportDestination()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xB221A8", Offset = "0xB221A8", VA = "0xB221A8", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xB22200", Offset = "0xB22200", VA = "0xB22200", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xB22380", Offset = "0xB22380", VA = "0xB22380", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xB2242C", Offset = "0xB2242C", VA = "0xB2242C", Slot = "15")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xB22484", Offset = "0xB22484", VA = "0xB22484", Slot = "16")]
		protected virtual void Blink(float transitionSpeed)
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xB22504", Offset = "0xB22504", VA = "0xB22504", Slot = "17")]
		protected virtual DestinationMarkerEventArgs BuildTeleportArgs(Transform target, Vector3 destinationPosition, [Optional] Quaternion? destinationRotation, bool forceDestinationPosition = false)
		{
			return default(DestinationMarkerEventArgs);
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xB2268C", Offset = "0xB2268C", VA = "0xB2268C", Slot = "18")]
		protected virtual bool ValidRigObjects()
		{
			return default(bool);
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xB22980", Offset = "0xB22980", VA = "0xB22980", Slot = "19")]
		protected virtual void DoTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xB22C70", Offset = "0xB22C70", VA = "0xB22C70", Slot = "20")]
		protected virtual void StartTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xB22CDC", Offset = "0xB22CDC", VA = "0xB22CDC", Slot = "21")]
		protected virtual void ProcessOrientation(object sender, DestinationMarkerEventArgs e, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xB22CE0", Offset = "0xB22CE0", VA = "0xB22CE0", Slot = "22")]
		protected virtual void EndTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xB22D4C", Offset = "0xB22D4C", VA = "0xB22D4C", Slot = "23")]
		protected virtual Vector3 SetNewPosition(Vector3 position, Transform target, bool forceDestinationPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xB22E30", Offset = "0xB22E30", VA = "0xB22E30", Slot = "24")]
		protected virtual Quaternion SetNewRotation(Quaternion? rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xB22F10", Offset = "0xB22F10", VA = "0xB22F10", Slot = "25")]
		protected virtual Vector3 GetNewPosition(Vector3 tipPosition, Transform target, bool returnOriginalPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xB22F98", Offset = "0xB22F98", VA = "0xB22F98", Slot = "26")]
		protected virtual Vector3 GetCompensatedPosition(Vector3 givenPosition, Vector3 defaultPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xB23070", Offset = "0xB23070", VA = "0xB23070", Slot = "27")]
		protected virtual Vector3 CheckTerrainCollision(Vector3 position, Transform target, bool useHeadsetForPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xB231C4", Offset = "0xB231C4", VA = "0xB231C4", Slot = "28")]
		protected virtual void OnTeleporting(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xB23230", Offset = "0xB23230", VA = "0xB23230", Slot = "29")]
		protected virtual void OnTeleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xB2329C", Offset = "0xB2329C", VA = "0xB2329C", Slot = "30")]
		protected virtual void CalculateBlinkDelay(float blinkSpeed, Vector3 newPosition)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xB233BC", Offset = "0xB233BC", VA = "0xB233BC", Slot = "31")]
		protected virtual void ReleaseBlink()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xB233F0", Offset = "0xB233F0", VA = "0xB233F0", Slot = "32")]
		[IteratorStateMachine(typeof(<InitListenersAtEndOfFrame>d__53))]
		protected virtual IEnumerator InitListenersAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xB2348C", Offset = "0xB2348C", VA = "0xB2348C", Slot = "33")]
		protected virtual void InitDestinationMarkerListeners(bool state)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xB2369C", Offset = "0xB2369C", VA = "0xB2369C")]
		public VRTK_BasicTeleport()
		{
		}
	}
	[Token(Token = "0x2000297")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_ButtonControl")]
	public class VRTK_ButtonControl : VRTK_ObjectControl
	{
		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Button Control Settings")]
		[Tooltip("The button to set the y axis to +1.")]
		public VRTK_ControllerEvents.ButtonAlias forwardButton;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The button to set the y axis to -1.")]
		public VRTK_ControllerEvents.ButtonAlias backwardButton;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The button to set the x axis to -1.")]
		public VRTK_ControllerEvents.ButtonAlias leftButton;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The button to set the x axis to +1.")]
		public VRTK_ControllerEvents.ButtonAlias rightButton;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool forwardPressed;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		protected bool backwardPressed;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		protected bool leftPressed;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		protected bool rightPressed;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedForwardButton;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedBackwardButton;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedLeftButton;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedRightButton;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected Vector2 axisDeadzone;

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xB23848", Offset = "0xB23848", VA = "0xB23848", Slot = "14")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xB2393C", Offset = "0xB2393C", VA = "0xB2393C", Slot = "6")]
		protected override void ControlFixedUpdate()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xB23A78", Offset = "0xB23A78", VA = "0xB23A78", Slot = "7")]
		protected override VRTK_ObjectControl GetOtherControl()
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xB23B84", Offset = "0xB23B84", VA = "0xB23B84", Slot = "9")]
		protected override void SetListeners(bool state)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xB23DB8", Offset = "0xB23DB8", VA = "0xB23DB8", Slot = "8")]
		protected override bool IsInAction()
		{
			return default(bool);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xB23DE8", Offset = "0xB23DE8", VA = "0xB23DE8", Slot = "22")]
		protected virtual void SetDirectionListener(bool state, VRTK_ControllerEvents.ButtonAlias directionButton, ref VRTK_ControllerEvents.ButtonAlias subscribedDirectionButton, ControllerInteractionEventHandler pressCallback, ControllerInteractionEventHandler releaseCallback)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xB23F4C", Offset = "0xB23F4C", VA = "0xB23F4C", Slot = "23")]
		protected virtual void ForwardButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xB23F58", Offset = "0xB23F58", VA = "0xB23F58", Slot = "24")]
		protected virtual void ForwardButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xB23F60", Offset = "0xB23F60", VA = "0xB23F60", Slot = "25")]
		protected virtual void BackwardButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xB23F6C", Offset = "0xB23F6C", VA = "0xB23F6C", Slot = "26")]
		protected virtual void BackwardButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xB23F74", Offset = "0xB23F74", VA = "0xB23F74", Slot = "27")]
		protected virtual void LeftButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xB23F80", Offset = "0xB23F80", VA = "0xB23F80", Slot = "28")]
		protected virtual void LeftButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xB23F88", Offset = "0xB23F88", VA = "0xB23F88", Slot = "29")]
		protected virtual void RightButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xB23F94", Offset = "0xB23F94", VA = "0xB23F94", Slot = "30")]
		protected virtual void RightButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xB23F9C", Offset = "0xB23F9C", VA = "0xB23F9C")]
		public VRTK_ButtonControl()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public struct DashTeleportEventArgs
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RaycastHit[] hits;
	}
	[Token(Token = "0x2000299")]
	public delegate void DashTeleportEventHandler(object sender, DashTeleportEventArgs e);
	[Token(Token = "0x200029A")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_DashTeleport")]
	public class VRTK_DashTeleport : VRTK_HeightAdjustTeleport
	{
		[Token(Token = "0x200029B")]
		[CompilerGenerated]
		private sealed class <lerpToPosition>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_DashTeleport <>4__this;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public DestinationMarkerEventArgs e;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Vector3 startPosition;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			public Quaternion startRotation;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			public Quaternion targetRotation;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public object sender;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private bool <gameObjectInTheWay>5__2;

			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private RaycastHit[] <allHits>5__3;

			[Token(Token = "0x4001006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private float <elapsedTime>5__4;

			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private float <currentLerpedTime>5__5;

			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private WaitForEndOfFrame <delayInstruction>5__6;

			[Token(Token = "0x17000175")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011A8")]
				[Address(RVA = "0xB25244", Offset = "0xB25244", VA = "0xB25244", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000176")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011AA")]
				[Address(RVA = "0xB2528C", Offset = "0xB2528C", VA = "0xB2528C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011A5")]
			[Address(RVA = "0xB24B18", Offset = "0xB24B18", VA = "0xB24B18")]
			[DebuggerHidden]
			public <lerpToPosition>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60011A6")]
			[Address(RVA = "0xB24C00", Offset = "0xB24C00", VA = "0xB24C00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011A7")]
			[Address(RVA = "0xB24C04", Offset = "0xB24C04", VA = "0xB24C04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011A9")]
			[Address(RVA = "0xB2524C", Offset = "0xB2524C", VA = "0xB2524C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Dash Settings")]
		[Tooltip("The fixed time it takes to dash to a new position.")]
		public float normalLerpTime;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("The minimum speed for dashing in meters per second.")]
		public float minSpeedMps;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The Offset of the CapsuleCast above the camera.")]
		public float capsuleTopOffset;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("The Offset of the CapsuleCast below the camera.")]
		public float capsuleBottomOffset;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The radius of the CapsuleCast.")]
		public float capsuleRadius;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float minDistanceForNormalLerp;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float lerpTime;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine attemptLerpRoutine;

		[Token(Token = "0x140000B2")]
		public event DashTeleportEventHandler WillDashThruObjects
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0xB2421C", Offset = "0xB2421C", VA = "0xB2421C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001194")]
			[Address(RVA = "0xB242B8", Offset = "0xB242B8", VA = "0xB242B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000B3")]
		public event DashTeleportEventHandler DashedThruObjects
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0xB24354", Offset = "0xB24354", VA = "0xB24354")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001196")]
			[Address(RVA = "0xB243F0", Offset = "0xB243F0", VA = "0xB243F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xB2448C", Offset = "0xB2448C", VA = "0xB2448C", Slot = "37")]
		public virtual void OnWillDashThruObjects(DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xB244B4", Offset = "0xB244B4", VA = "0xB244B4", Slot = "38")]
		public virtual void OnDashedThruObjects(DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xB244DC", Offset = "0xB244DC", VA = "0xB244DC", Slot = "13")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xB24544", Offset = "0xB24544", VA = "0xB24544", Slot = "14")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xB24594", Offset = "0xB24594", VA = "0xB24594", Slot = "23")]
		protected override Vector3 SetNewPosition(Vector3 position, Transform target, bool forceDestinationPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xB245A8", Offset = "0xB245A8", VA = "0xB245A8", Slot = "24")]
		protected override Quaternion SetNewRotation(Quaternion? rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xB24678", Offset = "0xB24678", VA = "0xB24678", Slot = "20")]
		protected override void StartTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xB246E4", Offset = "0xB246E4", VA = "0xB246E4", Slot = "21")]
		protected override void ProcessOrientation(object sender, DestinationMarkerEventArgs e, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xB24864", Offset = "0xB24864", VA = "0xB24864", Slot = "39")]
		protected virtual Vector3 CalculateOffsetPosition(Vector3 targetPosition, Quaternion targetRotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xB249E0", Offset = "0xB249E0", VA = "0xB249E0", Slot = "22")]
		protected override void EndTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xB249E4", Offset = "0xB249E4", VA = "0xB249E4", Slot = "40")]
		[IteratorStateMachine(typeof(<lerpToPosition>d__24))]
		protected virtual IEnumerator lerpToPosition(object sender, DestinationMarkerEventArgs e, Vector3 startPosition, Vector3 targetPosition, Quaternion startRotation, Quaternion targetRotation)
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xB24B40", Offset = "0xB24B40", VA = "0xB24B40", Slot = "41")]
		protected virtual DashTeleportEventArgs SetDashTeleportEvent(RaycastHit[] hits)
		{
			return default(DashTeleportEventArgs);
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xB24B5C", Offset = "0xB24B5C", VA = "0xB24B5C")]
		public VRTK_DashTeleport()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_DragWorld")]
	public class VRTK_DragWorld : MonoBehaviour
	{
		[Token(Token = "0x200029D")]
		public enum ActivationRequirement
		{
			[Token(Token = "0x4001034")]
			LeftControllerOnly,
			[Token(Token = "0x4001035")]
			RightControllerOnly,
			[Token(Token = "0x4001036")]
			LeftController,
			[Token(Token = "0x4001037")]
			RightController,
			[Token(Token = "0x4001038")]
			EitherController,
			[Token(Token = "0x4001039")]
			BothControllers
		}

		[Token(Token = "0x200029E")]
		public enum TrackingController
		{
			[Token(Token = "0x400103B")]
			LeftController,
			[Token(Token = "0x400103C")]
			RightController,
			[Token(Token = "0x400103D")]
			EitherController,
			[Token(Token = "0x400103E")]
			BothControllers
		}

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller button to press to activate the movement mechanism.")]
		[Header("Movement Settings")]
		public VRTK_ControllerEvents.ButtonAlias movementActivationButton;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The controller(s) on which the activation button is to be pressed to consider the movement mechanism active.")]
		public ActivationRequirement movementActivationRequirement;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The controller(s) on which to track position of to determine if a valid move has taken place.")]
		public TrackingController movementTrackingController;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount to multply the movement by.")]
		public float movementMultiplier;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The axes to lock to prevent movement across.")]
		public Vector3State movementPositionLock;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Settings")]
		[Tooltip("The controller button to press to activate the rotation mechanism.")]
		public VRTK_ControllerEvents.ButtonAlias rotationActivationButton;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The controller(s) on which the activation button is to be pressed to consider the rotation mechanism active.")]
		public ActivationRequirement rotationActivationRequirement;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The controller(s) on which to determine how rotation should occur. `BothControllers` requires both controllers to be pushed/pulled to rotate, whereas any other setting will base rotation on the rotation of the activating controller.")]
		public TrackingController rotationTrackingController;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The amount to multply the rotation angle by.")]
		public float rotationMultiplier;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The threshold the rotation angle has to be above to consider a valid rotation amount.")]
		public float rotationActivationThreshold;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Scale Settings")]
		[Tooltip("The controller button to press to activate the scale mechanism.")]
		public VRTK_ControllerEvents.ButtonAlias scaleActivationButton;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The controller(s) on which the activation button is to be pressed to consider the scale mechanism active.")]
		public ActivationRequirement scaleActivationRequirement;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The controller(s) on which to determine how scaling should occur.")]
		public TrackingController scaleTrackingController;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount to multply the scale factor by.")]
		public float scaleMultiplier;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The threshold the distance between the scale objects has to be above to consider a valid scale operation.")]
		public float scaleActivationThreshold;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the minimum scale amount that can be applied.")]
		public Vector3 minimumScale;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("the maximum scale amount that can be applied.")]
		public Vector3 maximumScale;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The transform to apply the control mechanisms to. If this is left blank then the PlayArea will be controlled.")]
		[Header("Custom Settings")]
		public Transform controllingTransform;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Uses the specified `Offset Transform` when dealing with rotational offsets.")]
		public bool useOffsetTransform;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The transform to use when dealing with rotational offsets. If this is left blank then the Headset will be used as the offset.")]
		public Transform offsetTransform;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected VRTK_ControllerReference leftControllerReference;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_ControllerReference rightControllerReference;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_ControllerEvents leftControllerEvents;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_ControllerEvents rightControllerEvents;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Transform playArea;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Transform headset;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedMovementActivationButton;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Vector3 previousRightControllerPosition;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected bool movementLeftControllerActivated;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		protected bool movementRightControllerActivated;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		protected bool movementActivated;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedRotationActivationButton;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected Vector2 previousRotationAngle;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected bool rotationLeftControllerActivated;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		protected bool rotationRightControllerActivated;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE6")]
		protected bool rotationActivated;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedScaleActivationButton;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float previousControllerDistance;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool scaleLeftControllerActivated;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool scaleRightControllerActivated;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool scaleActivated;

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xB25294", Offset = "0xB25294", VA = "0xB25294", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xB252EC", Offset = "0xB252EC", VA = "0xB252EC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xB254BC", Offset = "0xB254BC", VA = "0xB254BC", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xB254CC", Offset = "0xB254CC", VA = "0xB254CC", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xB25524", Offset = "0xB25524", VA = "0xB25524", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xB2557C", Offset = "0xB2557C", VA = "0xB2557C", Slot = "9")]
		protected virtual VRTK_ControllerEvents GetControllerEvents(GameObject controllerObject)
		{
			return null;
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xB25614", Offset = "0xB25614", VA = "0xB25614", Slot = "10")]
		protected virtual void ManageActivationListeners(bool state)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xB257D0", Offset = "0xB257D0", VA = "0xB257D0", Slot = "11")]
		protected virtual void ManageActivationListener(bool state, ref VRTK_ControllerEvents.ButtonAlias activationButton, ref VRTK_ControllerEvents.ButtonAlias subscribedActivationButton, ControllerInteractionEventHandler buttonPressedCallback, ControllerInteractionEventHandler buttonReleasedCallback)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xB25B58", Offset = "0xB25B58", VA = "0xB25B58", Slot = "12")]
		protected virtual void ControllerModelAvailable(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xB25B68", Offset = "0xB25B68", VA = "0xB25B68", Slot = "13")]
		protected virtual void SetControllerReferences()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xB25BE4", Offset = "0xB25BE4", VA = "0xB25BE4", Slot = "14")]
		protected virtual void ManageActivationState(SDK_BaseController.ControllerHand hand, ActivationRequirement activationRequirement, bool pressedState, ref bool leftActivationState, ref bool rightActivationState, ref bool activated)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xB25C74", Offset = "0xB25C74", VA = "0xB25C74", Slot = "15")]
		protected virtual void MovementActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xB25CD8", Offset = "0xB25CD8", VA = "0xB25CD8", Slot = "16")]
		protected virtual void MovementActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xB25D28", Offset = "0xB25D28", VA = "0xB25D28", Slot = "17")]
		protected virtual void RotationActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xB25D94", Offset = "0xB25D94", VA = "0xB25D94", Slot = "18")]
		protected virtual void RotationActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xB25DE4", Offset = "0xB25DE4", VA = "0xB25DE4", Slot = "19")]
		protected virtual void ScaleActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xB25E50", Offset = "0xB25E50", VA = "0xB25E50", Slot = "20")]
		protected virtual void ScaleActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xB25EA0", Offset = "0xB25EA0", VA = "0xB25EA0", Slot = "21")]
		protected virtual Vector3 GetLeftControllerPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xB25F6C", Offset = "0xB25F6C", VA = "0xB25F6C", Slot = "22")]
		protected virtual Vector3 GetRightControllerPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xB26038", Offset = "0xB26038", VA = "0xB26038", Slot = "23")]
		protected virtual void SetControllerPositions()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xB2607C", Offset = "0xB2607C", VA = "0xB2607C", Slot = "24")]
		protected virtual Vector2 GetControllerRotation()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xB260F4", Offset = "0xB260F4", VA = "0xB260F4", Slot = "25")]
		protected virtual float GetControllerDistance()
		{
			return default(float);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xB26374", Offset = "0xB26374", VA = "0xB26374", Slot = "26")]
		protected virtual bool TrackingControllerEnabled(TrackingController trackingController, TrackingController hand, bool handActivated)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xB26398", Offset = "0xB26398", VA = "0xB26398", Slot = "27")]
		protected virtual void Move()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xB26634", Offset = "0xB26634", VA = "0xB26634", Slot = "28")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xB268CC", Offset = "0xB268CC", VA = "0xB268CC", Slot = "29")]
		protected virtual void RotateByAngle(float angle)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xB26A0C", Offset = "0xB26A0C", VA = "0xB26A0C", Slot = "30")]
		protected virtual void Scale()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xB26BC0", Offset = "0xB26BC0", VA = "0xB26BC0")]
		public VRTK_DragWorld()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_HeightAdjustTeleport")]
	public class VRTK_HeightAdjustTeleport : VRTK_BasicTeleport
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Header("Height Adjust Settings")]
		[Tooltip("If this is checked, then the teleported Y position will snap to the nearest available below floor. If it is unchecked, then the teleported Y position will be where ever the destination Y position is.")]
		public bool snapToNearestFloor;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[Tooltip("If this is checked then the teleported Y position will also be offset by the play area parent Transform Y position (if the play area has a parent).")]
		public bool applyPlayareaParentOffset;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("A custom raycaster to use when raycasting to find floors.")]
		public VRTK_CustomRaycast customRaycast;

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xB24518", Offset = "0xB24518", VA = "0xB24518", Slot = "13")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xB24590", Offset = "0xB24590", VA = "0xB24590", Slot = "14")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xB26D74", Offset = "0xB26D74", VA = "0xB26D74", Slot = "25")]
		protected override Vector3 GetNewPosition(Vector3 tipPosition, Transform target, bool returnOriginalPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xB26DFC", Offset = "0xB26DFC", VA = "0xB26DFC", Slot = "34")]
		protected virtual void AdjustForParentOffset()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xB26FF4", Offset = "0xB26FF4", VA = "0xB26FF4", Slot = "35")]
		protected virtual float GetParentOffset()
		{
			return default(float);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xB270B8", Offset = "0xB270B8", VA = "0xB270B8", Slot = "36")]
		protected virtual float GetTeleportY(Transform target, Vector3 tipPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xB24B88", Offset = "0xB24B88", VA = "0xB24B88")]
		public VRTK_HeightAdjustTeleport()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_MoveInPlace")]
	public class VRTK_MoveInPlace : MonoBehaviour
	{
		[Token(Token = "0x20002A1")]
		public enum ControlOptions
		{
			[Token(Token = "0x4001063")]
			HeadsetAndControllers,
			[Token(Token = "0x4001064")]
			ControllersOnly,
			[Token(Token = "0x4001065")]
			HeadsetOnly
		}

		[Token(Token = "0x20002A2")]
		public enum DirectionalMethod
		{
			[Token(Token = "0x4001067")]
			Gaze,
			[Token(Token = "0x4001068")]
			ControllerRotation,
			[Token(Token = "0x4001069")]
			DumbDecoupling,
			[Token(Token = "0x400106A")]
			SmartDecoupling,
			[Token(Token = "0x400106B")]
			EngageControllerRotationOnly,
			[Token(Token = "0x400106C")]
			LeftControllerRotationOnly,
			[Token(Token = "0x400106D")]
			RightControllerRotationOnly
		}

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Control Settings")]
		[Tooltip("If this is checked then the left controller engage button will be enabled to move the play area.")]
		public bool leftController;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If this is checked then the right controller engage button will be enabled to move the play area.")]
		public bool rightController;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The button to press to activate the movement.")]
		public VRTK_ControllerEvents.ButtonAlias engageButton;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The device to determine the movement paramters from.")]
		public ControlOptions controlOptions;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The method in which to determine the direction of forward movement.")]
		public DirectionalMethod directionMethod;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Speed Settings")]
		[Tooltip("The speed in which to move the play area.")]
		public float speedScale;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The maximun speed in game units. (If 0 or less, max speed is uncapped)")]
		public float maxSpeed;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The speed in which the play area slows down to a complete stop when the engage button is released. This deceleration effect can ease any motion sickness that may be suffered.")]
		public float deceleration;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The speed in which the play area slows down to a complete stop when falling is occuring.")]
		public float fallingDeceleration;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Advanced Settings")]
		[Tooltip("The degree threshold that all tracked objects (controllers, headset) must be within to change direction when using the Smart Decoupling Direction Method.")]
		public float smartDecoupleThreshold;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The maximum amount of movement required to register in the virtual world.  Decreasing this will increase acceleration, and vice versa.")]
		public float sensitivity;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Custom Settings")]
		[Tooltip("An optional Body Physics script to check for potential collisions in the moving direction. If any potential collision is found then the move will not take place. This can help reduce collision tunnelling.")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject controllerLeftHand;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject controllerRightHand;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected VRTK_ControllerReference engagedController;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform headset;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftSubscribed;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool rightSubscribed;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool previousLeftControllerState;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool previousRightControllerState;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected VRTK_ControllerEvents.ButtonAlias previousEngageButton;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool currentlyFalling;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected int averagePeriod;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected List<Transform> trackedObjects;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Dictionary<Transform, List<float>> movementList;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<Transform, float> previousYPositions;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 initialGaze;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float currentSpeed;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3 currentDirection;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected Vector3 previousDirection;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool movementEngaged;

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xB272C0", Offset = "0xB272C0", VA = "0xB272C0", Slot = "4")]
		public virtual void SetControlOptions(ControlOptions givenControlOptions)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xB274B0", Offset = "0xB274B0", VA = "0xB274B0", Slot = "5")]
		public virtual Vector3 GetMovementDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xB274BC", Offset = "0xB274BC", VA = "0xB274BC", Slot = "6")]
		public virtual float GetSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xB274C4", Offset = "0xB274C4", VA = "0xB274C4", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xB2751C", Offset = "0xB2751C", VA = "0xB2751C", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xB278F8", Offset = "0xB278F8", VA = "0xB278F8", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xB27998", Offset = "0xB27998", VA = "0xB27998", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xB279F0", Offset = "0xB279F0", VA = "0xB279F0", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xB27A4C", Offset = "0xB27A4C", VA = "0xB27A4C", Slot = "12")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xB27BFC", Offset = "0xB27BFC", VA = "0xB27BFC", Slot = "13")]
		protected virtual bool MovementActivated()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xB27C1C", Offset = "0xB27C1C", VA = "0xB27C1C", Slot = "14")]
		protected virtual void CheckControllerState(GameObject controller, bool controllerState, ref bool subscribedState, ref bool previousState)
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xB27C70", Offset = "0xB27C70", VA = "0xB27C70", Slot = "15")]
		protected virtual float CalculateListAverage()
		{
			return default(float);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xB27ECC", Offset = "0xB27ECC", VA = "0xB27ECC", Slot = "16")]
		protected virtual Vector3 HeadsetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xB27FA8", Offset = "0xB27FA8", VA = "0xB27FA8", Slot = "17")]
		protected virtual Vector3 SetDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xB281F8", Offset = "0xB281F8", VA = "0xB281F8", Slot = "18")]
		protected virtual Vector3 CalculateCouplingDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xB28408", Offset = "0xB28408", VA = "0xB28408", Slot = "19")]
		protected virtual Vector3 CalculateControllerRotationDirection(Vector3 calculatedControllerDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xB28544", Offset = "0xB28544", VA = "0xB28544", Slot = "20")]
		protected virtual void SetDeltaTransformData()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xB28620", Offset = "0xB28620", VA = "0xB28620", Slot = "21")]
		protected virtual void MovePlayArea(Vector3 moveDirection, float moveSpeed)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xB28778", Offset = "0xB28778", VA = "0xB28778", Slot = "22")]
		protected virtual bool CanMove(VRTK_BodyPhysics givenBodyPhysics, Vector3 currentPosition, Vector3 proposedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xB28964", Offset = "0xB28964", VA = "0xB28964", Slot = "23")]
		protected virtual void HandleFalling()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xB28A48", Offset = "0xB28A48", VA = "0xB28A48", Slot = "24")]
		protected virtual void EngageButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xB28A70", Offset = "0xB28A70", VA = "0xB28A70", Slot = "25")]
		protected virtual void EngageButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xB28BEC", Offset = "0xB28BEC", VA = "0xB28BEC", Slot = "26")]
		protected virtual Quaternion DetermineAverageControllerRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xB28E14", Offset = "0xB28E14", VA = "0xB28E14", Slot = "27")]
		protected virtual Quaternion AverageRotation(Quaternion rot1, Quaternion rot2)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xB28E38", Offset = "0xB28E38", VA = "0xB28E38", Slot = "28")]
		protected virtual void SetControllerListeners(GameObject controller, bool controllerState, ref bool subscribedState, bool forceDisabled = false)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xB28EF0", Offset = "0xB28EF0", VA = "0xB28EF0", Slot = "29")]
		protected virtual void ToggleControllerListeners(GameObject controller, bool toggle, ref bool subscribed)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xB291B0", Offset = "0xB291B0", VA = "0xB291B0")]
		public VRTK_MoveInPlace()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public struct ObjectControlEventArgs
	{
		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject controlledGameObject;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform directionDevice;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 axisDirection;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float axis;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deadzone;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool currentlyFalling;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool modifierActive;
	}
	[Token(Token = "0x20002A4")]
	public delegate void ObjectControlEventHandler(object sender, ObjectControlEventArgs e);
	[Token(Token = "0x20002A5")]
	public abstract class VRTK_ObjectControl : MonoBehaviour
	{
		[Token(Token = "0x20002A6")]
		public enum DirectionDevices
		{
			[Token(Token = "0x400108A")]
			Headset,
			[Token(Token = "0x400108B")]
			LeftController,
			[Token(Token = "0x400108C")]
			RightController,
			[Token(Token = "0x400108D")]
			ControlledObject
		}

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Control Settings")]
		[Tooltip("The direction that will be moved in is the direction of this device.")]
		public DirectionDevices deviceForDirection;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If this is checked then whenever the axis on the attached controller is being changed, all other object control scripts of the same type on other controllers will be disabled.")]
		public bool disableOtherControlsOnActive;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("If a `VRTK_BodyPhysics` script is present and this is checked, then the object control will affect the play area whilst it is falling.")]
		public bool affectOnFalling;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("An optional game object to apply the object control to. If this is blank then the PlayArea will be controlled.")]
		public GameObject controlOverrideObject;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Custom Settings")]
		[Tooltip("The controller to read the controller events from. If this is blank then it will attempt to get a controller events script from the same GameObject.")]
		public VRTK_ControllerEvents controller;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("An optional Body Physics script to check for potential collisions in the moving direction.")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_ObjectControl otherObjectControl;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject controlledGameObject;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject setControlOverrideObject;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform directionDevice;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected DirectionDevices previousDeviceForDirection;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector2 currentAxis;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected Vector2 storedAxis;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected bool currentlyFalling;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		protected bool modifierActive;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float controlledGameObjectPreviousY;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float controlledGameObjectPreviousYOffset;

		[Token(Token = "0x140000B4")]
		public event ObjectControlEventHandler XAxisChanged
		{
			[Token(Token = "0x60011ED")]
			[Address(RVA = "0xB29520", Offset = "0xB29520", VA = "0xB29520")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0xB295BC", Offset = "0xB295BC", VA = "0xB295BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000B5")]
		public event ObjectControlEventHandler YAxisChanged
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xB29658", Offset = "0xB29658", VA = "0xB29658")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0xB296F4", Offset = "0xB296F4", VA = "0xB296F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xB29790", Offset = "0xB29790", VA = "0xB29790", Slot = "4")]
		public virtual void OnXAxisChanged(ObjectControlEventArgs e)
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xB297E0", Offset = "0xB297E0", VA = "0xB297E0", Slot = "5")]
		public virtual void OnYAxisChanged(ObjectControlEventArgs e)
		{
		}

		[Token(Token = "0x60011F3")]
		protected abstract void ControlFixedUpdate();

		[Token(Token = "0x60011F4")]
		protected abstract VRTK_ObjectControl GetOtherControl();

		[Token(Token = "0x60011F5")]
		protected abstract bool IsInAction();

		[Token(Token = "0x60011F6")]
		protected abstract void SetListeners(bool state);

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xB29830", Offset = "0xB29830", VA = "0xB29830", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xB29888", Offset = "0xB29888", VA = "0xB29888", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xB29CA0", Offset = "0xB29CA0", VA = "0xB29CA0", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xB29CB0", Offset = "0xB29CB0", VA = "0xB29CB0", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xB238B4", Offset = "0xB238B4", VA = "0xB238B4", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xB29D08", Offset = "0xB29D08", VA = "0xB29D08", Slot = "15")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xB29D48", Offset = "0xB29D48", VA = "0xB29D48", Slot = "16")]
		protected virtual ObjectControlEventArgs SetEventArguements(Vector3 axisDirection, float axis, float axisDeadzone)
		{
			return default(ObjectControlEventArgs);
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xB29DF8", Offset = "0xB29DF8", VA = "0xB29DF8", Slot = "17")]
		protected virtual void SetControlledObject()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xB29F44", Offset = "0xB29F44", VA = "0xB29F44", Slot = "18")]
		protected virtual void CheckFalling()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xB2A13C", Offset = "0xB2A13C", VA = "0xB2A13C", Slot = "19")]
		protected virtual bool ObjectHeightChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xB2A1B0", Offset = "0xB2A1B0", VA = "0xB2A1B0", Slot = "20")]
		protected virtual Transform GetDirectionDevice()
		{
			return null;
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xB2A298", Offset = "0xB2A298", VA = "0xB2A298", Slot = "21")]
		protected virtual void CheckDirectionDevice()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xB24010", Offset = "0xB24010", VA = "0xB24010")]
		protected VRTK_ObjectControl()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public struct PlayerClimbEventArgs
	{
		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject target;
	}
	[Token(Token = "0x20002A8")]
	public delegate void PlayerClimbEventHandler(object sender, PlayerClimbEventArgs e);
	[Token(Token = "0x20002A9")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_PlayerClimb")]
	public class VRTK_PlayerClimb : MonoBehaviour
	{
		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climb Settings")]
		[Tooltip("Will scale movement up and down based on the player transform's scale.")]
		public bool usePlayerScale;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Custom Settings")]
		[Tooltip("The Body Physics script to use for dealing with climbing and falling. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Teleport script to use when snapping to nearest floor on release. If this is left blank then a Teleport script will need to be applied to the same GameObject.")]
		public VRTK_BasicTeleport teleporter;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Headset Collision script to use for determining if the user is climbing inside a collidable object. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetCollision headsetCollision;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Position Rewind script to use for dealing resetting invalid positions. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_PositionRewind positionRewind;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 startControllerScaledLocalPosition;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected Vector3 startGrabPointLocalPosition;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 startPlayAreaWorldOffset;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GameObject grabbingController;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected GameObject climbingObject;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Quaternion climbingObjectLastRotation;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool isClimbing;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		protected bool useGrabbedObjectRotation;

		[Token(Token = "0x140000B6")]
		public event PlayerClimbEventHandler PlayerClimbStarted
		{
			[Token(Token = "0x6001208")]
			[Address(RVA = "0xB2A4E4", Offset = "0xB2A4E4", VA = "0xB2A4E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001209")]
			[Address(RVA = "0xB2A580", Offset = "0xB2A580", VA = "0xB2A580")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000B7")]
		public event PlayerClimbEventHandler PlayerClimbEnded
		{
			[Token(Token = "0x600120A")]
			[Address(RVA = "0xB2A61C", Offset = "0xB2A61C", VA = "0xB2A61C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600120B")]
			[Address(RVA = "0xB2A6B8", Offset = "0xB2A6B8", VA = "0xB2A6B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xB2A754", Offset = "0xB2A754", VA = "0xB2A754", Slot = "4")]
		public virtual bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xB2A75C", Offset = "0xB2A75C", VA = "0xB2A75C", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xB2AAE8", Offset = "0xB2AAE8", VA = "0xB2AAE8", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xB2AB64", Offset = "0xB2AB64", VA = "0xB2AB64", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xB2ABA4", Offset = "0xB2ABA4", VA = "0xB2ABA4", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xB2ABFC", Offset = "0xB2ABFC", VA = "0xB2ABFC", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xB2AFB0", Offset = "0xB2AFB0", VA = "0xB2AFB0", Slot = "10")]
		protected virtual void OnPlayerClimbStarted(PlayerClimbEventArgs e)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xB2AFDC", Offset = "0xB2AFDC", VA = "0xB2AFDC", Slot = "11")]
		protected virtual void OnPlayerClimbEnded(PlayerClimbEventArgs e)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xB2B008", Offset = "0xB2B008", VA = "0xB2B008", Slot = "12")]
		protected virtual PlayerClimbEventArgs SetPlayerClimbEvent(VRTK_ControllerReference controllerReference, GameObject target)
		{
			return default(PlayerClimbEventArgs);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xB2B050", Offset = "0xB2B050", VA = "0xB2B050", Slot = "13")]
		protected virtual void InitListeners(bool state)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xB2B114", Offset = "0xB2B114", VA = "0xB2B114", Slot = "14")]
		protected virtual void InitTeleportListener(bool state)
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xB2B1F4", Offset = "0xB2B1F4", VA = "0xB2B1F4", Slot = "15")]
		protected virtual void OnTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xB2B254", Offset = "0xB2B254", VA = "0xB2B254", Slot = "16")]
		protected virtual Vector3 GetScaledLocalPosition(Transform objTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xB2B314", Offset = "0xB2B314", VA = "0xB2B314", Slot = "17")]
		protected virtual void OnGrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xB2B430", Offset = "0xB2B430", VA = "0xB2B430", Slot = "18")]
		protected virtual void OnUngrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xB2B5B4", Offset = "0xB2B5B4", VA = "0xB2B5B4", Slot = "19")]
		protected virtual void Grab(GameObject currentGrabbingController, VRTK_ControllerReference controllerReference, GameObject target)
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xB2B844", Offset = "0xB2B844", VA = "0xB2B844", Slot = "20")]
		protected virtual void Ungrab(bool carryMomentum, VRTK_ControllerReference controllerReference, GameObject target)
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xB2BB00", Offset = "0xB2BB00", VA = "0xB2BB00", Slot = "21")]
		protected virtual bool IsActiveClimbingController(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xB2BB6C", Offset = "0xB2BB6C", VA = "0xB2BB6C", Slot = "22")]
		protected virtual bool IsClimbableObject(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xB2BC48", Offset = "0xB2BC48", VA = "0xB2BC48", Slot = "23")]
		protected virtual void InitControllerListeners(GameObject controller, bool state)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xB2BDE8", Offset = "0xB2BDE8", VA = "0xB2BDE8", Slot = "24")]
		protected virtual bool IsBodyColliding()
		{
			return default(bool);
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xB2BEA0", Offset = "0xB2BEA0", VA = "0xB2BEA0", Slot = "25")]
		protected virtual bool IsHeadsetColliding()
		{
			return default(bool);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xB2BF2C", Offset = "0xB2BF2C", VA = "0xB2BF2C")]
		public VRTK_PlayerClimb()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_RoomExtender")]
	[Obsolete("`VRTK_RoomExtender` has been replaced with `VRTK_StepMultiplier`. This script will be removed in a future version of VRTK.")]
	public class VRTK_RoomExtender : MonoBehaviour
	{
		[Token(Token = "0x20002AB")]
		public enum MovementFunction
		{
			[Token(Token = "0x40010AD")]
			Nonlinear,
			[Token(Token = "0x40010AE")]
			LinearDirect
		}

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This determines the type of movement used by the extender.")]
		public MovementFunction movementFunction;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Enables the additional movement.")]
		public bool additionalMovementEnabled;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("If this is checked then the touchpad needs to be pressed to enable it. If this is unchecked then it is disabled by pressing the touchpad.")]
		public bool additionalMovementEnabledOnButtonPress;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 10f)]
		[Tooltip("This is the factor by which movement at the edge of the circle is amplified. `0` is no movement of the play area. Higher values simulate a bigger play area but may be too uncomfortable.")]
		public float additionalMovementMultiplier;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This is the size of the circle in which the play area is not moved and everything is normal. If it is to low it becomes uncomfortable when crouching.")]
		[Range(0f, 5f)]
		public float headZoneRadius;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform visualises the circle around the user where the play area is not moved. In the demo scene this is a cylinder at floor level. Remember to turn of collisions.")]
		public Transform debugTransform;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Vector3 relativeMovementOfCameraRig;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform movementTransform;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 headCirclePosition;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Vector3 lastPosition;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 lastMovement;

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xB2BF3C", Offset = "0xB2BF3C", VA = "0xB2BF3C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xB2BF94", Offset = "0xB2BF94", VA = "0xB2BF94", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xB2C21C", Offset = "0xB2C21C", VA = "0xB2C21C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xB2C274", Offset = "0xB2C274", VA = "0xB2C274", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xB2C2A0", Offset = "0xB2C2A0", VA = "0xB2C2A0", Slot = "8")]
		protected virtual void Move(Vector3 movement)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xB2C3E8", Offset = "0xB2C3E8", VA = "0xB2C3E8", Slot = "9")]
		protected virtual void MoveHeadCircle()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xB2C504", Offset = "0xB2C504", VA = "0xB2C504", Slot = "10")]
		protected virtual void MoveHeadCircleNonLinearDrift()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xB2C684", Offset = "0xB2C684", VA = "0xB2C684", Slot = "11")]
		protected virtual void UpdateLastMovement()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xB2C6DC", Offset = "0xB2C6DC", VA = "0xB2C6DC")]
		public VRTK_RoomExtender()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public delegate void SlingshotJumpEventHandler(object sender);
	[Token(Token = "0x20002AD")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_SlingshotJump")]
	public class VRTK_SlingshotJump : MonoBehaviour
	{
		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How close together the button releases have to be to initiate a jump.")]
		[Header("SlingshotJump Settings")]
		public float releaseWindowTime;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier that increases the jump strength.")]
		public float velocityMultiplier;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The maximum velocity a jump can be.")]
		public float velocityMax;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The button that will initiate the slingshot move.")]
		[SerializeField]
		protected VRTK_ControllerEvents.ButtonAlias activationButton;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The button that will cancel an already tensioned sling shot.")]
		[SerializeField]
		protected VRTK_ControllerEvents.ButtonAlias cancelButton;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("The Body Physics script to deal with the physics and gravity of the play area. If the script is being applied onto an object that already has a VRTK_BodyPhysics component, this parameter can be left blank as it will be auto populated by the script at runtime.")]
		protected VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("The Player Climb script to deal ability to throw the play area. If the script is being applied onto an object that already has a VRTK_PlayerClimb component, this parameter can be left blank as it will be auto populated by the script at runtime.")]
		protected VRTK_PlayerClimb playerClimb;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("The Teleporter script to deal play area teleporting. If the script is being applied onto an object that already has a VRTK_BasicTeleport component, this parameter can be left blank as it will be auto populated by the script at runtime.")]
		protected VRTK_BasicTeleport teleporter;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 leftStartAimPosition;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected Vector3 leftReleasePosition;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftIsAiming;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 rightStartAimPosition;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector3 rightReleasePosition;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool rightIsAiming;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_ControllerEvents leftControllerEvents;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_ControllerEvents rightControllerEvents;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_InteractGrab leftControllerGrab;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_InteractGrab rightControllerGrab;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool leftButtonReleased;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		protected bool rightButtonReleased;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float countDownEndTime;

		[Token(Token = "0x140000B8")]
		public event SlingshotJumpEventHandler SlingshotJumped
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0xB2C87C", Offset = "0xB2C87C", VA = "0xB2C87C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001231")]
			[Address(RVA = "0xB2C918", Offset = "0xB2C918", VA = "0xB2C918")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xB2C9B4", Offset = "0xB2C9B4", VA = "0xB2C9B4", Slot = "4")]
		public virtual VRTK_ControllerEvents.ButtonAlias GetActivationButton()
		{
			return default(VRTK_ControllerEvents.ButtonAlias);
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xB2C9BC", Offset = "0xB2C9BC", VA = "0xB2C9BC", Slot = "5")]
		public virtual void SetActivationButton(VRTK_ControllerEvents.ButtonAlias button)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xB2CB78", Offset = "0xB2CB78", VA = "0xB2CB78", Slot = "6")]
		public virtual VRTK_ControllerEvents.ButtonAlias GetCancelButton()
		{
			return default(VRTK_ControllerEvents.ButtonAlias);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xB2CB80", Offset = "0xB2CB80", VA = "0xB2CB80", Slot = "7")]
		public virtual void SetCancelButton(VRTK_ControllerEvents.ButtonAlias button)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xB2CBB0", Offset = "0xB2CBB0", VA = "0xB2CBB0", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xB2CD04", Offset = "0xB2CD04", VA = "0xB2CD04", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xB2CDAC", Offset = "0xB2CDAC", VA = "0xB2CDAC", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xB2CDE8", Offset = "0xB2CDE8", VA = "0xB2CDE8", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xB2CE40", Offset = "0xB2CE40", VA = "0xB2CE40", Slot = "12")]
		protected virtual void LeftButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xB2CF44", Offset = "0xB2CF44", VA = "0xB2CF44", Slot = "13")]
		protected virtual void RightButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xB2CFBC", Offset = "0xB2CFBC", VA = "0xB2CFBC", Slot = "14")]
		protected virtual void LeftButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xB2D06C", Offset = "0xB2D06C", VA = "0xB2D06C", Slot = "15")]
		protected virtual void RightButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xB2D11C", Offset = "0xB2D11C", VA = "0xB2D11C", Slot = "16")]
		protected virtual void CancelButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xB2D12C", Offset = "0xB2D12C", VA = "0xB2D12C", Slot = "17")]
		protected virtual void CheckForReset()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xB2D16C", Offset = "0xB2D16C", VA = "0xB2D16C", Slot = "18")]
		protected virtual void CheckForJump()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xB2D3A8", Offset = "0xB2D3A8", VA = "0xB2D3A8")]
		protected void OnSlingshotJumped()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xB2CD80", Offset = "0xB2CD80", VA = "0xB2CD80")]
		protected void InitListeners(bool state)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xB2D3C8", Offset = "0xB2D3C8", VA = "0xB2D3C8")]
		protected void InitTeleportListener(bool state)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xB2C9EC", Offset = "0xB2C9EC", VA = "0xB2C9EC")]
		protected void InitControllerListeners(bool state)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xB2D528", Offset = "0xB2D528", VA = "0xB2D528")]
		protected void InitControllerListener(bool state, GameObject controller, ref VRTK_ControllerEvents events, ref VRTK_InteractGrab grab, ControllerInteractionEventHandler triggerPressed, ControllerInteractionEventHandler triggerReleased)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xB2D790", Offset = "0xB2D790", VA = "0xB2D790")]
		protected void OnTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xB2CDD8", Offset = "0xB2CDD8", VA = "0xB2CDD8")]
		protected void UnAim()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xB2CEB8", Offset = "0xB2CEB8", VA = "0xB2CEB8")]
		protected bool IsClimbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xB2D7A0", Offset = "0xB2D7A0", VA = "0xB2D7A0")]
		public VRTK_SlingshotJump()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_StepMultiplier")]
	public class VRTK_StepMultiplier : MonoBehaviour
	{
		[Token(Token = "0x20002AF")]
		public enum MovementFunction
		{
			[Token(Token = "0x40010D5")]
			Nonlinear,
			[Token(Token = "0x40010D6")]
			LinearDirect
		}

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller button to activate the step multiplier effect. If it is `Undefined` then the step multiplier will always be active.")]
		[Header("Step Multiplier Settings")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("This determines the type of movement used by the extender.")]
		public MovementFunction movementFunction;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 10f)]
		[Tooltip("This is the factor by which movement at the edge of the circle is amplified. `0` is no movement of the play area. Higher values simulate a bigger play area but may be too uncomfortable.")]
		public float additionalMovementMultiplier;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 5f)]
		[Tooltip("This is the size of the circle in which the play area is not moved and everything is normal. If it is to low it becomes uncomfortable when crouching.")]
		public float headZoneRadius;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Custom Settings")]
		[Tooltip("The Controller Events to listen for the events on. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 relativeMovementOfCameraRig;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform movementTransform;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 headCirclePosition;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Vector3 lastPosition;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 lastMovement;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected bool activationEnabled;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected bool buttonSubscribed;

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xB2D7C0", Offset = "0xB2D7C0", VA = "0xB2D7C0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xB2D818", Offset = "0xB2D818", VA = "0xB2D818", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xB2D910", Offset = "0xB2D910", VA = "0xB2D910", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xB2D968", Offset = "0xB2D968", VA = "0xB2D968", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xB2D9B8", Offset = "0xB2D9B8", VA = "0xB2D9B8", Slot = "8")]
		protected virtual void ManageButtonSubscription()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xB2DC50", Offset = "0xB2DC50", VA = "0xB2DC50", Slot = "9")]
		protected virtual void ActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xB2DC5C", Offset = "0xB2DC5C", VA = "0xB2DC5C", Slot = "10")]
		protected virtual void ActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xB2DC64", Offset = "0xB2DC64", VA = "0xB2DC64", Slot = "11")]
		protected virtual void Move(Vector3 movement)
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xB2DD88", Offset = "0xB2DD88", VA = "0xB2DD88", Slot = "12")]
		protected virtual void MoveHeadCircle()
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xB2DEF8", Offset = "0xB2DEF8", VA = "0xB2DEF8", Slot = "13")]
		protected virtual void MoveHeadCircleNonLinearDrift()
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xB2E0C8", Offset = "0xB2E0C8", VA = "0xB2E0C8", Slot = "14")]
		protected virtual void UpdateLastMovement()
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xB2E178", Offset = "0xB2E178", VA = "0xB2E178")]
		public VRTK_StepMultiplier()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_TeleportDisableOnControllerObscured")]
	public class VRTK_TeleportDisableOnControllerObscured : MonoBehaviour
	{
		[Token(Token = "0x20002B1")]
		[CompilerGenerated]
		private sealed class <EnableAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TeleportDisableOnControllerObscured <>4__this;

			[Token(Token = "0x17000177")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600125F")]
				[Address(RVA = "0xB2E7F0", Offset = "0xB2E7F0", VA = "0xB2E7F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001261")]
				[Address(RVA = "0xB2E838", Offset = "0xB2E838", VA = "0xB2E838", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600125C")]
			[Address(RVA = "0xB2E434", Offset = "0xB2E434", VA = "0xB2E434")]
			[DebuggerHidden]
			public <EnableAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600125D")]
			[Address(RVA = "0xB2E4AC", Offset = "0xB2E4AC", VA = "0xB2E4AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600125E")]
			[Address(RVA = "0xB2E4B0", Offset = "0xB2E4B0", VA = "0xB2E4B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001260")]
			[Address(RVA = "0xB2E7F8", Offset = "0xB2E7F8", VA = "0xB2E7F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Custom Settings")]
		[Tooltip("The Teleporter script to deal play area teleporting. If the script is being applied onto an object that already has a VRTK_BasicTeleport component, this parameter can be left blank as it will be auto populated by the script at runtime.")]
		public VRTK_BasicTeleport teleporter;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The VRTK Headset Controller Aware script to use when dealing with the headset to controller awareness. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetControllerAware headsetControllerAware;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Coroutine enableAtEndOfFrameRoutine;

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xB2E194", Offset = "0xB2E194", VA = "0xB2E194", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xB2E278", Offset = "0xB2E278", VA = "0xB2E278", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xB2E3C0", Offset = "0xB2E3C0", VA = "0xB2E3C0", Slot = "6")]
		[IteratorStateMachine(typeof(<EnableAtEndOfFrame>d__5))]
		protected virtual IEnumerator EnableAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xB2E45C", Offset = "0xB2E45C", VA = "0xB2E45C", Slot = "7")]
		protected virtual void DisableTeleport(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xB2E480", Offset = "0xB2E480", VA = "0xB2E480", Slot = "8")]
		protected virtual void EnableTeleport(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xB2E4A4", Offset = "0xB2E4A4", VA = "0xB2E4A4")]
		public VRTK_TeleportDisableOnControllerObscured()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_TeleportDisableOnHeadsetCollision")]
	public class VRTK_TeleportDisableOnHeadsetCollision : MonoBehaviour
	{
		[Token(Token = "0x20002B3")]
		[CompilerGenerated]
		private sealed class <EnableAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TeleportDisableOnHeadsetCollision <>4__this;

			[Token(Token = "0x17000179")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600126B")]
				[Address(RVA = "0xB2EE9C", Offset = "0xB2EE9C", VA = "0xB2EE9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600126D")]
				[Address(RVA = "0xB2EEE4", Offset = "0xB2EEE4", VA = "0xB2EEE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001268")]
			[Address(RVA = "0xB2EAE0", Offset = "0xB2EAE0", VA = "0xB2EAE0")]
			[DebuggerHidden]
			public <EnableAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001269")]
			[Address(RVA = "0xB2EB58", Offset = "0xB2EB58", VA = "0xB2EB58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600126A")]
			[Address(RVA = "0xB2EB5C", Offset = "0xB2EB5C", VA = "0xB2EB5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600126C")]
			[Address(RVA = "0xB2EEA4", Offset = "0xB2EEA4", VA = "0xB2EEA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Teleporter script to deal play area teleporting. If the script is being applied onto an object that already has a VRTK_BasicTeleport component, this parameter can be left blank as it will be auto populated by the script at runtime.")]
		[Header("Custom Settings")]
		public VRTK_BasicTeleport teleporter;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The VRTK Headset Collision script to use when determining headset collisions. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetCollision headsetCollision;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Coroutine enableAtEndOfFrameRoutine;

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xB2E840", Offset = "0xB2E840", VA = "0xB2E840", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xB2E924", Offset = "0xB2E924", VA = "0xB2E924", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xB2EA6C", Offset = "0xB2EA6C", VA = "0xB2EA6C", Slot = "6")]
		[IteratorStateMachine(typeof(<EnableAtEndOfFrame>d__5))]
		protected virtual IEnumerator EnableAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xB2EB08", Offset = "0xB2EB08", VA = "0xB2EB08", Slot = "7")]
		protected virtual void DisableTeleport(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xB2EB2C", Offset = "0xB2EB2C", VA = "0xB2EB2C", Slot = "8")]
		protected virtual void EnableTeleport(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xB2EB50", Offset = "0xB2EB50", VA = "0xB2EB50")]
		public VRTK_TeleportDisableOnHeadsetCollision()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_TouchpadControl")]
	public class VRTK_TouchpadControl : VRTK_ObjectControl
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The axis to use for the direction coordinates.")]
		[Header("Touchpad Control Settings")]
		public VRTK_ControllerEvents.Vector2AxisAlias coordinateAxis;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("An optional button that has to be engaged to allow the touchpad control to activate.")]
		public VRTK_ControllerEvents.ButtonAlias primaryActivationButton;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("An optional button that when engaged will activate the modifier on the touchpad control action.")]
		public VRTK_ControllerEvents.ButtonAlias actionModifierButton;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("A deadzone threshold on the touchpad that will ignore input if the touch position is within the specified deadzone. Between `0f` and `1f`.")]
		public Vector2 axisDeadzone;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool touchpadFirstChange;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		protected bool otherTouchpadControlEnabledState;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		protected bool otherTouchpadControlEnabledStateSet;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_ControllerEvents.ButtonAlias coordniateButtonAlias;

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xB2EEEC", Offset = "0xB2EEEC", VA = "0xB2EEEC", Slot = "11")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xB2EF2C", Offset = "0xB2EF2C", VA = "0xB2EF2C", Slot = "6")]
		protected override void ControlFixedUpdate()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xB2F070", Offset = "0xB2F070", VA = "0xB2F070", Slot = "7")]
		protected override VRTK_ObjectControl GetOtherControl()
		{
			return null;
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xB2F180", Offset = "0xB2F180", VA = "0xB2F180", Slot = "9")]
		protected override void SetListeners(bool state)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xB2F440", Offset = "0xB2F440", VA = "0xB2F440", Slot = "8")]
		protected override bool IsInAction()
		{
			return default(bool);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xB2F480", Offset = "0xB2F480", VA = "0xB2F480", Slot = "22")]
		protected virtual bool OutsideDeadzone(float axisValue, float deadzoneThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xB2F49C", Offset = "0xB2F49C", VA = "0xB2F49C", Slot = "23")]
		protected virtual bool ValidPrimaryButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xB2F53C", Offset = "0xB2F53C", VA = "0xB2F53C", Slot = "24")]
		protected virtual void ModifierButtonActive()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xB2F5D8", Offset = "0xB2F5D8", VA = "0xB2F5D8", Slot = "25")]
		protected virtual bool TouchpadTouched()
		{
			return default(bool);
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xB2F66C", Offset = "0xB2F66C", VA = "0xB2F66C", Slot = "26")]
		protected virtual void TouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xB2F844", Offset = "0xB2F844", VA = "0xB2F844", Slot = "27")]
		protected virtual void TouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xB2F914", Offset = "0xB2F914", VA = "0xB2F914")]
		public VRTK_TouchpadControl()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	[AddComponentMenu("VRTK/Scripts/Locomotion/VRTK_TunnelOverlay")]
	public class VRTK_TunnelOverlay : MonoBehaviour
	{
		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Minimum rotation speed for the effect to activate (degrees per second).")]
		[Header("Movement Settings")]
		public float minimumRotation;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum rotation speed for the effect have its max settings applied (degrees per second).")]
		public float maximumRotation;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Minimum movement speed for the effect to activate.")]
		public float minimumSpeed;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Maximum movement speed where the effect will have its max settings applied.")]
		public float maximumSpeed;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The color to use for the tunnel effect.")]
		[Header("Effect Settings")]
		public Color effectColor;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("An optional skybox texture to use for the tunnel effect.")]
		public Texture effectSkybox;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The initial amount of screen coverage the tunnel to consume without any movement.")]
		[Range(0f, 1f)]
		public float initialEffectSize;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Screen coverage at the maximum tracked values.")]
		[Range(0f, 1f)]
		public float maximumEffectSize;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 0.5f)]
		[Tooltip("Feather effect size around the cut-off as fraction of screen.")]
		public float featherSize;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Smooth out radius over time.")]
		public float smoothingTime;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform headset;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Camera headsetCamera;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform playarea;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected VRTK_TunnelEffect cameraEffect;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected float angularVelocity;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected float angularVelocitySlew;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastForward;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 lastPosition;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Material matCameraEffect;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int shaderPropertyColor;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected int shaderPropertyAV;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int shaderPropertyFeather;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int shaderPropertySkyboxTexture;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Color originalColor;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float originalAngularVelocity;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float originalFeatherSize;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Texture originalSkyboxTexture;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float maximumEffectCoverage;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected bool createEffectSkybox;

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xB2F948", Offset = "0xB2F948", VA = "0xB2F948", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xB2FA90", Offset = "0xB2FA90", VA = "0xB2FA90", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xB2FD6C", Offset = "0xB2FD6C", VA = "0xB2FD6C", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xB2FEC0", Offset = "0xB2FEC0", VA = "0xB2FEC0", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xB2FF18", Offset = "0xB2FF18", VA = "0xB2FF18", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xB305D8", Offset = "0xB305D8", VA = "0xB305D8", Slot = "9")]
		protected virtual void SetShaderFeather(Color givenTunnelColor, float givenAngularVelocity, float givenFeatherSize)
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xB3063C", Offset = "0xB3063C", VA = "0xB3063C", Slot = "10")]
		protected virtual void CheckSkyboxTexture()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xB30894", Offset = "0xB30894", VA = "0xB30894")]
		public VRTK_TunnelOverlay()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public abstract class VRTK_BasePointerRenderer : MonoBehaviour
	{
		[Token(Token = "0x20002B7")]
		public enum VisibilityStates
		{
			[Token(Token = "0x4001128")]
			OnWhenActive,
			[Token(Token = "0x4001129")]
			AlwaysOn,
			[Token(Token = "0x400112A")]
			AlwaysOff
		}

		[Serializable]
		[Token(Token = "0x20002B8")]
		public sealed class PointerOriginSmoothingSettings
		{
			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Whether or not to smooth the position of the pointer origin when positioning the pointer tip.")]
			public bool smoothsPosition;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The maximum allowed distance between the unsmoothed pointer origin and the smoothed pointer origin per frame to use for smoothing.")]
			public float maxAllowedPerFrameDistanceDifference;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Whether or not to smooth the rotation of the pointer origin when positioning the pointer tip.")]
			public bool smoothsRotation;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The maximum allowed angle between the unsmoothed pointer origin and the smoothed pointer origin per frame to use for smoothing.")]
			public float maxAllowedPerFrameAngleDifference;

			[Token(Token = "0x60012B6")]
			[Address(RVA = "0xB33838", Offset = "0xB33838", VA = "0xB33838")]
			public PointerOriginSmoothingSettings()
			{
			}
		}

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("An optional Play Area Cursor generator to add to the destination position of the pointer tip.")]
		[Header("Renderer Supplement Settings")]
		public VRTK_PlayAreaCursor playareaCursor;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A custom VRTK_PointerDirectionIndicator to use to determine the rotation given to the destination set event.")]
		public VRTK_PointerDirectionIndicator directionIndicator;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("General Renderer Settings")]
		[Tooltip("A custom raycaster to use for the pointer's raycasts to ignore.")]
		public VRTK_CustomRaycast customRaycast;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Specifies the smoothing to be applied to the pointer origin when positioning the pointer tip.")]
		public PointerOriginSmoothingSettings pointerOriginSmoothingSettings;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The colour to change the pointer materials when the pointer collides with a valid object. Set to `Color.clear` to bypass changing material colour on valid collision.")]
		[Header("General Appearance Settings")]
		public Color validCollisionColor;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The colour to change the pointer materials when the pointer is not colliding with anything or with an invalid object. Set to `Color.clear` to bypass changing material colour on invalid collision.")]
		public Color invalidCollisionColor;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines when the main tracer of the pointer renderer will be visible.")]
		public VisibilityStates tracerVisibility;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Determines when the cursor/tip of the pointer renderer will be visible.")]
		public VisibilityStates cursorVisibility;

		[Token(Token = "0x4001110")]
		protected const float BEAM_ADJUST_OFFSET = 0.0001f;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected VRTK_Pointer controllingPointer;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected RaycastHit destinationHit;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Material defaultMaterial;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Color previousColor;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Color currentColor;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected VRTK_PolicyList invalidListPolicy;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected VRTK_NavMeshData navMeshData;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool headsetPositionCompensation;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected GameObject objectInteractor;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject objectInteractorAttachPoint;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected GameObject pointerOriginTransformFollowGameObject;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected VRTK_TransformFollow pointerOriginTransformFollow;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected VRTK_InteractGrab controllerGrabScript;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Rigidbody savedAttachPoint;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected bool attachedToInteractorAttachPoint;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected float savedBeamLength;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected HashSet<GameObject> makeRendererVisible;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected bool tracerVisible;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		protected bool cursorVisible;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected LayerMask defaultIgnoreLayer;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected SDK_BaseController.ControllerHand cachedAttachedHand;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform cachedPointerAttachPoint;

		[Token(Token = "0x6001282")]
		public abstract GameObject[] GetPointerObjects();

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xB308DC", Offset = "0xB308DC", VA = "0xB308DC", Slot = "5")]
		[Obsolete("`VRTK_BasePointerRenderer.InitalizePointer(givenPointer, givenInvalidListPolicy, givenNavMeshCheckDistance, givenHeadsetPositionCompensation)` has been replaced with the method `VRTK_BasePointerRenderer.InitalizePointer(givenPointer, givenInvalidListPolicy, givenNavMeshData, givenHeadsetPositionCompensation)`. This method will be removed in a future version of VRTK.")]
		public virtual void InitalizePointer(VRTK_Pointer givenPointer, VRTK_PolicyList givenInvalidListPolicy, float givenNavMeshCheckDistance, bool givenHeadsetPositionCompensation)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xB3097C", Offset = "0xB3097C", VA = "0xB3097C", Slot = "6")]
		public virtual void InitalizePointer(VRTK_Pointer givenPointer, VRTK_PolicyList givenInvalidListPolicy, VRTK_NavMeshData givenNavMeshData, bool givenHeadsetPositionCompensation)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xB30B04", Offset = "0xB30B04", VA = "0xB30B04", Slot = "7")]
		public virtual void ResetPointerObjects()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xB30B5C", Offset = "0xB30B5C", VA = "0xB30B5C")]
		public void SetPointerVisibility(bool active)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xB30B88", Offset = "0xB30B88", VA = "0xB30B88", Slot = "8")]
		public virtual void Toggle(bool pointerState, bool actualState)
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xB30CB0", Offset = "0xB30CB0", VA = "0xB30CB0", Slot = "9")]
		public virtual void ToggleInteraction(bool state)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xB30CC4", Offset = "0xB30CC4", VA = "0xB30CC4", Slot = "10")]
		public virtual void UpdateRenderer()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xB30DBC", Offset = "0xB30DBC", VA = "0xB30DBC", Slot = "11")]
		public virtual RaycastHit GetDestinationHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xB30DD4", Offset = "0xB30DD4", VA = "0xB30DD4", Slot = "12")]
		public virtual bool ValidPlayArea()
		{
			return default(bool);
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xB30E7C", Offset = "0xB30E7C", VA = "0xB30E7C", Slot = "13")]
		public virtual bool IsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xB30EBC", Offset = "0xB30EBC", VA = "0xB30EBC", Slot = "14")]
		public virtual bool IsTracerVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xB30EE0", Offset = "0xB30EE0", VA = "0xB30EE0", Slot = "15")]
		public virtual bool IsCursorVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xB30F04", Offset = "0xB30F04", VA = "0xB30F04", Slot = "16")]
		public virtual bool IsValidCollision()
		{
			return default(bool);
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xB30F40", Offset = "0xB30F40", VA = "0xB30F40", Slot = "17")]
		public virtual GameObject GetObjectInteractor()
		{
			return null;
		}

		[Token(Token = "0x6001291")]
		protected abstract void CreatePointerObjects();

		[Token(Token = "0x6001292")]
		protected abstract void DestroyPointerObjects();

		[Token(Token = "0x6001293")]
		protected abstract void ToggleRenderer(bool pointerState, bool actualState);

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xB30F48", Offset = "0xB30F48", VA = "0xB30F48", Slot = "21")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xB30FA0", Offset = "0xB30FA0", VA = "0xB30FA0", Slot = "22")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xB310E4", Offset = "0xB310E4", VA = "0xB310E4", Slot = "23")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xB311A0", Offset = "0xB311A0", VA = "0xB311A0", Slot = "24")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xB311F8", Offset = "0xB311F8", VA = "0xB311F8", Slot = "25")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xB31230", Offset = "0xB31230", VA = "0xB31230", Slot = "26")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xB31340", Offset = "0xB31340", VA = "0xB31340", Slot = "27")]
		protected virtual void ToggleObjectInteraction(bool state)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xB31570", Offset = "0xB31570", VA = "0xB31570", Slot = "28")]
		protected virtual void UpdateObjectInteractor()
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xB315B8", Offset = "0xB315B8", VA = "0xB315B8", Slot = "29")]
		protected virtual VRTK_ControllerReference GetControllerReference([Optional] GameObject reference)
		{
			return null;
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xB316CC", Offset = "0xB316CC", VA = "0xB316CC", Slot = "30")]
		protected virtual Transform GetPointerOriginTransform()
		{
			return null;
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xB318BC", Offset = "0xB318BC", VA = "0xB318BC", Slot = "31")]
		protected virtual void UpdatePointerOriginTransformFollow()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xB31A7C", Offset = "0xB31A7C", VA = "0xB31A7C")]
		protected Transform GetOrigin(bool smoothed = true)
		{
			return null;
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xB31B40", Offset = "0xB31B40", VA = "0xB31B40", Slot = "32")]
		protected virtual void PointerEnter(RaycastHit givenHit)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xB31B94", Offset = "0xB31B94", VA = "0xB31B94", Slot = "33")]
		protected virtual void PointerExit(RaycastHit givenHit)
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xB31BE8", Offset = "0xB31BE8", VA = "0xB31BE8", Slot = "34")]
		protected virtual bool ValidDestination()
		{
			return default(bool);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xB31D48", Offset = "0xB31D48", VA = "0xB31D48", Slot = "35")]
		protected virtual void ToggleElement(GameObject givenObject, bool pointerState, bool actualState, VisibilityStates givenVisibility, ref bool currentVisible)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xB31EA0", Offset = "0xB31EA0", VA = "0xB31EA0", Slot = "36")]
		protected virtual void AddVisibleRenderer(GameObject givenObject)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xB31EF8", Offset = "0xB31EF8", VA = "0xB31EF8", Slot = "37")]
		protected virtual void MakeRenderersVisible()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xB320B0", Offset = "0xB320B0", VA = "0xB320B0", Slot = "38")]
		protected virtual void ToggleRendererVisibility(GameObject givenObject, bool state)
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xB32198", Offset = "0xB32198", VA = "0xB32198", Slot = "39")]
		protected virtual void SetupMaterialRenderer(GameObject givenObject)
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xB32270", Offset = "0xB32270", VA = "0xB32270", Slot = "40")]
		protected virtual void ChangeColor(Color givenColor)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xB32450", Offset = "0xB32450", VA = "0xB32450", Slot = "41")]
		protected virtual void EmitStateEvent()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xB32504", Offset = "0xB32504", VA = "0xB32504", Slot = "42")]
		protected virtual void ChangeMaterial(Color givenColor)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xB32648", Offset = "0xB32648", VA = "0xB32648", Slot = "43")]
		protected virtual void ChangeMaterialColor(GameObject givenObject, Color givenColor)
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xB32888", Offset = "0xB32888", VA = "0xB32888", Slot = "44")]
		protected virtual void CreateObjectInteractor()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xB32F48", Offset = "0xB32F48", VA = "0xB32F48", Slot = "45")]
		protected virtual void ScaleObjectInteractor(Vector3 scaleAmount)
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xB33004", Offset = "0xB33004", VA = "0xB33004", Slot = "46")]
		protected virtual void CreatePointerOriginTransformFollow()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xB331E0", Offset = "0xB331E0", VA = "0xB331E0", Slot = "47")]
		protected virtual void DestroyPointerOriginTransformFollow()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xB332A0", Offset = "0xB332A0", VA = "0xB332A0", Slot = "48")]
		protected virtual float OverrideBeamLength(float currentLength)
		{
			return default(float);
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xB33420", Offset = "0xB33420", VA = "0xB33420", Slot = "49")]
		protected virtual void UpdateDependencies(Vector3 location)
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xB334D8", Offset = "0xB334D8", VA = "0xB334D8", Slot = "50")]
		protected virtual void SetupDirectionIndicator()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xB335C4", Offset = "0xB335C4", VA = "0xB335C4", Slot = "51")]
		protected virtual void UpdateDirectionIndicator()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xB336C0", Offset = "0xB336C0", VA = "0xB336C0", Slot = "52")]
		protected virtual bool ShowDirectionIndicator()
		{
			return default(bool);
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xB3372C", Offset = "0xB3372C", VA = "0xB3372C")]
		protected VRTK_BasePointerRenderer()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	[AddComponentMenu("VRTK/Scripts/Pointers/Pointer Renderers/VRTK_BezierPointerRenderer")]
	public class VRTK_BezierPointerRenderer : VRTK_BasePointerRenderer
	{
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("The maximum length of the projected beam. The x value is the length of the forward beam, the y value is the length of the downward beam.")]
		[Header("Bezier Pointer Appearance Settings")]
		public Vector2 maximumLength;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("The number of items to render in the bezier curve tracer beam. A high number here will most likely have a negative impact of game performance due to large number of rendered objects.")]
		public int tracerDensity;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Tooltip("The size of the ground cursor. This number also affects the size of the objects in the bezier curve tracer beam. The larger the radius, the larger the objects will be.")]
		public float cursorRadius;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Header("Bezier Pointer Render Settings")]
		[Tooltip("The maximum angle in degrees of the origin before the beam curve height is restricted. A lower angle setting will prevent the beam being projected high into the sky and curving back down.")]
		[Range(1f, 100f)]
		public float heightLimitAngle;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[Tooltip("The amount of height offset to apply to the projected beam to generate a smoother curve even when the beam is pointing straight.")]
		public float curveOffset;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Rescale each tracer element according to the length of the Bezier curve.")]
		public bool rescaleTracer;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		[Tooltip("The cursor will be rotated to match the angle of the target surface if this is true, if it is false then the pointer cursor will always be horizontal.")]
		public bool cursorMatchTargetRotation;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[Tooltip("The number of points along the bezier curve to check for an early beam collision. Useful if the bezier curve is appearing to clip through teleport locations. 0 won't make any checks and it will be capped at `Pointer Density`. The higher the number, the more CPU intensive the checks become.")]
		public int collisionCheckFrequency;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Tooltip("A custom game object to use as the appearance for the pointer tracer. If this is empty then a collection of Sphere primitives will be created and used.")]
		[Header("Bezier Pointer Custom Appearance Settings")]
		public GameObject customTracer;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("A custom game object to use as the appearance for the pointer cursor. If this is empty then a Cylinder primitive will be created and used.")]
		public GameObject customCursor;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("A custom game object can be applied here to appear only if the location is valid.")]
		public GameObject validLocationObject;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("A custom game object can be applied here to appear only if the location is invalid.")]
		public GameObject invalidLocationObject;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected VRTK_CurveGenerator actualTracer;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected GameObject actualContainer;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected GameObject actualCursor;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected GameObject actualValidLocationObject;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected GameObject actualInvalidLocationObject;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 fixedForwardBeamForward;

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xB33854", Offset = "0xB33854", VA = "0xB33854", Slot = "10")]
		public override void UpdateRenderer()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xB3397C", Offset = "0xB3397C", VA = "0xB3397C", Slot = "4")]
		public override GameObject[] GetPointerObjects()
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xB33A54", Offset = "0xB33A54", VA = "0xB33A54", Slot = "20")]
		protected override void ToggleRenderer(bool pointerState, bool actualState)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xB33B80", Offset = "0xB33B80", VA = "0xB33B80", Slot = "18")]
		protected override void CreatePointerObjects()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xB33DD4", Offset = "0xB33DD4", VA = "0xB33DD4", Slot = "19")]
		protected override void DestroyPointerObjects()
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xB33EF4", Offset = "0xB33EF4", VA = "0xB33EF4", Slot = "28")]
		protected override void UpdateObjectInteractor()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xB340B4", Offset = "0xB340B4", VA = "0xB340B4", Slot = "42")]
		protected override void ChangeMaterial(Color givenColor)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xB3410C", Offset = "0xB3410C", VA = "0xB3410C", Slot = "53")]
		protected virtual void CreateTracer()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xB341C0", Offset = "0xB341C0", VA = "0xB341C0", Slot = "54")]
		protected virtual GameObject CreateCursorObject()
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xB342E4", Offset = "0xB342E4", VA = "0xB342E4", Slot = "55")]
		protected virtual void CreateCursorLocations()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xB34714", Offset = "0xB34714", VA = "0xB34714", Slot = "56")]
		protected virtual void CreateCursor()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xB3495C", Offset = "0xB3495C", VA = "0xB3495C", Slot = "57")]
		protected virtual Vector3 ProjectForwardBeam()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xB34CF0", Offset = "0xB34CF0", VA = "0xB34CF0", Slot = "58")]
		protected virtual Vector3 ProjectDownBeam(Vector3 jointPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xB34FF0", Offset = "0xB34FF0", VA = "0xB34FF0", Slot = "59")]
		protected virtual void AdjustForEarlyCollisions(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xB3553C", Offset = "0xB3553C", VA = "0xB3553C", Slot = "60")]
		protected virtual void DisplayCurvedBeam(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xB3577C", Offset = "0xB3577C", VA = "0xB3577C", Slot = "61")]
		protected virtual void TogglePointerCursor(bool pointerState, bool actualState)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xB357A8", Offset = "0xB357A8", VA = "0xB357A8", Slot = "62")]
		protected virtual void TogglePointerTracer(bool pointerState, bool actualState)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xB35854", Offset = "0xB35854", VA = "0xB35854", Slot = "63")]
		protected virtual void SetPointerCursor()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xB35BB8", Offset = "0xB35BB8", VA = "0xB35BB8")]
		public VRTK_BezierPointerRenderer()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	[AddComponentMenu("VRTK/Scripts/Pointers/Pointer Renderers/VRTK_StraightPointerRenderer")]
	public class VRTK_StraightPointerRenderer : VRTK_BasePointerRenderer
	{
		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Header("Straight Pointer Appearance Settings")]
		[Tooltip("The maximum length the pointer tracer can reach.")]
		public float maximumLength;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[Tooltip("The scale factor to scale the pointer tracer object by.")]
		public float scaleFactor;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("The scale multiplier to scale the pointer cursor object by in relation to the `Scale Factor`.")]
		public float cursorScaleMultiplier;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Tooltip("The cursor will be rotated to match the angle of the target surface if this is true, if it is false then the pointer cursor will always be horizontal.")]
		public bool cursorMatchTargetRotation;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		[Tooltip("Rescale the cursor proportionally to the distance from the tracer origin.")]
		public bool cursorDistanceRescale;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("The maximum scale the cursor is allowed to reach. This is only used when rescaling the cursor proportionally to the distance from the tracer origin.")]
		public Vector3 maximumCursorScale;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Header("Straight Pointer Custom Appearance Settings")]
		[Tooltip("A custom game object to use as the appearance for the pointer tracer. If this is empty then a Box primitive will be created and used.")]
		public GameObject customTracer;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("A custom game object to use as the appearance for the pointer cursor. If this is empty then a Sphere primitive will be created and used.")]
		public GameObject customCursor;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected GameObject actualContainer;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected GameObject actualTracer;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected GameObject actualCursor;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected Vector3 cursorOriginalScale;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		public LineRenderer customLineRender;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector2 customLineRenderOriginalScale;

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xB35BE8", Offset = "0xB35BE8", VA = "0xB35BE8", Slot = "10")]
		public override void UpdateRenderer()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xB35E10", Offset = "0xB35E10", VA = "0xB35E10", Slot = "4")]
		public override GameObject[] GetPointerObjects()
		{
			return null;
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xB35F20", Offset = "0xB35F20", VA = "0xB35F20", Slot = "20")]
		protected override void ToggleRenderer(bool pointerState, bool actualState)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xB35F8C", Offset = "0xB35F8C", VA = "0xB35F8C", Slot = "18")]
		protected override void CreatePointerObjects()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xB36318", Offset = "0xB36318", VA = "0xB36318", Slot = "19")]
		protected override void DestroyPointerObjects()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xB363A8", Offset = "0xB363A8", VA = "0xB363A8", Slot = "42")]
		protected override void ChangeMaterial(Color givenColor)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xB3642C", Offset = "0xB3642C", VA = "0xB3642C", Slot = "28")]
		protected override void UpdateObjectInteractor()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xB365F0", Offset = "0xB365F0", VA = "0xB365F0", Slot = "53")]
		protected virtual void CreateTracer()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xB368E8", Offset = "0xB368E8", VA = "0xB368E8", Slot = "54")]
		protected virtual void CreateCursor()
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xB36CD8", Offset = "0xB36CD8", VA = "0xB36CD8", Slot = "55")]
		protected virtual void CheckRayMiss(bool rayHit, RaycastHit pointerCollidedWith)
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xB36E54", Offset = "0xB36E54", VA = "0xB36E54", Slot = "56")]
		protected virtual void CheckRayHit(bool rayHit, RaycastHit pointerCollidedWith)
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xB36EE8", Offset = "0xB36EE8", VA = "0xB36EE8", Slot = "57")]
		protected virtual float CastRayForward()
		{
			return default(float);
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xB3708C", Offset = "0xB3708C", VA = "0xB3708C", Slot = "58")]
		protected virtual void SetPointerAppearance(float tracerLength)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xB37528", Offset = "0xB37528", VA = "0xB37528")]
		public VRTK_StraightPointerRenderer()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public struct DestinationMarkerEventArgs
	{
		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float distance;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform target;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 destinationPosition;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Quaternion? destinationRotation;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool forceDestinationPosition;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool enableTeleport;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerReference controllerReference;
	}
	[Token(Token = "0x20002BC")]
	public delegate void DestinationMarkerEventHandler(object sender, DestinationMarkerEventArgs e);
	[Token(Token = "0x20002BD")]
	public abstract class VRTK_DestinationMarker : MonoBehaviour
	{
		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is checked then the teleport flag is set to true in the Destination Set event so teleport scripts will know whether to action the new destination.")]
		[Header("Destination Marker Settings", order = 1)]
		public bool enableTeleport;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether destination targets will be considered valid or invalid.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Obsolete("`VRTK_DestinationMarker.navMeshCheckDistance` is no longer used. This parameter will be removed in a future version of VRTK.")]
		protected float navMeshCheckDistance;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_NavMeshData navmeshData;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool headsetPositionCompensation;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		protected bool forceHoverOnRepeatedEnter;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Collider existingCollider;

		[Token(Token = "0x140000B9")]
		public event DestinationMarkerEventHandler DestinationMarkerEnter
		{
			[Token(Token = "0x60012DC")]
			[Address(RVA = "0xB377E8", Offset = "0xB377E8", VA = "0xB377E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0xB37884", Offset = "0xB37884", VA = "0xB37884")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000BA")]
		public event DestinationMarkerEventHandler DestinationMarkerExit
		{
			[Token(Token = "0x60012DE")]
			[Address(RVA = "0xB37920", Offset = "0xB37920", VA = "0xB37920")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0xB379BC", Offset = "0xB379BC", VA = "0xB379BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000BB")]
		public event DestinationMarkerEventHandler DestinationMarkerHover
		{
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0xB37A58", Offset = "0xB37A58", VA = "0xB37A58")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0xB37AF4", Offset = "0xB37AF4", VA = "0xB37AF4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000BC")]
		public event DestinationMarkerEventHandler DestinationMarkerSet
		{
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0xB37B90", Offset = "0xB37B90", VA = "0xB37B90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0xB37C2C", Offset = "0xB37C2C", VA = "0xB37C2C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xB37CC8", Offset = "0xB37CC8", VA = "0xB37CC8", Slot = "4")]
		public virtual void OnDestinationMarkerEnter(DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xB37E54", Offset = "0xB37E54", VA = "0xB37E54", Slot = "5")]
		public virtual void OnDestinationMarkerExit(DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xB37ECC", Offset = "0xB37ECC", VA = "0xB37ECC", Slot = "6")]
		public virtual void OnDestinationMarkerHover(DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xB37F34", Offset = "0xB37F34", VA = "0xB37F34", Slot = "7")]
		public virtual void OnDestinationMarkerSet(DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xB37F9C", Offset = "0xB37F9C", VA = "0xB37F9C", Slot = "8")]
		[Obsolete("`DestinationMarker.SetNavMeshCheckDistance(distance)` has been replaced with the method `DestinationMarker.SetNavMeshCheckDistance(givenData)`. This method will be removed in a future version of VRTK.")]
		public virtual void SetNavMeshCheckDistance(float distance)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xB3801C", Offset = "0xB3801C", VA = "0xB3801C", Slot = "9")]
		public virtual void SetNavMeshData(VRTK_NavMeshData givenData)
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xB38024", Offset = "0xB38024", VA = "0xB38024", Slot = "10")]
		public virtual void SetHeadsetPositionCompensation(bool state)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xB38030", Offset = "0xB38030", VA = "0xB38030", Slot = "11")]
		public virtual void SetForceHoverOnRepeatedEnter(bool state)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xB3803C", Offset = "0xB3803C", VA = "0xB3803C", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xB38114", Offset = "0xB38114", VA = "0xB38114", Slot = "13")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xB38194", Offset = "0xB38194", VA = "0xB38194", Slot = "14")]
		protected virtual DestinationMarkerEventArgs SetDestinationMarkerEvent(float distance, Transform target, RaycastHit raycastHit, Vector3 position, VRTK_ControllerReference controllerReference, bool forceDestinationPosition = false, [Optional] Quaternion? rotation)
		{
			return default(DestinationMarkerEventArgs);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xB38274", Offset = "0xB38274", VA = "0xB38274")]
		protected VRTK_DestinationMarker()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public struct PlayAreaCursorEventArgs
	{
		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider collider;
	}
	[Token(Token = "0x20002BF")]
	public delegate void PlayAreaCursorEventHandler(object sender, PlayAreaCursorEventArgs e);
	[Token(Token = "0x20002C0")]
	[AddComponentMenu("VRTK/Scripts/Pointers/VRTK_PlayAreaCursor")]
	public class VRTK_PlayAreaCursor : MonoBehaviour
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Appearance Settings")]
		[Tooltip("If this is checked then the pointer valid/invalid colours will also be used to change the colour of the play area cursor when colliding/not colliding.")]
		public bool usePointerColor;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines the size of the play area cursor and collider. If the values are left as zero then the Play Area Cursor will be sized to the calibrated Play Area space.")]
		public Vector2 playAreaCursorDimensions;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If this is checked then if the play area cursor is colliding with any other object then the pointer colour will change to the `Pointer Miss Color` and the `DestinationMarkerSet` event will not be triggered, which will prevent teleporting into areas where the play area will collide.")]
		public bool handlePlayAreaCursorCollisions;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("If this is checked then if the user's headset is outside of the play area cursor bounds then it is considered a collision even if the play area isn't colliding with anything.")]
		public bool headsetOutOfBoundsIsCollision;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[Tooltip("If this is checked then the play area cursor will be displayed when the location is invalid.")]
		public bool displayOnInvalidLocation;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether the play area cursor collisions will be acted upon.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A custom Pointer Direction Indicator to use to determine the rotation of the Play Area Cursor.")]
		[Header("Custom Settings")]
		public VRTK_PointerDirectionIndicator directionIndicator;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A custom GameObject to use for the play area cursor representation for when the location is valid.")]
		public GameObject validLocationObject;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("A custom GameObject to use for the play area cursor representation for when the location is invalid.")]
		public GameObject invalidLocationObject;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool headsetPositionCompensation;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		protected bool playAreaCursorCollided;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		protected bool headsetOutOfBounds;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform playArea;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject playAreaCursor;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected GameObject[] playAreaCursorBoundaries;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected BoxCollider playAreaCursorCollider;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform headset;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Renderer[] boundaryRenderers;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GameObject playAreaCursorValidChild;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject playAreaCursorInvalidChild;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int btmRightInner;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int btmLeftInner;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected int topLeftInner;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected int topRightInner;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int btmRightOuter;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected int btmLeftOuter;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected int topLeftOuter;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected int topRightOuter;

		[Token(Token = "0x140000BD")]
		public event PlayAreaCursorEventHandler PlayAreaCursorStartCollision
		{
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0xB38478", Offset = "0xB38478", VA = "0xB38478")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012F5")]
			[Address(RVA = "0xB38514", Offset = "0xB38514", VA = "0xB38514")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000BE")]
		public event PlayAreaCursorEventHandler PlayAreaCursorEndCollision
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0xB385B0", Offset = "0xB385B0", VA = "0xB385B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0xB3864C", Offset = "0xB3864C", VA = "0xB3864C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xB386E8", Offset = "0xB386E8", VA = "0xB386E8", Slot = "4")]
		public virtual void OnPlayAreaCursorStartCollision(PlayAreaCursorEventArgs e)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xB38710", Offset = "0xB38710", VA = "0xB38710", Slot = "5")]
		public virtual void OnPlayAreaCursorEndCollision(PlayAreaCursorEventArgs e)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xB38738", Offset = "0xB38738", VA = "0xB38738", Slot = "6")]
		public virtual bool HasCollided()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xB38758", Offset = "0xB38758", VA = "0xB38758", Slot = "7")]
		public virtual void SetHeadsetPositionCompensation(bool state)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xB38764", Offset = "0xB38764", VA = "0xB38764", Slot = "8")]
		public virtual void SetPlayAreaCursorCollision(bool state, [Optional] Collider collider)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xB387C4", Offset = "0xB387C4", VA = "0xB387C4", Slot = "9")]
		public virtual void SetMaterialColor(Color color, bool validity)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xB38950", Offset = "0xB38950", VA = "0xB38950", Slot = "10")]
		public virtual void SetPlayAreaCursorTransform(Vector3 location)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xB38C24", Offset = "0xB38C24", VA = "0xB38C24", Slot = "11")]
		public virtual void ToggleState(bool state)
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xB38CD4", Offset = "0xB38CD4", VA = "0xB38CD4", Slot = "12")]
		public virtual bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xB38D5C", Offset = "0xB38D5C", VA = "0xB38D5C", Slot = "13")]
		public virtual GameObject GetPlayAreaContainer()
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xB38D64", Offset = "0xB38D64", VA = "0xB38D64", Slot = "14")]
		public virtual void ToggleVisibility(bool state)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xB38EB4", Offset = "0xB38EB4", VA = "0xB38EB4", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xB38F0C", Offset = "0xB38F0C", VA = "0xB38F0C", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xB38FE4", Offset = "0xB38FE4", VA = "0xB38FE4", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xB39074", Offset = "0xB39074", VA = "0xB39074", Slot = "18")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xB390CC", Offset = "0xB390CC", VA = "0xB390CC", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xB39114", Offset = "0xB39114", VA = "0xB39114", Slot = "20")]
		protected virtual PlayAreaCursorEventArgs SetEventPayload(Collider collider)
		{
			return default(PlayAreaCursorEventArgs);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xB39130", Offset = "0xB39130", VA = "0xB39130", Slot = "21")]
		protected virtual void EmitEvent(Collider collider)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xB391E8", Offset = "0xB391E8", VA = "0xB391E8", Slot = "22")]
		protected virtual void InitPlayAreaCursor()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xB39610", Offset = "0xB39610", VA = "0xB39610", Slot = "23")]
		protected virtual void SetCursorColor(GameObject cursorObject, Color color)
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xB39788", Offset = "0xB39788", VA = "0xB39788", Slot = "24")]
		protected virtual void ToggleValidPlayAreaState(bool state)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB3986C", Offset = "0xB3986C", VA = "0xB3986C", Slot = "25")]
		protected virtual string GeneratePlayAreaCursorName()
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB39988", Offset = "0xB39988", VA = "0xB39988", Slot = "26")]
		protected virtual void GeneratePlayAreaCursorFromPrefab(Vector3[] cursorDrawVertices)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB39EBC", Offset = "0xB39EBC", VA = "0xB39EBC", Slot = "27")]
		protected virtual void GeneratePlayAreaCursor(Vector3[] cursorDrawVertices)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xB3A488", Offset = "0xB3A488", VA = "0xB3A488", Slot = "28")]
		protected virtual void DrawPlayAreaCursorBoundary(int index, float left, float right, float top, float bottom, float thickness, Vector3 localPosition)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB3A7E8", Offset = "0xB3A7E8", VA = "0xB3A7E8", Slot = "29")]
		protected virtual void CreateCursorCollider(GameObject cursor)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xB3A89C", Offset = "0xB3A89C", VA = "0xB3A89C", Slot = "30")]
		protected virtual void UpdateCollider()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xB3A9A4", Offset = "0xB3A9A4", VA = "0xB3A9A4")]
		public VRTK_PlayAreaCursor()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class VRTK_PlayAreaCollider : MonoBehaviour
	{
		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_PlayAreaCursor parent;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xB3AA70", Offset = "0xB3AA70", VA = "0xB3AA70", Slot = "4")]
		public virtual void SetParent(VRTK_PlayAreaCursor setParent)
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xB3AA78", Offset = "0xB3AA78", VA = "0xB3AA78", Slot = "5")]
		public virtual void SetIgnoreTarget([Optional] VRTK_PolicyList list)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xB3AA80", Offset = "0xB3AA80", VA = "0xB3AA80", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xB3AB10", Offset = "0xB3AB10", VA = "0xB3AB10", Slot = "7")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xB3ABFC", Offset = "0xB3ABFC", VA = "0xB3ABFC", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xB3ACB4", Offset = "0xB3ACB4", VA = "0xB3ACB4", Slot = "9")]
		protected virtual bool ValidTarget(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xB3AD30", Offset = "0xB3AD30", VA = "0xB3AD30")]
		public VRTK_PlayAreaCollider()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	[AddComponentMenu("VRTK/Scripts/Pointers/VRTK_Pointer")]
	public class VRTK_Pointer : VRTK_DestinationMarker
	{
		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The specific renderer to use when the pointer is activated. The renderer also determines how the pointer reaches it's destination (e.g. straight line, bezier curve).")]
		[Header("Pointer Activation Settings")]
		public VRTK_BasePointerRenderer pointerRenderer;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The button used to activate/deactivate the pointer.")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If this is checked then the Activation Button needs to be continuously held down to keep the pointer active. If this is unchecked then the Activation Button works as a toggle, the first press/release enables the pointer and the second press/release disables the pointer.")]
		public bool holdButtonToActivate;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[Tooltip("If this is checked then the pointer will be toggled on when the script is enabled.")]
		public bool activateOnEnable;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The time in seconds to delay the pointer being able to be active again.")]
		public float activationDelay;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The button used to execute the select action at the pointer's target position.")]
		[Header("Pointer Selection Settings")]
		public VRTK_ControllerEvents.ButtonAlias selectionButton;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If this is checked then the pointer selection action is executed when the Selection Button is pressed down. If this is unchecked then the selection action is executed when the Selection Button is released.")]
		public bool selectOnPress;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The time in seconds to delay the pointer being able to execute the select action again.")]
		public float selectionDelay;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The amount of time the pointer can be over the same collider before it automatically attempts to select it. 0f means no selection attempt will be made.")]
		public float selectAfterHoverDuration;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("If this is checked then the pointer will be an extension of the controller and able to interact with Interactable Objects.")]
		[Header("Pointer Interaction Settings")]
		public bool interactWithObjects;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("If `Interact With Objects` is checked and this is checked then when an object is grabbed with the pointer touching it, the object will attach to the pointer tip and not snap to the controller.")]
		public bool grabToPointerTip;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("An optional GameObject that determines what the pointer is to be attached to. If this is left blank then the GameObject the script is on will be used.")]
		[Header("Pointer Customisation Settings")]
		public GameObject attachedTo;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("An optional Controller Events that will be used to toggle the pointer. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("An optional InteractUse script that will be used when using interactable objects with pointer. If this is left blank then it will attempt to get the InteractUse script from the same GameObject and if it cannot find one then it will attempt to get it from the attached controller.")]
		public VRTK_InteractUse interactUse;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("A custom transform to use as the origin of the pointer. If no pointer origin transform is provided then the transform the script is attached to is used.")]
		public Transform customOrigin;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ObsoleteInspector]
		[Obsolete("`VRTK_Pointer.controller` has been replaced with `VRTK_Pointer.controllerEvents`. This parameter will be removed in a future version of VRTK.")]
		[Header("Obsolete Settings")]
		public VRTK_ControllerEvents controller;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedSelectionButton;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool currentSelectOnPress;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float activateDelayTimer;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float selectDelayTimer;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float hoverDurationTimer;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected int currentActivationState;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected bool willDeactivate;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		protected bool wasActivated;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_ControllerReference controllerReference;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected VRTK_InteractableObject pointerInteractableObject;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected Collider currentCollider;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool canClickOnHover;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		protected bool activationButtonPressed;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		protected bool selectionButtonPressed;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
		protected bool attemptControllerSetup;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_StraightPointerRenderer autogenPointerRenderer;

		[Token(Token = "0x140000BF")]
		public event ControllerInteractionEventHandler ActivationButtonPressed
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0xB3AD38", Offset = "0xB3AD38", VA = "0xB3AD38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600131C")]
			[Address(RVA = "0xB3ADD4", Offset = "0xB3ADD4", VA = "0xB3ADD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C0")]
		public event ControllerInteractionEventHandler ActivationButtonReleased
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0xB3AE70", Offset = "0xB3AE70", VA = "0xB3AE70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600131E")]
			[Address(RVA = "0xB3AF0C", Offset = "0xB3AF0C", VA = "0xB3AF0C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C1")]
		public event ControllerInteractionEventHandler SelectionButtonPressed
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0xB3AFA8", Offset = "0xB3AFA8", VA = "0xB3AFA8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001320")]
			[Address(RVA = "0xB3B044", Offset = "0xB3B044", VA = "0xB3B044")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C2")]
		public event ControllerInteractionEventHandler SelectionButtonReleased
		{
			[Token(Token = "0x6001321")]
			[Address(RVA = "0xB3B0E0", Offset = "0xB3B0E0", VA = "0xB3B0E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001322")]
			[Address(RVA = "0xB3B17C", Offset = "0xB3B17C", VA = "0xB3B17C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C3")]
		public event DestinationMarkerEventHandler PointerStateValid
		{
			[Token(Token = "0x6001323")]
			[Address(RVA = "0xB3B218", Offset = "0xB3B218", VA = "0xB3B218")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001324")]
			[Address(RVA = "0xB3B2B4", Offset = "0xB3B2B4", VA = "0xB3B2B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C4")]
		public event DestinationMarkerEventHandler PointerStateInvalid
		{
			[Token(Token = "0x6001325")]
			[Address(RVA = "0xB3B350", Offset = "0xB3B350", VA = "0xB3B350")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001326")]
			[Address(RVA = "0xB3B3EC", Offset = "0xB3B3EC", VA = "0xB3B3EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xB3B488", Offset = "0xB3B488", VA = "0xB3B488", Slot = "15")]
		public virtual void OnActivationButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xB3B4D8", Offset = "0xB3B4D8", VA = "0xB3B4D8", Slot = "16")]
		public virtual void OnActivationButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xB3B528", Offset = "0xB3B528", VA = "0xB3B528", Slot = "17")]
		public virtual void OnSelectionButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xB3B578", Offset = "0xB3B578", VA = "0xB3B578", Slot = "18")]
		public virtual void OnSelectionButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xB3B5C8", Offset = "0xB3B5C8", VA = "0xB3B5C8", Slot = "19")]
		public virtual void OnPointerStateValid()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xB3B648", Offset = "0xB3B648", VA = "0xB3B648", Slot = "20")]
		public virtual void OnPointerStateInvalid()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xB3B6C8", Offset = "0xB3B6C8", VA = "0xB3B6C8", Slot = "21")]
		public virtual bool IsActivationButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xB3B6D0", Offset = "0xB3B6D0", VA = "0xB3B6D0", Slot = "22")]
		public virtual bool IsSelectionButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xB3B6D8", Offset = "0xB3B6D8", VA = "0xB3B6D8", Slot = "23")]
		public virtual void PointerEnter(RaycastHit givenHit)
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xB3BA08", Offset = "0xB3BA08", VA = "0xB3BA08", Slot = "24")]
		public virtual void PointerExit(RaycastHit givenHit)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xB3BC34", Offset = "0xB3BC34", VA = "0xB3BC34", Slot = "25")]
		public virtual bool CanActivate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xB3BC58", Offset = "0xB3BC58", VA = "0xB3BC58", Slot = "26")]
		public virtual bool CanSelect()
		{
			return default(bool);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xB3BC7C", Offset = "0xB3BC7C", VA = "0xB3BC7C", Slot = "27")]
		public virtual bool IsPointerActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xB3BC8C", Offset = "0xB3BC8C", VA = "0xB3BC8C", Slot = "28")]
		public virtual void ResetActivationTimer(bool forceZero = false)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xB3BCC0", Offset = "0xB3BCC0", VA = "0xB3BCC0", Slot = "29")]
		public virtual void ResetSelectionTimer(bool forceZero = false)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xB3BCF4", Offset = "0xB3BCF4", VA = "0xB3BCF4", Slot = "30")]
		public virtual void Toggle(bool state)
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xB3C124", Offset = "0xB3C124", VA = "0xB3C124", Slot = "31")]
		public virtual bool IsStateValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xB3C16C", Offset = "0xB3C16C", VA = "0xB3C16C", Slot = "32")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xB3C1C4", Offset = "0xB3C1C4", VA = "0xB3C1C4", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xB3C310", Offset = "0xB3C310", VA = "0xB3C310", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xB3C430", Offset = "0xB3C430", VA = "0xB3C430", Slot = "33")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xB3C488", Offset = "0xB3C488", VA = "0xB3C488", Slot = "34")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xB3C4CC", Offset = "0xB3C4CC", VA = "0xB3C4CC", Slot = "35")]
		protected virtual void SetDefaultValues()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xB3C504", Offset = "0xB3C504", VA = "0xB3C504", Slot = "36")]
		protected virtual void AttemptControllerSetup()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xB3C580", Offset = "0xB3C580", VA = "0xB3C580", Slot = "37")]
		protected virtual void HandleEnabledPointer()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xB3C660", Offset = "0xB3C660", VA = "0xB3C660", Slot = "38")]
		protected virtual Quaternion? GetCursorRotation()
		{
			return null;
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xB3C76C", Offset = "0xB3C76C", VA = "0xB3C76C", Slot = "39")]
		protected virtual bool EnabledPointerRenderer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xB3C7F4", Offset = "0xB3C7F4", VA = "0xB3C7F4", Slot = "40")]
		protected virtual bool NoPointerRenderer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xB3C880", Offset = "0xB3C880", VA = "0xB3C880", Slot = "41")]
		protected virtual bool CanActivateOnToggleButton(bool state)
		{
			return default(bool);
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xB3C8C4", Offset = "0xB3C8C4", VA = "0xB3C8C4", Slot = "42")]
		protected virtual bool ControllerRequired()
		{
			return default(bool);
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xB3C8E4", Offset = "0xB3C8E4", VA = "0xB3C8E4", Slot = "43")]
		protected virtual bool FindController()
		{
			return default(bool);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xB3CC54", Offset = "0xB3CC54", VA = "0xB3CC54", Slot = "44")]
		protected virtual void GetInteractUse()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xB3CD78", Offset = "0xB3CD78", VA = "0xB3CD78", Slot = "45")]
		protected virtual void SetupController()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xB3CE24", Offset = "0xB3CE24", VA = "0xB3CE24", Slot = "46")]
		protected virtual void SetupRenderer()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xB3CF08", Offset = "0xB3CF08", VA = "0xB3CF08", Slot = "47")]
		protected virtual VRTK_BasePointerRenderer GeneratePointerRenderer()
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xB3D05C", Offset = "0xB3D05C", VA = "0xB3D05C", Slot = "48")]
		protected virtual bool ButtonMappingIsUndefined(VRTK_ControllerEvents.ButtonAlias givenButton, VRTK_ControllerEvents.ButtonAlias givenSubscribedButton)
		{
			return default(bool);
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xB3D074", Offset = "0xB3D074", VA = "0xB3D074", Slot = "49")]
		protected virtual void CheckButtonMappingConflict()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xB3D150", Offset = "0xB3D150", VA = "0xB3D150", Slot = "50")]
		protected virtual void CheckButtonSubscriptions()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xB3D248", Offset = "0xB3D248", VA = "0xB3D248", Slot = "51")]
		protected virtual void SubscribeActivationButton()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xB3D394", Offset = "0xB3D394", VA = "0xB3D394", Slot = "52")]
		protected virtual void UnsubscribeActivationButton()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xB3D4C4", Offset = "0xB3D4C4", VA = "0xB3D4C4", Slot = "53")]
		protected virtual void PointerActivated()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xB3D504", Offset = "0xB3D504", VA = "0xB3D504", Slot = "54")]
		protected virtual void PointerDeactivated()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xB3D55C", Offset = "0xB3D55C", VA = "0xB3D55C", Slot = "55")]
		protected virtual void DoActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xB3D5F4", Offset = "0xB3D5F4", VA = "0xB3D5F4", Slot = "56")]
		protected virtual void DoActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xB3D68C", Offset = "0xB3D68C", VA = "0xB3D68C", Slot = "57")]
		protected virtual void SubscribeSelectionButton()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xB3D840", Offset = "0xB3D840", VA = "0xB3D840", Slot = "58")]
		protected virtual void UnsubscribeSelectionButton()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xB3D9D4", Offset = "0xB3D9D4", VA = "0xB3D9D4", Slot = "59")]
		protected virtual void DoSelectionButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xB3DA48", Offset = "0xB3DA48", VA = "0xB3DA48", Slot = "60")]
		protected virtual void DoSelectionButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xB3DABC", Offset = "0xB3DABC", VA = "0xB3DABC", Slot = "61")]
		protected virtual void SelectionButtonAction(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xB3DAEC", Offset = "0xB3DAEC", VA = "0xB3DAEC", Slot = "62")]
		protected virtual void ExecuteSelectionButtonAction()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xB3DDE8", Offset = "0xB3DDE8", VA = "0xB3DDE8", Slot = "63")]
		protected virtual bool CanResetActivationState(bool givenState)
		{
			return default(bool);
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xB3DE18", Offset = "0xB3DE18", VA = "0xB3DE18", Slot = "64")]
		protected virtual void ManageActivationState(bool state)
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xB3DE64", Offset = "0xB3DE64", VA = "0xB3DE64", Slot = "65")]
		protected virtual bool PointerActivatesUseAction(VRTK_InteractableObject givenInteractableObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xB3DF40", Offset = "0xB3DF40", VA = "0xB3DF40", Slot = "66")]
		protected virtual void StartUseAction(Transform target)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xB3E0AC", Offset = "0xB3E0AC", VA = "0xB3E0AC", Slot = "67")]
		protected virtual void StopUseAction()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xB3E188", Offset = "0xB3E188", VA = "0xB3E188", Slot = "68")]
		protected virtual void AttemptUseOnSet(Transform target)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xB3E2F4", Offset = "0xB3E2F4", VA = "0xB3E2F4", Slot = "69")]
		protected virtual void SetHoverSelectionTimer(Collider collider)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xB3E39C", Offset = "0xB3E39C", VA = "0xB3E39C", Slot = "70")]
		protected virtual void ResetHoverSelectionTimer(Collider collider)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xB3E420", Offset = "0xB3E420", VA = "0xB3E420", Slot = "71")]
		protected virtual void CheckHoverSelect()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xB3E484", Offset = "0xB3E484", VA = "0xB3E484", Slot = "72")]
		protected virtual DestinationMarkerEventArgs GetStateEventPayload()
		{
			return default(DestinationMarkerEventArgs);
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xB3E614", Offset = "0xB3E614", VA = "0xB3E614")]
		public VRTK_Pointer()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public struct BodyPhysicsEventArgs
	{
		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject target;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Collider collider;
	}
	[Token(Token = "0x20002C4")]
	public delegate void BodyPhysicsEventHandler(object sender, BodyPhysicsEventArgs e);
	[Token(Token = "0x20002C5")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_BodyPhysics")]
	public class VRTK_BodyPhysics : VRTK_DestinationMarker
	{
		[Token(Token = "0x20002C6")]
		public enum FallingRestrictors
		{
			[Token(Token = "0x40011FA")]
			NoRestriction,
			[Token(Token = "0x40011FB")]
			LeftController,
			[Token(Token = "0x40011FC")]
			RightController,
			[Token(Token = "0x40011FD")]
			EitherController,
			[Token(Token = "0x40011FE")]
			BothControllers,
			[Token(Token = "0x40011FF")]
			AlwaysRestrict
		}

		[Token(Token = "0x20002C7")]
		[CompilerGenerated]
		private sealed class <RestoreCollisions>d__178 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject obj;

			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_BodyPhysics <>4__this;

			[Token(Token = "0x1700017B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013E1")]
				[Address(RVA = "0xB4528C", Offset = "0xB4528C", VA = "0xB4528C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E3")]
				[Address(RVA = "0xB452D4", Offset = "0xB452D4", VA = "0xB452D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013DE")]
			[Address(RVA = "0xB43D00", Offset = "0xB43D00", VA = "0xB43D00")]
			[DebuggerHidden]
			public <RestoreCollisions>d__178(int <>1__state)
			{
			}

			[Token(Token = "0x60013DF")]
			[Address(RVA = "0xB450F4", Offset = "0xB450F4", VA = "0xB450F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E0")]
			[Address(RVA = "0xB450F8", Offset = "0xB450F8", VA = "0xB450F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xB45294", Offset = "0xB45294", VA = "0xB45294", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Body Collision Settings")]
		[Tooltip("If checked then the body collider and rigidbody will be used to check for rigidbody collisions.")]
		public bool enableBodyCollisions;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("If this is checked then any items that are grabbed with the controller will not collide with the body collider. This is very useful if the user is required to grab and wield objects because if the collider was active they would bounce off the collider.")]
		public bool ignoreGrabbedCollisions;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An array of GameObjects that will not collide with the body collider.")]
		public GameObject[] ignoreCollisionsWith;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The collider which is created for the user is set at a height from the user's headset position. If the collider is required to be lower to allow for room between the play area collider and the headset then this offset value will shorten the height of the generated collider.")]
		public float headsetYOffset;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The amount of movement of the headset between the headset's current position and the current standing position to determine if the user is walking in play space and to ignore the body physics collisions if the movement delta is above this threshold.")]
		public float movementThreshold;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The amount of movement of the play area between the play area's current position and the previous position to determine if the user is moving play space.")]
		public float playAreaMovementThreshold;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The maximum number of samples to collect of headset position before determining if the current standing position within the play space has changed.")]
		public int standingHistorySamples;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The `y` distance between the headset and the object being leaned over, if object being leaned over is taller than this threshold then the current standing position won't be updated.")]
		public float leanYThreshold;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Header("Step Settings")]
		[Tooltip("The maximum height to consider when checking if an object can be stepped upon to.")]
		public float stepUpYOffset;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0.1f, 0.9f)]
		[Tooltip("The width/depth of the foot collider in relation to the radius of the body collider.")]
		public float stepThicknessMultiplier;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The distance between the current play area Y position and the new stepped up Y position to consider a valid step up. A higher number can help with juddering on slopes or small increases in collider heights.")]
		public float stepDropThreshold;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Snap To Floor Settings")]
		[Tooltip("A custom raycaster to use when raycasting to find floors.")]
		public VRTK_CustomRaycast customRaycast;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("A check to see if the drop to nearest floor should take place. If the selected restrictor is still over the current floor then the drop to nearest floor will not occur. Works well for being able to lean over ledges and look down. Only works for falling down not teleporting up.")]
		public FallingRestrictors fallRestriction;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("When the `y` distance between the floor and the headset exceeds this distance and `Enable Body Collisions` is true then the rigidbody gravity will be used instead of teleport to drop to nearest floor.")]
		public float gravityFallYThreshold;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The `y` distance between the floor and the headset that must change before a fade transition is initiated. If the new user location is at a higher distance than the threshold then the headset blink transition will activate on teleport. If the new user location is within the threshold then no blink transition will happen, which is useful for walking up slopes, meshes and terrains to prevent constant blinking.")]
		public float blinkYThreshold;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("The amount the `y` position needs to change by between the current floor `y` position and the previous floor `y` position before a change in floor height is considered to have occurred. A higher value here will mean that a `Drop To Floor` will be less likely to happen if the `y` of the floor beneath the user hasn't changed as much as the given threshold.")]
		public float floorHeightTolerance;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The amount of rounding on the play area Y position to be applied when checking if falling is occuring.")]
		[Range(1f, 10f)]
		public int fallCheckPrecision;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Custom Settings")]
		[Tooltip("The VRTK Teleport script to use when snapping to floor. If this is left blank then a Teleport script will need to be applied to the same GameObject.")]
		public VRTK_BasicTeleport teleporter;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("A custom Rigidbody to apply to the play area. If one is not provided, then if an existing rigidbody is found on the play area GameObject it will be used, otherwise a default one will be created.")]
		public Rigidbody customPlayAreaRigidbody;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("A GameObject to represent a custom body collider container. It should contain a collider component that will be used for detecting body collisions. If one isn't provided then it will be auto generated.")]
		public GameObject customBodyColliderContainer;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("A GameObject to represent a custom foot collider container. It should contain a collider component that will be used for detecting step collisions. If one isn't provided then it will be auto generated.")]
		public GameObject customFootColliderContainer;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform playArea;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform headset;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Rigidbody bodyRigidbody;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected GameObject bodyColliderContainer;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected GameObject footColliderContainer;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected CapsuleCollider bodyCollider;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected CapsuleCollider footCollider;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected VRTK_CollisionTracker collisionTracker;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected bool currentBodyCollisionsSetting;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected GameObject currentCollidingObject;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected GameObject currentValidFloorObject;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected float lastFrameFloorY;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		protected float hitFloorYDelta;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected bool initialFloorDrop;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		protected bool resetPhysicsAfterTeleport;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
		protected bool storedCurrentPhysics;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18B")]
		protected bool retogglePhysicsOnCanFall;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		protected bool storedRetogglePhysics;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Vector3 lastPlayAreaPosition;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Vector2 currentStandingPosition;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected List<Vector2> standingPositionHistory;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected float playAreaHeightAdjustment;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		protected float bodyMass;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected float bodyRadius;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		protected float leanForwardLengthAddition;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected float playAreaPositionThreshold;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		protected float gravityPush;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected int decimalPrecision;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		protected bool isFalling;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		protected bool isMoving;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		protected bool isLeaning;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		protected bool onGround;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected bool preventSnapToFloor;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		protected bool generateRigidbody;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		protected Vector3 playAreaVelocity;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		protected string footColliderContainerNameCheck;

		[Token(Token = "0x40011EF")]
		protected const string BODY_COLLIDER_CONTAINER_NAME = "BodyColliderContainer";

		[Token(Token = "0x40011F0")]
		protected const string FOOT_COLLIDER_CONTAINER_NAME = "FootColliderContainer";

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		protected bool enableBodyCollisionsStartingValue;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		protected float fallMinTime;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		protected HashSet<GameObject> ignoreCollisionsOnGameObjects;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected Transform cachedGrabbedObjectTransform;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected VRTK_InteractableObject cachedGrabbedObject;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected LayerMask defaultIgnoreLayer;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected Coroutine restoreCollisionsRoutine;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		protected bool drawDebugGizmo;

		[Token(Token = "0x140000C5")]
		public event BodyPhysicsEventHandler StartFalling
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0xB3E82C", Offset = "0xB3E82C", VA = "0xB3E82C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001369")]
			[Address(RVA = "0xB3E8C8", Offset = "0xB3E8C8", VA = "0xB3E8C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C6")]
		public event BodyPhysicsEventHandler StopFalling
		{
			[Token(Token = "0x600136A")]
			[Address(RVA = "0xB3E964", Offset = "0xB3E964", VA = "0xB3E964")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600136B")]
			[Address(RVA = "0xB3EA00", Offset = "0xB3EA00", VA = "0xB3EA00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C7")]
		public event BodyPhysicsEventHandler StartMoving
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0xB3EA9C", Offset = "0xB3EA9C", VA = "0xB3EA9C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600136D")]
			[Address(RVA = "0xB3EB38", Offset = "0xB3EB38", VA = "0xB3EB38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C8")]
		public event BodyPhysicsEventHandler StopMoving
		{
			[Token(Token = "0x600136E")]
			[Address(RVA = "0xB3EBD4", Offset = "0xB3EBD4", VA = "0xB3EBD4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600136F")]
			[Address(RVA = "0xB3EC70", Offset = "0xB3EC70", VA = "0xB3EC70")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000C9")]
		public event BodyPhysicsEventHandler StartColliding
		{
			[Token(Token = "0x6001370")]
			[Address(RVA = "0xB3ED0C", Offset = "0xB3ED0C", VA = "0xB3ED0C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001371")]
			[Address(RVA = "0xB3EDA8", Offset = "0xB3EDA8", VA = "0xB3EDA8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000CA")]
		public event BodyPhysicsEventHandler StopColliding
		{
			[Token(Token = "0x6001372")]
			[Address(RVA = "0xB3EE44", Offset = "0xB3EE44", VA = "0xB3EE44")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001373")]
			[Address(RVA = "0xB3EEE4", Offset = "0xB3EEE4", VA = "0xB3EEE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000CB")]
		public event BodyPhysicsEventHandler StartLeaning
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0xB3EF84", Offset = "0xB3EF84", VA = "0xB3EF84")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001375")]
			[Address(RVA = "0xB3F024", Offset = "0xB3F024", VA = "0xB3F024")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000CC")]
		public event BodyPhysicsEventHandler StopLeaning
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0xB3F0C4", Offset = "0xB3F0C4", VA = "0xB3F0C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001377")]
			[Address(RVA = "0xB3F164", Offset = "0xB3F164", VA = "0xB3F164")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000CD")]
		public event BodyPhysicsEventHandler StartTouchingGround
		{
			[Token(Token = "0x6001378")]
			[Address(RVA = "0xB3F204", Offset = "0xB3F204", VA = "0xB3F204")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001379")]
			[Address(RVA = "0xB3F2A4", Offset = "0xB3F2A4", VA = "0xB3F2A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000CE")]
		public event BodyPhysicsEventHandler StopTouchingGround
		{
			[Token(Token = "0x600137A")]
			[Address(RVA = "0xB3F344", Offset = "0xB3F344", VA = "0xB3F344")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xB3F3E4", Offset = "0xB3F3E4", VA = "0xB3F3E4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xB3F484", Offset = "0xB3F484", VA = "0xB3F484", Slot = "15")]
		public virtual bool ArePhysicsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xB3F510", Offset = "0xB3F510", VA = "0xB3F510", Slot = "16")]
		public virtual void ApplyBodyVelocity(Vector3 velocity, bool forcePhysicsOn = false, bool applyMomentum = false)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xB3F5EC", Offset = "0xB3F5EC", VA = "0xB3F5EC", Slot = "17")]
		public virtual void ToggleOnGround(bool state)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xB3F674", Offset = "0xB3F674", VA = "0xB3F674", Slot = "18")]
		public virtual void TogglePreventSnapToFloor(bool state)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xB3F680", Offset = "0xB3F680", VA = "0xB3F680", Slot = "19")]
		public virtual void ForceSnapToFloor()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xB3F6B4", Offset = "0xB3F6B4", VA = "0xB3F6B4", Slot = "20")]
		public virtual bool IsFalling()
		{
			return default(bool);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xB3F6BC", Offset = "0xB3F6BC", VA = "0xB3F6BC", Slot = "21")]
		public virtual bool IsMoving()
		{
			return default(bool);
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xB3F6C4", Offset = "0xB3F6C4", VA = "0xB3F6C4", Slot = "22")]
		public virtual bool IsLeaning()
		{
			return default(bool);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xB3F6CC", Offset = "0xB3F6CC", VA = "0xB3F6CC", Slot = "23")]
		public virtual bool OnGround()
		{
			return default(bool);
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xB3F6D4", Offset = "0xB3F6D4", VA = "0xB3F6D4", Slot = "24")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xB3F78C", Offset = "0xB3F78C", VA = "0xB3F78C", Slot = "25")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xB3F844", Offset = "0xB3F844", VA = "0xB3F844", Slot = "26")]
		public virtual void ResetVelocities()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xB3F8F0", Offset = "0xB3F8F0", VA = "0xB3F8F0", Slot = "27")]
		public virtual void ResetFalling()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xB3F900", Offset = "0xB3F900", VA = "0xB3F900", Slot = "28")]
		public virtual GameObject GetBodyColliderContainer()
		{
			return null;
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xB3F908", Offset = "0xB3F908", VA = "0xB3F908", Slot = "29")]
		public virtual GameObject GetFootColliderContainer()
		{
			return null;
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xB3F910", Offset = "0xB3F910", VA = "0xB3F910", Slot = "30")]
		public virtual GameObject GetCurrentCollidingObject()
		{
			return null;
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xB3F918", Offset = "0xB3F918", VA = "0xB3F918", Slot = "31")]
		public virtual void ResetIgnoredCollisions()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xB3FBA0", Offset = "0xB3FBA0", VA = "0xB3FBA0", Slot = "32")]
		public virtual bool SweepCollision(Vector3 direction, float maxDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xB3FEA0", Offset = "0xB3FEA0", VA = "0xB3FEA0", Slot = "33")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xB3FEF8", Offset = "0xB3FEF8", VA = "0xB3FEF8", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xB40084", Offset = "0xB40084", VA = "0xB40084", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xB400E8", Offset = "0xB400E8", VA = "0xB400E8", Slot = "34")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xB40140", Offset = "0xB40140", VA = "0xB40140", Slot = "35")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xB40254", Offset = "0xB40254", VA = "0xB40254", Slot = "36")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xB4032C", Offset = "0xB4032C", VA = "0xB4032C", Slot = "37")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xB403DC", Offset = "0xB403DC", VA = "0xB403DC", Slot = "38")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xB404A0", Offset = "0xB404A0", VA = "0xB404A0", Slot = "39")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xB40548", Offset = "0xB40548", VA = "0xB40548", Slot = "40")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xB40694", Offset = "0xB40694", VA = "0xB40694", Slot = "41")]
		protected virtual bool CheckValidCollision(GameObject checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xB40768", Offset = "0xB40768", VA = "0xB40768", Slot = "42")]
		protected virtual bool CheckExistingCollision(GameObject checkObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xB40810", Offset = "0xB40810", VA = "0xB40810", Slot = "43")]
		protected virtual void SetupPlayArea()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xB409A4", Offset = "0xB409A4", VA = "0xB409A4", Slot = "44")]
		protected virtual void SetupHeadset()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xB40A84", Offset = "0xB40A84", VA = "0xB40A84", Slot = "45")]
		protected virtual void ManageCollisionListeners(bool state)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xB40CD4", Offset = "0xB40CD4", VA = "0xB40CD4", Slot = "46")]
		protected virtual void CollisionTracker_TriggerExit(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xB40CE8", Offset = "0xB40CE8", VA = "0xB40CE8", Slot = "47")]
		protected virtual void CollisionTracker_TriggerEnter(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xB40CFC", Offset = "0xB40CFC", VA = "0xB40CFC", Slot = "48")]
		protected virtual void CollisionTracker_CollisionExit(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xB40D10", Offset = "0xB40D10", VA = "0xB40D10", Slot = "49")]
		protected virtual void CollisionTracker_CollisionEnter(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xB40D24", Offset = "0xB40D24", VA = "0xB40D24", Slot = "50")]
		protected virtual void OnStartFalling(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xB40D50", Offset = "0xB40D50", VA = "0xB40D50", Slot = "51")]
		protected virtual void OnStopFalling(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xB40D7C", Offset = "0xB40D7C", VA = "0xB40D7C", Slot = "52")]
		protected virtual void OnStartMoving(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xB40DA8", Offset = "0xB40DA8", VA = "0xB40DA8", Slot = "53")]
		protected virtual void OnStopMoving(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xB40DD4", Offset = "0xB40DD4", VA = "0xB40DD4", Slot = "54")]
		protected virtual void OnStartColliding(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xB40E00", Offset = "0xB40E00", VA = "0xB40E00", Slot = "55")]
		protected virtual void OnStopColliding(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xB40E2C", Offset = "0xB40E2C", VA = "0xB40E2C", Slot = "56")]
		protected virtual void OnStartLeaning(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xB40E58", Offset = "0xB40E58", VA = "0xB40E58", Slot = "57")]
		protected virtual void OnStopLeaning(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xB40E84", Offset = "0xB40E84", VA = "0xB40E84", Slot = "58")]
		protected virtual void OnStartTouchingGround(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xB40EB0", Offset = "0xB40EB0", VA = "0xB40EB0", Slot = "59")]
		protected virtual void OnStopTouchingGround(BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xB40EDC", Offset = "0xB40EDC", VA = "0xB40EDC", Slot = "60")]
		protected virtual BodyPhysicsEventArgs SetBodyPhysicsEvent(GameObject target, Collider collider)
		{
			return default(BodyPhysicsEventArgs);
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xB40F24", Offset = "0xB40F24", VA = "0xB40F24", Slot = "61")]
		protected virtual void CalculateVelocity()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xB41018", Offset = "0xB41018", VA = "0xB41018", Slot = "62")]
		protected virtual void TogglePhysics(bool state)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xB41130", Offset = "0xB41130", VA = "0xB41130", Slot = "63")]
		protected virtual void ManageFalling()
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xB41178", Offset = "0xB41178", VA = "0xB41178", Slot = "64")]
		protected virtual void CheckBodyCollisionsSetting()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xB411A4", Offset = "0xB411A4", VA = "0xB411A4", Slot = "65")]
		protected virtual void CheckFalling()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xB4123C", Offset = "0xB4123C", VA = "0xB4123C", Slot = "66")]
		protected virtual void SetCurrentStandingPosition()
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xB41344", Offset = "0xB41344", VA = "0xB41344", Slot = "67")]
		protected virtual void SetIsMoving(Vector2 currentHeadsetPosition)
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xB4151C", Offset = "0xB4151C", VA = "0xB4151C", Slot = "68")]
		protected virtual void CheckLean()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xB41938", Offset = "0xB41938", VA = "0xB41938", Slot = "69")]
		protected virtual void CalculateLean(Vector3 startPosition, float forwardLength, float originalRayDistance)
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xB41BC8", Offset = "0xB41BC8", VA = "0xB41BC8", Slot = "70")]
		protected virtual void UpdateStandingPosition(Vector2 currentHeadsetPosition)
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xB41DBC", Offset = "0xB41DBC", VA = "0xB41DBC", Slot = "71")]
		protected virtual void CheckHeadsetMovement()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xB41F50", Offset = "0xB41F50", VA = "0xB41F50", Slot = "72")]
		protected virtual void MovementChanged(bool movementState)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xB41FB4", Offset = "0xB41FB4", VA = "0xB41FB4", Slot = "73")]
		protected virtual void EnableDropToFloor()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xB420FC", Offset = "0xB420FC", VA = "0xB420FC", Slot = "74")]
		protected virtual void DisableDropToFloor()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xB421C0", Offset = "0xB421C0", VA = "0xB421C0", Slot = "75")]
		protected virtual void Teleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xB42208", Offset = "0xB42208", VA = "0xB42208", Slot = "76")]
		protected virtual void EnableBodyPhysics()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xB422C0", Offset = "0xB422C0", VA = "0xB422C0", Slot = "77")]
		protected virtual void DisableBodyPhysics()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xB42370", Offset = "0xB42370", VA = "0xB42370", Slot = "78")]
		protected virtual void SetupIgnoredCollisions()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xB424BC", Offset = "0xB424BC", VA = "0xB424BC", Slot = "79")]
		protected virtual void ManagePhysicsCollider(Collider collider, bool state)
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xB42590", Offset = "0xB42590", VA = "0xB42590", Slot = "80")]
		protected virtual void CheckStepUpCollision(Collision collision)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xB429B4", Offset = "0xB429B4", VA = "0xB429B4", Slot = "81")]
		protected virtual GameObject CreateColliderContainer(string name, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xB42C00", Offset = "0xB42C00", VA = "0xB42C00", Slot = "82")]
		protected virtual GameObject InstantiateColliderContainer(GameObject objectToClone, string name, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xB42D30", Offset = "0xB42D30", VA = "0xB42D30", Slot = "83")]
		protected virtual void GenerateRigidbody()
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xB42F24", Offset = "0xB42F24", VA = "0xB42F24", Slot = "84")]
		protected virtual bool HasExistingRigidbody()
		{
			return default(bool);
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xB43018", Offset = "0xB43018", VA = "0xB43018", Slot = "85")]
		protected virtual CapsuleCollider GenerateCapsuleCollider(GameObject parent, float setRadius)
		{
			return null;
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xB430F0", Offset = "0xB430F0", VA = "0xB430F0", Slot = "86")]
		protected virtual void GenerateBodyCollider()
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xB432D0", Offset = "0xB432D0", VA = "0xB432D0", Slot = "87")]
		protected virtual void GenerateFootCollider()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xB43474", Offset = "0xB43474", VA = "0xB43474", Slot = "88")]
		protected virtual void CreateCollider()
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xB436DC", Offset = "0xB436DC", VA = "0xB436DC", Slot = "89")]
		protected virtual void DestroyCollider()
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xB437F0", Offset = "0xB437F0", VA = "0xB437F0", Slot = "90")]
		protected virtual void UpdateCollider()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xB43A84", Offset = "0xB43A84", VA = "0xB43A84", Slot = "91")]
		protected virtual float CalculateStepUpYOffset()
		{
			return default(float);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xB43A90", Offset = "0xB43A90", VA = "0xB43A90", Slot = "92")]
		protected virtual void InitControllerListeners(GameObject mappedController, bool state)
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xB43C70", Offset = "0xB43C70", VA = "0xB43C70", Slot = "93")]
		[IteratorStateMachine(typeof(<RestoreCollisions>d__178))]
		protected virtual IEnumerator RestoreCollisions(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xB43D28", Offset = "0xB43D28", VA = "0xB43D28", Slot = "94")]
		protected virtual void IgnoreCollisions(Collider[] colliders, bool state)
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xB43E98", Offset = "0xB43E98", VA = "0xB43E98", Slot = "95")]
		protected virtual void OnGrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xB43F6C", Offset = "0xB43F6C", VA = "0xB43F6C", Slot = "96")]
		protected virtual void OnUngrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xB44004", Offset = "0xB44004", VA = "0xB44004", Slot = "97")]
		protected virtual bool FloorIsGrabbedObject(RaycastHit collidedObj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xB44140", Offset = "0xB44140", VA = "0xB44140", Slot = "98")]
		protected virtual bool FloorHeightChanged(float currentY)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xB44158", Offset = "0xB44158", VA = "0xB44158", Slot = "99")]
		protected virtual bool ValidDrop(bool rayHit, RaycastHit rayCollidedWith, float floorY)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xB44288", Offset = "0xB44288", VA = "0xB44288", Slot = "100")]
		protected virtual float ControllerHeightCheck(GameObject controllerObj)
		{
			return default(float);
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xB44390", Offset = "0xB44390", VA = "0xB44390", Slot = "101")]
		protected virtual bool ControllersStillOverPreviousFloor()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xB4450C", Offset = "0xB4450C", VA = "0xB4450C", Slot = "102")]
		protected virtual void SnapToNearestFloor()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xB447B8", Offset = "0xB447B8", VA = "0xB447B8", Slot = "103")]
		protected virtual bool PreventFall(float hitFloorY)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xB44810", Offset = "0xB44810", VA = "0xB44810", Slot = "104")]
		protected virtual void HandleFall(float hitFloorY, RaycastHit rayCollidedWith)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xB449A8", Offset = "0xB449A8", VA = "0xB449A8", Slot = "105")]
		protected virtual void StartFall(GameObject targetFloor)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xB44AE4", Offset = "0xB44AE4", VA = "0xB44AE4", Slot = "106")]
		protected virtual void StopFall()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xB44BB4", Offset = "0xB44BB4", VA = "0xB44BB4", Slot = "107")]
		protected virtual void GravityFall(RaycastHit rayCollidedWith)
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xB44C68", Offset = "0xB44C68", VA = "0xB44C68", Slot = "108")]
		protected virtual void TeleportFall(float floorY, RaycastHit rayCollidedWith)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xB44E28", Offset = "0xB44E28", VA = "0xB44E28", Slot = "109")]
		protected virtual void ApplyBodyMomentum(bool applyMomentum = false)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xB44F08", Offset = "0xB44F08", VA = "0xB44F08")]
		public VRTK_BodyPhysics()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public struct HeadsetCollisionEventArgs
	{
		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider collider;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform currentTransform;
	}
	[Token(Token = "0x20002C9")]
	public delegate void HeadsetCollisionEventHandler(object sender, HeadsetCollisionEventArgs e);
	[Token(Token = "0x20002CA")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_HeadsetCollision")]
	public class VRTK_HeadsetCollision : MonoBehaviour
	{
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is checked then the headset collision will ignore colliders set to `Is Trigger = true`.")]
		public bool ignoreTriggerColliders;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The radius of the auto generated sphere collider for detecting collisions on the headset.")]
		public float colliderRadius;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether any objects will be acted upon by the Headset Collision.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public bool headsetColliding;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Collider collidingWith;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform headset;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_HeadsetCollider headsetColliderScript;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject headsetColliderContainer;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected bool generateCollider;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		protected bool generateRigidbody;

		[Token(Token = "0x140000CF")]
		public event HeadsetCollisionEventHandler HeadsetCollisionDetect
		{
			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xB454D0", Offset = "0xB454D0", VA = "0xB454D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60013E9")]
			[Address(RVA = "0xB4556C", Offset = "0xB4556C", VA = "0xB4556C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D0")]
		public event HeadsetCollisionEventHandler HeadsetCollisionEnded
		{
			[Token(Token = "0x60013EA")]
			[Address(RVA = "0xB45608", Offset = "0xB45608", VA = "0xB45608")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60013EB")]
			[Address(RVA = "0xB456A4", Offset = "0xB456A4", VA = "0xB456A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xB45740", Offset = "0xB45740", VA = "0xB45740", Slot = "4")]
		public virtual void OnHeadsetCollisionDetect(HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xB4576C", Offset = "0xB4576C", VA = "0xB4576C", Slot = "5")]
		public virtual void OnHeadsetCollisionEnded(HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xB45798", Offset = "0xB45798", VA = "0xB45798", Slot = "6")]
		public virtual bool IsColliding()
		{
			return default(bool);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xB457A0", Offset = "0xB457A0", VA = "0xB457A0", Slot = "7")]
		public virtual GameObject GetHeadsetColliderContainer()
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xB457A8", Offset = "0xB457A8", VA = "0xB457A8", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xB45800", Offset = "0xB45800", VA = "0xB45800", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xB458E8", Offset = "0xB458E8", VA = "0xB458E8", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xB459B0", Offset = "0xB459B0", VA = "0xB459B0", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xB45A08", Offset = "0xB45A08", VA = "0xB45A08", Slot = "12")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xB45B7C", Offset = "0xB45B7C", VA = "0xB45B7C", Slot = "13")]
		protected virtual void CreateHeadsetColliderContainer()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xB45E08", Offset = "0xB45E08", VA = "0xB45E08", Slot = "14")]
		protected virtual void SetupHeadset()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xB460CC", Offset = "0xB460CC", VA = "0xB460CC", Slot = "15")]
		protected virtual void TearDownHeadset()
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xB46260", Offset = "0xB46260", VA = "0xB46260")]
		public VRTK_HeadsetCollision()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class VRTK_HeadsetCollider : MonoBehaviour
	{
		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_HeadsetCollision parent;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xB46274", Offset = "0xB46274", VA = "0xB46274", Slot = "4")]
		public virtual void SetParent(GameObject setParent)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xB462D8", Offset = "0xB462D8", VA = "0xB462D8", Slot = "5")]
		public virtual void SetIgnoreTarget([Optional] VRTK_PolicyList list)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xB462E0", Offset = "0xB462E0", VA = "0xB462E0", Slot = "6")]
		public virtual void EndCollision(Collider collider)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xB463E4", Offset = "0xB463E4", VA = "0xB463E4", Slot = "7")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xB46538", Offset = "0xB46538", VA = "0xB46538", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xB465E4", Offset = "0xB465E4", VA = "0xB465E4", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xB466AC", Offset = "0xB466AC", VA = "0xB466AC", Slot = "10")]
		protected virtual HeadsetCollisionEventArgs SetHeadsetCollisionEvent(Collider collider, Transform currentTransform)
		{
			return default(HeadsetCollisionEventArgs);
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xB466F4", Offset = "0xB466F4", VA = "0xB466F4", Slot = "11")]
		protected virtual bool ValidTarget(Transform target)
		{
			return default(bool);
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xB46794", Offset = "0xB46794", VA = "0xB46794")]
		public VRTK_HeadsetCollider()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_HeadsetCollisionFade")]
	public class VRTK_HeadsetCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Collision Fade Settings")]
		[Tooltip("The amount of time to wait until a fade occurs.")]
		public float timeTillFade;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The fade blink speed on collision.")]
		public float blinkTransitionSpeed;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The colour to fade the headset to on collision.")]
		public Color fadeColor;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether any objects will be acted upon by the Headset Collision Fade.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Custom Settings")]
		[Tooltip("The VRTK Headset Collision script to use when determining headset collisions. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetCollision headsetCollision;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRTK Headset Fade script to use when fading the headset. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetFade headsetFade;

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xB4679C", Offset = "0xB4679C", VA = "0xB4679C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xB46BA0", Offset = "0xB46BA0", VA = "0xB46BA0", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xB46C9C", Offset = "0xB46C9C", VA = "0xB46C9C", Slot = "6")]
		protected virtual void OnHeadsetCollisionDetect(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xB46D14", Offset = "0xB46D14", VA = "0xB46D14", Slot = "7")]
		protected virtual void OnHeadsetCollisionEnded(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xB46DA4", Offset = "0xB46DA4", VA = "0xB46DA4", Slot = "8")]
		protected virtual void StartFade()
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xB46DD4", Offset = "0xB46DD4", VA = "0xB46DD4", Slot = "9")]
		protected virtual bool ValidTarget(Collider target)
		{
			return default(bool);
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xB46E74", Offset = "0xB46E74", VA = "0xB46E74")]
		public VRTK_HeadsetCollisionFade()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public struct HeadsetControllerAwareEventArgs
	{
		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RaycastHit raycastHit;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerReference controllerReference;
	}
	[Token(Token = "0x20002CE")]
	public delegate void HeadsetControllerAwareEventHandler(object sender, HeadsetControllerAwareEventArgs e);
	[Token(Token = "0x20002CF")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_HeadsetControllerAware")]
	public class VRTK_HeadsetControllerAware : MonoBehaviour
	{
		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is checked then the left controller will be checked if items obscure it's path from the headset.")]
		public bool trackLeftController;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If this is checked then the right controller will be checked if items obscure it's path from the headset.")]
		public bool trackRightController;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The radius of the accepted distance from the controller origin point to determine if the controller is being looked at.")]
		public float controllerGlanceRadius;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A custom transform to provide the world space position of the right controller.")]
		public Transform customRightControllerOrigin;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A custom transform to provide the world space position of the left controller.")]
		public Transform customLeftControllerOrigin;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A custom raycaster to use when raycasting to find controllers.")]
		public VRTK_CustomRaycast customRaycast;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject leftController;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject rightController;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform headset;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftControllerObscured;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool rightControllerObscured;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool leftControllerLastState;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool rightControllerLastState;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected bool leftControllerGlance;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		protected bool rightControllerGlance;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		protected bool leftControllerGlanceLastState;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
		protected bool rightControllerGlanceLastState;

		[Token(Token = "0x140000D1")]
		public event HeadsetControllerAwareEventHandler ControllerObscured
		{
			[Token(Token = "0x600140D")]
			[Address(RVA = "0xB470B4", Offset = "0xB470B4", VA = "0xB470B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600140E")]
			[Address(RVA = "0xB47150", Offset = "0xB47150", VA = "0xB47150")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D2")]
		public event HeadsetControllerAwareEventHandler ControllerUnobscured
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0xB471EC", Offset = "0xB471EC", VA = "0xB471EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001410")]
			[Address(RVA = "0xB47288", Offset = "0xB47288", VA = "0xB47288")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D3")]
		public event HeadsetControllerAwareEventHandler ControllerGlanceEnter
		{
			[Token(Token = "0x6001411")]
			[Address(RVA = "0xB47324", Offset = "0xB47324", VA = "0xB47324")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001412")]
			[Address(RVA = "0xB473C0", Offset = "0xB473C0", VA = "0xB473C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D4")]
		public event HeadsetControllerAwareEventHandler ControllerGlanceExit
		{
			[Token(Token = "0x6001413")]
			[Address(RVA = "0xB4745C", Offset = "0xB4745C", VA = "0xB4745C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xB474F8", Offset = "0xB474F8", VA = "0xB474F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xB47594", Offset = "0xB47594", VA = "0xB47594", Slot = "4")]
		public virtual void OnControllerObscured(HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xB475F0", Offset = "0xB475F0", VA = "0xB475F0", Slot = "5")]
		public virtual void OnControllerUnobscured(HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xB4764C", Offset = "0xB4764C", VA = "0xB4764C", Slot = "6")]
		public virtual void OnControllerGlanceEnter(HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xB476A8", Offset = "0xB476A8", VA = "0xB476A8", Slot = "7")]
		public virtual void OnControllerGlanceExit(HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xB47704", Offset = "0xB47704", VA = "0xB47704", Slot = "8")]
		public virtual bool LeftControllerObscured()
		{
			return default(bool);
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xB4770C", Offset = "0xB4770C", VA = "0xB4770C", Slot = "9")]
		public virtual bool RightControllerObscured()
		{
			return default(bool);
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xB47714", Offset = "0xB47714", VA = "0xB47714", Slot = "10")]
		public virtual bool LeftControllerGlanced()
		{
			return default(bool);
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xB4771C", Offset = "0xB4771C", VA = "0xB4771C", Slot = "11")]
		public virtual bool RightControllerGlanced()
		{
			return default(bool);
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xB47724", Offset = "0xB47724", VA = "0xB47724", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xB4777C", Offset = "0xB4777C", VA = "0xB4777C", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xB47818", Offset = "0xB47818", VA = "0xB47818", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xB47840", Offset = "0xB47840", VA = "0xB47840", Slot = "15")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xB47898", Offset = "0xB47898", VA = "0xB47898", Slot = "16")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xB47944", Offset = "0xB47944", VA = "0xB47944", Slot = "17")]
		protected virtual HeadsetControllerAwareEventArgs SetHeadsetControllerAwareEvent(RaycastHit raycastHit, VRTK_ControllerReference controllerReference)
		{
			return default(HeadsetControllerAwareEventArgs);
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xB4799C", Offset = "0xB4799C", VA = "0xB4799C", Slot = "18")]
		protected virtual void RayCastToController(GameObject controller, Transform customDestination, ref bool obscured, ref bool lastState)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xB47BA8", Offset = "0xB47BA8", VA = "0xB47BA8", Slot = "19")]
		protected virtual void ObscuredStateChanged(GameObject controller, bool obscured, RaycastHit hitInfo)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xB47D1C", Offset = "0xB47D1C", VA = "0xB47D1C", Slot = "20")]
		protected virtual void CheckHeadsetView(GameObject controller, Transform customDestination, ref bool controllerGlance, ref bool controllerGlanceLastState)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xB47FBC", Offset = "0xB47FBC", VA = "0xB47FBC", Slot = "21")]
		protected virtual void GlanceStateChanged(GameObject controller, bool glance)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xB48118", Offset = "0xB48118", VA = "0xB48118")]
		public VRTK_HeadsetControllerAware()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public struct HeadsetFadeEventArgs
	{
		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timeTillComplete;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform currentTransform;
	}
	[Token(Token = "0x20002D1")]
	public delegate void HeadsetFadeEventHandler(object sender, HeadsetFadeEventArgs e);
	[Token(Token = "0x20002D2")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_HeadsetFade")]
	public class VRTK_HeadsetFade : MonoBehaviour
	{
		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform headset;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool isTransitioning;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		protected bool isFaded;

		[Token(Token = "0x140000D5")]
		public event HeadsetFadeEventHandler HeadsetFadeStart
		{
			[Token(Token = "0x600142C")]
			[Address(RVA = "0xB48328", Offset = "0xB48328", VA = "0xB48328")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600142D")]
			[Address(RVA = "0xB483C4", Offset = "0xB483C4", VA = "0xB483C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D6")]
		public event HeadsetFadeEventHandler HeadsetFadeComplete
		{
			[Token(Token = "0x600142E")]
			[Address(RVA = "0xB48460", Offset = "0xB48460", VA = "0xB48460")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600142F")]
			[Address(RVA = "0xB484FC", Offset = "0xB484FC", VA = "0xB484FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D7")]
		public event HeadsetFadeEventHandler HeadsetUnfadeStart
		{
			[Token(Token = "0x6001430")]
			[Address(RVA = "0xB48598", Offset = "0xB48598", VA = "0xB48598")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001431")]
			[Address(RVA = "0xB48634", Offset = "0xB48634", VA = "0xB48634")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000D8")]
		public event HeadsetFadeEventHandler HeadsetUnfadeComplete
		{
			[Token(Token = "0x6001432")]
			[Address(RVA = "0xB486D0", Offset = "0xB486D0", VA = "0xB486D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001433")]
			[Address(RVA = "0xB4876C", Offset = "0xB4876C", VA = "0xB4876C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xB48808", Offset = "0xB48808", VA = "0xB48808", Slot = "4")]
		public virtual void OnHeadsetFadeStart(HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xB48834", Offset = "0xB48834", VA = "0xB48834", Slot = "5")]
		public virtual void OnHeadsetFadeComplete(HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xB48860", Offset = "0xB48860", VA = "0xB48860", Slot = "6")]
		public virtual void OnHeadsetUnfadeStart(HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xB4888C", Offset = "0xB4888C", VA = "0xB4888C", Slot = "7")]
		public virtual void OnHeadsetUnfadeComplete(HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xB488B8", Offset = "0xB488B8", VA = "0xB488B8", Slot = "8")]
		public virtual bool IsFaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xB488C0", Offset = "0xB488C0", VA = "0xB488C0", Slot = "9")]
		public virtual bool IsTransitioning()
		{
			return default(bool);
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xB488C8", Offset = "0xB488C8", VA = "0xB488C8", Slot = "10")]
		public virtual void Fade(Color color, float duration)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xB489D4", Offset = "0xB489D4", VA = "0xB489D4", Slot = "11")]
		public virtual void Unfade(float duration)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xB48AC0", Offset = "0xB48AC0", VA = "0xB48AC0", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xB48B18", Offset = "0xB48B18", VA = "0xB48B18", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xB48B88", Offset = "0xB48B88", VA = "0xB48B88", Slot = "14")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xB48BE0", Offset = "0xB48BE0", VA = "0xB48BE0", Slot = "15")]
		protected virtual HeadsetFadeEventArgs SetHeadsetFadeEvent(Transform currentTransform, float duration)
		{
			return default(HeadsetFadeEventArgs);
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xB48C0C", Offset = "0xB48C0C", VA = "0xB48C0C", Slot = "16")]
		protected virtual void FadeComplete()
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xB48C58", Offset = "0xB48C58", VA = "0xB48C58", Slot = "17")]
		protected virtual void UnfadeComplete()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xB48CA0", Offset = "0xB48CA0", VA = "0xB48CA0")]
		public VRTK_HeadsetFade()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_HipTracking")]
	public class VRTK_HipTracking : MonoBehaviour
	{
		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Distance underneath Player Head for hips to reside.")]
		public float HeadOffset;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional Transform to use as the Head Object for calculating hip position. If none is given one will try to be found in the scene.")]
		[Header("Optional")]
		public Transform headOverride;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Optional Transform to use for calculating which way is 'Up' relative to the player for hip positioning.")]
		public Transform ReferenceUp;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform playerHead;

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xB48CA8", Offset = "0xB48CA8", VA = "0xB48CA8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xB48D00", Offset = "0xB48D00", VA = "0xB48D00", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xB48DA8", Offset = "0xB48DA8", VA = "0xB48DA8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xB48E00", Offset = "0xB48E00", VA = "0xB48E00", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xB491AC", Offset = "0xB491AC", VA = "0xB491AC")]
		public VRTK_HipTracking()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public struct PositionRewindEventArgs
	{
		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 collidedPosition;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 resetPosition;
	}
	[Token(Token = "0x20002D5")]
	public delegate void PositionRewindEventHandler(object sender, PositionRewindEventArgs e);
	[Token(Token = "0x20002D6")]
	[AddComponentMenu("VRTK/Scripts/Presence/VRTK_PositionRewind")]
	public class VRTK_PositionRewind : MonoBehaviour
	{
		[Token(Token = "0x20002D7")]
		public enum CollisionDetectors
		{
			[Token(Token = "0x4001256")]
			HeadsetOnly,
			[Token(Token = "0x4001257")]
			BodyOnly,
			[Token(Token = "0x4001258")]
			HeadsetAndBody
		}

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The colliders to determine if a collision has occured for the rewind to be actioned.")]
		[Header("Rewind Settings")]
		public CollisionDetectors collisionDetector;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If this is checked then the collision detector will ignore colliders set to `Is Trigger = true`.")]
		public bool ignoreTriggerColliders;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time from original headset collision until the rewind to the last good known position takes place.")]
		public float rewindDelay;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The additional distance to push the play area back upon rewind to prevent being right next to the wall again.")]
		public float pushbackDistance;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The threshold to determine how low the headset has to be before it is considered the user is crouching. The last good position will only be recorded in a non-crouching position.")]
		public float crouchThreshold;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The threshold to determind how low the headset can be to perform a position rewind. If the headset Y position is lower than this threshold then a rewind won't occur.")]
		public float crouchRewindThreshold;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A specified VRTK_PolicyList to use to determine whether any objects will be acted upon by the Position Rewind.")]
		public VRTK_PolicyList targetListPolicy;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The VRTK Body Physics script to use for the collisions and rigidbodies. If this is left blank then the first Body Physics script found in the scene will be used.")]
		[Header("Custom Settings")]
		public VRTK_BodyPhysics bodyPhysics;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRTK Headset Collision script to use to determine if the headset is colliding. If this is left blank then the script will need to be applied to the same GameObject.")]
		public VRTK_HeadsetCollision headsetCollision;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform headset;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Transform playArea;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3 lastGoodStandingPosition;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 lastGoodHeadsetPosition;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float highestHeadsetY;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float lastPlayAreaY;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool lastGoodPositionSet;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		protected bool hasCollided;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		protected bool isColliding;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		protected bool isRewinding;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float collideTimer;

		[Token(Token = "0x140000D9")]
		public event PositionRewindEventHandler PositionRewindToSafe
		{
			[Token(Token = "0x600144C")]
			[Address(RVA = "0xB493DC", Offset = "0xB493DC", VA = "0xB493DC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600144D")]
			[Address(RVA = "0xB49478", Offset = "0xB49478", VA = "0xB49478")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xB49514", Offset = "0xB49514", VA = "0xB49514", Slot = "4")]
		public virtual void OnPositionRewindToSafe(PositionRewindEventArgs e)
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xB49564", Offset = "0xB49564", VA = "0xB49564", Slot = "5")]
		public virtual void SetLastGoodPosition()
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xB49630", Offset = "0xB49630", VA = "0xB49630", Slot = "6")]
		public virtual void RewindPosition()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xB49890", Offset = "0xB49890", VA = "0xB49890", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xB498E8", Offset = "0xB498E8", VA = "0xB498E8", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xB49A70", Offset = "0xB49A70", VA = "0xB49A70", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xB49A84", Offset = "0xB49A84", VA = "0xB49A84", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xB49ADC", Offset = "0xB49ADC", VA = "0xB49ADC", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xB49B3C", Offset = "0xB49B3C", VA = "0xB49B3C", Slot = "12")]
		protected virtual PositionRewindEventArgs SetEventPayload(Vector3 previousPosition)
		{
			return default(PositionRewindEventArgs);
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xB49B88", Offset = "0xB49B88", VA = "0xB49B88", Slot = "13")]
		protected virtual bool CrouchThresholdReached()
		{
			return default(bool);
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xB49BF4", Offset = "0xB49BF4", VA = "0xB49BF4", Slot = "14")]
		protected virtual void SetHighestHeadsetY()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xB49C58", Offset = "0xB49C58", VA = "0xB49C58", Slot = "15")]
		protected virtual void UpdateLastGoodPosition()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xB49CC8", Offset = "0xB49CC8", VA = "0xB49CC8", Slot = "16")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xB49D68", Offset = "0xB49D68", VA = "0xB49D68", Slot = "17")]
		protected virtual void StartCollision(GameObject target, Collider collider)
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xB49DE4", Offset = "0xB49DE4", VA = "0xB49DE4", Slot = "18")]
		protected virtual void EndCollision(Collider collider)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xB49E74", Offset = "0xB49E74", VA = "0xB49E74", Slot = "19")]
		protected virtual bool BodyCollisionsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xB49EFC", Offset = "0xB49EFC", VA = "0xB49EFC", Slot = "20")]
		protected virtual bool CanRewind()
		{
			return default(bool);
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xB49FB4", Offset = "0xB49FB4", VA = "0xB49FB4", Slot = "21")]
		protected virtual void DoPositionRewind()
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xB49FF4", Offset = "0xB49FF4", VA = "0xB49FF4", Slot = "22")]
		protected virtual bool HeadsetListen()
		{
			return default(bool);
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xB4A004", Offset = "0xB4A004", VA = "0xB4A004", Slot = "23")]
		protected virtual bool BodyListen()
		{
			return default(bool);
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xB4A018", Offset = "0xB4A018", VA = "0xB4A018", Slot = "24")]
		protected virtual void ManageListeners(bool state)
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xB4A360", Offset = "0xB4A360", VA = "0xB4A360")]
		private void StartColliding(object sender, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xB4A37C", Offset = "0xB4A37C", VA = "0xB4A37C")]
		private void StopColliding(object sender, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xB4A390", Offset = "0xB4A390", VA = "0xB4A390", Slot = "25")]
		protected virtual void HeadsetCollisionDetect(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xB4A3D8", Offset = "0xB4A3D8", VA = "0xB4A3D8", Slot = "26")]
		protected virtual void HeadsetCollisionEnded(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xB4A3F0", Offset = "0xB4A3F0", VA = "0xB4A3F0")]
		public VRTK_PositionRewind()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[AddComponentMenu("VRTK/Scripts/UI/VRTK_UICanvas")]
	public class VRTK_UICanvas : MonoBehaviour
	{
		[Token(Token = "0x20002D9")]
		[CompilerGenerated]
		private sealed class <CreateDraggablePanel>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Canvas canvas;

			[Token(Token = "0x4001263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2 canvasSize;

			[Token(Token = "0x1700017D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001475")]
				[Address(RVA = "0xB4B87C", Offset = "0xB4B87C", VA = "0xB4B87C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001477")]
				[Address(RVA = "0xB4B8C4", Offset = "0xB4B8C4", VA = "0xB4B8C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001472")]
			[Address(RVA = "0xB4B438", Offset = "0xB4B438", VA = "0xB4B438")]
			[DebuggerHidden]
			public <CreateDraggablePanel>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001473")]
			[Address(RVA = "0xB4B460", Offset = "0xB4B460", VA = "0xB4B460", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001474")]
			[Address(RVA = "0xB4B464", Offset = "0xB4B464", VA = "0xB4B464", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001476")]
			[Address(RVA = "0xB4B884", Offset = "0xB4B884", VA = "0xB4B884", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines if a UI Click action should happen when a UI Pointer game object collides with this canvas.")]
		public bool clickOnPointerCollision;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines if a UI Pointer will be auto activated if a UI Pointer game object comes within the given distance of this canvas. If a value of `0` is given then no auto activation will occur.")]
		public float autoActivateWithinDistance;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected BoxCollider canvasBoxCollider;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody canvasRigidBody;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Coroutine draggablePanelCreation;

		[Token(Token = "0x400125E")]
		protected const string CANVAS_DRAGGABLE_PANEL = "VRTK_UICANVAS_DRAGGABLE_PANEL";

		[Token(Token = "0x400125F")]
		protected const string ACTIVATOR_FRONT_TRIGGER_GAMEOBJECT = "VRTK_UICANVAS_ACTIVATOR_FRONT_TRIGGER";

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xB4A404", Offset = "0xB4A404", VA = "0xB4A404", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xB4A410", Offset = "0xB4A410", VA = "0xB4A410", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xB4A41C", Offset = "0xB4A41C", VA = "0xB4A41C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xB4A428", Offset = "0xB4A428", VA = "0xB4A428", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xB4A52C", Offset = "0xB4A52C", VA = "0xB4A52C", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xB4A5C8", Offset = "0xB4A5C8", VA = "0xB4A5C8", Slot = "9")]
		protected virtual void SetupCanvas()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xB4ACB0", Offset = "0xB4ACB0", VA = "0xB4ACB0", Slot = "10")]
		[IteratorStateMachine(typeof(<CreateDraggablePanel>d__13))]
		protected virtual IEnumerator CreateDraggablePanel(Canvas canvas, Vector2 canvasSize)
		{
			return null;
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xB4AD38", Offset = "0xB4AD38", VA = "0xB4AD38", Slot = "11")]
		protected virtual void CreateActivator(Canvas canvas, Vector2 canvasSize)
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xB4B0D8", Offset = "0xB4B0D8", VA = "0xB4B0D8", Slot = "12")]
		protected virtual void RemoveCanvas()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xB4B430", Offset = "0xB4B430", VA = "0xB4B430")]
		public VRTK_UICanvas()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class VRTK_UIPointerAutoActivator : MonoBehaviour
	{
		[Token(Token = "0x6001478")]
		[Address(RVA = "0xB4B8CC", Offset = "0xB4B8CC", VA = "0xB4B8CC", Slot = "4")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xB4B9F0", Offset = "0xB4B9F0", VA = "0xB4B9F0", Slot = "5")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xB4BAEC", Offset = "0xB4BAEC", VA = "0xB4BAEC")]
		public VRTK_UIPointerAutoActivator()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public struct UIDraggableItemEventArgs
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject target;
	}
	[Token(Token = "0x20002DC")]
	public delegate void UIDraggableItemEventHandler(object sender, UIDraggableItemEventArgs e);
	[Token(Token = "0x20002DD")]
	[AddComponentMenu("VRTK/Scripts/UI/VRTK_UIDraggableItem")]
	[RequireComponent(typeof(CanvasGroup))]
	public class VRTK_UIDraggableItem : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
	{
		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If checked then the UI element can only be dropped in valid a VRTK_UIDropZone object and must start as a child of a VRTK_UIDropZone object. If unchecked then the UI element can be dropped anywhere on the canvas.")]
		public bool restrictToDropZone;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If checked then the UI element can only be dropped on the original parent canvas. If unchecked the UI element can be dropped on any valid VRTK_UICanvas.")]
		public bool restrictToOriginalCanvas;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The offset to bring the UI element forward when it is being dragged.")]
		public float forwardOffset;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public GameObject validDropZone;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RectTransform dragTransform;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 startPosition;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Quaternion startRotation;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject startDropZone;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform startParent;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Canvas startCanvas;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected CanvasGroup canvasGroup;

		[Token(Token = "0x140000DA")]
		public event UIDraggableItemEventHandler DraggableItemDropped
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0xB4BCE4", Offset = "0xB4BCE4", VA = "0xB4BCE4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001480")]
			[Address(RVA = "0xB4BD80", Offset = "0xB4BD80", VA = "0xB4BD80")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000DB")]
		public event UIDraggableItemEventHandler DraggableItemReset
		{
			[Token(Token = "0x6001481")]
			[Address(RVA = "0xB4BE1C", Offset = "0xB4BE1C", VA = "0xB4BE1C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001482")]
			[Address(RVA = "0xB4BEB8", Offset = "0xB4BEB8", VA = "0xB4BEB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xB4BF54", Offset = "0xB4BF54", VA = "0xB4BF54", Slot = "7")]
		public virtual void OnDraggableItemDropped(UIDraggableItemEventArgs e)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xB4BF7C", Offset = "0xB4BF7C", VA = "0xB4BF7C", Slot = "8")]
		public virtual void OnDraggableItemReset(UIDraggableItemEventArgs e)
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xB4BFA4", Offset = "0xB4BFA4", VA = "0xB4BFA4", Slot = "9")]
		public virtual void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xB4C1F8", Offset = "0xB4C1F8", VA = "0xB4C1F8", Slot = "10")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xB4C208", Offset = "0xB4C208", VA = "0xB4C208", Slot = "11")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xB4C5F8", Offset = "0xB4C5F8", VA = "0xB4C5F8", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xB4C8C0", Offset = "0xB4C8C0", VA = "0xB4C8C0", Slot = "13")]
		protected virtual VRTK_UIPointer GetPointer(PointerEventData eventData)
		{
			return null;
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xB4C9A8", Offset = "0xB4C9A8", VA = "0xB4C9A8", Slot = "14")]
		protected virtual void SetDragPosition(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xB4CC14", Offset = "0xB4CC14", VA = "0xB4CC14", Slot = "15")]
		protected virtual void ResetElement()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xB4CCB8", Offset = "0xB4CCB8", VA = "0xB4CCB8", Slot = "16")]
		protected virtual UIDraggableItemEventArgs SetEventPayload(GameObject target)
		{
			return default(UIDraggableItemEventArgs);
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xB4CCD4", Offset = "0xB4CCD4", VA = "0xB4CCD4")]
		public VRTK_UIDraggableItem()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[AddComponentMenu("VRTK/Scripts/UI/VRTK_UIDropZone")]
	public class VRTK_UIDropZone : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_UIDraggableItem droppableItem;

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xB4CCE8", Offset = "0xB4CCE8", VA = "0xB4CCE8", Slot = "6")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xB4CDF8", Offset = "0xB4CDF8", VA = "0xB4CDF8", Slot = "7")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xB4CE84", Offset = "0xB4CE84", VA = "0xB4CE84")]
		public VRTK_UIDropZone()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public struct UIPointerEventArgs
	{
		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isActive;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject currentTarget;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject previousTarget;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RaycastResult raycastResult;
	}
	[Token(Token = "0x20002E0")]
	public delegate void UIPointerEventHandler(object sender, UIPointerEventArgs e);
	[Token(Token = "0x20002E1")]
	[AddComponentMenu("VRTK/Scripts/UI/VRTK_UIPointer")]
	public class VRTK_UIPointer : MonoBehaviour
	{
		[Token(Token = "0x20002E2")]
		public enum ActivationMethods
		{
			[Token(Token = "0x400129F")]
			HoldButton,
			[Token(Token = "0x40012A0")]
			ToggleButton,
			[Token(Token = "0x40012A1")]
			AlwaysOn
		}

		[Token(Token = "0x20002E3")]
		public enum ClickMethods
		{
			[Token(Token = "0x40012A3")]
			ClickOnButtonUp,
			[Token(Token = "0x40012A4")]
			ClickOnButtonDown
		}

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The button used to activate/deactivate the UI raycast for the pointer.")]
		[Header("Activation Settings")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines when the UI pointer should be active.")]
		public ActivationMethods activationMode;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Selection Settings")]
		[Tooltip("The button used to execute the select action at the pointer's target position.")]
		public VRTK_ControllerEvents.ButtonAlias selectionButton;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Determines when the UI Click event action should happen.")]
		public ClickMethods clickMethod;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Determines whether the UI click action should be triggered when the pointer is deactivated. If the pointer is hovering over a clickable element then it will invoke the click action on that element. Note: Only works with `Click Method =  Click_On_Button_Up`")]
		public bool attemptClickOnDeactivate;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The amount of time the pointer can be over the same UI element before it automatically attempts to click it. 0f means no click attempt will be made.")]
		public float clickAfterHoverDuration;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Customisation Settings")]
		[Tooltip("The maximum length the UI Raycast will reach.")]
		public float maximumLength;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("An optional GameObject that determines what the pointer is to be attached to. If this is left blank then the GameObject the script is on will be used.")]
		public GameObject attachedTo;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Controller Events that will be used to toggle the pointer. If the script is being applied onto a controller then this parameter can be left blank as it will be auto populated by the controller the script is on at runtime.")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("A custom transform to use as the origin of the pointer. If no pointer origin transform is provided then the transform the script is attached to is used.")]
		public Transform customOrigin;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Obsolete Settings")]
		[Obsolete("`VRTK_UIPointer.controller` has been replaced with `VRTK_UIPointer.controllerEvents`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public VRTK_ControllerEvents controller;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Obsolete("`VRTK_UIPointer.pointerOriginTransform` has been replaced with `VRTK_UIPointer.customOrigin`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public Transform pointerOriginTransform;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public PointerEventData pointerEventData;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GameObject hoveringElement;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public GameObject controllerRenderModel;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float hoverDurationTimer;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public bool canClickOnHover;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public GameObject autoActivatingCanvas;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public bool collisionClick;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Dictionary<int, float> pointerLengths;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool pointerClicked;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool beamEnabledState;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool lastPointerPressState;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		protected bool lastPointerClickState;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject currentTarget;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected SDK_BaseController.ControllerHand cachedAttachedHand;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Transform cachedPointerAttachPoint;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected EventSystem cachedEventSystem;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected VRTK_VRInputModule cachedVRInputModule;

		[Token(Token = "0x140000DC")]
		public event ControllerInteractionEventHandler ActivationButtonPressed
		{
			[Token(Token = "0x6001495")]
			[Address(RVA = "0xB4D0C8", Offset = "0xB4D0C8", VA = "0xB4D0C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001496")]
			[Address(RVA = "0xB4D164", Offset = "0xB4D164", VA = "0xB4D164")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000DD")]
		public event ControllerInteractionEventHandler ActivationButtonReleased
		{
			[Token(Token = "0x6001497")]
			[Address(RVA = "0xB4D200", Offset = "0xB4D200", VA = "0xB4D200")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001498")]
			[Address(RVA = "0xB4D29C", Offset = "0xB4D29C", VA = "0xB4D29C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000DE")]
		public event ControllerInteractionEventHandler SelectionButtonPressed
		{
			[Token(Token = "0x6001499")]
			[Address(RVA = "0xB4D338", Offset = "0xB4D338", VA = "0xB4D338")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600149A")]
			[Address(RVA = "0xB4D3D4", Offset = "0xB4D3D4", VA = "0xB4D3D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000DF")]
		public event ControllerInteractionEventHandler SelectionButtonReleased
		{
			[Token(Token = "0x600149B")]
			[Address(RVA = "0xB4D470", Offset = "0xB4D470", VA = "0xB4D470")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600149C")]
			[Address(RVA = "0xB4D50C", Offset = "0xB4D50C", VA = "0xB4D50C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E0")]
		public event UIPointerEventHandler UIPointerElementEnter
		{
			[Token(Token = "0x600149D")]
			[Address(RVA = "0xB4D5A8", Offset = "0xB4D5A8", VA = "0xB4D5A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600149E")]
			[Address(RVA = "0xB4D644", Offset = "0xB4D644", VA = "0xB4D644")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E1")]
		public event UIPointerEventHandler UIPointerElementExit
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0xB4D6E0", Offset = "0xB4D6E0", VA = "0xB4D6E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0xB4D77C", Offset = "0xB4D77C", VA = "0xB4D77C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E2")]
		public event UIPointerEventHandler UIPointerElementClick
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0xB4D818", Offset = "0xB4D818", VA = "0xB4D818")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0xB4D8B4", Offset = "0xB4D8B4", VA = "0xB4D8B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E3")]
		public event UIPointerEventHandler UIPointerElementDragStart
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0xB4D950", Offset = "0xB4D950", VA = "0xB4D950")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0xB4D9EC", Offset = "0xB4D9EC", VA = "0xB4D9EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E4")]
		public event UIPointerEventHandler UIPointerElementDragEnd
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0xB4DA88", Offset = "0xB4DA88", VA = "0xB4DA88")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0xB4DB24", Offset = "0xB4DB24", VA = "0xB4DB24")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xB4DBC0", Offset = "0xB4DBC0", VA = "0xB4DBC0")]
		public static float GetPointerLength(int pointerId)
		{
			return default(float);
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xB4DC44", Offset = "0xB4DC44", VA = "0xB4DC44", Slot = "4")]
		public virtual void OnUIPointerElementEnter(UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xB4DD5C", Offset = "0xB4DD5C", VA = "0xB4DD5C", Slot = "5")]
		public virtual void OnUIPointerElementExit(UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xB4DE88", Offset = "0xB4DE88", VA = "0xB4DE88", Slot = "6")]
		public virtual void OnUIPointerElementClick(UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xB4DF60", Offset = "0xB4DF60", VA = "0xB4DF60", Slot = "7")]
		public virtual void OnUIPointerElementDragStart(UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xB4DFC8", Offset = "0xB4DFC8", VA = "0xB4DFC8", Slot = "8")]
		public virtual void OnUIPointerElementDragEnd(UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xB4E030", Offset = "0xB4E030", VA = "0xB4E030", Slot = "9")]
		public virtual void OnActivationButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xB4E080", Offset = "0xB4E080", VA = "0xB4E080", Slot = "10")]
		public virtual void OnActivationButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xB4E0D0", Offset = "0xB4E0D0", VA = "0xB4E0D0", Slot = "11")]
		public virtual void OnSelectionButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xB4E120", Offset = "0xB4E120", VA = "0xB4E120", Slot = "12")]
		public virtual void OnSelectionButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xB4E170", Offset = "0xB4E170", VA = "0xB4E170", Slot = "13")]
		public virtual UIPointerEventArgs SetUIPointerEvent(RaycastResult currentRaycastResult, GameObject currentTarget, [Optional] GameObject lastTarget)
		{
			return default(UIPointerEventArgs);
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xB4E254", Offset = "0xB4E254", VA = "0xB4E254", Slot = "14")]
		public virtual VRTK_VRInputModule SetEventSystem(EventSystem eventSystem)
		{
			return null;
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xB4E48C", Offset = "0xB4E48C", VA = "0xB4E48C", Slot = "15")]
		public virtual void RemoveEventSystem()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xB4E658", Offset = "0xB4E658", VA = "0xB4E658", Slot = "16")]
		public virtual bool PointerActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xB4E798", Offset = "0xB4E798", VA = "0xB4E798", Slot = "17")]
		public virtual bool IsActivationButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xB4E82C", Offset = "0xB4E82C", VA = "0xB4E82C", Slot = "18")]
		public virtual bool IsSelectionButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xB4E8C0", Offset = "0xB4E8C0", VA = "0xB4E8C0", Slot = "19")]
		public virtual bool ValidClick(bool checkLastClick, bool lastClickState = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xB4E944", Offset = "0xB4E944", VA = "0xB4E944", Slot = "20")]
		public virtual Vector3 GetOriginPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xB4E9D8", Offset = "0xB4E9D8", VA = "0xB4E9D8", Slot = "21")]
		public virtual Vector3 GetOriginForward()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xB4EA6C", Offset = "0xB4EA6C", VA = "0xB4EA6C", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xB4EB84", Offset = "0xB4EB84", VA = "0xB4EB84", Slot = "23")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xB4EEF4", Offset = "0xB4EEF4", VA = "0xB4EEF4", Slot = "24")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xB4F150", Offset = "0xB4F150", VA = "0xB4F150", Slot = "25")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xB4F25C", Offset = "0xB4F25C", VA = "0xB4F25C", Slot = "26")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xB4F434", Offset = "0xB4F434", VA = "0xB4F434", Slot = "27")]
		protected virtual void DoActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xB4F49C", Offset = "0xB4F49C", VA = "0xB4F49C", Slot = "28")]
		protected virtual void DoActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xB4F504", Offset = "0xB4F504", VA = "0xB4F504", Slot = "29")]
		protected virtual void DoSelectionButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xB4F5CC", Offset = "0xB4F5CC", VA = "0xB4F5CC", Slot = "30")]
		protected virtual void DoSelectionButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xB4F634", Offset = "0xB4F634", VA = "0xB4F634", Slot = "31")]
		protected virtual VRTK_ControllerReference GetControllerReference([Optional] GameObject reference)
		{
			return null;
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xB4F710", Offset = "0xB4F710", VA = "0xB4F710", Slot = "32")]
		protected virtual Transform GetPointerOriginTransform()
		{
			return null;
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xB4F8AC", Offset = "0xB4F8AC", VA = "0xB4F8AC", Slot = "33")]
		protected virtual void ResetHoverTimer()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xB4F8B8", Offset = "0xB4F8B8", VA = "0xB4F8B8", Slot = "34")]
		protected virtual void ConfigureEventSystem()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xB4FB2C", Offset = "0xB4FB2C", VA = "0xB4FB2C")]
		public VRTK_UIPointer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E4")]
	public class VRTK_ControllerElementHighlighters
	{
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The highlighter to use on the overall shape of the controller.")]
		public VRTK_BaseHighlighter body;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The highlighter to use on the trigger button.")]
		public VRTK_BaseHighlighter trigger;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The highlighter to use on the left grip button.")]
		public VRTK_BaseHighlighter gripLeft;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The highlighter to use on the right grip button.")]
		public VRTK_BaseHighlighter gripRight;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The highlighter to use on the touchpad.")]
		public VRTK_BaseHighlighter touchpad;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The highlighter to use on the touchpad two.")]
		public VRTK_BaseHighlighter touchpadTwo;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The highlighter to use on button one.")]
		public VRTK_BaseHighlighter buttonOne;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The highlighter to use on button two.")]
		public VRTK_BaseHighlighter buttonTwo;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The highlighter to use on the system menu button.")]
		public VRTK_BaseHighlighter systemMenu;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The highlighter to use on the start menu button.")]
		public VRTK_BaseHighlighter startMenu;

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xB4FBE4", Offset = "0xB4FBE4", VA = "0xB4FBE4")]
		public VRTK_ControllerElementHighlighters()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E5")]
	public class VRTK_ControllerModelElementPaths
	{
		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The overall shape of the controller.")]
		public string bodyModelPath;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The model that represents the trigger button.")]
		public string triggerModelPath;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The model that represents the left grip button.")]
		public string leftGripModelPath;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The model that represents the right grip button.")]
		public string rightGripModelPath;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The model that represents the touchpad.")]
		public string touchpadModelPath;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The model that represents the touchpad two.")]
		public string touchpadTwoModelPath;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The model that represents button one.")]
		public string buttonOneModelPath;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The model that represents button two.")]
		public string buttonTwoModelPath;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The model that represents the system menu button.")]
		public string systemMenuModelPath;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The model that represents the start menu button.")]
		public string startMenuModelPath;

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xB4FBEC", Offset = "0xB4FBEC", VA = "0xB4FBEC")]
		public VRTK_ControllerModelElementPaths()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public abstract class VRTK_ObjectFollow : MonoBehaviour
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Object Settings")]
		[Tooltip("The game object to follow. The followed property values will be taken from this one.")]
		public GameObject gameObjectToFollow;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The game object to change the property values of. If left empty the game object this script is attached to will be changed.")]
		public GameObject gameObjectToChange;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Position Settings")]
		[Tooltip("Whether to follow the position of the given game object.")]
		public bool followsPosition;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Whether to smooth the position when following `gameObjectToFollow`.")]
		public bool smoothsPosition;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The maximum allowed distance between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
		public float maxAllowedPerFrameDistanceDifference;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Rotation Settings")]
		[Tooltip("Whether to follow the rotation of the given game object.")]
		public bool followsRotation;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("Whether to smooth the rotation when following `gameObjectToFollow`.")]
		public bool smoothsRotation;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The maximum allowed angle between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
		public float maxAllowedPerFrameAngleDifference;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Whether to follow the scale of the given game object.")]
		[Header("Scale Settings")]
		public bool followsScale;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Whether to smooth the scale when following `gameObjectToFollow`.")]
		public bool smoothsScale;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum allowed size between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
		public float maxAllowedPerFrameSizeDifference;

		[Token(Token = "0x1700017F")]
		public Vector3 targetPosition
		{
			[Token(Token = "0x60014CB")]
			[Address(RVA = "0xB4FCD4", Offset = "0xB4FCD4", VA = "0xB4FCD4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60014CC")]
			[Address(RVA = "0xB4FCE0", Offset = "0xB4FCE0", VA = "0xB4FCE0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public Quaternion targetRotation
		{
			[Token(Token = "0x60014CD")]
			[Address(RVA = "0xB4FCEC", Offset = "0xB4FCEC", VA = "0xB4FCEC")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60014CE")]
			[Address(RVA = "0xB4FCF8", Offset = "0xB4FCF8", VA = "0xB4FCF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public Vector3 targetScale
		{
			[Token(Token = "0x60014CF")]
			[Address(RVA = "0xB4FD04", Offset = "0xB4FD04", VA = "0xB4FD04")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60014D0")]
			[Address(RVA = "0xB4FD10", Offset = "0xB4FD10", VA = "0xB4FD10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xB4FD1C", Offset = "0xB4FD1C", VA = "0xB4FD1C", Slot = "4")]
		public virtual void Follow()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xB4FDE0", Offset = "0xB4FDE0", VA = "0xB4FDE0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xB4FE74", Offset = "0xB4FE74", VA = "0xB4FE74", Slot = "6")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x60014D4")]
		protected abstract Vector3 GetPositionToFollow();

		[Token(Token = "0x60014D5")]
		protected abstract void SetPositionOnGameObject(Vector3 newPosition);

		[Token(Token = "0x60014D6")]
		protected abstract Quaternion GetRotationToFollow();

		[Token(Token = "0x60014D7")]
		protected abstract void SetRotationOnGameObject(Quaternion newRotation);

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xB4FEA4", Offset = "0xB4FEA4", VA = "0xB4FEA4", Slot = "11")]
		protected virtual Vector3 GetScaleToFollow()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xB4FECC", Offset = "0xB4FECC", VA = "0xB4FECC", Slot = "12")]
		protected virtual void SetScaleOnGameObject(Vector3 newScale)
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xB4FF1C", Offset = "0xB4FF1C", VA = "0xB4FF1C", Slot = "13")]
		protected virtual void FollowPosition()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xB50050", Offset = "0xB50050", VA = "0xB50050", Slot = "14")]
		protected virtual void FollowRotation()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xB50184", Offset = "0xB50184", VA = "0xB50184", Slot = "15")]
		protected virtual void FollowScale()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xB502B8", Offset = "0xB502B8", VA = "0xB502B8")]
		protected VRTK_ObjectFollow()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Object Follow/VRTK_RigidbodyFollow")]
	public class VRTK_RigidbodyFollow : VRTK_ObjectFollow
	{
		[Token(Token = "0x20002E8")]
		public enum MovementOption
		{
			[Token(Token = "0x40012CD")]
			Set,
			[Token(Token = "0x40012CE")]
			Move,
			[Token(Token = "0x40012CF")]
			Add,
			[Token(Token = "0x40012D0")]
			Track
		}

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Follow Settings")]
		[Tooltip("Specifies how to position and rotate the rigidbody.")]
		public MovementOption movementOption;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The maximum distance the tracked `Game Object To Change` Rigidbody can be from the `Game Object To Follow` Rigidbody before the position is forcibly set to match the position.")]
		[Header("Track Movement Settings")]
		public float trackMaxDistance;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Rigidbody rigidbodyToFollow;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody rigidbodyToChange;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected float maxDistanceDelta;

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xB502E8", Offset = "0xB502E8", VA = "0xB502E8", Slot = "4")]
		public override void Follow()
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xB5030C", Offset = "0xB5030C", VA = "0xB5030C", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xB50334", Offset = "0xB50334", VA = "0xB50334", Slot = "17")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xB50340", Offset = "0xB50340", VA = "0xB50340", Slot = "18")]
		protected virtual void CacheRigidbodies()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xB50490", Offset = "0xB50490", VA = "0xB50490", Slot = "7")]
		protected override Vector3 GetPositionToFollow()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xB50548", Offset = "0xB50548", VA = "0xB50548", Slot = "9")]
		protected override Quaternion GetRotationToFollow()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xB50600", Offset = "0xB50600", VA = "0xB50600", Slot = "11")]
		protected override Vector3 GetScaleToFollow()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xB506C4", Offset = "0xB506C4", VA = "0xB506C4", Slot = "8")]
		protected override void SetPositionOnGameObject(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xB507C4", Offset = "0xB507C4", VA = "0xB507C4", Slot = "10")]
		protected override void SetRotationOnGameObject(Quaternion newRotation)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xB50918", Offset = "0xB50918", VA = "0xB50918", Slot = "19")]
		protected virtual void TrackPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xB50BF4", Offset = "0xB50BF4", VA = "0xB50BF4", Slot = "20")]
		protected virtual void TrackRotation(Quaternion newRotation)
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xB50E7C", Offset = "0xB50E7C", VA = "0xB50E7C")]
		public VRTK_RigidbodyFollow()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Object Follow/VRTK_TransformFollow")]
	public class VRTK_TransformFollow : VRTK_ObjectFollow
	{
		[Token(Token = "0x20002EA")]
		public enum FollowMoment
		{
			[Token(Token = "0x40012D5")]
			OnFixedUpdate,
			[Token(Token = "0x40012D6")]
			OnUpdate,
			[Token(Token = "0x40012D7")]
			OnLateUpdate,
			[Token(Token = "0x40012D8")]
			OnPreRender,
			[Token(Token = "0x40012D9")]
			OnPreCull
		}

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Follow Settings")]
		[Tooltip("The moment at which to follow.")]
		[SerializeField]
		private FollowMoment _moment;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Transform transformToFollow;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Transform transformToChange;

		[Token(Token = "0x17000182")]
		public FollowMoment moment
		{
			[Token(Token = "0x60014EA")]
			[Address(RVA = "0xB50EBC", Offset = "0xB50EBC", VA = "0xB50EBC")]
			get
			{
				return default(FollowMoment);
			}
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0xB50EC4", Offset = "0xB50EC4", VA = "0xB50EC4")]
			set
			{
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xB511C8", Offset = "0xB511C8", VA = "0xB511C8", Slot = "4")]
		public override void Follow()
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xB511EC", Offset = "0xB511EC", VA = "0xB511EC", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xB51390", Offset = "0xB51390", VA = "0xB51390", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xB51524", Offset = "0xB51524", VA = "0xB51524")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xB5153C", Offset = "0xB5153C", VA = "0xB5153C")]
		protected void Update()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xB51558", Offset = "0xB51558", VA = "0xB51558", Slot = "17")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xB51574", Offset = "0xB51574", VA = "0xB51574", Slot = "18")]
		protected virtual void OnCamPreRender(Camera cam)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xB51628", Offset = "0xB51628", VA = "0xB51628", Slot = "19")]
		protected virtual void OnCamPreCull(Camera cam)
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xB516DC", Offset = "0xB516DC", VA = "0xB516DC", Slot = "7")]
		protected override Vector3 GetPositionToFollow()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xB516F8", Offset = "0xB516F8", VA = "0xB516F8", Slot = "8")]
		protected override void SetPositionOnGameObject(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xB51714", Offset = "0xB51714", VA = "0xB51714", Slot = "9")]
		protected override Quaternion GetRotationToFollow()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xB51730", Offset = "0xB51730", VA = "0xB51730", Slot = "10")]
		protected override void SetRotationOnGameObject(Quaternion newRotation)
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xB5174C", Offset = "0xB5174C", VA = "0xB5174C", Slot = "20")]
		protected virtual void CacheTransforms()
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xB51888", Offset = "0xB51888", VA = "0xB51888")]
		public VRTK_TransformFollow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EB")]
	public sealed class VRTK_SDKInfo : ISerializationCallbackReceiver
	{
		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string baseTypeName;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string fallbackTypeName;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string typeName;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int descriptionIndex;

		[Token(Token = "0x17000183")]
		public Type type
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xB518C0", Offset = "0xB518C0", VA = "0xB518C0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014FB")]
			[Address(RVA = "0xB518C8", Offset = "0xB518C8", VA = "0xB518C8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public string originalTypeNameWhenFallbackIsUsed
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xB518D0", Offset = "0xB518D0", VA = "0xB518D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0xB518D8", Offset = "0xB518D8", VA = "0xB518D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public SDK_DescriptionAttribute description
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xB518E0", Offset = "0xB518E0", VA = "0xB518E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xB518E8", Offset = "0xB518E8", VA = "0xB518E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001500")]
		public static VRTK_SDKInfo[] Create<BaseType, FallbackType, ActualType>() where BaseType : SDK_Base where FallbackType : BaseType where ActualType : BaseType
		{
			return null;
		}

		[Token(Token = "0x6001501")]
		public static VRTK_SDKInfo[] Create<BaseType, FallbackType>(Type actualType) where BaseType : SDK_Base where FallbackType : BaseType
		{
			return null;
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xB518F0", Offset = "0xB518F0", VA = "0xB518F0")]
		private VRTK_SDKInfo()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xB518F8", Offset = "0xB518F8", VA = "0xB518F8")]
		public VRTK_SDKInfo(VRTK_SDKInfo infoToCopy)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xB519D0", Offset = "0xB519D0", VA = "0xB519D0")]
		private void SetUp(Type baseType, Type fallbackType, string actualTypeName, int descriptionIndex)
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xB521D0", Offset = "0xB521D0", VA = "0xB521D0", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xB521D4", Offset = "0xB521D4", VA = "0xB521D4", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xB52294", Offset = "0xB52294", VA = "0xB52294", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xB523B0", Offset = "0xB523B0", VA = "0xB523B0")]
		public bool Equals(VRTK_SDKInfo other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xB523B4", Offset = "0xB523B4", VA = "0xB523B4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xB52304", Offset = "0xB52304", VA = "0xB52304")]
		public static bool operator ==(VRTK_SDKInfo x, VRTK_SDKInfo y)
		{
			return default(bool);
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xB523D4", Offset = "0xB523D4", VA = "0xB523D4")]
		public static bool operator !=(VRTK_SDKInfo x, VRTK_SDKInfo y)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002EC")]
	public sealed class VRTK_SDKManager : MonoBehaviour
	{
		[Token(Token = "0x20002ED")]
		public sealed class ScriptingDefineSymbolPredicateInfo
		{
			[Token(Token = "0x40012FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly SDK_ScriptingDefineSymbolPredicateAttribute attribute;

			[Token(Token = "0x4001300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly MethodInfo methodInfo;

			[Token(Token = "0x6001543")]
			[Address(RVA = "0xB55450", Offset = "0xB55450", VA = "0xB55450")]
			public ScriptingDefineSymbolPredicateInfo(SDK_ScriptingDefineSymbolPredicateAttribute attribute, MethodInfo methodInfo)
			{
			}
		}

		[Token(Token = "0x20002EE")]
		public struct LoadedSetupChangeEventArgs
		{
			[Token(Token = "0x4001301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly VRTK_SDKSetup previousSetup;

			[Token(Token = "0x4001302")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly VRTK_SDKSetup currentSetup;

			[Token(Token = "0x4001303")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly string errorMessage;

			[Token(Token = "0x6001544")]
			[Address(RVA = "0xB55494", Offset = "0xB55494", VA = "0xB55494")]
			public LoadedSetupChangeEventArgs(VRTK_SDKSetup previousSetup, VRTK_SDKSetup currentSetup, string errorMessage)
			{
			}
		}

		[Token(Token = "0x20002EF")]
		public delegate void LoadedSetupChangeEventHandler(VRTK_SDKManager sender, LoadedSetupChangeEventArgs e);

		[Token(Token = "0x20002F2")]
		[CompilerGenerated]
		private sealed class <FinishSDKSetupLoading>d__91 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKManager <>4__this;

			[Token(Token = "0x4001314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_SDKSetup[] sdkSetups;

			[Token(Token = "0x4001315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_SDKSetup previousLoadedSetup;

			[Token(Token = "0x17000192")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600155B")]
				[Address(RVA = "0xB565CC", Offset = "0xB565CC", VA = "0xB565CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600155D")]
				[Address(RVA = "0xB56614", Offset = "0xB56614", VA = "0xB56614", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001558")]
			[Address(RVA = "0xB54E2C", Offset = "0xB54E2C", VA = "0xB54E2C")]
			[DebuggerHidden]
			public <FinishSDKSetupLoading>d__91(int <>1__state)
			{
			}

			[Token(Token = "0x6001559")]
			[Address(RVA = "0xB55FB4", Offset = "0xB55FB4", VA = "0xB55FB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600155A")]
			[Address(RVA = "0xB55FB8", Offset = "0xB55FB8", VA = "0xB55FB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600155C")]
			[Address(RVA = "0xB565D4", Offset = "0xB565D4", VA = "0xB565D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F3")]
		[CompilerGenerated]
		private sealed class <CheckLeftControllerReady>d__93 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKManager <>4__this;

			[Token(Token = "0x4001319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <delayInstruction>5__2;

			[Token(Token = "0x400131A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <maxCheckTime>5__3;

			[Token(Token = "0x17000194")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001561")]
				[Address(RVA = "0xB569B8", Offset = "0xB569B8", VA = "0xB569B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000195")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001563")]
				[Address(RVA = "0xB56A00", Offset = "0xB56A00", VA = "0xB56A00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600155E")]
			[Address(RVA = "0xB54FD0", Offset = "0xB54FD0", VA = "0xB54FD0")]
			[DebuggerHidden]
			public <CheckLeftControllerReady>d__93(int <>1__state)
			{
			}

			[Token(Token = "0x600155F")]
			[Address(RVA = "0xB5661C", Offset = "0xB5661C", VA = "0xB5661C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001560")]
			[Address(RVA = "0xB56620", Offset = "0xB56620", VA = "0xB56620", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001562")]
			[Address(RVA = "0xB569C0", Offset = "0xB569C0", VA = "0xB569C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002F4")]
		[CompilerGenerated]
		private sealed class <CheckRightControllerReady>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400131B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400131C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400131D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKManager <>4__this;

			[Token(Token = "0x400131E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <delayInstruction>5__2;

			[Token(Token = "0x400131F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <maxCheckTime>5__3;

			[Token(Token = "0x17000196")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001567")]
				[Address(RVA = "0xB56BEC", Offset = "0xB56BEC", VA = "0xB56BEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000197")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001569")]
				[Address(RVA = "0xB56C34", Offset = "0xB56C34", VA = "0xB56C34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001564")]
			[Address(RVA = "0xB54FF8", Offset = "0xB54FF8", VA = "0xB54FF8")]
			[DebuggerHidden]
			public <CheckRightControllerReady>d__94(int <>1__state)
			{
			}

			[Token(Token = "0x6001565")]
			[Address(RVA = "0xB56A08", Offset = "0xB56A08", VA = "0xB56A08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001566")]
			[Address(RVA = "0xB56A0C", Offset = "0xB56A0C", VA = "0xB56A0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001568")]
			[Address(RVA = "0xB56BF4", Offset = "0xB56BF4", VA = "0xB56BF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Dictionary<Type, Type> SDKFallbackTypesByBaseType;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static HashSet<Behaviour> delayedToggleBehaviours;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static VRTK_SDKManager _instance;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines whether the scripting define symbols required by the installed SDKs are automatically added to and removed from the player settings.")]
		public bool autoManageScriptDefines;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SDK_ScriptingDefineSymbolPredicateAttribute> activeScriptingDefineSymbolsWithoutSDKClasses;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A reference to the GameObject that contains any scripts that apply to the Left Hand Controller.")]
		public GameObject scriptAliasLeftController;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A reference to the GameObject that contains any scripts that apply to the Right Hand Controller.")]
		public GameObject scriptAliasRightController;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Determines whether the VR settings of the Player Settings are automatically adjusted to allow for all the used SDKs in the SDK Setups list below.")]
		public bool autoManageVRSettings;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("Determines whether the SDK Setups list below is used whenever the SDK Manager is enabled. The first loadable Setup is then loaded.")]
		public bool autoLoadSetup;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The list of SDK Setups to choose from.")]
		public VRTK_SDKSetup[] setups;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Obsolete("`VRTK_SDKManager.persistOnLoad` has been deprecated and will be removed in a future version of VRTK. See https://github.com/thestonefox/VRTK/issues/1316 for details.")]
		[ObsoleteInspector]
		[Header("Obsolete Settings")]
		public bool persistOnLoad;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VRTK_SDKSetup _loadedSetup;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static HashSet<VRTK_SDKInfo> _previouslyUsedSetupInfos;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Behaviour> _behavioursToToggleOnLoadedSetupChange;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<Behaviour, bool> _behavioursInitialState;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine checkLeftControllerReadyRoutine;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine checkRightControllerReadyRoutine;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float checkControllerReadyDelay;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int checkControllerValidTimer;

		[Token(Token = "0x17000186")]
		public static ReadOnlyCollection<ScriptingDefineSymbolPredicateInfo> AvailableScriptingDefineSymbolPredicateInfos
		{
			[Token(Token = "0x600150C")]
			[Address(RVA = "0xB523EC", Offset = "0xB523EC", VA = "0xB523EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600150D")]
			[Address(RVA = "0xB52444", Offset = "0xB52444", VA = "0xB52444")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableSystemSDKInfos
		{
			[Token(Token = "0x600150E")]
			[Address(RVA = "0xB524AC", Offset = "0xB524AC", VA = "0xB524AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600150F")]
			[Address(RVA = "0xB52504", Offset = "0xB52504", VA = "0xB52504")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableBoundariesSDKInfos
		{
			[Token(Token = "0x6001510")]
			[Address(RVA = "0xB52564", Offset = "0xB52564", VA = "0xB52564")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001511")]
			[Address(RVA = "0xB525BC", Offset = "0xB525BC", VA = "0xB525BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableHeadsetSDKInfos
		{
			[Token(Token = "0x6001512")]
			[Address(RVA = "0xB5261C", Offset = "0xB5261C", VA = "0xB5261C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001513")]
			[Address(RVA = "0xB52674", Offset = "0xB52674", VA = "0xB52674")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableControllerSDKInfos
		{
			[Token(Token = "0x6001514")]
			[Address(RVA = "0xB526D4", Offset = "0xB526D4", VA = "0xB526D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001515")]
			[Address(RVA = "0xB5272C", Offset = "0xB5272C", VA = "0xB5272C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledSystemSDKInfos
		{
			[Token(Token = "0x6001516")]
			[Address(RVA = "0xB5278C", Offset = "0xB5278C", VA = "0xB5278C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001517")]
			[Address(RVA = "0xB527E4", Offset = "0xB527E4", VA = "0xB527E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledBoundariesSDKInfos
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0xB52844", Offset = "0xB52844", VA = "0xB52844")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001519")]
			[Address(RVA = "0xB5289C", Offset = "0xB5289C", VA = "0xB5289C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledHeadsetSDKInfos
		{
			[Token(Token = "0x600151A")]
			[Address(RVA = "0xB528FC", Offset = "0xB528FC", VA = "0xB528FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600151B")]
			[Address(RVA = "0xB52954", Offset = "0xB52954", VA = "0xB52954")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledControllerSDKInfos
		{
			[Token(Token = "0x600151C")]
			[Address(RVA = "0xB529B4", Offset = "0xB529B4", VA = "0xB529B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600151D")]
			[Address(RVA = "0xB52A0C", Offset = "0xB52A0C", VA = "0xB52A0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public static VRTK_SDKManager instance
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0xB52A6C", Offset = "0xB52A6C", VA = "0xB52A6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public VRTK_SDKSetup loadedSetup
		{
			[Token(Token = "0x600152A")]
			[Address(RVA = "0xB5347C", Offset = "0xB5347C", VA = "0xB5347C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600152B")]
			[Address(RVA = "0xB53BA8", Offset = "0xB53BA8", VA = "0xB53BA8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public ReadOnlyCollection<Behaviour> behavioursToToggleOnLoadedSetupChange
		{
			[Token(Token = "0x600152C")]
			[Address(RVA = "0xB53BB0", Offset = "0xB53BB0", VA = "0xB53BB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600152D")]
			[Address(RVA = "0xB53BB8", Offset = "0xB53BB8", VA = "0xB53BB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x140000E5")]
		public event LoadedSetupChangeEventHandler LoadedSetupChanged
		{
			[Token(Token = "0x600152E")]
			[Address(RVA = "0xB5323C", Offset = "0xB5323C", VA = "0xB5323C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600152F")]
			[Address(RVA = "0xB53360", Offset = "0xB53360", VA = "0xB53360")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xB52D08", Offset = "0xB52D08", VA = "0xB52D08")]
		public static bool ValidInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xB4EAC0", Offset = "0xB4EAC0", VA = "0xB4EAC0")]
		public static bool AttemptAddBehaviourToToggleOnLoadedSetupChange(Behaviour givenBehaviour)
		{
			return default(bool);
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xB4F1A4", Offset = "0xB4F1A4", VA = "0xB4F1A4")]
		public static bool AttemptRemoveBehaviourToToggleOnLoadedSetupChange(Behaviour givenBehaviour)
		{
			return default(bool);
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xB52F7C", Offset = "0xB52F7C", VA = "0xB52F7C")]
		public static void ProcessDelayedToggleBehaviours()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xB531B4", Offset = "0xB531B4", VA = "0xB531B4")]
		public static bool SubscribeLoadedSetupChanged(LoadedSetupChangeEventHandler callback)
		{
			return default(bool);
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xB532D8", Offset = "0xB532D8", VA = "0xB532D8")]
		public static bool UnsubscribeLoadedSetupChanged(LoadedSetupChangeEventHandler callback)
		{
			return default(bool);
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xB533FC", Offset = "0xB533FC", VA = "0xB533FC")]
		public static VRTK_SDKSetup GetLoadedSDKSetup()
		{
			return null;
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xB53564", Offset = "0xB53564", VA = "0xB53564")]
		public static VRTK_SDKSetup[] GetAllSDKSetups()
		{
			return null;
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xB53600", Offset = "0xB53600", VA = "0xB53600")]
		public static bool AttemptTryLoadSDKSetup(int startIndex, bool tryToReinitialize, params VRTK_SDKSetup[] sdkSetups)
		{
			return default(bool);
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xB5370C", Offset = "0xB5370C", VA = "0xB5370C")]
		public static bool AttemptTryLoadSDKSetupFromList(bool tryUseLastLoadedSetup = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xB53B04", Offset = "0xB53B04", VA = "0xB53B04")]
		public static bool AttemptUnloadSDKSetup(bool disableVR = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xB52D90", Offset = "0xB52D90", VA = "0xB52D90")]
		public void AddBehaviourToToggleOnLoadedSetupChange(Behaviour behaviour)
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xB52F24", Offset = "0xB52F24", VA = "0xB52F24")]
		public void RemoveBehaviourToToggleOnLoadedSetupChange(Behaviour behaviour)
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xB53794", Offset = "0xB53794", VA = "0xB53794")]
		public void TryLoadSDKSetupFromList(bool tryUseLastLoadedSetup = true)
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xB5368C", Offset = "0xB5368C", VA = "0xB5368C")]
		public void TryLoadSDKSetup(int startIndex, bool tryToReinitialize, params VRTK_SDKSetup[] sdkSetups)
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xB53B80", Offset = "0xB53B80", VA = "0xB53B80")]
		public void UnloadSDKSetup(bool disableVR = false)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xB53C74", Offset = "0xB53C74", VA = "0xB53C74")]
		static VRTK_SDKManager()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xB54C54", Offset = "0xB54C54", VA = "0xB54C54")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xB54D24", Offset = "0xB54D24", VA = "0xB54D24")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xB52B78", Offset = "0xB52B78", VA = "0xB52B78")]
		private void CreateInstance()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xB54DDC", Offset = "0xB54DDC", VA = "0xB54DDC")]
		private void OnLoadedSetupChanged(LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xB53BD0", Offset = "0xB53BD0", VA = "0xB53BD0")]
		[IteratorStateMachine(typeof(<FinishSDKSetupLoading>d__91))]
		private IEnumerator FinishSDKSetupLoading(VRTK_SDKSetup[] sdkSetups, VRTK_SDKSetup previousLoadedSetup)
		{
			return null;
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xB54E54", Offset = "0xB54E54", VA = "0xB54E54")]
		private void CheckControllersReady()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xB54EE8", Offset = "0xB54EE8", VA = "0xB54EE8")]
		[IteratorStateMachine(typeof(<CheckLeftControllerReady>d__93))]
		private IEnumerator CheckLeftControllerReady()
		{
			return null;
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xB54F5C", Offset = "0xB54F5C", VA = "0xB54F5C")]
		[IteratorStateMachine(typeof(<CheckRightControllerReady>d__94))]
		private IEnumerator CheckRightControllerReady()
		{
			return null;
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xB55020", Offset = "0xB55020", VA = "0xB55020")]
		private void ToggleBehaviours(bool state)
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xB53F80", Offset = "0xB53F80", VA = "0xB53F80")]
		private static void PopulateAvailableScriptingDefineSymbolPredicateInfos()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xB5457C", Offset = "0xB5457C", VA = "0xB5457C")]
		private static void PopulateAvailableAndInstalledSDKInfos()
		{
		}

		[Token(Token = "0x6001541")]
		private static void PopulateAvailableAndInstalledSDKInfos<BaseType, FallbackType>(List<VRTK_SDKInfo> availableSDKInfos, List<VRTK_SDKInfo> installedSDKInfos, ICollection<string> symbolsOfInstalledSDKs) where BaseType : SDK_Base where FallbackType : BaseType
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xB552D4", Offset = "0xB552D4", VA = "0xB552D4")]
		public VRTK_SDKManager()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public sealed class VRTK_SDKSetup : MonoBehaviour
	{
		[Token(Token = "0x20002F9")]
		public delegate void LoadEventHandler(VRTK_SDKManager sender, VRTK_SDKSetup setup);

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines whether the SDK object references are automatically set to the objects of the selected SDKs. If this is true populating is done whenever the selected SDKs change.")]
		public bool autoPopulateObjectReferences;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A reference to the GameObject that is the user's boundary or play area, most likely provided by the SDK's Camera Rig.")]
		public GameObject actualBoundaries;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A reference to the GameObject that contains the VR camera, most likely provided by the SDK's Camera Rig Headset.")]
		public GameObject actualHeadset;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A reference to the GameObject that contains the SDK Left Hand Controller.")]
		public GameObject actualLeftController;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A reference to the GameObject that contains the SDK Right Hand Controller.")]
		public GameObject actualRightController;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("A reference to the GameObject that models for the Left Hand Controller.")]
		public GameObject modelAliasLeftController;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("A reference to the GameObject that models for the Right Hand Controller.")]
		public GameObject modelAliasRightController;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private VRTK_SDKInfo cachedSystemSDKInfo;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private VRTK_SDKInfo cachedBoundariesSDKInfo;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private VRTK_SDKInfo cachedHeadsetSDKInfo;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private VRTK_SDKInfo cachedControllerSDKInfo;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SDK_BaseSystem cachedSystemSDK;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SDK_BaseBoundaries cachedBoundariesSDK;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private SDK_BaseHeadset cachedHeadsetSDK;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SDK_BaseController cachedControllerSDK;

		[Token(Token = "0x17000198")]
		public VRTK_SDKInfo systemSDKInfo
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0xB56F20", Offset = "0xB56F20", VA = "0xB56F20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001577")]
			[Address(RVA = "0xB56F28", Offset = "0xB56F28", VA = "0xB56F28")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public VRTK_SDKInfo boundariesSDKInfo
		{
			[Token(Token = "0x6001578")]
			[Address(RVA = "0xB572EC", Offset = "0xB572EC", VA = "0xB572EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001579")]
			[Address(RVA = "0xB572F4", Offset = "0xB572F4", VA = "0xB572F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public VRTK_SDKInfo headsetSDKInfo
		{
			[Token(Token = "0x600157A")]
			[Address(RVA = "0xB57420", Offset = "0xB57420", VA = "0xB57420")]
			get
			{
				return null;
			}
			[Token(Token = "0x600157B")]
			[Address(RVA = "0xB57428", Offset = "0xB57428", VA = "0xB57428")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public VRTK_SDKInfo controllerSDKInfo
		{
			[Token(Token = "0x600157C")]
			[Address(RVA = "0xB57554", Offset = "0xB57554", VA = "0xB57554")]
			get
			{
				return null;
			}
			[Token(Token = "0x600157D")]
			[Address(RVA = "0xB5755C", Offset = "0xB5755C", VA = "0xB5755C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public SDK_BaseSystem systemSDK
		{
			[Token(Token = "0x600157E")]
			[Address(RVA = "0xB57688", Offset = "0xB57688", VA = "0xB57688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		public SDK_BaseBoundaries boundariesSDK
		{
			[Token(Token = "0x600157F")]
			[Address(RVA = "0xB57840", Offset = "0xB57840", VA = "0xB57840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		public SDK_BaseHeadset headsetSDK
		{
			[Token(Token = "0x6001580")]
			[Address(RVA = "0xB579F8", Offset = "0xB579F8", VA = "0xB579F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		public SDK_BaseController controllerSDK
		{
			[Token(Token = "0x6001581")]
			[Address(RVA = "0xB56800", Offset = "0xB56800", VA = "0xB56800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		public string[] usedVRDeviceNames
		{
			[Token(Token = "0x6001582")]
			[Address(RVA = "0xB55920", Offset = "0xB55920", VA = "0xB55920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public bool isValid
		{
			[Token(Token = "0x6001583")]
			[Address(RVA = "0xB53B84", Offset = "0xB53B84", VA = "0xB53B84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x140000E6")]
		public event LoadEventHandler Loaded
		{
			[Token(Token = "0x6001572")]
			[Address(RVA = "0xB56CB0", Offset = "0xB56CB0", VA = "0xB56CB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001573")]
			[Address(RVA = "0xB56D4C", Offset = "0xB56D4C", VA = "0xB56D4C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E7")]
		public event LoadEventHandler Unloaded
		{
			[Token(Token = "0x6001574")]
			[Address(RVA = "0xB56DE8", Offset = "0xB56DE8", VA = "0xB56DE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001575")]
			[Address(RVA = "0xB56E84", Offset = "0xB56E84", VA = "0xB56E84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xB57054", Offset = "0xB57054", VA = "0xB57054")]
		public void PopulateObjectReferences(bool force)
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xB57BB0", Offset = "0xB57BB0", VA = "0xB57BB0")]
		public string[] GetSimplifiedErrorDescriptions()
		{
			return null;
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xB562FC", Offset = "0xB562FC", VA = "0xB562FC")]
		public void OnLoaded(VRTK_SDKManager sender)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xB5868C", Offset = "0xB5868C", VA = "0xB5868C")]
		public void OnUnloaded(VRTK_SDKManager sender)
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xB5892C", Offset = "0xB5892C", VA = "0xB5892C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001589")]
		private static void HandleSDKGetter<BaseType>(string prettyName, VRTK_SDKInfo info, IEnumerable<VRTK_SDKInfo> installedInfos) where BaseType : SDK_Base
		{
		}

		[Token(Token = "0x600158A")]
		private static string GetSDKErrorDescription<BaseType>(string prettyName, VRTK_SDKInfo info, IEnumerable<VRTK_SDKInfo> installedInfos) where BaseType : SDK_Base
		{
			return null;
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xB582E0", Offset = "0xB582E0", VA = "0xB582E0")]
		private void SetupHeadset()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xB583C4", Offset = "0xB583C4", VA = "0xB583C4")]
		private void SetupControllers()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xB589BC", Offset = "0xB589BC", VA = "0xB589BC")]
		public VRTK_SDKSetup()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_AdaptiveQuality")]
	public sealed class VRTK_AdaptiveQuality : MonoBehaviour
	{
		[Token(Token = "0x20002FD")]
		private sealed class AdaptiveSetting<T>
		{
			[Token(Token = "0x400135B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int increaseFrameCost;

			[Token(Token = "0x400135C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int decreaseFrameCost;

			[Token(Token = "0x400135D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T _currentValue;

			[Token(Token = "0x170001A5")]
			public T currentValue
			{
				[Token(Token = "0x60015B5")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60015B6")]
				set
				{
				}
			}

			[Token(Token = "0x170001A6")]
			public T previousValue
			{
				[Token(Token = "0x60015B7")]
				[CompilerGenerated]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60015B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001A7")]
			public int lastChangeFrameCount
			{
				[Token(Token = "0x60015B9")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015BA")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60015BB")]
			public AdaptiveSetting(T currentValue, int increaseFrameCost, int decreaseFrameCost)
			{
			}
		}

		[Token(Token = "0x20002FE")]
		private static class CommandLineArguments
		{
			[Token(Token = "0x400135E")]
			public const string Disable = "-noaq";

			[Token(Token = "0x400135F")]
			public const string MinimumRenderScale = "-aqminscale";

			[Token(Token = "0x4001360")]
			public const string MaximumRenderScale = "-aqmaxscale";

			[Token(Token = "0x4001361")]
			public const string MaximumRenderTargetDimension = "-aqmaxres";

			[Token(Token = "0x4001362")]
			public const string RenderScaleFillRateStepSizeInPercent = "-aqfillratestep";

			[Token(Token = "0x4001363")]
			public const string OverrideRenderScaleLevel = "-aqoverride";

			[Token(Token = "0x4001364")]
			public const string DrawDebugVisualization = "-vrdebug";

			[Token(Token = "0x4001365")]
			public const string MSAALevel = "-msaa";
		}

		[Token(Token = "0x20002FF")]
		private static class KeyboardShortcuts
		{
			[Token(Token = "0x4001366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly KeyCode[] Modifiers;

			[Token(Token = "0x4001367")]
			public const KeyCode ToggleDrawDebugVisualization = KeyCode.F1;

			[Token(Token = "0x4001368")]
			public const KeyCode ToggleOverrideRenderScale = KeyCode.F2;

			[Token(Token = "0x4001369")]
			public const KeyCode DecreaseOverrideRenderScaleLevel = KeyCode.F3;

			[Token(Token = "0x400136A")]
			public const KeyCode IncreaseOverrideRenderScaleLevel = KeyCode.F4;
		}

		[Token(Token = "0x2000300")]
		private static class ShaderPropertyIDs
		{
			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly int RenderScaleLevelsCount;

			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static readonly int DefaultRenderViewportScaleLevel;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static readonly int CurrentRenderViewportScaleLevel;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public static readonly int CurrentRenderScaleLevel;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static readonly int LastFrameIsInBudget;
		}

		[Token(Token = "0x2000301")]
		private sealed class Timing
		{
			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly float[] buffer;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int bufferIndex;

			[Token(Token = "0x60015BE")]
			[Address(RVA = "0xB5AB44", Offset = "0xB5AB44", VA = "0xB5AB44")]
			public void SaveCurrentFrameTiming()
			{
			}

			[Token(Token = "0x60015BF")]
			[Address(RVA = "0xB5B3C8", Offset = "0xB5B3C8", VA = "0xB5B3C8")]
			public float GetFrameTiming(int framesAgo)
			{
				return default(float);
			}

			[Token(Token = "0x60015C0")]
			[Address(RVA = "0xB5B1F4", Offset = "0xB5B1F4", VA = "0xB5B1F4")]
			public bool WasFrameTimingBad(int framesAgo, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Token(Token = "0x60015C1")]
			[Address(RVA = "0xB5B340", Offset = "0xB5B340", VA = "0xB5B340")]
			public bool WasFrameTimingGood(int framesAgo, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Token(Token = "0x60015C2")]
			[Address(RVA = "0xB5B27C", Offset = "0xB5B27C", VA = "0xB5B27C")]
			public bool WillFrameTimingBeBad(float extrapolationThresholdInMilliseconds, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Token(Token = "0x60015C3")]
			[Address(RVA = "0xB5B720", Offset = "0xB5B720", VA = "0xB5B720")]
			private static bool AreFramesAvailable(int framesAgo, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Token(Token = "0x60015C4")]
			[Address(RVA = "0xB59260", Offset = "0xB59260", VA = "0xB59260")]
			public Timing()
			{
			}
		}

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Toggles whether to show the debug overlay.\n\nEach square represents a different level on the quality scale. Levels increase from left to right, the first green box that is lit above represents the recommended render target resolution provided by the current `VRDevice`, the box that is lit below in cyan represents the current resolution and the filled box represents the current viewport scale. The yellow boxes represent resolutions below the recommended render target resolution.\nThe currently lit box becomes red whenever the user is likely seeing reprojection in the HMD since the application isn't maintaining VR framerate. If lit, the box all the way on the left is almost always lit red because it represents the lowest render scale with reprojection on.")]
		public bool drawDebugVisualization;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Toggles whether to allow keyboard shortcuts to control this script.\n\n * The supported shortcuts are:\n  * `Shift+F1`: Toggle debug visualization on/off\n  * `Shift+F2`: Toggle usage of override render scale on/off\n  * `Shift+F3`: Decrease override render scale level\n  * `Shift+F4`: Increase override render scale level")]
		public bool allowKeyboardShortcuts;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Toggles whether to allow command line arguments to control this script at startup of the standalone build.\n\n * The supported command line arguments all begin with '-' and are:\n  * `-noaq`: Disable adaptive quality\n  * `-aqminscale X`: Set minimum render scale to X\n  * `-aqmaxscale X`: Set maximum render scale to X\n  * `-aqmaxres X`: Set maximum render target dimension to X\n  * `-aqfillratestep X`: Set render scale fill rate step size in percent to X (X from 1 to 100)\n  * `-aqoverride X`: Set override render scale level to X\n  * `-vrdebug`: Enable debug visualization\n  * `-msaa X`: Set MSAA level to X")]
		public bool allowCommandLineArguments;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The MSAA level to use.")]
		[Header("Quality")]
		[Range(0f, 8f)]
		public int msaaLevel;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Toggles whether the render viewport scale is dynamically adjusted to maintain VR framerate.\n\nIf unchecked, the renderer will render at the recommended resolution provided by the current `VRDevice`.")]
		public bool scaleRenderViewport;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The minimum and maximum allowed render scale.")]
		[MinMaxRange(0.01f, 5f)]
		public Limits2D renderScaleLimits;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Obsolete("`VRTK_AdaptiveQuality.minimumRenderScale` has been replaced with the `VRTK_AdaptiveQuality.renderScaleLimits`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public float minimumRenderScale;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[ObsoleteInspector]
		[Obsolete("`VRTK_AdaptiveQuality.maximumRenderScale` has been replaced with the `VRTK_AdaptiveQuality.renderScaleLimits`. This parameter will be removed in a future version of VRTK.")]
		public float maximumRenderScale;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum allowed render target dimension.\n\nThis puts an upper limit on the size of the render target regardless of the maximum render scale.")]
		public int maximumRenderTargetDimension;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(1f, 100f)]
		[Tooltip("The fill rate step size in percent by which the render scale levels will be calculated.")]
		public int renderScaleFillRateStepSizeInPercent;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Toggles whether the render target resolution is dynamically adjusted to maintain VR framerate.\n\nIf unchecked, the renderer will use the maximum target resolution specified by `maximumRenderScale`.")]
		public bool scaleRenderTargetResolution;

		[NonSerialized]
		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Header("Override")]
		[Tooltip("Toggles whether to override the used render viewport scale level.")]
		public bool overrideRenderViewportScale;

		[NonSerialized]
		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The render viewport scale level to override the current one with.")]
		public int overrideRenderViewportScaleLevel;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly ReadOnlyCollection<float> renderScales;

		[Token(Token = "0x400134A")]
		private const float DefaultFrameDurationInMilliseconds = 11.111111f;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly AdaptiveSetting<int> renderViewportScaleSetting;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly AdaptiveSetting<int> renderScaleSetting;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<float> allRenderScales;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int defaultRenderViewportScaleLevel;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float previousMinimumRenderScale;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float previousMaximumRenderScale;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float previousRenderScaleFillRateStepSizeInPercent;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Timing timing;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int lastRenderViewportScaleLevelBelowRenderScaleLevelFrameCount;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool interleavedReprojectionEnabled;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool hmdDisplayIsOnDesktop;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float singleFrameDurationInMilliseconds;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject debugVisualizationQuad;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material debugVisualizationQuadMaterial;

		[Token(Token = "0x170001A2")]
		public static float CurrentRenderScale
		{
			[Token(Token = "0x600159D")]
			[Address(RVA = "0xB58F0C", Offset = "0xB58F0C", VA = "0xB58F0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A3")]
		public Vector2 defaultRenderTargetResolution
		{
			[Token(Token = "0x600159E")]
			[Address(RVA = "0xB58F40", Offset = "0xB58F40", VA = "0xB58F40")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170001A4")]
		public Vector2 currentRenderTargetResolution
		{
			[Token(Token = "0x600159F")]
			[Address(RVA = "0xB5902C", Offset = "0xB5902C", VA = "0xB5902C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xB59058", Offset = "0xB59058", VA = "0xB59058")]
		public VRTK_AdaptiveQuality()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xB58F98", Offset = "0xB58F98", VA = "0xB58F98")]
		public static Vector2 RenderTargetResolutionForRenderScale(float renderScale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xB592C4", Offset = "0xB592C4", VA = "0xB592C4")]
		public float BiggestAllowedMaximumRenderScale()
		{
			return default(float);
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xB5936C", Offset = "0xB5936C", VA = "0xB5936C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xB59788", Offset = "0xB59788", VA = "0xB59788")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xB597DC", Offset = "0xB597DC", VA = "0xB597DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xB59D30", Offset = "0xB59D30", VA = "0xB59D30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xB59EAC", Offset = "0xB59EAC", VA = "0xB59EAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xB59CA4", Offset = "0xB59CA4", VA = "0xB59CA4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xB59F00", Offset = "0xB59F00", VA = "0xB59F00")]
		private void Update()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xB5ABB4", Offset = "0xB5ABB4", VA = "0xB5ABB4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xB5B0C0", Offset = "0xB5B0C0", VA = "0xB5B0C0")]
		private void OnCameraPreCull(Camera camera)
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xB59948", Offset = "0xB59948", VA = "0xB59948")]
		private void HandleCommandLineArguments()
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xB59F38", Offset = "0xB59F38", VA = "0xB59F38")]
		private void HandleKeyPresses()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xB5B160", Offset = "0xB5B160", VA = "0xB5B160")]
		private void UpdateMSAALevel()
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xB5A098", Offset = "0xB5A098", VA = "0xB5A098")]
		private void UpdateRenderScaleLevels()
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xB5ABB8", Offset = "0xB5ABB8", VA = "0xB5ABB8")]
		private void UpdateRenderScale()
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xB59E38", Offset = "0xB59E38", VA = "0xB59E38")]
		private static void SetRenderScale(float renderScale, float renderViewportScale)
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xB5B194", Offset = "0xB5B194", VA = "0xB5B194")]
		private int ClampRenderScaleLevel(int renderScaleLevel)
		{
			return default(int);
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xB5A404", Offset = "0xB5A404", VA = "0xB5A404")]
		private void CreateOrDestroyDebugVisualization()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xB5A990", Offset = "0xB5A990", VA = "0xB5A990")]
		private void UpdateDebugVisualization()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_CustomRaycast")]
	public class VRTK_CustomRaycast : MonoBehaviour
	{
		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The layers to ignore when raycasting.")]
		public LayerMask layersToIgnore;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Determines whether the ray will interact with trigger colliders.")]
		public QueryTriggerInteraction triggerInteraction;

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xB5B7E0", Offset = "0xB5B7E0", VA = "0xB5B7E0")]
		public static bool Raycast(VRTK_CustomRaycast customCast, Ray ray, out RaycastHit hitData, LayerMask ignoreLayers, float length = float.PositiveInfinity, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xB5B900", Offset = "0xB5B900", VA = "0xB5B900")]
		public static bool Linecast(VRTK_CustomRaycast customCast, Vector3 startPosition, Vector3 endPosition, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xB5BA34", Offset = "0xB5BA34", VA = "0xB5BA34")]
		public static bool CapsuleCast(VRTK_CustomRaycast customCast, Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xB5BBA4", Offset = "0xB5BBA4", VA = "0xB5BBA4")]
		public static bool BoxCast(VRTK_CustomRaycast customCast, Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xB5BD08", Offset = "0xB5BD08", VA = "0xB5BD08", Slot = "4")]
		public virtual bool CustomRaycast(Ray ray, out RaycastHit hitData, float length = float.PositiveInfinity)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xB5BD74", Offset = "0xB5BD74", VA = "0xB5BD74", Slot = "5")]
		public virtual bool CustomLinecast(Vector3 startPosition, Vector3 endPosition, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xB5BDF4", Offset = "0xB5BDF4", VA = "0xB5BDF4", Slot = "6")]
		public virtual bool CustomCapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xB5BE9C", Offset = "0xB5BE9C", VA = "0xB5BE9C", Slot = "7")]
		public virtual bool CustomBoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xB5BF48", Offset = "0xB5BF48", VA = "0xB5BF48")]
		public VRTK_CustomRaycast()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public static class VRTK_DeviceFinder
	{
		[Token(Token = "0x2000305")]
		public enum Devices
		{
			[Token(Token = "0x4001378")]
			Headset,
			[Token(Token = "0x4001379")]
			LeftController,
			[Token(Token = "0x400137A")]
			RightController
		}

		[Token(Token = "0x2000306")]
		[Obsolete("`VRTK_DeviceFinder.Headsets` has been deprecated and has been replaced with a manufacturer string. This enum will be removed in a future version of VRTK.")]
		public enum Headsets
		{
			[Token(Token = "0x400137C")]
			Unknown,
			[Token(Token = "0x400137D")]
			OculusRift,
			[Token(Token = "0x400137E")]
			OculusRiftCV1,
			[Token(Token = "0x400137F")]
			Vive,
			[Token(Token = "0x4001380")]
			ViveMV,
			[Token(Token = "0x4001381")]
			ViveDVT,
			[Token(Token = "0x4001382")]
			OculusRiftES07
		}

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string cachedHeadsetType;

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xB5BF70", Offset = "0xB5BF70", VA = "0xB5BF70")]
		public static SDK_BaseController.ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xB5BF78", Offset = "0xB5BF78", VA = "0xB5BF78")]
		public static uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xB4C99C", Offset = "0xB4C99C", VA = "0xB4C99C")]
		public static GameObject GetControllerByIndex(uint index, bool getActual)
		{
			return null;
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xB5BF80", Offset = "0xB5BF80", VA = "0xB5BF80")]
		public static Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xB5BF88", Offset = "0xB5BF88", VA = "0xB5BF88")]
		public static Transform DeviceTransform(Devices device)
		{
			return null;
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xB5C06C", Offset = "0xB5C06C", VA = "0xB5C06C")]
		public static SDK_BaseController.ControllerHand GetControllerHandType(string hand)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xB5C10C", Offset = "0xB5C10C", VA = "0xB5C10C")]
		public static SDK_BaseController.ControllerHand GetControllerHand(GameObject controller)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xB5C054", Offset = "0xB5C054", VA = "0xB5C054")]
		public static GameObject GetControllerLeftHand(bool getActual = false)
		{
			return null;
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xB5C060", Offset = "0xB5C060", VA = "0xB5C060")]
		public static GameObject GetControllerRightHand(bool getActual = false)
		{
			return null;
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xB5C14C", Offset = "0xB5C14C", VA = "0xB5C14C")]
		public static VRTK_ControllerReference GetControllerReferenceLeftHand()
		{
			return null;
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xB5C1A0", Offset = "0xB5C1A0", VA = "0xB5C1A0")]
		public static VRTK_ControllerReference GetControllerReferenceRightHand()
		{
			return null;
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xB5C1F4", Offset = "0xB5C1F4", VA = "0xB5C1F4")]
		public static VRTK_ControllerReference GetControllerReferenceForHand(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xB5C24C", Offset = "0xB5C24C", VA = "0xB5C24C")]
		public static bool IsControllerOfHand(GameObject checkController, SDK_BaseController.ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xB5C2EC", Offset = "0xB5C2EC", VA = "0xB5C2EC")]
		public static bool IsControllerLeftHand(GameObject checkController)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xB5C2F4", Offset = "0xB5C2F4", VA = "0xB5C2F4")]
		public static bool IsControllerRightHand(GameObject checkController)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xB5C2FC", Offset = "0xB5C2FC", VA = "0xB5C2FC")]
		public static SDK_BaseController.ControllerHand GetOppositeHand(SDK_BaseController.ControllerHand currentHand)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xB5C318", Offset = "0xB5C318", VA = "0xB5C318")]
		public static GameObject GetActualController(GameObject givenController)
		{
			return null;
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xB5C39C", Offset = "0xB5C39C", VA = "0xB5C39C")]
		public static GameObject GetScriptAliasController(GameObject givenController)
		{
			return null;
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xB5C420", Offset = "0xB5C420", VA = "0xB5C420")]
		public static GameObject GetModelAliasController(GameObject givenController)
		{
			return null;
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xB5C428", Offset = "0xB5C428", VA = "0xB5C428")]
		public static SDK_BaseController.ControllerHand GetModelAliasControllerHand(GameObject givenObject)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xB5C534", Offset = "0xB5C534", VA = "0xB5C534")]
		public static Vector3 GetControllerVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xB5C53C", Offset = "0xB5C53C", VA = "0xB5C53C")]
		public static Vector3 GetControllerAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xB5C544", Offset = "0xB5C544", VA = "0xB5C544")]
		public static Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xB5C54C", Offset = "0xB5C54C", VA = "0xB5C54C")]
		public static Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xB5B524", Offset = "0xB5B524", VA = "0xB5B524")]
		public static Transform HeadsetTransform()
		{
			return null;
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xB5C554", Offset = "0xB5C554", VA = "0xB5C554")]
		public static Transform HeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xB5C55C", Offset = "0xB5C55C", VA = "0xB5C55C")]
		[Obsolete("`VRTK_DeviceFinder.ResetHeadsetTypeCache()` has been deprecated. This method will be removed in a future version of VRTK.")]
		public static void ResetHeadsetTypeCache()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xB5C5D8", Offset = "0xB5C5D8", VA = "0xB5C5D8")]
		[Obsolete("`VRTK_DeviceFinder.GetHeadsetType(summary) -> VRTK_DeviceFinder.Headsets` has been replaced with `VRTK_DeviceFinder.GetHeadsetType() -> SDK_BaseHeadset.HeadsetType`. This method will be removed in a future version of VRTK.")]
		public static Headsets GetHeadsetType(bool summary = false)
		{
			return default(Headsets);
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xB5C954", Offset = "0xB5C954", VA = "0xB5C954")]
		public static string GetHeadsetTypeAsString()
		{
			return null;
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xB5C95C", Offset = "0xB5C95C", VA = "0xB5C95C")]
		public static SDK_BaseHeadset.HeadsetType GetHeadsetType()
		{
			return default(SDK_BaseHeadset.HeadsetType);
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xB5CC70", Offset = "0xB5CC70", VA = "0xB5CC70")]
		public static Transform PlayAreaTransform()
		{
			return null;
		}
	}
	[Token(Token = "0x2000307")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_NavMeshData")]
	public class VRTK_NavMeshData : MonoBehaviour
	{
		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The max distance given point can be outside the nav mesh to be considered valid.")]
		public float distanceLimit;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The parts of the navmesh that are considered valid")]
		public int validAreas;

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xB5CCE4", Offset = "0xB5CCE4", VA = "0xB5CCE4")]
		public VRTK_NavMeshData()
		{
		}
	}
	[Token(Token = "0x2000308")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_PolicyList")]
	public class VRTK_PolicyList : MonoBehaviour
	{
		[Token(Token = "0x2000309")]
		public enum OperationTypes
		{
			[Token(Token = "0x4001389")]
			Ignore,
			[Token(Token = "0x400138A")]
			Include
		}

		[Token(Token = "0x200030A")]
		public enum CheckTypes
		{
			[Token(Token = "0x400138C")]
			Tag = 1,
			[Token(Token = "0x400138D")]
			Script = 2,
			[Token(Token = "0x400138E")]
			Layer = 4
		}

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The operation to apply on the list of identifiers.")]
		public OperationTypes operation;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The element type on the game object to check against.")]
		public CheckTypes checkType;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A list of identifiers to check for against the given check type (either tag or script).")]
		public List<string> identifiers;

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xB5CCF8", Offset = "0xB5CCF8", VA = "0xB5CCF8", Slot = "4")]
		public virtual bool Find(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xB5CD10", Offset = "0xB5CD10", VA = "0xB5CD10")]
		public static bool Check(GameObject obj, VRTK_PolicyList list)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xB5CDAC", Offset = "0xB5CDAC", VA = "0xB5CDAC", Slot = "5")]
		protected virtual bool ScriptCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xB5CE9C", Offset = "0xB5CE9C", VA = "0xB5CE9C", Slot = "6")]
		protected virtual bool TagCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xB5CF20", Offset = "0xB5CF20", VA = "0xB5CF20", Slot = "7")]
		protected virtual bool LayerCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xB5CFAC", Offset = "0xB5CFAC", VA = "0xB5CFAC", Slot = "8")]
		protected virtual bool TypeCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xB5D170", Offset = "0xB5D170", VA = "0xB5D170")]
		public VRTK_PolicyList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030B")]
	public class VRTK_SDKInputOverrideType
	{
		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("SDK settings")]
		[Tooltip("An optional SDK Setup to use to determine when to modify the transform.")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("An optional SDK controller type to use to determine when to modify the transform.")]
		public SDK_BaseController.ControllerType controllerType;

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xB5D28C", Offset = "0xB5D28C", VA = "0xB5D28C")]
		public VRTK_SDKInputOverrideType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030C")]
	public class VRTK_SDKButtonInputOverrideType : VRTK_SDKInputOverrideType
	{
		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Button Override")]
		[Tooltip("The button to override to.")]
		public VRTK_ControllerEvents.ButtonAlias overrideButton;

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xB5D294", Offset = "0xB5D294", VA = "0xB5D294")]
		public VRTK_SDKButtonInputOverrideType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030D")]
	public class VRTK_SDKVector2AxisInputOverrideType : VRTK_SDKInputOverrideType
	{
		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Vector2 axis to override to.")]
		[Header("Vector2 Axis Override")]
		public VRTK_ControllerEvents.Vector2AxisAlias overrideAxis;

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xB5D29C", Offset = "0xB5D29C", VA = "0xB5D29C")]
		public VRTK_SDKVector2AxisInputOverrideType()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class VRTK_SDKInputOverride : VRTK_SDKControllerReady
	{
		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Interact Grab script to override the controls on.")]
		[Header("Interact Grab")]
		public VRTK_InteractGrab interactGrabScript;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The list of overrides.")]
		public List<VRTK_SDKButtonInputOverrideType> interactGrabOverrides;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Interact Use script to override the controls on.")]
		[Header("Interact Use")]
		public VRTK_InteractUse interactUseScript;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The list of overrides.")]
		public List<VRTK_SDKButtonInputOverrideType> interactUseOverrides;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Pointer script to override the controls on.")]
		[Header("Pointer")]
		public VRTK_Pointer pointerScript;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The list of overrides for the activation button.")]
		public List<VRTK_SDKButtonInputOverrideType> pointerActivationOverrides;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The list of overrides for the selection button.")]
		public List<VRTK_SDKButtonInputOverrideType> pointerSelectionOverrides;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("UI Pointer")]
		[Tooltip("The UI Pointer script to override the controls on.")]
		public VRTK_UIPointer uiPointerScript;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The list of overrides for the activation button.")]
		public List<VRTK_SDKButtonInputOverrideType> uiPointerActivationOverrides;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The list of overrides for the selection button.")]
		public List<VRTK_SDKButtonInputOverrideType> uiPointerSelectionOverrides;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Pointer Direction Indicator")]
		[Tooltip("The Pointer Direction Indicator script to override the controls on.")]
		public VRTK_PointerDirectionIndicator pointerDirectionIndicatorScript;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The list of overrides for the coordinate axis.")]
		public List<VRTK_SDKVector2AxisInputOverrideType> directionIndicatorCoordinateOverrides;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Touchpad Control")]
		[Tooltip("The Touchpad Control script to override the controls on.")]
		public VRTK_TouchpadControl touchpadControlScript;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The list of overrides for the Touchpad Control coordinate axis.")]
		public List<VRTK_SDKVector2AxisInputOverrideType> touchpadControlCoordinateOverrides;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The list of overrides for the activation button.")]
		public List<VRTK_SDKButtonInputOverrideType> touchpadControlActivationOverrides;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The list of overrides for the modifier button.")]
		public List<VRTK_SDKButtonInputOverrideType> touchpadControlModifierOverrides;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Button Control")]
		[Tooltip("The ButtonControl script to override the controls on.")]
		public VRTK_ButtonControl buttonControlScript;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The list of overrides for the forward button.")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlForwardOverrides;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The list of overrides for the backward button.")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlBackwardOverrides;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The list of overrides for the left button.")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlLeftOverrides;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The list of overrides for the right button.")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlRightOverrides;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Slingshot Jump")]
		[Tooltip("The SlingshotJump script to override the controls on.")]
		public VRTK_SlingshotJump slingshotJumpScript;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The list of overrides for the activation button.")]
		public List<VRTK_SDKButtonInputOverrideType> slingshotJumpActivationOverrides;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The list of overrides for the cancel button.")]
		public List<VRTK_SDKButtonInputOverrideType> slingshotJumpCancelOverrides;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Header("Move In Place")]
		[Tooltip("The MoveInPlace script to override the controls on.")]
		public VRTK_MoveInPlace moveInPlaceScript;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The list of overrides for the engage button.")]
		public List<VRTK_SDKButtonInputOverrideType> moveInPlaceEngageOverrides;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Step Multiplier")]
		[Tooltip("The Step Multiplier script to override the controls on.")]
		public VRTK_StepMultiplier stepMultiplierScript;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The list of overrides for the activation button.")]
		public List<VRTK_SDKButtonInputOverrideType> stepMultiplierActivationOverrides;

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xB5D2A4", Offset = "0xB5D2A4", VA = "0xB5D2A4", Slot = "15")]
		public virtual void ForceManage()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xB5D2B4", Offset = "0xB5D2B4", VA = "0xB5D2B4", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xB5D2DC", Offset = "0xB5D2DC", VA = "0xB5D2DC", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xB5D318", Offset = "0xB5D318", VA = "0xB5D318", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xB5D3E8", Offset = "0xB5D3E8", VA = "0xB5D3E8", Slot = "16")]
		protected virtual VRTK_SDKButtonInputOverrideType GetSelectedModifier(List<VRTK_SDKButtonInputOverrideType> overrideTypes, VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xB5D620", Offset = "0xB5D620", VA = "0xB5D620", Slot = "17")]
		protected virtual VRTK_SDKVector2AxisInputOverrideType GetSelectedModifier(List<VRTK_SDKVector2AxisInputOverrideType> overrideTypes, VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xB5D7F0", Offset = "0xB5D7F0", VA = "0xB5D7F0", Slot = "18")]
		protected virtual void ManageInputs()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xB5D8C0", Offset = "0xB5D8C0", VA = "0xB5D8C0", Slot = "19")]
		protected virtual VRTK_ControllerReference GetReferenceFromEvents(VRTK_ControllerEvents controllerEvents)
		{
			return null;
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xB5D96C", Offset = "0xB5D96C", VA = "0xB5D96C", Slot = "20")]
		protected virtual VRTK_ControllerReference GetRightThenLeftReference()
		{
			return null;
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xB5D9FC", Offset = "0xB5D9FC", VA = "0xB5D9FC", Slot = "21")]
		protected virtual void ManageInteractGrab()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xB5DAEC", Offset = "0xB5DAEC", VA = "0xB5DAEC", Slot = "22")]
		protected virtual void ManageInteractUse()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xB5DBDC", Offset = "0xB5DBDC", VA = "0xB5DBDC", Slot = "23")]
		protected virtual void ManagePointer()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xB5DD2C", Offset = "0xB5DD2C", VA = "0xB5DD2C", Slot = "24")]
		protected virtual void ManageUIPointer()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xB5DE7C", Offset = "0xB5DE7C", VA = "0xB5DE7C", Slot = "25")]
		protected virtual void ManagePointerDirectionIndicator()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xB5DF78", Offset = "0xB5DF78", VA = "0xB5DF78", Slot = "26")]
		protected virtual void ManageTouchpadControl()
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xB5E124", Offset = "0xB5E124", VA = "0xB5E124", Slot = "27")]
		protected virtual void ManageButtonControl()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xB5E32C", Offset = "0xB5E32C", VA = "0xB5E32C", Slot = "28")]
		protected virtual void ManageSlingshotJump()
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xB5E490", Offset = "0xB5E490", VA = "0xB5E490", Slot = "29")]
		protected virtual void ManageMoveInPlace()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xB5E574", Offset = "0xB5E574", VA = "0xB5E574", Slot = "30")]
		protected virtual void ManageStepMultiplier()
		{
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xB5E664", Offset = "0xB5E664", VA = "0xB5E664")]
		public VRTK_SDKInputOverride()
		{
		}
	}
	[Token(Token = "0x2000312")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_SDKObjectAlias")]
	public class VRTK_SDKObjectAlias : MonoBehaviour
	{
		[Token(Token = "0x2000313")]
		public enum SDKObject
		{
			[Token(Token = "0x40013B6")]
			Boundary,
			[Token(Token = "0x40013B7")]
			Headset
		}

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The specific SDK Object to child this GameObject to.")]
		public SDKObject sdkObject;

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xB5EBBC", Offset = "0xB5EBBC", VA = "0xB5EBBC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xB5EC5C", Offset = "0xB5EC5C", VA = "0xB5EC5C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xB5ED14", Offset = "0xB5ED14", VA = "0xB5ED14", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xB5EDA4", Offset = "0xB5EDA4", VA = "0xB5EDA4", Slot = "7")]
		protected virtual void ChildToSDKObject()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xB5EF4C", Offset = "0xB5EF4C", VA = "0xB5EF4C")]
		public VRTK_SDKObjectAlias()
		{
		}
	}
	[Token(Token = "0x2000314")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_SDKObjectState")]
	public class VRTK_SDKObjectState : VRTK_SDKControllerReady
	{
		[Token(Token = "0x2000315")]
		[CompilerGenerated]
		private sealed class <CheckToggleAtEndOfFrame>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKObjectState <>4__this;

			[Token(Token = "0x170001A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600162D")]
				[Address(RVA = "0xB5F7BC", Offset = "0xB5F7BC", VA = "0xB5F7BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600162F")]
				[Address(RVA = "0xB5F804", Offset = "0xB5F804", VA = "0xB5F804", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600162A")]
			[Address(RVA = "0xB5F1A8", Offset = "0xB5F1A8", VA = "0xB5F1A8")]
			[DebuggerHidden]
			public <CheckToggleAtEndOfFrame>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600162B")]
			[Address(RVA = "0xB5F704", Offset = "0xB5F704", VA = "0xB5F704", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600162C")]
			[Address(RVA = "0xB5F708", Offset = "0xB5F708", VA = "0xB5F708", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600162E")]
			[Address(RVA = "0xB5F7C4", Offset = "0xB5F7C4", VA = "0xB5F7C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Target Settings")]
		[Tooltip("The GameObject or Component that is the target of the enable/disable action. If this is left blank then the GameObject that the script is attached to will be used as the `Target`.")]
		public UnityEngine.Object target;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The state to set the `Target` to when this script is enabled. Checking this box will enable/activate the `Target`, unchecking will disable/deactivate the `Target`.")]
		public bool objectState;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If the currently loaded SDK Setup matches the one provided here then the `Target` state will be set to the desired `Object State`.")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If the attached headset type matches the selected headset then the `Target` state will be set to the desired `Object State`.")]
		public SDK_BaseHeadset.HeadsetType headsetType;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If the current controller type matches the selected controller type then the `Target` state will be set to the desired `Object State`.")]
		public SDK_BaseController.ControllerType controllerType;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine checkToggleRoutine;

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xB5EF54", Offset = "0xB5EF54", VA = "0xB5EF54", Slot = "15")]
		public virtual void SetStateByControllerReference(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xB5F020", Offset = "0xB5F020", VA = "0xB5F020", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xB5F0F4", Offset = "0xB5F0F4", VA = "0xB5F0F4", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xB5F124", Offset = "0xB5F124", VA = "0xB5F124", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xB5F134", Offset = "0xB5F134", VA = "0xB5F134", Slot = "16")]
		[IteratorStateMachine(typeof(<CheckToggleAtEndOfFrame>d__10))]
		protected virtual IEnumerator CheckToggleAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xB5F1D0", Offset = "0xB5F1D0", VA = "0xB5F1D0", Slot = "17")]
		protected virtual void CheckToggle()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xB5F200", Offset = "0xB5F200", VA = "0xB5F200", Slot = "18")]
		protected virtual void ToggleOnSDK()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xB5F2DC", Offset = "0xB5F2DC", VA = "0xB5F2DC", Slot = "19")]
		protected virtual void ToggleOnHeadset()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xB5F35C", Offset = "0xB5F35C", VA = "0xB5F35C", Slot = "20")]
		protected virtual void ToggleOnController(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xB5F3F0", Offset = "0xB5F3F0", VA = "0xB5F3F0", Slot = "21")]
		protected virtual void ToggleObject()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xB5F4F0", Offset = "0xB5F4F0", VA = "0xB5F4F0", Slot = "22")]
		protected virtual void ToggleGameObject()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xB5F5A8", Offset = "0xB5F5A8", VA = "0xB5F5A8", Slot = "23")]
		protected virtual void ToggleComponent()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xB5F6FC", Offset = "0xB5F6FC", VA = "0xB5F6FC")]
		public VRTK_SDKObjectState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000316")]
	public class VRTK_SDKTransformModifiers
	{
		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("An optional SDK Setup to use to determine when to modify the transform.")]
		[Header("SDK settings")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("An optional SDK controller type to use to determine when to modify the transform.")]
		public SDK_BaseController.ControllerType controllerType;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The new local position to change the transform to.")]
		[Header("Transform Override Settings")]
		public Vector3 position;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The new local rotation in eular angles to change the transform to.")]
		public Vector3 rotation;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The new local scale to change the transform to.")]
		public Vector3 scale;

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xB5F80C", Offset = "0xB5F80C", VA = "0xB5F80C")]
		public VRTK_SDKTransformModifiers()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_SDKTransformModify")]
	public class VRTK_SDKTransformModify : VRTK_SDKControllerReady
	{
		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The target Transform to modify on enable. If this is left blank then the Transform the script is attached to will be used.")]
		public Transform target;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If this is checked then the target Transform will be reset to the original orientation when this script is disabled.")]
		public bool resetOnDisable;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A collection of SDK Transform overrides to change the given target Transform for each specified SDK.")]
		public List<VRTK_SDKTransformModifiers> sdkOverrides;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 originalPosition;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion originalRotation;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalScale;

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xB5F8B4", Offset = "0xB5F8B4", VA = "0xB5F8B4", Slot = "15")]
		public virtual void UpdateTransform([Optional] VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xB5F9A0", Offset = "0xB5F9A0", VA = "0xB5F9A0", Slot = "16")]
		public virtual void SetOrigins()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xB5FA54", Offset = "0xB5FA54", VA = "0xB5FA54", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xB5FB08", Offset = "0xB5FB08", VA = "0xB5FB08", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xB5FB78", Offset = "0xB5FB78", VA = "0xB5FB78", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xB5FC5C", Offset = "0xB5FC5C", VA = "0xB5FC5C", Slot = "17")]
		protected virtual VRTK_SDKTransformModifiers GetSelectedModifier(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xB5FE34", Offset = "0xB5FE34", VA = "0xB5FE34")]
		public VRTK_SDKTransformModify()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public static class VRTK_SharedMethods
	{
		[Token(Token = "0x600163D")]
		[Address(RVA = "0xB5FFF8", Offset = "0xB5FFF8", VA = "0xB5FFF8")]
		public static Bounds GetBounds(Transform transform, [Optional] Transform excludeRotation, [Optional] Transform excludeTransform)
		{
			return default(Bounds);
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xB60534", Offset = "0xB60534", VA = "0xB60534")]
		public static bool IsLowest(float value, float[] others)
		{
			return default(bool);
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xB60594", Offset = "0xB60594", VA = "0xB60594")]
		public static Transform AddCameraFade()
		{
			return null;
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xB605F8", Offset = "0xB605F8", VA = "0xB605F8")]
		public static void CreateColliders(GameObject obj)
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xB60734", Offset = "0xB60734", VA = "0xB60734")]
		public static Collider[] ColliderExclude(Collider[] setA, Collider[] setB)
		{
			return null;
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xB607A8", Offset = "0xB607A8", VA = "0xB607A8")]
		public static Collider[] GetCollidersInGameObjects(GameObject[] gameObjects, bool searchChildren, bool includeInactive)
		{
			return null;
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xB6093C", Offset = "0xB6093C", VA = "0xB6093C")]
		public static Component CloneComponent(Component source, GameObject destination, bool copyProperties = false)
		{
			return null;
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xB60AD4", Offset = "0xB60AD4", VA = "0xB60AD4")]
		public static Color ColorDarken(Color color, float percent)
		{
			return default(Color);
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xB60B3C", Offset = "0xB60B3C", VA = "0xB60B3C")]
		public static float RoundFloat(float givenFloat, int decimalPlaces, bool rawFidelity = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xB60BF4", Offset = "0xB60BF4", VA = "0xB60BF4")]
		public static bool IsEditTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xB60BFC", Offset = "0xB60BFC", VA = "0xB60BFC")]
		public static float Mod(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6001648")]
		public static GameObject FindEvenInactiveGameObject<T>([Optional] string gameObjectName, bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001649")]
		public static T[] FindEvenInactiveComponents<T>(bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600164A")]
		public static T FindEvenInactiveComponent<T>(bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xB5B414", Offset = "0xB5B414", VA = "0xB5B414")]
		public static string GenerateVRTKObjectName(bool autoGen, params object[] replacements)
		{
			return null;
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xB5B52C", Offset = "0xB5B52C", VA = "0xB5B52C")]
		public static float GetGPUTimeLastFrame()
		{
			return default(float);
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xB60C10", Offset = "0xB60C10", VA = "0xB60C10")]
		public static bool Vector2ShallowCompare(Vector2 vectorA, Vector2 vectorB, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xB60CEC", Offset = "0xB60CEC", VA = "0xB60CEC")]
		public static bool Vector3ShallowCompare(Vector3 vectorA, Vector3 vectorB, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xB60B0C", Offset = "0xB60B0C", VA = "0xB60B0C")]
		public static float NumberPercent(float value, float percent)
		{
			return default(float);
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xB60D98", Offset = "0xB60D98", VA = "0xB60D98")]
		public static void SetGlobalScale(this Transform transform, Vector3 globalScale)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xB60E60", Offset = "0xB60E60", VA = "0xB60E60")]
		public static Vector3 VectorHeading(Vector3 originPosition, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xB60E70", Offset = "0xB60E70", VA = "0xB60E70")]
		public static Vector3 VectorDirection(Vector3 originPosition, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xB60F24", Offset = "0xB60F24", VA = "0xB60F24")]
		public static float DividerToMultiplier(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xB60F38", Offset = "0xB60F38", VA = "0xB60F38")]
		public static float NormalizeValue(float value, float minValue, float maxValue, float threshold = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xB60F80", Offset = "0xB60F80", VA = "0xB60F80")]
		public static Vector3 AxisDirection(int axisIndex, [Optional] Transform givenTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001656")]
		public static bool AddListValue<TValue>(List<TValue> list, TValue value, bool preventDuplicates = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001657")]
		public static TValue GetDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6001658")]
		public static TValue GetDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, out bool keyExists, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6001659")]
		public static bool AddDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, TValue value, bool overwriteExisting = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xB611B4", Offset = "0xB611B4", VA = "0xB611B4")]
		public static Type GetTypeUnknownAssembly(string typeName)
		{
			return null;
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xB58F38", Offset = "0xB58F38", VA = "0xB58F38")]
		public static float GetEyeTextureResolutionScale()
		{
			return default(float);
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xB5B40C", Offset = "0xB5B40C", VA = "0xB5B40C")]
		public static void SetEyeTextureResolutionScale(float value)
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xB521B0", Offset = "0xB521B0", VA = "0xB521B0")]
		public static bool IsTypeSubclassOf(Type givenType, Type givenBaseType)
		{
			return default(bool);
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xB612F8", Offset = "0xB612F8", VA = "0xB612F8")]
		public static object[] GetTypeCustomAttributes(Type givenType, Type attributeType, bool inherit)
		{
			return null;
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xB582C0", Offset = "0xB582C0", VA = "0xB582C0")]
		public static Type GetBaseType(Type givenType)
		{
			return null;
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xB6131C", Offset = "0xB6131C", VA = "0xB6131C")]
		public static bool IsTypeAssignableFrom(Type givenType, Type sourceType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xB6133C", Offset = "0xB6133C", VA = "0xB6133C")]
		public static Type GetNestedType(Type givenType, string name)
		{
			return null;
		}

		[Token(Token = "0x6001662")]
		public static string GetPropertyFirstName<T>()
		{
			return null;
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xB53BC0", Offset = "0xB53BC0", VA = "0xB53BC0")]
		public static string[] GetCommandLineArguements()
		{
			return null;
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xB55298", Offset = "0xB55298", VA = "0xB55298")]
		public static Type[] GetTypesOfType(Type givenType)
		{
			return null;
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xB61350", Offset = "0xB61350", VA = "0xB61350")]
		public static Type[] GetExportedTypesOfType(Type givenType)
		{
			return null;
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xB61384", Offset = "0xB61384", VA = "0xB61384")]
		public static bool IsTypeAbstract(Type givenType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001667")]
		private static IEnumerable<T> FindEvenInactiveComponentsInValidScenes<T>(bool searchAllScenes, bool stopOnMatch = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001668")]
		private static IEnumerable<T> FindEvenInactiveComponentsInScene<T>(Scene scene, bool stopOnMatch = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200031D")]
	[Obsolete("`VRTK_Simulator` has been superseded by the VRTK SDK Simulator. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_Simulator")]
	public class VRTK_Simulator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200031E")]
		public class Keys
		{
			[Token(Token = "0x40013DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public KeyCode forward;

			[Token(Token = "0x40013DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public KeyCode backward;

			[Token(Token = "0x40013DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public KeyCode strafeLeft;

			[Token(Token = "0x40013DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public KeyCode strafeRight;

			[Token(Token = "0x40013DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode left;

			[Token(Token = "0x40013DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public KeyCode right;

			[Token(Token = "0x40013E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyCode up;

			[Token(Token = "0x40013E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public KeyCode down;

			[Token(Token = "0x40013E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public KeyCode reset;

			[Token(Token = "0x6001674")]
			[Address(RVA = "0xB61A0C", Offset = "0xB61A0C", VA = "0xB61A0C")]
			public Keys()
			{
			}
		}

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Per default the keys on the left-hand side of the keyboard are used (WASD). They can be individually set as needed. The reset key brings the camera to its initial location.")]
		public Keys keys;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Typically the simulator should be turned off when not testing anymore. This option will do this automatically when outside the editor.")]
		public bool onlyInEditor;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Depending on the scale of the world the step size can be defined to increase or decrease movement speed.")]
		public float stepSize;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("An optional game object marking the position and rotation at which the camera should be initially placed.")]
		public Transform camStart;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform headset;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform playArea;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 initialPosition;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Quaternion initialRotation;

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xB61398", Offset = "0xB61398", VA = "0xB61398", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xB613EC", Offset = "0xB613EC", VA = "0xB613EC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xB61728", Offset = "0xB61728", VA = "0xB61728", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xB6177C", Offset = "0xB6177C", VA = "0xB6177C", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xB619E8", Offset = "0xB619E8", VA = "0xB619E8", Slot = "8")]
		protected virtual Vector3 overwriteY(Vector3 vector, float value)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xB619F0", Offset = "0xB619F0", VA = "0xB619F0")]
		public VRTK_Simulator()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[AddComponentMenu("VRTK/Scripts/Utilities/VRTK_VelocityEstimator")]
	public class VRTK_VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x2000320")]
		[CompilerGenerated]
		private sealed class <EstimateVelocity>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_VelocityEstimator <>4__this;

			[Token(Token = "0x40013ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x40013EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x170001AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001682")]
				[Address(RVA = "0xB62284", Offset = "0xB62284", VA = "0xB62284", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001684")]
				[Address(RVA = "0xB622CC", Offset = "0xB622CC", VA = "0xB622CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600167F")]
			[Address(RVA = "0xB61EAC", Offset = "0xB61EAC", VA = "0xB61EAC")]
			[DebuggerHidden]
			public <EstimateVelocity>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001680")]
			[Address(RVA = "0xB61EF0", Offset = "0xB61EF0", VA = "0xB61EF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001681")]
			[Address(RVA = "0xB61EF4", Offset = "0xB61EF4", VA = "0xB61EF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001683")]
			[Address(RVA = "0xB6228C", Offset = "0xB6228C", VA = "0xB6228C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Begin the sampling routine when the script is enabled.")]
		public bool autoStartSampling;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The number of frames to average when calculating velocity.")]
		public int velocityAverageFrames;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The number of frames to average when calculating angular velocity.")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3[] velocitySamples;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3[] angularVelocitySamples;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int currentSampleCount;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine calculateSamplesRoutine;

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xB61A30", Offset = "0xB61A30", VA = "0xB61A30", Slot = "4")]
		public virtual void StartEstimation()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xB61A78", Offset = "0xB61A78", VA = "0xB61A78", Slot = "5")]
		public virtual void EndEstimation()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xB61ABC", Offset = "0xB61ABC", VA = "0xB61ABC", Slot = "6")]
		public virtual Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xB61B84", Offset = "0xB61B84", VA = "0xB61B84", Slot = "7")]
		public virtual Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xB61C4C", Offset = "0xB61C4C", VA = "0xB61C4C", Slot = "8")]
		public virtual Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xB61D80", Offset = "0xB61D80", VA = "0xB61D80", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xB61DB8", Offset = "0xB61DB8", VA = "0xB61DB8", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xB61DC4", Offset = "0xB61DC4", VA = "0xB61DC4", Slot = "11")]
		protected virtual void InitArrays()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xB61E38", Offset = "0xB61E38", VA = "0xB61E38", Slot = "12")]
		[IteratorStateMachine(typeof(<EstimateVelocity>d__15))]
		protected virtual IEnumerator EstimateVelocity()
		{
			return null;
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xB61ED4", Offset = "0xB61ED4", VA = "0xB61ED4")]
		public VRTK_VelocityEstimator()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public abstract class SDK_Base : ScriptableObject
	{
		[Token(Token = "0x6001685")]
		[Address(RVA = "0xB622D4", Offset = "0xB622D4", VA = "0xB622D4", Slot = "4")]
		public virtual void OnBeforeSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xB622D8", Offset = "0xB622D8", VA = "0xB622D8", Slot = "5")]
		public virtual void OnAfterSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xB622DC", Offset = "0xB622DC", VA = "0xB622DC", Slot = "6")]
		public virtual void OnBeforeSetupUnload(VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xB622E0", Offset = "0xB622E0", VA = "0xB622E0", Slot = "7")]
		public virtual void OnAfterSetupUnload(VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xB622E4", Offset = "0xB622E4", VA = "0xB622E4")]
		protected SDK_Base()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public abstract class SDK_BaseBoundaries : SDK_Base
	{
		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Transform cachedPlayArea;

		[Token(Token = "0x600168A")]
		public abstract void InitBoundaries();

		[Token(Token = "0x600168B")]
		public abstract Transform GetPlayArea();

		[Token(Token = "0x600168C")]
		public abstract Vector3[] GetPlayAreaVertices();

		[Token(Token = "0x600168D")]
		public abstract float GetPlayAreaBorderThickness();

		[Token(Token = "0x600168E")]
		public abstract bool IsPlayAreaSizeCalibrated();

		[Token(Token = "0x600168F")]
		public abstract bool GetDrawAtRuntime();

		[Token(Token = "0x6001690")]
		public abstract void SetDrawAtRuntime(bool value);

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xB622EC", Offset = "0xB622EC", VA = "0xB622EC")]
		protected Transform GetSDKManagerPlayArea()
		{
			return null;
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xB62444", Offset = "0xB62444", VA = "0xB62444")]
		protected SDK_BaseBoundaries()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public struct VRTKSDKBaseControllerEventArgs
	{
		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;
	}
	[Token(Token = "0x2000324")]
	public delegate void VRTKSDKBaseControllerEventHandler(object sender, VRTKSDKBaseControllerEventArgs e);
	[Token(Token = "0x2000325")]
	public abstract class SDK_BaseController : SDK_Base
	{
		[Token(Token = "0x2000326")]
		public enum ButtonTypes
		{
			[Token(Token = "0x40013F9")]
			ButtonOne,
			[Token(Token = "0x40013FA")]
			ButtonTwo,
			[Token(Token = "0x40013FB")]
			Grip,
			[Token(Token = "0x40013FC")]
			GripHairline,
			[Token(Token = "0x40013FD")]
			StartMenu,
			[Token(Token = "0x40013FE")]
			Trigger,
			[Token(Token = "0x40013FF")]
			TriggerHairline,
			[Token(Token = "0x4001400")]
			Touchpad,
			[Token(Token = "0x4001401")]
			TouchpadTwo,
			[Token(Token = "0x4001402")]
			MiddleFinger,
			[Token(Token = "0x4001403")]
			RingFinger,
			[Token(Token = "0x4001404")]
			PinkyFinger
		}

		[Token(Token = "0x2000327")]
		public enum ButtonPressTypes
		{
			[Token(Token = "0x4001406")]
			Press,
			[Token(Token = "0x4001407")]
			PressDown,
			[Token(Token = "0x4001408")]
			PressUp,
			[Token(Token = "0x4001409")]
			Touch,
			[Token(Token = "0x400140A")]
			TouchDown,
			[Token(Token = "0x400140B")]
			TouchUp
		}

		[Token(Token = "0x2000328")]
		public enum ControllerElements
		{
			[Token(Token = "0x400140D")]
			AttachPoint,
			[Token(Token = "0x400140E")]
			Trigger,
			[Token(Token = "0x400140F")]
			GripLeft,
			[Token(Token = "0x4001410")]
			GripRight,
			[Token(Token = "0x4001411")]
			Touchpad,
			[Token(Token = "0x4001412")]
			ButtonOne,
			[Token(Token = "0x4001413")]
			ButtonTwo,
			[Token(Token = "0x4001414")]
			SystemMenu,
			[Token(Token = "0x4001415")]
			Body,
			[Token(Token = "0x4001416")]
			StartMenu,
			[Token(Token = "0x4001417")]
			TouchpadTwo
		}

		[Token(Token = "0x2000329")]
		public enum ControllerHand
		{
			[Token(Token = "0x4001419")]
			None,
			[Token(Token = "0x400141A")]
			Left,
			[Token(Token = "0x400141B")]
			Right
		}

		[Token(Token = "0x200032A")]
		public enum ControllerType
		{
			[Token(Token = "0x400141D")]
			Undefined,
			[Token(Token = "0x400141E")]
			Custom,
			[Token(Token = "0x400141F")]
			Simulator_Hand,
			[Token(Token = "0x4001420")]
			SteamVR_ViveWand,
			[Token(Token = "0x4001421")]
			SteamVR_OculusTouch,
			[Token(Token = "0x4001422")]
			Oculus_OculusTouch,
			[Token(Token = "0x4001423")]
			Daydream_Controller,
			[Token(Token = "0x4001424")]
			Ximmerse_Flip,
			[Token(Token = "0x4001425")]
			SteamVR_ValveKnuckles,
			[Token(Token = "0x4001426")]
			Oculus_OculusGamepad,
			[Token(Token = "0x4001427")]
			Oculus_OculusRemote,
			[Token(Token = "0x4001428")]
			Oculus_GearVRHMD,
			[Token(Token = "0x4001429")]
			Oculus_GearVRController,
			[Token(Token = "0x400142A")]
			WindowsMR_MotionController,
			[Token(Token = "0x400142B")]
			SteamVR_WindowsMRController
		}

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform defaultSDKLeftControllerModel;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform defaultSDKRightControllerModel;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VRTK_SDKSetup _sdkSetup;

		[Token(Token = "0x170001AC")]
		private VRTK_SDKSetup sdkSetup
		{
			[Token(Token = "0x60016C5")]
			[Address(RVA = "0xB63298", Offset = "0xB63298", VA = "0xB63298")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x140000E8")]
		public event VRTKSDKBaseControllerEventHandler LeftControllerReady
		{
			[Token(Token = "0x6001697")]
			[Address(RVA = "0xB6263C", Offset = "0xB6263C", VA = "0xB6263C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001698")]
			[Address(RVA = "0xB626D8", Offset = "0xB626D8", VA = "0xB626D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000E9")]
		public event VRTKSDKBaseControllerEventHandler RightControllerReady
		{
			[Token(Token = "0x6001699")]
			[Address(RVA = "0xB62774", Offset = "0xB62774", VA = "0xB62774")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600169A")]
			[Address(RVA = "0xB62810", Offset = "0xB62810", VA = "0xB62810")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000EA")]
		public event VRTKSDKBaseControllerEventHandler LeftControllerModelReady
		{
			[Token(Token = "0x600169B")]
			[Address(RVA = "0xB628AC", Offset = "0xB628AC", VA = "0xB628AC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600169C")]
			[Address(RVA = "0xB62948", Offset = "0xB62948", VA = "0xB62948")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000EB")]
		public event VRTKSDKBaseControllerEventHandler RightControllerModelReady
		{
			[Token(Token = "0x600169D")]
			[Address(RVA = "0xB629E4", Offset = "0xB629E4", VA = "0xB629E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600169E")]
			[Address(RVA = "0xB62A80", Offset = "0xB62A80", VA = "0xB62A80")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xB62B1C", Offset = "0xB62B1C", VA = "0xB62B1C", Slot = "8")]
		public virtual void OnControllerReady(ControllerHand hand)
		{
		}

		[Token(Token = "0x60016A0")]
		public abstract void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options);

		[Token(Token = "0x60016A1")]
		public abstract void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options);

		[Token(Token = "0x60016A2")]
		public abstract ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016A3")]
		public abstract string GetControllerDefaultColliderPath(ControllerHand hand);

		[Token(Token = "0x60016A4")]
		public abstract string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false);

		[Token(Token = "0x60016A5")]
		public abstract uint GetControllerIndex(GameObject controller);

		[Token(Token = "0x60016A6")]
		public abstract GameObject GetControllerByIndex(uint index, bool actual = false);

		[Token(Token = "0x60016A7")]
		public abstract Transform GetControllerOrigin(VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016A8")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public abstract Transform GenerateControllerPointerOrigin(GameObject parent);

		[Token(Token = "0x60016A9")]
		public abstract GameObject GetControllerLeftHand(bool actual = false);

		[Token(Token = "0x60016AA")]
		public abstract GameObject GetControllerRightHand(bool actual = false);

		[Token(Token = "0x60016AB")]
		public abstract bool IsControllerLeftHand(GameObject controller);

		[Token(Token = "0x60016AC")]
		public abstract bool IsControllerRightHand(GameObject controller);

		[Token(Token = "0x60016AD")]
		public abstract bool IsControllerLeftHand(GameObject controller, bool actual);

		[Token(Token = "0x60016AE")]
		public abstract bool IsControllerRightHand(GameObject controller, bool actual);

		[Token(Token = "0x60016AF")]
		public abstract bool WaitForControllerModel(ControllerHand hand);

		[Token(Token = "0x60016B0")]
		public abstract GameObject GetControllerModel(GameObject controller);

		[Token(Token = "0x60016B1")]
		public abstract GameObject GetControllerModel(ControllerHand hand);

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xB62BD4", Offset = "0xB62BD4", VA = "0xB62BD4", Slot = "27")]
		public virtual ControllerHand GetControllerModelHand(GameObject controllerModel)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x60016B3")]
		public abstract GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016B4")]
		public abstract void SetControllerRenderModelWheel(GameObject renderModel, bool state);

		[Token(Token = "0x60016B5")]
		public abstract void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f);

		[Token(Token = "0x60016B6")]
		public abstract bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip);

		[Token(Token = "0x60016B7")]
		public abstract SDK_ControllerHapticModifiers GetHapticModifiers();

		[Token(Token = "0x60016B8")]
		public abstract Vector3 GetVelocity(VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016B9")]
		public abstract Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016BA")]
		public abstract bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity);

		[Token(Token = "0x60016BB")]
		public abstract Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016BC")]
		public abstract float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016BD")]
		public abstract float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016BE")]
		public abstract bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference);

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xB62D30", Offset = "0xB62D30", VA = "0xB62D30", Slot = "40")]
		protected virtual GameObject GetSDKManagerControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xB62E2C", Offset = "0xB62E2C", VA = "0xB62E2C", Slot = "41")]
		protected virtual GameObject GetSDKManagerControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xB62F28", Offset = "0xB62F28", VA = "0xB62F28", Slot = "42")]
		protected virtual bool CheckActualOrScriptAliasControllerIsLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xB62F84", Offset = "0xB62F84", VA = "0xB62F84", Slot = "43")]
		protected virtual bool CheckActualOrScriptAliasControllerIsRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xB62FE0", Offset = "0xB62FE0", VA = "0xB62FE0", Slot = "44")]
		protected virtual bool CheckControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xB6313C", Offset = "0xB6313C", VA = "0xB6313C", Slot = "45")]
		protected virtual bool CheckControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xB63348", Offset = "0xB63348", VA = "0xB63348", Slot = "46")]
		protected virtual GameObject GetControllerModelFromController(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xB63408", Offset = "0xB63408", VA = "0xB63408", Slot = "47")]
		protected virtual GameObject GetSDKManagerControllerModelForHand(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xB63524", Offset = "0xB63524", VA = "0xB63524", Slot = "48")]
		protected virtual GameObject GetActualController(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xB63674", Offset = "0xB63674", VA = "0xB63674", Slot = "49")]
		protected virtual void OnControllerModelReady(ControllerHand hand, VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xB636DC", Offset = "0xB636DC", VA = "0xB636DC", Slot = "50")]
		protected virtual bool ShouldWaitForControllerModel(ControllerHand hand, bool ignoreChildCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xB63758", Offset = "0xB63758", VA = "0xB63758", Slot = "51")]
		protected virtual bool IsDefaultControllerModel(Transform givenDefault, GameObject givenActual, bool ignoreChildCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xB63864", Offset = "0xB63864", VA = "0xB63864")]
		protected SDK_BaseController()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class SDK_ControllerHapticModifiers
	{
		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float durationModifier;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intervalModifier;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort maxHapticVibration;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int hapticsBufferSize;

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xB6386C", Offset = "0xB6386C", VA = "0xB6386C")]
		public SDK_ControllerHapticModifiers()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public abstract class SDK_BaseHeadset : SDK_Base
	{
		[Token(Token = "0x200032D")]
		public enum HeadsetType
		{
			[Token(Token = "0x4001433")]
			Undefined,
			[Token(Token = "0x4001434")]
			Simulator,
			[Token(Token = "0x4001435")]
			HTCVive,
			[Token(Token = "0x4001436")]
			OculusRiftDK1,
			[Token(Token = "0x4001437")]
			OculusRiftDK2,
			[Token(Token = "0x4001438")]
			OculusRift,
			[Token(Token = "0x4001439")]
			OculusGearVR,
			[Token(Token = "0x400143A")]
			GoogleDaydream,
			[Token(Token = "0x400143B")]
			GoogleCardboard,
			[Token(Token = "0x400143C")]
			HyperealVR,
			[Token(Token = "0x400143D")]
			WindowsMixedReality
		}

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Transform cachedHeadset;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Transform cachedHeadsetCamera;

		[Token(Token = "0x60016CE")]
		public abstract void ProcessUpdate(Dictionary<string, object> options);

		[Token(Token = "0x60016CF")]
		public abstract void ProcessFixedUpdate(Dictionary<string, object> options);

		[Token(Token = "0x60016D0")]
		public abstract Transform GetHeadset();

		[Token(Token = "0x60016D1")]
		public abstract Transform GetHeadsetCamera();

		[Token(Token = "0x60016D2")]
		public abstract string GetHeadsetType();

		[Token(Token = "0x60016D3")]
		public abstract Vector3 GetHeadsetVelocity();

		[Token(Token = "0x60016D4")]
		public abstract Vector3 GetHeadsetAngularVelocity();

		[Token(Token = "0x60016D5")]
		public abstract void HeadsetFade(Color color, float duration, bool fadeOverlay = false);

		[Token(Token = "0x60016D6")]
		public abstract bool HasHeadsetFade(Transform obj);

		[Token(Token = "0x60016D7")]
		public abstract void AddHeadsetFade(Transform camera);

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xB6388C", Offset = "0xB6388C", VA = "0xB6388C")]
		protected Transform GetSDKManagerHeadset()
		{
			return null;
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xB63A34", Offset = "0xB63A34", VA = "0xB63A34", Slot = "18")]
		protected virtual string ScrapeHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xB63ED4", Offset = "0xB63ED4", VA = "0xB63ED4")]
		protected string CleanPropertyString(string inputString)
		{
			return null;
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xB63F9C", Offset = "0xB63F9C", VA = "0xB63F9C")]
		protected SDK_BaseHeadset()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public abstract class SDK_BaseSystem : SDK_Base
	{
		[Token(Token = "0x60016DC")]
		public abstract bool IsDisplayOnDesktop();

		[Token(Token = "0x60016DD")]
		public abstract bool ShouldAppRenderWithLowResources();

		[Token(Token = "0x60016DE")]
		public abstract void ForceInterleavedReprojectionOn(bool force);

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xB63FA4", Offset = "0xB63FA4", VA = "0xB63FA4")]
		protected SDK_BaseSystem()
		{
		}
	}
	[Token(Token = "0x200032F")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
	public sealed class SDK_DescriptionAttribute : Attribute
	{
		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string prettyName;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string symbol;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string vrDeviceName;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int index;

		[Token(Token = "0x170001AD")]
		public bool describesFallbackSDK
		{
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0xB63FAC", Offset = "0xB63FAC", VA = "0xB63FAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xB63FF8", Offset = "0xB63FF8", VA = "0xB63FF8")]
		public SDK_DescriptionAttribute(string prettyName, string symbol, string vrDeviceName, string buildTargetGroupName, int index = 0)
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xB641E4", Offset = "0xB641E4", VA = "0xB641E4")]
		public SDK_DescriptionAttribute(Type typeToCopyExistingDescriptionFrom, int index = 0)
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xB64534", Offset = "0xB64534", VA = "0xB64534")]
		public static SDK_DescriptionAttribute[] GetDescriptions(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000331")]
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]
	public sealed class SDK_ScriptingDefineSymbolPredicateAttribute : Attribute, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4001444")]
		public const string RemovableSymbolPrefix = "VRTK_DEFINE_";

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string symbol;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string buildTargetGroupName;

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xB64764", Offset = "0xB64764", VA = "0xB64764")]
		private SDK_ScriptingDefineSymbolPredicateAttribute()
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xB6476C", Offset = "0xB6476C", VA = "0xB6476C")]
		public SDK_ScriptingDefineSymbolPredicateAttribute(string symbol, string buildTargetGroupName)
		{
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xB64964", Offset = "0xB64964", VA = "0xB64964")]
		public SDK_ScriptingDefineSymbolPredicateAttribute(SDK_ScriptingDefineSymbolPredicateAttribute attributeToCopy)
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xB649AC", Offset = "0xB649AC", VA = "0xB649AC", Slot = "7")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xB649B0", Offset = "0xB649B0", VA = "0xB649B0", Slot = "8")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xB649B8", Offset = "0xB649B8", VA = "0xB649B8")]
		private void SetBuildTarget(string groupName)
		{
		}
	}
	[Token(Token = "0x2000332")]
	[SDK_Description(typeof(SDK_DaydreamSystem), 0)]
	public class SDK_DaydreamBoundaries : SDK_FallbackBoundaries
	{
		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xB649C0", Offset = "0xB649C0", VA = "0xB649C0")]
		public SDK_DaydreamBoundaries()
		{
		}
	}
	[Token(Token = "0x2000333")]
	[SDK_Description(typeof(SDK_DaydreamSystem), 0)]
	public class SDK_DaydreamController : SDK_FallbackController
	{
		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xB649D0", Offset = "0xB649D0", VA = "0xB649D0")]
		public SDK_DaydreamController()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public static class SDK_DaydreamDefines
	{
		[Token(Token = "0x4001447")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_DAYDREAM";

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0xB649E0", Offset = "0xB649E0", VA = "0xB649E0")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_DAYDREAM", "Android")]
		private static bool IsDaydreamAvailable()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000335")]
	[SDK_Description(typeof(SDK_DaydreamSystem), 0)]
	public class SDK_DaydreamHeadset : SDK_FallbackHeadset
	{
		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xB64A60", Offset = "0xB64A60", VA = "0xB64A60")]
		public SDK_DaydreamHeadset()
		{
		}
	}
	[Token(Token = "0x2000336")]
	[SDK_Description("Google Daydream (Android:Daydream)", "VRTK_DEFINE_SDK_DAYDREAM", "daydream", "Android", 0)]
	public class SDK_DaydreamSystem : SDK_FallbackSystem
	{
		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xB64A70", Offset = "0xB64A70", VA = "0xB64A70")]
		public SDK_DaydreamSystem()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[SDK_Description(typeof(SDK_FallbackSystem), 0)]
	public class SDK_FallbackBoundaries : SDK_BaseBoundaries
	{
		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xB64A80", Offset = "0xB64A80", VA = "0xB64A80", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xB64A84", Offset = "0xB64A84", VA = "0xB64A84", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xB64A8C", Offset = "0xB64A8C", VA = "0xB64A8C", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xB64A94", Offset = "0xB64A94", VA = "0xB64A94", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xB64A9C", Offset = "0xB64A9C", VA = "0xB64A9C", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xB64AA4", Offset = "0xB64AA4", VA = "0xB64AA4", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xB64AAC", Offset = "0xB64AAC", VA = "0xB64AAC", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xB649C8", Offset = "0xB649C8", VA = "0xB649C8")]
		public SDK_FallbackBoundaries()
		{
		}
	}
	[Token(Token = "0x2000338")]
	[SDK_Description(typeof(SDK_FallbackSystem), 0)]
	public class SDK_FallbackController : SDK_BaseController
	{
		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xB64AB0", Offset = "0xB64AB0", VA = "0xB64AB0", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xB64AB4", Offset = "0xB64AB4", VA = "0xB64AB4", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xB64AB8", Offset = "0xB64AB8", VA = "0xB64AB8", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xB64AC0", Offset = "0xB64AC0", VA = "0xB64AC0", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xB64B00", Offset = "0xB64B00", VA = "0xB64B00", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xB64B40", Offset = "0xB64B40", VA = "0xB64B40", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xB64B48", Offset = "0xB64B48", VA = "0xB64B48", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xB64B50", Offset = "0xB64B50", VA = "0xB64B50", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xB64B58", Offset = "0xB64B58", VA = "0xB64B58", Slot = "17")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xB64B60", Offset = "0xB64B60", VA = "0xB64B60", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xB64B68", Offset = "0xB64B68", VA = "0xB64B68", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xB64B70", Offset = "0xB64B70", VA = "0xB64B70", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xB64B78", Offset = "0xB64B78", VA = "0xB64B78", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xB64B80", Offset = "0xB64B80", VA = "0xB64B80", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xB64B88", Offset = "0xB64B88", VA = "0xB64B88", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xB64B90", Offset = "0xB64B90", VA = "0xB64B90", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xB64B98", Offset = "0xB64B98", VA = "0xB64B98", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xB64BA0", Offset = "0xB64BA0", VA = "0xB64BA0", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xB64BA8", Offset = "0xB64BA8", VA = "0xB64BA8", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xB64BB0", Offset = "0xB64BB0", VA = "0xB64BB0", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xB64BB4", Offset = "0xB64BB4", VA = "0xB64BB4", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xB64BB8", Offset = "0xB64BB8", VA = "0xB64BB8", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xB64BC0", Offset = "0xB64BC0", VA = "0xB64BC0", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xB64C34", Offset = "0xB64C34", VA = "0xB64C34", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xB64C78", Offset = "0xB64C78", VA = "0xB64C78", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xB64CBC", Offset = "0xB64CBC", VA = "0xB64CBC", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xB64CD4", Offset = "0xB64CD4", VA = "0xB64CD4", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xB64D14", Offset = "0xB64D14", VA = "0xB64D14", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xB64D1C", Offset = "0xB64D1C", VA = "0xB64D1C", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xB64D24", Offset = "0xB64D24", VA = "0xB64D24", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xB649D8", Offset = "0xB649D8", VA = "0xB649D8")]
		public SDK_FallbackController()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[SDK_Description(typeof(SDK_FallbackSystem), 0)]
	public class SDK_FallbackHeadset : SDK_BaseHeadset
	{
		[Token(Token = "0x6001719")]
		[Address(RVA = "0xB64D2C", Offset = "0xB64D2C", VA = "0xB64D2C", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xB64D30", Offset = "0xB64D30", VA = "0xB64D30", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xB64D34", Offset = "0xB64D34", VA = "0xB64D34", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xB64D3C", Offset = "0xB64D3C", VA = "0xB64D3C", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xB64D44", Offset = "0xB64D44", VA = "0xB64D44", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xB64D84", Offset = "0xB64D84", VA = "0xB64D84", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xB64DC8", Offset = "0xB64DC8", VA = "0xB64DC8", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xB64E0C", Offset = "0xB64E0C", VA = "0xB64E0C", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xB64E10", Offset = "0xB64E10", VA = "0xB64E10", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xB64E18", Offset = "0xB64E18", VA = "0xB64E18", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xB64A68", Offset = "0xB64A68", VA = "0xB64A68")]
		public SDK_FallbackHeadset()
		{
		}
	}
	[Token(Token = "0x200033A")]
	[SDK_Description("Fallback", null, null, null, 0)]
	public class SDK_FallbackSystem : SDK_BaseSystem
	{
		[Token(Token = "0x6001724")]
		[Address(RVA = "0xB64E1C", Offset = "0xB64E1C", VA = "0xB64E1C", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xB64E24", Offset = "0xB64E24", VA = "0xB64E24", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xB64E2C", Offset = "0xB64E2C", VA = "0xB64E2C", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xB64A78", Offset = "0xB64A78", VA = "0xB64A78")]
		public SDK_FallbackSystem()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[SDK_Description(typeof(SDK_HyperealVRSystem), 0)]
	public class SDK_HyperealVRBoundaries : SDK_FallbackBoundaries
	{
		[Token(Token = "0x6001728")]
		[Address(RVA = "0xB64E30", Offset = "0xB64E30", VA = "0xB64E30")]
		public SDK_HyperealVRBoundaries()
		{
		}
	}
	[Token(Token = "0x200033C")]
	[SDK_Description(typeof(SDK_HyperealVRSystem), 0)]
	public class SDK_HyperealVRController : SDK_FallbackController
	{
		[Token(Token = "0x6001729")]
		[Address(RVA = "0xB64E38", Offset = "0xB64E38", VA = "0xB64E38")]
		public SDK_HyperealVRController()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public static class SDK_HyperealVRDefines
	{
		[Token(Token = "0x4001448")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_HYPEREALVR";

		[Token(Token = "0x4001449")]
		private const string BuildTargetGroupName = "Standalone";

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xB64E40", Offset = "0xB64E40", VA = "0xB64E40")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_HYPEREALVR", "Standalone")]
		private static bool IsHyperealVRAvailable()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200033E")]
	[SDK_Description(typeof(SDK_HyperealVRSystem), 0)]
	public class SDK_HyperealVRHeadset : SDK_FallbackHeadset
	{
		[Token(Token = "0x600172B")]
		[Address(RVA = "0xB64EC0", Offset = "0xB64EC0", VA = "0xB64EC0")]
		public SDK_HyperealVRHeadset()
		{
		}
	}
	[Token(Token = "0x200033F")]
	[SDK_Description("HyperealVR (Standalone)", "VRTK_DEFINE_SDK_HYPEREALVR", null, "Standalone", 0)]
	public class SDK_HyperealVRSystem : SDK_FallbackSystem
	{
		[Token(Token = "0x600172C")]
		[Address(RVA = "0xB64EC8", Offset = "0xB64EC8", VA = "0xB64EC8")]
		public SDK_HyperealVRSystem()
		{
		}
	}
	[Token(Token = "0x2000340")]
	[SDK_Description(typeof(SDK_OculusSystem), 1)]
	[SDK_Description(typeof(SDK_OculusSystem), 0)]
	public class SDK_OculusBoundaries : SDK_BaseBoundaries
	{
		[Token(Token = "0x600172D")]
		[Address(RVA = "0xB64ED0", Offset = "0xB64ED0", VA = "0xB64ED0", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xB64ED4", Offset = "0xB64ED4", VA = "0xB64ED4", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xB64FCC", Offset = "0xB64FCC", VA = "0xB64FCC", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xB65134", Offset = "0xB65134", VA = "0xB65134", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xB65140", Offset = "0xB65140", VA = "0xB65140", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xB65148", Offset = "0xB65148", VA = "0xB65148", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xB65150", Offset = "0xB65150", VA = "0xB65150", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xB65154", Offset = "0xB65154", VA = "0xB65154")]
		public SDK_OculusBoundaries()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[SDK_Description(typeof(SDK_OculusSystem), 0)]
	[SDK_Description(typeof(SDK_OculusSystem), 1)]
	public class SDK_OculusController : SDK_BaseController
	{
		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected SDK_OculusBoundaries cachedBoundariesSDK;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_TrackedController cachedLeftController;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected VRTK_TrackedController cachedRightController;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected OVRInput.RawAxis2D[] thumbsticks;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected OVRInput.RawAxis2D[] touchpads;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected OVRInput.RawAxis1D[] triggers;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected OVRInput.RawAxis1D[] grips;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected OVRInput.RawNearTouch[] triggerSense;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected OVRInput.RawNearTouch[] touchpadSense;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_VelocityEstimator cachedLeftVelocityEstimator;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_VelocityEstimator cachedRightVelocityEstimator;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected bool[] previousHairTriggerState;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool[] currentHairTriggerState;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool[] previousHairGripState;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool[] currentHairGripState;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] hairTriggerLimit;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float[] hairGripLimit;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected OVRHapticsClip hapticsProceduralClipLeft;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected OVRHapticsClip hapticsProceduralClipRight;

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xB6515C", Offset = "0xB6515C", VA = "0xB6515C", Slot = "5")]
		public override void OnAfterSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xB65258", Offset = "0xB65258", VA = "0xB65258", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xB65268", Offset = "0xB65268", VA = "0xB65268", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xB6526C", Offset = "0xB6526C", VA = "0xB6526C", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xB6531C", Offset = "0xB6531C", VA = "0xB6531C", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xB65400", Offset = "0xB65400", VA = "0xB65400", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xB659F8", Offset = "0xB659F8", VA = "0xB659F8", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xB65A9C", Offset = "0xB65A9C", VA = "0xB65A9C", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xB65C44", Offset = "0xB65C44", VA = "0xB65C44", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xB65C68", Offset = "0xB65C68", VA = "0xB65C68", Slot = "17")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xB65C70", Offset = "0xB65C70", VA = "0xB65C70", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xB65D4C", Offset = "0xB65D4C", VA = "0xB65D4C", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xB65E28", Offset = "0xB65E28", VA = "0xB65E28", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xB65E38", Offset = "0xB65E38", VA = "0xB65E38", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xB65E48", Offset = "0xB65E48", VA = "0xB65E48", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xB65E5C", Offset = "0xB65E5C", VA = "0xB65E5C", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xB65E70", Offset = "0xB65E70", VA = "0xB65E70", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xB65ECC", Offset = "0xB65ECC", VA = "0xB65ECC", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xB65EDC", Offset = "0xB65EDC", VA = "0xB65EDC", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xB66100", Offset = "0xB66100", VA = "0xB66100", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xB66108", Offset = "0xB66108", VA = "0xB66108", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xB6610C", Offset = "0xB6610C", VA = "0xB6610C", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xB662E4", Offset = "0xB662E4", VA = "0xB662E4", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xB66468", Offset = "0xB66468", VA = "0xB66468", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xB664E8", Offset = "0xB664E8", VA = "0xB664E8", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xB665E8", Offset = "0xB665E8", VA = "0xB665E8", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xB66740", Offset = "0xB66740", VA = "0xB66740", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xB6674C", Offset = "0xB6674C", VA = "0xB6674C", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xB668D8", Offset = "0xB668D8", VA = "0xB668D8", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xB669F4", Offset = "0xB669F4", VA = "0xB669F4", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xB66A64", Offset = "0xB66A64", VA = "0xB66A64", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xB66D7C", Offset = "0xB66D7C", VA = "0xB66D7C", Slot = "52")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xB66E94", Offset = "0xB66E94", VA = "0xB66E94", Slot = "53")]
		protected virtual void RegisterAvatarEvents()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xB66ED4", Offset = "0xB66ED4", VA = "0xB66ED4", Slot = "54")]
		protected virtual void BothControllersReady()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xB66F70", Offset = "0xB66F70", VA = "0xB66F70", Slot = "55")]
		protected virtual void ProcessControllerUpdate(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xB671E8", Offset = "0xB671E8", VA = "0xB671E8", Slot = "56")]
		protected virtual void SetTrackedControllerCaches(bool forceRefresh = false)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xB67598", Offset = "0xB67598", VA = "0xB67598", Slot = "57")]
		protected virtual VRTK_TrackedController GetTrackedObject(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xB67618", Offset = "0xB67618", VA = "0xB67618", Slot = "58")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, OVRInput.Button button)
		{
			return default(bool);
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xB677A0", Offset = "0xB677A0", VA = "0xB677A0", Slot = "59")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, OVRInput.Touch button)
		{
			return default(bool);
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xB6792C", Offset = "0xB6792C", VA = "0xB6792C", Slot = "60")]
		protected virtual OVRInput.Controller GetControllerMask(uint index)
		{
			return default(OVRInput.Controller);
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xB67A08", Offset = "0xB67A08", VA = "0xB67A08", Slot = "61")]
		protected virtual OVRInput.RawAxis2D GetTouchpadAxisMask(uint index)
		{
			return default(OVRInput.RawAxis2D);
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xB67A70", Offset = "0xB67A70", VA = "0xB67A70", Slot = "62")]
		protected virtual OVRInput.Touch GetTouchpadTouchMask()
		{
			return default(OVRInput.Touch);
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xB67AB0", Offset = "0xB67AB0", VA = "0xB67AB0", Slot = "63")]
		protected virtual OVRInput.Button GetTouchpadButtonMask()
		{
			return default(OVRInput.Button);
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xB67AF0", Offset = "0xB67AF0", VA = "0xB67AF0", Slot = "64")]
		protected virtual void UpdateHairValues(uint index, float axisValue, float hairDelta, ref bool previousState, ref bool currentState, ref float hairLimit)
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0xB67B64", Offset = "0xB67B64", VA = "0xB67B64", Slot = "65")]
		protected virtual SDK_OculusBoundaries GetBoundariesSDK()
		{
			return null;
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xB67D10", Offset = "0xB67D10", VA = "0xB67D10", Slot = "66")]
		protected virtual bool HasAvatar(bool controllersAreVisible = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xB67D30", Offset = "0xB67D30", VA = "0xB67D30", Slot = "67")]
		protected virtual GameObject GetAvatar()
		{
			return null;
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xB67D50", Offset = "0xB67D50", VA = "0xB67D50")]
		public SDK_OculusController()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public static class SDK_OculusDefines
	{
		[Token(Token = "0x400145D")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_OCULUS";

		[Token(Token = "0x400145E")]
		public const string AvatarScriptingDefineSymbol = "VRTK_DEFINE_SDK_OCULUS_AVATAR";

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xB68018", Offset = "0xB68018", VA = "0xB68018")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_OCULUS_UTILITIES_1_12_0_OR_NEWER", "Android")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_OCULUS_UTILITIES_1_12_0_OR_NEWER", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS", "Android")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS", "Standalone")]
		private static bool IsUtilitiesVersion1120OrNewer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xB681DC", Offset = "0xB681DC", VA = "0xB681DC")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_OCULUS_UTILITIES_1_11_0_OR_OLDER", "Android")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS", "Android")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_OCULUS_UTILITIES_1_11_0_OR_OLDER", "Standalone")]
		private static bool IsUtilitiesVersion1110OrOlder()
		{
			return default(bool);
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xB68274", Offset = "0xB68274", VA = "0xB68274")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS_AVATAR", "Android")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_OCULUS_AVATAR", "Standalone")]
		private static bool IsAvatarAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xB680B0", Offset = "0xB680B0", VA = "0xB680B0")]
		private static Version GetOculusWrapperVersion()
		{
			return null;
		}
	}
	[Token(Token = "0x2000343")]
	[SDK_Description(typeof(SDK_OculusSystem), 1)]
	[SDK_Description(typeof(SDK_OculusSystem), 0)]
	public class SDK_OculusHeadset : SDK_BaseHeadset
	{
		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xB68308", Offset = "0xB68308", VA = "0xB68308", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xB6830C", Offset = "0xB6830C", VA = "0xB6830C", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xB68310", Offset = "0xB68310", VA = "0xB68310", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xB683EC", Offset = "0xB683EC", VA = "0xB683EC", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xB68494", Offset = "0xB68494", VA = "0xB68494", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xB68540", Offset = "0xB68540", VA = "0xB68540", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xB68610", Offset = "0xB68610", VA = "0xB68610", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xB68644", Offset = "0xB68644", VA = "0xB68644", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xB6864C", Offset = "0xB6864C", VA = "0xB6864C", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xB686D4", Offset = "0xB686D4", VA = "0xB686D4", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xB687B8", Offset = "0xB687B8", VA = "0xB687B8", Slot = "19")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xB68910", Offset = "0xB68910", VA = "0xB68910")]
		public SDK_OculusHeadset()
		{
		}
	}
	[Token(Token = "0x2000344")]
	[SDK_Description("GearVR (Android:Oculus)", "VRTK_DEFINE_SDK_OCULUS", "Oculus", "Android", 1)]
	[SDK_Description("Oculus Rift (Standalone:Oculus)", "VRTK_DEFINE_SDK_OCULUS", "Oculus", "Standalone", 0)]
	public class SDK_OculusSystem : SDK_BaseSystem
	{
		[Token(Token = "0x6001775")]
		[Address(RVA = "0xB68918", Offset = "0xB68918", VA = "0xB68918", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xB68920", Offset = "0xB68920", VA = "0xB68920", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xB68928", Offset = "0xB68928", VA = "0xB68928", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xB6892C", Offset = "0xB6892C", VA = "0xB6892C")]
		public SDK_OculusSystem()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class SDK_ControllerSim : MonoBehaviour
	{
		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool selected;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_VelocityEstimator cachedVelocityEstimator;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float magnitude;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Vector3 axis;

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xB68934", Offset = "0xB68934", VA = "0xB68934")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xB68964", Offset = "0xB68964", VA = "0xB68964")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xB68994", Offset = "0xB68994", VA = "0xB68994", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xB689A0", Offset = "0xB689A0", VA = "0xB689A0", Slot = "5")]
		protected virtual void SetCaches()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xB68ABC", Offset = "0xB68ABC", VA = "0xB68ABC")]
		public SDK_ControllerSim()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class SDK_InputSimulator : MonoBehaviour
	{
		[Token(Token = "0x2000347")]
		public enum MouseInputMode
		{
			[Token(Token = "0x400149C")]
			Always,
			[Token(Token = "0x400149D")]
			RequiresButtonPress
		}

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General Settings")]
		[Tooltip("Show control information in the upper left corner of the screen.")]
		public bool showControlHints;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Hide hands when disabling them.")]
		public bool hideHandsAtSwitch;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Reset hand position and rotation when enabling them.")]
		public bool resetHandsAtSwitch;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Displays an axis helper to show which axis the hands will be moved through.")]
		public bool showHandAxisHelpers;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Lock the mouse cursor to the game window.")]
		[Header("Mouse Cursor Lock Settings")]
		public bool lockMouseToView;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Whether the mouse movement always acts as input or requires a button press.")]
		public MouseInputMode mouseMovementInput;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Manual Adjustment Settings")]
		[Tooltip("Adjust hand movement speed.")]
		public float handMoveMultiplier;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Adjust hand rotation speed.")]
		public float handRotationMultiplier;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Adjust player movement speed.")]
		public float playerMoveMultiplier;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Adjust player rotation speed.")]
		public float playerRotationMultiplier;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Adjust player sprint speed.")]
		public float playerSprintMultiplier;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Adjust the speed of the cursor movement in locked mode.")]
		public float lockedCursorMultiplier;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The Colour of the GameObject representing the left hand.")]
		public Color leftHandColor;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The Colour of the GameObject representing the right hand.")]
		public Color rightHandColor;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Operation Key Binding Settings")]
		[Tooltip("Key used to enable mouse input if a button press is required.")]
		public KeyCode mouseMovementKey;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Key used to toggle control hints on/off.")]
		public KeyCode toggleControlHints;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Key used to toggle control hints on/off.")]
		public KeyCode toggleMouseLock;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Key used to switch between left and righ hand.")]
		public KeyCode changeHands;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Key used to switch hands On/Off.")]
		public KeyCode handsOnOff;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Key used to switch between positional and rotational movement.")]
		public KeyCode rotationPosition;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Key used to switch between X/Y and X/Z axis.")]
		public KeyCode changeAxis;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Key used to distance pickup with left hand.")]
		public KeyCode distancePickupLeft;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Key used to distance pickup with right hand.")]
		public KeyCode distancePickupRight;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Key used to enable distance pickup.")]
		public KeyCode distancePickupModifier;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Key used to move forward.")]
		[Header("Movement Key Binding Settings")]
		public KeyCode moveForward;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Key used to move to the left.")]
		public KeyCode moveLeft;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Key used to move backwards.")]
		public KeyCode moveBackward;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Key used to move to the right.")]
		public KeyCode moveRight;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Key used to sprint.")]
		public KeyCode sprint;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Controller Key Binding Settings")]
		[Tooltip("Key used to simulate trigger button.")]
		public KeyCode triggerAlias;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("Key used to simulate grip button.")]
		public KeyCode gripAlias;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Key used to simulate touchpad button.")]
		public KeyCode touchpadAlias;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("Key used to simulate button one.")]
		public KeyCode buttonOneAlias;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Key used to simulate button two.")]
		public KeyCode buttonTwoAlias;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("Key used to simulate start menu button.")]
		public KeyCode startMenuAlias;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Key used to switch between button touch and button press mode.")]
		public KeyCode touchModifier;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Key used to switch between hair touch mode.")]
		public KeyCode hairTouchModifier;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool isHand;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected GameObject hintCanvas;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Text hintText;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Transform rightHand;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Transform leftHand;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Transform currentHand;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Vector3 oldPos;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform neck;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected SDK_ControllerSim rightController;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected SDK_ControllerSim leftController;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static GameObject cachedCameraRig;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static bool destroyed;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected float sprintMultiplier;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected GameObject crossHairPanel;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Transform leftHandHorizontalAxisGuide;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform leftHandVerticalAxisGuide;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform rightHandHorizontalAxisGuide;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Transform rightHandVerticalAxisGuide;

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xB68AC4", Offset = "0xB68AC4", VA = "0xB68AC4")]
		public static GameObject FindInScene()
		{
			return null;
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xB68D58", Offset = "0xB68D58", VA = "0xB68D58", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xB68DB0", Offset = "0xB68DB0", VA = "0xB68DB0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xB691F4", Offset = "0xB691F4", VA = "0xB691F4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xB69274", Offset = "0xB69274", VA = "0xB69274", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xB69278", Offset = "0xB69278", VA = "0xB69278", Slot = "8")]
		protected virtual void SetHandColor(Transform hand, Color givenColor)
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xB693E8", Offset = "0xB693E8", VA = "0xB693E8", Slot = "9")]
		protected virtual void TryPickup(bool rightHand)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xB695F8", Offset = "0xB695F8", VA = "0xB695F8", Slot = "10")]
		protected virtual void UpdateHands()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xB698A8", Offset = "0xB698A8", VA = "0xB698A8", Slot = "11")]
		protected virtual void UpdateRotation()
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xB69A6C", Offset = "0xB69A6C", VA = "0xB69A6C", Slot = "12")]
		protected virtual void UpdatePosition()
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xB69BFC", Offset = "0xB69BFC", VA = "0xB69BFC", Slot = "13")]
		protected virtual void SetHand()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xB69DB0", Offset = "0xB69DB0", VA = "0xB69DB0", Slot = "14")]
		protected virtual void SetMove()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xB69E20", Offset = "0xB69E20", VA = "0xB69E20", Slot = "15")]
		protected virtual void UpdateHints()
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xB6B6F4", Offset = "0xB6B6F4", VA = "0xB6B6F4", Slot = "16")]
		protected virtual bool IsAcceptingMouseInput()
		{
			return default(bool);
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xB6B710", Offset = "0xB6B710", VA = "0xB6B710", Slot = "17")]
		protected virtual Vector3 GetMouseDelta()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xB6B7F0", Offset = "0xB6B7F0", VA = "0xB6B7F0", Slot = "18")]
		protected virtual void ToggleGuidePlanes(bool horizontalState, bool verticalState)
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xB6B990", Offset = "0xB6B990", VA = "0xB6B990")]
		public SDK_InputSimulator()
		{
		}
	}
	[Token(Token = "0x2000349")]
	[SDK_Description(typeof(SDK_SimSystem), 0)]
	public class SDK_SimBoundaries : SDK_BaseBoundaries
	{
		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform area;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xB6BB58", Offset = "0xB6BB58", VA = "0xB6BB58", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xB6BB5C", Offset = "0xB6BB5C", VA = "0xB6BB5C", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xB6BC18", Offset = "0xB6BC18", VA = "0xB6BC18", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xB6BD24", Offset = "0xB6BD24", VA = "0xB6BD24", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xB6BD30", Offset = "0xB6BD30", VA = "0xB6BD30", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xB6BD38", Offset = "0xB6BD38", VA = "0xB6BD38", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xB6BD40", Offset = "0xB6BD40", VA = "0xB6BD40", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xB6BD44", Offset = "0xB6BD44", VA = "0xB6BD44")]
		public SDK_SimBoundaries()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[SDK_Description(typeof(SDK_SimSystem), 0)]
	public class SDK_SimController : SDK_BaseController
	{
		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected SDK_ControllerSim rightController;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected SDK_ControllerSim leftController;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Dictionary<string, KeyCode> keyMappings;

		[Token(Token = "0x40014A4")]
		protected const string RIGHT_HAND_CONTROLLER_NAME = "RightHand";

		[Token(Token = "0x40014A5")]
		protected const string LEFT_HAND_CONTROLLER_NAME = "LeftHand";

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xB6BD4C", Offset = "0xB6BD4C", VA = "0xB6BD4C", Slot = "52")]
		public virtual void SetKeyMappings(Dictionary<string, KeyCode> givenKeyMappings)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xB6BD54", Offset = "0xB6BD54", VA = "0xB6BD54", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xB6BD58", Offset = "0xB6BD58", VA = "0xB6BD58", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xB6BD5C", Offset = "0xB6BD5C", VA = "0xB6BD5C", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xB6BD64", Offset = "0xB6BD64", VA = "0xB6BD64", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xB6BDA4", Offset = "0xB6BDA4", VA = "0xB6BDA4", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xB6BE40", Offset = "0xB6BE40", VA = "0xB6BE40", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xB6BE9C", Offset = "0xB6BE9C", VA = "0xB6BE9C", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xB6C034", Offset = "0xB6C034", VA = "0xB6C034", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xB6C0D8", Offset = "0xB6C0D8", VA = "0xB6C0D8", Slot = "17")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0xB6C0E0", Offset = "0xB6C0E0", VA = "0xB6C0E0", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0xB6C19C", Offset = "0xB6C19C", VA = "0xB6C19C", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xB6C258", Offset = "0xB6C258", VA = "0xB6C258", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xB6C268", Offset = "0xB6C268", VA = "0xB6C268", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xB6C278", Offset = "0xB6C278", VA = "0xB6C278", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xB6C28C", Offset = "0xB6C28C", VA = "0xB6C28C", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xB6C2A0", Offset = "0xB6C2A0", VA = "0xB6C2A0", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xB6C2A8", Offset = "0xB6C2A8", VA = "0xB6C2A8", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xB6C2B8", Offset = "0xB6C2B8", VA = "0xB6C2B8", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xB6C3D4", Offset = "0xB6C3D4", VA = "0xB6C3D4", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xB6C458", Offset = "0xB6C458", VA = "0xB6C458", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xB6C45C", Offset = "0xB6C45C", VA = "0xB6C45C", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xB6C460", Offset = "0xB6C460", VA = "0xB6C460", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xB6C468", Offset = "0xB6C468", VA = "0xB6C468", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xB6C4DC", Offset = "0xB6C4DC", VA = "0xB6C4DC", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xB6C620", Offset = "0xB6C620", VA = "0xB6C620", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xB6C764", Offset = "0xB6C764", VA = "0xB6C764", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xB6C77C", Offset = "0xB6C77C", VA = "0xB6C77C", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xB6C7BC", Offset = "0xB6C7BC", VA = "0xB6C7BC", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xB6C7C4", Offset = "0xB6C7C4", VA = "0xB6C7C4", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xB6C7CC", Offset = "0xB6C7CC", VA = "0xB6C7CC", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xB6C93C", Offset = "0xB6C93C", VA = "0xB6C93C", Slot = "53")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xB6C94C", Offset = "0xB6C94C", VA = "0xB6C94C", Slot = "54")]
		protected virtual void SetupPlayer()
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xB6CB48", Offset = "0xB6CB48", VA = "0xB6CB48", Slot = "55")]
		protected virtual bool IsTouchModifierPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xB6CBC0", Offset = "0xB6CBC0", VA = "0xB6CBC0", Slot = "56")]
		protected virtual bool IsHairTouchModifierPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xB6CC38", Offset = "0xB6CC38", VA = "0xB6CC38", Slot = "57")]
		protected virtual bool IsButtonPressIgnored()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xB6CC78", Offset = "0xB6CC78", VA = "0xB6CC78", Slot = "58")]
		protected virtual bool IsButtonHairTouchIgnored()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xB6CCC0", Offset = "0xB6CCC0", VA = "0xB6CCC0", Slot = "59")]
		protected virtual bool GetControllerButtonState(uint index, string keyMapping, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xB6CE00", Offset = "0xB6CE00", VA = "0xB6CE00", Slot = "60")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, KeyCode button)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xB6CF44", Offset = "0xB6CF44", VA = "0xB6CF44", Slot = "61")]
		protected virtual GameObject GetActualController(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xB6D040", Offset = "0xB6D040", VA = "0xB6D040")]
		public SDK_SimController()
		{
		}
	}
	[Token(Token = "0x200034B")]
	[SDK_Description(typeof(SDK_SimSystem), 0)]
	public class SDK_SimHeadset : SDK_BaseHeadset
	{
		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform camera;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float magnitude;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 axis;

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xB6D23C", Offset = "0xB6D23C", VA = "0xB6D23C", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xB6D240", Offset = "0xB6D240", VA = "0xB6D240", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xB6D244", Offset = "0xB6D244", VA = "0xB6D244", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xB6D324", Offset = "0xB6D324", VA = "0xB6D324", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xB6D330", Offset = "0xB6D330", VA = "0xB6D330", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xB6D370", Offset = "0xB6D370", VA = "0xB6D370", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xB6D3A4", Offset = "0xB6D3A4", VA = "0xB6D3A4", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xB6D3D8", Offset = "0xB6D3D8", VA = "0xB6D3D8", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xB6D3E0", Offset = "0xB6D3E0", VA = "0xB6D3E0", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xB6D46C", Offset = "0xB6D46C", VA = "0xB6D46C", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xB6D558", Offset = "0xB6D558", VA = "0xB6D558", Slot = "19")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xB6D568", Offset = "0xB6D568", VA = "0xB6D568", Slot = "20")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xB6D6C0", Offset = "0xB6D6C0", VA = "0xB6D6C0")]
		public SDK_SimHeadset()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[SDK_Description("Simulator (Standalone)", null, null, "Standalone", 0)]
	public class SDK_SimSystem : SDK_BaseSystem
	{
		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xB6D6C8", Offset = "0xB6D6C8", VA = "0xB6D6C8", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xB6D6D0", Offset = "0xB6D6D0", VA = "0xB6D6D0", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xB6D6D8", Offset = "0xB6D6D8", VA = "0xB6D6D8", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xB6D6DC", Offset = "0xB6D6DC", VA = "0xB6D6DC")]
		public SDK_SimSystem()
		{
		}
	}
	[Token(Token = "0x200034D")]
	[SDK_Description(typeof(SDK_SteamVRSystem), 0)]
	public class SDK_SteamVRBoundaries : SDK_FallbackBoundaries
	{
		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xB6D6E4", Offset = "0xB6D6E4", VA = "0xB6D6E4")]
		public SDK_SteamVRBoundaries()
		{
		}
	}
	[Token(Token = "0x200034E")]
	[SDK_Description(typeof(SDK_SteamVRSystem), 0)]
	public class SDK_SteamVRController : SDK_FallbackController
	{
		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xB6D6EC", Offset = "0xB6D6EC", VA = "0xB6D6EC")]
		public SDK_SteamVRController()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public static class SDK_SteamVRDefines
	{
		[Token(Token = "0x40014AA")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_STEAMVR";

		[Token(Token = "0x40014AB")]
		private const string BuildTargetGroupName = "Standalone";

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xB6D6F4", Offset = "0xB6D6F4", VA = "0xB6D6F4")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_STEAMVR", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_STEAMVR_PLUGIN_1_2_2_OR_NEWER", "Standalone")]
		private static bool IsPluginVersion122OrNewer()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xB6D7C4", Offset = "0xB6D7C4", VA = "0xB6D7C4")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_STEAMVR", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_STEAMVR_PLUGIN_1_2_1_OR_NEWER", "Standalone")]
		private static bool IsPluginVersion121OrNewer()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xB6D928", Offset = "0xB6D928", VA = "0xB6D928")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_STEAMVR", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_STEAMVR_PLUGIN_1_2_0", "Standalone")]
		private static bool IsPluginVersion120()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xB6DA88", Offset = "0xB6DA88", VA = "0xB6DA88")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_STEAMVR_PLUGIN_1_1_1_OR_OLDER", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_STEAMVR", "Standalone")]
		private static bool IsPluginVersion111OrOlder()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000350")]
	[SDK_Description(typeof(SDK_SteamVRSystem), 0)]
	public class SDK_SteamVRHeadset : SDK_FallbackHeadset
	{
		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xB6DBA8", Offset = "0xB6DBA8", VA = "0xB6DBA8")]
		public SDK_SteamVRHeadset()
		{
		}
	}
	[Token(Token = "0x2000351")]
	[SDK_Description("SteamVR (Standalone:OpenVR)", "VRTK_DEFINE_SDK_STEAMVR", "OpenVR", "Standalone", 0)]
	public class SDK_SteamVRSystem : SDK_FallbackSystem
	{
		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xB6DBB0", Offset = "0xB6DBB0", VA = "0xB6DBB0")]
		public SDK_SteamVRSystem()
		{
		}
	}
	[Token(Token = "0x2000352")]
	[SDK_Description(typeof(SDK_UnitySystem), 2)]
	[SDK_Description(typeof(SDK_UnitySystem), 1)]
	[SDK_Description(typeof(SDK_UnitySystem), 0)]
	[SDK_Description(typeof(SDK_UnitySystem), 3)]
	[SDK_Description(typeof(SDK_UnitySystem), 4)]
	[SDK_Description(typeof(SDK_UnitySystem), 5)]
	public class SDK_UnityBoundaries : SDK_BaseBoundaries
	{
		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xB6DBB8", Offset = "0xB6DBB8", VA = "0xB6DBB8", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xB6DBBC", Offset = "0xB6DBBC", VA = "0xB6DBBC", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xB6DCB8", Offset = "0xB6DCB8", VA = "0xB6DCB8", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xB6DCC0", Offset = "0xB6DCC0", VA = "0xB6DCC0", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xB6DCCC", Offset = "0xB6DCCC", VA = "0xB6DCCC", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xB6DCD4", Offset = "0xB6DCD4", VA = "0xB6DCD4", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xB6DCDC", Offset = "0xB6DCDC", VA = "0xB6DCDC", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xB6DCE0", Offset = "0xB6DCE0", VA = "0xB6DCE0")]
		public SDK_UnityBoundaries()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public class SDK_UnityCameraRig : MonoBehaviour
	{
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Automatically set the Unity Physics Fixed Timestep value based on the HMD render frequency.")]
		public bool lockPhysicsUpdateRateToRenderFrequency;

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xB6DCE8", Offset = "0xB6DCE8", VA = "0xB6DCE8", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xB6DD3C", Offset = "0xB6DD3C", VA = "0xB6DD3C")]
		public SDK_UnityCameraRig()
		{
		}
	}
	[Token(Token = "0x2000354")]
	[SDK_Description(typeof(SDK_UnitySystem), 2)]
	[SDK_Description(typeof(SDK_UnitySystem), 0)]
	[SDK_Description(typeof(SDK_UnitySystem), 1)]
	[SDK_Description(typeof(SDK_UnitySystem), 3)]
	[SDK_Description(typeof(SDK_UnitySystem), 4)]
	[SDK_Description(typeof(SDK_UnitySystem), 5)]
	public class SDK_UnityController : SDK_BaseController
	{
		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_TrackedController cachedLeftController;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_TrackedController cachedRightController;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected SDK_UnityControllerTracker cachedLeftTracker;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected SDK_UnityControllerTracker cachedRightTracker;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_VelocityEstimator cachedLeftVelocityEstimator;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected VRTK_VelocityEstimator cachedRightVelocityEstimator;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector2 buttonPressThreshold;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Dictionary<ButtonTypes, bool> rightAxisButtonPressState;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<ButtonTypes, bool> leftAxisButtonPressState;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected List<string> validRightHands;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<string> validLeftHands;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected int[] rightControllerTouchCodes;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int[] rightControllerPressCodes;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected int[] rightOculusRemotePressCodes;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected int[] leftControllerTouchCodes;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected int[] leftControllerPressCodes;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected ControllerType cachedControllerType;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<ButtonTypes, KeyCode?> rightControllerTouchKeyCodes;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Dictionary<ButtonTypes, KeyCode?> rightControllerPressKeyCodes;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Dictionary<ButtonTypes, KeyCode?> leftControllerTouchKeyCodes;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Dictionary<ButtonTypes, KeyCode?> leftControllerPressKeyCodes;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool settingCaches;

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xB6DD4C", Offset = "0xB6DD4C", VA = "0xB6DD4C", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xB6DD50", Offset = "0xB6DD50", VA = "0xB6DD50", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xB6DD54", Offset = "0xB6DD54", VA = "0xB6DD54", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xB6DD7C", Offset = "0xB6DD7C", VA = "0xB6DD7C", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xB6DDBC", Offset = "0xB6DDBC", VA = "0xB6DDBC", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xB6DE24", Offset = "0xB6DE24", VA = "0xB6DE24", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xB6DEC8", Offset = "0xB6DEC8", VA = "0xB6DEC8", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xB6E070", Offset = "0xB6E070", VA = "0xB6E070", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xB6E074", Offset = "0xB6E074", VA = "0xB6E074", Slot = "17")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xB6E07C", Offset = "0xB6E07C", VA = "0xB6E07C", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xB6E158", Offset = "0xB6E158", VA = "0xB6E158", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xB6E234", Offset = "0xB6E234", VA = "0xB6E234", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xB6E244", Offset = "0xB6E244", VA = "0xB6E244", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xB6E254", Offset = "0xB6E254", VA = "0xB6E254", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xB6E268", Offset = "0xB6E268", VA = "0xB6E268", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xB6E27C", Offset = "0xB6E27C", VA = "0xB6E27C", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xB6E284", Offset = "0xB6E284", VA = "0xB6E284", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xB6E294", Offset = "0xB6E294", VA = "0xB6E294", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xB6E3E0", Offset = "0xB6E3E0", VA = "0xB6E3E0", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xB6E3E8", Offset = "0xB6E3E8", VA = "0xB6E3E8", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xB6E3EC", Offset = "0xB6E3EC", VA = "0xB6E3EC", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xB6E3F0", Offset = "0xB6E3F0", VA = "0xB6E3F0", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xB6E3F8", Offset = "0xB6E3F8", VA = "0xB6E3F8", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xB6E46C", Offset = "0xB6E46C", VA = "0xB6E46C", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xB6E5C4", Offset = "0xB6E5C4", VA = "0xB6E5C4", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xB6E71C", Offset = "0xB6E71C", VA = "0xB6E71C", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xB6E734", Offset = "0xB6E734", VA = "0xB6E734", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xB6E940", Offset = "0xB6E940", VA = "0xB6E940", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xB6E948", Offset = "0xB6E948", VA = "0xB6E948", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xB6E950", Offset = "0xB6E950", VA = "0xB6E950", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xB6EB4C", Offset = "0xB6EB4C", VA = "0xB6EB4C", Slot = "52")]
		protected virtual bool IsMouseAliasPress(bool validController, ButtonTypes buttonType, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xB6EB94", Offset = "0xB6EB94", VA = "0xB6EB94", Slot = "53")]
		protected virtual bool MousePressType(ButtonPressTypes pressType, int buttonIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xB6EBD4", Offset = "0xB6EBD4", VA = "0xB6EBD4", Slot = "54")]
		protected virtual float GetAxisValue(string axisName)
		{
			return default(float);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xB6EC60", Offset = "0xB6EC60", VA = "0xB6EC60", Slot = "55")]
		protected virtual bool IsAxisOnHandButtonPress(Dictionary<ButtonTypes, bool> axisHandState, ButtonTypes buttonType, ButtonPressTypes pressType, Vector2 axisValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xB6ED94", Offset = "0xB6ED94", VA = "0xB6ED94", Slot = "56")]
		protected virtual bool IsAxisButtonPress(VRTK_ControllerReference controllerReference, ButtonTypes buttonType, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xB6EE24", Offset = "0xB6EE24", VA = "0xB6EE24", Slot = "57")]
		protected virtual bool GetAxisPressState(bool currentState, float axisValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xB6EE50", Offset = "0xB6EE50", VA = "0xB6EE50", Slot = "58")]
		protected virtual bool IsButtonPressed(ButtonPressTypes pressType, KeyCode? touchKey, KeyCode? pressKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xB6EF80", Offset = "0xB6EF80", VA = "0xB6EF80", Slot = "59")]
		protected virtual void SetTrackedControllerCaches(bool forceRefresh = false)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xB6F350", Offset = "0xB6F350", VA = "0xB6F350", Slot = "60")]
		protected virtual void SetControllerButtons(ControllerHand hand)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xB6F6B0", Offset = "0xB6F6B0", VA = "0xB6F6B0", Slot = "61")]
		protected virtual void SetCachedControllerType(string givenType)
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xB6F7FC", Offset = "0xB6F7FC", VA = "0xB6F7FC", Slot = "62")]
		protected virtual void SetControllerButtonValues(ref Dictionary<ButtonTypes, KeyCode?> touchKeyCodes, ref Dictionary<ButtonTypes, KeyCode?> pressKeyCodes, int joystickIndex, int[] touchCodes, int[] pressCodes)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xB6FB4C", Offset = "0xB6FB4C", VA = "0xB6FB4C", Slot = "63")]
		protected virtual KeyCode StringToKeyCode(int index, int code)
		{
			return default(KeyCode);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xB6FCB0", Offset = "0xB6FCB0", VA = "0xB6FCB0", Slot = "64")]
		protected virtual void SetControllerIndex(ref VRTK_TrackedController trackedController)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xB6FD80", Offset = "0xB6FD80", VA = "0xB6FD80", Slot = "65")]
		protected virtual VRTK_TrackedController GetTrackedObject(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xB6FE00", Offset = "0xB6FE00", VA = "0xB6FE00")]
		public SDK_UnityController()
		{
		}
	}
	[Token(Token = "0x2000355")]
	public class SDK_UnityControllerTracker : MonoBehaviour
	{
		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity VRNode to track.")]
		public XRNode nodeType;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The unique index to assign to the controller.")]
		public uint index;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Unity Input name for the trigger axis.")]
		public string triggerAxisName;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Unity Input name for the grip axis.")]
		public string gripAxisName;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Unity Input name for the touchpad horizontal axis.")]
		public string touchpadHorizontalAxisName;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Unity Input name for the touchpad vertical axis.")]
		public string touchpadVerticalAxisName;

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xB709D0", Offset = "0xB709D0", VA = "0xB709D0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001814")]
		protected virtual string GetVarName<T>(T item) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xB70AB8", Offset = "0xB70AB8", VA = "0xB70AB8", Slot = "6")]
		protected virtual void CheckAxisIsValid(string axisName, string varName)
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xB70D68", Offset = "0xB70D68", VA = "0xB70D68", Slot = "7")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xB70DDC", Offset = "0xB70DDC", VA = "0xB70DDC")]
		public SDK_UnityControllerTracker()
		{
		}
	}
	[Token(Token = "0x2000356")]
	[SDK_Description(typeof(SDK_UnitySystem), 2)]
	[SDK_Description(typeof(SDK_UnitySystem), 1)]
	[SDK_Description(typeof(SDK_UnitySystem), 4)]
	[SDK_Description(typeof(SDK_UnitySystem), 3)]
	[SDK_Description(typeof(SDK_UnitySystem), 0)]
	[SDK_Description(typeof(SDK_UnitySystem), 5)]
	public class SDK_UnityHeadset : SDK_BaseHeadset
	{
		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xB70E64", Offset = "0xB70E64", VA = "0xB70E64", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xB70E68", Offset = "0xB70E68", VA = "0xB70E68", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xB70E6C", Offset = "0xB70E6C", VA = "0xB70E6C", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xB70F64", Offset = "0xB70F64", VA = "0xB70F64", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xB70F70", Offset = "0xB70F70", VA = "0xB70F70", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xB70F80", Offset = "0xB70F80", VA = "0xB70F80", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xB70FB4", Offset = "0xB70FB4", VA = "0xB70FB4", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xB70FE8", Offset = "0xB70FE8", VA = "0xB70FE8", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xB70FF0", Offset = "0xB70FF0", VA = "0xB70FF0", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xB71078", Offset = "0xB71078", VA = "0xB71078", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xB71160", Offset = "0xB71160", VA = "0xB71160", Slot = "19")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xB71250", Offset = "0xB71250", VA = "0xB71250")]
		public SDK_UnityHeadset()
		{
		}
	}
	[Token(Token = "0x2000357")]
	public class SDK_UnityHeadsetTracker : MonoBehaviour
	{
		[Token(Token = "0x6001824")]
		[Address(RVA = "0xB71258", Offset = "0xB71258", VA = "0xB71258")]
		public SDK_UnityHeadsetTracker()
		{
		}
	}
	[Token(Token = "0x2000358")]
	[SDK_Description("Unity (Standalone:Oculus)", null, "Oculus", "Standalone", 0)]
	[SDK_Description("Unity (Standalone:OpenVR)", null, "OpenVR", "Standalone", 1)]
	[SDK_Description("Unity (Android:Cardboard)", null, "cardboard", "Android", 2)]
	[SDK_Description("Unity (Android:Oculus)", null, "Oculus", "Android", 4)]
	[SDK_Description("Unity (Android:OpenVR)", null, "OpenVR", "Android", 5)]
	[SDK_Description("Unity (Android:Daydream)", null, "daydream", "Android", 3)]
	public class SDK_UnitySystem : SDK_BaseSystem
	{
		[Token(Token = "0x6001825")]
		[Address(RVA = "0xB71260", Offset = "0xB71260", VA = "0xB71260", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xB71268", Offset = "0xB71268", VA = "0xB71268", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xB71270", Offset = "0xB71270", VA = "0xB71270", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xB71274", Offset = "0xB71274", VA = "0xB71274")]
		public SDK_UnitySystem()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public static class VRTK_SDK_Bridge
	{
		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SDK_BaseSystem systemSDK;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SDK_BaseHeadset headsetSDK;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static SDK_BaseController controllerSDK;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static SDK_BaseBoundaries boundariesSDK;

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xB7127C", Offset = "0xB7127C", VA = "0xB7127C")]
		public static void ControllerProcessUpdate(VRTK_ControllerReference controllerReference, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xB712B4", Offset = "0xB712B4", VA = "0xB712B4")]
		public static void ControllerProcessFixedUpdate(VRTK_ControllerReference controllerReference, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xB712EC", Offset = "0xB712EC", VA = "0xB712EC")]
		public static SDK_BaseController.ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xB71314", Offset = "0xB71314", VA = "0xB71314")]
		public static string GetControllerDefaultColliderPath(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xB7133C", Offset = "0xB7133C", VA = "0xB7133C")]
		public static string GetControllerElementPath(SDK_BaseController.ControllerElements element, SDK_BaseController.ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xB71380", Offset = "0xB71380", VA = "0xB71380")]
		public static uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xB713AC", Offset = "0xB713AC", VA = "0xB713AC")]
		public static GameObject GetControllerByIndex(uint index, bool actual)
		{
			return null;
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xB713E8", Offset = "0xB713E8", VA = "0xB713E8")]
		public static Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xB71414", Offset = "0xB71414", VA = "0xB71414")]
		[Obsolete("GenerateControllerPointerOrigin has been deprecated and will be removed in a future version of VRTK.")]
		public static Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xB71440", Offset = "0xB71440", VA = "0xB71440")]
		public static GameObject GetControllerLeftHand(bool actual)
		{
			return null;
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xB7146C", Offset = "0xB7146C", VA = "0xB7146C")]
		public static GameObject GetControllerRightHand(bool actual)
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xB71498", Offset = "0xB71498", VA = "0xB71498")]
		public static GameObject GetControllerByHand(SDK_BaseController.ControllerHand hand, bool actual)
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xB714C0", Offset = "0xB714C0", VA = "0xB714C0")]
		public static bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xB714EC", Offset = "0xB714EC", VA = "0xB714EC")]
		public static bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xB71518", Offset = "0xB71518", VA = "0xB71518")]
		public static bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xB71554", Offset = "0xB71554", VA = "0xB71554")]
		public static bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xB71590", Offset = "0xB71590", VA = "0xB71590")]
		public static bool WaitForControllerModel(SDK_BaseController.ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xB715BC", Offset = "0xB715BC", VA = "0xB715BC")]
		public static GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xB715E8", Offset = "0xB715E8", VA = "0xB715E8")]
		public static GameObject GetControllerModel(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xB71614", Offset = "0xB71614", VA = "0xB71614")]
		public static SDK_BaseController.ControllerHand GetControllerModelHand(GameObject controllerModel)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xB71640", Offset = "0xB71640", VA = "0xB71640")]
		public static GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xB7166C", Offset = "0xB7166C", VA = "0xB7166C")]
		public static void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xB716A8", Offset = "0xB716A8", VA = "0xB716A8")]
		public static void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xB716E4", Offset = "0xB716E4", VA = "0xB716E4")]
		public static bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xB71720", Offset = "0xB71720", VA = "0xB71720")]
		public static SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xB71744", Offset = "0xB71744", VA = "0xB71744")]
		public static Vector3 GetControllerVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xB717C0", Offset = "0xB717C0", VA = "0xB717C0")]
		public static Vector3 GetControllerAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xB7183C", Offset = "0xB7183C", VA = "0xB7183C")]
		public static bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xB718A8", Offset = "0xB718A8", VA = "0xB718A8")]
		public static Vector2 GetControllerAxis(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xB718E4", Offset = "0xB718E4", VA = "0xB718E4")]
		public static float GetControllerSenseAxis(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xB71920", Offset = "0xB71920", VA = "0xB71920")]
		public static float GetControllerHairlineDelta(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xB7195C", Offset = "0xB7195C", VA = "0xB7195C")]
		public static bool GetControllerButtonState(SDK_BaseController.ButtonTypes buttonType, SDK_BaseController.ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xB719A0", Offset = "0xB719A0", VA = "0xB719A0")]
		public static void HeadsetProcessUpdate([Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xB71B6C", Offset = "0xB71B6C", VA = "0xB71B6C")]
		public static void HeadsetProcessFixedUpdate([Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xB71B94", Offset = "0xB71B94", VA = "0xB71B94")]
		public static Transform GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xB71BB4", Offset = "0xB71BB4", VA = "0xB71BB4")]
		public static Transform GetHeadsetCamera()
		{
			return null;
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xB71BD4", Offset = "0xB71BD4", VA = "0xB71BD4")]
		public static string GetHeadsetType()
		{
			return null;
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xB71BF4", Offset = "0xB71BF4", VA = "0xB71BF4")]
		public static Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xB71C18", Offset = "0xB71C18", VA = "0xB71C18")]
		public static Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xB71C3C", Offset = "0xB71C3C", VA = "0xB71C3C")]
		public static void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xB71CA8", Offset = "0xB71CA8", VA = "0xB71CA8")]
		public static bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xB71CD4", Offset = "0xB71CD4", VA = "0xB71CD4")]
		public static void AddHeadsetFade(Transform camera)
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xB65C48", Offset = "0xB65C48", VA = "0xB65C48")]
		public static Transform GetPlayArea()
		{
			return null;
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xB71EA4", Offset = "0xB71EA4", VA = "0xB71EA4")]
		public static Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xB71EC4", Offset = "0xB71EC4", VA = "0xB71EC4")]
		public static float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xB71EE4", Offset = "0xB71EE4", VA = "0xB71EE4")]
		public static bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xB71F04", Offset = "0xB71F04", VA = "0xB71F04")]
		public static bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xB71F28", Offset = "0xB71F28", VA = "0xB71F28")]
		public static void SetDrawAtRuntime(bool value)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xB71F54", Offset = "0xB71F54", VA = "0xB71F54")]
		public static bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xB7211C", Offset = "0xB7211C", VA = "0xB7211C")]
		public static bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xB7213C", Offset = "0xB7213C", VA = "0xB7213C")]
		public static void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xB71F74", Offset = "0xB71F74", VA = "0xB71F74")]
		public static SDK_BaseSystem GetSystemSDK()
		{
			return null;
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xB719C8", Offset = "0xB719C8", VA = "0xB719C8")]
		public static SDK_BaseHeadset GetHeadsetSDK()
		{
			return null;
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xB69050", Offset = "0xB69050", VA = "0xB69050")]
		public static SDK_BaseController GetControllerSDK()
		{
			return null;
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xB71D00", Offset = "0xB71D00", VA = "0xB71D00")]
		public static SDK_BaseBoundaries GetBoundariesSDK()
		{
			return null;
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xB72164", Offset = "0xB72164", VA = "0xB72164")]
		public static void InvalidateCaches()
		{
		}
	}
	[Token(Token = "0x200035A")]
	[RequireComponent(typeof(Camera))]
	public class WindowsMR_Camera : MonoBehaviour
	{
		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Force the Tracking Space Type to be RoomScale (normal VR experiences). If false, Stationary will be forced (e.g. video experiences.")]
		[SerializeField]
		private bool forceRoomScaleTracking;

		[Token(Token = "0x40014CF")]
		private const string DEVICE_NAME = "WindowsMR";

		[Token(Token = "0x170001AE")]
		public bool ForceRoomScaleTracking
		{
			[Token(Token = "0x6001861")]
			[Address(RVA = "0xB7226C", Offset = "0xB7226C", VA = "0xB7226C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001862")]
			[Address(RVA = "0xB72274", Offset = "0xB72274", VA = "0xB72274")]
			set
			{
			}
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xB72280", Offset = "0xB72280", VA = "0xB72280", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xB722B4", Offset = "0xB722B4", VA = "0xB722B4", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xB7230C", Offset = "0xB7230C", VA = "0xB7230C", Slot = "6")]
		protected virtual bool CheckForMixedRealitySupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xB72430", Offset = "0xB72430", VA = "0xB72430", Slot = "7")]
		protected virtual void SetupMRCamera()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xB72538", Offset = "0xB72538", VA = "0xB72538")]
		public WindowsMR_Camera()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class WindowsMR_ControllerManager : MonoBehaviour
	{
		[Token(Token = "0x6001868")]
		[Address(RVA = "0xB72548", Offset = "0xB72548", VA = "0xB72548")]
		public WindowsMR_ControllerManager()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class WindowsMR_TrackedObject : MonoBehaviour
	{
		[Token(Token = "0x6001869")]
		[Address(RVA = "0xB72550", Offset = "0xB72550", VA = "0xB72550")]
		public WindowsMR_TrackedObject()
		{
		}
	}
	[Token(Token = "0x200035D")]
	[SDK_Description(typeof(SDK_WindowsMR), 0)]
	public class SDK_WindowsMRBoundaries : SDK_FallbackBoundaries
	{
		[Token(Token = "0x600186A")]
		[Address(RVA = "0xB72558", Offset = "0xB72558", VA = "0xB72558")]
		public SDK_WindowsMRBoundaries()
		{
		}
	}
	[Token(Token = "0x200035E")]
	[SDK_Description(typeof(SDK_WindowsMR), 0)]
	public class SDK_WindowsMRController : SDK_FallbackController
	{
		[Token(Token = "0x600186B")]
		[Address(RVA = "0xB72560", Offset = "0xB72560", VA = "0xB72560")]
		public SDK_WindowsMRController()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public static class SDK_WindowsMRDefines
	{
		[Token(Token = "0x40014D0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_WINDOWSMR";

		[Token(Token = "0x40014D1")]
		private const string BuildTargetGroupName = "WSA";

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xB72568", Offset = "0xB72568", VA = "0xB72568")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_WINDOWSMR_CONTROLLER_VISUALIZATION", "WSA")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_WINDOWSMR", "WSA")]
		private static bool HasControllerVisualization()
		{
			return default(bool);
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xB725E8", Offset = "0xB725E8", VA = "0xB725E8")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_WINDOWSMR", "WSA")]
		private static bool IsXRSettingsEnabled()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000360")]
	[SDK_Description(typeof(SDK_WindowsMR), 0)]
	public class SDK_WindowsMRHeadset : SDK_FallbackHeadset
	{
		[Token(Token = "0x600186E")]
		[Address(RVA = "0xB725F0", Offset = "0xB725F0", VA = "0xB725F0")]
		public SDK_WindowsMRHeadset()
		{
		}
	}
	[Token(Token = "0x2000361")]
	[SDK_Description("WindowsMR", "VRTK_DEFINE_SDK_WINDOWSMR", "WindowsMR", "WSA", 0)]
	public class SDK_WindowsMR : SDK_FallbackSystem
	{
		[Token(Token = "0x600186F")]
		[Address(RVA = "0xB725F8", Offset = "0xB725F8", VA = "0xB725F8")]
		public SDK_WindowsMR()
		{
		}
	}
	[Token(Token = "0x2000362")]
	[SDK_Description(typeof(SDK_XimmerseSystem), 0)]
	[SDK_Description(typeof(SDK_XimmerseSystem), 1)]
	public class SDK_XimmerseBoundaries : SDK_FallbackBoundaries
	{
		[Token(Token = "0x6001870")]
		[Address(RVA = "0xB72600", Offset = "0xB72600", VA = "0xB72600")]
		public SDK_XimmerseBoundaries()
		{
		}
	}
	[Token(Token = "0x2000363")]
	[SDK_Description(typeof(SDK_XimmerseSystem), 1)]
	[SDK_Description(typeof(SDK_XimmerseSystem), 0)]
	public class SDK_XimmerseController : SDK_FallbackController
	{
		[Token(Token = "0x6001871")]
		[Address(RVA = "0xB72608", Offset = "0xB72608", VA = "0xB72608")]
		public SDK_XimmerseController()
		{
		}
	}
	[Token(Token = "0x2000364")]
	public static class SDK_XimmerseDefines
	{
		[Token(Token = "0x40014D2")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_XIMMERSE";

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xB72610", Offset = "0xB72610", VA = "0xB72610")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_XIMMERSE", "Standalone")]
		[SDK_ScriptingDefineSymbolPredicate("VRTK_DEFINE_SDK_XIMMERSE", "Android")]
		private static bool IsXimmerseAvailable()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000365")]
	[SDK_Description(typeof(SDK_XimmerseSystem), 0)]
	[SDK_Description(typeof(SDK_XimmerseSystem), 1)]
	public class SDK_XimmerseHeadset : SDK_FallbackHeadset
	{
		[Token(Token = "0x6001873")]
		[Address(RVA = "0xB72690", Offset = "0xB72690", VA = "0xB72690")]
		public SDK_XimmerseHeadset()
		{
		}
	}
	[Token(Token = "0x2000366")]
	[SDK_Description("Ximmerse (Standalone:Oculus)", "VRTK_DEFINE_SDK_XIMMERSE", "Oculus", "Standalone", 0)]
	[SDK_Description("Ximmerse (Android:Daydream)", "VRTK_DEFINE_SDK_XIMMERSE", "daydream", "Android", 1)]
	public class SDK_XimmerseSystem : SDK_FallbackSystem
	{
		[Token(Token = "0x6001874")]
		[Address(RVA = "0xB72698", Offset = "0xB72698", VA = "0xB72698")]
		public SDK_XimmerseSystem()
		{
		}
	}
}
namespace VRTK.WindowsMixedReality.Utilities
{
	[Token(Token = "0x2000367")]
	public static class InteractionSourceExtensions
	{
		[Token(Token = "0x40014D3")]
		private const ushort ContinuousBuzzWaveform = 4100;
	}
	[Token(Token = "0x2000368")]
	public static class WindowsApiChecker
	{
		[Token(Token = "0x170001AF")]
		public static bool UniversalApiContractV5_IsAvailable
		{
			[Token(Token = "0x6001876")]
			[Address(RVA = "0xB72768", Offset = "0xB72768", VA = "0xB72768")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001877")]
			[Address(RVA = "0xB727C0", Offset = "0xB727C0", VA = "0xB727C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public static bool UniversalApiContractV4_IsAvailable
		{
			[Token(Token = "0x6001878")]
			[Address(RVA = "0xB7281C", Offset = "0xB7281C", VA = "0xB7281C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001879")]
			[Address(RVA = "0xB72874", Offset = "0xB72874", VA = "0xB72874")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public static bool UniversalApiContractV3_IsAvailable
		{
			[Token(Token = "0x600187A")]
			[Address(RVA = "0xB728D0", Offset = "0xB728D0", VA = "0xB728D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600187B")]
			[Address(RVA = "0xB72928", Offset = "0xB72928", VA = "0xB72928")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xB726A0", Offset = "0xB726A0", VA = "0xB726A0")]
		static WindowsApiChecker()
		{
		}
	}
}
namespace VRTK.UnityEventHelper
{
	[Token(Token = "0x2000369")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_BaseControllable_UnityEvents")]
	public sealed class VRTK_BaseControllable_UnityEvents : VRTK_UnityEvents<VRTK_BaseControllable>
	{
		[Serializable]
		[Token(Token = "0x200036A")]
		public sealed class BaseControllablEvent : UnityEvent<object, ControllableEventArgs>
		{
			[Token(Token = "0x6001885")]
			[Address(RVA = "0xB73204", Offset = "0xB73204", VA = "0xB73204")]
			public BaseControllablEvent()
			{
			}
		}

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BaseControllablEvent OnValueChanged;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BaseControllablEvent OnRestingPointReached;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BaseControllablEvent OnMinLimitReached;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BaseControllablEvent OnMinLimitExited;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BaseControllablEvent OnMaxLimitReached;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BaseControllablEvent OnMaxLimitExited;

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xB72984", Offset = "0xB72984", VA = "0xB72984", Slot = "4")]
		protected override void AddListeners(VRTK_BaseControllable component)
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xB72B6C", Offset = "0xB72B6C", VA = "0xB72B6C", Slot = "5")]
		protected override void RemoveListeners(VRTK_BaseControllable component)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xB72D54", Offset = "0xB72D54", VA = "0xB72D54")]
		private void ValueChanged(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xB72DE8", Offset = "0xB72DE8", VA = "0xB72DE8")]
		private void RestingPointReached(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xB72E7C", Offset = "0xB72E7C", VA = "0xB72E7C")]
		private void MinLimitReached(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xB72F10", Offset = "0xB72F10", VA = "0xB72F10")]
		private void MinLimitExited(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xB72FA4", Offset = "0xB72FA4", VA = "0xB72FA4")]
		private void MaxLimitReached(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xB73038", Offset = "0xB73038", VA = "0xB73038")]
		private void MaxLimitExited(object o, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xB730CC", Offset = "0xB730CC", VA = "0xB730CC")]
		public VRTK_BaseControllable_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200036B")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_BasicTeleport_UnityEvents")]
	public sealed class VRTK_BasicTeleport_UnityEvents : VRTK_UnityEvents<VRTK_BasicTeleport>
	{
		[Serializable]
		[Token(Token = "0x200036C")]
		public sealed class TeleportEvent : UnityEvent<object, DestinationMarkerEventArgs>
		{
			[Token(Token = "0x600188B")]
			[Address(RVA = "0xB735DC", Offset = "0xB735DC", VA = "0xB735DC")]
			public TeleportEvent()
			{
			}
		}

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportEvent OnTeleporting;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TeleportEvent OnTeleported;

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xB7324C", Offset = "0xB7324C", VA = "0xB7324C", Slot = "4")]
		protected override void AddListeners(VRTK_BasicTeleport component)
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xB73324", Offset = "0xB73324", VA = "0xB73324", Slot = "5")]
		protected override void RemoveListeners(VRTK_BasicTeleport component)
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xB733FC", Offset = "0xB733FC", VA = "0xB733FC")]
		private void Teleporting(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xB73498", Offset = "0xB73498", VA = "0xB73498")]
		private void Teleported(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xB73534", Offset = "0xB73534", VA = "0xB73534")]
		public VRTK_BasicTeleport_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200036D")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_BodyPhysics_UnityEvents")]
	public sealed class VRTK_BodyPhysics_UnityEvents : VRTK_UnityEvents<VRTK_BodyPhysics>
	{
		[Serializable]
		[Token(Token = "0x200036E")]
		public sealed class BodyPhysicsEvent : UnityEvent<object, BodyPhysicsEventArgs>
		{
			[Token(Token = "0x6001899")]
			[Address(RVA = "0xB7423C", Offset = "0xB7423C", VA = "0xB7423C")]
			public BodyPhysicsEvent()
			{
			}
		}

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BodyPhysicsEvent OnStartFalling;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BodyPhysicsEvent OnStopFalling;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BodyPhysicsEvent OnStartMoving;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BodyPhysicsEvent OnStopMoving;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BodyPhysicsEvent OnStartColliding;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BodyPhysicsEvent OnStopColliding;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BodyPhysicsEvent OnStartLeaning;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BodyPhysicsEvent OnStopLeaning;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BodyPhysicsEvent OnStartTouchingGround;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BodyPhysicsEvent OnStopTouchingGround;

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xB73624", Offset = "0xB73624", VA = "0xB73624", Slot = "4")]
		protected override void AddListeners(VRTK_BodyPhysics component)
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xB7391C", Offset = "0xB7391C", VA = "0xB7391C", Slot = "5")]
		protected override void RemoveListeners(VRTK_BodyPhysics component)
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xB73C14", Offset = "0xB73C14", VA = "0xB73C14")]
		private void StartFalling(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xB73C84", Offset = "0xB73C84", VA = "0xB73C84")]
		private void StopFalling(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xB73CF4", Offset = "0xB73CF4", VA = "0xB73CF4")]
		private void StartMoving(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xB73D64", Offset = "0xB73D64", VA = "0xB73D64")]
		private void StopMoving(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xB73DD4", Offset = "0xB73DD4", VA = "0xB73DD4")]
		private void StartColliding(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xB73E44", Offset = "0xB73E44", VA = "0xB73E44")]
		private void StopColliding(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xB73EB4", Offset = "0xB73EB4", VA = "0xB73EB4")]
		private void StartLeaning(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xB73F24", Offset = "0xB73F24", VA = "0xB73F24")]
		private void StopLeaning(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xB73F94", Offset = "0xB73F94", VA = "0xB73F94")]
		private void StartTouchingGround(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xB74004", Offset = "0xB74004", VA = "0xB74004")]
		private void StopTouchingGround(object o, BodyPhysicsEventArgs e)
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xB74074", Offset = "0xB74074", VA = "0xB74074")]
		public VRTK_BodyPhysics_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200036F")]
	[Obsolete("`VRTK_Button_UnityEvents` has been deprecated and can be recreated with `VRTK_BaseControllable_UnityEvents`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_Button_UnityEvents")]
	public sealed class VRTK_Button_UnityEvents : VRTK_UnityEvents<VRTK_Button>
	{
		[Serializable]
		[Token(Token = "0x2000370")]
		public sealed class Button3DEvent : UnityEvent<object, Control3DEventArgs>
		{
			[Token(Token = "0x600189F")]
			[Address(RVA = "0xB745BC", Offset = "0xB745BC", VA = "0xB745BC")]
			public Button3DEvent()
			{
			}
		}

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button3DEvent OnPushed;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button3DEvent OnReleased;

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xB74284", Offset = "0xB74284", VA = "0xB74284", Slot = "4")]
		protected override void AddListeners(VRTK_Button component)
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xB7435C", Offset = "0xB7435C", VA = "0xB7435C", Slot = "5")]
		protected override void RemoveListeners(VRTK_Button component)
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xB74434", Offset = "0xB74434", VA = "0xB74434")]
		private void Pushed(object o, Control3DEventArgs e)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xB744A4", Offset = "0xB744A4", VA = "0xB744A4")]
		public void Released(object o, Control3DEventArgs e)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xB74514", Offset = "0xB74514", VA = "0xB74514")]
		public VRTK_Button_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000371")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ControlAnimationGrabAttach_UnityEvents")]
	public sealed class VRTK_ControlAnimationGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_ControlAnimationGrabAttach>
	{
		[Serializable]
		[Token(Token = "0x2000372")]
		public sealed class ControlAnimationGrabAttachEvent : UnityEvent<object, ControlAnimationGrabAttachEventArgs>
		{
			[Token(Token = "0x60018A6")]
			[Address(RVA = "0xB74A58", Offset = "0xB74A58", VA = "0xB74A58")]
			public ControlAnimationGrabAttachEvent()
			{
			}
		}

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameAtStart;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameAtEnd;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameChanged;

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xB74604", Offset = "0xB74604", VA = "0xB74604", Slot = "4")]
		protected override void AddListeners(VRTK_ControlAnimationGrabAttach component)
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xB74720", Offset = "0xB74720", VA = "0xB74720", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControlAnimationGrabAttach component)
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xB7483C", Offset = "0xB7483C", VA = "0xB7483C")]
		private void AnimationFrameAtStart(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xB748AC", Offset = "0xB748AC", VA = "0xB748AC")]
		private void AnimationFrameAtEnd(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xB7491C", Offset = "0xB7491C", VA = "0xB7491C")]
		private void AnimationFrameChanged(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xB7498C", Offset = "0xB7498C", VA = "0xB7498C")]
		public VRTK_ControlAnimationGrabAttach_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000373")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ControllerEvents_UnityEvents")]
	public sealed class VRTK_ControllerEvents_UnityEvents : VRTK_UnityEvents<VRTK_ControllerEvents>
	{
		[Serializable]
		[Token(Token = "0x2000374")]
		public sealed class ControllerInteractionEvent : UnityEvent<object, ControllerInteractionEventArgs>
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0xB78448", Offset = "0xB78448", VA = "0xB78448")]
			public ControllerInteractionEvent()
			{
			}
		}

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerInteractionEvent OnTriggerPressed;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerInteractionEvent OnTriggerReleased;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ControllerInteractionEvent OnTriggerTouchStart;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ControllerInteractionEvent OnTriggerTouchEnd;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ControllerInteractionEvent OnTriggerHairlineStart;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ControllerInteractionEvent OnTriggerHairlineEnd;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ControllerInteractionEvent OnTriggerClicked;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerInteractionEvent OnTriggerUnclicked;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ControllerInteractionEvent OnTriggerAxisChanged;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ControllerInteractionEvent OnGripPressed;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ControllerInteractionEvent OnGripReleased;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ControllerInteractionEvent OnGripTouchStart;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ControllerInteractionEvent OnGripTouchEnd;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ControllerInteractionEvent OnGripHairlineStart;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ControllerInteractionEvent OnGripHairlineEnd;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ControllerInteractionEvent OnGripClicked;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ControllerInteractionEvent OnGripUnclicked;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ControllerInteractionEvent OnGripAxisChanged;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ControllerInteractionEvent OnTouchpadPressed;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ControllerInteractionEvent OnTouchpadReleased;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ControllerInteractionEvent OnTouchpadTouchStart;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public ControllerInteractionEvent OnTouchpadTouchEnd;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public ControllerInteractionEvent OnTouchpadAxisChanged;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public ControllerInteractionEvent OnButtonOnePressed;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ControllerInteractionEvent OnButtonOneReleased;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public ControllerInteractionEvent OnButtonOneTouchStart;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public ControllerInteractionEvent OnButtonOneTouchEnd;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public ControllerInteractionEvent OnButtonTwoPressed;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public ControllerInteractionEvent OnButtonTwoReleased;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public ControllerInteractionEvent OnButtonTwoTouchStart;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public ControllerInteractionEvent OnButtonTwoTouchEnd;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ControllerInteractionEvent OnStartMenuPressed;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public ControllerInteractionEvent OnStartMenuReleased;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public ControllerInteractionEvent OnAliasPointerOn;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public ControllerInteractionEvent OnAliasPointerOff;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public ControllerInteractionEvent OnAliasPointerSet;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public ControllerInteractionEvent OnAliasGrabOn;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public ControllerInteractionEvent OnAliasGrabOff;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public ControllerInteractionEvent OnAliasUseOn;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public ControllerInteractionEvent OnAliasUseOff;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public ControllerInteractionEvent OnAliasUIClickOn;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public ControllerInteractionEvent OnAliasUIClickOff;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public ControllerInteractionEvent OnAliasMenuOn;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public ControllerInteractionEvent OnAliasMenuOff;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public ControllerInteractionEvent OnControllerEnabled;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public ControllerInteractionEvent OnControllerDisabled;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public ControllerInteractionEvent OnControllerIndexChanged;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public ControllerInteractionEvent OnControllerModelAvailable;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public ControllerInteractionEvent OnControllerVisible;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public ControllerInteractionEvent OnControllerHidden;

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xB74AA0", Offset = "0xB74AA0", VA = "0xB74AA0", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerEvents component)
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xB7554C", Offset = "0xB7554C", VA = "0xB7554C", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerEvents component)
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xB75FF8", Offset = "0xB75FF8", VA = "0xB75FF8")]
		private void TriggerPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xB7608C", Offset = "0xB7608C", VA = "0xB7608C")]
		private void TriggerReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xB76120", Offset = "0xB76120", VA = "0xB76120")]
		private void TriggerTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xB761B4", Offset = "0xB761B4", VA = "0xB761B4")]
		private void TriggerTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xB76248", Offset = "0xB76248", VA = "0xB76248")]
		private void TriggerHairlineStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xB762DC", Offset = "0xB762DC", VA = "0xB762DC")]
		private void TriggerHairlineEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xB76370", Offset = "0xB76370", VA = "0xB76370")]
		private void TriggerClicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xB76404", Offset = "0xB76404", VA = "0xB76404")]
		private void TriggerUnclicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xB76498", Offset = "0xB76498", VA = "0xB76498")]
		private void TriggerAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xB7652C", Offset = "0xB7652C", VA = "0xB7652C")]
		private void GripPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xB765C0", Offset = "0xB765C0", VA = "0xB765C0")]
		private void GripReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xB76654", Offset = "0xB76654", VA = "0xB76654")]
		private void GripTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xB766E8", Offset = "0xB766E8", VA = "0xB766E8")]
		private void GripTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xB7677C", Offset = "0xB7677C", VA = "0xB7677C")]
		private void GripHairlineStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xB76810", Offset = "0xB76810", VA = "0xB76810")]
		private void GripHairlineEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xB768A4", Offset = "0xB768A4", VA = "0xB768A4")]
		private void GripClicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xB76938", Offset = "0xB76938", VA = "0xB76938")]
		private void GripUnclicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xB769CC", Offset = "0xB769CC", VA = "0xB769CC")]
		private void GripAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xB76A60", Offset = "0xB76A60", VA = "0xB76A60")]
		private void TouchpadPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xB76AF4", Offset = "0xB76AF4", VA = "0xB76AF4")]
		private void TouchpadReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xB76B88", Offset = "0xB76B88", VA = "0xB76B88")]
		private void TouchpadTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xB76C1C", Offset = "0xB76C1C", VA = "0xB76C1C")]
		private void TouchpadTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xB76CB0", Offset = "0xB76CB0", VA = "0xB76CB0")]
		private void TouchpadAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xB76D44", Offset = "0xB76D44", VA = "0xB76D44")]
		private void ButtonOnePressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xB76DD8", Offset = "0xB76DD8", VA = "0xB76DD8")]
		private void ButtonOneReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xB76E6C", Offset = "0xB76E6C", VA = "0xB76E6C")]
		private void ButtonOneTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xB76F00", Offset = "0xB76F00", VA = "0xB76F00")]
		private void ButtonOneTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xB76F94", Offset = "0xB76F94", VA = "0xB76F94")]
		private void ButtonTwoPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xB77028", Offset = "0xB77028", VA = "0xB77028")]
		private void ButtonTwoReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xB770BC", Offset = "0xB770BC", VA = "0xB770BC")]
		private void ButtonTwoTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xB77150", Offset = "0xB77150", VA = "0xB77150")]
		private void ButtonTwoTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xB771E4", Offset = "0xB771E4", VA = "0xB771E4")]
		private void StartMenuPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0xB77278", Offset = "0xB77278", VA = "0xB77278")]
		private void StartMenuReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xB7730C", Offset = "0xB7730C", VA = "0xB7730C")]
		private void AliasPointerOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xB773A0", Offset = "0xB773A0", VA = "0xB773A0")]
		private void AliasPointerOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xB77434", Offset = "0xB77434", VA = "0xB77434")]
		private void AliasPointerSet(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xB774C8", Offset = "0xB774C8", VA = "0xB774C8")]
		private void AliasGrabOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0xB7755C", Offset = "0xB7755C", VA = "0xB7755C")]
		private void AliasGrabOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xB775F0", Offset = "0xB775F0", VA = "0xB775F0")]
		private void AliasUseOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xB77684", Offset = "0xB77684", VA = "0xB77684")]
		private void AliasUseOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xB77718", Offset = "0xB77718", VA = "0xB77718")]
		private void AliasUIClickOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xB777AC", Offset = "0xB777AC", VA = "0xB777AC")]
		private void AliasUIClickOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xB77840", Offset = "0xB77840", VA = "0xB77840")]
		private void AliasMenuOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xB778D4", Offset = "0xB778D4", VA = "0xB778D4")]
		private void AliasMenuOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xB77968", Offset = "0xB77968", VA = "0xB77968")]
		private void ControllerEnabled(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xB779FC", Offset = "0xB779FC", VA = "0xB779FC")]
		private void ControllerDisabled(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xB77A90", Offset = "0xB77A90", VA = "0xB77A90")]
		private void ControllerIndexChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xB77B24", Offset = "0xB77B24", VA = "0xB77B24")]
		private void ControllerModelAvailable(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0xB77BB8", Offset = "0xB77BB8", VA = "0xB77BB8")]
		private void ControllerVisible(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0xB77C4C", Offset = "0xB77C4C", VA = "0xB77C4C")]
		private void ControllerHidden(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0xB77CE0", Offset = "0xB77CE0", VA = "0xB77CE0")]
		public VRTK_ControllerEvents_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ControllerRigidbodyActivator_UnityEvents")]
	public sealed class VRTK_ControllerRigidbodyActivator_UnityEvents : VRTK_UnityEvents<VRTK_ControllerRigidbodyActivator>
	{
		[Serializable]
		[Token(Token = "0x2000376")]
		public sealed class ControllerRigidbodyActivatorEvent : UnityEvent<object, ControllerRigidbodyActivatorEventArgs>
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xB787B8", Offset = "0xB787B8", VA = "0xB787B8")]
			public ControllerRigidbodyActivatorEvent()
			{
			}
		}

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerRigidbodyActivatorEvent OnControllerRigidbodyOn;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerRigidbodyActivatorEvent OnControllerRigidbodyOff;

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0xB78490", Offset = "0xB78490", VA = "0xB78490", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerRigidbodyActivator component)
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0xB78568", Offset = "0xB78568", VA = "0xB78568", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerRigidbodyActivator component)
		{
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0xB78640", Offset = "0xB78640", VA = "0xB78640")]
		private void ControllerRigidbodyOn(object o, ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0xB786A8", Offset = "0xB786A8", VA = "0xB786A8")]
		private void ControllerRigidbodyOff(object o, ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xB78710", Offset = "0xB78710", VA = "0xB78710")]
		public VRTK_ControllerRigidbodyActivator_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ControllerTooltips_UnityEvents")]
	public sealed class VRTK_ControllerTooltips_UnityEvents : VRTK_UnityEvents<VRTK_ControllerTooltips>
	{
		[Serializable]
		[Token(Token = "0x2000378")]
		public sealed class ControllerTooltipsEvent : UnityEvent<object, ControllerTooltipsEventArgs>
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xB78B28", Offset = "0xB78B28", VA = "0xB78B28")]
			public ControllerTooltipsEvent()
			{
			}
		}

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerTooltipsEvent OnControllerTooltipOn;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerTooltipsEvent OnControllerTooltipOff;

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xB78800", Offset = "0xB78800", VA = "0xB78800", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerTooltips component)
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xB788D8", Offset = "0xB788D8", VA = "0xB788D8", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerTooltips component)
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0xB789B0", Offset = "0xB789B0", VA = "0xB789B0")]
		private void ControllerTooltipOn(object o, ControllerTooltipsEventArgs e)
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0xB78A18", Offset = "0xB78A18", VA = "0xB78A18")]
		private void ControllerTooltipOff(object o, ControllerTooltipsEventArgs e)
		{
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0xB78A80", Offset = "0xB78A80", VA = "0xB78A80")]
		public VRTK_ControllerTooltips_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000379")]
	[Obsolete("`VRTK_Control_UnityEvents` has been deprecated and can be recreated with `VRTK_BaseControllable_UnityEvents`. This script will be removed in a future version of VRTK.")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_Control_UnityEvents")]
	public sealed class VRTK_Control_UnityEvents : VRTK_UnityEvents<VRTK_Control>
	{
		[Serializable]
		[Token(Token = "0x200037A")]
		public sealed class Control3DEvent : UnityEvent<object, Control3DEventArgs>
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xB78D8C", Offset = "0xB78D8C", VA = "0xB78D8C")]
			public Control3DEvent()
			{
			}
		}

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Control3DEvent OnValueChanged;

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0xB78B70", Offset = "0xB78B70", VA = "0xB78B70", Slot = "4")]
		protected override void AddListeners(VRTK_Control component)
		{
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xB78C04", Offset = "0xB78C04", VA = "0xB78C04", Slot = "5")]
		protected override void RemoveListeners(VRTK_Control component)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xB78C98", Offset = "0xB78C98", VA = "0xB78C98")]
		private void ValueChanged(object o, Control3DEventArgs e)
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xB78D08", Offset = "0xB78D08", VA = "0xB78D08")]
		public VRTK_Control_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200037B")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_DashTeleport_UnityEvents")]
	public sealed class VRTK_DashTeleport_UnityEvents : VRTK_UnityEvents<VRTK_DashTeleport>
	{
		[Serializable]
		[Token(Token = "0x200037C")]
		public sealed class DashTeleportEvent : UnityEvent<object, DashTeleportEventArgs>
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xB790FC", Offset = "0xB790FC", VA = "0xB790FC")]
			public DashTeleportEvent()
			{
			}
		}

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DashTeleportEvent OnWillDashThruObjects;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DashTeleportEvent OnDashedThruObjects;

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xB78DD4", Offset = "0xB78DD4", VA = "0xB78DD4", Slot = "4")]
		protected override void AddListeners(VRTK_DashTeleport component)
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xB78EAC", Offset = "0xB78EAC", VA = "0xB78EAC", Slot = "5")]
		protected override void RemoveListeners(VRTK_DashTeleport component)
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xB78F84", Offset = "0xB78F84", VA = "0xB78F84")]
		private void WillDashThruObjects(object o, DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xB78FEC", Offset = "0xB78FEC", VA = "0xB78FEC")]
		private void DashedThruObjects(object o, DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0xB79054", Offset = "0xB79054", VA = "0xB79054")]
		public VRTK_DashTeleport_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200037D")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_DestinationMarker_UnityEvents")]
	public sealed class VRTK_DestinationMarker_UnityEvents : VRTK_UnityEvents<VRTK_DestinationMarker>
	{
		[Serializable]
		[Token(Token = "0x200037E")]
		public sealed class DestinationMarkerEvent : UnityEvent<object, DestinationMarkerEventArgs>
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0xB79764", Offset = "0xB79764", VA = "0xB79764")]
			public DestinationMarkerEvent()
			{
			}
		}

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestinationMarkerEvent OnDestinationMarkerEnter;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DestinationMarkerEvent OnDestinationMarkerExit;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DestinationMarkerEvent OnDestinationMarkerHover;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DestinationMarkerEvent OnDestinationMarkerSet;

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xB79144", Offset = "0xB79144", VA = "0xB79144", Slot = "4")]
		protected override void AddListeners(VRTK_DestinationMarker component)
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xB792A4", Offset = "0xB792A4", VA = "0xB792A4", Slot = "5")]
		protected override void RemoveListeners(VRTK_DestinationMarker component)
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xB79404", Offset = "0xB79404", VA = "0xB79404")]
		private void DestinationMarkerEnter(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xB794A0", Offset = "0xB794A0", VA = "0xB794A0")]
		private void DestinationMarkerExit(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xB7953C", Offset = "0xB7953C", VA = "0xB7953C")]
		private void DestinationMarkerHover(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xB795D8", Offset = "0xB795D8", VA = "0xB795D8")]
		private void DestinationMarkerSet(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xB79674", Offset = "0xB79674", VA = "0xB79674")]
		public VRTK_DestinationMarker_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200037F")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_DestinationPoint_UnityEvents")]
	public sealed class VRTK_DestinationPoint_UnityEvents : VRTK_UnityEvents<VRTK_DestinationPoint>
	{
		[Serializable]
		[Token(Token = "0x2000380")]
		public sealed class DestinationPointEvent : UnityEvent<object>
		{
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xB79DC0", Offset = "0xB79DC0", VA = "0xB79DC0")]
			public DestinationPointEvent()
			{
			}
		}

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestinationPointEvent OnDestinationPointEnabled;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DestinationPointEvent OnDestinationPointDisabled;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DestinationPointEvent OnDestinationPointLocked;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DestinationPointEvent OnDestinationPointUnlocked;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DestinationPointEvent OnDestinationPointReset;

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xB797AC", Offset = "0xB797AC", VA = "0xB797AC", Slot = "4")]
		protected override void AddListeners(VRTK_DestinationPoint component)
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xB79950", Offset = "0xB79950", VA = "0xB79950", Slot = "5")]
		protected override void RemoveListeners(VRTK_DestinationPoint component)
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xB79AF4", Offset = "0xB79AF4", VA = "0xB79AF4")]
		private void DestinationPointEnabled(object o)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xB79B4C", Offset = "0xB79B4C", VA = "0xB79B4C")]
		private void DestinationPointDisabled(object o)
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xB79BA4", Offset = "0xB79BA4", VA = "0xB79BA4")]
		private void DestinationPointLocked(object o)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xB79BFC", Offset = "0xB79BFC", VA = "0xB79BFC")]
		private void DestinationPointUnlocked(object o)
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xB79C54", Offset = "0xB79C54", VA = "0xB79C54")]
		private void DestinationPointReset(object o)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0xB79CAC", Offset = "0xB79CAC", VA = "0xB79CAC")]
		public VRTK_DestinationPoint_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000381")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_HeadsetCollision_UnityEvents")]
	public sealed class VRTK_HeadsetCollision_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetCollision>
	{
		[Serializable]
		[Token(Token = "0x2000382")]
		public sealed class HeadsetCollisionEvent : UnityEvent<object, HeadsetCollisionEventArgs>
		{
			[Token(Token = "0x600190A")]
			[Address(RVA = "0xB7A140", Offset = "0xB7A140", VA = "0xB7A140")]
			public HeadsetCollisionEvent()
			{
			}
		}

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetCollisionEvent OnHeadsetCollisionDetect;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetCollisionEvent OnHeadsetCollisionEnded;

		[Token(Token = "0x6001905")]
		[Address(RVA = "0xB79E08", Offset = "0xB79E08", VA = "0xB79E08", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetCollision component)
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xB79EE0", Offset = "0xB79EE0", VA = "0xB79EE0", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetCollision component)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xB79FB8", Offset = "0xB79FB8", VA = "0xB79FB8")]
		private void HeadsetCollisionDetect(object o, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0xB7A028", Offset = "0xB7A028", VA = "0xB7A028")]
		private void HeadsetCollisionEnded(object o, HeadsetCollisionEventArgs e)
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0xB7A098", Offset = "0xB7A098", VA = "0xB7A098")]
		public VRTK_HeadsetCollision_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000383")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_HeadsetControllerAware_UnityEvents")]
	public sealed class VRTK_HeadsetControllerAware_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetControllerAware>
	{
		[Serializable]
		[Token(Token = "0x2000384")]
		public sealed class HeadsetControllerAwareEvent : UnityEvent<object, HeadsetControllerAwareEventArgs>
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xB7A7C8", Offset = "0xB7A7C8", VA = "0xB7A7C8")]
			public HeadsetControllerAwareEvent()
			{
			}
		}

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetControllerAwareEvent OnControllerObscured;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetControllerAwareEvent OnControllerUnobscured;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HeadsetControllerAwareEvent OnControllerGlanceEnter;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HeadsetControllerAwareEvent OnControllerGlanceExit;

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xB7A188", Offset = "0xB7A188", VA = "0xB7A188", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetControllerAware component)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xB7A2E8", Offset = "0xB7A2E8", VA = "0xB7A2E8", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetControllerAware component)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xB7A448", Offset = "0xB7A448", VA = "0xB7A448")]
		private void ControllerObscured(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xB7A4EC", Offset = "0xB7A4EC", VA = "0xB7A4EC")]
		private void ControllerUnobscured(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xB7A590", Offset = "0xB7A590", VA = "0xB7A590")]
		private void ControllerGlanceEnter(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0xB7A634", Offset = "0xB7A634", VA = "0xB7A634")]
		private void ControllerGlanceExit(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xB7A6D8", Offset = "0xB7A6D8", VA = "0xB7A6D8")]
		public VRTK_HeadsetControllerAware_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000385")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_HeadsetFade_UnityEvents")]
	public sealed class VRTK_HeadsetFade_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetFade>
	{
		[Serializable]
		[Token(Token = "0x2000386")]
		public sealed class HeadsetFadeEvent : UnityEvent<object, HeadsetFadeEventArgs>
		{
			[Token(Token = "0x600191A")]
			[Address(RVA = "0xB7AD80", Offset = "0xB7AD80", VA = "0xB7AD80")]
			public HeadsetFadeEvent()
			{
			}
		}

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetFadeEvent OnHeadsetFadeStart;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetFadeEvent OnHeadsetFadeComplete;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HeadsetFadeEvent OnHeadsetUnfadeStart;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HeadsetFadeEvent OnHeadsetUnfadeComplete;

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xB7A810", Offset = "0xB7A810", VA = "0xB7A810", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetFade component)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xB7A970", Offset = "0xB7A970", VA = "0xB7A970", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetFade component)
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xB7AAD0", Offset = "0xB7AAD0", VA = "0xB7AAD0")]
		private void HeadsetFadeStart(object o, HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0xB7AB40", Offset = "0xB7AB40", VA = "0xB7AB40")]
		private void HeadsetFadeComplete(object o, HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xB7ABB0", Offset = "0xB7ABB0", VA = "0xB7ABB0")]
		private void HeadsetUnfadeStart(object o, HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xB7AC20", Offset = "0xB7AC20", VA = "0xB7AC20")]
		private void HeadsetUnfadeComplete(object o, HeadsetFadeEventArgs e)
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0xB7AC90", Offset = "0xB7AC90", VA = "0xB7AC90")]
		public VRTK_HeadsetFade_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000387")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractableObject_UnityEvents")]
	public sealed class VRTK_InteractableObject_UnityEvents : VRTK_UnityEvents<VRTK_InteractableObject>
	{
		[Serializable]
		[Token(Token = "0x2000388")]
		public sealed class InteractableObjectEvent : UnityEvent<object, InteractableObjectEventArgs>
		{
			[Token(Token = "0x600192C")]
			[Address(RVA = "0xB7BDE0", Offset = "0xB7BDE0", VA = "0xB7BDE0")]
			public InteractableObjectEvent()
			{
			}
		}

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableObjectEvent OnObjectEnable;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractableObjectEvent OnObjectDisable;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractableObjectEvent OnNearTouch;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractableObjectEvent OnNearUntouch;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractableObjectEvent OnTouch;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableObjectEvent OnUntouch;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractableObjectEvent OnGrab;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InteractableObjectEvent OnUngrab;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractableObjectEvent OnUse;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractableObjectEvent OnUnuse;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractableObjectEvent OnEnterSnapDropZone;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractableObjectEvent OnExitSnapDropZone;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractableObjectEvent OnSnapToDropZone;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractableObjectEvent OnUnsnapFromDropZone;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xB7ADC8", Offset = "0xB7ADC8", VA = "0xB7ADC8", Slot = "4")]
		protected override void AddListeners(VRTK_InteractableObject component)
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xB7B1D0", Offset = "0xB7B1D0", VA = "0xB7B1D0", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractableObject component)
		{
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0xB7B5D8", Offset = "0xB7B5D8", VA = "0xB7B5D8")]
		private void Enable(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xB7B640", Offset = "0xB7B640", VA = "0xB7B640")]
		private void Disable(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0xB7B6A8", Offset = "0xB7B6A8", VA = "0xB7B6A8")]
		private void NearTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0xB7B710", Offset = "0xB7B710", VA = "0xB7B710")]
		private void NearUnTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0xB7B778", Offset = "0xB7B778", VA = "0xB7B778")]
		private void Touch(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xB7B7E0", Offset = "0xB7B7E0", VA = "0xB7B7E0")]
		private void UnTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xB7B848", Offset = "0xB7B848", VA = "0xB7B848")]
		private void Grab(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0xB7B8B0", Offset = "0xB7B8B0", VA = "0xB7B8B0")]
		private void UnGrab(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0xB7B918", Offset = "0xB7B918", VA = "0xB7B918")]
		private void Use(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xB7B980", Offset = "0xB7B980", VA = "0xB7B980")]
		private void Unuse(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xB7B9E8", Offset = "0xB7B9E8", VA = "0xB7B9E8")]
		private void EnterSnapDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xB7BA50", Offset = "0xB7BA50", VA = "0xB7BA50")]
		private void ExitSnapDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xB7BAB8", Offset = "0xB7BAB8", VA = "0xB7BAB8")]
		private void SnapToDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xB7BB20", Offset = "0xB7BB20", VA = "0xB7BB20")]
		private void UnsnapFromDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xB7BB88", Offset = "0xB7BB88", VA = "0xB7BB88")]
		public VRTK_InteractableObject_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000389")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractControllerAppearance_UnityEvents")]
	[Obsolete("`VRTK_InteractControllerAppearance_UnityEvents` has been replaced with `VRTK_InteractObjectAppearance_UnityEvents`. This script will be removed in a future version of VRTK.")]
	public sealed class VRTK_InteractControllerAppearance_UnityEvents : VRTK_UnityEvents<VRTK_InteractControllerAppearance>
	{
		[Serializable]
		[Token(Token = "0x200038A")]
		public sealed class InteractControllerAppearanceEvent : UnityEvent<object, InteractControllerAppearanceEventArgs>
		{
			[Token(Token = "0x6001938")]
			[Address(RVA = "0xB7C808", Offset = "0xB7C808", VA = "0xB7C808")]
			public InteractControllerAppearanceEvent()
			{
			}
		}

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractControllerAppearanceEvent OnControllerHidden;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractControllerAppearanceEvent OnControllerVisible;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractControllerAppearanceEvent OnHiddenOnTouch;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractControllerAppearanceEvent OnVisibleOnTouch;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractControllerAppearanceEvent OnHiddenOnGrab;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractControllerAppearanceEvent OnVisibleOnGrab;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractControllerAppearanceEvent OnHiddenOnUse;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InteractControllerAppearanceEvent OnVisibleOnUse;

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xB7BE28", Offset = "0xB7BE28", VA = "0xB7BE28", Slot = "4")]
		protected override void AddListeners(VRTK_InteractControllerAppearance component)
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xB7C098", Offset = "0xB7C098", VA = "0xB7C098", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractControllerAppearance component)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xB7C308", Offset = "0xB7C308", VA = "0xB7C308")]
		private void ControllerHidden(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xB7C378", Offset = "0xB7C378", VA = "0xB7C378")]
		private void ControllerVisible(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xB7C3E8", Offset = "0xB7C3E8", VA = "0xB7C3E8")]
		private void HiddenOnTouch(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xB7C458", Offset = "0xB7C458", VA = "0xB7C458")]
		private void VisibleOnTouch(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xB7C4C8", Offset = "0xB7C4C8", VA = "0xB7C4C8")]
		private void HiddenOnGrab(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xB7C538", Offset = "0xB7C538", VA = "0xB7C538")]
		private void VisibleOnGrab(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0xB7C5A8", Offset = "0xB7C5A8", VA = "0xB7C5A8")]
		private void HiddenOnUse(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0xB7C618", Offset = "0xB7C618", VA = "0xB7C618")]
		private void VisibleOnUse(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xB7C688", Offset = "0xB7C688", VA = "0xB7C688")]
		public VRTK_InteractControllerAppearance_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200038B")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractGrab_UnityEvents")]
	public sealed class VRTK_InteractGrab_UnityEvents : VRTK_UnityEvents<VRTK_InteractGrab>
	{
		[Serializable]
		[Token(Token = "0x200038C")]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0xB7D07C", Offset = "0xB7D07C", VA = "0xB7D07C")]
			public ObjectInteractEvent()
			{
			}
		}

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartGrabInteractableObject;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerGrabInteractableObject;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUngrabInteractableObject;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUngrabInteractableObject;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnGrabButtonPressed;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnGrabButtonReleased;

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xB7C850", Offset = "0xB7C850", VA = "0xB7C850", Slot = "4")]
		protected override void AddListeners(VRTK_InteractGrab component)
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xB7CA4C", Offset = "0xB7CA4C", VA = "0xB7CA4C", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractGrab component)
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xB7CC48", Offset = "0xB7CC48", VA = "0xB7CC48")]
		private void ControllerStartGrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xB7CCB8", Offset = "0xB7CCB8", VA = "0xB7CCB8")]
		private void ControllerGrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xB7CD28", Offset = "0xB7CD28", VA = "0xB7CD28")]
		private void ControllerStartUngrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xB7CD98", Offset = "0xB7CD98", VA = "0xB7CD98")]
		private void ControllerUngrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xB7CE08", Offset = "0xB7CE08", VA = "0xB7CE08")]
		private void GrabButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xB7CE9C", Offset = "0xB7CE9C", VA = "0xB7CE9C")]
		private void GrabButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xB7CF30", Offset = "0xB7CF30", VA = "0xB7CF30")]
		public VRTK_InteractGrab_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200038D")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractHaptics_UnityEvents")]
	public sealed class VRTK_InteractHaptics_UnityEvents : VRTK_UnityEvents<VRTK_InteractHaptics>
	{
		[Serializable]
		[Token(Token = "0x200038E")]
		public sealed class InteractHapticsEvent : UnityEvent<object, InteractHapticsEventArgs>
		{
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xB7D614", Offset = "0xB7D614", VA = "0xB7D614")]
			public InteractHapticsEvent()
			{
			}
		}

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractHapticsEvent OnInteractHapticsNearTouched;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractHapticsEvent OnInteractHapticsTouched;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractHapticsEvent OnInteractHapticsGrabbed;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractHapticsEvent OnInteractHapticsUsed;

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xB7D0C4", Offset = "0xB7D0C4", VA = "0xB7D0C4", Slot = "4")]
		protected override void AddListeners(VRTK_InteractHaptics component)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xB7D224", Offset = "0xB7D224", VA = "0xB7D224", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractHaptics component)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xB7D384", Offset = "0xB7D384", VA = "0xB7D384")]
		private void InteractHapticsNearTouched(object o, InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xB7D3EC", Offset = "0xB7D3EC", VA = "0xB7D3EC")]
		private void InteractHapticsTouched(object o, InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xB7D454", Offset = "0xB7D454", VA = "0xB7D454")]
		private void InteractHapticsGrabbed(object o, InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xB7D4BC", Offset = "0xB7D4BC", VA = "0xB7D4BC")]
		private void InteractHapticsUsed(object o, InteractHapticsEventArgs e)
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xB7D524", Offset = "0xB7D524", VA = "0xB7D524")]
		public VRTK_InteractHaptics_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200038F")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractNearTouch_UnityEvents")]
	public sealed class VRTK_InteractNearTouch_UnityEvents : VRTK_UnityEvents<VRTK_InteractNearTouch>
	{
		[Serializable]
		[Token(Token = "0x2000390")]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xB7D994", Offset = "0xB7D994", VA = "0xB7D994")]
			public ObjectInteractEvent()
			{
			}
		}

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerNearTouchInteractableObject;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerNearUntouchInteractableObject;

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xB7D65C", Offset = "0xB7D65C", VA = "0xB7D65C", Slot = "4")]
		protected override void AddListeners(VRTK_InteractNearTouch component)
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xB7D734", Offset = "0xB7D734", VA = "0xB7D734", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractNearTouch component)
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xB7D80C", Offset = "0xB7D80C", VA = "0xB7D80C")]
		private void ControllerNearTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xB7D87C", Offset = "0xB7D87C", VA = "0xB7D87C")]
		private void ControllerNearUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0xB7D8EC", Offset = "0xB7D8EC", VA = "0xB7D8EC")]
		public VRTK_InteractNearTouch_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000391")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractObjectAppearance_UnityEvents")]
	public sealed class VRTK_InteractObjectAppearance_UnityEvents : VRTK_UnityEvents<VRTK_InteractObjectAppearance>
	{
		[Serializable]
		[Token(Token = "0x2000392")]
		public sealed class InteractObjectAppearanceEvent : UnityEvent<object, InteractObjectAppearanceEventArgs>
		{
			[Token(Token = "0x6001958")]
			[Address(RVA = "0xB7DF9C", Offset = "0xB7DF9C", VA = "0xB7DF9C")]
			public InteractObjectAppearanceEvent()
			{
			}
		}

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractObjectAppearanceEvent OnGameObjectEnabled;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractObjectAppearanceEvent OnGameObjectDisabled;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractObjectAppearanceEvent OnRenderersEnabled;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractObjectAppearanceEvent OnRenderersDisabled;

		[Token(Token = "0x6001951")]
		[Address(RVA = "0xB7D9DC", Offset = "0xB7D9DC", VA = "0xB7D9DC", Slot = "4")]
		protected override void AddListeners(VRTK_InteractObjectAppearance component)
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xB7DB3C", Offset = "0xB7DB3C", VA = "0xB7DB3C", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractObjectAppearance component)
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xB7DC9C", Offset = "0xB7DC9C", VA = "0xB7DC9C")]
		private void GameObjectEnabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xB7DD20", Offset = "0xB7DD20", VA = "0xB7DD20")]
		private void GameObjectDisabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xB7DDA4", Offset = "0xB7DDA4", VA = "0xB7DDA4")]
		private void RenderersEnabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xB7DE28", Offset = "0xB7DE28", VA = "0xB7DE28")]
		private void RenderersDisabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xB7DEAC", Offset = "0xB7DEAC", VA = "0xB7DEAC")]
		public VRTK_InteractObjectAppearance_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000393")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractObjectHighlighter_UnityEvents")]
	public sealed class VRTK_InteractObjectHighlighter_UnityEvents : VRTK_UnityEvents<VRTK_InteractObjectHighlighter>
	{
		[Serializable]
		[Token(Token = "0x2000394")]
		public sealed class InteractObjectHighlighterEvent : UnityEvent<object, InteractObjectHighlighterEventArgs>
		{
			[Token(Token = "0x600195E")]
			[Address(RVA = "0xB7E364", Offset = "0xB7E364", VA = "0xB7E364")]
			public InteractObjectHighlighterEvent()
			{
			}
		}

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractObjectHighlighterEvent OnInteractObjectHighlighterHighlighted;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractObjectHighlighterEvent OnInteractObjectHighlighterUnhighlighted;

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xB7DFE4", Offset = "0xB7DFE4", VA = "0xB7DFE4", Slot = "4")]
		protected override void AddListeners(VRTK_InteractObjectHighlighter component)
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xB7E0BC", Offset = "0xB7E0BC", VA = "0xB7E0BC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractObjectHighlighter component)
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xB7E194", Offset = "0xB7E194", VA = "0xB7E194")]
		private void InteractObjectHighlighterHighlighted(object o, InteractObjectHighlighterEventArgs e)
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xB7E228", Offset = "0xB7E228", VA = "0xB7E228")]
		private void InteractObjectHighlighterUnhighlighted(object o, InteractObjectHighlighterEventArgs e)
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xB7E2BC", Offset = "0xB7E2BC", VA = "0xB7E2BC")]
		public VRTK_InteractObjectHighlighter_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractTouch_UnityEvents")]
	public sealed class VRTK_InteractTouch_UnityEvents : VRTK_UnityEvents<VRTK_InteractTouch>
	{
		[Serializable]
		[Token(Token = "0x2000396")]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Token(Token = "0x6001968")]
			[Address(RVA = "0xB7EB6C", Offset = "0xB7EB6C", VA = "0xB7EB6C")]
			public ObjectInteractEvent()
			{
			}
		}

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartTouchInteractableObject;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerTouchInteractableObject;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUntouchInteractableObject;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUntouchInteractableObject;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ObjectInteractEvent OnControllerRigidbodyActivated;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ObjectInteractEvent OnControllerRigidbodyDeactivated;

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xB7E3AC", Offset = "0xB7E3AC", VA = "0xB7E3AC", Slot = "4")]
		protected override void AddListeners(VRTK_InteractTouch component)
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xB7E594", Offset = "0xB7E594", VA = "0xB7E594", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractTouch component)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xB7E77C", Offset = "0xB7E77C", VA = "0xB7E77C")]
		private void ControllerStartTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xB7E7EC", Offset = "0xB7E7EC", VA = "0xB7E7EC")]
		private void ControllerTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xB7E85C", Offset = "0xB7E85C", VA = "0xB7E85C")]
		private void ControllerStartUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xB7E8CC", Offset = "0xB7E8CC", VA = "0xB7E8CC")]
		private void ControllerUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xB7E93C", Offset = "0xB7E93C", VA = "0xB7E93C")]
		private void ControllerRigidbodyActivated(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xB7E9AC", Offset = "0xB7E9AC", VA = "0xB7E9AC")]
		private void ControllerRigidbodyDeactivated(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xB7EA1C", Offset = "0xB7EA1C", VA = "0xB7EA1C")]
		public VRTK_InteractTouch_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_InteractUse_UnityEvents")]
	public sealed class VRTK_InteractUse_UnityEvents : VRTK_UnityEvents<VRTK_InteractUse>
	{
		[Serializable]
		[Token(Token = "0x2000398")]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Token(Token = "0x6001972")]
			[Address(RVA = "0xB7F3E8", Offset = "0xB7F3E8", VA = "0xB7F3E8")]
			public ObjectInteractEvent()
			{
			}
		}

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartUseInteractableObject;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerUseInteractableObject;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUnuseInteractableObject;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUnuseInteractableObject;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnUseButtonPressed;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnUseButtonReleased;

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xB7EBB4", Offset = "0xB7EBB4", VA = "0xB7EBB4", Slot = "4")]
		protected override void AddListeners(VRTK_InteractUse component)
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xB7EDB0", Offset = "0xB7EDB0", VA = "0xB7EDB0", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractUse component)
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xB7EFAC", Offset = "0xB7EFAC", VA = "0xB7EFAC")]
		private void ControllerStartUseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xB7F01C", Offset = "0xB7F01C", VA = "0xB7F01C")]
		private void ControllerUseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xB7F08C", Offset = "0xB7F08C", VA = "0xB7F08C")]
		private void ControllerStartUnuseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xB7F0FC", Offset = "0xB7F0FC", VA = "0xB7F0FC")]
		private void ControllerUnuseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xB7F16C", Offset = "0xB7F16C", VA = "0xB7F16C")]
		private void UseButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xB7F200", Offset = "0xB7F200", VA = "0xB7F200")]
		private void UseButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xB7F294", Offset = "0xB7F294", VA = "0xB7F294")]
		public VRTK_InteractUse_UnityEvents()
		{
		}
	}
	[Token(Token = "0x2000399")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_MoveTransformGrabAttach_UnityEvents")]
	public sealed class VRTK_MoveTransformGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_MoveTransformGrabAttach>
	{
		[Serializable]
		[Token(Token = "0x200039A")]
		public sealed class MoveTransformGrabAttachEvent : UnityEvent<object, MoveTransformGrabAttachEventArgs>
		{
			[Token(Token = "0x6001983")]
			[Address(RVA = "0xB816B0", Offset = "0xB816B0", VA = "0xB816B0")]
			public MoveTransformGrabAttachEvent()
			{
			}
		}

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoveTransformGrabAttachEvent OnTransformPositionChanged;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MoveTransformGrabAttachEvent OnXAxisMinLimitReached;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoveTransformGrabAttachEvent OnXAxisMinLimitExited;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MoveTransformGrabAttachEvent OnXAxisMaxLimitReached;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MoveTransformGrabAttachEvent OnXAxisMaxLimitExited;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MoveTransformGrabAttachEvent OnYAxisMinLimitReached;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MoveTransformGrabAttachEvent OnYAxisMinLimitExited;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MoveTransformGrabAttachEvent OnYAxisMaxLimitReached;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MoveTransformGrabAttachEvent OnYAxisMaxLimitExited;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MoveTransformGrabAttachEvent OnZAxisMinLimitReached;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MoveTransformGrabAttachEvent OnZAxisMinLimitExited;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MoveTransformGrabAttachEvent OnZAxisMaxLimitReached;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MoveTransformGrabAttachEvent OnZAxisMaxLimitExited;

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xB7F430", Offset = "0xB7F430", VA = "0xB7F430", Slot = "4")]
		protected override void AddListeners(VRTK_MoveTransformGrabAttach component)
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xB800CC", Offset = "0xB800CC", VA = "0xB800CC", Slot = "5")]
		protected override void RemoveListeners(VRTK_MoveTransformGrabAttach component)
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xB80C28", Offset = "0xB80C28", VA = "0xB80C28")]
		private void TransformPositionChanged(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xB80CCC", Offset = "0xB80CCC", VA = "0xB80CCC")]
		private void XAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xB80D70", Offset = "0xB80D70", VA = "0xB80D70")]
		private void XAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xB80E14", Offset = "0xB80E14", VA = "0xB80E14")]
		private void YAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xB80EB8", Offset = "0xB80EB8", VA = "0xB80EB8")]
		private void YAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xB80F5C", Offset = "0xB80F5C", VA = "0xB80F5C")]
		private void ZAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xB81000", Offset = "0xB81000", VA = "0xB81000")]
		private void ZAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xB810A4", Offset = "0xB810A4", VA = "0xB810A4")]
		private void XAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xB81148", Offset = "0xB81148", VA = "0xB81148")]
		private void XAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xB811EC", Offset = "0xB811EC", VA = "0xB811EC")]
		private void YAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xB81290", Offset = "0xB81290", VA = "0xB81290")]
		private void YAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xB81334", Offset = "0xB81334", VA = "0xB81334")]
		private void ZAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xB813D8", Offset = "0xB813D8", VA = "0xB813D8")]
		private void ZAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xB8147C", Offset = "0xB8147C", VA = "0xB8147C")]
		public VRTK_MoveTransformGrabAttach_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200039B")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ObjectAutoGrab_UnityEvents")]
	public sealed class VRTK_ObjectAutoGrab_UnityEvents : VRTK_UnityEvents<VRTK_ObjectAutoGrab>
	{
		[Serializable]
		[Token(Token = "0x200039C")]
		public sealed class ObjectAutoGrabEvent : UnityEvent<object>
		{
			[Token(Token = "0x6001988")]
			[Address(RVA = "0xB818FC", Offset = "0xB818FC", VA = "0xB818FC")]
			public ObjectAutoGrabEvent()
			{
			}
		}

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectAutoGrabEvent OnObjectAutoGrabCompleted;

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xB816F8", Offset = "0xB816F8", VA = "0xB816F8", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectAutoGrab component)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xB8178C", Offset = "0xB8178C", VA = "0xB8178C", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectAutoGrab component)
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xB81820", Offset = "0xB81820", VA = "0xB81820")]
		private void ObjectAutoGrabCompleted(object o)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xB81878", Offset = "0xB81878", VA = "0xB81878")]
		public VRTK_ObjectAutoGrab_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200039D")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ObjectControl_UnityEvents")]
	public sealed class VRTK_ObjectControl_UnityEvents : VRTK_UnityEvents<VRTK_ObjectControl>
	{
		[Serializable]
		[Token(Token = "0x200039E")]
		public sealed class ObjectControlEvent : UnityEvent<object, ObjectControlEventArgs>
		{
			[Token(Token = "0x600198E")]
			[Address(RVA = "0xB81CC4", Offset = "0xB81CC4", VA = "0xB81CC4")]
			public ObjectControlEvent()
			{
			}
		}

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectControlEvent OnXAxisChanged;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectControlEvent OnYAxisChanged;

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xB81944", Offset = "0xB81944", VA = "0xB81944", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectControl component)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xB81A1C", Offset = "0xB81A1C", VA = "0xB81A1C", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectControl component)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xB81AF4", Offset = "0xB81AF4", VA = "0xB81AF4")]
		private void XAxisChanged(object o, ObjectControlEventArgs e)
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xB81B88", Offset = "0xB81B88", VA = "0xB81B88")]
		private void YAxisChanged(object o, ObjectControlEventArgs e)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xB81C1C", Offset = "0xB81C1C", VA = "0xB81C1C")]
		public VRTK_ObjectControl_UnityEvents()
		{
		}
	}
	[Token(Token = "0x200039F")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_ObjectTooltip_UnityEvents")]
	public sealed class VRTK_ObjectTooltip_UnityEvents : VRTK_UnityEvents<VRTK_ObjectTooltip>
	{
		[Serializable]
		[Token(Token = "0x20003A0")]
		public sealed class ObjectTooltipEvent : UnityEvent<object, ObjectTooltipEventArgs>
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0xB82034", Offset = "0xB82034", VA = "0xB82034")]
			public ObjectTooltipEvent()
			{
			}
		}

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectTooltipEvent OnObjectTooltipReset;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectTooltipEvent OnObjectTooltipTextUpdated;

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xB81D0C", Offset = "0xB81D0C", VA = "0xB81D0C", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectTooltip component)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xB81DE4", Offset = "0xB81DE4", VA = "0xB81DE4", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectTooltip component)
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xB81EBC", Offset = "0xB81EBC", VA = "0xB81EBC")]
		private void ObjectTooltipReset(object o, ObjectTooltipEventArgs e)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xB81F24", Offset = "0xB81F24", VA = "0xB81F24")]
		private void ObjectTooltipTextUpdated(object o, ObjectTooltipEventArgs e)
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xB81F8C", Offset = "0xB81F8C", VA = "0xB81F8C")]
		public VRTK_ObjectTooltip_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003A1")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_PlayAreaCursor_UnityEvents")]
	public sealed class VRTK_PlayAreaCursor_UnityEvents : VRTK_UnityEvents<VRTK_PlayAreaCursor>
	{
		[Serializable]
		[Token(Token = "0x20003A2")]
		public sealed class PlayAreaCursorEvent : UnityEvent<object, PlayAreaCursorEventArgs>
		{
			[Token(Token = "0x600199A")]
			[Address(RVA = "0xB823A4", Offset = "0xB823A4", VA = "0xB823A4")]
			public PlayAreaCursorEvent()
			{
			}
		}

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayAreaCursorEvent OnPlayAreaCursorStartCollision;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayAreaCursorEvent OnPlayAreaCursorEndCollision;

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xB8207C", Offset = "0xB8207C", VA = "0xB8207C", Slot = "4")]
		protected override void AddListeners(VRTK_PlayAreaCursor component)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xB82154", Offset = "0xB82154", VA = "0xB82154", Slot = "5")]
		protected override void RemoveListeners(VRTK_PlayAreaCursor component)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xB8222C", Offset = "0xB8222C", VA = "0xB8222C")]
		private void PlayAreaCursorStartCollision(object o, PlayAreaCursorEventArgs e)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xB82294", Offset = "0xB82294", VA = "0xB82294")]
		private void PlayAreaCursorEndCollision(object o, PlayAreaCursorEventArgs e)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xB822FC", Offset = "0xB822FC", VA = "0xB822FC")]
		public VRTK_PlayAreaCursor_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_PlayerClimb_UnityEvents")]
	public sealed class VRTK_PlayerClimb_UnityEvents : VRTK_UnityEvents<VRTK_PlayerClimb>
	{
		[Serializable]
		[Token(Token = "0x20003A4")]
		public sealed class PlayerClimbEvent : UnityEvent<object, PlayerClimbEventArgs>
		{
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0xB82724", Offset = "0xB82724", VA = "0xB82724")]
			public PlayerClimbEvent()
			{
			}
		}

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerClimbEvent OnPlayerClimbStarted;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerClimbEvent OnPlayerClimbEnded;

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xB823EC", Offset = "0xB823EC", VA = "0xB823EC", Slot = "4")]
		protected override void AddListeners(VRTK_PlayerClimb component)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xB824C4", Offset = "0xB824C4", VA = "0xB824C4", Slot = "5")]
		protected override void RemoveListeners(VRTK_PlayerClimb component)
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xB8259C", Offset = "0xB8259C", VA = "0xB8259C")]
		private void PlayerClimbStarted(object o, PlayerClimbEventArgs e)
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xB8260C", Offset = "0xB8260C", VA = "0xB8260C")]
		private void PlayerClimbEnded(object o, PlayerClimbEventArgs e)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xB8267C", Offset = "0xB8267C", VA = "0xB8267C")]
		public VRTK_PlayerClimb_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_PointerDirectionIndicator_UnityEvents")]
	public sealed class VRTK_PointerDirectionIndicator_UnityEvents : VRTK_UnityEvents<VRTK_PointerDirectionIndicator>
	{
		[Serializable]
		[Token(Token = "0x20003A6")]
		public sealed class PointerDirectionIndicatorEvent : UnityEvent<object>
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0xB82970", Offset = "0xB82970", VA = "0xB82970")]
			public PointerDirectionIndicatorEvent()
			{
			}
		}

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PointerDirectionIndicatorEvent OnPointerDirectionIndicatorPositionSet;

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xB8276C", Offset = "0xB8276C", VA = "0xB8276C", Slot = "4")]
		protected override void AddListeners(VRTK_PointerDirectionIndicator component)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xB82800", Offset = "0xB82800", VA = "0xB82800", Slot = "5")]
		protected override void RemoveListeners(VRTK_PointerDirectionIndicator component)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xB82894", Offset = "0xB82894", VA = "0xB82894")]
		private void PointerDirectionIndicatorPositionSet(object o)
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xB828EC", Offset = "0xB828EC", VA = "0xB828EC")]
		public VRTK_PointerDirectionIndicator_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_Pointer_UnityEvents")]
	public sealed class VRTK_Pointer_UnityEvents : VRTK_UnityEvents<VRTK_Pointer>
	{
		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonPressed;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonReleased;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonPressed;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonReleased;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_DestinationMarker_UnityEvents.DestinationMarkerEvent OnPointerStateValid;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_DestinationMarker_UnityEvents.DestinationMarkerEvent OnPointerStateInvalid;

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xB829B8", Offset = "0xB829B8", VA = "0xB829B8", Slot = "4")]
		protected override void AddListeners(VRTK_Pointer component)
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xB82BB4", Offset = "0xB82BB4", VA = "0xB82BB4", Slot = "5")]
		protected override void RemoveListeners(VRTK_Pointer component)
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xB82DB0", Offset = "0xB82DB0", VA = "0xB82DB0")]
		private void ActivationButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xB82E44", Offset = "0xB82E44", VA = "0xB82E44")]
		private void ActivationButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xB82ED8", Offset = "0xB82ED8", VA = "0xB82ED8")]
		private void SelectionButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xB82F6C", Offset = "0xB82F6C", VA = "0xB82F6C")]
		private void SelectionButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xB83000", Offset = "0xB83000", VA = "0xB83000")]
		private void PointerStateValid(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xB8309C", Offset = "0xB8309C", VA = "0xB8309C")]
		private void PointerStateInvalid(object o, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xB83138", Offset = "0xB83138", VA = "0xB83138")]
		public VRTK_Pointer_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_PositionRewind_UnityEvents")]
	public sealed class VRTK_PositionRewind_UnityEvents : VRTK_UnityEvents<VRTK_PositionRewind>
	{
		[Serializable]
		[Token(Token = "0x20003A9")]
		public sealed class PositionRewindEvent : UnityEvent<object, PositionRewindEventArgs>
		{
			[Token(Token = "0x60019B3")]
			[Address(RVA = "0xB834DC", Offset = "0xB834DC", VA = "0xB834DC")]
			public PositionRewindEvent()
			{
			}
		}

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionRewindEvent OnPositionRewindToSafe;

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xB8329C", Offset = "0xB8329C", VA = "0xB8329C", Slot = "4")]
		protected override void AddListeners(VRTK_PositionRewind component)
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xB83330", Offset = "0xB83330", VA = "0xB83330", Slot = "5")]
		protected override void RemoveListeners(VRTK_PositionRewind component)
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xB833C4", Offset = "0xB833C4", VA = "0xB833C4")]
		private void PositionRewindToSafe(object o, PositionRewindEventArgs e)
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xB83458", Offset = "0xB83458", VA = "0xB83458")]
		public VRTK_PositionRewind_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_RotateTransformGrabAttach_UnityEvents")]
	public sealed class VRTK_RotateTransformGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_RotateTransformGrabAttach>
	{
		[Serializable]
		[Token(Token = "0x20003AB")]
		public sealed class RotateTransformGrabAttachEvent : UnityEvent<object, RotateTransformGrabAttachEventArgs>
		{
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xB8431C", Offset = "0xB8431C", VA = "0xB8431C")]
			public RotateTransformGrabAttachEvent()
			{
			}
		}

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotateTransformGrabAttachEvent OnAngleChanged;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RotateTransformGrabAttachEvent OnMinAngleReached;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RotateTransformGrabAttachEvent OnMinAngleExited;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RotateTransformGrabAttachEvent OnMaxAngleReached;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RotateTransformGrabAttachEvent OnMaxAngleExited;

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xB83524", Offset = "0xB83524", VA = "0xB83524", Slot = "4")]
		protected override void AddListeners(VRTK_RotateTransformGrabAttach component)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xB83AEC", Offset = "0xB83AEC", VA = "0xB83AEC", Slot = "5")]
		protected override void RemoveListeners(VRTK_RotateTransformGrabAttach component)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xB83F74", Offset = "0xB83F74", VA = "0xB83F74")]
		private void AngleChanged(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xB83FF8", Offset = "0xB83FF8", VA = "0xB83FF8")]
		private void MinAngleReached(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xB8407C", Offset = "0xB8407C", VA = "0xB8407C")]
		private void MinAngleExited(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xB84100", Offset = "0xB84100", VA = "0xB84100")]
		private void MaxAngleReached(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xB84184", Offset = "0xB84184", VA = "0xB84184")]
		private void MaxAngleExited(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xB84208", Offset = "0xB84208", VA = "0xB84208")]
		public VRTK_RotateTransformGrabAttach_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public sealed class VRTK_SDKManager_UnityEvents : VRTK_UnityEvents<VRTK_SDKManager>
	{
		[Serializable]
		[Token(Token = "0x20003AD")]
		public sealed class LoadedSetupChangeEvent : UnityEvent<VRTK_SDKManager, VRTK_SDKManager.LoadedSetupChangeEventArgs>
		{
			[Token(Token = "0x60019C1")]
			[Address(RVA = "0xB845A4", Offset = "0xB845A4", VA = "0xB845A4")]
			public LoadedSetupChangeEvent()
			{
			}
		}

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadedSetupChangeEvent OnLoadedSetupChanged;

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xB84364", Offset = "0xB84364", VA = "0xB84364", Slot = "4")]
		protected override void AddListeners(VRTK_SDKManager component)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xB843F8", Offset = "0xB843F8", VA = "0xB843F8", Slot = "5")]
		protected override void RemoveListeners(VRTK_SDKManager component)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xB8448C", Offset = "0xB8448C", VA = "0xB8448C")]
		private void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xB84520", Offset = "0xB84520", VA = "0xB84520")]
		public VRTK_SDKManager_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public sealed class VRTK_SDKSetup_UnityEvents : VRTK_UnityEvents<VRTK_SDKSetup>
	{
		[Serializable]
		[Token(Token = "0x20003AF")]
		public sealed class LoadEvent : UnityEvent<VRTK_SDKManager, VRTK_SDKSetup>
		{
			[Token(Token = "0x60019C7")]
			[Address(RVA = "0xB84914", Offset = "0xB84914", VA = "0xB84914")]
			public LoadEvent()
			{
			}
		}

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadEvent OnLoaded;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LoadEvent OnUnloaded;

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0xB845EC", Offset = "0xB845EC", VA = "0xB845EC", Slot = "4")]
		protected override void AddListeners(VRTK_SDKSetup component)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xB846C4", Offset = "0xB846C4", VA = "0xB846C4", Slot = "5")]
		protected override void RemoveListeners(VRTK_SDKSetup component)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xB8479C", Offset = "0xB8479C", VA = "0xB8479C")]
		private void Loaded(VRTK_SDKManager sender, VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xB84804", Offset = "0xB84804", VA = "0xB84804")]
		private void Unloaded(VRTK_SDKManager sender, VRTK_SDKSetup setup)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xB8486C", Offset = "0xB8486C", VA = "0xB8486C")]
		public VRTK_SDKSetup_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_SlingshotJump_UnityEvents")]
	public sealed class VRTK_SlingshotJump_UnityEvents : VRTK_UnityEvents<VRTK_SlingshotJump>
	{
		[Serializable]
		[Token(Token = "0x20003B1")]
		public sealed class SlingshotJumpEvent : UnityEvent<object>
		{
			[Token(Token = "0x60019CC")]
			[Address(RVA = "0xB84B60", Offset = "0xB84B60", VA = "0xB84B60")]
			public SlingshotJumpEvent()
			{
			}
		}

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SlingshotJumpEvent OnSlingshotJumped;

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xB8495C", Offset = "0xB8495C", VA = "0xB8495C", Slot = "4")]
		protected override void AddListeners(VRTK_SlingshotJump component)
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xB849F0", Offset = "0xB849F0", VA = "0xB849F0", Slot = "5")]
		protected override void RemoveListeners(VRTK_SlingshotJump component)
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xB84A84", Offset = "0xB84A84", VA = "0xB84A84")]
		private void SlingshotJumped(object o)
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xB84ADC", Offset = "0xB84ADC", VA = "0xB84ADC")]
		public VRTK_SlingshotJump_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_SnapDropZone_UnityEvents")]
	public sealed class VRTK_SnapDropZone_UnityEvents : VRTK_UnityEvents<VRTK_SnapDropZone>
	{
		[Serializable]
		[Token(Token = "0x20003B3")]
		public sealed class SnapDropZoneEvent : UnityEvent<object, SnapDropZoneEventArgs>
		{
			[Token(Token = "0x60019D4")]
			[Address(RVA = "0xB850F8", Offset = "0xB850F8", VA = "0xB850F8")]
			public SnapDropZoneEvent()
			{
			}
		}

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SnapDropZoneEvent OnObjectEnteredSnapDropZone;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapDropZoneEvent OnObjectExitedSnapDropZone;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SnapDropZoneEvent OnObjectSnappedToDropZone;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SnapDropZoneEvent OnObjectUnsnappedFromDropZone;

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xB84BA8", Offset = "0xB84BA8", VA = "0xB84BA8", Slot = "4")]
		protected override void AddListeners(VRTK_SnapDropZone component)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xB84D08", Offset = "0xB84D08", VA = "0xB84D08", Slot = "5")]
		protected override void RemoveListeners(VRTK_SnapDropZone component)
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xB84E68", Offset = "0xB84E68", VA = "0xB84E68")]
		private void ObjectEnteredSnapDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xB84ED0", Offset = "0xB84ED0", VA = "0xB84ED0")]
		private void ObjectExitedSnapDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xB84F38", Offset = "0xB84F38", VA = "0xB84F38")]
		private void ObjectSnappedToDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xB84FA0", Offset = "0xB84FA0", VA = "0xB84FA0")]
		private void ObjectUnsnappedFromDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xB85008", Offset = "0xB85008", VA = "0xB85008")]
		public VRTK_SnapDropZone_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_UIDraggableItem_UnityEvents")]
	public sealed class VRTK_UIDraggableItem_UnityEvents : VRTK_UnityEvents<VRTK_UIDraggableItem>
	{
		[Serializable]
		[Token(Token = "0x20003B5")]
		public sealed class UIDraggableItemEvent : UnityEvent<object, UIDraggableItemEventArgs>
		{
			[Token(Token = "0x60019DA")]
			[Address(RVA = "0xB85468", Offset = "0xB85468", VA = "0xB85468")]
			public UIDraggableItemEvent()
			{
			}
		}

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIDraggableItemEvent OnDraggableItemDropped;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UIDraggableItemEvent OnDraggableItemReset;

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xB85140", Offset = "0xB85140", VA = "0xB85140", Slot = "4")]
		protected override void AddListeners(VRTK_UIDraggableItem component)
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xB85218", Offset = "0xB85218", VA = "0xB85218", Slot = "5")]
		protected override void RemoveListeners(VRTK_UIDraggableItem component)
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xB852F0", Offset = "0xB852F0", VA = "0xB852F0")]
		private void DraggableItemDropped(object o, UIDraggableItemEventArgs e)
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xB85358", Offset = "0xB85358", VA = "0xB85358")]
		private void DraggableItemReset(object o, UIDraggableItemEventArgs e)
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xB853C0", Offset = "0xB853C0", VA = "0xB853C0")]
		public VRTK_UIDraggableItem_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	[AddComponentMenu("VRTK/Scripts/Utilities/Unity Events/VRTK_UIPointer_UnityEvents")]
	public sealed class VRTK_UIPointer_UnityEvents : VRTK_UnityEvents<VRTK_UIPointer>
	{
		[Serializable]
		[Token(Token = "0x20003B7")]
		public sealed class UIPointerEvent : UnityEvent<object, UIPointerEventArgs>
		{
			[Token(Token = "0x60019E7")]
			[Address(RVA = "0xB86164", Offset = "0xB86164", VA = "0xB86164")]
			public UIPointerEvent()
			{
			}
		}

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIPointerEvent OnUIPointerElementEnter;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UIPointerEvent OnUIPointerElementExit;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UIPointerEvent OnUIPointerElementClick;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UIPointerEvent OnUIPointerElementDragStart;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UIPointerEvent OnUIPointerElementDragEnd;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonPressed;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonReleased;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonPressed;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonReleased;

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xB854B0", Offset = "0xB854B0", VA = "0xB854B0", Slot = "4")]
		protected override void AddListeners(VRTK_UIPointer component)
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xB85778", Offset = "0xB85778", VA = "0xB85778", Slot = "5")]
		protected override void RemoveListeners(VRTK_UIPointer component)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xB85A40", Offset = "0xB85A40", VA = "0xB85A40")]
		private void UIPointerElementEnter(object o, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xB85ADC", Offset = "0xB85ADC", VA = "0xB85ADC")]
		private void UIPointerElementExit(object o, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xB85B78", Offset = "0xB85B78", VA = "0xB85B78")]
		private void UIPointerElementClick(object o, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xB85C14", Offset = "0xB85C14", VA = "0xB85C14")]
		private void UIPointerElementDragStart(object o, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xB85CB0", Offset = "0xB85CB0", VA = "0xB85CB0")]
		private void UIPointerElementDragEnd(object o, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xB85D4C", Offset = "0xB85D4C", VA = "0xB85D4C")]
		private void ActivationButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xB85DE0", Offset = "0xB85DE0", VA = "0xB85DE0")]
		private void ActivationButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xB85E74", Offset = "0xB85E74", VA = "0xB85E74")]
		private void SelectionButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xB85F08", Offset = "0xB85F08", VA = "0xB85F08")]
		private void SelectionButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xB85F9C", Offset = "0xB85F9C", VA = "0xB85F9C")]
		public VRTK_UIPointer_UnityEvents()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public abstract class VRTK_UnityEvents<T> : MonoBehaviour where T : Component
	{
		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T component;

		[Token(Token = "0x60019E8")]
		protected abstract void AddListeners(T component);

		[Token(Token = "0x60019E9")]
		protected abstract void RemoveListeners(T component);

		[Token(Token = "0x60019EA")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60019EB")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60019EC")]
		protected VRTK_UnityEvents()
		{
		}
	}
}
namespace VRTK.SecondaryControllerGrabActions
{
	[Token(Token = "0x20003B9")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Secondary Controller Grab Actions/VRTK_AxisScaleGrabAction")]
	public class VRTK_AxisScaleGrabAction : VRTK_BaseGrabAction
	{
		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The distance the secondary grabbing object must move away from the original grab position before the secondary grabbing object auto ungrabs the Interactable Object.")]
		public float ungrabDistance;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Locks the specified checked axes so they won't be scaled")]
		public Vector3State lockAxis;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If checked all the axes will be scaled together (unless locked)")]
		public bool uniformScaling;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Header("Obsolete Settings")]
		[Obsolete("`VRTK_AxisScaleGrabAction.lockXAxis` has been replaced with the `VRTK_AxisScaleGrabAction.lockAxis`. This parameter will be removed in a future version of VRTK.")]
		[ObsoleteInspector]
		public bool lockXAxis;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[ObsoleteInspector]
		[Obsolete("`VRTK_AxisScaleGrabAction.lockYAxis` has been replaced with the `VRTK_AxisScaleGrabAction.lockAxis`. This parameter will be removed in a future version of VRTK.")]
		public bool lockYAxis;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[ObsoleteInspector]
		[Obsolete("`VRTK_AxisScaleGrabAction.lockZAxis` has been replaced with the `VRTK_AxisScaleGrabAction.lockAxis`. This parameter will be removed in a future version of VRTK.")]
		public bool lockZAxis;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 initialScale;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float initalLength;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float initialScaleFactor;

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0xB861AC", Offset = "0xB861AC", VA = "0xB861AC", Slot = "4")]
		public override void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0xB86458", Offset = "0xB86458", VA = "0xB86458", Slot = "8")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0xB8646C", Offset = "0xB8646C", VA = "0xB8646C", Slot = "9")]
		public override void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0xB864A0", Offset = "0xB864A0", VA = "0xB864A0", Slot = "12")]
		protected virtual void ApplyScale(Vector3 newScale)
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0xB86564", Offset = "0xB86564", VA = "0xB86564", Slot = "13")]
		protected virtual void NonUniformScale()
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xB86788", Offset = "0xB86788", VA = "0xB86788", Slot = "14")]
		protected virtual void UniformScale()
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xB86884", Offset = "0xB86884", VA = "0xB86884", Slot = "15")]
		protected virtual float CalculateAxisScale(float centerPosition, float initialPosition, float currentPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xB86898", Offset = "0xB86898", VA = "0xB86898")]
		public VRTK_AxisScaleGrabAction()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public abstract class VRTK_BaseGrabAction : MonoBehaviour
	{
		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_InteractableObject grabbedObject;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_InteractGrab primaryGrabbingObject;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_InteractGrab secondaryGrabbingObject;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform primaryInitialGrabPoint;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform secondaryInitialGrabPoint;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool initialised;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		protected bool isActionable;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		protected bool isSwappable;

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xB863D8", Offset = "0xB863D8", VA = "0xB863D8", Slot = "4")]
		public virtual void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xB868E8", Offset = "0xB868E8", VA = "0xB868E8", Slot = "5")]
		public virtual void ResetAction()
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0xB86948", Offset = "0xB86948", VA = "0xB86948", Slot = "6")]
		public virtual bool IsActionable()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0xB86950", Offset = "0xB86950", VA = "0xB86950", Slot = "7")]
		public virtual bool IsSwappable()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0xB86468", Offset = "0xB86468", VA = "0xB86468", Slot = "8")]
		public virtual void ProcessUpdate()
		{
		}

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0xB8649C", Offset = "0xB8649C", VA = "0xB8649C", Slot = "9")]
		public virtual void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xB86958", Offset = "0xB86958", VA = "0xB86958", Slot = "10")]
		public virtual void OnDropAction()
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xB8695C", Offset = "0xB8695C", VA = "0xB8695C", Slot = "11")]
		protected virtual void CheckForceStopDistance(float ungrabDistance)
		{
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0xB868D8", Offset = "0xB868D8", VA = "0xB868D8")]
		protected VRTK_BaseGrabAction()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Secondary Controller Grab Actions/VRTK_ControlDirectionGrabAction")]
	public class VRTK_ControlDirectionGrabAction : VRTK_BaseGrabAction
	{
		[Token(Token = "0x20003BC")]
		[CompilerGenerated]
		private sealed class <RealignOnRelease>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ControlDirectionGrabAction <>4__this;

			[Token(Token = "0x40015C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x170001B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A0B")]
				[Address(RVA = "0xB8749C", Offset = "0xB8749C", VA = "0xB8749C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A0D")]
				[Address(RVA = "0xB874E4", Offset = "0xB874E4", VA = "0xB874E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A08")]
			[Address(RVA = "0xB86C90", Offset = "0xB86C90", VA = "0xB86C90")]
			[DebuggerHidden]
			public <RealignOnRelease>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001A09")]
			[Address(RVA = "0xB87374", Offset = "0xB87374", VA = "0xB87374", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A0A")]
			[Address(RVA = "0xB87378", Offset = "0xB87378", VA = "0xB87378", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A0C")]
			[Address(RVA = "0xB874A4", Offset = "0xB874A4", VA = "0xB874A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The distance the secondary controller must move away from the original grab position before the secondary controller auto ungrabs the object.")]
		public float ungrabDistance;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The speed in which the object will snap back to it's original rotation when the secondary controller stops grabbing it. `0` for instant snap, `infinity` for no snap back.")]
		public float releaseSnapSpeed;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Prevent the secondary controller rotating the grabbed object through it's z-axis.")]
		public bool lockZRotation;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 initialPosition;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Quaternion initialRotation;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Quaternion releaseRotation;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Coroutine snappingOnRelease;

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xB86A7C", Offset = "0xB86A7C", VA = "0xB86A7C", Slot = "4")]
		public override void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xB86AF0", Offset = "0xB86AF0", VA = "0xB86AF0", Slot = "5")]
		public override void ResetAction()
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xB86BB8", Offset = "0xB86BB8", VA = "0xB86BB8", Slot = "10")]
		public override void OnDropAction()
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xB86BC4", Offset = "0xB86BC4", VA = "0xB86BC4", Slot = "8")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xB86BD4", Offset = "0xB86BD4", VA = "0xB86BD4", Slot = "9")]
		public override void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xB86BF0", Offset = "0xB86BF0", VA = "0xB86BF0", Slot = "12")]
		protected virtual void StopRealignOnRelease()
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xB86C1C", Offset = "0xB86C1C", VA = "0xB86C1C", Slot = "13")]
		[IteratorStateMachine(typeof(<RealignOnRelease>d__13))]
		protected virtual IEnumerator RealignOnRelease()
		{
			return null;
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xB86CB8", Offset = "0xB86CB8", VA = "0xB86CB8", Slot = "14")]
		protected virtual void AimObject()
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xB86EB0", Offset = "0xB86EB0", VA = "0xB86EB0", Slot = "15")]
		protected virtual void ZLockedAim()
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xB87354", Offset = "0xB87354", VA = "0xB87354")]
		public VRTK_ControlDirectionGrabAction()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Secondary Controller Grab Actions/VRTK_SwapControllerGrabAction")]
	public class VRTK_SwapControllerGrabAction : VRTK_BaseGrabAction
	{
		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0xB874EC", Offset = "0xB874EC", VA = "0xB874EC", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xB874F8", Offset = "0xB874F8", VA = "0xB874F8")]
		public VRTK_SwapControllerGrabAction()
		{
		}
	}
}
namespace VRTK.GrabAttachMechanics
{
	[Token(Token = "0x20003BE")]
	public abstract class VRTK_BaseGrabAttach : MonoBehaviour
	{
		[Token(Token = "0x20003BF")]
		[CompilerGenerated]
		private sealed class <throwEnumerator>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Rigidbody rb;

			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 vel;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 angVel;

			[Token(Token = "0x170001B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A2A")]
				[Address(RVA = "0xB882FC", Offset = "0xB882FC", VA = "0xB882FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A2C")]
				[Address(RVA = "0xB88344", Offset = "0xB88344", VA = "0xB88344", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A27")]
			[Address(RVA = "0xB87F84", Offset = "0xB87F84", VA = "0xB87F84")]
			[DebuggerHidden]
			public <throwEnumerator>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0xB88274", Offset = "0xB88274", VA = "0xB88274", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A29")]
			[Address(RVA = "0xB88278", Offset = "0xB88278", VA = "0xB88278", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0xB88304", Offset = "0xB88304", VA = "0xB88304", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Base Settings", order = 1)]
		[Tooltip("If this is checked then when the Interact Grab grabs the Interactable Object, it will grab it with precision and pick it up at the particular point on the Interactable Object that the Interact Touch is touching.")]
		public bool precisionGrab;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A Transform provided as an empty GameObject which must be the child of the Interactable Object being grabbed and serves as an orientation point to rotate and position the grabbed Interactable Object in relation to the right handed Interact Grab. If no Right Snap Handle is provided but a Left Snap Handle is provided, then the Left Snap Handle will be used in place. If no Snap Handle is provided then the Interactable Object will be grabbed at its central point. Not required for `Precision Grab`.")]
		public Transform rightSnapHandle;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A Transform provided as an empty GameObject which must be the child of the Interactable Object being grabbed and serves as an orientation point to rotate and position the grabbed Interactable Object in relation to the left handed Interact Grab. If no Left Snap Handle is provided but a Right Snap Handle is provided, then the Right Snap Handle will be used in place. If no Snap Handle is provided then the Interactable Object will be grabbed at its central point. Not required for `Precision Grab`.")]
		public Transform leftSnapHandle;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If checked then when the Interactable Object is thrown, the distance between the Interactable Object's attach point and the Interact Grab's attach point will be used to calculate a faster throwing velocity.")]
		public bool throwVelocityWithAttachDistance;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("An amount to multiply the velocity of the given Interactable Object when it is thrown. This can also be used in conjunction with the Interact Grab Throw Multiplier to have certain Interactable Objects be thrown even further than normal (or thrown a shorter distance if a number below 1 is entered).")]
		public float throwMultiplier;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The amount of time to delay collisions affecting the Interactable Object when it is first grabbed. This is useful if the Interactable Object could get stuck inside another GameObject when it is being grabbed.")]
		public float onGrabCollisionDelay;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool tracked;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		protected bool climbable;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		protected bool kinematic;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject grabbedObject;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody grabbedObjectRigidBody;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject grabbedObjectScript;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Transform trackPoint;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform grabbedSnapHandle;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform initialAttachPoint;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Rigidbody controllerAttachPoint;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool throwOnNextFrame;

		[Token(Token = "0x170001B4")]
		private float dirAngleOffset
		{
			[Token(Token = "0x6001A21")]
			[Address(RVA = "0xB87960", Offset = "0xB87960", VA = "0xB87960")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xB87508", Offset = "0xB87508", VA = "0xB87508", Slot = "4")]
		public virtual bool IsTracked()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xB87510", Offset = "0xB87510", VA = "0xB87510", Slot = "5")]
		public virtual bool IsClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xB87518", Offset = "0xB87518", VA = "0xB87518", Slot = "6")]
		public virtual bool IsKinematic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xB87520", Offset = "0xB87520", VA = "0xB87520", Slot = "7")]
		public virtual bool ValidGrab(Rigidbody checkAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xB87528", Offset = "0xB87528", VA = "0xB87528", Slot = "8")]
		public virtual void SetTrackPoint(Transform givenTrackPoint)
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xB87530", Offset = "0xB87530", VA = "0xB87530", Slot = "9")]
		public virtual void SetInitialAttachPoint(Transform givenInitialAttachPoint)
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xB87538", Offset = "0xB87538", VA = "0xB87538", Slot = "10")]
		public virtual bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xB876E8", Offset = "0xB876E8", VA = "0xB876E8", Slot = "11")]
		public virtual void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xB87750", Offset = "0xB87750", VA = "0xB87750", Slot = "12")]
		public virtual Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xB8775C", Offset = "0xB8775C", VA = "0xB8775C", Slot = "13")]
		public virtual void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xB87760", Offset = "0xB87760", VA = "0xB87760", Slot = "14")]
		public virtual void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xB87764", Offset = "0xB87764", VA = "0xB87764", Slot = "15")]
		public virtual void ResetState()
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xB87774", Offset = "0xB87774", VA = "0xB87774", Slot = "16")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A1D")]
		protected abstract void Initialise();

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xB87784", Offset = "0xB87784", VA = "0xB87784", Slot = "18")]
		protected virtual Rigidbody ReleaseFromController(bool applyGrabbingObjectVelocity)
		{
			return null;
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xB8778C", Offset = "0xB8778C", VA = "0xB8778C", Slot = "19")]
		protected virtual void ForceReleaseGrab()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xB878A8", Offset = "0xB878A8", VA = "0xB878A8", Slot = "20")]
		protected virtual void ReleaseObject(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xB8796C", Offset = "0xB8796C", VA = "0xB8796C", Slot = "21")]
		protected virtual void ThrowReleasedObject(Rigidbody objectRigidbody)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xB87ED4", Offset = "0xB87ED4", VA = "0xB87ED4")]
		[IteratorStateMachine(typeof(<throwEnumerator>d__37))]
		private IEnumerator throwEnumerator(Rigidbody rb, Vector3 vel, Vector3 angVel)
		{
			return null;
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xB87FAC", Offset = "0xB87FAC", VA = "0xB87FAC", Slot = "22")]
		protected virtual Transform GetSnapHandle(GameObject grabbingObject)
		{
			return null;
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xB88128", Offset = "0xB88128", VA = "0xB88128", Slot = "23")]
		protected virtual void ProcessSDKTransformModify(VRTK_ControllerReference controllerReference)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xB88264", Offset = "0xB88264", VA = "0xB88264")]
		protected VRTK_BaseGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public abstract class VRTK_BaseJointGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("Determines whether the joint should be destroyed immediately on release or whether to wait till the end of the frame before being destroyed.")]
		[Header("Joint Settings", order = 2)]
		public bool destroyImmediatelyOnThrow;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Joint givenJoint;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Joint controllerAttachJoint;

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xB8834C", Offset = "0xB8834C", VA = "0xB8834C", Slot = "7")]
		public override bool ValidGrab(Rigidbody checkAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xB8840C", Offset = "0xB8840C", VA = "0xB8840C", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xB88454", Offset = "0xB88454", VA = "0xB88454", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xB88480", Offset = "0xB88480", VA = "0xB88480", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xB88494", Offset = "0xB88494", VA = "0xB88494", Slot = "18")]
		protected override Rigidbody ReleaseFromController(bool applyGrabbingObjectVelocity)
		{
			return null;
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xB88570", Offset = "0xB88570", VA = "0xB88570", Slot = "24")]
		protected virtual void OnJointBreak(float force)
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xB88580", Offset = "0xB88580", VA = "0xB88580", Slot = "25")]
		protected virtual void CreateJoint(GameObject obj)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xB88678", Offset = "0xB88678", VA = "0xB88678", Slot = "26")]
		protected virtual void DestroyJoint(bool withDestroyImmediate, bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xB88714", Offset = "0xB88714", VA = "0xB88714", Slot = "27")]
		protected virtual void SetSnappedObjectPosition(GameObject obj)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xB8893C", Offset = "0xB8893C", VA = "0xB8893C", Slot = "28")]
		protected virtual void SnapObjectToGrabToController(GameObject obj)
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xB8898C", Offset = "0xB8898C", VA = "0xB8898C")]
		protected VRTK_BaseJointGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_ChildOfControllerGrabAttach")]
	public class VRTK_ChildOfControllerGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xB889A4", Offset = "0xB889A4", VA = "0xB889A4", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xB88A08", Offset = "0xB88A08", VA = "0xB88A08", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xB88A34", Offset = "0xB88A34", VA = "0xB88A34", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xB88A44", Offset = "0xB88A44", VA = "0xB88A44", Slot = "24")]
		protected virtual void SetSnappedObjectPosition(GameObject obj)
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xB88C6C", Offset = "0xB88C6C", VA = "0xB88C6C", Slot = "25")]
		protected virtual void SnapObjectToGrabToController(GameObject obj)
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xB88CE4", Offset = "0xB88CE4", VA = "0xB88CE4")]
		public VRTK_ChildOfControllerGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_ClimbableGrabAttach")]
	public class VRTK_ClimbableGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("Will respect the grabbed climbing object's rotation if it changes dynamically")]
		[Header("Climbable Settings", order = 2)]
		public bool useObjectRotation;

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xB88CF4", Offset = "0xB88CF4", VA = "0xB88CF4", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xB88D08", Offset = "0xB88D08", VA = "0xB88D08")]
		public VRTK_ClimbableGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public struct ControlAnimationGrabAttachEventArgs
	{
		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float currentFrame;
	}
	[Token(Token = "0x20003C4")]
	public delegate void ControlAnimationGrabAttachEventHandler(object sender, ControlAnimationGrabAttachEventArgs e);
	[Token(Token = "0x20003C5")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_ControlAnimationGrabAttach")]
	public class VRTK_ControlAnimationGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x20003C6")]
		[CompilerGenerated]
		private sealed class <ResetTimeline>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ControlAnimationGrabAttach <>4__this;

			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float frame;

			[Token(Token = "0x170001B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A5F")]
				[Address(RVA = "0xB8A2E0", Offset = "0xB8A2E0", VA = "0xB8A2E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A61")]
				[Address(RVA = "0xB8A328", Offset = "0xB8A328", VA = "0xB8A328", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0xB8A0CC", Offset = "0xB8A0CC", VA = "0xB8A0CC")]
			[DebuggerHidden]
			public <ResetTimeline>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0xB8A21C", Offset = "0xB8A21C", VA = "0xB8A21C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0xB8A220", Offset = "0xB8A220", VA = "0xB8A220", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A60")]
			[Address(RVA = "0xB8A2E8", Offset = "0xB8A2E8", VA = "0xB8A2E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The maximum distance the grabbing object is away from the Interactable Object before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Animation Settings", order = 2)]
		[Tooltip("An Animation with the timeline to scrub through on grab. If this is set then the `Animator Timeline` will be ignored if it is also set.")]
		public Animation animationTimeline;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("An Animator with the timeline to scrub through on grab.")]
		public Animator animatorTimeline;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The maximum amount of frames in the timeline.")]
		public float maxFrames;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("An amount to multiply the distance by to determine the scrubbed frame to be on.")]
		public float distanceMultiplier;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If this is checked then the animation will rewind to the start on ungrab.")]
		public bool rewindOnRelease;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The speed in which the animation rewind will be multiplied by.")]
		public float rewindSpeedMultplier;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float animationSpeed;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float frameOffset;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float currentFrame;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Coroutine resetTimelineRoutine;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool atEnd;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected string animationName;

		[Token(Token = "0x140000EC")]
		public event ControlAnimationGrabAttachEventHandler AnimationFrameAtStart
		{
			[Token(Token = "0x6001A44")]
			[Address(RVA = "0xB88F0C", Offset = "0xB88F0C", VA = "0xB88F0C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A45")]
			[Address(RVA = "0xB88FA8", Offset = "0xB88FA8", VA = "0xB88FA8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000ED")]
		public event ControlAnimationGrabAttachEventHandler AnimationFrameAtEnd
		{
			[Token(Token = "0x6001A46")]
			[Address(RVA = "0xB89044", Offset = "0xB89044", VA = "0xB89044")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A47")]
			[Address(RVA = "0xB890E0", Offset = "0xB890E0", VA = "0xB890E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000EE")]
		public event ControlAnimationGrabAttachEventHandler AnimationFrameChanged
		{
			[Token(Token = "0x6001A48")]
			[Address(RVA = "0xB8917C", Offset = "0xB8917C", VA = "0xB8917C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A49")]
			[Address(RVA = "0xB89218", Offset = "0xB89218", VA = "0xB89218")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xB892B4", Offset = "0xB892B4", VA = "0xB892B4", Slot = "24")]
		public virtual void OnAnimationFrameChanged(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0xB892E0", Offset = "0xB892E0", VA = "0xB892E0", Slot = "25")]
		public virtual void OnAnimationFrameAtStart(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0xB8930C", Offset = "0xB8930C", VA = "0xB8930C", Slot = "26")]
		public virtual void OnAnimationFrameAtEnd(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0xB89338", Offset = "0xB89338", VA = "0xB89338", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xB8938C", Offset = "0xB8938C", VA = "0xB8938C", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0xB893CC", Offset = "0xB893CC", VA = "0xB893CC", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xB895F8", Offset = "0xB895F8", VA = "0xB895F8", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xB89824", Offset = "0xB89824", VA = "0xB89824", Slot = "27")]
		public virtual void SetFrame(float frame)
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xB8995C", Offset = "0xB8995C", VA = "0xB8995C", Slot = "28")]
		public virtual void RewindAnimation()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xB899B0", Offset = "0xB899B0", VA = "0xB899B0", Slot = "29")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xB899C0", Offset = "0xB899C0", VA = "0xB899C0", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xB899DC", Offset = "0xB899DC", VA = "0xB899DC", Slot = "30")]
		protected virtual void InitTimeline()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0xB89E38", Offset = "0xB89E38", VA = "0xB89E38", Slot = "31")]
		protected virtual void SetTimelineSpeed(float speed)
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xB89F28", Offset = "0xB89F28", VA = "0xB89F28", Slot = "32")]
		protected virtual void SetTimelinePosition(float framePosition)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xB8A034", Offset = "0xB8A034", VA = "0xB8A034", Slot = "33")]
		protected virtual void CancelResetTimeline()
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xB8A048", Offset = "0xB8A048", VA = "0xB8A048", Slot = "34")]
		[IteratorStateMachine(typeof(<ResetTimeline>d__37))]
		protected virtual IEnumerator ResetTimeline(float frame)
		{
			return null;
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xB8A0F4", Offset = "0xB8A0F4", VA = "0xB8A0F4", Slot = "35")]
		protected virtual ControlAnimationGrabAttachEventArgs SetEventPayload(float frame)
		{
			return default(ControlAnimationGrabAttachEventArgs);
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xB8A1AC", Offset = "0xB8A1AC", VA = "0xB8A1AC")]
		public VRTK_ControlAnimationGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_CustomJointGrabAttach")]
	public class VRTK_CustomJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The joint to use for the grab attach joint.")]
		public Joint customJoint;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject jointHolder;

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0xB8A330", Offset = "0xB8A330", VA = "0xB8A330", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0xB8A364", Offset = "0xB8A364", VA = "0xB8A364", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0xB8A704", Offset = "0xB8A704", VA = "0xB8A704", Slot = "26")]
		protected override void DestroyJoint(bool withDestroyImmediate, bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0xB8A710", Offset = "0xB8A710", VA = "0xB8A710", Slot = "29")]
		protected virtual void CopyCustomJoint()
		{
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xB8A97C", Offset = "0xB8A97C", VA = "0xB8A97C")]
		public VRTK_CustomJointGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_FixedJointGrabAttach")]
	public class VRTK_FixedJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Maximum force the Joint can withstand before breaking. Setting to `infinity` ensures the Joint is unbreakable.")]
		public float breakForce;

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xB8A994", Offset = "0xB8A994", VA = "0xB8A994", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xB8AA4C", Offset = "0xB8AA4C", VA = "0xB8AA4C")]
		public VRTK_FixedJointGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public struct MoveTransformGrabAttachEventArgs
	{
		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 position;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 normalizedPosition;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 currentDirection;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 originDirection;
	}
	[Token(Token = "0x20003CA")]
	public delegate void MoveTransformGrabAttachEventHandler(object sender, MoveTransformGrabAttachEventArgs e);
	[Token(Token = "0x20003CB")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_MoveTransformGrabAttach")]
	public class VRTK_MoveTransformGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x20003CC")]
		[CompilerGenerated]
		private sealed class <MoveToPosition>d__93 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400161B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400161C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_MoveTransformGrabAttach <>4__this;

			[Token(Token = "0x400161D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float speed;

			[Token(Token = "0x170001B9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AB3")]
				[Address(RVA = "0xB8CA90", Offset = "0xB8CA90", VA = "0xB8CA90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AB5")]
				[Address(RVA = "0xB8CAD8", Offset = "0xB8CAD8", VA = "0xB8CAD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AB0")]
			[Address(RVA = "0xB8BED4", Offset = "0xB8BED4", VA = "0xB8BED4")]
			[DebuggerHidden]
			public <MoveToPosition>d__93(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB1")]
			[Address(RVA = "0xB8C910", Offset = "0xB8C910", VA = "0xB8C910", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AB2")]
			[Address(RVA = "0xB8C914", Offset = "0xB8C914", VA = "0xB8C914", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AB4")]
			[Address(RVA = "0xB8CA98", Offset = "0xB8CA98", VA = "0xB8CA98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CD")]
		[CompilerGenerated]
		private sealed class <DeceleratePosition>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_MoveTransformGrabAttach <>4__this;

			[Token(Token = "0x170001BB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AB9")]
				[Address(RVA = "0xB8CC54", Offset = "0xB8CC54", VA = "0xB8CC54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ABB")]
				[Address(RVA = "0xB8CC9C", Offset = "0xB8CC9C", VA = "0xB8CC9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AB6")]
			[Address(RVA = "0xB8BF70", Offset = "0xB8BF70", VA = "0xB8BF70")]
			[DebuggerHidden]
			public <DeceleratePosition>d__94(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0xB8CAE0", Offset = "0xB8CAE0", VA = "0xB8CAE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AB8")]
			[Address(RVA = "0xB8CAE4", Offset = "0xB8CAE4", VA = "0xB8CAE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0xB8CC5C", Offset = "0xB8CC5C", VA = "0xB8CC5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The maximum distance the grabbing object is away from the Interactable Object before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement Settings")]
		[Tooltip("The speed in which to track the grabbed Interactable Object to the interacting object.")]
		public float trackingSpeed;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("If this is checked then it will force the rigidbody on the Interactable Object to be `Kinematic` when the grab occurs.")]
		public bool forceKinematicOnGrab;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The damper in which to slow the Interactable Object down when released to simulate continued momentum. The higher the number, the faster the Interactable Object will come to a complete stop on release.")]
		public float releaseDecelerationDamper;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("The speed in which the Interactable Object returns to it's origin position when released. If the `Reset To Orign On Release Speed` is `0f` then the position will not be reset.")]
		public float resetToOrignOnReleaseSpeed;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Position Limit Settings")]
		[Tooltip("The minimum and maximum limits the Interactable Object can be moved along the x axis.")]
		public Limits2D xAxisLimits;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The minimum and maximum limits the Interactable Object can be moved along the y axis.")]
		public Limits2D yAxisLimits;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The minimum and maximum limits the Interactable Object can be moved along the z axis.")]
		public Limits2D zAxisLimits;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The threshold the position value needs to be within to register a min or max position value.")]
		public float minMaxThreshold;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("The threshold the normalized position value needs to be within to register a min or max normalized position value.")]
		[Range(0f, 0.99f)]
		public float minMaxNormalizedThreshold;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Vector3 localOrigin;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected bool previousKinematicState;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool[] limitsReached;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Limits2D xOriginLimits;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected Limits2D yOriginLimits;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected Limits2D zOriginLimits;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		protected Vector3 movementVelocity;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected Coroutine resetPositionRoutine;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected Coroutine deceleratePositionRoutine;

		[Token(Token = "0x140000EF")]
		public event MoveTransformGrabAttachEventHandler TransformPositionChanged
		{
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0xB7F8CC", Offset = "0xB7F8CC", VA = "0xB7F8CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0xB80428", Offset = "0xB80428", VA = "0xB80428")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F0")]
		public event MoveTransformGrabAttachEventHandler XAxisMinLimitReached
		{
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0xB7F968", Offset = "0xB7F968", VA = "0xB7F968")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A70")]
			[Address(RVA = "0xB804C4", Offset = "0xB804C4", VA = "0xB804C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F1")]
		public event MoveTransformGrabAttachEventHandler XAxisMinLimitExited
		{
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0xB7FD18", Offset = "0xB7FD18", VA = "0xB7FD18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0xB80874", Offset = "0xB80874", VA = "0xB80874")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F2")]
		public event MoveTransformGrabAttachEventHandler XAxisMaxLimitReached
		{
			[Token(Token = "0x6001A73")]
			[Address(RVA = "0xB7FA04", Offset = "0xB7FA04", VA = "0xB7FA04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0xB80560", Offset = "0xB80560", VA = "0xB80560")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F3")]
		public event MoveTransformGrabAttachEventHandler XAxisMaxLimitExited
		{
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0xB7FDB4", Offset = "0xB7FDB4", VA = "0xB7FDB4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0xB80910", Offset = "0xB80910", VA = "0xB80910")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F4")]
		public event MoveTransformGrabAttachEventHandler YAxisMinLimitReached
		{
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0xB7FAA0", Offset = "0xB7FAA0", VA = "0xB7FAA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0xB805FC", Offset = "0xB805FC", VA = "0xB805FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F5")]
		public event MoveTransformGrabAttachEventHandler YAxisMinLimitExited
		{
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0xB7FE50", Offset = "0xB7FE50", VA = "0xB7FE50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0xB809AC", Offset = "0xB809AC", VA = "0xB809AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F6")]
		public event MoveTransformGrabAttachEventHandler YAxisMaxLimitReached
		{
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0xB7FB3C", Offset = "0xB7FB3C", VA = "0xB7FB3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0xB80698", Offset = "0xB80698", VA = "0xB80698")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F7")]
		public event MoveTransformGrabAttachEventHandler YAxisMaxLimitExited
		{
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0xB7FEEC", Offset = "0xB7FEEC", VA = "0xB7FEEC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0xB80A48", Offset = "0xB80A48", VA = "0xB80A48")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F8")]
		public event MoveTransformGrabAttachEventHandler ZAxisMinLimitReached
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0xB7FBD8", Offset = "0xB7FBD8", VA = "0xB7FBD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xB80734", Offset = "0xB80734", VA = "0xB80734")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000F9")]
		public event MoveTransformGrabAttachEventHandler ZAxisMinLimitExited
		{
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0xB7FF8C", Offset = "0xB7FF8C", VA = "0xB7FF8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0xB80AE8", Offset = "0xB80AE8", VA = "0xB80AE8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000FA")]
		public event MoveTransformGrabAttachEventHandler ZAxisMaxLimitReached
		{
			[Token(Token = "0x6001A83")]
			[Address(RVA = "0xB7FC78", Offset = "0xB7FC78", VA = "0xB7FC78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A84")]
			[Address(RVA = "0xB807D4", Offset = "0xB807D4", VA = "0xB807D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000FB")]
		public event MoveTransformGrabAttachEventHandler ZAxisMaxLimitExited
		{
			[Token(Token = "0x6001A85")]
			[Address(RVA = "0xB8002C", Offset = "0xB8002C", VA = "0xB8002C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0xB80B88", Offset = "0xB80B88", VA = "0xB80B88")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0xB8AB54", Offset = "0xB8AB54", VA = "0xB8AB54", Slot = "24")]
		public virtual void OnTransformPositionChanged(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xB8ABB0", Offset = "0xB8ABB0", VA = "0xB8ABB0", Slot = "25")]
		public virtual void OnXAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xB8AC0C", Offset = "0xB8AC0C", VA = "0xB8AC0C", Slot = "26")]
		public virtual void OnXAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xB8AC68", Offset = "0xB8AC68", VA = "0xB8AC68", Slot = "27")]
		public virtual void OnXAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xB8ACC4", Offset = "0xB8ACC4", VA = "0xB8ACC4", Slot = "28")]
		public virtual void OnXAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xB8AD20", Offset = "0xB8AD20", VA = "0xB8AD20", Slot = "29")]
		public virtual void OnYAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xB8AD7C", Offset = "0xB8AD7C", VA = "0xB8AD7C", Slot = "30")]
		public virtual void OnYAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xB8ADD8", Offset = "0xB8ADD8", VA = "0xB8ADD8", Slot = "31")]
		public virtual void OnYAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xB8AE34", Offset = "0xB8AE34", VA = "0xB8AE34", Slot = "32")]
		public virtual void OnYAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0xB8AE90", Offset = "0xB8AE90", VA = "0xB8AE90", Slot = "33")]
		public virtual void OnZAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xB8AEEC", Offset = "0xB8AEEC", VA = "0xB8AEEC", Slot = "34")]
		public virtual void OnZAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0xB8AF48", Offset = "0xB8AF48", VA = "0xB8AF48", Slot = "35")]
		public virtual void OnZAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xB8AFA4", Offset = "0xB8AFA4", VA = "0xB8AFA4", Slot = "36")]
		public virtual void OnZAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xB8B000", Offset = "0xB8B000", VA = "0xB8B000", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xB8B140", Offset = "0xB8B140", VA = "0xB8B140", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xB8B250", Offset = "0xB8B250", VA = "0xB8B250", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xB8B334", Offset = "0xB8B334", VA = "0xB8B334", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xB8B6A4", Offset = "0xB8B6A4", VA = "0xB8B6A4", Slot = "37")]
		public virtual Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xB8B6FC", Offset = "0xB8B6FC", VA = "0xB8B6FC", Slot = "38")]
		public virtual Vector3 GetNormalizedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xB8B72C", Offset = "0xB8B72C", VA = "0xB8B72C", Slot = "39")]
		public virtual Vector3 GetCurrentDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xB8B788", Offset = "0xB8B788", VA = "0xB8B788", Slot = "40")]
		public virtual Vector3 GetDirectionFromOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xB8B7E0", Offset = "0xB8B7E0", VA = "0xB8B7E0", Slot = "41")]
		public virtual void SetCurrentPosition(Vector3 newPosition, float speed)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xB8B89C", Offset = "0xB8B89C", VA = "0xB8B89C", Slot = "42")]
		public virtual void ResetPosition()
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xB8B8B8", Offset = "0xB8B8B8", VA = "0xB8B8B8", Slot = "43")]
		public virtual Limits2D[] GetWorldLimits()
		{
			return null;
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xB8B9C8", Offset = "0xB8B9C8", VA = "0xB8B9C8", Slot = "44")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xB8B9D8", Offset = "0xB8B9D8", VA = "0xB8B9D8", Slot = "45")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xB8BA08", Offset = "0xB8BA08", VA = "0xB8BA08", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xB8BA24", Offset = "0xB8BA24", VA = "0xB8BA24", Slot = "46")]
		protected virtual void SetupOrigin()
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xB8BB88", Offset = "0xB8BB88", VA = "0xB8BB88", Slot = "47")]
		protected virtual float ClampAxis(Limits2D limits, float axisValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xB8BBCC", Offset = "0xB8BBCC", VA = "0xB8BBCC", Slot = "48")]
		protected virtual void ClampPosition()
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0xB8BCC0", Offset = "0xB8BCC0", VA = "0xB8BCC0", Slot = "49")]
		protected virtual Vector3 NormalizePosition(Vector3 givenHeading)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0xB8BD50", Offset = "0xB8BD50", VA = "0xB8BD50", Slot = "50")]
		protected virtual void CancelResetPosition()
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xB8BD64", Offset = "0xB8BD64", VA = "0xB8BD64", Slot = "51")]
		protected virtual void CancelDeceleratePosition()
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xB8BD78", Offset = "0xB8BD78", VA = "0xB8BD78", Slot = "52")]
		protected virtual void UpdatePosition(Vector3 newPosition, bool additive, bool forceClamp = true)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xB8BE38", Offset = "0xB8BE38", VA = "0xB8BE38", Slot = "53")]
		[IteratorStateMachine(typeof(<MoveToPosition>d__93))]
		protected virtual IEnumerator MoveToPosition(Vector3 targetPosition, float speed)
		{
			return null;
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xB8BEFC", Offset = "0xB8BEFC", VA = "0xB8BEFC", Slot = "54")]
		[IteratorStateMachine(typeof(<DeceleratePosition>d__94))]
		protected virtual IEnumerator DeceleratePosition()
		{
			return null;
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xB8BF98", Offset = "0xB8BF98", VA = "0xB8BF98", Slot = "55")]
		protected virtual void CheckAxisLimits()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xB8C02C", Offset = "0xB8C02C", VA = "0xB8C02C", Slot = "56")]
		protected virtual Limits2D FixAxisLimits(Limits2D givenLimits)
		{
			return null;
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xB8C068", Offset = "0xB8C068", VA = "0xB8C068", Slot = "57")]
		protected virtual void EmitEvents()
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xB8C6EC", Offset = "0xB8C6EC", VA = "0xB8C6EC", Slot = "58")]
		protected virtual MoveTransformGrabAttachEventArgs SetEventPayload()
		{
			return default(MoveTransformGrabAttachEventArgs);
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xB8C830", Offset = "0xB8C830", VA = "0xB8C830")]
		public VRTK_MoveTransformGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public struct RotateTransformGrabAttachEventArgs
	{
		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float currentAngle;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float normalizedAngle;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 rotationSpeed;
	}
	[Token(Token = "0x20003CF")]
	public delegate void RotateTransformGrabAttachEventHandler(object sender, RotateTransformGrabAttachEventArgs e);
	[Token(Token = "0x20003D0")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_RotateTransformGrabAttach")]
	public class VRTK_RotateTransformGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x20003D1")]
		public enum RotationAxis
		{
			[Token(Token = "0x400163F")]
			xAxis,
			[Token(Token = "0x4001640")]
			yAxis,
			[Token(Token = "0x4001641")]
			zAxis
		}

		[Token(Token = "0x20003D2")]
		public enum RotationType
		{
			[Token(Token = "0x4001643")]
			FollowAttachPoint,
			[Token(Token = "0x4001644")]
			FollowLongitudinalAxis,
			[Token(Token = "0x4001645")]
			FollowLateralAxis,
			[Token(Token = "0x4001646")]
			FollowPerpendicularAxis
		}

		[Token(Token = "0x20003D3")]
		[CompilerGenerated]
		private sealed class <RotateToAngle>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001647")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001648")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001649")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_RotateTransformGrabAttach <>4__this;

			[Token(Token = "0x400164A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetAngle;

			[Token(Token = "0x400164B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float rotationSpeed;

			[Token(Token = "0x400164C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <previousRotation>5__2;

			[Token(Token = "0x170001BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AED")]
				[Address(RVA = "0xB8E738", Offset = "0xB8E738", VA = "0xB8E738", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AEF")]
				[Address(RVA = "0xB8E780", Offset = "0xB8E780", VA = "0xB8E780", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xB8E024", Offset = "0xB8E024", VA = "0xB8E024")]
			[DebuggerHidden]
			public <RotateToAngle>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0xB8E544", Offset = "0xB8E544", VA = "0xB8E544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AEC")]
			[Address(RVA = "0xB8E548", Offset = "0xB8E548", VA = "0xB8E548", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AEE")]
			[Address(RVA = "0xB8E740", Offset = "0xB8E740", VA = "0xB8E740", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D4")]
		[CompilerGenerated]
		private sealed class <DecelerateRotation>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400164D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400164E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400164F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_RotateTransformGrabAttach <>4__this;

			[Token(Token = "0x170001BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AF3")]
				[Address(RVA = "0xB8E8E0", Offset = "0xB8E8E0", VA = "0xB8E8E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AF5")]
				[Address(RVA = "0xB8E928", Offset = "0xB8E928", VA = "0xB8E928", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AF0")]
			[Address(RVA = "0xB8E0C0", Offset = "0xB8E0C0", VA = "0xB8E0C0")]
			[DebuggerHidden]
			public <DecelerateRotation>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0xB8E788", Offset = "0xB8E788", VA = "0xB8E788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AF2")]
			[Address(RVA = "0xB8E78C", Offset = "0xB8E78C", VA = "0xB8E78C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AF4")]
			[Address(RVA = "0xB8E8E8", Offset = "0xB8E8E8", VA = "0xB8E8E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Detach Settings")]
		[Tooltip("The maximum distance the grabbing object is away from the Interactable Object before it is automatically dropped.")]
		public float detachDistance;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The distance between grabbing object and the centre of Interactable Object that is considered to be non grabbable. If the grabbing object is within the `Origin Deadzone` distance then it will be automatically ungrabbed.")]
		public float originDeadzone;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Header("Rotation Settings")]
		[Tooltip("The local axis in which to rotate the object around.")]
		public RotationAxis rotateAround;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Determines how the rotation of the object is calculated based on the action of the grabbing object.")]
		public RotationType rotationAction;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("The amount of friction to apply when rotating, simulates a tougher rotation.")]
		[Range(1f, 32f)]
		public float rotationFriction;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The damper in which to slow the Interactable Object's rotation down when released to simulate continued momentum. The higher the number, the faster the Interactable Object will come to a complete stop on release.")]
		public float releaseDecelerationDamper;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The speed in which the Interactable Object returns to it's origin rotation when released. If the `Reset To Orign On Release Speed` is `0f` then the rotation will not be reset.")]
		public float resetToOrignOnReleaseSpeed;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The negative and positive limits the axis can be rotated to.")]
		[Header("Rotation Limits")]
		public Limits2D angleLimits;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The threshold the rotation value needs to be within to register a min or max rotation value.")]
		public float minMaxThreshold;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 0.99f)]
		[Tooltip("The threshold the normalized rotation value needs to be within to register a min or max normalized rotation value.")]
		public float minMaxNormalizedThreshold;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public Quaternion originRotation;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Vector3 previousAttachPointPosition;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected Vector3 currentRotation;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Bounds grabbedObjectBounds;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected Vector3 currentRotationSpeed;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Coroutine updateRotationRoutine;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Coroutine decelerateRotationRoutine;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool[] limitsReached;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected VRTK_ControllerReference grabbingObjectReference;

		[Token(Token = "0x140000FC")]
		public event RotateTransformGrabAttachEventHandler AngleChanged
		{
			[Token(Token = "0x6001AC0")]
			[Address(RVA = "0xB837E0", Offset = "0xB837E0", VA = "0xB837E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0xB83C68", Offset = "0xB83C68", VA = "0xB83C68")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000FD")]
		public event RotateTransformGrabAttachEventHandler MinAngleReached
		{
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0xB8387C", Offset = "0xB8387C", VA = "0xB8387C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0xB83D04", Offset = "0xB83D04", VA = "0xB83D04")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000FE")]
		public event RotateTransformGrabAttachEventHandler MinAngleExited
		{
			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0xB83918", Offset = "0xB83918", VA = "0xB83918")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001AC5")]
			[Address(RVA = "0xB83DA0", Offset = "0xB83DA0", VA = "0xB83DA0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x140000FF")]
		public event RotateTransformGrabAttachEventHandler MaxAngleReached
		{
			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0xB839B4", Offset = "0xB839B4", VA = "0xB839B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001AC7")]
			[Address(RVA = "0xB83E3C", Offset = "0xB83E3C", VA = "0xB83E3C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000100")]
		public event RotateTransformGrabAttachEventHandler MaxAngleExited
		{
			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0xB83A50", Offset = "0xB83A50", VA = "0xB83A50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001AC9")]
			[Address(RVA = "0xB83ED8", Offset = "0xB83ED8", VA = "0xB83ED8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xB8CD78", Offset = "0xB8CD78", VA = "0xB8CD78", Slot = "24")]
		public virtual void OnAngleChanged(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xB8CDBC", Offset = "0xB8CDBC", VA = "0xB8CDBC", Slot = "25")]
		public virtual void OnMinAngleReached(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xB8CE00", Offset = "0xB8CE00", VA = "0xB8CE00", Slot = "26")]
		public virtual void OnMinAngleExited(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xB8CE44", Offset = "0xB8CE44", VA = "0xB8CE44", Slot = "27")]
		public virtual void OnMaxAngleReached(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xB8CE88", Offset = "0xB8CE88", VA = "0xB8CE88", Slot = "28")]
		public virtual void OnMaxAngleExited(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xB8CECC", Offset = "0xB8CECC", VA = "0xB8CECC", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xB8D050", Offset = "0xB8D050", VA = "0xB8D050", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xB8D0E8", Offset = "0xB8D0E8", VA = "0xB8D0E8", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xB8D308", Offset = "0xB8D308", VA = "0xB8D308", Slot = "29")]
		public virtual void SetRotation(float newAngle, float transitionTime = 0f)
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xB8D424", Offset = "0xB8D424", VA = "0xB8D424", Slot = "30")]
		public virtual void ResetRotation(bool ignoreTransition = false)
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xB8D58C", Offset = "0xB8D58C", VA = "0xB8D58C", Slot = "31")]
		public virtual float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xB8D5CC", Offset = "0xB8D5CC", VA = "0xB8D5CC", Slot = "32")]
		public virtual float GetNormalizedAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xB8D640", Offset = "0xB8D640", VA = "0xB8D640", Slot = "33")]
		public virtual Vector3 GetRotationSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xB8D650", Offset = "0xB8D650", VA = "0xB8D650", Slot = "34")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xB8D680", Offset = "0xB8D680", VA = "0xB8D680", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xB8D708", Offset = "0xB8D708", VA = "0xB8D708", Slot = "35")]
		protected virtual Vector3 GetNewRotation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xB8D934", Offset = "0xB8D934", VA = "0xB8D934", Slot = "36")]
		protected virtual Vector3 BuildFollowAxisVector(float givenAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xB8D95C", Offset = "0xB8D95C", VA = "0xB8D95C", Slot = "37")]
		protected virtual Vector3 CalculateAngle(Vector3 originPoint, Vector3 originalGrabPoint, Vector3 currentGrabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xB8DB28", Offset = "0xB8DB28", VA = "0xB8DB28", Slot = "38")]
		protected virtual float CalculateAngle(Vector3 originPoint, Vector3 previousPoint, Vector3 currentPoint, Vector3 direction)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xB8DBB0", Offset = "0xB8DBB0", VA = "0xB8DBB0", Slot = "39")]
		protected virtual void UpdateRotation(Vector3 newRotation, bool additive, bool updateCurrentRotation)
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xB8DD78", Offset = "0xB8DD78", VA = "0xB8DD78", Slot = "40")]
		protected virtual bool WithinRotationLimit(Vector3 rotationCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xB8DDD8", Offset = "0xB8DDD8", VA = "0xB8DDD8", Slot = "41")]
		protected virtual float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xB8DE48", Offset = "0xB8DE48", VA = "0xB8DE48", Slot = "42")]
		protected virtual bool StillTouching()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xB8DF60", Offset = "0xB8DF60", VA = "0xB8DF60", Slot = "43")]
		protected virtual void CancelUpdateRotation()
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xB8DF74", Offset = "0xB8DF74", VA = "0xB8DF74", Slot = "44")]
		protected virtual void CancelDecelerateRotation()
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xB8DF88", Offset = "0xB8DF88", VA = "0xB8DF88", Slot = "45")]
		[IteratorStateMachine(typeof(<RotateToAngle>d__61))]
		protected virtual IEnumerator RotateToAngle(Vector3 targetAngle, float rotationSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xB8E04C", Offset = "0xB8E04C", VA = "0xB8E04C", Slot = "46")]
		[IteratorStateMachine(typeof(<DecelerateRotation>d__62))]
		protected virtual IEnumerator DecelerateRotation()
		{
			return null;
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xB8E0E8", Offset = "0xB8E0E8", VA = "0xB8E0E8", Slot = "47")]
		protected virtual float GetLimitedAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xB8E108", Offset = "0xB8E108", VA = "0xB8E108", Slot = "48")]
		protected virtual void CheckAngleLimits()
		{
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xB8E144", Offset = "0xB8E144", VA = "0xB8E144", Slot = "49")]
		protected virtual void EmitEvents()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xB8E36C", Offset = "0xB8E36C", VA = "0xB8E36C", Slot = "50")]
		protected virtual RotateTransformGrabAttachEventArgs SetEventPayload()
		{
			return default(RotateTransformGrabAttachEventArgs);
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xB8E468", Offset = "0xB8E468", VA = "0xB8E468")]
		public VRTK_RotateTransformGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_RotatorTrackGrabAttach")]
	public class VRTK_RotatorTrackGrabAttach : VRTK_TrackObjectGrabAttach
	{
		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xB8E930", Offset = "0xB8E930", VA = "0xB8E930", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xB8E974", Offset = "0xB8E974", VA = "0xB8E974", Slot = "14")]
		public override void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0xB8EA14", Offset = "0xB8EA14", VA = "0xB8EA14", Slot = "24")]
		protected override Transform SetTrackPointOrientation(Transform givenTrackPoint, Transform currentGrabbedObject, Transform controllerPoint)
		{
			return null;
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0xB8EA70", Offset = "0xB8EA70", VA = "0xB8EA70")]
		public VRTK_RotatorTrackGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_SpringJointGrabAttach")]
	public class VRTK_SpringJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Maximum force the Joint can withstand before breaking. Setting to `infinity` ensures the Joint is unbreakable.")]
		public float breakForce;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The strength of the spring.")]
		public float strength;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The amount of dampening to apply to the spring.")]
		public float damper;

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xB8EAB8", Offset = "0xB8EAB8", VA = "0xB8EAB8", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0xB8EB90", Offset = "0xB8EB90", VA = "0xB8EB90")]
		public VRTK_SpringJointGrabAttach()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Interactables/Grab Attach Mechanics/VRTK_TrackObjectGrabAttach")]
	public class VRTK_TrackObjectGrabAttach : VRTK_BaseGrabAttach
	{
		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("The maximum distance the grabbing object is away from the Interactable Object before it is automatically dropped.")]
		[Header("Track Settings", order = 2)]
		public float detachDistance;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The maximum amount of velocity magnitude that can be applied to the Interactable Object. Lowering this can prevent physics glitches if Interactable Objects are moving too fast.")]
		public float velocityLimit;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("The maximum amount of angular velocity magnitude that can be applied to the Interactable Object. Lowering this can prevent physics glitches if Interactable Objects are moving too fast.")]
		public float angularVelocityLimit;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The maximum difference in distance to the tracked position.")]
		public float maxDistanceDelta;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool isReleasable;

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0xB8E93C", Offset = "0xB8E93C", VA = "0xB8E93C", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0xB8EBBC", Offset = "0xB8EBBC", VA = "0xB8EBBC", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0xB8EE64", Offset = "0xB8EE64", VA = "0xB8EE64", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0xB8EFCC", Offset = "0xB8EFCC", VA = "0xB8EFCC", Slot = "14")]
		public override void ProcessFixedUpdate()
		{
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0xB8F49C", Offset = "0xB8F49C", VA = "0xB8F49C", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0xB8F4AC", Offset = "0xB8F4AC", VA = "0xB8F4AC", Slot = "24")]
		protected virtual Transform SetTrackPointOrientation(Transform givenTrackPoint, Transform currentGrabbedObject, Transform controllerPoint)
		{
			return null;
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0xB8EA94", Offset = "0xB8EA94", VA = "0xB8EA94")]
		public VRTK_TrackObjectGrabAttach()
		{
		}
	}
}
namespace VRTK.Controllables
{
	[Token(Token = "0x20003D8")]
	public struct ControllableEventArgs
	{
		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider interactingCollider;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public VRTK_InteractTouch interactingTouchScript;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float value;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float normalizedValue;
	}
	[Token(Token = "0x20003D9")]
	public delegate void ControllableEventHandler(object sender, ControllableEventArgs e);
	[Token(Token = "0x20003DA")]
	public abstract class VRTK_BaseControllable : MonoBehaviour
	{
		[Token(Token = "0x20003DB")]
		public enum OperatingAxis
		{
			[Token(Token = "0x4001672")]
			xAxis,
			[Token(Token = "0x4001673")]
			yAxis,
			[Token(Token = "0x4001674")]
			zAxis
		}

		[Token(Token = "0x20003DC")]
		[CompilerGenerated]
		private sealed class <ProcessAtEndOfFrame>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BaseControllable <>4__this;

			[Token(Token = "0x170001C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B39")]
				[Address(RVA = "0xB90A40", Offset = "0xB90A40", VA = "0xB90A40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3B")]
				[Address(RVA = "0xB90A88", Offset = "0xB90A88", VA = "0xB90A88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B36")]
			[Address(RVA = "0xB905AC", Offset = "0xB905AC", VA = "0xB905AC")]
			[DebuggerHidden]
			public <ProcessAtEndOfFrame>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0xB9095C", Offset = "0xB9095C", VA = "0xB9095C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xB90960", Offset = "0xB90960", VA = "0xB90960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0xB90A48", Offset = "0xB90A48", VA = "0xB90A48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The local axis in which the Controllable will operate through.")]
		[Header("Controllable Settings")]
		public OperatingAxis operateAxis;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A collection of GameObjects to ignore collision events with.")]
		public GameObject[] ignoreCollisionsWith;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A collection of GameObjects to exclude when determining if a default collider should be created.")]
		public GameObject[] excludeColliderCheckOn;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amount of fidelity when comparing the position of the control with the previous position. Determines if it's equal above a certain decimal place threshold.")]
		public float equalityFidelity;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 originalLocalPosition;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Quaternion originalLocalRotation;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 actualTransformPosition;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool atMinLimit;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		protected bool atMaxLimit;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Collider interactingCollider;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_InteractTouch interactingTouchScript;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Collider[] controlColliders;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool createCustomCollider;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Coroutine processAtEndOfFrame;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float storedValue;

		[Token(Token = "0x14000101")]
		public event ControllableEventHandler ValueChanged
		{
			[Token(Token = "0x6001B07")]
			[Address(RVA = "0xB8F724", Offset = "0xB8F724", VA = "0xB8F724")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B08")]
			[Address(RVA = "0xB8F7C0", Offset = "0xB8F7C0", VA = "0xB8F7C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000102")]
		public event ControllableEventHandler RestingPointReached
		{
			[Token(Token = "0x6001B09")]
			[Address(RVA = "0xB8F85C", Offset = "0xB8F85C", VA = "0xB8F85C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0xB8F8F8", Offset = "0xB8F8F8", VA = "0xB8F8F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000103")]
		public event ControllableEventHandler MinLimitReached
		{
			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0xB8F994", Offset = "0xB8F994", VA = "0xB8F994")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B0C")]
			[Address(RVA = "0xB8FA30", Offset = "0xB8FA30", VA = "0xB8FA30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000104")]
		public event ControllableEventHandler MinLimitExited
		{
			[Token(Token = "0x6001B0D")]
			[Address(RVA = "0xB8FACC", Offset = "0xB8FACC", VA = "0xB8FACC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B0E")]
			[Address(RVA = "0xB8FB68", Offset = "0xB8FB68", VA = "0xB8FB68")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000105")]
		public event ControllableEventHandler MaxLimitReached
		{
			[Token(Token = "0x6001B0F")]
			[Address(RVA = "0xB8FC04", Offset = "0xB8FC04", VA = "0xB8FC04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B10")]
			[Address(RVA = "0xB8FCA0", Offset = "0xB8FCA0", VA = "0xB8FCA0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000106")]
		public event ControllableEventHandler MaxLimitExited
		{
			[Token(Token = "0x6001B11")]
			[Address(RVA = "0xB8FD3C", Offset = "0xB8FD3C", VA = "0xB8FD3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B12")]
			[Address(RVA = "0xB8FDD8", Offset = "0xB8FDD8", VA = "0xB8FDD8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0xB8FE74", Offset = "0xB8FE74", VA = "0xB8FE74", Slot = "4")]
		public virtual void OnValueChanged(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0xB8FEC4", Offset = "0xB8FEC4", VA = "0xB8FEC4", Slot = "5")]
		public virtual void OnRestingPointReached(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0xB8FF14", Offset = "0xB8FF14", VA = "0xB8FF14", Slot = "6")]
		public virtual void OnMinLimitReached(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0xB8FF64", Offset = "0xB8FF64", VA = "0xB8FF64", Slot = "7")]
		public virtual void OnMinLimitExited(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0xB8FFB4", Offset = "0xB8FFB4", VA = "0xB8FFB4", Slot = "8")]
		public virtual void OnMaxLimitReached(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0xB90004", Offset = "0xB90004", VA = "0xB90004", Slot = "9")]
		public virtual void OnMaxLimitExited(ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001B19")]
		public abstract float GetValue();

		[Token(Token = "0x6001B1A")]
		public abstract float GetNormalizedValue();

		[Token(Token = "0x6001B1B")]
		public abstract void SetValue(float value);

		[Token(Token = "0x6001B1C")]
		public abstract bool IsResting();

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0xB90054", Offset = "0xB90054", VA = "0xB90054", Slot = "14")]
		public virtual bool AtMinLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xB9005C", Offset = "0xB9005C", VA = "0xB9005C", Slot = "15")]
		public virtual bool AtMaxLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0xB90064", Offset = "0xB90064", VA = "0xB90064", Slot = "16")]
		public virtual Vector3 GetOriginalLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0xB90070", Offset = "0xB90070", VA = "0xB90070", Slot = "17")]
		public virtual Quaternion GetOriginalLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xB9007C", Offset = "0xB9007C", VA = "0xB9007C", Slot = "18")]
		public virtual Collider[] GetControlColliders()
		{
			return null;
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xB90084", Offset = "0xB90084", VA = "0xB90084", Slot = "19")]
		public virtual Collider GetInteractingCollider()
		{
			return null;
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xB9008C", Offset = "0xB9008C", VA = "0xB9008C", Slot = "20")]
		public virtual VRTK_InteractTouch GetInteractingTouch()
		{
			return null;
		}

		[Token(Token = "0x6001B24")]
		protected abstract void EmitEvents();

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xB90094", Offset = "0xB90094", VA = "0xB90094", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xB900F8", Offset = "0xB900F8", VA = "0xB900F8", Slot = "23")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xB9014C", Offset = "0xB9014C", VA = "0xB9014C", Slot = "24")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0xB90234", Offset = "0xB90234", VA = "0xB90234", Slot = "25")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0xB90288", Offset = "0xB90288", VA = "0xB90288", Slot = "26")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0xB902C0", Offset = "0xB902C0", VA = "0xB902C0", Slot = "27")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0xB902F8", Offset = "0xB902F8", VA = "0xB902F8", Slot = "28")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xB90308", Offset = "0xB90308", VA = "0xB90308", Slot = "29")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xB90318", Offset = "0xB90318", VA = "0xB90318", Slot = "30")]
		protected virtual void OnTouched(Collider collider)
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xB90390", Offset = "0xB90390", VA = "0xB90390", Slot = "31")]
		protected virtual void OnUntouched(Collider collider)
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xB903B8", Offset = "0xB903B8", VA = "0xB903B8", Slot = "32")]
		protected virtual void SetupCollider()
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xB90534", Offset = "0xB90534", VA = "0xB90534", Slot = "33")]
		protected virtual void ConfigureColliders()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0xB90538", Offset = "0xB90538", VA = "0xB90538", Slot = "34")]
		[IteratorStateMachine(typeof(<ProcessAtEndOfFrame>d__64))]
		protected virtual IEnumerator ProcessAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0xB905D4", Offset = "0xB905D4", VA = "0xB905D4", Slot = "35")]
		protected virtual void ManageCollisions(bool ignore)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0xB907D8", Offset = "0xB907D8", VA = "0xB907D8", Slot = "36")]
		protected virtual Vector3 AxisDirection(bool local = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0xB90808", Offset = "0xB90808", VA = "0xB90808", Slot = "37")]
		protected virtual ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0xB90890", Offset = "0xB90890", VA = "0xB90890")]
		protected VRTK_BaseControllable()
		{
		}
	}
}
namespace VRTK.Controllables.PhysicsBased
{
	[Token(Token = "0x20003DD")]
	public abstract class VRTK_BasePhysicsControllable : VRTK_BaseControllable
	{
		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Physics Settings")]
		[Tooltip("The Rigidbody that the Controllable is connected to.")]
		public Rigidbody connectedTo;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Rigidbody controlRigidbody;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool createCustomRigidbody;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject rigidbodyActivatorContainer;

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0xB90A90", Offset = "0xB90A90", VA = "0xB90A90", Slot = "38")]
		public virtual Rigidbody GetControlRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xB90A98", Offset = "0xB90A98", VA = "0xB90A98", Slot = "39")]
		public virtual GameObject GetControlActivatorContainer()
		{
			return null;
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xB90AA0", Offset = "0xB90AA0", VA = "0xB90AA0", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xB90AD8", Offset = "0xB90AD8", VA = "0xB90AD8", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xB90B44", Offset = "0xB90B44", VA = "0xB90B44", Slot = "40")]
		protected virtual void SetupRigidbodyActivator()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xB90C00", Offset = "0xB90C00", VA = "0xB90C00", Slot = "41")]
		protected virtual void SetupRigidbody()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xB90D18", Offset = "0xB90D18", VA = "0xB90D18", Slot = "42")]
		protected virtual void ConfigueRigidbody()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xB90D1C", Offset = "0xB90D1C", VA = "0xB90D1C", Slot = "43")]
		protected virtual void SetRigidbodyVelocity(Vector3 newVelocity)
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xB90DD0", Offset = "0xB90DD0", VA = "0xB90DD0", Slot = "44")]
		protected virtual void SetRigidbodyDrag(float givenDrag)
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xB90E68", Offset = "0xB90E68", VA = "0xB90E68", Slot = "45")]
		protected virtual void SetRigidbodyAngularDrag(float givenDrag)
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xB90F00", Offset = "0xB90F00", VA = "0xB90F00", Slot = "46")]
		protected virtual void SetRigidbodyGravity(bool useGravity)
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xB90F98", Offset = "0xB90F98", VA = "0xB90F98", Slot = "47")]
		protected virtual void SetRigidbodyKinematic(bool isKinematic)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0xB91030", Offset = "0xB91030", VA = "0xB91030", Slot = "48")]
		protected virtual void SetRigidbodyConstraints(RigidbodyConstraints newConstraints)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0xB910C8", Offset = "0xB910C8", VA = "0xB910C8", Slot = "49")]
		protected virtual void SetRigidbodyCollisionDetectionMode(CollisionDetectionMode newDetectionMode)
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0xB91160", Offset = "0xB91160", VA = "0xB91160")]
		protected VRTK_BasePhysicsControllable()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Physics/VRTK_PhysicsPusher")]
	public class VRTK_PhysicsPusher : VRTK_BasePhysicsControllable
	{
		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The local space distance along the `Operate Axis` until the pusher reaches the pressed position.")]
		[Header("Pusher Settings")]
		public float pressedDistance;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("If this is checked then the pusher will stay in the pressed position when it reaches the maximum position.")]
		public bool stayPressed;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Range(0f, 1f)]
		[Tooltip("The threshold in which the pusher's current normalized position along the `Operate Axis` has to be within the minimum and maximum limits of the pusher.")]
		public float minMaxLimitThreshold;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("The normalized position of the pusher between the original position and the pressed position that will be considered as the resting position for the pusher.")]
		[Range(0f, 1f)]
		public float restingPosition;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 1f)]
		[Tooltip("The normalized value that the pusher can be from the `Resting Position` before the pusher is considered to be resting when not being interacted with.")]
		public float restingPositionThreshold;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("The normalized position of the pusher between the original position and the pressed position. `0f` will set the pusher position to the original position, `1f` will set the pusher position to the pressed position.")]
		[Range(0f, 1f)]
		public float positionTarget;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The amount of force to apply to push the pusher towards the intended target position.")]
		public float targetForce;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected ConfigurableJoint controlJoint;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected bool createControlJoint;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected Vector3 previousLocalPosition;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool pressedDown;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float previousPositionTarget;

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0xB91164", Offset = "0xB91164", VA = "0xB91164", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0xB911FC", Offset = "0xB911FC", VA = "0xB911FC", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0xB912F4", Offset = "0xB912F4", VA = "0xB912F4", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0xB912F8", Offset = "0xB912F8", VA = "0xB912F8", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0xB913A0", Offset = "0xB913A0", VA = "0xB913A0", Slot = "50")]
		public virtual ConfigurableJoint GetControlJoint()
		{
			return null;
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xB913A8", Offset = "0xB913A8", VA = "0xB913A8", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xB91550", Offset = "0xB91550", VA = "0xB91550", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xB91604", Offset = "0xB91604", VA = "0xB91604", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0xB91690", Offset = "0xB91690", VA = "0xB91690", Slot = "51")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0xB91704", Offset = "0xB91704", VA = "0xB91704", Slot = "52")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0xB9178C", Offset = "0xB9178C", VA = "0xB9178C", Slot = "42")]
		protected override void ConfigueRigidbody()
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xB917DC", Offset = "0xB917DC", VA = "0xB917DC", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xB91CF0", Offset = "0xB91CF0", VA = "0xB91CF0", Slot = "53")]
		protected virtual void ForceLocalPosition()
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xB91DC0", Offset = "0xB91DC0", VA = "0xB91DC0", Slot = "54")]
		protected virtual void CheckUnpress()
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xB91E04", Offset = "0xB91E04", VA = "0xB91E04", Slot = "55")]
		protected virtual void SetTargetPosition()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xB91F6C", Offset = "0xB91F6C", VA = "0xB91F6C", Slot = "56")]
		protected virtual Vector3 PressedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xB91FC4", Offset = "0xB91FC4", VA = "0xB91FC4", Slot = "57")]
		protected virtual void SetupJoint()
		{
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xB922A0", Offset = "0xB922A0", VA = "0xB922A0", Slot = "58")]
		protected virtual void StayPressed()
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0xB922D4", Offset = "0xB922D4", VA = "0xB922D4")]
		public VRTK_PhysicsPusher()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Physics/VRTK_PhysicsRotator")]
	public class VRTK_PhysicsRotator : VRTK_BasePhysicsControllable
	{
		[Token(Token = "0x20003E0")]
		public enum GrabMechanic
		{
			[Token(Token = "0x40016A9")]
			TrackObject,
			[Token(Token = "0x40016AA")]
			RotatorTrack
		}

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Hinge Settings")]
		[Tooltip("A Transform that denotes the position where the rotator hinge will be created.")]
		public Transform hingePoint;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The minimum and maximum angle the rotator can rotate to.")]
		[MinMaxRange(-180f, 180f)]
		public Limits2D angleLimits;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The angle at which the rotator rotation can be within the minimum or maximum angle before the minimum or maximum angles are considered reached.")]
		public float minMaxThresholdAngle;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("The angle at which will be considered as the resting position of the rotator.")]
		public float restingAngle;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The threshold angle from the `Resting Angle` that the current angle of the rotator needs to be within to snap the rotator back to the `Resting Angle`.")]
		public float forceRestingAngleThreshold;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("The target angle to rotate the rotator to.")]
		public float angleTarget;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("If this is checked then the rotator Rigidbody will have all rotations frozen.")]
		public bool isLocked;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("The minimum and the maximum step values for the rotator to register along the `Operate Axis`.")]
		[Header("Value Step Settings")]
		public Limits2D stepValueRange;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("The increments the rotator value will change in between the `Step Value Range`.")]
		public float stepSize;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Tooltip("If this is checked then the value for the rotator will be the step value and not the absolute rotation of the rotator Transform.")]
		public bool useStepAsValue;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11D")]
		[Header("Snap Settings")]
		[Tooltip("If this is checked then the rotator will snap to the angle of the nearest step along the value range.")]
		public bool snapToStep;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("The speed in which the rotator will snap to the relevant angle along the `Operate Axis`")]
		public float snapForce;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Tooltip("The type of Interactable Object grab mechanic to use when operating the rotator.")]
		[Header("Interaction Settings")]
		public GrabMechanic grabMechanic;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("If this is checked then when the Interact Grab grabs the Interactable Object, it will grab it with precision and pick it up at the particular point on the Interactable Object that the Interact Touch is touching.")]
		public bool precisionGrab;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Tooltip("The maximum distance the grabbing object is away from the rotator before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("If this is checked then the `Grabbed Friction` value will be used as the Rigidbody drag value when the rotator is grabbed and the `Released Friction` value will be used as the Rigidbody drag value when the door is released.")]
		public bool useFrictionOverrides;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[Tooltip("The Rigidbody drag value when the rotator is grabbed.")]
		public float grabbedFriction;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("The Rigidbody drag value when the rotator is released.")]
		public float releasedFriction;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("A collection of GameObjects that will be used as the valid collisions to determine if the rotator can be interacted with.")]
		public GameObject[] onlyInteractWith;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected VRTK_TrackObjectGrabAttach controlGrabAttach;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool createControlInteractableObject;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected HingeJoint controlJoint;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected JointSpring controlJointSpring;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected JointLimits controlJointLimits;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected bool createControlJoint;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected RigidbodyConstraints savedConstraints;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected bool stillLocked;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		protected bool stillResting;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float previousValue;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected float previousAngleTarget;

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0xB922FC", Offset = "0xB922FC", VA = "0xB922FC", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0xB92440", Offset = "0xB92440", VA = "0xB92440", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0xB92474", Offset = "0xB92474", VA = "0xB92474", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xB92484", Offset = "0xB92484", VA = "0xB92484", Slot = "50")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xB92580", Offset = "0xB92580", VA = "0xB92580", Slot = "51")]
		public virtual void SetAngleTargetWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xB925CC", Offset = "0xB925CC", VA = "0xB925CC", Slot = "52")]
		public virtual void SetRestingAngleWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xB925FC", Offset = "0xB925FC", VA = "0xB925FC", Slot = "53")]
		public virtual float GetAngleFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0xB92738", Offset = "0xB92738", VA = "0xB92738", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0xB9279C", Offset = "0xB9279C", VA = "0xB9279C", Slot = "54")]
		public virtual HingeJoint GetControlJoint()
		{
			return null;
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xB927A4", Offset = "0xB927A4", VA = "0xB927A4", Slot = "55")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0xB927AC", Offset = "0xB927AC", VA = "0xB927AC", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0xB92A54", Offset = "0xB92A54", VA = "0xB92A54", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xB92B20", Offset = "0xB92B20", VA = "0xB92B20", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xB92C04", Offset = "0xB92C04", VA = "0xB92C04", Slot = "56")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xB92C70", Offset = "0xB92C70", VA = "0xB92C70", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xB92F1C", Offset = "0xB92F1C", VA = "0xB92F1C", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xB92F90", Offset = "0xB92F90", VA = "0xB92F90", Slot = "57")]
		protected virtual void SetupJoint()
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0xB931CC", Offset = "0xB931CC", VA = "0xB931CC", Slot = "58")]
		protected virtual void SetJointLimits()
		{
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xB932A8", Offset = "0xB932A8", VA = "0xB932A8", Slot = "59")]
		protected virtual void ManageSpring(bool activate, float springTarget)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xB93380", Offset = "0xB93380", VA = "0xB93380", Slot = "60")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0xB9355C", Offset = "0xB9355C", VA = "0xB9355C", Slot = "61")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0xB9362C", Offset = "0xB9362C", VA = "0xB9362C", Slot = "62")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0xB936B0", Offset = "0xB936B0", VA = "0xB936B0", Slot = "63")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xB93730", Offset = "0xB93730", VA = "0xB93730", Slot = "64")]
		protected virtual void ManageInteractableObjectListeners(bool state)
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xB93980", Offset = "0xB93980", VA = "0xB93980", Slot = "65")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0xB93A30", Offset = "0xB93A30", VA = "0xB93A30", Slot = "66")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0xB93AE0", Offset = "0xB93AE0", VA = "0xB93AE0", Slot = "67")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xB93B10", Offset = "0xB93B10", VA = "0xB93B10", Slot = "68")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xB93B20", Offset = "0xB93B20", VA = "0xB93B20", Slot = "69")]
		protected virtual void AttemptMove()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xB93B5C", Offset = "0xB93B5C", VA = "0xB93B5C", Slot = "70")]
		protected virtual void AttemptRelease()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xB93B70", Offset = "0xB93B70", VA = "0xB93B70", Slot = "71")]
		protected virtual void SetFrictions(float frictionValue)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xB93BC4", Offset = "0xB93BC4", VA = "0xB93BC4", Slot = "72")]
		protected virtual void CheckLock()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xB93C98", Offset = "0xB93C98", VA = "0xB93C98", Slot = "73")]
		protected virtual void SetAngleWithNormalizedValue(float normalizedTargetAngle)
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xB93DC0", Offset = "0xB93DC0", VA = "0xB93DC0", Slot = "74")]
		protected virtual void UpdateToAngle(float givenTargetAngle)
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xB93E0C", Offset = "0xB93E0C", VA = "0xB93E0C", Slot = "75")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xB93F64", Offset = "0xB93F64", VA = "0xB93F64", Slot = "76")]
		protected virtual void ForceAngleTarget()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0xB93FB4", Offset = "0xB93FB4", VA = "0xB93FB4", Slot = "77")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xB94110", Offset = "0xB94110", VA = "0xB94110", Slot = "78")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xB941A4", Offset = "0xB941A4", VA = "0xB941A4")]
		public VRTK_PhysicsRotator()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Physics/VRTK_PhysicsSlider")]
	public class VRTK_PhysicsSlider : VRTK_BasePhysicsControllable
	{
		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Slider Settings")]
		[Tooltip("The maximum length that the slider can be moved from the origin position across the `Operate Axis`. A negative value will allow it to move the opposite way.")]
		public float maximumLength;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("The normalized position the slider can be within the minimum or maximum slider positions before the minimum or maximum positions are considered reached.")]
		public float minMaxThreshold;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Range(0f, 1f)]
		[Tooltip("The target position to move the slider towards given in a normalized value of `0f` (start point) to `1f` (end point).")]
		public float positionTarget;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Range(0f, 1f)]
		[Tooltip("The position the slider when it is at the default resting point given in a normalized value of `0f` (start point) to `1f` (end point).")]
		public float restingPosition;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The normalized threshold value the slider has to be within the `Resting Position` before the slider is forced back to the `Resting Position` if it is not grabbed.")]
		[Range(0f, 1f)]
		public float forceRestingPositionThreshold;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Value Step Settings")]
		[Tooltip("The minimum and the maximum step values for the slider to register along the `Operate Axis`.")]
		public Limits2D stepValueRange;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("The increments the slider value will change in between the `Step Value Range`.")]
		public float stepSize;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("If this is checked then the value for the slider will be the step value and not the absolute position of the slider Transform.")]
		public bool useStepAsValue;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		[Header("Snap Settings")]
		[Tooltip("If this is checked then the slider will snap to the position of the nearest step along the value range.")]
		public bool snapToStep;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("The speed in which the slider will snap to the relevant point along the `Operate Axis`")]
		public float snapForce;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Header("Interaction Settings")]
		[Tooltip("If this is checked then when the Interact Grab grabs the Interactable Object, it will grab it with precision and pick it up at the particular point on the Interactable Object that the Interact Touch is touching.")]
		public bool precisionGrab;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("The maximum distance the grabbing object is away from the slider before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Tooltip("The amount of friction to the slider Rigidbody when it is released.")]
		public float releaseFriction;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("A collection of GameObjects that will be used as the valid collisions to determine if the door can be interacted with.")]
		public GameObject[] onlyInteractWith;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected ConfigurableJoint controlJoint;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool createControlJoint;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected VRTK_TrackObjectGrabAttach controlGrabAttach;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool createControlInteractableObject;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		protected Vector3 previousLocalPosition;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected float previousPositionTarget;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		protected bool stillResting;

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xB942C4", Offset = "0xB942C4", VA = "0xB942C4", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xB9435C", Offset = "0xB9435C", VA = "0xB9435C", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xB94454", Offset = "0xB94454", VA = "0xB94454", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xB94610", Offset = "0xB94610", VA = "0xB94610", Slot = "50")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xB946F4", Offset = "0xB946F4", VA = "0xB946F4", Slot = "51")]
		public virtual void SetPositionTargetWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xB94734", Offset = "0xB94734", VA = "0xB94734", Slot = "52")]
		public virtual void SetRestingPositionWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xB94764", Offset = "0xB94764", VA = "0xB94764", Slot = "53")]
		public virtual float GetPositionFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xB94820", Offset = "0xB94820", VA = "0xB94820", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xB94884", Offset = "0xB94884", VA = "0xB94884", Slot = "54")]
		public virtual ConfigurableJoint GetControlJoint()
		{
			return null;
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xB9488C", Offset = "0xB9488C", VA = "0xB9488C", Slot = "55")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xB94894", Offset = "0xB94894", VA = "0xB94894", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xB94978", Offset = "0xB94978", VA = "0xB94978", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xB94A54", Offset = "0xB94A54", VA = "0xB94A54", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xB94B2C", Offset = "0xB94B2C", VA = "0xB94B2C", Slot = "56")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xB94B84", Offset = "0xB94B84", VA = "0xB94B84", Slot = "42")]
		protected override void ConfigueRigidbody()
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xB94BD0", Offset = "0xB94BD0", VA = "0xB94BD0", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0xB94E74", Offset = "0xB94E74", VA = "0xB94E74", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xB94EE8", Offset = "0xB94EE8", VA = "0xB94EE8", Slot = "57")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xB94F78", Offset = "0xB94F78", VA = "0xB94F78", Slot = "58")]
		protected virtual void ForcePositionTarget()
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xB94FDC", Offset = "0xB94FDC", VA = "0xB94FDC", Slot = "59")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xB951A0", Offset = "0xB951A0", VA = "0xB951A0", Slot = "60")]
		protected virtual void SetPositionWithNormalizedValue(float givenTargetPosition)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xB95258", Offset = "0xB95258", VA = "0xB95258", Slot = "61")]
		protected virtual void SnapToPosition(float positionOnAxis)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xB95334", Offset = "0xB95334", VA = "0xB95334", Slot = "62")]
		protected virtual Vector3 MaximumLength()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xB9538C", Offset = "0xB9538C", VA = "0xB9538C", Slot = "63")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xB95568", Offset = "0xB95568", VA = "0xB95568", Slot = "64")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0xB955FC", Offset = "0xB955FC", VA = "0xB955FC", Slot = "65")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0xB95680", Offset = "0xB95680", VA = "0xB95680", Slot = "66")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0xB95700", Offset = "0xB95700", VA = "0xB95700", Slot = "67")]
		protected virtual void SetupJoint()
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0xB95964", Offset = "0xB95964", VA = "0xB95964", Slot = "68")]
		protected virtual void EnableJointDriver()
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0xB95978", Offset = "0xB95978", VA = "0xB95978", Slot = "69")]
		protected virtual void DisableJointDriver()
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0xB9598C", Offset = "0xB9598C", VA = "0xB9598C", Slot = "70")]
		protected virtual void SetJointDrive(float driverForce)
		{
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0xB95A3C", Offset = "0xB95A3C", VA = "0xB95A3C", Slot = "71")]
		protected virtual void ManageInteractableObjectListeners(bool state)
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0xB95C8C", Offset = "0xB95C8C", VA = "0xB95C8C", Slot = "72")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xB95D28", Offset = "0xB95D28", VA = "0xB95D28", Slot = "73")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xB95DC4", Offset = "0xB95DC4", VA = "0xB95DC4", Slot = "74")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0xB95DF4", Offset = "0xB95DF4", VA = "0xB95DF4", Slot = "75")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0xB95E04", Offset = "0xB95E04", VA = "0xB95E04", Slot = "76")]
		protected virtual void AttemptMove()
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0xB95E38", Offset = "0xB95E38", VA = "0xB95E38", Slot = "77")]
		protected virtual void AttemptRelease()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xB95EB4", Offset = "0xB95EB4", VA = "0xB95EB4", Slot = "78")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xB95F48", Offset = "0xB95F48", VA = "0xB95F48")]
		public VRTK_PhysicsSlider()
		{
		}
	}
}
namespace VRTK.Controllables.ArtificialBased
{
	[Token(Token = "0x20003E2")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Artificial/VRTK_ArtificialPusher")]
	public class VRTK_ArtificialPusher : VRTK_BaseControllable
	{
		[Token(Token = "0x20003E3")]
		[CompilerGenerated]
		private sealed class <PositionLerp>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialPusher <>4__this;

			[Token(Token = "0x40016D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Token(Token = "0x40016D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float moveSpeed;

			[Token(Token = "0x170001C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BCA")]
				[Address(RVA = "0xB97050", Offset = "0xB97050", VA = "0xB97050", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BCC")]
				[Address(RVA = "0xB97098", Offset = "0xB97098", VA = "0xB97098", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0xB96B1C", Offset = "0xB96B1C", VA = "0xB96B1C")]
			[DebuggerHidden]
			public <PositionLerp>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0xB96E84", Offset = "0xB96E84", VA = "0xB96E84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0xB96E88", Offset = "0xB96E88", VA = "0xB96E88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0xB97058", Offset = "0xB97058", VA = "0xB97058", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003E4")]
		[CompilerGenerated]
		private sealed class <SetTargetPositionAtEndOfFrame>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialPusher <>4__this;

			[Token(Token = "0x170001C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BD0")]
				[Address(RVA = "0xB97158", Offset = "0xB97158", VA = "0xB97158", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BD2")]
				[Address(RVA = "0xB971A0", Offset = "0xB971A0", VA = "0xB971A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BCD")]
			[Address(RVA = "0xB96BB8", Offset = "0xB96BB8", VA = "0xB96BB8")]
			[DebuggerHidden]
			public <SetTargetPositionAtEndOfFrame>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xB970A0", Offset = "0xB970A0", VA = "0xB970A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0xB970A4", Offset = "0xB970A4", VA = "0xB970A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0xB97160", Offset = "0xB97160", VA = "0xB97160", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Header("Pusher Settings")]
		[Tooltip("The distance along the `Operate Axis` until the pusher reaches the pressed position.")]
		public float pressedDistance;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[Tooltip("If this is checked then the pusher will stay in the pressed position when it reaches the pressed position.")]
		protected bool stayPressed;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("The threshold in which the pusher's current normalized position along the `Operate Axis` has to be within the minimum and maximum limits of the pusher.")]
		[Range(0f, 1f)]
		public float minMaxLimitThreshold;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 1f)]
		[Tooltip("The normalized position of the pusher between the original position and the pressed position that will be considered as the resting position for the pusher.")]
		public float restingPosition;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Range(0f, 1f)]
		[Tooltip("The normalized value that the pusher can be from the `Resting Position` before the pusher is considered to be resting when not being interacted with.")]
		public float restingPositionThreshold;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		[Tooltip("The normalized position of the pusher between the original position and the pressed position. `0f` will set the pusher position to the original position, `1f` will set the pusher position to the pressed position.")]
		[SerializeField]
		protected float positionTarget;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The speed in which the pusher moves towards to the `Pressed Distance` position.")]
		public float pressSpeed;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The speed in which the pusher will return to the `Target Position` of the pusher.")]
		public float returnSpeed;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Coroutine positionLerpRoutine;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine setTargetPositionRoutine;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float vectorEqualityThreshold;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected bool isPressed;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		protected bool isMoving;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
		protected bool isTouched;

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0xB96028", Offset = "0xB96028", VA = "0xB96028", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xB960C0", Offset = "0xB960C0", VA = "0xB960C0", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xB961B8", Offset = "0xB961B8", VA = "0xB961B8", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xB961BC", Offset = "0xB961BC", VA = "0xB961BC", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xB96264", Offset = "0xB96264", VA = "0xB96264", Slot = "38")]
		public virtual void SetStayPressed(bool state)
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xB962AC", Offset = "0xB962AC", VA = "0xB962AC", Slot = "39")]
		public virtual void SetPositionTarget(float normalizedTarget)
		{
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0xB962D4", Offset = "0xB962D4", VA = "0xB962D4", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0xB96468", Offset = "0xB96468", VA = "0xB96468", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0xB964B8", Offset = "0xB964B8", VA = "0xB964B8", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0xB964F4", Offset = "0xB964F4", VA = "0xB964F4", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0xB966F8", Offset = "0xB966F8", VA = "0xB966F8", Slot = "30")]
		protected override void OnTouched(Collider collider)
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0xB968D8", Offset = "0xB968D8", VA = "0xB968D8", Slot = "31")]
		protected override void OnUntouched(Collider collider)
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0xB968E0", Offset = "0xB968E0", VA = "0xB968E0", Slot = "40")]
		protected virtual void SetTargetPosition()
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0xB969D0", Offset = "0xB969D0", VA = "0xB969D0", Slot = "41")]
		protected virtual Vector3 PressedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0xB96A28", Offset = "0xB96A28", VA = "0xB96A28", Slot = "42")]
		protected virtual void CancelPositionLerp()
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0xB96A54", Offset = "0xB96A54", VA = "0xB96A54", Slot = "43")]
		protected virtual void CancelSetTargetPosition()
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0xB96A80", Offset = "0xB96A80", VA = "0xB96A80", Slot = "44")]
		[IteratorStateMachine(typeof(<PositionLerp>d__30))]
		protected virtual IEnumerator PositionLerp(Vector3 targetPosition, float moveSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xB96B44", Offset = "0xB96B44", VA = "0xB96B44", Slot = "45")]
		[IteratorStateMachine(typeof(<SetTargetPositionAtEndOfFrame>d__31))]
		protected virtual IEnumerator SetTargetPositionAtEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xB96BE0", Offset = "0xB96BE0", VA = "0xB96BE0", Slot = "46")]
		protected virtual void ManageAtPressedPosition()
		{
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xB96C30", Offset = "0xB96C30", VA = "0xB96C30", Slot = "47")]
		protected virtual void ManageAtOriginPosition()
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xB96C74", Offset = "0xB96C74", VA = "0xB96C74", Slot = "48")]
		protected virtual bool AtOriginPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xB96CAC", Offset = "0xB96CAC", VA = "0xB96CAC", Slot = "49")]
		protected virtual bool AtPressedPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xB96D24", Offset = "0xB96D24", VA = "0xB96D24", Slot = "50")]
		public virtual bool AtTargetPosition(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xB96D7C", Offset = "0xB96D7C", VA = "0xB96D7C", Slot = "51")]
		protected virtual void ResetInteractor()
		{
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xB96DA4", Offset = "0xB96DA4", VA = "0xB96DA4", Slot = "52")]
		protected virtual void SetToRestingPosition()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0xB96E4C", Offset = "0xB96E4C", VA = "0xB96E4C")]
		public VRTK_ArtificialPusher()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Artificial/VRTK_ArtificialRotator")]
	public class VRTK_ArtificialRotator : VRTK_BaseControllable
	{
		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("A Transform that denotes the position where the rotator will rotate around.")]
		[Header("Hinge Settings")]
		public Transform hingePoint;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The minimum and maximum angle the rotator can rotate to.")]
		public Limits2D angleLimits;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The angle at which the rotator rotation can be within the minimum or maximum angle before the minimum or maximum angles are considered reached.")]
		public float minMaxThresholdAngle;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("The angle at which will be considered as the resting position of the rotator.")]
		public float restingAngle;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The threshold angle from the `Resting Angle` that the current angle of the rotator needs to be within to snap the rotator back to the `Resting Angle`.")]
		public float forceRestingAngleThreshold;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("The target angle to rotate the rotator to.")]
		[SerializeField]
		protected float angleTarget;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("If this is checked then the rotator Rigidbody will have all rotations frozen.")]
		public bool isLocked;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The minimum and the maximum step values for the rotator to register along the `Operate Axis`.")]
		[Header("Value Step Settings")]
		public Limits2D stepValueRange;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The increments the rotator value will change in between the `Step Value Range`.")]
		public float stepSize;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("If this is checked then the value for the rotator will be the step value and not the absolute rotation of the rotator Transform.")]
		public bool useStepAsValue;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		[Tooltip("If this is checked then the rotator will snap to the angle of the nearest step along the value range.")]
		[Header("Snap Settings")]
		public bool snapToStep;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The speed in which the rotator will snap to the relevant angle along the `Operate Axis`")]
		public float snapForce;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("If this is checked then when the Interact Grab grabs the Interactable Object, it will grab it with precision and pick it up at the particular point on the Interactable Object that the Interact Touch is touching.")]
		[Header("Interaction Settings")]
		public bool precisionGrab;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("The maximum distance the grabbing object is away from the rotator before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Determines how the rotation of the object is calculated based on the action of the grabbing object.")]
		public VRTK_RotateTransformGrabAttach.RotationType rotationAction;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("The simulated friction when the rotator is grabbed.")]
		public float grabbedFriction;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Tooltip("The simulated friction when the rotator is released.")]
		public float releasedFriction;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("A collection of GameObjects that will be used as the valid collisions to determine if the rotator can be interacted with.")]
		public GameObject[] onlyInteractWith;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_RotateTransformGrabAttach controlGrabAttach;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected bool createInteractableObject;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected GameObject rotatorContainer;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected bool rotationReset;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		protected bool stillResting;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		protected float previousValue;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected float previousAngleTarget;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected Transform savedParent;

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xB971A8", Offset = "0xB971A8", VA = "0xB971A8", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xB97238", Offset = "0xB97238", VA = "0xB97238", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xB9726C", Offset = "0xB9726C", VA = "0xB9726C", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xB9727C", Offset = "0xB9727C", VA = "0xB9727C", Slot = "38")]
		public virtual GameObject GetContainer()
		{
			return null;
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xB97284", Offset = "0xB97284", VA = "0xB97284", Slot = "39")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xB97380", Offset = "0xB97380", VA = "0xB97380", Slot = "40")]
		public virtual void SetAngleTargetWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xB973C8", Offset = "0xB973C8", VA = "0xB973C8", Slot = "41")]
		public virtual void SetRestingAngleWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xB973F8", Offset = "0xB973F8", VA = "0xB973F8", Slot = "42")]
		public virtual float GetAngleFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xB974D0", Offset = "0xB974D0", VA = "0xB974D0", Slot = "43")]
		public virtual void SetAngleTarget(float newAngle)
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xB9758C", Offset = "0xB9758C", VA = "0xB9758C", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xB975F0", Offset = "0xB975F0", VA = "0xB975F0", Slot = "44")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xB975F8", Offset = "0xB975F8", VA = "0xB975F8", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xB978A4", Offset = "0xB978A4", VA = "0xB978A4", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xB97948", Offset = "0xB97948", VA = "0xB97948", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0xB979FC", Offset = "0xB979FC", VA = "0xB979FC", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xB97CA8", Offset = "0xB97CA8", VA = "0xB97CA8", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0xB97D30", Offset = "0xB97D30", VA = "0xB97D30", Slot = "45")]
		protected virtual void SetupParentContainer()
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xB98230", Offset = "0xB98230", VA = "0xB98230", Slot = "46")]
		protected virtual void RemoveParentContainer()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xB982D0", Offset = "0xB982D0", VA = "0xB982D0", Slot = "47")]
		protected virtual void ResetParentContainer()
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0xB98380", Offset = "0xB98380", VA = "0xB98380", Slot = "48")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0xB9853C", Offset = "0xB9853C", VA = "0xB9853C", Slot = "49")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xB98630", Offset = "0xB98630", VA = "0xB98630", Slot = "50")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xB986E4", Offset = "0xB986E4", VA = "0xB986E4", Slot = "51")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xB987AC", Offset = "0xB987AC", VA = "0xB987AC", Slot = "52")]
		protected virtual void ManageInteractableListeners(bool state)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xB9890C", Offset = "0xB9890C", VA = "0xB9890C", Slot = "53")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0xB9891C", Offset = "0xB9891C", VA = "0xB9891C", Slot = "54")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0xB98950", Offset = "0xB98950", VA = "0xB98950", Slot = "55")]
		protected virtual void CheckLock()
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0xB98A08", Offset = "0xB98A08", VA = "0xB98A08", Slot = "56")]
		protected virtual void ManageGrabbableListeners(bool state)
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0xB98AF0", Offset = "0xB98AF0", VA = "0xB98AF0", Slot = "57")]
		protected virtual void GrabMechanicAngleChanged(object sender, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0xB98BC8", Offset = "0xB98BC8", VA = "0xB98BC8", Slot = "58")]
		protected virtual float SetAngleWithNormalizedValue(float normalizedTargetAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0xB98CA8", Offset = "0xB98CA8", VA = "0xB98CA8", Slot = "59")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0xB98D74", Offset = "0xB98D74", VA = "0xB98D74", Slot = "60")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0xB98EBC", Offset = "0xB98EBC", VA = "0xB98EBC", Slot = "61")]
		protected virtual void SetRotation(float newAngle, float speed)
		{
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0xB98EEC", Offset = "0xB98EEC", VA = "0xB98EEC", Slot = "62")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0xB98F80", Offset = "0xB98F80", VA = "0xB98F80")]
		public VRTK_ArtificialRotator()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	[AddComponentMenu("VRTK/Scripts/Interactables/Controllables/Artificial/VRTK_ArtificialSlider")]
	public class VRTK_ArtificialSlider : VRTK_BaseControllable
	{
		[Token(Token = "0x20003E7")]
		[CompilerGenerated]
		private sealed class <SetPositionTargetAtEndOfFrameRoutine>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400170B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialSlider <>4__this;

			[Token(Token = "0x170001C7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C18")]
				[Address(RVA = "0xB9A8F0", Offset = "0xB9A8F0", VA = "0xB9A8F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C1A")]
				[Address(RVA = "0xB9A938", Offset = "0xB9A938", VA = "0xB9A938", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C15")]
			[Address(RVA = "0xB99BA8", Offset = "0xB99BA8", VA = "0xB99BA8")]
			[DebuggerHidden]
			public <SetPositionTargetAtEndOfFrameRoutine>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6001C16")]
			[Address(RVA = "0xB9A7D4", Offset = "0xB9A7D4", VA = "0xB9A7D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C17")]
			[Address(RVA = "0xB9A7D8", Offset = "0xB9A7D8", VA = "0xB9A7D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xB9A8F8", Offset = "0xB9A8F8", VA = "0xB9A8F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("The maximum length that the slider can be moved from the origin position across the `Operate Axis`. A negative value will allow it to move the opposite way.")]
		[Header("Slider Settings")]
		public float maximumLength;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The normalized position the slider can be within the minimum or maximum slider positions before the minimum or maximum positions are considered reached.")]
		public float minMaxThreshold;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[Range(0f, 1f)]
		[Tooltip("The target position to move the slider towards given in a normalized value of `0f` (start point) to `1f` (end point).")]
		protected float positionTarget;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The position the slider when it is at the default resting point given in a normalized value of `0f` (start point) to `1f` (end point).")]
		[Range(0f, 1f)]
		public float restingPosition;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Range(0f, 1f)]
		[Tooltip("The normalized threshold value the slider has to be within the `Resting Position` before the slider is forced back to the `Resting Position` if it is not grabbed.")]
		public float forceRestingPositionThreshold;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Value Step Settings")]
		[Tooltip("The minimum and the maximum step values for the slider to register along the `Operate Axis`.")]
		public Limits2D stepValueRange;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The increments the slider value will change in between the `Step Value Range`.")]
		public float stepSize;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("If this is checked then the value for the slider will be the step value and not the absolute position of the slider Transform.")]
		public bool useStepAsValue;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		[Header("Snap Settings")]
		[Tooltip("If this is checked then the slider will snap to the position of the nearest step along the value range.")]
		public bool snapToStep;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The speed in which the slider will snap to the relevant point along the `Operate Axis`")]
		public float snapForce;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("The speed in which to track the grabbed slider to the interacting object.")]
		[Header("Interaction Settings")]
		public float trackingSpeed;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("If this is checked then when the Interact Grab grabs the Interactable Object, it will grab it with precision and pick it up at the particular point on the Interactable Object that the Interact Touch is touching.")]
		public bool precisionGrab;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("The maximum distance the grabbing object is away from the slider before it is automatically released.")]
		public float detachDistance;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The amount of friction to the slider Rigidbody when it is released.")]
		public float releaseFriction;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("A collection of GameObjects that will be used as the valid collisions to determine if the door can be interacted with.")]
		public GameObject[] onlyInteractWith;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected VRTK_MoveTransformGrabAttach controlGrabAttach;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool createInteractableObject;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Limits2D axisLimits;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Vector3 previousLocalPosition;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected Coroutine setPositionTargetAtEndOfFrameRoutine;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected bool stillResting;

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0xB990A8", Offset = "0xB990A8", VA = "0xB990A8", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0xB99140", Offset = "0xB99140", VA = "0xB99140", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0xB99238", Offset = "0xB99238", VA = "0xB99238", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0xB99314", Offset = "0xB99314", VA = "0xB99314", Slot = "38")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0xB993F8", Offset = "0xB993F8", VA = "0xB993F8", Slot = "39")]
		public virtual void SetPositionTarget(float newPositionTarget, float speed)
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0xB9940C", Offset = "0xB9940C", VA = "0xB9940C", Slot = "40")]
		public virtual void SetPositionTargetWithStepValue(float givenStepValue, float speed)
		{
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0xB99458", Offset = "0xB99458", VA = "0xB99458", Slot = "41")]
		public virtual void SetRestingPositionWithStepValue(float givenStepValue)
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0xB99488", Offset = "0xB99488", VA = "0xB99488", Slot = "42")]
		public virtual float GetPositionFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0xB994EC", Offset = "0xB994EC", VA = "0xB994EC", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0xB99550", Offset = "0xB99550", VA = "0xB99550", Slot = "43")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xB99558", Offset = "0xB99558", VA = "0xB99558", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xB99640", Offset = "0xB99640", VA = "0xB99640", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xB99710", Offset = "0xB99710", VA = "0xB99710", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xB99808", Offset = "0xB99808", VA = "0xB99808", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xB99AAC", Offset = "0xB99AAC", VA = "0xB99AAC", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xB99B34", Offset = "0xB99B34", VA = "0xB99B34", Slot = "44")]
		[IteratorStateMachine(typeof(<SetPositionTargetAtEndOfFrameRoutine>d__38))]
		protected virtual IEnumerator SetPositionTargetAtEndOfFrameRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xB99BD0", Offset = "0xB99BD0", VA = "0xB99BD0", Slot = "45")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xB99D94", Offset = "0xB99D94", VA = "0xB99D94", Slot = "46")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xB99EA0", Offset = "0xB99EA0", VA = "0xB99EA0", Slot = "47")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0xB9A098", Offset = "0xB9A098", VA = "0xB9A098", Slot = "48")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0xB9A160", Offset = "0xB9A160", VA = "0xB9A160", Slot = "49")]
		protected virtual Vector3 MaximumLength()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0xB9A1B8", Offset = "0xB9A1B8", VA = "0xB9A1B8", Slot = "50")]
		protected virtual void SetPositionWithNormalizedValue(float givenTargetPosition, float speed)
		{
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0xB9A204", Offset = "0xB9A204", VA = "0xB9A204", Slot = "51")]
		protected virtual void SnapToPosition(float positionOnAxis, float speed)
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0xB9A2F0", Offset = "0xB9A2F0", VA = "0xB9A2F0", Slot = "52")]
		protected virtual void ManageInteractableListeners(bool state)
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0xB9A450", Offset = "0xB9A450", VA = "0xB9A450", Slot = "53")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0xB9A460", Offset = "0xB9A460", VA = "0xB9A460", Slot = "54")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0xB9A4FC", Offset = "0xB9A4FC", VA = "0xB9A4FC", Slot = "55")]
		protected virtual bool ForceRestingPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0xB9A560", Offset = "0xB9A560", VA = "0xB9A560", Slot = "56")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0xB9A5F4", Offset = "0xB9A5F4", VA = "0xB9A5F4", Slot = "57")]
		protected virtual void ManageGrabbableListeners(bool state)
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0xB9A6DC", Offset = "0xB9A6DC", VA = "0xB9A6DC", Slot = "58")]
		protected virtual void GrabMechanicTransformPositionChanged(object sender, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0xB9A6EC", Offset = "0xB9A6EC", VA = "0xB9A6EC")]
		public VRTK_ArtificialSlider()
		{
		}
	}
}
namespace VRTK.Highlighters
{
	[Token(Token = "0x20003E8")]
	public abstract class VRTK_BaseHighlighter : MonoBehaviour
	{
		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines if this highlighter is the active highlighter for the object the component is attached to. Only one active highlighter can be applied to a GameObject.")]
		public bool active;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Determines if the highlighted object should be unhighlighted when it is disabled.")]
		public bool unhighlightOnDisable;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool usesClonedObject;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject objectToAffect;

		[Token(Token = "0x6001C1B")]
		public abstract void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options);

		[Token(Token = "0x6001C1C")]
		public abstract void ResetHighlighter();

		[Token(Token = "0x6001C1D")]
		public abstract void Highlight([Optional] Color? color, float duration = 0f);

		[Token(Token = "0x6001C1E")]
		public abstract void Unhighlight([Optional] Color? color, float duration = 0f);

		[Token(Token = "0x6001C1F")]
		public virtual T GetOption<T>(Dictionary<string, object> options, string key)
		{
			return (T)null;
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0xB9A940", Offset = "0xB9A940", VA = "0xB9A940", Slot = "9")]
		public virtual bool UsesClonedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0xB9A948", Offset = "0xB9A948", VA = "0xB9A948")]
		public static VRTK_BaseHighlighter GetActiveHighlighter(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0xB9A9D4", Offset = "0xB9A9D4", VA = "0xB9A9D4", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xB9AA10", Offset = "0xB9AA10", VA = "0xB9AA10")]
		protected VRTK_BaseHighlighter()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Highlighters/VRTK_MaterialColorSwapHighlighter")]
	public class VRTK_MaterialColorSwapHighlighter : VRTK_BaseHighlighter
	{
		[Token(Token = "0x20003EA")]
		[CompilerGenerated]
		private sealed class <CycleColor>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400171A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Material material;

			[Token(Token = "0x400171B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color startColor;

			[Token(Token = "0x400171C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Color endColor;

			[Token(Token = "0x400171D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float duration;

			[Token(Token = "0x400171E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public VRTK_MaterialColorSwapHighlighter <>4__this;

			[Token(Token = "0x400171F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x170001C9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C2F")]
				[Address(RVA = "0xB9BA94", Offset = "0xB9BA94", VA = "0xB9BA94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C31")]
				[Address(RVA = "0xB9BADC", Offset = "0xB9BADC", VA = "0xB9BADC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0xB9B764", Offset = "0xB9B764", VA = "0xB9B764")]
			[DebuggerHidden]
			public <CycleColor>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0xB9B8A4", Offset = "0xB9B8A4", VA = "0xB9B8A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0xB9B8A8", Offset = "0xB9B8A8", VA = "0xB9B8A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C30")]
			[Address(RVA = "0xB9BA9C", Offset = "0xB9BA9C", VA = "0xB9BA9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The emission colour of the texture will be the highlight colour but this percent darker.")]
		public float emissionDarken;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A custom material to use on the highlighted object.")]
		public Material customMaterial;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, Material[]> originalSharedRendererMaterials;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<string, Material[]> originalRendererMaterials;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Dictionary<string, Coroutine> faderRoutines;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool resetMainTexture;

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0xB9AA20", Offset = "0xB9AA20", VA = "0xB9AA20", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xB9AB94", Offset = "0xB9AB94", VA = "0xB9AB94", Slot = "5")]
		public override void ResetHighlighter()
		{
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0xB9ABA0", Offset = "0xB9ABA0", VA = "0xB9ABA0", Slot = "6")]
		public override void Highlight(Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0xB9AC30", Offset = "0xB9AC30", VA = "0xB9AC30", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0xB9AF64", Offset = "0xB9AF64", VA = "0xB9AF64", Slot = "11")]
		protected virtual void StoreOriginalMaterials()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0xB9B18C", Offset = "0xB9B18C", VA = "0xB9B18C", Slot = "12")]
		protected virtual void ChangeToHighlightColor(Color color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0xB9B678", Offset = "0xB9B678", VA = "0xB9B678", Slot = "13")]
		[IteratorStateMachine(typeof(<CycleColor>d__12))]
		protected virtual IEnumerator CycleColor(Material material, Color startColor, Color endColor, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0xB9B78C", Offset = "0xB9B78C", VA = "0xB9B78C")]
		public VRTK_MaterialColorSwapHighlighter()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Highlighters/VRTK_MaterialPropertyBlockColorSwapHighlighter")]
	public class VRTK_MaterialPropertyBlockColorSwapHighlighter : VRTK_MaterialColorSwapHighlighter
	{
		[Token(Token = "0x20003EC")]
		[CompilerGenerated]
		private sealed class <CycleColor>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MaterialPropertyBlock highlightMaterialPropertyBlock;

			[Token(Token = "0x4001725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color endColor;

			[Token(Token = "0x4001726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Token(Token = "0x4001727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Renderer renderer;

			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x170001CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C3B")]
				[Address(RVA = "0xB9C708", Offset = "0xB9C708", VA = "0xB9C708", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C3D")]
				[Address(RVA = "0xB9C750", Offset = "0xB9C750", VA = "0xB9C750", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xB9C40C", Offset = "0xB9C40C", VA = "0xB9C40C")]
			[DebuggerHidden]
			public <CycleColor>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001C39")]
			[Address(RVA = "0xB9C4E8", Offset = "0xB9C4E8", VA = "0xB9C4E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C3A")]
			[Address(RVA = "0xB9C4EC", Offset = "0xB9C4EC", VA = "0xB9C4EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0xB9C710", Offset = "0xB9C710", VA = "0xB9C710", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<string, MaterialPropertyBlock> originalMaterialPropertyBlocks;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Dictionary<string, MaterialPropertyBlock> highlightMaterialPropertyBlocks;

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0xB9BAE4", Offset = "0xB9BAE4", VA = "0xB9BAE4", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0xB9BBC4", Offset = "0xB9BBC4", VA = "0xB9BBC4", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0xB9BE58", Offset = "0xB9BE58", VA = "0xB9BE58", Slot = "11")]
		protected override void StoreOriginalMaterials()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0xB9C018", Offset = "0xB9C018", VA = "0xB9C018", Slot = "12")]
		protected override void ChangeToHighlightColor(Color color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0xB9C344", Offset = "0xB9C344", VA = "0xB9C344", Slot = "14")]
		[IteratorStateMachine(typeof(<CycleColor>d__6))]
		protected virtual IEnumerator CycleColor(Renderer renderer, MaterialPropertyBlock highlightMaterialPropertyBlock, Color endColor, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0xB9C434", Offset = "0xB9C434", VA = "0xB9C434")]
		public VRTK_MaterialPropertyBlockColorSwapHighlighter()
		{
		}
	}
	[Token(Token = "0x20003ED")]
	[AddComponentMenu("VRTK/Scripts/Interactions/Highlighters/VRTK_OutlineObjectCopyHighlighter")]
	public class VRTK_OutlineObjectCopyHighlighter : VRTK_BaseHighlighter
	{
		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The thickness of the outline effect")]
		public float thickness;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The GameObjects to use as the model to outline. If one isn't provided then the first GameObject with a valid Renderer in the current GameObject hierarchy will be used.")]
		public GameObject[] customOutlineModels;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A path to a GameObject to find at runtime, if the GameObject doesn't exist at edit time.")]
		public string[] customOutlineModelPaths;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If the mesh has multiple sub-meshes to highlight then this should be checked, otherwise only the first mesh will be highlighted.")]
		public bool enableSubmeshHighlight;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Material stencilOutline;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Renderer[] highlightModels;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected string[] copyComponents;

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xB9C758", Offset = "0xB9C758", VA = "0xB9C758", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xB9C908", Offset = "0xB9C908", VA = "0xB9C908", Slot = "5")]
		public override void ResetHighlighter()
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0xB9C960", Offset = "0xB9C960", VA = "0xB9C960", Slot = "6")]
		public override void Highlight(Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xB9CB18", Offset = "0xB9CB18", VA = "0xB9CB18", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xB9CC1C", Offset = "0xB9CC1C", VA = "0xB9CC1C", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xB9CCC4", Offset = "0xB9CCC4", VA = "0xB9CCC4", Slot = "12")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xB9CDBC", Offset = "0xB9CDBC", VA = "0xB9CDBC", Slot = "13")]
		protected virtual void ResetHighlighterWithCustomModels()
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xB9CEF4", Offset = "0xB9CEF4", VA = "0xB9CEF4", Slot = "14")]
		protected virtual void ResetHighlighterWithCustomModelPaths()
		{
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xB9D018", Offset = "0xB9D018", VA = "0xB9D018", Slot = "15")]
		protected virtual void ResetHighlightersWithCurrentGameObject()
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xB9D110", Offset = "0xB9D110", VA = "0xB9D110", Slot = "16")]
		protected virtual void SetOptions([Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xB9D298", Offset = "0xB9D298", VA = "0xB9D298", Slot = "17")]
		protected virtual void DeleteExistingHighlightModels()
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0xB9D3B0", Offset = "0xB9D3B0", VA = "0xB9D3B0", Slot = "18")]
		protected virtual Renderer CreateHighlightModel(GameObject givenOutlineModel, string givenOutlineModelPath)
		{
			return null;
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xB9DD04", Offset = "0xB9DD04", VA = "0xB9DD04")]
		public VRTK_OutlineObjectCopyHighlighter()
		{
		}
	}
}
namespace VRTK.Examples
{
	[Token(Token = "0x20003EE")]
	public class VRTKExample_ControllerEventsDelegateListeners : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		public enum EventQuickSelect
		{
			[Token(Token = "0x4001743")]
			Custom,
			[Token(Token = "0x4001744")]
			None,
			[Token(Token = "0x4001745")]
			All,
			[Token(Token = "0x4001746")]
			ButtonOnly,
			[Token(Token = "0x4001747")]
			AxisOnly,
			[Token(Token = "0x4001748")]
			SenseAxisOnly
		}

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Quick Select")]
		public EventQuickSelect quickSelect;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Button Events Debug")]
		public bool triggerButtonEvents;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool gripButtonEvents;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool touchpadButtonEvents;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool touchpadTwoButtonEvents;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool buttonOneButtonEvents;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool buttonTwoButtonEvents;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool startMenuButtonEvents;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[Header("Axis Events Debug")]
		public bool triggerAxisEvents;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool gripAxisEvents;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool touchpadAxisEvents;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool touchpadTwoAxisEvents;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		[Header("Sense Axis Events Debug")]
		public bool triggerSenseAxisEvents;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool touchpadSenseAxisEvents;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool middleFingerSenseAxisEvents;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool ringFingerSenseAxisEvents;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool pinkyFingerSenseAxisEvents;

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0xB9DE48", Offset = "0xB9DE48", VA = "0xB9DE48")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0xB9EE6C", Offset = "0xB9EE6C", VA = "0xB9EE6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0xB9FCAC", Offset = "0xB9FCAC", VA = "0xB9FCAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0xB9FD3C", Offset = "0xB9FD3C", VA = "0xB9FD3C")]
		private void DebugLogger(uint index, string button, string action, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0xBA034C", Offset = "0xBA034C", VA = "0xBA034C")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0xBA0414", Offset = "0xBA0414", VA = "0xBA0414")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0xBA04DC", Offset = "0xBA04DC", VA = "0xBA04DC")]
		private void DoTriggerTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0xBA05A4", Offset = "0xBA05A4", VA = "0xBA05A4")]
		private void DoTriggerTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0xBA066C", Offset = "0xBA066C", VA = "0xBA066C")]
		private void DoTriggerHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xBA0734", Offset = "0xBA0734", VA = "0xBA0734")]
		private void DoTriggerHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0xBA07FC", Offset = "0xBA07FC", VA = "0xBA07FC")]
		private void DoTriggerClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0xBA08C4", Offset = "0xBA08C4", VA = "0xBA08C4")]
		private void DoTriggerUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0xBA098C", Offset = "0xBA098C", VA = "0xBA098C")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0xBA0A54", Offset = "0xBA0A54", VA = "0xBA0A54")]
		private void DoTriggerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0xBA0B1C", Offset = "0xBA0B1C", VA = "0xBA0B1C")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xBA0BE4", Offset = "0xBA0BE4", VA = "0xBA0BE4")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0xBA0CAC", Offset = "0xBA0CAC", VA = "0xBA0CAC")]
		private void DoGripTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xBA0D74", Offset = "0xBA0D74", VA = "0xBA0D74")]
		private void DoGripTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xBA0E3C", Offset = "0xBA0E3C", VA = "0xBA0E3C")]
		private void DoGripHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xBA0F04", Offset = "0xBA0F04", VA = "0xBA0F04")]
		private void DoGripHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xBA0FCC", Offset = "0xBA0FCC", VA = "0xBA0FCC")]
		private void DoGripClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xBA1094", Offset = "0xBA1094", VA = "0xBA1094")]
		private void DoGripUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xBA115C", Offset = "0xBA115C", VA = "0xBA115C")]
		private void DoGripAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xBA1224", Offset = "0xBA1224", VA = "0xBA1224")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xBA12EC", Offset = "0xBA12EC", VA = "0xBA12EC")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xBA13B4", Offset = "0xBA13B4", VA = "0xBA13B4")]
		private void DoTouchpadTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xBA147C", Offset = "0xBA147C", VA = "0xBA147C")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xBA1544", Offset = "0xBA1544", VA = "0xBA1544")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xBA160C", Offset = "0xBA160C", VA = "0xBA160C")]
		private void DoTouchpadTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xBA16D4", Offset = "0xBA16D4", VA = "0xBA16D4")]
		private void DoTouchpadTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0xBA179C", Offset = "0xBA179C", VA = "0xBA179C")]
		private void DoTouchpadTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xBA1864", Offset = "0xBA1864", VA = "0xBA1864")]
		private void DoTouchpadTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xBA192C", Offset = "0xBA192C", VA = "0xBA192C")]
		private void DoTouchpadTwoAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xBA19F4", Offset = "0xBA19F4", VA = "0xBA19F4")]
		private void DoTouchpadSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xBA1ABC", Offset = "0xBA1ABC", VA = "0xBA1ABC")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xBA1B84", Offset = "0xBA1B84", VA = "0xBA1B84")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xBA1C4C", Offset = "0xBA1C4C", VA = "0xBA1C4C")]
		private void DoButtonOneTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xBA1D14", Offset = "0xBA1D14", VA = "0xBA1D14")]
		private void DoButtonOneTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xBA1DDC", Offset = "0xBA1DDC", VA = "0xBA1DDC")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xBA1EA4", Offset = "0xBA1EA4", VA = "0xBA1EA4")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0xBA1F6C", Offset = "0xBA1F6C", VA = "0xBA1F6C")]
		private void DoButtonTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xBA2034", Offset = "0xBA2034", VA = "0xBA2034")]
		private void DoButtonTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xBA20FC", Offset = "0xBA20FC", VA = "0xBA20FC")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xBA21C4", Offset = "0xBA21C4", VA = "0xBA21C4")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xBA228C", Offset = "0xBA228C", VA = "0xBA228C")]
		private void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xBA2348", Offset = "0xBA2348", VA = "0xBA2348")]
		private void DoControllerDisabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0xBA2404", Offset = "0xBA2404", VA = "0xBA2404")]
		private void DoControllerIndexChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0xBA24C0", Offset = "0xBA24C0", VA = "0xBA24C0")]
		private void DoMiddleFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0xBA2588", Offset = "0xBA2588", VA = "0xBA2588")]
		private void DoRingFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xBA2650", Offset = "0xBA2650", VA = "0xBA2650")]
		private void DoPinkyFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xBA2718", Offset = "0xBA2718", VA = "0xBA2718")]
		public VRTKExample_ControllerEventsDelegateListeners()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	public class VRTKExample_PointerObjectHighlighterActivator : MonoBehaviour
	{
		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_DestinationMarker pointer;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color hoverColor;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color selectColor;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool logEnterEvent;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool logHoverEvent;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool logExitEvent;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public bool logSetEvent;

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xBA2734", Offset = "0xBA2734", VA = "0xBA2734", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0xBA2AB0", Offset = "0xBA2AB0", VA = "0xBA2AB0", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xBA2C44", Offset = "0xBA2C44", VA = "0xBA2C44", Slot = "6")]
		protected virtual void DestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0xBA2D4C", Offset = "0xBA2D4C", VA = "0xBA2D4C")]
		private void DestinationMarkerHover(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0xBA2E38", Offset = "0xBA2E38", VA = "0xBA2E38", Slot = "7")]
		protected virtual void DestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0xBA2F48", Offset = "0xBA2F48", VA = "0xBA2F48", Slot = "8")]
		protected virtual void DestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0xBA3050", Offset = "0xBA3050", VA = "0xBA3050", Slot = "9")]
		protected virtual void ToggleHighlight(Transform target, Color color)
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0xBA322C", Offset = "0xBA322C", VA = "0xBA322C", Slot = "10")]
		protected virtual void DebugLogger(uint index, string action, Transform target, RaycastHit raycastHit, float distance, Vector3 tipPosition)
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0xBA3788", Offset = "0xBA3788", VA = "0xBA3788")]
		public VRTKExample_PointerObjectHighlighterActivator()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public abstract class VRTKExample_BezierPointerChanger : VRTKExample_OptionTile
	{
		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_BezierPointerRenderer leftRenderer;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_BezierPointerRenderer rightRenderer;

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0xBA37B4", Offset = "0xBA37B4", VA = "0xBA37B4", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6001C88")]
		protected abstract void StyleRenderer(VRTK_BezierPointerRenderer renderer);

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xBA37E4", Offset = "0xBA37E4", VA = "0xBA37E4", Slot = "8")]
		protected virtual void ResetRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0xBA38EC", Offset = "0xBA38EC", VA = "0xBA38EC")]
		protected VRTKExample_BezierPointerChanger()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class VRTKExample_BezierPointerCustomStyles : VRTKExample_BezierPointerChanger
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color validLocationColor;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color invalidLocationColor;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject tracerPrefab;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject cursorPrefab;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject validLocationPrefab;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject invalidLocationPrefab;

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0xBA391C", Offset = "0xBA391C", VA = "0xBA391C", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xBA3A44", Offset = "0xBA3A44", VA = "0xBA3A44")]
		public VRTKExample_BezierPointerCustomStyles()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class VRTKExample_BezierPointerDefaults : VRTKExample_BezierPointerChanger
	{
		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xBA3A70", Offset = "0xBA3A70", VA = "0xBA3A70", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0xBA3A7C", Offset = "0xBA3A7C", VA = "0xBA3A7C")]
		public VRTKExample_BezierPointerDefaults()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	public class VRTKExample_BezierPointerLineRenderer : VRTKExample_BezierPointerChanger
	{
		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject lineRendererPrefab;

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xBA3A94", Offset = "0xBA3A94", VA = "0xBA3A94", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xBA3B74", Offset = "0xBA3B74", VA = "0xBA3B74")]
		public VRTKExample_BezierPointerLineRenderer()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public class ControllableReactor : MonoBehaviour
	{
		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text displayText;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string outputOnMax;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string outputOnMin;

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xBA3B8C", Offset = "0xBA3B8C", VA = "0xBA3B8C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xBA3D00", Offset = "0xBA3D00", VA = "0xBA3D00", Slot = "5")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xBA3DC8", Offset = "0xBA3DC8", VA = "0xBA3DC8", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xBA3E58", Offset = "0xBA3E58", VA = "0xBA3E58", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xBA3EE8", Offset = "0xBA3EE8", VA = "0xBA3EE8")]
		public ControllableReactor()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	public class SnapDropZoneToggle : MonoBehaviour
	{
		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_SnapDropZone toggleZoneA;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_SnapDropZone toggleZoneB;

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xBA3F6C", Offset = "0xBA3F6C", VA = "0xBA3F6C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xBA4194", Offset = "0xBA4194", VA = "0xBA4194", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xBA43BC", Offset = "0xBA43BC", VA = "0xBA43BC", Slot = "6")]
		protected virtual void ToggleZoneA(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xBA446C", Offset = "0xBA446C", VA = "0xBA446C", Slot = "7")]
		protected virtual void UntoggleZoneA(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xBA451C", Offset = "0xBA451C", VA = "0xBA451C", Slot = "8")]
		protected virtual void ToggleZoneB(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xBA45CC", Offset = "0xBA45CC", VA = "0xBA45CC", Slot = "9")]
		protected virtual void UntoggleZoneB(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xBA467C", Offset = "0xBA467C", VA = "0xBA467C")]
		public SnapDropZoneToggle()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public class ToggleCustomHands : MonoBehaviour
	{
		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents leftController;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents rightController;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftHandAvatar;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightHandAvatar;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool state;

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xBA4684", Offset = "0xBA4684", VA = "0xBA4684", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xBA47BC", Offset = "0xBA47BC", VA = "0xBA47BC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0xBA48F0", Offset = "0xBA48F0", VA = "0xBA48F0", Slot = "6")]
		protected virtual void ToggleHands(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0xBA4908", Offset = "0xBA4908", VA = "0xBA4908", Slot = "7")]
		protected virtual void ToggleVisibility()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0xBA4940", Offset = "0xBA4940", VA = "0xBA4940", Slot = "8")]
		protected virtual void ToggleAvatarVisibility()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0xBA4A04", Offset = "0xBA4A04", VA = "0xBA4A04", Slot = "9")]
		protected virtual void ToggleSDKVisibility()
		{
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0xBA4C90", Offset = "0xBA4C90", VA = "0xBA4C90", Slot = "10")]
		protected virtual void ToggleControllerRenderer(GameObject controller, string findPath = "")
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0xBA4DC0", Offset = "0xBA4DC0", VA = "0xBA4DC0", Slot = "11")]
		protected virtual void ToggleScriptAlias()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0xBA4E5C", Offset = "0xBA4E5C", VA = "0xBA4E5C", Slot = "12")]
		protected virtual void CycleScriptAlias(GameObject controller, GameObject avatar)
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xBA5090", Offset = "0xBA5090", VA = "0xBA5090")]
		public ToggleCustomHands()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public class TogglePointerInteraction : MonoBehaviour
	{
		[Token(Token = "0x20003F9")]
		public enum OptionType
		{
			[Token(Token = "0x400176B")]
			InteractWithObjects,
			[Token(Token = "0x400176C")]
			GrabToPointerTip
		}

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OptionType optionType;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_Pointer[] pointers;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_BaseControllable controllable;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text displayText;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string maxText;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string minText;

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0xBA5098", Offset = "0xBA5098", VA = "0xBA5098", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0xBA5208", Offset = "0xBA5208", VA = "0xBA5208", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0xBA5314", Offset = "0xBA5314", VA = "0xBA5314", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xBA5328", Offset = "0xBA5328", VA = "0xBA5328", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xBA533C", Offset = "0xBA533C", VA = "0xBA533C", Slot = "8")]
		protected virtual void SetOption(bool value, string text)
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xBA547C", Offset = "0xBA547C", VA = "0xBA547C")]
		public TogglePointerInteraction()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class ClimbableHandLift : MonoBehaviour
	{
		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject interactableObject;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform handleTop;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ropeTop;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ropeBottom;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject rope;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject handle;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool isMoving;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		protected bool isMovingUp;

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xBA54E0", Offset = "0xBA54E0", VA = "0xBA54E0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xBA5614", Offset = "0xBA5614", VA = "0xBA5614", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xBA56D8", Offset = "0xBA56D8", VA = "0xBA56D8", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xBA5978", Offset = "0xBA5978", VA = "0xBA5978", Slot = "7")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xBA5984", Offset = "0xBA5984", VA = "0xBA5984")]
		public ClimbableHandLift()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class ElevatorControl : MonoBehaviour
	{
		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject platform;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxHeight;

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xBA59A0", Offset = "0xBA59A0", VA = "0xBA59A0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xBA5A64", Offset = "0xBA5A64", VA = "0xBA5A64", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xBA5B28", Offset = "0xBA5B28", VA = "0xBA5B28", Slot = "6")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xBA5C20", Offset = "0xBA5C20", VA = "0xBA5C20")]
		public ElevatorControl()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class IgnoreTeleportDummy : MonoBehaviour
	{
		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xBA5C28", Offset = "0xBA5C28", VA = "0xBA5C28")]
		public IgnoreTeleportDummy()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public class OptionsMenu : MonoBehaviour
	{
		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents leftController;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents rightController;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject controlObject;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool state;

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xBA5C30", Offset = "0xBA5C30", VA = "0xBA5C30", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xBA5C74", Offset = "0xBA5C74", VA = "0xBA5C74", Slot = "5")]
		protected virtual void RegisterEvents(VRTK_ControllerEvents events)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xBA5D44", Offset = "0xBA5D44", VA = "0xBA5D44", Slot = "6")]
		protected virtual void ButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xBA5D78", Offset = "0xBA5D78", VA = "0xBA5D78", Slot = "7")]
		protected virtual void Move()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xBA601C", Offset = "0xBA601C", VA = "0xBA601C", Slot = "8")]
		protected virtual void SetObjectVisibility()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xBA6040", Offset = "0xBA6040", VA = "0xBA6040")]
		public OptionsMenu()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	public class ToggleGameObject : MonoBehaviour
	{
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text displayText;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text descriptionText;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject toggleObject;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string onText;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string offText;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string description;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject io;

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xBA6048", Offset = "0xBA6048", VA = "0xBA6048", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xBA6170", Offset = "0xBA6170", VA = "0xBA6170", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xBA62F4", Offset = "0xBA62F4", VA = "0xBA62F4", Slot = "6")]
		protected virtual void SetupIOListeners()
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0xBA63F0", Offset = "0xBA63F0", VA = "0xBA63F0", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xBA6420", Offset = "0xBA6420", VA = "0xBA6420", Slot = "8")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xBA6450", Offset = "0xBA6450", VA = "0xBA6450", Slot = "9")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xBA64E0", Offset = "0xBA64E0", VA = "0xBA64E0", Slot = "10")]
		protected virtual void ToggleObject(bool state)
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xBA6578", Offset = "0xBA6578", VA = "0xBA6578", Slot = "11")]
		protected virtual void UpdateText(string text)
		{
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0xBA6618", Offset = "0xBA6618", VA = "0xBA6618")]
		public ToggleGameObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FF")]
	public class ToggleGameObjectSliderOptions
	{
		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject option;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0xBA66C0", Offset = "0xBA66C0", VA = "0xBA66C0")]
		public ToggleGameObjectSliderOptions()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class ToggleGameObjectSlider : MonoBehaviour
	{
		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ArtificialSlider slider;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text descriptionText;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToggleGameObjectSliderOptions[] options;

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0xBA66C8", Offset = "0xBA66C8", VA = "0xBA66C8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0xBA6794", Offset = "0xBA6794", VA = "0xBA6794", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0xBA6858", Offset = "0xBA6858", VA = "0xBA6858", Slot = "6")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0xBA6944", Offset = "0xBA6944", VA = "0xBA6944", Slot = "7")]
		protected virtual void ToggleOption(int index)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0xBA6A0C", Offset = "0xBA6A0C", VA = "0xBA6A0C")]
		public ToggleGameObjectSlider()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class PanelMenuSaucerGrid : MonoBehaviour
	{
		[Token(Token = "0x2000402")]
		protected enum Direction
		{
			[Token(Token = "0x4001793")]
			None,
			[Token(Token = "0x4001794")]
			Up,
			[Token(Token = "0x4001795")]
			Down,
			[Token(Token = "0x4001796")]
			Left,
			[Token(Token = "0x4001797")]
			Right
		}

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridLayoutGroup gridLayoutGroup;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer changeObject;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_PanelMenuItemController panelMenuController;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color[] colours;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int currentIndex;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected readonly Color colorDefault;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected readonly Color colorSelected;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected readonly float colorAlpha;

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0xBA6A14", Offset = "0xBA6A14", VA = "0xBA6A14", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0xBA6BD8", Offset = "0xBA6BD8", VA = "0xBA6BD8", Slot = "5")]
		protected virtual void PanelMenuItemTriggerPressed(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0xBA6CA8", Offset = "0xBA6CA8", VA = "0xBA6CA8", Slot = "6")]
		protected virtual void PanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xBA6CB8", Offset = "0xBA6CB8", VA = "0xBA6CB8", Slot = "7")]
		protected virtual void PanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0xBA6CC8", Offset = "0xBA6CC8", VA = "0xBA6CC8", Slot = "8")]
		protected virtual void PanelMenuItemSwipeBottom(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0xBA6CD8", Offset = "0xBA6CD8", VA = "0xBA6CD8", Slot = "9")]
		protected virtual void PanelMenuItemSwipeTop(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0xBA6CE8", Offset = "0xBA6CE8", VA = "0xBA6CE8", Slot = "10")]
		protected virtual void SetGridLayoutItemSelectedState(int index)
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0xBA7148", Offset = "0xBA7148", VA = "0xBA7148", Slot = "11")]
		protected virtual bool MoveSelectGridLayoutItem(Direction direction)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0xBA7198", Offset = "0xBA7198", VA = "0xBA7198", Slot = "12")]
		protected virtual int FindNextItemBasedOnMoveDirection(Direction direction)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0xBA7290", Offset = "0xBA7290", VA = "0xBA7290")]
		public PanelMenuSaucerGrid()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class PanelMenuSphereSlider : MonoBehaviour
	{
		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer changeObject;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_PanelMenuItemController panelMenuController;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color[] colours;

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0xBA7310", Offset = "0xBA7310", VA = "0xBA7310", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0xBA741C", Offset = "0xBA741C", VA = "0xBA741C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xBA7528", Offset = "0xBA7528", VA = "0xBA7528", Slot = "6")]
		protected virtual void PanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xBA75E4", Offset = "0xBA75E4", VA = "0xBA75E4", Slot = "7")]
		protected virtual void PanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xBA76A0", Offset = "0xBA76A0", VA = "0xBA76A0", Slot = "8")]
		protected virtual void SetColor()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xBA77C4", Offset = "0xBA77C4", VA = "0xBA77C4")]
		public PanelMenuSphereSlider()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public class BeamRotator : MonoBehaviour
	{
		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Amount of degrees to rotate around the rotation axis per second.")]
		public float degreesPerSecond;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The rotation axis to rotate the object around.")]
		public Vector3 rotationAxis;

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xBA7828", Offset = "0xBA7828", VA = "0xBA7828", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0xBA7910", Offset = "0xBA7910", VA = "0xBA7910", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0xBA796C", Offset = "0xBA796C", VA = "0xBA796C")]
		public BeamRotator()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class FireExtinguisher_Base : VRTK_InteractableObject
	{
		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Fire Extinguisher Base Settings")]
		public Animation leverAnimation;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public FireExtinguisher_Sprayer sprayer;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0xBA79D4", Offset = "0xBA79D4", VA = "0xBA79D4", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0xBA7A48", Offset = "0xBA7A48", VA = "0xBA7A48", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xBA7A70", Offset = "0xBA7A70", VA = "0xBA7A70", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xBA7BA4", Offset = "0xBA7BA4", VA = "0xBA7BA4", Slot = "106")]
		protected virtual void Spray(float power)
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xBA7C18", Offset = "0xBA7C18", VA = "0xBA7C18", Slot = "107")]
		protected virtual void SetHandleFrame(float frame)
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0xBA7CC0", Offset = "0xBA7CC0", VA = "0xBA7CC0")]
		public FireExtinguisher_Base()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public class FireExtinguisher_Sprayer : VRTK_InteractableObject
	{
		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Fire Extinguisher Sprayer Settings")]
		public FireExtinguisher_Base baseCan;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float breakDistance;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float maxSprayPower;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected GameObject waterSpray;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected ParticleSystem particles;

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0xBA7BE0", Offset = "0xBA7BE0", VA = "0xBA7BE0")]
		public void Spray(float power)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0xBA7CC8", Offset = "0xBA7CC8", VA = "0xBA7CC8", Slot = "64")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0xBA7D90", Offset = "0xBA7D90", VA = "0xBA7D90", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0xBA7EA8", Offset = "0xBA7EA8", VA = "0xBA7EA8", Slot = "106")]
		protected virtual void PlayParticles(float power)
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0xBA7F2C", Offset = "0xBA7F2C", VA = "0xBA7F2C")]
		public FireExtinguisher_Sprayer()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class GunShoot : MonoBehaviour
	{
		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectile;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform projectileSpawnPoint;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float projectileSpeed;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float projectileLife;

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0xBA7F40", Offset = "0xBA7F40", VA = "0xBA7F40", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0xBA8074", Offset = "0xBA8074", VA = "0xBA8074", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0xBA8138", Offset = "0xBA8138", VA = "0xBA8138", Slot = "6")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xBA8144", Offset = "0xBA8144", VA = "0xBA8144", Slot = "7")]
		protected virtual void FireProjectile()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xBA8340", Offset = "0xBA8340", VA = "0xBA8340")]
		public GunShoot()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class InteractableLamp : MonoBehaviour
	{
		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody[] lampRigidbodies;

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xBA8354", Offset = "0xBA8354", VA = "0xBA8354", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xBA84FC", Offset = "0xBA84FC", VA = "0xBA84FC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xBA8608", Offset = "0xBA8608", VA = "0xBA8608", Slot = "6")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xBA8618", Offset = "0xBA8618", VA = "0xBA8618", Slot = "7")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xBA8628", Offset = "0xBA8628", VA = "0xBA8628", Slot = "8")]
		protected virtual void ToggleKinematics(bool state)
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xBA8690", Offset = "0xBA8690", VA = "0xBA8690")]
		public InteractableLamp()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class ScaleOnUse : MonoBehaviour
	{
		[Token(Token = "0x200040A")]
		[CompilerGenerated]
		private sealed class <ScaleRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ScaleOnUse <>4__this;

			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 originalScale;

			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetScale;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <progress>5__2;

			[Token(Token = "0x170001CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D00")]
				[Address(RVA = "0xBA8E4C", Offset = "0xBA8E4C", VA = "0xBA8E4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D02")]
				[Address(RVA = "0xBA8E94", Offset = "0xBA8E94", VA = "0xBA8E94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CFD")]
			[Address(RVA = "0xBA8B5C", Offset = "0xBA8B5C", VA = "0xBA8B5C")]
			[DebuggerHidden]
			public <ScaleRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001CFE")]
			[Address(RVA = "0xBA8CDC", Offset = "0xBA8CDC", VA = "0xBA8CDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CFF")]
			[Address(RVA = "0xBA8CE0", Offset = "0xBA8CE0", VA = "0xBA8CE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D01")]
			[Address(RVA = "0xBA8E54", Offset = "0xBA8E54", VA = "0xBA8E54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject objectToScale;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 unuseScale;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 useScale;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float scaleSpeed;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 scaleTarget;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Coroutine scaleRoutine;

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xBA86F4", Offset = "0xBA86F4", VA = "0xBA86F4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xBA886C", Offset = "0xBA886C", VA = "0xBA886C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xBA8988", Offset = "0xBA8988", VA = "0xBA8988", Slot = "6")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xBA89F8", Offset = "0xBA89F8", VA = "0xBA89F8", Slot = "7")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xBA8A68", Offset = "0xBA8A68", VA = "0xBA8A68", Slot = "8")]
		protected virtual void CancelScale()
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xBA8AAC", Offset = "0xBA8AAC", VA = "0xBA8AAC", Slot = "9")]
		[IteratorStateMachine(typeof(<ScaleRoutine>d__12))]
		protected virtual IEnumerator ScaleRoutine(Vector3 originalScale, Vector3 targetScale)
		{
			return null;
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xBA8B84", Offset = "0xBA8B84", VA = "0xBA8B84", Slot = "10")]
		protected virtual void ForceScale(Vector3 targetScale)
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xBA8C44", Offset = "0xBA8C44", VA = "0xBA8C44")]
		public ScaleOnUse()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class InteractableWhirlyGig : MonoBehaviour
	{
		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spinSpeed;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Transform spinner;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool spinning;

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xBA8E9C", Offset = "0xBA8E9C", VA = "0xBA8E9C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xBA9040", Offset = "0xBA9040", VA = "0xBA9040", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xBA914C", Offset = "0xBA914C", VA = "0xBA914C", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xBA91B4", Offset = "0xBA91B4", VA = "0xBA91B4", Slot = "7")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xBA91C0", Offset = "0xBA91C0", VA = "0xBA91C0", Slot = "8")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xBA91C8", Offset = "0xBA91C8", VA = "0xBA91C8")]
		public InteractableWhirlyGig()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public abstract class VRTKExample_OptionTile : MonoBehaviour
	{
		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image backgroundImage;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color highlightColor;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color originalColor;

		[Token(Token = "0x6001D09")]
		public abstract void Activate();

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xBA91D8", Offset = "0xBA91D8", VA = "0xBA91D8", Slot = "5")]
		public virtual void Highlight()
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xBA928C", Offset = "0xBA928C", VA = "0xBA928C", Slot = "6")]
		public virtual void Unhighlight()
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xBA3904", Offset = "0xBA3904", VA = "0xBA3904")]
		protected VRTKExample_OptionTile()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class VRTKExample_OptionTilePointerSelector : MonoBehaviour
	{
		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_DestinationMarker pointer;

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xBA9320", Offset = "0xBA9320", VA = "0xBA9320", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xBA9650", Offset = "0xBA9650", VA = "0xBA9650", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xBA9798", Offset = "0xBA9798", VA = "0xBA9798", Slot = "6")]
		protected virtual void DestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xBA9870", Offset = "0xBA9870", VA = "0xBA9870", Slot = "7")]
		protected virtual void DestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xBA9948", Offset = "0xBA9948", VA = "0xBA9948", Slot = "8")]
		protected virtual void DestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xBA9A20", Offset = "0xBA9A20", VA = "0xBA9A20")]
		public VRTKExample_OptionTilePointerSelector()
		{
		}
	}
	[Token(Token = "0x200040E")]
	public class AutoRotation : MonoBehaviour
	{
		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Angular velocity in degrees per seconds")]
		public float degPerSec;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Rotation axis")]
		public Vector3 rotAxis;

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xBA9A28", Offset = "0xBA9A28", VA = "0xBA9A28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xBA9B10", Offset = "0xBA9B10", VA = "0xBA9B10")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xBA9B6C", Offset = "0xBA9B6C", VA = "0xBA9B6C")]
		public AutoRotation()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class Breakable_Cube : MonoBehaviour
	{
		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float breakForce;

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xBA9BD4", Offset = "0xBA9BD4", VA = "0xBA9BD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xBA9C30", Offset = "0xBA9C30", VA = "0xBA9C30")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xBA9C58", Offset = "0xBA9C58", VA = "0xBA9C58")]
		private float GetCollisionForce(Collision collision)
		{
			return default(float);
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xBA9D90", Offset = "0xBA9D90", VA = "0xBA9D90")]
		private void ExplodeCube(float force)
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xBA9ECC", Offset = "0xBA9ECC", VA = "0xBA9ECC")]
		private void ExplodeFace(Transform face, float force)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xBAA010", Offset = "0xBAA010", VA = "0xBAA010")]
		public Breakable_Cube()
		{
		}
	}
	[Token(Token = "0x2000410")]
	public class ButtonReactor : MonoBehaviour
	{
		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_PhysicsPusher buttonEvents;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_ArtificialPusher artbuttonEvents;

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xBAA020", Offset = "0xBAA020", VA = "0xBAA020", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xBAA1BC", Offset = "0xBAA1BC", VA = "0xBAA1BC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xBAA2F0", Offset = "0xBAA2F0", VA = "0xBAA2F0", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0xBAA3C4", Offset = "0xBAA3C4", VA = "0xBAA3C4")]
		public ButtonReactor()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public class Controller_Hand : MonoBehaviour
	{
		[Token(Token = "0x2000412")]
		public enum Hands
		{
			[Token(Token = "0x40017D0")]
			Right,
			[Token(Token = "0x40017D1")]
			Left
		}

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hands hand;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform pointerFinger;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform gripFingers;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float maxRotation;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float originalPointerRotation;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float originalGripRotation;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float targetPointerRotation;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float targetGripRotation;

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0xBAA3CC", Offset = "0xBAA3CC", VA = "0xBAA3CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0xBAA770", Offset = "0xBAA770", VA = "0xBAA770")]
		private void InversePosition(Transform givenTransform)
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xBAA80C", Offset = "0xBAA80C", VA = "0xBAA80C")]
		private void DoGrabOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xBAA818", Offset = "0xBAA818", VA = "0xBAA818")]
		private void DoGrabOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xBAA824", Offset = "0xBAA824", VA = "0xBAA824")]
		private void DoUseOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xBAA830", Offset = "0xBAA830", VA = "0xBAA830")]
		private void DoUseOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xBAA83C", Offset = "0xBAA83C", VA = "0xBAA83C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0xBAA884", Offset = "0xBAA884", VA = "0xBAA884")]
		public Controller_Hand()
		{
		}
	}
	[Token(Token = "0x2000413")]
	public class Controller_Menu : MonoBehaviour
	{
		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject menuObject;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject clonedMenuObject;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool menuInit;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool menuActive;

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xBAA894", Offset = "0xBAA894", VA = "0xBAA894")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xBAA9B0", Offset = "0xBAA9B0", VA = "0xBAA9B0")]
		private void InitMenu()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xBAAAF8", Offset = "0xBAAAF8", VA = "0xBAAAF8")]
		private void DoMenuOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0xBAAB90", Offset = "0xBAAB90", VA = "0xBAAB90")]
		private void DoMenuOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0xBAAC14", Offset = "0xBAAC14", VA = "0xBAAC14")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0xBAAD08", Offset = "0xBAAD08", VA = "0xBAAD08")]
		public Controller_Menu()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public class ControlReactor : MonoBehaviour
	{
		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh go;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_Control_UnityEvents controlEvents;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_BaseControllable controllableEvents;

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0xBAAD10", Offset = "0xBAAD10", VA = "0xBAAD10", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0xBAAE8C", Offset = "0xBAAE8C", VA = "0xBAAE8C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0xBAAE9C", Offset = "0xBAAE9C", VA = "0xBAAE9C", Slot = "6")]
		protected virtual void ManageListeners(bool state)
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0xBAB0E4", Offset = "0xBAB0E4", VA = "0xBAB0E4", Slot = "7")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0xBAB19C", Offset = "0xBAB19C", VA = "0xBAB19C", Slot = "8")]
		protected virtual void HandleChange(object sender, Control3DEventArgs e)
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xBAB254", Offset = "0xBAB254", VA = "0xBAB254", Slot = "9")]
		protected virtual void UpdateText(string valueText, string normalizedValueText)
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xBAB2EC", Offset = "0xBAB2EC", VA = "0xBAB2EC")]
		public ControlReactor()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public class ControlsMenu : MonoBehaviour
	{
		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float spawnDistance;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject menuSlate;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents.ButtonAlias toggleButton;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected bool isVisible;

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xBAB2F4", Offset = "0xBAB2F4", VA = "0xBAB2F4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xBAB304", Offset = "0xBAB304", VA = "0xBAB304", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xBAB3E8", Offset = "0xBAB3E8", VA = "0xBAB3E8", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xBAB4CC", Offset = "0xBAB4CC", VA = "0xBAB4CC", Slot = "7")]
		protected virtual void ToggleButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xBAB6D4", Offset = "0xBAB6D4", VA = "0xBAB6D4", Slot = "8")]
		protected virtual void ToggleVisibility()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xBAB75C", Offset = "0xBAB75C", VA = "0xBAB75C")]
		public ControlsMenu()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public class ExcludeTeleport : MonoBehaviour
	{
		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xBAB778", Offset = "0xBAB778", VA = "0xBAB778")]
		public ExcludeTeleport()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class Gun : VRTK_InteractableObject
	{
		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private GameObject bullet;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float bulletSpeed;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float bulletLife;

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xBAB780", Offset = "0xBAB780", VA = "0xBAB780", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xBAB930", Offset = "0xBAB930", VA = "0xBAB930")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xBAB79C", Offset = "0xBAB79C", VA = "0xBAB79C")]
		private void FireBullet()
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0xBAB9BC", Offset = "0xBAB9BC", VA = "0xBAB9BC")]
		public Gun()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class HandLift : VRTK_InteractableObject
	{
		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Header("Hand Lift Options", order = 4)]
		public float speed;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform handleTop;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform ropeTop;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform ropeBottom;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject rope;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GameObject handle;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool isMoving;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
		private bool isMovingUp;

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xBAB9D0", Offset = "0xBAB9D0", VA = "0xBAB9D0", Slot = "10")]
		public override void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xBAB9F0", Offset = "0xBAB9F0", VA = "0xBAB9F0", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xBABC98", Offset = "0xBABC98", VA = "0xBABC98")]
		public HandLift()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class Lamp : VRTK_InteractableObject
	{
		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xBABCB4", Offset = "0xBABCB4", VA = "0xBABCB4", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab grabbingObject)
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xBABD90", Offset = "0xBABD90", VA = "0xBABD90", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0xBABCD4", Offset = "0xBABCD4", VA = "0xBABCD4")]
		private void ToggleKinematics(bool state)
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xBABDB0", Offset = "0xBABDB0", VA = "0xBABDB0")]
		public Lamp()
		{
		}
	}
	[Token(Token = "0x200041A")]
	public class LightSaber : VRTK_InteractableObject
	{
		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private bool beamActive;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector2 beamLimits;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float currentBeamSize;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float beamExtendSpeed;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject blade;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Color activeColor;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Color targetColor;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Color[] bladePhaseColors;

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0xBABDB8", Offset = "0xBABDB8", VA = "0xBABDB8", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xBABE9C", Offset = "0xBABE9C", VA = "0xBABE9C", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xBABEC0", Offset = "0xBABEC0", VA = "0xBABEC0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xBABF98", Offset = "0xBABF98", VA = "0xBABF98", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xBABF48", Offset = "0xBABF48", VA = "0xBABF48")]
		private void SetBeamSize()
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xBAC018", Offset = "0xBAC018", VA = "0xBAC018")]
		private void PulseBeam()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xBAC1B8", Offset = "0xBAC1B8", VA = "0xBAC1B8")]
		public LightSaber()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class Menu_Color_Changer : VRTK_InteractableObject
	{
		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Color newMenuColor;

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xBAC1CC", Offset = "0xBAC1CC", VA = "0xBAC1CC", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xBAC400", Offset = "0xBAC400", VA = "0xBAC400", Slot = "65")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xBAC33C", Offset = "0xBAC33C", VA = "0xBAC33C")]
		private void ResetMenuItems()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xBAC48C", Offset = "0xBAC48C", VA = "0xBAC48C")]
		public Menu_Color_Changer()
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class Menu_Container_Object_Colors : VRTK_InteractableObject
	{
		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xBAC26C", Offset = "0xBAC26C", VA = "0xBAC26C")]
		public void SetSelectedColor(Color color)
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xBAC554", Offset = "0xBAC554", VA = "0xBAC554")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xBAC588", Offset = "0xBAC588", VA = "0xBAC588")]
		public Menu_Container_Object_Colors()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class Menu_Object_Spawner : VRTK_InteractableObject
	{
		[Token(Token = "0x200041E")]
		public enum PrimitiveTypes
		{
			[Token(Token = "0x40017F5")]
			Cube,
			[Token(Token = "0x40017F6")]
			Sphere
		}

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public PrimitiveTypes shape;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Color selectedColor;

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xBAC4A4", Offset = "0xBAC4A4", VA = "0xBAC4A4")]
		public void SetSelectedColor(Color color)
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0xBAC590", Offset = "0xBAC590", VA = "0xBAC590", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xBAC5DC", Offset = "0xBAC5DC", VA = "0xBAC5DC")]
		private void CreateShape(PrimitiveType shape, Color color)
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xBAC704", Offset = "0xBAC704", VA = "0xBAC704")]
		private void ResetMenuItems()
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xBAC7C8", Offset = "0xBAC7C8", VA = "0xBAC7C8")]
		public Menu_Object_Spawner()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public class ModelVillage_TeleportLocation : VRTK_DestinationMarker
	{
		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform destination;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool lastUsePressedState;

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0xBAC7D0", Offset = "0xBAC7D0", VA = "0xBAC7D0")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0xBACAB0", Offset = "0xBACAB0", VA = "0xBACAB0")]
		public ModelVillage_TeleportLocation()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class Openable_Door : VRTK_InteractableObject
	{
		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool flipped;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool rotated;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float sideFlip;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float side;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float smooth;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float doorOpenAngle;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool open;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private Vector3 defaultRotation;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 openRotation;

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0xBACAB8", Offset = "0xBACAB8", VA = "0xBACAB8", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xBACC04", Offset = "0xBACC04", VA = "0xBACC04")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xBACC78", Offset = "0xBACC78", VA = "0xBACC78", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xBACBD0", Offset = "0xBACBD0", VA = "0xBACBD0")]
		private void SetRotation()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xBACB40", Offset = "0xBACB40", VA = "0xBACB40")]
		private void SetDoorRotation(Vector3 interacterPosition)
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xBACF00", Offset = "0xBACF00", VA = "0xBACF00")]
		public Openable_Door()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public class PusherStickyToggle : MonoBehaviour
	{
		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable buttonOne;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_BaseControllable buttonTwo;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color onColor;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color offColor;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool buttonOnePressed;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		protected bool buttonTwoPressed;

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xBACF14", Offset = "0xBACF14", VA = "0xBACF14", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xBAD07C", Offset = "0xBAD07C", VA = "0xBAD07C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xBAD1B4", Offset = "0xBAD1B4", VA = "0xBAD1B4", Slot = "6")]
		protected virtual void ButtonOne_MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xBAD230", Offset = "0xBAD230", VA = "0xBAD230", Slot = "7")]
		protected virtual void ButtonTwo_MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xBAD2AC", Offset = "0xBAD2AC", VA = "0xBAD2AC", Slot = "8")]
		protected virtual void ButtonOne_MaxLimitExited(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xBAD300", Offset = "0xBAD300", VA = "0xBAD300", Slot = "9")]
		protected virtual void ButtonTwo_MaxLimitExited(object sender, ControllableEventArgs e)
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xBAD354", Offset = "0xBAD354", VA = "0xBAD354", Slot = "10")]
		protected virtual void ChangeColor(GameObject obj, Color col)
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0xBAD3EC", Offset = "0xBAD3EC", VA = "0xBAD3EC", Slot = "11")]
		protected virtual void SetStayPressed(VRTK_BaseControllable obj, bool state)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xBAD5A4", Offset = "0xBAD5A4", VA = "0xBAD5A4", Slot = "12")]
		protected virtual void SetPositionTarget(VRTK_BaseControllable obj, float newTarget)
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0xBAD764", Offset = "0xBAD764", VA = "0xBAD764")]
		public PusherStickyToggle()
		{
		}
	}
	[Token(Token = "0x2000422")]
	public class RC_Car : MonoBehaviour
	{
		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAcceleration;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float jumpPower;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float acceleration;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float movementSpeed;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float rotationSpeed;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isJumping;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 touchAxis;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float triggerAxis;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody rb;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0xBAD784", Offset = "0xBAD784", VA = "0xBAD784")]
		public void SetTouchAxis(Vector2 data)
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0xBAD78C", Offset = "0xBAD78C", VA = "0xBAD78C")]
		public void SetTriggerAxis(float data)
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0xBAD794", Offset = "0xBAD794", VA = "0xBAD794")]
		public void ResetCar()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0xBAD7E0", Offset = "0xBAD7E0", VA = "0xBAD7E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0xBAD880", Offset = "0xBAD880", VA = "0xBAD880")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0xBAD8B8", Offset = "0xBAD8B8", VA = "0xBAD8B8")]
		private void CalculateSpeed()
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0xBADB14", Offset = "0xBADB14", VA = "0xBADB14")]
		private void Decelerate()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0xBAD8F4", Offset = "0xBAD8F4", VA = "0xBAD8F4")]
		private void Move()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0xBAD984", Offset = "0xBAD984", VA = "0xBAD984")]
		private void Turn()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0xBADA78", Offset = "0xBADA78", VA = "0xBADA78")]
		private void Jump()
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0xBADB70", Offset = "0xBADB70", VA = "0xBADB70")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xBADB78", Offset = "0xBADB78", VA = "0xBADB78")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xBADB84", Offset = "0xBADB84", VA = "0xBADB84")]
		public RC_Car()
		{
		}
	}
	[Token(Token = "0x2000423")]
	public class RC_Car_Controller : MonoBehaviour
	{
		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject rcCar;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RC_Car rcCarScript;

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xBADBAC", Offset = "0xBADBAC", VA = "0xBADBAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xBADE08", Offset = "0xBADE08", VA = "0xBADE08")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xBADE28", Offset = "0xBADE28", VA = "0xBADE28")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xBADE48", Offset = "0xBADE48", VA = "0xBADE48")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0xBADEA0", Offset = "0xBADEA0", VA = "0xBADEA0")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0xBADEBC", Offset = "0xBADEBC", VA = "0xBADEBC")]
		private void DoCarReset(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0xBADED4", Offset = "0xBADED4", VA = "0xBADED4")]
		public RC_Car_Controller()
		{
		}
	}
	[Token(Token = "0x2000424")]
	public class RealGun : VRTK_InteractableObject
	{
		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float bulletSpeed;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float bulletLife;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private GameObject bullet;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject trigger;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private RealGun_Slide slide;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private RealGun_SafetySwitch safetySwitch;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Rigidbody slideRigidbody;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Collider slideCollider;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Rigidbody safetySwitchRigidbody;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Collider safetySwitchCollider;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float minTriggerRotation;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float maxTriggerRotation;

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0xBADEDC", Offset = "0xBADEDC", VA = "0xBADEDC")]
		private void ToggleCollision(Rigidbody objRB, Collider objCol, bool state)
		{
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0xBADF20", Offset = "0xBADF20", VA = "0xBADF20")]
		private void ToggleSlide(bool state)
		{
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0xBADF8C", Offset = "0xBADF8C", VA = "0xBADF8C")]
		private void ToggleSafetySwitch(bool state)
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0xBADFD0", Offset = "0xBADFD0", VA = "0xBADFD0", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab currentGrabbingObject)
		{
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0xBAE138", Offset = "0xBAE138", VA = "0xBAE138", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0xBAE198", Offset = "0xBAE198", VA = "0xBAE198", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0xBAE450", Offset = "0xBAE450", VA = "0xBAE450", Slot = "64")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0xBAE69C", Offset = "0xBAE69C", VA = "0xBAE69C", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0xBAE2BC", Offset = "0xBAE2BC", VA = "0xBAE2BC")]
		private void FireBullet()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xBAE788", Offset = "0xBAE788", VA = "0xBAE788")]
		public RealGun()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class RealGun_SafetySwitch : VRTK_InteractableObject
	{
		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool safetyOff;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float offAngle;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Vector3 fixedPosition;

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0xBAE7AC", Offset = "0xBAE7AC", VA = "0xBAE7AC", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0xBAE7D0", Offset = "0xBAE7D0", VA = "0xBAE7D0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0xBAE804", Offset = "0xBAE804", VA = "0xBAE804", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0xBAE884", Offset = "0xBAE884", VA = "0xBAE884")]
		private void SetSafety(bool safety)
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0xBAE890", Offset = "0xBAE890", VA = "0xBAE890")]
		public RealGun_SafetySwitch()
		{
		}
	}
	[Token(Token = "0x2000426")]
	public class RealGun_Slide : VRTK_InteractableObject
	{
		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float restPosition;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float fireTimer;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float fireDistance;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float boltSpeed;

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0xBAE2B0", Offset = "0xBAE2B0", VA = "0xBAE2B0")]
		public void Fire()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xBAE8A8", Offset = "0xBAE8A8", VA = "0xBAE8A8", Slot = "64")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0xBAE8E0", Offset = "0xBAE8E0", VA = "0xBAE8E0", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0xBAEB00", Offset = "0xBAEB00", VA = "0xBAEB00")]
		public RealGun_Slide()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class Remote_Beam : MonoBehaviour
	{
		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 touchAxis;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float rotationSpeed;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float currentYaw;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentPitch;

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0xBAEB18", Offset = "0xBAEB18", VA = "0xBAEB18")]
		public void SetTouchAxis(Vector2 data)
		{
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0xBAEB20", Offset = "0xBAEB20", VA = "0xBAEB20")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0xBAECC4", Offset = "0xBAECC4", VA = "0xBAECC4")]
		public Remote_Beam()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class Remote_Beam_Controller : MonoBehaviour
	{
		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject remoteBeam;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Remote_Beam remoteBeamScript;

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0xBAECD4", Offset = "0xBAECD4", VA = "0xBAECD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0xBAEE1C", Offset = "0xBAEE1C", VA = "0xBAEE1C")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0xBAEE3C", Offset = "0xBAEE3C", VA = "0xBAEE3C")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0xBAEE94", Offset = "0xBAEE94", VA = "0xBAEE94")]
		public Remote_Beam_Controller()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class RendererOffOnDash : MonoBehaviour
	{
		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool wasSwitchedOff;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<VRTK_DashTeleport> dashTeleporters;

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0xBAEE9C", Offset = "0xBAEE9C", VA = "0xBAEE9C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0xBAF2D4", Offset = "0xBAF2D4", VA = "0xBAF2D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0xBAF4E4", Offset = "0xBAF4E4", VA = "0xBAF4E4")]
		private void RendererOff(object sender, DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0xBAF698", Offset = "0xBAF698", VA = "0xBAF698")]
		private void RendererOn(object sender, DashTeleportEventArgs e)
		{
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0xBAF618", Offset = "0xBAF618", VA = "0xBAF618")]
		private void SwitchRenderer(GameObject go, bool enable)
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xBAF6DC", Offset = "0xBAF6DC", VA = "0xBAF6DC")]
		public RendererOffOnDash()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class SnapDropZoneGroup_Switcher : MonoBehaviour
	{
		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRTK_SnapDropZone cubeZone;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_SnapDropZone sphereZone;

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xBAF764", Offset = "0xBAF764", VA = "0xBAF764")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xBAFA98", Offset = "0xBAFA98", VA = "0xBAFA98")]
		private void DoCubeZoneSnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xBAFB48", Offset = "0xBAFB48", VA = "0xBAFB48")]
		private void DoCubeZoneUnsnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xBAFBF8", Offset = "0xBAFBF8", VA = "0xBAFBF8")]
		private void DoSphereZoneSnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xBAFCA8", Offset = "0xBAFCA8", VA = "0xBAFCA8")]
		private void DoSphereZoneUnsnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xBAFD58", Offset = "0xBAFD58", VA = "0xBAFD58")]
		public SnapDropZoneGroup_Switcher()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public class Sphere_Spawner : MonoBehaviour
	{
		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject spawnMe;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 position;

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xBAFD60", Offset = "0xBAFD60", VA = "0xBAFD60")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xBB00B0", Offset = "0xBB00B0", VA = "0xBB00B0")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xBB0100", Offset = "0xBB0100", VA = "0xBB0100")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xBB0160", Offset = "0xBB0160", VA = "0xBB0160")]
		private void CreateSphere()
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xBB024C", Offset = "0xBB024C", VA = "0xBB024C")]
		public Sphere_Spawner()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class Sword : VRTK_InteractableObject
	{
		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float impactMagnifier;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float collisionForce;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float maxCollisionForce;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private VRTK_ControllerReference controllerReference;

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0xBB0254", Offset = "0xBB0254", VA = "0xBB0254")]
		public float CollisionForce()
		{
			return default(float);
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0xBB025C", Offset = "0xBB025C", VA = "0xBB025C", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab grabbingObject)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0xBB02F8", Offset = "0xBB02F8", VA = "0xBB02F8", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0xBB031C", Offset = "0xBB031C", VA = "0xBB031C", Slot = "65")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xBB0358", Offset = "0xBB0358", VA = "0xBB0358")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xBB0540", Offset = "0xBB0540", VA = "0xBB0540")]
		public Sword()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class UI_Interactions : MonoBehaviour
	{
		[Token(Token = "0x200042E")]
		[CompilerGenerated]
		private sealed class <CreateCanvasOnNextFrame>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400183B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170001CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DBC")]
				[Address(RVA = "0xBB1078", Offset = "0xBB1078", VA = "0xBB1078", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DBE")]
				[Address(RVA = "0xBB10C0", Offset = "0xBB10C0", VA = "0xBB10C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DB9")]
			[Address(RVA = "0xBB0984", Offset = "0xBB0984", VA = "0xBB0984")]
			[DebuggerHidden]
			public <CreateCanvasOnNextFrame>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001DBA")]
			[Address(RVA = "0xBB09B4", Offset = "0xBB09B4", VA = "0xBB09B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0xBB09B8", Offset = "0xBB09B8", VA = "0xBB09B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0xBB1080", Offset = "0xBB1080", VA = "0xBB1080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001839")]
		private const int EXISTING_CANVAS_COUNT = 4;

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xBB0558", Offset = "0xBB0558", VA = "0xBB0558")]
		public void Button_Red()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xBB05C0", Offset = "0xBB05C0", VA = "0xBB05C0")]
		public void Button_Pink()
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xBB0628", Offset = "0xBB0628", VA = "0xBB0628")]
		public void Toggle(bool state)
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xBB06EC", Offset = "0xBB06EC", VA = "0xBB06EC")]
		public void Dropdown(int value)
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xBB078C", Offset = "0xBB078C", VA = "0xBB078C")]
		public void SetDropText(BaseEventData data)
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0xBB0904", Offset = "0xBB0904", VA = "0xBB0904")]
		public void CreateCanvas()
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0xBB0924", Offset = "0xBB0924", VA = "0xBB0924")]
		[IteratorStateMachine(typeof(<CreateCanvasOnNextFrame>d__7))]
		private IEnumerator CreateCanvasOnNextFrame()
		{
			return null;
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0xBB09AC", Offset = "0xBB09AC", VA = "0xBB09AC")]
		public UI_Interactions()
		{
		}
	}
	[Token(Token = "0x200042F")]
	public class UI_Keyboard : MonoBehaviour
	{
		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField input;

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0xBB10C8", Offset = "0xBB10C8", VA = "0xBB10C8")]
		public void ClickKey(string character)
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0xBB10F8", Offset = "0xBB10F8", VA = "0xBB10F8")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0xBB1144", Offset = "0xBB1144", VA = "0xBB1144")]
		public void Enter()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0xBB1214", Offset = "0xBB1214", VA = "0xBB1214")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0xBB126C", Offset = "0xBB126C", VA = "0xBB126C")]
		public UI_Keyboard()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class UseRotate : VRTK_InteractableObject
	{
		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Header("Rotation when in use")]
		[Tooltip("Rotation speed when not in use (deg/sec)")]
		[SerializeField]
		private float idleSpinSpeed;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[Tooltip("Rotation speed when in use (deg/sec)")]
		private float activeSpinSpeed;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Tooltip("Game object to rotate\n(leave empty to use this object)")]
		[SerializeField]
		private Transform rotatingObject;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private Vector3 rotationAxis;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float spinSpeed;

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0xBB1274", Offset = "0xBB1274", VA = "0xBB1274", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xBB1294", Offset = "0xBB1294", VA = "0xBB1294", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0xBB12B8", Offset = "0xBB12B8", VA = "0xBB12B8")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0xBB1348", Offset = "0xBB1348", VA = "0xBB1348", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0xBB13B4", Offset = "0xBB13B4", VA = "0xBB13B4")]
		public UseRotate()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public class VRTK_ControllerAppearance_Example : MonoBehaviour
	{
		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool highlightBodyOnlyOnCollision;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool pulseTriggerHighlightColor;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_ControllerTooltips tooltips;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRTK_ControllerHighlighter highligher;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VRTK_ControllerEvents events;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color highlightColor;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color pulseColor;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Color currentPulseColor;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float highlightTimer;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulseTimer;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float dimOpacity;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float defaultOpacity;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool highlighted;

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xBB141C", Offset = "0xBB141C", VA = "0xBB141C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xBB1AA0", Offset = "0xBB1AA0", VA = "0xBB1AA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xBB1E78", Offset = "0xBB1E78", VA = "0xBB1E78")]
		private void PulseTrigger()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xBB1F10", Offset = "0xBB1F10", VA = "0xBB1F10")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xBB201C", Offset = "0xBB201C", VA = "0xBB201C")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xBB2128", Offset = "0xBB2128", VA = "0xBB2128")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xBB21EC", Offset = "0xBB21EC", VA = "0xBB21EC")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xBB22CC", Offset = "0xBB22CC", VA = "0xBB22CC")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0xBB2390", Offset = "0xBB2390", VA = "0xBB2390")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xBB2470", Offset = "0xBB2470", VA = "0xBB2470")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xBB2534", Offset = "0xBB2534", VA = "0xBB2534")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xBB2614", Offset = "0xBB2614", VA = "0xBB2614")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xBB26FC", Offset = "0xBB26FC", VA = "0xBB26FC")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xBB27F4", Offset = "0xBB27F4", VA = "0xBB27F4")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0xBB28B8", Offset = "0xBB28B8", VA = "0xBB28B8")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0xBB2998", Offset = "0xBB2998", VA = "0xBB2998")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xBB299C", Offset = "0xBB299C", VA = "0xBB299C")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0xBB2A18", Offset = "0xBB2A18", VA = "0xBB2A18")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0xBB2A7C", Offset = "0xBB2A7C", VA = "0xBB2A7C")]
		public VRTK_ControllerAppearance_Example()
		{
		}
	}
	[Token(Token = "0x2000432")]
	public class VRTK_ControllerEvents_ListenerExample : MonoBehaviour
	{
		[Token(Token = "0x2000433")]
		public enum EventQuickSelect
		{
			[Token(Token = "0x4001861")]
			Custom,
			[Token(Token = "0x4001862")]
			None,
			[Token(Token = "0x4001863")]
			All,
			[Token(Token = "0x4001864")]
			ButtonOnly,
			[Token(Token = "0x4001865")]
			AxisOnly,
			[Token(Token = "0x4001866")]
			SenseAxisOnly
		}

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Quick Select")]
		public EventQuickSelect quickSelect;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Button Events Debug")]
		public bool triggerButtonEvents;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool gripButtonEvents;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool touchpadButtonEvents;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool buttonOneButtonEvents;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool buttonTwoButtonEvents;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool startMenuButtonEvents;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Header("Axis Events Debug")]
		public bool triggerAxisEvents;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool gripAxisEvents;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool touchpadAxisEvents;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool touchpadTwoAxisEvents;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[Header("Sense Axis Events Debug")]
		public bool triggerSenseAxisEvents;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool touchpadSenseAxisEvents;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool middleFingerSenseAxisEvents;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool ringFingerSenseAxisEvents;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool pinkyFingerSenseAxisEvents;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0xBB2AA8", Offset = "0xBB2AA8", VA = "0xBB2AA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0xBB396C", Offset = "0xBB396C", VA = "0xBB396C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0xBB467C", Offset = "0xBB467C", VA = "0xBB467C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0xBB4704", Offset = "0xBB4704", VA = "0xBB4704")]
		private void DebugLogger(uint index, string button, string action, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0xBB4D14", Offset = "0xBB4D14", VA = "0xBB4D14")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0xBB4DDC", Offset = "0xBB4DDC", VA = "0xBB4DDC")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xBB4EA4", Offset = "0xBB4EA4", VA = "0xBB4EA4")]
		private void DoTriggerTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xBB4F6C", Offset = "0xBB4F6C", VA = "0xBB4F6C")]
		private void DoTriggerTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0xBB5034", Offset = "0xBB5034", VA = "0xBB5034")]
		private void DoTriggerHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0xBB50FC", Offset = "0xBB50FC", VA = "0xBB50FC")]
		private void DoTriggerHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0xBB51C4", Offset = "0xBB51C4", VA = "0xBB51C4")]
		private void DoTriggerClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0xBB528C", Offset = "0xBB528C", VA = "0xBB528C")]
		private void DoTriggerUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0xBB5354", Offset = "0xBB5354", VA = "0xBB5354")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0xBB541C", Offset = "0xBB541C", VA = "0xBB541C")]
		private void DoTriggerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xBB54E4", Offset = "0xBB54E4", VA = "0xBB54E4")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0xBB55AC", Offset = "0xBB55AC", VA = "0xBB55AC")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0xBB5674", Offset = "0xBB5674", VA = "0xBB5674")]
		private void DoGripTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xBB573C", Offset = "0xBB573C", VA = "0xBB573C")]
		private void DoGripTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xBB5804", Offset = "0xBB5804", VA = "0xBB5804")]
		private void DoGripHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xBB58CC", Offset = "0xBB58CC", VA = "0xBB58CC")]
		private void DoGripHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xBB5994", Offset = "0xBB5994", VA = "0xBB5994")]
		private void DoGripClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xBB5A5C", Offset = "0xBB5A5C", VA = "0xBB5A5C")]
		private void DoGripUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xBB5B24", Offset = "0xBB5B24", VA = "0xBB5B24")]
		private void DoGripAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xBB5BEC", Offset = "0xBB5BEC", VA = "0xBB5BEC")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xBB5CB4", Offset = "0xBB5CB4", VA = "0xBB5CB4")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xBB5D7C", Offset = "0xBB5D7C", VA = "0xBB5D7C")]
		private void DoTouchpadTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xBB5E44", Offset = "0xBB5E44", VA = "0xBB5E44")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xBB5F0C", Offset = "0xBB5F0C", VA = "0xBB5F0C")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0xBB5FD4", Offset = "0xBB5FD4", VA = "0xBB5FD4")]
		private void DoTouchpadTwoAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0xBB609C", Offset = "0xBB609C", VA = "0xBB609C")]
		private void DoTouchpadSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0xBB6164", Offset = "0xBB6164", VA = "0xBB6164")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0xBB622C", Offset = "0xBB622C", VA = "0xBB622C")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xBB62F4", Offset = "0xBB62F4", VA = "0xBB62F4")]
		private void DoButtonOneTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0xBB63BC", Offset = "0xBB63BC", VA = "0xBB63BC")]
		private void DoButtonOneTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0xBB6484", Offset = "0xBB6484", VA = "0xBB6484")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0xBB654C", Offset = "0xBB654C", VA = "0xBB654C")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0xBB6614", Offset = "0xBB6614", VA = "0xBB6614")]
		private void DoButtonTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0xBB66DC", Offset = "0xBB66DC", VA = "0xBB66DC")]
		private void DoButtonTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0xBB67A4", Offset = "0xBB67A4", VA = "0xBB67A4")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0xBB686C", Offset = "0xBB686C", VA = "0xBB686C")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0xBB6934", Offset = "0xBB6934", VA = "0xBB6934")]
		private void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xBB69F0", Offset = "0xBB69F0", VA = "0xBB69F0")]
		private void DoControllerDisabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0xBB6AAC", Offset = "0xBB6AAC", VA = "0xBB6AAC")]
		private void DoControllerIndexChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xBB6B68", Offset = "0xBB6B68", VA = "0xBB6B68")]
		private void DoMiddleFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xBB6C30", Offset = "0xBB6C30", VA = "0xBB6C30")]
		private void DoRingFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xBB6CF8", Offset = "0xBB6CF8", VA = "0xBB6CF8")]
		private void DoPinkyFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xBB6DC0", Offset = "0xBB6DC0", VA = "0xBB6DC0")]
		public VRTK_ControllerEvents_ListenerExample()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public class VRTK_ControllerInteract_ListenerExample : MonoBehaviour
	{
		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xBB6DDC", Offset = "0xBB6DDC", VA = "0xBB6DDC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xBB71E0", Offset = "0xBB71E0", VA = "0xBB71E0")]
		private void DebugLogger(uint index, string action, GameObject target)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xBB7474", Offset = "0xBB7474", VA = "0xBB7474")]
		private void DoInteractTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xBB7540", Offset = "0xBB7540", VA = "0xBB7540")]
		private void DoInteractUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xBB760C", Offset = "0xBB760C", VA = "0xBB760C")]
		private void DoInteractGrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xBB76D8", Offset = "0xBB76D8", VA = "0xBB76D8")]
		private void DoInteractUngrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xBB77A4", Offset = "0xBB77A4", VA = "0xBB77A4")]
		public VRTK_ControllerInteract_ListenerExample()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public class VRTK_ControllerPointerEvents_ListenerExample : MonoBehaviour
	{
		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showHoverState;

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xBB77AC", Offset = "0xBB77AC", VA = "0xBB77AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xBB7B60", Offset = "0xBB7B60", VA = "0xBB7B60")]
		private void DebugLogger(uint index, string action, Transform target, RaycastHit raycastHit, float distance, Vector3 tipPosition)
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xBB80BC", Offset = "0xBB80BC", VA = "0xBB80BC")]
		private void DoPointerIn(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xBB818C", Offset = "0xBB818C", VA = "0xBB818C")]
		private void DoPointerOut(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xBB825C", Offset = "0xBB825C", VA = "0xBB825C")]
		private void DoPointerHover(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xBB832C", Offset = "0xBB832C", VA = "0xBB832C")]
		private void DoPointerDestinationSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xBB83FC", Offset = "0xBB83FC", VA = "0xBB83FC")]
		public VRTK_ControllerPointerEvents_ListenerExample()
		{
		}
	}
	[Token(Token = "0x2000436")]
	public class VRTK_ControllerUIPointerEvents_ListenerExample : MonoBehaviour
	{
		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool togglePointerOnHit;

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xBB8404", Offset = "0xBB8404", VA = "0xBB8404")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xBB882C", Offset = "0xBB882C", VA = "0xBB882C")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementEnter(object sender, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xBB8C64", Offset = "0xBB8C64", VA = "0xBB8C64")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementExit(object sender, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xBB8FC8", Offset = "0xBB8FC8", VA = "0xBB8FC8")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementClick(object sender, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xBB937C", Offset = "0xBB937C", VA = "0xBB937C")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementDragStart(object sender, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xBB9730", Offset = "0xBB9730", VA = "0xBB9730")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementDragEnd(object sender, UIPointerEventArgs e)
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0xBB9AE4", Offset = "0xBB9AE4", VA = "0xBB9AE4")]
		public VRTK_ControllerUIPointerEvents_ListenerExample()
		{
		}
	}
	[Token(Token = "0x2000437")]
	[Obsolete("`VRTK_RoomExtender_ControllerExample` will be removed in a future version of VRTK.")]
	public class VRTK_RoomExtender_ControllerExample : MonoBehaviour
	{
		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_RoomExtender roomExtender;

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0xBB9AEC", Offset = "0xBB9AEC", VA = "0xBB9AEC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0xBB9F78", Offset = "0xBB9F78", VA = "0xBB9F78")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xBBA0AC", Offset = "0xBBA0AC", VA = "0xBBA0AC")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xBBA0D0", Offset = "0xBBA0D0", VA = "0xBBA0D0")]
		private void DoSwitchMovementFunction(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xBBA070", Offset = "0xBBA070", VA = "0xBBA070")]
		private void EnableAdditionalMovement()
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xBBA090", Offset = "0xBBA090", VA = "0xBBA090")]
		private void DisableAdditionalMovement()
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xBBA108", Offset = "0xBBA108", VA = "0xBBA108")]
		public VRTK_RoomExtender_ControllerExample()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class Whirlygig : VRTK_InteractableObject
	{
		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float spinSpeed;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Transform rotator;

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xBBA110", Offset = "0xBBA110", VA = "0xBBA110", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0xBBA130", Offset = "0xBBA130", VA = "0xBBA130", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0xBBA150", Offset = "0xBBA150", VA = "0xBBA150")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0xBBA1BC", Offset = "0xBBA1BC", VA = "0xBBA1BC", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0xBBA218", Offset = "0xBBA218", VA = "0xBBA218")]
		public Whirlygig()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public class Zipline : VRTK_InteractableObject
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Header("Zipline Options", order = 4)]
		public float downStartSpeed;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float acceleration;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float upSpeed;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform handleEndPosition;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform handleStartPosition;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject handle;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool isMoving;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool isMovingDown;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private float currentSpeed;

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xBBA220", Offset = "0xBBA220", VA = "0xBBA220", Slot = "10")]
		public override void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xBBA240", Offset = "0xBBA240", VA = "0xBBA240", Slot = "64")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0xBBA260", Offset = "0xBBA260", VA = "0xBBA260", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0xBBA420", Offset = "0xBBA420", VA = "0xBBA420")]
		public Zipline()
		{
		}
	}
}
namespace VRTK.Examples.Tests
{
	[Token(Token = "0x200043A")]
	public abstract class VRTK_BaseTest : MonoBehaviour
	{
		[Token(Token = "0x200043B")]
		[CompilerGenerated]
		private sealed class <RunTests>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BaseTest <>4__this;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E3B")]
				[Address(RVA = "0xBBAD94", Offset = "0xBBAD94", VA = "0xBBAD94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E3D")]
				[Address(RVA = "0xBBADDC", Offset = "0xBBADDC", VA = "0xBBADDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E38")]
			[Address(RVA = "0xBBACB0", Offset = "0xBBACB0", VA = "0xBBACB0")]
			[DebuggerHidden]
			public <RunTests>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001E39")]
			[Address(RVA = "0xBBACE0", Offset = "0xBBACE0", VA = "0xBBACE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0xBBACE4", Offset = "0xBBACE4", VA = "0xBBACE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0xBBAD9C", Offset = "0xBBAD9C", VA = "0xBBAD9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string currentTest;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected string currentSetup;

		[Token(Token = "0x6001E30")]
		protected abstract void Test();

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0xBBA448", Offset = "0xBBA448", VA = "0xBBA448", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0xBBA470", Offset = "0xBBA470", VA = "0xBBA470", Slot = "6")]
		protected virtual void BeginTest(string name, int level = 1)
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0xBBA6E0", Offset = "0xBBA6E0", VA = "0xBBA6E0", Slot = "7")]
		protected virtual void SetUp(string message)
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0xBBA7A0", Offset = "0xBBA7A0", VA = "0xBBA7A0", Slot = "8")]
		protected virtual void TearDown()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0xBBA808", Offset = "0xBBA808", VA = "0xBBA808", Slot = "9")]
		protected virtual void Assert(string description, bool assertion, string failure, string success = "")
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0xBBAC3C", Offset = "0xBBAC3C", VA = "0xBBAC3C", Slot = "10")]
		[IteratorStateMachine(typeof(<RunTests>d__8))]
		protected virtual IEnumerator RunTests()
		{
			return null;
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0xBBACD8", Offset = "0xBBACD8", VA = "0xBBACD8")]
		protected VRTK_BaseTest()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class VRTK_ControllerReference_Setup : VRTK_BaseTest
	{
		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint overrideActualIndex;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject overrideActualController;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject overrideAliasController;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject overrideModelController;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SDK_BaseController.ControllerHand actualControllerHand;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_ControllerReference testReference;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected uint actualIndex;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject actualController;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject aliasController;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected GameObject modelController;

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0xBBADE4", Offset = "0xBBADE4", VA = "0xBBADE4", Slot = "7")]
		protected override void SetUp(string message)
		{
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0xBBAF5C", Offset = "0xBBAF5C", VA = "0xBBAF5C", Slot = "8")]
		protected override void TearDown()
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0xBBAFB8", Offset = "0xBBAFB8", VA = "0xBBAFB8", Slot = "4")]
		protected override void Test()
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0xBBB0A8", Offset = "0xBBB0A8", VA = "0xBBB0A8", Slot = "11")]
		protected virtual List<SDK_BaseController.ControllerHand> GetOtherHands(SDK_BaseController.ControllerHand ignore)
		{
			return null;
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0xBBB268", Offset = "0xBBB268", VA = "0xBBB268", Slot = "12")]
		protected virtual void TestNullState()
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0xBBB33C", Offset = "0xBBB33C", VA = "0xBBB33C", Slot = "13")]
		protected virtual void TestStaticIndex()
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xBBC4AC", Offset = "0xBBC4AC", VA = "0xBBC4AC", Slot = "14")]
		protected virtual void TestStaticActual()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xBBD61C", Offset = "0xBBD61C", VA = "0xBBD61C", Slot = "15")]
		protected virtual void TestStaticAlias()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xBBE78C", Offset = "0xBBE78C", VA = "0xBBE78C", Slot = "16")]
		protected virtual void TestStaticModel()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xBBF8FC", Offset = "0xBBF8FC", VA = "0xBBF8FC", Slot = "17")]
		protected virtual void TestStaticHand()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xBC0A6C", Offset = "0xBC0A6C", VA = "0xBC0A6C", Slot = "18")]
		protected virtual void TestStaticIsValid()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xBC0CAC", Offset = "0xBC0CAC", VA = "0xBC0CAC", Slot = "19")]
		protected virtual void TestStaticGetRealIndex()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xBC0FC0", Offset = "0xBC0FC0", VA = "0xBC0FC0")]
		public VRTK_ControllerReference_Setup()
		{
		}
	}
}
namespace VRTK.Examples.PanelMenu
{
	[Token(Token = "0x200043D")]
	public class PanelMenuDemoFlyingSaucer : MonoBehaviour
	{
		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color[] colors;

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xBC0FD8", Offset = "0xBC0FD8", VA = "0xBC0FD8")]
		public void UpdateGridLayoutValue(int selectedIndex)
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xBC1094", Offset = "0xBC1094", VA = "0xBC1094")]
		public PanelMenuDemoFlyingSaucer()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class PanelMenuDemoSphere : MonoBehaviour
	{
		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color[] colors;

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xBC11A0", Offset = "0xBC11A0", VA = "0xBC11A0")]
		public void UpdateSliderValue(float value)
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xBC1268", Offset = "0xBC1268", VA = "0xBC1268")]
		public PanelMenuDemoSphere()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class PanelMenuUIGrid : MonoBehaviour
	{
		[Token(Token = "0x2000440")]
		public enum Direction
		{
			[Token(Token = "0x400188C")]
			None,
			[Token(Token = "0x400188D")]
			Up,
			[Token(Token = "0x400188E")]
			Down,
			[Token(Token = "0x400188F")]
			Left,
			[Token(Token = "0x4001890")]
			Right
		}

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color colorDefault;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Color colorSelected;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly float colorAlpha;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup gridLayoutGroup;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int selectedIndex;

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xBC1394", Offset = "0xBC1394", VA = "0xBC1394")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xBC1C28", Offset = "0xBC1C28", VA = "0xBC1C28")]
		public bool MoveSelectGridLayoutItem(Direction direction, GameObject interactableObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xBC1C68", Offset = "0xBC1C68", VA = "0xBC1C68")]
		private int FindNextItemBasedOnMoveDirection(Direction direction)
		{
			return default(int);
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xBC17C8", Offset = "0xBC17C8", VA = "0xBC17C8")]
		private void SetGridLayoutItemSelectedState(int index)
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xBC1D60", Offset = "0xBC1D60", VA = "0xBC1D60")]
		private void OnPanelMenuItemSwipeTop(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xBC1D68", Offset = "0xBC1D68", VA = "0xBC1D68")]
		private void OnPanelMenuItemSwipeBottom(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xBC1D70", Offset = "0xBC1D70", VA = "0xBC1D70")]
		private void OnPanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0xBC1D78", Offset = "0xBC1D78", VA = "0xBC1D78")]
		private void OnPanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xBC1D80", Offset = "0xBC1D80", VA = "0xBC1D80")]
		private void OnPanelMenuItemTriggerPressed(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xBC1D88", Offset = "0xBC1D88", VA = "0xBC1D88")]
		private void SendMessageToInteractableObject(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xBC1E18", Offset = "0xBC1E18", VA = "0xBC1E18")]
		public PanelMenuUIGrid()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class PanelMenuUISlider : MonoBehaviour
	{
		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xBC1E3C", Offset = "0xBC1E3C", VA = "0xBC1E3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xBC2150", Offset = "0xBC2150", VA = "0xBC2150")]
		private void OnPanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xBC2254", Offset = "0xBC2254", VA = "0xBC2254")]
		private void OnPanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xBC21B0", Offset = "0xBC21B0", VA = "0xBC21B0")]
		private void SendMessageToInteractableObject(GameObject interactableObject)
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xBC22B4", Offset = "0xBC22B4", VA = "0xBC22B4")]
		public PanelMenuUISlider()
		{
		}
	}
}
namespace VRTK.Examples.Old
{
	[Token(Token = "0x2000442")]
	public class FireExtinguisher_Base : VRTK_InteractableObject
	{
		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Animation leverAnimation;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public FireExtinguisher_Sprayer sprayer;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xBC22BC", Offset = "0xBC22BC", VA = "0xBC22BC", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xBC2330", Offset = "0xBC2330", VA = "0xBC2330", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xBC2358", Offset = "0xBC2358", VA = "0xBC2358", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xBC2474", Offset = "0xBC2474", VA = "0xBC2474")]
		private void Spray(float power)
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0xBC24A4", Offset = "0xBC24A4", VA = "0xBC24A4")]
		private void SetHandleFrame(float frame)
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xBC25F0", Offset = "0xBC25F0", VA = "0xBC25F0")]
		public FireExtinguisher_Base()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class FireExtinguisher_Sprayer : VRTK_InteractableObject
	{
		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public FireExtinguisher_Base baseCan;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float breakDistance;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float maxSprayPower;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject waterSpray;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private ParticleSystem particles;

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xBC254C", Offset = "0xBC254C", VA = "0xBC254C")]
		public void Spray(float power)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xBC25F8", Offset = "0xBC25F8", VA = "0xBC25F8", Slot = "64")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xBC26C0", Offset = "0xBC26C0", VA = "0xBC26C0", Slot = "68")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0xBC27D8", Offset = "0xBC27D8", VA = "0xBC27D8")]
		public FireExtinguisher_Sprayer()
		{
		}
	}
}
namespace VRTK.Examples.Archery
{
	[Token(Token = "0x2000444")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxArrowLife;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxCollidedLife;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool inFlight;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool collided;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rigidBody;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject arrowHolder;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 originalPosition;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion originalRotation;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 originalScale;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource source;

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0xBC27EC", Offset = "0xBC27EC", VA = "0xBC27EC")]
		public void SetArrowHolder(GameObject holder)
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0xBC281C", Offset = "0xBC281C", VA = "0xBC281C")]
		public void OnNock()
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0xBC2824", Offset = "0xBC2824", VA = "0xBC2824")]
		public void Fired()
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0xBC292C", Offset = "0xBC292C", VA = "0xBC292C")]
		public void ResetArrow()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0xBC2B74", Offset = "0xBC2B74", VA = "0xBC2B74")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xBC2C0C", Offset = "0xBC2C0C", VA = "0xBC2C0C")]
		private void SetOrigns()
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xBC2C7C", Offset = "0xBC2C7C", VA = "0xBC2C7C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xBC2D1C", Offset = "0xBC2D1C", VA = "0xBC2D1C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xBC2958", Offset = "0xBC2958", VA = "0xBC2958")]
		private void RecreateNotch()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0xBC2A84", Offset = "0xBC2A84", VA = "0xBC2A84")]
		private void ResetTransform()
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xBC28A8", Offset = "0xBC28A8", VA = "0xBC28A8")]
		private void DestroyArrow(float time)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xBC2D6C", Offset = "0xBC2D6C", VA = "0xBC2D6C")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class ArrowNotch : MonoBehaviour
	{
		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject arrow;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_InteractableObject obj;

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xBC2D80", Offset = "0xBC2D80", VA = "0xBC2D80")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0xBC2E28", Offset = "0xBC2E28", VA = "0xBC2E28")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0xBC3020", Offset = "0xBC3020", VA = "0xBC3020")]
		private void CopyNotchToArrow()
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0xBC31BC", Offset = "0xBC31BC", VA = "0xBC31BC")]
		public ArrowNotch()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class ArrowSpawner : MonoBehaviour
	{
		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject arrowPrefab;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spawnDelay;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float spawnDelayTimer;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowAim bow;

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0xBC31C4", Offset = "0xBC31C4", VA = "0xBC31C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xBC31CC", Offset = "0xBC31CC", VA = "0xBC31CC")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xBC33A8", Offset = "0xBC33A8", VA = "0xBC33A8")]
		private bool CanGrab(VRTK_InteractGrab grabbingController)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xBC346C", Offset = "0xBC346C", VA = "0xBC346C")]
		private bool NoArrowNotched(GameObject controller)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xBC368C", Offset = "0xBC368C", VA = "0xBC368C")]
		public ArrowSpawner()
		{
		}
	}
	[Token(Token = "0x2000447")]
	public class BowAim : MonoBehaviour
	{
		[Token(Token = "0x2000448")]
		[CompilerGenerated]
		private sealed class <GetBaseRotation>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowAim <>4__this;

			[Token(Token = "0x170001D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E90")]
				[Address(RVA = "0xBC4570", Offset = "0xBC4570", VA = "0xBC4570", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E92")]
				[Address(RVA = "0xBC45B8", Offset = "0xBC45B8", VA = "0xBC45B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E8D")]
			[Address(RVA = "0xBC3A48", Offset = "0xBC3A48", VA = "0xBC3A48")]
			[DebuggerHidden]
			public <GetBaseRotation>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0xBC44A0", Offset = "0xBC44A0", VA = "0xBC44A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E8F")]
			[Address(RVA = "0xBC44A4", Offset = "0xBC44A4", VA = "0xBC44A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E91")]
			[Address(RVA = "0xBC4578", Offset = "0xBC4578", VA = "0xBC4578", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float powerMultiplier;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pullMultiplier;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float pullOffset;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxPullDistance;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float bowVibration;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float stringVibration;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowAnimation bowAnimation;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject currentArrow;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowHandle handle;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VRTK_InteractableObject interact;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VRTK_InteractGrab holdControl;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRTK_InteractGrab stringControl;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion releaseRotation;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion baseRotation;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool fired;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float fireOffset;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float currentPull;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float previousPull;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource source;

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xBC369C", Offset = "0xBC369C", VA = "0xBC369C")]
		public VRTK_InteractGrab GetPullHand()
		{
			return null;
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xBC2FF8", Offset = "0xBC2FF8", VA = "0xBC2FF8")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xBC362C", Offset = "0xBC362C", VA = "0xBC362C")]
		public bool HasArrow()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xBC31A0", Offset = "0xBC31A0", VA = "0xBC31A0")]
		public void SetArrow(GameObject arrow)
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0xBC373C", Offset = "0xBC373C", VA = "0xBC373C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0xBC36A4", Offset = "0xBC36A4", VA = "0xBC36A4")]
		private void PlaySound()
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0xBC389C", Offset = "0xBC389C", VA = "0xBC389C")]
		private void DoObjectGrab(object sender, InteractableObjectEventArgs e)
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0xBC39D4", Offset = "0xBC39D4", VA = "0xBC39D4")]
		[IteratorStateMachine(typeof(<GetBaseRotation>d__26))]
		private IEnumerator GetBaseRotation()
		{
			return null;
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0xBC3A70", Offset = "0xBC3A70", VA = "0xBC3A70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0xBC40D8", Offset = "0xBC40D8", VA = "0xBC40D8")]
		private void Release()
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0xBC43F8", Offset = "0xBC43F8", VA = "0xBC43F8")]
		private void ReleaseArrow()
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0xBC3CFC", Offset = "0xBC3CFC", VA = "0xBC3CFC")]
		private void AimArrow()
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0xBC3DAC", Offset = "0xBC3DAC", VA = "0xBC3DAC")]
		private void AimBow()
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0xBC3ED4", Offset = "0xBC3ED4", VA = "0xBC3ED4")]
		private void PullString()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0xBC4480", Offset = "0xBC4480", VA = "0xBC4480")]
		public BowAim()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class BowAnimation : MonoBehaviour
	{
		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animation animationTimeline;

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xBC4350", Offset = "0xBC4350", VA = "0xBC4350")]
		public void SetFrame(float frame)
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xBC45C0", Offset = "0xBC45C0", VA = "0xBC45C0")]
		public BowAnimation()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class BowHandle : MonoBehaviour
	{
		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform arrowNockingPoint;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BowAim aim;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform nockSide;

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xBC45C8", Offset = "0xBC45C8", VA = "0xBC45C8")]
		public BowHandle()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class Follow : MonoBehaviour
	{
		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool followPosition;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool followRotation;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xBC45D0", Offset = "0xBC45D0", VA = "0xBC45D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xBC4794", Offset = "0xBC4794", VA = "0xBC4794")]
		public Follow()
		{
		}
	}
}
namespace VRTK.Examples.Utilities
{
	[Token(Token = "0x200044C")]
	public class VRTKExample_ObjectListToggle : MonoBehaviour
	{
		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] retoggle;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents controllerEvents;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents.ButtonAlias toggleButton;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int currentIndex;

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xBC479C", Offset = "0xBC479C", VA = "0xBC479C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xBC4884", Offset = "0xBC4884", VA = "0xBC4884", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xBC4968", Offset = "0xBC4968", VA = "0xBC4968", Slot = "6")]
		protected virtual void ButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xBC49A4", Offset = "0xBC49A4", VA = "0xBC49A4", Slot = "7")]
		protected virtual void ToggleObjects()
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xBC4B80", Offset = "0xBC4B80", VA = "0xBC4B80", Slot = "8")]
		protected virtual void ToggleOn()
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xBC4BC0", Offset = "0xBC4BC0", VA = "0xBC4BC0", Slot = "9")]
		protected virtual void RetoggleOn()
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xBC4CB8", Offset = "0xBC4CB8", VA = "0xBC4CB8")]
		public VRTKExample_ObjectListToggle()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public class VRTKExample_SceneSwitcher : MonoBehaviour
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode backKey;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode forwardKey;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int firstSceneIndex;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int lastSceneIndex;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool pressEnabled;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected VRTK_ControllerReference controllerReference;

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xBC5D40", Offset = "0xBC5D40", VA = "0xBC5D40", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xBC5D48", Offset = "0xBC5D48", VA = "0xBC5D48", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xBC5DD0", Offset = "0xBC5DD0", VA = "0xBC5DD0", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xBC5F3C", Offset = "0xBC5F3C", VA = "0xBC5F3C", Slot = "7")]
		protected virtual void EnablePress()
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xBC5F48", Offset = "0xBC5F48", VA = "0xBC5F48", Slot = "8")]
		protected virtual bool BackPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xBC5F80", Offset = "0xBC5F80", VA = "0xBC5F80", Slot = "9")]
		protected virtual bool ForwardPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xBC5FB8", Offset = "0xBC5FB8", VA = "0xBC5FB8", Slot = "10")]
		protected virtual bool ControllerForward()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xBC6074", Offset = "0xBC6074", VA = "0xBC6074", Slot = "11")]
		protected virtual bool ControllerBackward()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xBC6130", Offset = "0xBC6130", VA = "0xBC6130")]
		public VRTKExample_SceneSwitcher()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public class SceneChanger : MonoBehaviour
	{
		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool canPress;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_ControllerReference controllerReference;

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0xBC6144", Offset = "0xBC6144", VA = "0xBC6144")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0xBC61A0", Offset = "0xBC61A0", VA = "0xBC61A0")]
		private bool IsForwardPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0xBC6260", Offset = "0xBC6260", VA = "0xBC6260")]
		private bool IsBackPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0xBC6320", Offset = "0xBC6320", VA = "0xBC6320")]
		private void ResetPress()
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0xBC632C", Offset = "0xBC632C", VA = "0xBC632C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0xBC64C8", Offset = "0xBC64C8", VA = "0xBC64C8")]
		public SceneChanger()
		{
		}
	}
	[Token(Token = "0x200044F")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Object sceneConstructor;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool sdkSwitcher;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftScriptAlias;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightScriptAlias;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_SDKSetupSwitcher setupSwitcher;

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0xBC64D0", Offset = "0xBC64D0", VA = "0xBC64D0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0xBC6594", Offset = "0xBC6594", VA = "0xBC6594", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0xBC6628", Offset = "0xBC6628", VA = "0xBC6628", Slot = "6")]
		protected virtual void OnSceneLoaded(Scene loadedScene, LoadSceneMode loadMode)
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xBC67A8", Offset = "0xBC67A8", VA = "0xBC67A8", Slot = "7")]
		protected virtual void ToggleScriptAlias(bool state)
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xBC67EC", Offset = "0xBC67EC", VA = "0xBC67EC")]
		public SceneLoader()
		{
		}
	}
}
namespace Valve.VR
{
	[Token(Token = "0x2000450")]
	public struct IVRSystem
	{
		[Token(Token = "0x2000451")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000452")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[Token(Token = "0x2000453")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[Token(Token = "0x2000454")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[Token(Token = "0x2000455")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[Token(Token = "0x2000456")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[Token(Token = "0x2000457")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate int _GetD3D9AdapterIndex();

		[Token(Token = "0x2000458")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[Token(Token = "0x2000459")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance);

		[Token(Token = "0x200045A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsDisplayOnDesktop();

		[Token(Token = "0x200045B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[Token(Token = "0x200045C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[Token(Token = "0x200045D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ResetSeatedZeroPose();

		[Token(Token = "0x200045E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x200045F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x2000460")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[Token(Token = "0x2000461")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[Token(Token = "0x2000462")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[Token(Token = "0x2000463")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[Token(Token = "0x2000464")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[Token(Token = "0x2000465")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[Token(Token = "0x2000466")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[Token(Token = "0x2000467")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000468")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000469")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200046A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200046B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200046C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x200046D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x200046E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[Token(Token = "0x200046F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x2000470")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x2000471")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[Token(Token = "0x2000472")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[Token(Token = "0x2000473")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[Token(Token = "0x2000474")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x2000475")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec);

		[Token(Token = "0x2000476")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[Token(Token = "0x2000477")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[Token(Token = "0x2000478")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsInputAvailable();

		[Token(Token = "0x2000479")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsSteamVRDrawingControllers();

		[Token(Token = "0x200047A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ShouldApplicationPause();

		[Token(Token = "0x200047B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ShouldApplicationReduceRenderingWork();

		[Token(Token = "0x200047C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize);

		[Token(Token = "0x200047D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[Token(Token = "0x200047E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _AcknowledgeQuit_Exiting();

		[Token(Token = "0x200047F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ComputeDistortion ComputeDistortion;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOutputDevice GetOutputDevice;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ApplyTransform ApplyTransform;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetArrayTrackedDeviceProperty GetArrayTrackedDeviceProperty;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _PollNextEvent PollNextEvent;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetControllerState GetControllerState;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _IsInputAvailable IsInputAvailable;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _IsSteamVRDrawingControllers IsSteamVRDrawingControllers;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShouldApplicationPause ShouldApplicationPause;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _ShouldApplicationReduceRenderingWork ShouldApplicationReduceRenderingWork;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	[Token(Token = "0x2000480")]
	public struct IVRExtendedDisplay
	{
		[Token(Token = "0x2000481")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000482")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000483")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	[Token(Token = "0x2000484")]
	public struct IVRTrackedCamera
	{
		[Token(Token = "0x2000485")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[Token(Token = "0x2000486")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[Token(Token = "0x2000487")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[Token(Token = "0x2000488")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[Token(Token = "0x2000489")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[Token(Token = "0x200048A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[Token(Token = "0x200048B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[Token(Token = "0x200048C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x200048D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x200048E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x200048F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x2000490")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HasCamera HasCamera;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetCameraProjection GetCameraProjection;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	[Token(Token = "0x2000491")]
	public struct IVRApplications
	{
		[Token(Token = "0x2000492")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[Token(Token = "0x2000493")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[Token(Token = "0x2000494")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[Token(Token = "0x2000495")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetApplicationCount();

		[Token(Token = "0x2000496")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000497")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000498")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[Token(Token = "0x2000499")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[Token(Token = "0x200049A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[Token(Token = "0x200049B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[Token(Token = "0x200049C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[Token(Token = "0x200049D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[Token(Token = "0x200049E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[Token(Token = "0x200049F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[Token(Token = "0x20004A0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[Token(Token = "0x20004A1")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20004A2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20004A3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[Token(Token = "0x20004A4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[Token(Token = "0x20004A5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[Token(Token = "0x20004A6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20004A7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[Token(Token = "0x20004A8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[Token(Token = "0x20004A9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs);

		[Token(Token = "0x20004AA")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20004AB")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[Token(Token = "0x20004AC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[Token(Token = "0x20004AD")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[Token(Token = "0x20004AE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsQuitUserPromptRequested();

		[Token(Token = "0x20004AF")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[Token(Token = "0x20004B0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetCurrentSceneProcessId();

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetApplicationCount GetApplicationCount;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _LaunchApplication LaunchApplication;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _IdentifyApplication IdentifyApplication;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetStartingApplication GetStartingApplication;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetTransitionState GetTransitionState;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	[Token(Token = "0x20004B1")]
	public struct IVRChaperone
	{
		[Token(Token = "0x20004B2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[Token(Token = "0x20004B3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x20004B4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x20004B5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ReloadInfo();

		[Token(Token = "0x20004B6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[Token(Token = "0x20004B7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[Token(Token = "0x20004B8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _AreBoundsVisible();

		[Token(Token = "0x20004B9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReloadInfo ReloadInfo;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetSceneColor SetSceneColor;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetBoundsColor GetBoundsColor;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	[Token(Token = "0x20004BA")]
	public struct IVRChaperoneSetup
	{
		[Token(Token = "0x20004BB")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[Token(Token = "0x20004BC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _RevertWorkingCopy();

		[Token(Token = "0x20004BD")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x20004BE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x20004BF")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20004C0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20004C1")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20004C2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x20004C3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[Token(Token = "0x20004C4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x20004C5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20004C6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x20004C7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[Token(Token = "0x20004C8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20004C9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[Token(Token = "0x20004CA")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[Token(Token = "0x20004CB")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x20004CC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20004CD")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[Token(Token = "0x20004CE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	[Token(Token = "0x20004CF")]
	public struct IVRCompositor
	{
		[Token(Token = "0x20004D0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[Token(Token = "0x20004D1")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[Token(Token = "0x20004D2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x20004D3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x20004D4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[Token(Token = "0x20004D5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[Token(Token = "0x20004D6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ClearLastSubmittedFrame();

		[Token(Token = "0x20004D7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _PostPresentHandoff();

		[Token(Token = "0x20004D8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[Token(Token = "0x20004D9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[Token(Token = "0x20004DA")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate float _GetFrameTimeRemaining();

		[Token(Token = "0x20004DB")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[Token(Token = "0x20004DC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[Token(Token = "0x20004DD")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[Token(Token = "0x20004DE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[Token(Token = "0x20004DF")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate float _GetCurrentGridAlpha();

		[Token(Token = "0x20004E0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[Token(Token = "0x20004E1")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ClearSkyboxOverride();

		[Token(Token = "0x20004E2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _CompositorBringToFront();

		[Token(Token = "0x20004E3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _CompositorGoToBack();

		[Token(Token = "0x20004E4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _CompositorQuit();

		[Token(Token = "0x20004E5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsFullscreen();

		[Token(Token = "0x20004E6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[Token(Token = "0x20004E7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetLastFrameRenderer();

		[Token(Token = "0x20004E8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _CanRenderScene();

		[Token(Token = "0x20004E9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ShowMirrorWindow();

		[Token(Token = "0x20004EA")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _HideMirrorWindow();

		[Token(Token = "0x20004EB")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsMirrorWindowVisible();

		[Token(Token = "0x20004EC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _CompositorDumpImages();

		[Token(Token = "0x20004ED")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[Token(Token = "0x20004EE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[Token(Token = "0x20004EF")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ForceReconnectProcess();

		[Token(Token = "0x20004F0")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SuspendRendering(bool bSuspend);

		[Token(Token = "0x20004F1")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[Token(Token = "0x20004F2")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[Token(Token = "0x20004F3")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[Token(Token = "0x20004F4")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[Token(Token = "0x20004F5")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x20004F6")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x20004F7")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x20004F8")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x20004F9")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode);

		[Token(Token = "0x20004FA")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRCompositorError _SubmitExplicitTimingData();

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _WaitGetPoses WaitGetPoses;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetLastPoses GetLastPoses;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _Submit Submit;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFrameTiming GetFrameTiming;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetFrameTimings GetFrameTimings;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _FadeToColor FadeToColor;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _FadeGrid FadeGrid;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _CompositorQuit CompositorQuit;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsFullscreen IsFullscreen;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _CanRenderScene CanRenderScene;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _SuspendRendering SuspendRendering;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _SetExplicitTimingMode SetExplicitTimingMode;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _SubmitExplicitTimingData SubmitExplicitTimingData;
	}
	[Token(Token = "0x20004FB")]
	public struct IVROverlay
	{
		[Token(Token = "0x20004FC")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[Token(Token = "0x20004FD")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[Token(Token = "0x20004FE")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x20004FF")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000500")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ulong _GetHighQualityOverlay();

		[Token(Token = "0x2000501")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000502")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000503")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[Token(Token = "0x2000504")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[Token(Token = "0x2000505")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[Token(Token = "0x2000506")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[Token(Token = "0x2000507")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[Token(Token = "0x2000508")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[Token(Token = "0x2000509")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[Token(Token = "0x200050A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[Token(Token = "0x200050B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[Token(Token = "0x200050C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[Token(Token = "0x200050D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[Token(Token = "0x200050E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[Token(Token = "0x200050F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[Token(Token = "0x2000510")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[Token(Token = "0x2000511")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[Token(Token = "0x2000512")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[Token(Token = "0x2000513")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[Token(Token = "0x2000514")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[Token(Token = "0x2000515")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[Token(Token = "0x2000516")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[Token(Token = "0x2000517")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[Token(Token = "0x2000518")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x2000519")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x200051A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[Token(Token = "0x200051B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[Token(Token = "0x200051C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[Token(Token = "0x200051D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x200051E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x200051F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000520")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000521")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[Token(Token = "0x2000522")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize);

		[Token(Token = "0x2000523")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000524")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000525")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000526")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000527")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[Token(Token = "0x2000528")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[Token(Token = "0x2000529")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x200052A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[Token(Token = "0x200052B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[Token(Token = "0x200052C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200052D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200052E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[Token(Token = "0x200052F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000530")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ulong _GetGamepadFocusOverlay();

		[Token(Token = "0x2000531")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[Token(Token = "0x2000532")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[Token(Token = "0x2000533")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[Token(Token = "0x2000534")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius);

		[Token(Token = "0x2000535")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius);

		[Token(Token = "0x2000536")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[Token(Token = "0x2000537")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[Token(Token = "0x2000538")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[Token(Token = "0x2000539")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[Token(Token = "0x200053A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[Token(Token = "0x200053B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[Token(Token = "0x200053C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[Token(Token = "0x200053D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[Token(Token = "0x200053E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsDashboardVisible();

		[Token(Token = "0x200053F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000540")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[Token(Token = "0x2000541")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[Token(Token = "0x2000542")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[Token(Token = "0x2000543")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetPrimaryDashboardDevice();

		[Token(Token = "0x2000544")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000545")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000546")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[Token(Token = "0x2000547")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _HideKeyboard();

		[Token(Token = "0x2000548")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[Token(Token = "0x2000549")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[Token(Token = "0x200054A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[Token(Token = "0x200054B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[Token(Token = "0x200054C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[Token(Token = "0x200054D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _CloseMessageOverlay();

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateOverlay CreateOverlay;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _DestroyOverlay DestroyOverlay;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetOverlayKey GetOverlayKey;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetOverlayName GetOverlayName;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayName SetOverlayName;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayColor SetOverlayColor;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayColor GetOverlayColor;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShowOverlay ShowOverlay;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _HideOverlay HideOverlay;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal _SetOverlayDualAnalogTransform SetOverlayDualAnalogTransform;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal _GetOverlayDualAnalogTransform GetOverlayDualAnalogTransform;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal _ShowDashboard ShowDashboard;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal _ShowKeyboard ShowKeyboard;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal _GetKeyboardText GetKeyboardText;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal _HideKeyboard HideKeyboard;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		internal _ShowMessageOverlay ShowMessageOverlay;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		internal _CloseMessageOverlay CloseMessageOverlay;
	}
	[Token(Token = "0x200054E")]
	public struct IVRRenderModels
	{
		[Token(Token = "0x200054F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[Token(Token = "0x2000550")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[Token(Token = "0x2000551")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[Token(Token = "0x2000552")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[Token(Token = "0x2000553")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[Token(Token = "0x2000554")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[Token(Token = "0x2000555")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[Token(Token = "0x2000556")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[Token(Token = "0x2000557")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetRenderModelCount();

		[Token(Token = "0x2000558")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[Token(Token = "0x2000559")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[Token(Token = "0x200055A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x200055B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[Token(Token = "0x200055C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x200055D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x200055E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[Token(Token = "0x200055F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[Token(Token = "0x2000560")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _FreeRenderModel FreeRenderModel;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTexture FreeTexture;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRenderModelName GetRenderModelName;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetComponentCount GetComponentCount;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetComponentName GetComponentName;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetComponentState GetComponentState;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	[Token(Token = "0x2000561")]
	public struct IVRNotifications
	{
		[Token(Token = "0x2000562")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[Token(Token = "0x2000563")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveNotification RemoveNotification;
	}
	[Token(Token = "0x2000564")]
	public struct IVRSettings
	{
		[Token(Token = "0x2000565")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[Token(Token = "0x2000566")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[Token(Token = "0x2000567")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000568")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000569")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[Token(Token = "0x200056A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[Token(Token = "0x200056B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x200056C")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x200056D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x200056E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[Token(Token = "0x200056F")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[Token(Token = "0x2000570")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Sync Sync;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetBool SetBool;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetInt32 SetInt32;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetFloat SetFloat;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetString SetString;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetBool GetBool;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetInt32 GetInt32;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFloat GetFloat;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetString GetString;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _RemoveSection RemoveSection;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	[Token(Token = "0x2000571")]
	public struct IVRScreenshots
	{
		[Token(Token = "0x2000572")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x2000573")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[Token(Token = "0x2000574")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[Token(Token = "0x2000575")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[Token(Token = "0x2000576")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[Token(Token = "0x2000577")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x2000578")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HookScreenshot HookScreenshot;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	[Token(Token = "0x2000579")]
	public struct IVRResources
	{
		[Token(Token = "0x200057A")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[Token(Token = "0x200057B")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen);

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	[Token(Token = "0x200057C")]
	public struct IVRDriverManager
	{
		[Token(Token = "0x200057D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetDriverCount();

		[Token(Token = "0x200057E")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverName GetDriverName;
	}
	[Token(Token = "0x200057F")]
	public class CVRSystem
	{
		[Token(Token = "0x2000580")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x2000581")]
		private struct PollNextEventUnion
		{
			[Token(Token = "0x40019FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Token(Token = "0x40019FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[Token(Token = "0x2000582")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		[Token(Token = "0x2000583")]
		private struct GetControllerStateUnion
		{
			[Token(Token = "0x40019FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Token(Token = "0x40019FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[Token(Token = "0x2000584")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		[Token(Token = "0x2000585")]
		private struct GetControllerStateWithPoseUnion
		{
			[Token(Token = "0x40019FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Token(Token = "0x4001A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSystem FnTable;

		[Token(Token = "0x6002337")]
		[Address(RVA = "0xBE4C10", Offset = "0xBE4C10", VA = "0xBE4C10")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0xBE4D30", Offset = "0xBE4D30", VA = "0xBE4D30")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0xBE4D5C", Offset = "0xBE4D5C", VA = "0xBE4D5C")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0xBE4DA4", Offset = "0xBE4DA4", VA = "0xBE4DA4")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0xBE4DD8", Offset = "0xBE4DD8", VA = "0xBE4DD8")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0xBE4DFC", Offset = "0xBE4DFC", VA = "0xBE4DFC")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0xBE4E44", Offset = "0xBE4E44", VA = "0xBE4E44")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0xBE4E70", Offset = "0xBE4E70", VA = "0xBE4E70")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0xBE4E94", Offset = "0xBE4E94", VA = "0xBE4E94")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0xBE4EBC", Offset = "0xBE4EBC", VA = "0xBE4EBC")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance)
		{
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0xBE4EE4", Offset = "0xBE4EE4", VA = "0xBE4EE4")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0xBE4F08", Offset = "0xBE4F08", VA = "0xBE4F08")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0xBE4F30", Offset = "0xBE4F30", VA = "0xBE4F30")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0xBE4F5C", Offset = "0xBE4F5C", VA = "0xBE4F5C")]
		public void ResetSeatedZeroPose()
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0xBE4F80", Offset = "0xBE4F80", VA = "0xBE4F80")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0xBE4FC8", Offset = "0xBE4FC8", VA = "0xBE4FC8")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0xBE5010", Offset = "0xBE5010", VA = "0xBE5010")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0xBE5040", Offset = "0xBE5040", VA = "0xBE5040")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0xBE5064", Offset = "0xBE5064", VA = "0xBE5064")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0xBE5088", Offset = "0xBE5088", VA = "0xBE5088")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0xBE50AC", Offset = "0xBE50AC", VA = "0xBE50AC")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Token(Token = "0x600234C")]
		[Address(RVA = "0xBE50D0", Offset = "0xBE50D0", VA = "0xBE50D0")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0xBE50F4", Offset = "0xBE50F4", VA = "0xBE50F4")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0xBE5118", Offset = "0xBE5118", VA = "0xBE5118")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Token(Token = "0x600234F")]
		[Address(RVA = "0xBE513C", Offset = "0xBE513C", VA = "0xBE513C")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0xBE5160", Offset = "0xBE5160", VA = "0xBE5160")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Token(Token = "0x6002351")]
		[Address(RVA = "0xBE5184", Offset = "0xBE5184", VA = "0xBE5184")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0xBE51A8", Offset = "0xBE51A8", VA = "0xBE51A8")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0xBE51F0", Offset = "0xBE51F0", VA = "0xBE51F0")]
		public uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0xBE5214", Offset = "0xBE5214", VA = "0xBE5214")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0xBE5238", Offset = "0xBE5238", VA = "0xBE5238")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Token(Token = "0x6002356")]
		[Address(RVA = "0xBE52BC", Offset = "0xBE52BC", VA = "0xBE52BC")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0xBE5474", Offset = "0xBE5474", VA = "0xBE5474")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0xBE5498", Offset = "0xBE5498", VA = "0xBE5498")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0xBE551C", Offset = "0xBE551C", VA = "0xBE551C")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Token(Token = "0x600235A")]
		[Address(RVA = "0xBE5540", Offset = "0xBE5540", VA = "0xBE5540")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0xBE5798", Offset = "0xBE5798", VA = "0xBE5798")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0xBE5990", Offset = "0xBE5990", VA = "0xBE5990")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec)
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0xBE59B4", Offset = "0xBE59B4", VA = "0xBE59B4")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0xBE5A38", Offset = "0xBE5A38", VA = "0xBE5A38")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0xBE5ABC", Offset = "0xBE5ABC", VA = "0xBE5ABC")]
		public bool IsInputAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0xBE5AE0", Offset = "0xBE5AE0", VA = "0xBE5AE0")]
		public bool IsSteamVRDrawingControllers()
		{
			return default(bool);
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0xBE5B04", Offset = "0xBE5B04", VA = "0xBE5B04")]
		public bool ShouldApplicationPause()
		{
			return default(bool);
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0xBE5B28", Offset = "0xBE5B28", VA = "0xBE5B28")]
		public bool ShouldApplicationReduceRenderingWork()
		{
			return default(bool);
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0xBE5B4C", Offset = "0xBE5B4C", VA = "0xBE5B4C")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0xBE5B70", Offset = "0xBE5B70", VA = "0xBE5B70")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0xBE5B94", Offset = "0xBE5B94", VA = "0xBE5B94")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0xBE5BB8", Offset = "0xBE5BB8", VA = "0xBE5BB8")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	[Token(Token = "0x2000586")]
	public class CVRExtendedDisplay
	{
		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRExtendedDisplay FnTable;

		[Token(Token = "0x6002373")]
		[Address(RVA = "0xBE61EC", Offset = "0xBE61EC", VA = "0xBE61EC")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0xBE6308", Offset = "0xBE6308", VA = "0xBE6308")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0xBE633C", Offset = "0xBE633C", VA = "0xBE633C")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0xBE6370", Offset = "0xBE6370", VA = "0xBE6370")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	[Token(Token = "0x2000587")]
	public class CVRTrackedCamera
	{
		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRTrackedCamera FnTable;

		[Token(Token = "0x6002377")]
		[Address(RVA = "0xBE639C", Offset = "0xBE639C", VA = "0xBE639C")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0xBE64BC", Offset = "0xBE64BC", VA = "0xBE64BC")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0xBE6540", Offset = "0xBE6540", VA = "0xBE6540")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0xBE6568", Offset = "0xBE6568", VA = "0xBE6568")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0xBE6598", Offset = "0xBE6598", VA = "0xBE6598")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237C")]
		[Address(RVA = "0xBE65BC", Offset = "0xBE65BC", VA = "0xBE65BC")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237D")]
		[Address(RVA = "0xBE65E0", Offset = "0xBE65E0", VA = "0xBE65E0")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237E")]
		[Address(RVA = "0xBE6608", Offset = "0xBE6608", VA = "0xBE6608")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600237F")]
		[Address(RVA = "0xBE662C", Offset = "0xBE662C", VA = "0xBE662C")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0xBE6650", Offset = "0xBE6650", VA = "0xBE6650")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0xBE667C", Offset = "0xBE667C", VA = "0xBE667C")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6002382")]
		[Address(RVA = "0xBE66A0", Offset = "0xBE66A0", VA = "0xBE66A0")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6002383")]
		[Address(RVA = "0xBE66C8", Offset = "0xBE66C8", VA = "0xBE66C8")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	[Token(Token = "0x2000588")]
	public class CVRApplications
	{
		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRApplications FnTable;

		[Token(Token = "0x6002384")]
		[Address(RVA = "0xBE66EC", Offset = "0xBE66EC", VA = "0xBE66EC")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0xBE680C", Offset = "0xBE680C", VA = "0xBE680C")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0xBE6834", Offset = "0xBE6834", VA = "0xBE6834")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0xBE6858", Offset = "0xBE6858", VA = "0xBE6858")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6002388")]
		[Address(RVA = "0xBE687C", Offset = "0xBE687C", VA = "0xBE687C")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6002389")]
		[Address(RVA = "0xBE68A0", Offset = "0xBE68A0", VA = "0xBE68A0")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238A")]
		[Address(RVA = "0xBE68C4", Offset = "0xBE68C4", VA = "0xBE68C4")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238B")]
		[Address(RVA = "0xBE68E8", Offset = "0xBE68E8", VA = "0xBE68E8")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238C")]
		[Address(RVA = "0xBE690C", Offset = "0xBE690C", VA = "0xBE690C")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238D")]
		[Address(RVA = "0xBE6938", Offset = "0xBE6938", VA = "0xBE6938")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238E")]
		[Address(RVA = "0xBE695C", Offset = "0xBE695C", VA = "0xBE695C")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600238F")]
		[Address(RVA = "0xBE6980", Offset = "0xBE6980", VA = "0xBE6980")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6002390")]
		[Address(RVA = "0xBE69A4", Offset = "0xBE69A4", VA = "0xBE69A4")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6002391")]
		[Address(RVA = "0xBE69C8", Offset = "0xBE69C8", VA = "0xBE69C8")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0xBE69EC", Offset = "0xBE69EC", VA = "0xBE69EC")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0xBE6A70", Offset = "0xBE6A70", VA = "0xBE6A70")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0xBE6A94", Offset = "0xBE6A94", VA = "0xBE6A94")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0xBE6AB8", Offset = "0xBE6AB8", VA = "0xBE6AB8")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002396")]
		[Address(RVA = "0xBE6ADC", Offset = "0xBE6ADC", VA = "0xBE6ADC")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0xBE6B04", Offset = "0xBE6B04", VA = "0xBE6B04")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0xBE6B28", Offset = "0xBE6B28", VA = "0xBE6B28")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0xBE6B4C", Offset = "0xBE6B4C", VA = "0xBE6B4C")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0xBE6B70", Offset = "0xBE6B70", VA = "0xBE6B70")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0xBE6B94", Offset = "0xBE6B94", VA = "0xBE6B94")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0xBE6BB8", Offset = "0xBE6BB8", VA = "0xBE6BB8")]
		public uint GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0xBE6BDC", Offset = "0xBE6BDC", VA = "0xBE6BDC")]
		public EVRApplicationError GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0xBE6C00", Offset = "0xBE6C00", VA = "0xBE6C00")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0xBE6C24", Offset = "0xBE6C24", VA = "0xBE6C24")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0xBE6C48", Offset = "0xBE6C48", VA = "0xBE6C48")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0xBE6CCC", Offset = "0xBE6CCC", VA = "0xBE6CCC")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0xBE6CF0", Offset = "0xBE6CF0", VA = "0xBE6CF0")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0xBE6D14", Offset = "0xBE6D14", VA = "0xBE6D14")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000589")]
	public class CVRChaperone
	{
		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperone FnTable;

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0xBE6D38", Offset = "0xBE6D38", VA = "0xBE6D38")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0xBE6E58", Offset = "0xBE6E58", VA = "0xBE6E58")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0xBE6E7C", Offset = "0xBE6E7C", VA = "0xBE6E7C")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0xBE6EA8", Offset = "0xBE6EA8", VA = "0xBE6EA8")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0xBE6ECC", Offset = "0xBE6ECC", VA = "0xBE6ECC")]
		public void ReloadInfo()
		{
		}

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0xBE6EF0", Offset = "0xBE6EF0", VA = "0xBE6EF0")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0xBE6F14", Offset = "0xBE6F14", VA = "0xBE6F14")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0xBE6F38", Offset = "0xBE6F38", VA = "0xBE6F38")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0xBE6F5C", Offset = "0xBE6F5C", VA = "0xBE6F5C")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	[Token(Token = "0x200058A")]
	public class CVRChaperoneSetup
	{
		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperoneSetup FnTable;

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0xBE6F84", Offset = "0xBE6F84", VA = "0xBE6F84")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0xBE70A4", Offset = "0xBE70A4", VA = "0xBE70A4")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0xBE70C8", Offset = "0xBE70C8", VA = "0xBE70C8")]
		public void RevertWorkingCopy()
		{
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0xBE70EC", Offset = "0xBE70EC", VA = "0xBE70EC")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0xBE7118", Offset = "0xBE7118", VA = "0xBE7118")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0xBE713C", Offset = "0xBE713C", VA = "0xBE713C")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0xBE71F0", Offset = "0xBE71F0", VA = "0xBE71F0")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0xBE72A4", Offset = "0xBE72A4", VA = "0xBE72A4")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0xBE72C8", Offset = "0xBE72C8", VA = "0xBE72C8")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0xBE72EC", Offset = "0xBE72EC", VA = "0xBE72EC")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0xBE7310", Offset = "0xBE7310", VA = "0xBE7310")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0xBE733C", Offset = "0xBE733C", VA = "0xBE733C")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0xBE7360", Offset = "0xBE7360", VA = "0xBE7360")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0xBE7384", Offset = "0xBE7384", VA = "0xBE7384")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0xBE73A8", Offset = "0xBE73A8", VA = "0xBE73A8")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0xBE73CC", Offset = "0xBE73CC", VA = "0xBE73CC")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0xBE73F8", Offset = "0xBE73F8", VA = "0xBE73F8")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0xBE74AC", Offset = "0xBE74AC", VA = "0xBE74AC")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0xBE74D8", Offset = "0xBE74D8", VA = "0xBE74D8")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0xBE758C", Offset = "0xBE758C", VA = "0xBE758C")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0xBE75B4", Offset = "0xBE75B4", VA = "0xBE75B4")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200058B")]
	public class CVRCompositor
	{
		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRCompositor FnTable;

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0xBE75D8", Offset = "0xBE75D8", VA = "0xBE75D8")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0xBE76F8", Offset = "0xBE76F8", VA = "0xBE76F8")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0xBE771C", Offset = "0xBE771C", VA = "0xBE771C")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0xBE7740", Offset = "0xBE7740", VA = "0xBE7740")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0xBE7778", Offset = "0xBE7778", VA = "0xBE7778")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0xBE77B0", Offset = "0xBE77B0", VA = "0xBE77B0")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0xBE77D4", Offset = "0xBE77D4", VA = "0xBE77D4")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0xBE77F8", Offset = "0xBE77F8", VA = "0xBE77F8")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0xBE781C", Offset = "0xBE781C", VA = "0xBE781C")]
		public void PostPresentHandoff()
		{
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0xBE7840", Offset = "0xBE7840", VA = "0xBE7840")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0xBE7864", Offset = "0xBE7864", VA = "0xBE7864")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Token(Token = "0x60023CD")]
		[Address(RVA = "0xBE7888", Offset = "0xBE7888", VA = "0xBE7888")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0xBE78AC", Offset = "0xBE78AC", VA = "0xBE78AC")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0xBE78D0", Offset = "0xBE78D0", VA = "0xBE78D0")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0xBE78F8", Offset = "0xBE78F8", VA = "0xBE78F8")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0xBE7920", Offset = "0xBE7920", VA = "0xBE7920")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0xBE7948", Offset = "0xBE7948", VA = "0xBE7948")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0xBE796C", Offset = "0xBE796C", VA = "0xBE796C")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0xBE7998", Offset = "0xBE7998", VA = "0xBE7998")]
		public void ClearSkyboxOverride()
		{
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0xBE79BC", Offset = "0xBE79BC", VA = "0xBE79BC")]
		public void CompositorBringToFront()
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0xBE79E0", Offset = "0xBE79E0", VA = "0xBE79E0")]
		public void CompositorGoToBack()
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0xBE7A04", Offset = "0xBE7A04", VA = "0xBE7A04")]
		public void CompositorQuit()
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0xBE7A28", Offset = "0xBE7A28", VA = "0xBE7A28")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0xBE7A4C", Offset = "0xBE7A4C", VA = "0xBE7A4C")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0xBE7A70", Offset = "0xBE7A70", VA = "0xBE7A70")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0xBE7A94", Offset = "0xBE7A94", VA = "0xBE7A94")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0xBE7AB8", Offset = "0xBE7AB8", VA = "0xBE7AB8")]
		public void ShowMirrorWindow()
		{
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0xBE7ADC", Offset = "0xBE7ADC", VA = "0xBE7ADC")]
		public void HideMirrorWindow()
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0xBE7B00", Offset = "0xBE7B00", VA = "0xBE7B00")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0xBE7B24", Offset = "0xBE7B24", VA = "0xBE7B24")]
		public void CompositorDumpImages()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0xBE7B48", Offset = "0xBE7B48", VA = "0xBE7B48")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0xBE7B6C", Offset = "0xBE7B6C", VA = "0xBE7B6C")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0xBE7B94", Offset = "0xBE7B94", VA = "0xBE7B94")]
		public void ForceReconnectProcess()
		{
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0xBE7BB8", Offset = "0xBE7BB8", VA = "0xBE7BB8")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0xBE7BE0", Offset = "0xBE7BE0", VA = "0xBE7BE0")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0xBE7C04", Offset = "0xBE7C04", VA = "0xBE7C04")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0xBE7C28", Offset = "0xBE7C28", VA = "0xBE7C28")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0xBE7C50", Offset = "0xBE7C50", VA = "0xBE7C50")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0xBE7C74", Offset = "0xBE7C74", VA = "0xBE7C74")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0xBE7C98", Offset = "0xBE7C98", VA = "0xBE7C98")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0xBE7CBC", Offset = "0xBE7CBC", VA = "0xBE7CBC")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0xBE7CE0", Offset = "0xBE7CE0", VA = "0xBE7CE0")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0xBE7D04", Offset = "0xBE7D04", VA = "0xBE7D04")]
		public void SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode)
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0xBE7D28", Offset = "0xBE7D28", VA = "0xBE7D28")]
		public EVRCompositorError SubmitExplicitTimingData()
		{
			return default(EVRCompositorError);
		}
	}
	[Token(Token = "0x200058C")]
	public class CVROverlay
	{
		[Token(Token = "0x200058D")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x200058E")]
		private struct PollNextOverlayEventUnion
		{
			[Token(Token = "0x4001A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Token(Token = "0x4001A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVROverlay FnTable;

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0xBE7D4C", Offset = "0xBE7D4C", VA = "0xBE7D4C")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0xBE7E6C", Offset = "0xBE7E6C", VA = "0xBE7E6C")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0xBE7E94", Offset = "0xBE7E94", VA = "0xBE7E94")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0xBE7EBC", Offset = "0xBE7EBC", VA = "0xBE7EBC")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0xBE7EE0", Offset = "0xBE7EE0", VA = "0xBE7EE0")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0xBE7F04", Offset = "0xBE7F04", VA = "0xBE7F04")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0xBE7F28", Offset = "0xBE7F28", VA = "0xBE7F28")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60023F5")]
		[Address(RVA = "0xBE7F4C", Offset = "0xBE7F4C", VA = "0xBE7F4C")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0xBE7F70", Offset = "0xBE7F70", VA = "0xBE7F70")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0xBE7F94", Offset = "0xBE7F94", VA = "0xBE7F94")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023F8")]
		[Address(RVA = "0xBE7FC0", Offset = "0xBE7FC0", VA = "0xBE7FC0")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0xBE8044", Offset = "0xBE8044", VA = "0xBE8044")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0xBE8068", Offset = "0xBE8068", VA = "0xBE8068")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0xBE808C", Offset = "0xBE808C", VA = "0xBE808C")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0xBE80B4", Offset = "0xBE80B4", VA = "0xBE80B4")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0xBE80DC", Offset = "0xBE80DC", VA = "0xBE80DC")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0xBE8100", Offset = "0xBE8100", VA = "0xBE8100")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0xBE8130", Offset = "0xBE8130", VA = "0xBE8130")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0xBE8154", Offset = "0xBE8154", VA = "0xBE8154")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0xBE817C", Offset = "0xBE817C", VA = "0xBE817C")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0xBE81A0", Offset = "0xBE81A0", VA = "0xBE81A0")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0xBE81C8", Offset = "0xBE81C8", VA = "0xBE81C8")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0xBE81EC", Offset = "0xBE81EC", VA = "0xBE81EC")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0xBE8214", Offset = "0xBE8214", VA = "0xBE8214")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0xBE8238", Offset = "0xBE8238", VA = "0xBE8238")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0xBE8260", Offset = "0xBE8260", VA = "0xBE8260")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0xBE8284", Offset = "0xBE8284", VA = "0xBE8284")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0xBE82B0", Offset = "0xBE82B0", VA = "0xBE82B0")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0xBE82D4", Offset = "0xBE82D4", VA = "0xBE82D4")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0xBE82F8", Offset = "0xBE82F8", VA = "0xBE82F8")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0xBE831C", Offset = "0xBE831C", VA = "0xBE831C")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0xBE8340", Offset = "0xBE8340", VA = "0xBE8340")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0xBE8364", Offset = "0xBE8364", VA = "0xBE8364")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0xBE8388", Offset = "0xBE8388", VA = "0xBE8388")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0xBE83AC", Offset = "0xBE83AC", VA = "0xBE83AC")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0xBE83D0", Offset = "0xBE83D0", VA = "0xBE83D0")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0xBE83F4", Offset = "0xBE83F4", VA = "0xBE83F4")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0xBE8418", Offset = "0xBE8418", VA = "0xBE8418")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0xBE8440", Offset = "0xBE8440", VA = "0xBE8440")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0xBE8464", Offset = "0xBE8464", VA = "0xBE8464")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0xBE848C", Offset = "0xBE848C", VA = "0xBE848C")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0xBE84B4", Offset = "0xBE84B4", VA = "0xBE84B4")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0xBE84D8", Offset = "0xBE84D8", VA = "0xBE84D8")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0xBE84FC", Offset = "0xBE84FC", VA = "0xBE84FC")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0xBE8520", Offset = "0xBE8520", VA = "0xBE8520")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0xBE8544", Offset = "0xBE8544", VA = "0xBE8544")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0xBE8568", Offset = "0xBE8568", VA = "0xBE8568")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0xBE8714", Offset = "0xBE8714", VA = "0xBE8714")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0xBE8738", Offset = "0xBE8738", VA = "0xBE8738")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0xBE875C", Offset = "0xBE875C", VA = "0xBE875C")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0xBE8780", Offset = "0xBE8780", VA = "0xBE8780")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0xBE87A4", Offset = "0xBE87A4", VA = "0xBE87A4")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0xBE87C8", Offset = "0xBE87C8", VA = "0xBE87C8")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0xBE87EC", Offset = "0xBE87EC", VA = "0xBE87EC")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0xBE8810", Offset = "0xBE8810", VA = "0xBE8810")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0xBE8834", Offset = "0xBE8834", VA = "0xBE8834")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0xBE8858", Offset = "0xBE8858", VA = "0xBE8858")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0xBE887C", Offset = "0xBE887C", VA = "0xBE887C")]
		public EVROverlayError SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0xBE88A0", Offset = "0xBE88A0", VA = "0xBE88A0")]
		public EVROverlayError GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0xBE88C8", Offset = "0xBE88C8", VA = "0xBE88C8")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0xBE88EC", Offset = "0xBE88EC", VA = "0xBE88EC")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0xBE8910", Offset = "0xBE8910", VA = "0xBE8910")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0xBE8934", Offset = "0xBE8934", VA = "0xBE8934")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0xBE8958", Offset = "0xBE8958", VA = "0xBE8958")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0xBE8994", Offset = "0xBE8994", VA = "0xBE8994")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600242F")]
		[Address(RVA = "0xBE89B8", Offset = "0xBE89B8", VA = "0xBE89B8")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0xBE89E4", Offset = "0xBE89E4", VA = "0xBE89E4")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0xBE8A10", Offset = "0xBE8A10", VA = "0xBE8A10")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0xBE8A34", Offset = "0xBE8A34", VA = "0xBE8A34")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0xBE8A58", Offset = "0xBE8A58", VA = "0xBE8A58")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0xBE8A7C", Offset = "0xBE8A7C", VA = "0xBE8A7C")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0xBE8AA4", Offset = "0xBE8AA4", VA = "0xBE8AA4")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0xBE8AC8", Offset = "0xBE8AC8", VA = "0xBE8AC8")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0xBE8AEC", Offset = "0xBE8AEC", VA = "0xBE8AEC")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0xBE8B18", Offset = "0xBE8B18", VA = "0xBE8B18")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6002439")]
		[Address(RVA = "0xBE8B48", Offset = "0xBE8B48", VA = "0xBE8B48")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Token(Token = "0x600243A")]
		[Address(RVA = "0xBE8B6C", Offset = "0xBE8B6C", VA = "0xBE8B6C")]
		public void HideKeyboard()
		{
		}

		[Token(Token = "0x600243B")]
		[Address(RVA = "0xBE8B90", Offset = "0xBE8B90", VA = "0xBE8B90")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0xBE8BB4", Offset = "0xBE8BB4", VA = "0xBE8BB4")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0xBE8BD8", Offset = "0xBE8BD8", VA = "0xBE8BD8")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0xBE8BFC", Offset = "0xBE8BFC", VA = "0xBE8BFC")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0xBE8C24", Offset = "0xBE8C24", VA = "0xBE8C24")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0xBE8C48", Offset = "0xBE8C48", VA = "0xBE8C48")]
		public void CloseMessageOverlay()
		{
		}
	}
	[Token(Token = "0x200058F")]
	public class CVRRenderModels
	{
		[Token(Token = "0x2000590")]
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		[Token(Token = "0x2000591")]
		private struct GetComponentStateUnion
		{
			[Token(Token = "0x4001A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Token(Token = "0x4001A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRRenderModels FnTable;

		[Token(Token = "0x6002445")]
		[Address(RVA = "0xBE8E68", Offset = "0xBE8E68", VA = "0xBE8E68")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002446")]
		[Address(RVA = "0xBE8F88", Offset = "0xBE8F88", VA = "0xBE8F88")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0xBE8FAC", Offset = "0xBE8FAC", VA = "0xBE8FAC")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0xBE8FD0", Offset = "0xBE8FD0", VA = "0xBE8FD0")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0xBE8FF4", Offset = "0xBE8FF4", VA = "0xBE8FF4")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0xBE9018", Offset = "0xBE9018", VA = "0xBE9018")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0xBE903C", Offset = "0xBE903C", VA = "0xBE903C")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0xBE9060", Offset = "0xBE9060", VA = "0xBE9060")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Token(Token = "0x600244D")]
		[Address(RVA = "0xBE9084", Offset = "0xBE9084", VA = "0xBE9084")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0xBE90A8", Offset = "0xBE90A8", VA = "0xBE90A8")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0xBE90CC", Offset = "0xBE90CC", VA = "0xBE90CC")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Token(Token = "0x6002450")]
		[Address(RVA = "0xBE90F0", Offset = "0xBE90F0", VA = "0xBE90F0")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0xBE9114", Offset = "0xBE9114", VA = "0xBE9114")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002452")]
		[Address(RVA = "0xBE9138", Offset = "0xBE9138", VA = "0xBE9138")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6002453")]
		[Address(RVA = "0xBE915C", Offset = "0xBE915C", VA = "0xBE915C")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0xBE92B4", Offset = "0xBE92B4", VA = "0xBE92B4")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0xBE92D8", Offset = "0xBE92D8", VA = "0xBE92D8")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0xBE92FC", Offset = "0xBE92FC", VA = "0xBE92FC")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0xBE9320", Offset = "0xBE9320", VA = "0xBE9320")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	[Token(Token = "0x2000592")]
	public class CVRNotifications
	{
		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRNotifications FnTable;

		[Token(Token = "0x600245C")]
		[Address(RVA = "0xBE95D4", Offset = "0xBE95D4", VA = "0xBE95D4")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600245D")]
		[Address(RVA = "0xBE96E8", Offset = "0xBE96E8", VA = "0xBE96E8")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Token(Token = "0x600245E")]
		[Address(RVA = "0xBE9714", Offset = "0xBE9714", VA = "0xBE9714")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	[Token(Token = "0x2000593")]
	public class CVRSettings
	{
		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSettings FnTable;

		[Token(Token = "0x600245F")]
		[Address(RVA = "0xBE9738", Offset = "0xBE9738", VA = "0xBE9738")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002460")]
		[Address(RVA = "0xBE9858", Offset = "0xBE9858", VA = "0xBE9858")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Token(Token = "0x6002461")]
		[Address(RVA = "0xBE98DC", Offset = "0xBE98DC", VA = "0xBE98DC")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6002462")]
		[Address(RVA = "0xBE9904", Offset = "0xBE9904", VA = "0xBE9904")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0xBE992C", Offset = "0xBE992C", VA = "0xBE992C")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0xBE9950", Offset = "0xBE9950", VA = "0xBE9950")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6002465")]
		[Address(RVA = "0xBE9974", Offset = "0xBE9974", VA = "0xBE9974")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6002466")]
		[Address(RVA = "0xBE9998", Offset = "0xBE9998", VA = "0xBE9998")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6002467")]
		[Address(RVA = "0xBE99BC", Offset = "0xBE99BC", VA = "0xBE99BC")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Token(Token = "0x6002468")]
		[Address(RVA = "0xBE99E0", Offset = "0xBE99E0", VA = "0xBE99E0")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Token(Token = "0x6002469")]
		[Address(RVA = "0xBE9A04", Offset = "0xBE9A04", VA = "0xBE9A04")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600246A")]
		[Address(RVA = "0xBE9A28", Offset = "0xBE9A28", VA = "0xBE9A28")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600246B")]
		[Address(RVA = "0xBE9A4C", Offset = "0xBE9A4C", VA = "0xBE9A4C")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	[Token(Token = "0x2000594")]
	public class CVRScreenshots
	{
		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRScreenshots FnTable;

		[Token(Token = "0x600246C")]
		[Address(RVA = "0xBE9A70", Offset = "0xBE9A70", VA = "0xBE9A70")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600246D")]
		[Address(RVA = "0xBE9B98", Offset = "0xBE9B98", VA = "0xBE9B98")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600246E")]
		[Address(RVA = "0xBE9BC0", Offset = "0xBE9BC0", VA = "0xBE9BC0")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600246F")]
		[Address(RVA = "0xBE9BEC", Offset = "0xBE9BEC", VA = "0xBE9BEC")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Token(Token = "0x6002470")]
		[Address(RVA = "0xBE9C10", Offset = "0xBE9C10", VA = "0xBE9C10")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6002471")]
		[Address(RVA = "0xBE9C34", Offset = "0xBE9C34", VA = "0xBE9C34")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6002472")]
		[Address(RVA = "0xBE9C58", Offset = "0xBE9C58", VA = "0xBE9C58")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6002473")]
		[Address(RVA = "0xBE9C80", Offset = "0xBE9C80", VA = "0xBE9C80")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	[Token(Token = "0x2000595")]
	public class CVRResources
	{
		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRResources FnTable;

		[Token(Token = "0x6002474")]
		[Address(RVA = "0xBE9CA4", Offset = "0xBE9CA4", VA = "0xBE9CA4")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0xBE9DB8", Offset = "0xBE9DB8", VA = "0xBE9DB8")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6002476")]
		[Address(RVA = "0xBE9DDC", Offset = "0xBE9DDC", VA = "0xBE9DDC")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000596")]
	public class CVRDriverManager
	{
		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRDriverManager FnTable;

		[Token(Token = "0x6002477")]
		[Address(RVA = "0xBE9E00", Offset = "0xBE9E00", VA = "0xBE9E00")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0xBE9F14", Offset = "0xBE9F14", VA = "0xBE9F14")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0xBE9F38", Offset = "0xBE9F38", VA = "0xBE9F38")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000597")]
	public class OpenVRInterop
	{
		[PreserveSig]
		[Token(Token = "0x600247A")]
		[Address(RVA = "0xBE9F5C", Offset = "0xBE9F5C", VA = "0xBE9F5C")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Token(Token = "0x600247B")]
		[Address(RVA = "0xBE9FE0", Offset = "0xBE9FE0", VA = "0xBE9FE0")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Token(Token = "0x600247C")]
		[Address(RVA = "0xBEA044", Offset = "0xBEA044", VA = "0xBEA044")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Token(Token = "0x600247D")]
		[Address(RVA = "0xBEA0B4", Offset = "0xBEA0B4", VA = "0xBEA0B4")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Token(Token = "0x600247E")]
		[Address(RVA = "0xBEA124", Offset = "0xBEA124", VA = "0xBEA124")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Token(Token = "0x600247F")]
		[Address(RVA = "0xBEA1A0", Offset = "0xBEA1A0", VA = "0xBEA1A0")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Token(Token = "0x6002480")]
		[Address(RVA = "0xBEA23C", Offset = "0xBEA23C", VA = "0xBEA23C")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Token(Token = "0x6002481")]
		[Address(RVA = "0xBEA2D4", Offset = "0xBEA2D4", VA = "0xBEA2D4")]
		internal static extern uint GetInitToken();

		[Token(Token = "0x6002482")]
		[Address(RVA = "0xBEA33C", Offset = "0xBEA33C", VA = "0xBEA33C")]
		public OpenVRInterop()
		{
		}
	}
	[Token(Token = "0x2000598")]
	public enum EVREye
	{
		[Token(Token = "0x4001A13")]
		Eye_Left,
		[Token(Token = "0x4001A14")]
		Eye_Right
	}
	[Token(Token = "0x2000599")]
	public enum ETextureType
	{
		[Token(Token = "0x4001A16")]
		DirectX,
		[Token(Token = "0x4001A17")]
		OpenGL,
		[Token(Token = "0x4001A18")]
		Vulkan,
		[Token(Token = "0x4001A19")]
		IOSurface,
		[Token(Token = "0x4001A1A")]
		DirectX12
	}
	[Token(Token = "0x200059A")]
	public enum EColorSpace
	{
		[Token(Token = "0x4001A1C")]
		Auto,
		[Token(Token = "0x4001A1D")]
		Gamma,
		[Token(Token = "0x4001A1E")]
		Linear
	}
	[Token(Token = "0x200059B")]
	public enum ETrackingResult
	{
		[Token(Token = "0x4001A20")]
		Uninitialized = 1,
		[Token(Token = "0x4001A21")]
		Calibrating_InProgress = 100,
		[Token(Token = "0x4001A22")]
		Calibrating_OutOfRange = 101,
		[Token(Token = "0x4001A23")]
		Running_OK = 200,
		[Token(Token = "0x4001A24")]
		Running_OutOfRange = 201
	}
	[Token(Token = "0x200059C")]
	public enum ETrackedDeviceClass
	{
		[Token(Token = "0x4001A26")]
		Invalid,
		[Token(Token = "0x4001A27")]
		HMD,
		[Token(Token = "0x4001A28")]
		Controller,
		[Token(Token = "0x4001A29")]
		GenericTracker,
		[Token(Token = "0x4001A2A")]
		TrackingReference,
		[Token(Token = "0x4001A2B")]
		DisplayRedirect
	}
	[Token(Token = "0x200059D")]
	public enum ETrackedControllerRole
	{
		[Token(Token = "0x4001A2D")]
		Invalid,
		[Token(Token = "0x4001A2E")]
		LeftHand,
		[Token(Token = "0x4001A2F")]
		RightHand
	}
	[Token(Token = "0x200059E")]
	public enum ETrackingUniverseOrigin
	{
		[Token(Token = "0x4001A31")]
		TrackingUniverseSeated,
		[Token(Token = "0x4001A32")]
		TrackingUniverseStanding,
		[Token(Token = "0x4001A33")]
		TrackingUniverseRawAndUncalibrated
	}
	[Token(Token = "0x200059F")]
	public enum ETrackedDeviceProperty
	{
		[Token(Token = "0x4001A35")]
		Prop_Invalid = 0,
		[Token(Token = "0x4001A36")]
		Prop_TrackingSystemName_String = 1000,
		[Token(Token = "0x4001A37")]
		Prop_ModelNumber_String = 1001,
		[Token(Token = "0x4001A38")]
		Prop_SerialNumber_String = 1002,
		[Token(Token = "0x4001A39")]
		Prop_RenderModelName_String = 1003,
		[Token(Token = "0x4001A3A")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Token(Token = "0x4001A3B")]
		Prop_ManufacturerName_String = 1005,
		[Token(Token = "0x4001A3C")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Token(Token = "0x4001A3D")]
		Prop_HardwareRevision_String = 1007,
		[Token(Token = "0x4001A3E")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Token(Token = "0x4001A3F")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Token(Token = "0x4001A40")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Token(Token = "0x4001A41")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Token(Token = "0x4001A42")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Token(Token = "0x4001A43")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Token(Token = "0x4001A44")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Token(Token = "0x4001A45")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Token(Token = "0x4001A46")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Token(Token = "0x4001A47")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Token(Token = "0x4001A48")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Token(Token = "0x4001A49")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Token(Token = "0x4001A4A")]
		Prop_VRCVersion_Uint64 = 1020,
		[Token(Token = "0x4001A4B")]
		Prop_RadioVersion_Uint64 = 1021,
		[Token(Token = "0x4001A4C")]
		Prop_DongleVersion_Uint64 = 1022,
		[Token(Token = "0x4001A4D")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Token(Token = "0x4001A4E")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Token(Token = "0x4001A4F")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Token(Token = "0x4001A50")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Token(Token = "0x4001A51")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Token(Token = "0x4001A52")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Token(Token = "0x4001A53")]
		Prop_DeviceClass_Int32 = 1029,
		[Token(Token = "0x4001A54")]
		Prop_HasCamera_Bool = 1030,
		[Token(Token = "0x4001A55")]
		Prop_DriverVersion_String = 1031,
		[Token(Token = "0x4001A56")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Token(Token = "0x4001A57")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Token(Token = "0x4001A58")]
		Prop_ParentDriver_Uint64 = 1034,
		[Token(Token = "0x4001A59")]
		Prop_ResourceRoot_String = 1035,
		[Token(Token = "0x4001A5A")]
		Prop_RegisteredDeviceType_String = 1036,
		[Token(Token = "0x4001A5B")]
		Prop_InputProfilePath_String = 1037,
		[Token(Token = "0x4001A5C")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Token(Token = "0x4001A5D")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Token(Token = "0x4001A5E")]
		Prop_DisplayFrequency_Float = 2002,
		[Token(Token = "0x4001A5F")]
		Prop_UserIpdMeters_Float = 2003,
		[Token(Token = "0x4001A60")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Token(Token = "0x4001A61")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Token(Token = "0x4001A62")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Token(Token = "0x4001A63")]
		Prop_IsOnDesktop_Bool = 2007,
		[Token(Token = "0x4001A64")]
		Prop_DisplayMCType_Int32 = 2008,
		[Token(Token = "0x4001A65")]
		Prop_DisplayMCOffset_Float = 2009,
		[Token(Token = "0x4001A66")]
		Prop_DisplayMCScale_Float = 2010,
		[Token(Token = "0x4001A67")]
		Prop_EdidVendorID_Int32 = 2011,
		[Token(Token = "0x4001A68")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Token(Token = "0x4001A69")]
		Prop_DisplayMCImageRight_String = 2013,
		[Token(Token = "0x4001A6A")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Token(Token = "0x4001A6B")]
		Prop_EdidProductID_Int32 = 2015,
		[Token(Token = "0x4001A6C")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Token(Token = "0x4001A6D")]
		Prop_DisplayGCType_Int32 = 2017,
		[Token(Token = "0x4001A6E")]
		Prop_DisplayGCOffset_Float = 2018,
		[Token(Token = "0x4001A6F")]
		Prop_DisplayGCScale_Float = 2019,
		[Token(Token = "0x4001A70")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Token(Token = "0x4001A71")]
		Prop_DisplayGCImage_String = 2021,
		[Token(Token = "0x4001A72")]
		Prop_LensCenterLeftU_Float = 2022,
		[Token(Token = "0x4001A73")]
		Prop_LensCenterLeftV_Float = 2023,
		[Token(Token = "0x4001A74")]
		Prop_LensCenterRightU_Float = 2024,
		[Token(Token = "0x4001A75")]
		Prop_LensCenterRightV_Float = 2025,
		[Token(Token = "0x4001A76")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Token(Token = "0x4001A77")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Token(Token = "0x4001A78")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Token(Token = "0x4001A79")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Token(Token = "0x4001A7A")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Token(Token = "0x4001A7B")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Token(Token = "0x4001A7C")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Token(Token = "0x4001A7D")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Token(Token = "0x4001A7E")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Token(Token = "0x4001A7F")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Token(Token = "0x4001A80")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Token(Token = "0x4001A81")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Token(Token = "0x4001A82")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Token(Token = "0x4001A83")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Token(Token = "0x4001A84")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Token(Token = "0x4001A85")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Token(Token = "0x4001A86")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Token(Token = "0x4001A87")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Token(Token = "0x4001A88")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Token(Token = "0x4001A89")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Token(Token = "0x4001A8A")]
		Prop_DriverProvidedChaperonePath_String = 2048,
		[Token(Token = "0x4001A8B")]
		Prop_ExpectedTrackingReferenceCount_Int32 = 2049,
		[Token(Token = "0x4001A8C")]
		Prop_ExpectedControllerCount_Int32 = 2050,
		[Token(Token = "0x4001A8D")]
		Prop_NamedIconPathControllerLeftDeviceOff_String = 2051,
		[Token(Token = "0x4001A8E")]
		Prop_NamedIconPathControllerRightDeviceOff_String = 2052,
		[Token(Token = "0x4001A8F")]
		Prop_NamedIconPathTrackingReferenceDeviceOff_String = 2053,
		[Token(Token = "0x4001A90")]
		Prop_DoNotApplyPrediction_Bool = 2054,
		[Token(Token = "0x4001A91")]
		Prop_CameraToHeadTransforms_Matrix34_Array = 2055,
		[Token(Token = "0x4001A92")]
		Prop_DriverIsDrawingControllers_Bool = 2057,
		[Token(Token = "0x4001A93")]
		Prop_DriverRequestsApplicationPause_Bool = 2058,
		[Token(Token = "0x4001A94")]
		Prop_DriverRequestsReducedRendering_Bool = 2059,
		[Token(Token = "0x4001A95")]
		Prop_AttachedDeviceId_String = 3000,
		[Token(Token = "0x4001A96")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Token(Token = "0x4001A97")]
		Prop_Axis0Type_Int32 = 3002,
		[Token(Token = "0x4001A98")]
		Prop_Axis1Type_Int32 = 3003,
		[Token(Token = "0x4001A99")]
		Prop_Axis2Type_Int32 = 3004,
		[Token(Token = "0x4001A9A")]
		Prop_Axis3Type_Int32 = 3005,
		[Token(Token = "0x4001A9B")]
		Prop_Axis4Type_Int32 = 3006,
		[Token(Token = "0x4001A9C")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Token(Token = "0x4001A9D")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Token(Token = "0x4001A9E")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Token(Token = "0x4001A9F")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Token(Token = "0x4001AA0")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Token(Token = "0x4001AA1")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Token(Token = "0x4001AA2")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Token(Token = "0x4001AA3")]
		Prop_ModeLabel_String = 4006,
		[Token(Token = "0x4001AA4")]
		Prop_IconPathName_String = 5000,
		[Token(Token = "0x4001AA5")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Token(Token = "0x4001AA6")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Token(Token = "0x4001AA7")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Token(Token = "0x4001AA8")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Token(Token = "0x4001AA9")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Token(Token = "0x4001AAA")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Token(Token = "0x4001AAB")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Token(Token = "0x4001AAC")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Token(Token = "0x4001AAD")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Token(Token = "0x4001AAE")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Token(Token = "0x4001AAF")]
		Prop_ParentContainer = 5151,
		[Token(Token = "0x4001AB0")]
		Prop_UserConfigPath_String = 6000,
		[Token(Token = "0x4001AB1")]
		Prop_InstallPath_String = 6001,
		[Token(Token = "0x4001AB2")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Token(Token = "0x4001AB3")]
		Prop_HasControllerComponent_Bool = 6003,
		[Token(Token = "0x4001AB4")]
		Prop_HasCameraComponent_Bool = 6004,
		[Token(Token = "0x4001AB5")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Token(Token = "0x4001AB6")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Token(Token = "0x4001AB7")]
		Prop_ControllerType_String = 7000,
		[Token(Token = "0x4001AB8")]
		Prop_LegacyInputProfile_String = 7001,
		[Token(Token = "0x4001AB9")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4001ABA")]
		Prop_VendorSpecific_Reserved_End = 10999,
		[Token(Token = "0x4001ABB")]
		Prop_TrackedDeviceProperty_Max = 1000000
	}
	[Token(Token = "0x20005A0")]
	public enum ETrackedPropertyError
	{
		[Token(Token = "0x4001ABD")]
		TrackedProp_Success,
		[Token(Token = "0x4001ABE")]
		TrackedProp_WrongDataType,
		[Token(Token = "0x4001ABF")]
		TrackedProp_WrongDeviceClass,
		[Token(Token = "0x4001AC0")]
		TrackedProp_BufferTooSmall,
		[Token(Token = "0x4001AC1")]
		TrackedProp_UnknownProperty,
		[Token(Token = "0x4001AC2")]
		TrackedProp_InvalidDevice,
		[Token(Token = "0x4001AC3")]
		TrackedProp_CouldNotContactServer,
		[Token(Token = "0x4001AC4")]
		TrackedProp_ValueNotProvidedByDevice,
		[Token(Token = "0x4001AC5")]
		TrackedProp_StringExceedsMaximumLength,
		[Token(Token = "0x4001AC6")]
		TrackedProp_NotYetAvailable,
		[Token(Token = "0x4001AC7")]
		TrackedProp_PermissionDenied,
		[Token(Token = "0x4001AC8")]
		TrackedProp_InvalidOperation,
		[Token(Token = "0x4001AC9")]
		TrackedProp_CannotWriteToWildcards
	}
	[Token(Token = "0x20005A1")]
	public enum EVRSubmitFlags
	{
		[Token(Token = "0x4001ACB")]
		Submit_Default = 0,
		[Token(Token = "0x4001ACC")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Token(Token = "0x4001ACD")]
		Submit_GlRenderBuffer = 2,
		[Token(Token = "0x4001ACE")]
		Submit_Reserved = 4,
		[Token(Token = "0x4001ACF")]
		Submit_TextureWithPose = 8,
		[Token(Token = "0x4001AD0")]
		Submit_TextureWithDepth = 0x10
	}
	[Token(Token = "0x20005A2")]
	public enum EVRState
	{
		[Token(Token = "0x4001AD2")]
		Undefined = -1,
		[Token(Token = "0x4001AD3")]
		Off,
		[Token(Token = "0x4001AD4")]
		Searching,
		[Token(Token = "0x4001AD5")]
		Searching_Alert,
		[Token(Token = "0x4001AD6")]
		Ready,
		[Token(Token = "0x4001AD7")]
		Ready_Alert,
		[Token(Token = "0x4001AD8")]
		NotReady,
		[Token(Token = "0x4001AD9")]
		Standby,
		[Token(Token = "0x4001ADA")]
		Ready_Alert_Low
	}
	[Token(Token = "0x20005A3")]
	public enum EVREventType
	{
		[Token(Token = "0x4001ADC")]
		VREvent_None = 0,
		[Token(Token = "0x4001ADD")]
		VREvent_TrackedDeviceActivated = 100,
		[Token(Token = "0x4001ADE")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Token(Token = "0x4001ADF")]
		VREvent_TrackedDeviceUpdated = 102,
		[Token(Token = "0x4001AE0")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Token(Token = "0x4001AE1")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Token(Token = "0x4001AE2")]
		VREvent_IpdChanged = 105,
		[Token(Token = "0x4001AE3")]
		VREvent_EnterStandbyMode = 106,
		[Token(Token = "0x4001AE4")]
		VREvent_LeaveStandbyMode = 107,
		[Token(Token = "0x4001AE5")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Token(Token = "0x4001AE6")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Token(Token = "0x4001AE7")]
		VREvent_LensDistortionChanged = 110,
		[Token(Token = "0x4001AE8")]
		VREvent_PropertyChanged = 111,
		[Token(Token = "0x4001AE9")]
		VREvent_WirelessDisconnect = 112,
		[Token(Token = "0x4001AEA")]
		VREvent_WirelessReconnect = 113,
		[Token(Token = "0x4001AEB")]
		VREvent_ButtonPress = 200,
		[Token(Token = "0x4001AEC")]
		VREvent_ButtonUnpress = 201,
		[Token(Token = "0x4001AED")]
		VREvent_ButtonTouch = 202,
		[Token(Token = "0x4001AEE")]
		VREvent_ButtonUntouch = 203,
		[Token(Token = "0x4001AEF")]
		VREvent_DualAnalog_Press = 250,
		[Token(Token = "0x4001AF0")]
		VREvent_DualAnalog_Unpress = 251,
		[Token(Token = "0x4001AF1")]
		VREvent_DualAnalog_Touch = 252,
		[Token(Token = "0x4001AF2")]
		VREvent_DualAnalog_Untouch = 253,
		[Token(Token = "0x4001AF3")]
		VREvent_DualAnalog_Move = 254,
		[Token(Token = "0x4001AF4")]
		VREvent_DualAnalog_ModeSwitch1 = 255,
		[Token(Token = "0x4001AF5")]
		VREvent_DualAnalog_ModeSwitch2 = 256,
		[Token(Token = "0x4001AF6")]
		VREvent_DualAnalog_Cancel = 257,
		[Token(Token = "0x4001AF7")]
		VREvent_MouseMove = 300,
		[Token(Token = "0x4001AF8")]
		VREvent_MouseButtonDown = 301,
		[Token(Token = "0x4001AF9")]
		VREvent_MouseButtonUp = 302,
		[Token(Token = "0x4001AFA")]
		VREvent_FocusEnter = 303,
		[Token(Token = "0x4001AFB")]
		VREvent_FocusLeave = 304,
		[Token(Token = "0x4001AFC")]
		VREvent_Scroll = 305,
		[Token(Token = "0x4001AFD")]
		VREvent_TouchPadMove = 306,
		[Token(Token = "0x4001AFE")]
		VREvent_OverlayFocusChanged = 307,
		[Token(Token = "0x4001AFF")]
		VREvent_InputFocusCaptured = 400,
		[Token(Token = "0x4001B00")]
		VREvent_InputFocusReleased = 401,
		[Token(Token = "0x4001B01")]
		VREvent_SceneFocusLost = 402,
		[Token(Token = "0x4001B02")]
		VREvent_SceneFocusGained = 403,
		[Token(Token = "0x4001B03")]
		VREvent_SceneApplicationChanged = 404,
		[Token(Token = "0x4001B04")]
		VREvent_SceneFocusChanged = 405,
		[Token(Token = "0x4001B05")]
		VREvent_InputFocusChanged = 406,
		[Token(Token = "0x4001B06")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Token(Token = "0x4001B07")]
		VREvent_HideRenderModels = 410,
		[Token(Token = "0x4001B08")]
		VREvent_ShowRenderModels = 411,
		[Token(Token = "0x4001B09")]
		VREvent_ConsoleOpened = 420,
		[Token(Token = "0x4001B0A")]
		VREvent_ConsoleClosed = 421,
		[Token(Token = "0x4001B0B")]
		VREvent_OverlayShown = 500,
		[Token(Token = "0x4001B0C")]
		VREvent_OverlayHidden = 501,
		[Token(Token = "0x4001B0D")]
		VREvent_DashboardActivated = 502,
		[Token(Token = "0x4001B0E")]
		VREvent_DashboardDeactivated = 503,
		[Token(Token = "0x4001B0F")]
		VREvent_DashboardThumbSelected = 504,
		[Token(Token = "0x4001B10")]
		VREvent_DashboardRequested = 505,
		[Token(Token = "0x4001B11")]
		VREvent_ResetDashboard = 506,
		[Token(Token = "0x4001B12")]
		VREvent_RenderToast = 507,
		[Token(Token = "0x4001B13")]
		VREvent_ImageLoaded = 508,
		[Token(Token = "0x4001B14")]
		VREvent_ShowKeyboard = 509,
		[Token(Token = "0x4001B15")]
		VREvent_HideKeyboard = 510,
		[Token(Token = "0x4001B16")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Token(Token = "0x4001B17")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Token(Token = "0x4001B18")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Token(Token = "0x4001B19")]
		VREvent_DashboardGuideButtonDown = 514,
		[Token(Token = "0x4001B1A")]
		VREvent_DashboardGuideButtonUp = 515,
		[Token(Token = "0x4001B1B")]
		VREvent_ScreenshotTriggered = 516,
		[Token(Token = "0x4001B1C")]
		VREvent_ImageFailed = 517,
		[Token(Token = "0x4001B1D")]
		VREvent_DashboardOverlayCreated = 518,
		[Token(Token = "0x4001B1E")]
		VREvent_RequestScreenshot = 520,
		[Token(Token = "0x4001B1F")]
		VREvent_ScreenshotTaken = 521,
		[Token(Token = "0x4001B20")]
		VREvent_ScreenshotFailed = 522,
		[Token(Token = "0x4001B21")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Token(Token = "0x4001B22")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Token(Token = "0x4001B23")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Token(Token = "0x4001B24")]
		VREvent_Notification_Shown = 600,
		[Token(Token = "0x4001B25")]
		VREvent_Notification_Hidden = 601,
		[Token(Token = "0x4001B26")]
		VREvent_Notification_BeginInteraction = 602,
		[Token(Token = "0x4001B27")]
		VREvent_Notification_Destroyed = 603,
		[Token(Token = "0x4001B28")]
		VREvent_Quit = 700,
		[Token(Token = "0x4001B29")]
		VREvent_ProcessQuit = 701,
		[Token(Token = "0x4001B2A")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Token(Token = "0x4001B2B")]
		VREvent_QuitAcknowledged = 703,
		[Token(Token = "0x4001B2C")]
		VREvent_DriverRequestedQuit = 704,
		[Token(Token = "0x4001B2D")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Token(Token = "0x4001B2E")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Token(Token = "0x4001B2F")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Token(Token = "0x4001B30")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Token(Token = "0x4001B31")]
		VREvent_SeatedZeroPoseReset = 804,
		[Token(Token = "0x4001B32")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Token(Token = "0x4001B33")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Token(Token = "0x4001B34")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Token(Token = "0x4001B35")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Token(Token = "0x4001B36")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Token(Token = "0x4001B37")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Token(Token = "0x4001B38")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Token(Token = "0x4001B39")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Token(Token = "0x4001B3A")]
		VREvent_SteamVRSectionSettingChanged = 857,
		[Token(Token = "0x4001B3B")]
		VREvent_LighthouseSectionSettingChanged = 858,
		[Token(Token = "0x4001B3C")]
		VREvent_NullSectionSettingChanged = 859,
		[Token(Token = "0x4001B3D")]
		VREvent_UserInterfaceSectionSettingChanged = 860,
		[Token(Token = "0x4001B3E")]
		VREvent_NotificationsSectionSettingChanged = 861,
		[Token(Token = "0x4001B3F")]
		VREvent_KeyboardSectionSettingChanged = 862,
		[Token(Token = "0x4001B40")]
		VREvent_PerfSectionSettingChanged = 863,
		[Token(Token = "0x4001B41")]
		VREvent_DashboardSectionSettingChanged = 864,
		[Token(Token = "0x4001B42")]
		VREvent_WebInterfaceSectionSettingChanged = 865,
		[Token(Token = "0x4001B43")]
		VREvent_StatusUpdate = 900,
		[Token(Token = "0x4001B44")]
		VREvent_WebInterface_InstallDriverCompleted = 950,
		[Token(Token = "0x4001B45")]
		VREvent_MCImageUpdated = 1000,
		[Token(Token = "0x4001B46")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Token(Token = "0x4001B47")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Token(Token = "0x4001B48")]
		VREvent_KeyboardClosed = 1200,
		[Token(Token = "0x4001B49")]
		VREvent_KeyboardCharInput = 1201,
		[Token(Token = "0x4001B4A")]
		VREvent_KeyboardDone = 1202,
		[Token(Token = "0x4001B4B")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Token(Token = "0x4001B4C")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Token(Token = "0x4001B4D")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Token(Token = "0x4001B4E")]
		VREvent_ApplicationListUpdated = 1303,
		[Token(Token = "0x4001B4F")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Token(Token = "0x4001B50")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Token(Token = "0x4001B51")]
		VREvent_ProcessConnected = 1306,
		[Token(Token = "0x4001B52")]
		VREvent_ProcessDisconnected = 1307,
		[Token(Token = "0x4001B53")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Token(Token = "0x4001B54")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Token(Token = "0x4001B55")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Token(Token = "0x4001B56")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Token(Token = "0x4001B57")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Token(Token = "0x4001B58")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Token(Token = "0x4001B59")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Token(Token = "0x4001B5A")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Token(Token = "0x4001B5B")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Token(Token = "0x4001B5C")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Token(Token = "0x4001B5D")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Token(Token = "0x4001B5E")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Token(Token = "0x4001B5F")]
		VREvent_MessageOverlay_Closed = 1650,
		[Token(Token = "0x4001B60")]
		VREvent_MessageOverlayCloseRequested = 1651,
		[Token(Token = "0x4001B61")]
		VREvent_Input_HapticVibration = 1700,
		[Token(Token = "0x4001B62")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4001B63")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	[Token(Token = "0x20005A4")]
	public enum EDeviceActivityLevel
	{
		[Token(Token = "0x4001B65")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Token(Token = "0x4001B66")]
		k_EDeviceActivityLevel_Idle,
		[Token(Token = "0x4001B67")]
		k_EDeviceActivityLevel_UserInteraction,
		[Token(Token = "0x4001B68")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Token(Token = "0x4001B69")]
		k_EDeviceActivityLevel_Standby
	}
	[Token(Token = "0x20005A5")]
	public enum EVRButtonId
	{
		[Token(Token = "0x4001B6B")]
		k_EButton_System = 0,
		[Token(Token = "0x4001B6C")]
		k_EButton_ApplicationMenu = 1,
		[Token(Token = "0x4001B6D")]
		k_EButton_Grip = 2,
		[Token(Token = "0x4001B6E")]
		k_EButton_DPad_Left = 3,
		[Token(Token = "0x4001B6F")]
		k_EButton_DPad_Up = 4,
		[Token(Token = "0x4001B70")]
		k_EButton_DPad_Right = 5,
		[Token(Token = "0x4001B71")]
		k_EButton_DPad_Down = 6,
		[Token(Token = "0x4001B72")]
		k_EButton_A = 7,
		[Token(Token = "0x4001B73")]
		k_EButton_ProximitySensor = 31,
		[Token(Token = "0x4001B74")]
		k_EButton_Axis0 = 32,
		[Token(Token = "0x4001B75")]
		k_EButton_Axis1 = 33,
		[Token(Token = "0x4001B76")]
		k_EButton_Axis2 = 34,
		[Token(Token = "0x4001B77")]
		k_EButton_Axis3 = 35,
		[Token(Token = "0x4001B78")]
		k_EButton_Axis4 = 36,
		[Token(Token = "0x4001B79")]
		k_EButton_SteamVR_Touchpad = 32,
		[Token(Token = "0x4001B7A")]
		k_EButton_SteamVR_Trigger = 33,
		[Token(Token = "0x4001B7B")]
		k_EButton_Dashboard_Back = 2,
		[Token(Token = "0x4001B7C")]
		k_EButton_Max = 64
	}
	[Token(Token = "0x20005A6")]
	public enum EVRMouseButton
	{
		[Token(Token = "0x4001B7E")]
		Left = 1,
		[Token(Token = "0x4001B7F")]
		Right = 2,
		[Token(Token = "0x4001B80")]
		Middle = 4
	}
	[Token(Token = "0x20005A7")]
	public enum EDualAnalogWhich
	{
		[Token(Token = "0x4001B82")]
		k_EDualAnalog_Left,
		[Token(Token = "0x4001B83")]
		k_EDualAnalog_Right
	}
	[Token(Token = "0x20005A8")]
	public enum EVRInputError
	{
		[Token(Token = "0x4001B85")]
		None,
		[Token(Token = "0x4001B86")]
		NameNotFound,
		[Token(Token = "0x4001B87")]
		WrongType,
		[Token(Token = "0x4001B88")]
		InvalidHandle,
		[Token(Token = "0x4001B89")]
		InvalidParam,
		[Token(Token = "0x4001B8A")]
		NoSteam,
		[Token(Token = "0x4001B8B")]
		MaxCapacityReached,
		[Token(Token = "0x4001B8C")]
		IPCError,
		[Token(Token = "0x4001B8D")]
		NoActiveActionSet,
		[Token(Token = "0x4001B8E")]
		InvalidDevice
	}
	[Token(Token = "0x20005A9")]
	public enum EHiddenAreaMeshType
	{
		[Token(Token = "0x4001B90")]
		k_eHiddenAreaMesh_Standard,
		[Token(Token = "0x4001B91")]
		k_eHiddenAreaMesh_Inverse,
		[Token(Token = "0x4001B92")]
		k_eHiddenAreaMesh_LineLoop,
		[Token(Token = "0x4001B93")]
		k_eHiddenAreaMesh_Max
	}
	[Token(Token = "0x20005AA")]
	public enum EVRControllerAxisType
	{
		[Token(Token = "0x4001B95")]
		k_eControllerAxis_None,
		[Token(Token = "0x4001B96")]
		k_eControllerAxis_TrackPad,
		[Token(Token = "0x4001B97")]
		k_eControllerAxis_Joystick,
		[Token(Token = "0x4001B98")]
		k_eControllerAxis_Trigger
	}
	[Token(Token = "0x20005AB")]
	public enum EVRControllerEventOutputType
	{
		[Token(Token = "0x4001B9A")]
		ControllerEventOutput_OSEvents,
		[Token(Token = "0x4001B9B")]
		ControllerEventOutput_VREvents
	}
	[Token(Token = "0x20005AC")]
	public enum ECollisionBoundsStyle
	{
		[Token(Token = "0x4001B9D")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Token(Token = "0x4001B9E")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Token(Token = "0x4001B9F")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Token(Token = "0x4001BA0")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Token(Token = "0x4001BA1")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Token(Token = "0x4001BA2")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	[Token(Token = "0x20005AD")]
	public enum EVROverlayError
	{
		[Token(Token = "0x4001BA4")]
		None = 0,
		[Token(Token = "0x4001BA5")]
		UnknownOverlay = 10,
		[Token(Token = "0x4001BA6")]
		InvalidHandle = 11,
		[Token(Token = "0x4001BA7")]
		PermissionDenied = 12,
		[Token(Token = "0x4001BA8")]
		OverlayLimitExceeded = 13,
		[Token(Token = "0x4001BA9")]
		WrongVisibilityType = 14,
		[Token(Token = "0x4001BAA")]
		KeyTooLong = 15,
		[Token(Token = "0x4001BAB")]
		NameTooLong = 16,
		[Token(Token = "0x4001BAC")]
		KeyInUse = 17,
		[Token(Token = "0x4001BAD")]
		WrongTransformType = 18,
		[Token(Token = "0x4001BAE")]
		InvalidTrackedDevice = 19,
		[Token(Token = "0x4001BAF")]
		InvalidParameter = 20,
		[Token(Token = "0x4001BB0")]
		ThumbnailCantBeDestroyed = 21,
		[Token(Token = "0x4001BB1")]
		ArrayTooSmall = 22,
		[Token(Token = "0x4001BB2")]
		RequestFailed = 23,
		[Token(Token = "0x4001BB3")]
		InvalidTexture = 24,
		[Token(Token = "0x4001BB4")]
		UnableToLoadFile = 25,
		[Token(Token = "0x4001BB5")]
		KeyboardAlreadyInUse = 26,
		[Token(Token = "0x4001BB6")]
		NoNeighbor = 27,
		[Token(Token = "0x4001BB7")]
		TooManyMaskPrimitives = 29,
		[Token(Token = "0x4001BB8")]
		BadMaskPrimitive = 30,
		[Token(Token = "0x4001BB9")]
		TextureAlreadyLocked = 31,
		[Token(Token = "0x4001BBA")]
		TextureLockCapacityReached = 32,
		[Token(Token = "0x4001BBB")]
		TextureNotLocked = 33
	}
	[Token(Token = "0x20005AE")]
	public enum EVRApplicationType
	{
		[Token(Token = "0x4001BBD")]
		VRApplication_Other,
		[Token(Token = "0x4001BBE")]
		VRApplication_Scene,
		[Token(Token = "0x4001BBF")]
		VRApplication_Overlay,
		[Token(Token = "0x4001BC0")]
		VRApplication_Background,
		[Token(Token = "0x4001BC1")]
		VRApplication_Utility,
		[Token(Token = "0x4001BC2")]
		VRApplication_VRMonitor,
		[Token(Token = "0x4001BC3")]
		VRApplication_SteamWatchdog,
		[Token(Token = "0x4001BC4")]
		VRApplication_Bootstrapper,
		[Token(Token = "0x4001BC5")]
		VRApplication_Max
	}
	[Token(Token = "0x20005AF")]
	public enum EVRFirmwareError
	{
		[Token(Token = "0x4001BC7")]
		None,
		[Token(Token = "0x4001BC8")]
		Success,
		[Token(Token = "0x4001BC9")]
		Fail
	}
	[Token(Token = "0x20005B0")]
	public enum EVRNotificationError
	{
		[Token(Token = "0x4001BCB")]
		OK = 0,
		[Token(Token = "0x4001BCC")]
		InvalidNotificationId = 100,
		[Token(Token = "0x4001BCD")]
		NotificationQueueFull = 101,
		[Token(Token = "0x4001BCE")]
		InvalidOverlayHandle = 102,
		[Token(Token = "0x4001BCF")]
		SystemWithUserValueAlreadyExists = 103
	}
	[Token(Token = "0x20005B1")]
	public enum EVRInitError
	{
		[Token(Token = "0x4001BD1")]
		None = 0,
		[Token(Token = "0x4001BD2")]
		Unknown = 1,
		[Token(Token = "0x4001BD3")]
		Init_InstallationNotFound = 100,
		[Token(Token = "0x4001BD4")]
		Init_InstallationCorrupt = 101,
		[Token(Token = "0x4001BD5")]
		Init_VRClientDLLNotFound = 102,
		[Token(Token = "0x4001BD6")]
		Init_FileNotFound = 103,
		[Token(Token = "0x4001BD7")]
		Init_FactoryNotFound = 104,
		[Token(Token = "0x4001BD8")]
		Init_InterfaceNotFound = 105,
		[Token(Token = "0x4001BD9")]
		Init_InvalidInterface = 106,
		[Token(Token = "0x4001BDA")]
		Init_UserConfigDirectoryInvalid = 107,
		[Token(Token = "0x4001BDB")]
		Init_HmdNotFound = 108,
		[Token(Token = "0x4001BDC")]
		Init_NotInitialized = 109,
		[Token(Token = "0x4001BDD")]
		Init_PathRegistryNotFound = 110,
		[Token(Token = "0x4001BDE")]
		Init_NoConfigPath = 111,
		[Token(Token = "0x4001BDF")]
		Init_NoLogPath = 112,
		[Token(Token = "0x4001BE0")]
		Init_PathRegistryNotWritable = 113,
		[Token(Token = "0x4001BE1")]
		Init_AppInfoInitFailed = 114,
		[Token(Token = "0x4001BE2")]
		Init_Retry = 115,
		[Token(Token = "0x4001BE3")]
		Init_InitCanceledByUser = 116,
		[Token(Token = "0x4001BE4")]
		Init_AnotherAppLaunching = 117,
		[Token(Token = "0x4001BE5")]
		Init_SettingsInitFailed = 118,
		[Token(Token = "0x4001BE6")]
		Init_ShuttingDown = 119,
		[Token(Token = "0x4001BE7")]
		Init_TooManyObjects = 120,
		[Token(Token = "0x4001BE8")]
		Init_NoServerForBackgroundApp = 121,
		[Token(Token = "0x4001BE9")]
		Init_NotSupportedWithCompositor = 122,
		[Token(Token = "0x4001BEA")]
		Init_NotAvailableToUtilityApps = 123,
		[Token(Token = "0x4001BEB")]
		Init_Internal = 124,
		[Token(Token = "0x4001BEC")]
		Init_HmdDriverIdIsNone = 125,
		[Token(Token = "0x4001BED")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Token(Token = "0x4001BEE")]
		Init_VRMonitorNotFound = 127,
		[Token(Token = "0x4001BEF")]
		Init_VRMonitorStartupFailed = 128,
		[Token(Token = "0x4001BF0")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Token(Token = "0x4001BF1")]
		Init_InvalidApplicationType = 130,
		[Token(Token = "0x4001BF2")]
		Init_NotAvailableToWatchdogApps = 131,
		[Token(Token = "0x4001BF3")]
		Init_WatchdogDisabledInSettings = 132,
		[Token(Token = "0x4001BF4")]
		Init_VRDashboardNotFound = 133,
		[Token(Token = "0x4001BF5")]
		Init_VRDashboardStartupFailed = 134,
		[Token(Token = "0x4001BF6")]
		Init_VRHomeNotFound = 135,
		[Token(Token = "0x4001BF7")]
		Init_VRHomeStartupFailed = 136,
		[Token(Token = "0x4001BF8")]
		Init_RebootingBusy = 137,
		[Token(Token = "0x4001BF9")]
		Init_FirmwareUpdateBusy = 138,
		[Token(Token = "0x4001BFA")]
		Init_FirmwareRecoveryBusy = 139,
		[Token(Token = "0x4001BFB")]
		Init_USBServiceBusy = 140,
		[Token(Token = "0x4001BFC")]
		Driver_Failed = 200,
		[Token(Token = "0x4001BFD")]
		Driver_Unknown = 201,
		[Token(Token = "0x4001BFE")]
		Driver_HmdUnknown = 202,
		[Token(Token = "0x4001BFF")]
		Driver_NotLoaded = 203,
		[Token(Token = "0x4001C00")]
		Driver_RuntimeOutOfDate = 204,
		[Token(Token = "0x4001C01")]
		Driver_HmdInUse = 205,
		[Token(Token = "0x4001C02")]
		Driver_NotCalibrated = 206,
		[Token(Token = "0x4001C03")]
		Driver_CalibrationInvalid = 207,
		[Token(Token = "0x4001C04")]
		Driver_HmdDisplayNotFound = 208,
		[Token(Token = "0x4001C05")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Token(Token = "0x4001C06")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Token(Token = "0x4001C07")]
		Driver_HmdDisplayMirrored = 212,
		[Token(Token = "0x4001C08")]
		IPC_ServerInitFailed = 300,
		[Token(Token = "0x4001C09")]
		IPC_ConnectFailed = 301,
		[Token(Token = "0x4001C0A")]
		IPC_SharedStateInitFailed = 302,
		[Token(Token = "0x4001C0B")]
		IPC_CompositorInitFailed = 303,
		[Token(Token = "0x4001C0C")]
		IPC_MutexInitFailed = 304,
		[Token(Token = "0x4001C0D")]
		IPC_Failed = 305,
		[Token(Token = "0x4001C0E")]
		IPC_CompositorConnectFailed = 306,
		[Token(Token = "0x4001C0F")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Token(Token = "0x4001C10")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Token(Token = "0x4001C11")]
		Compositor_Failed = 400,
		[Token(Token = "0x4001C12")]
		Compositor_D3D11HardwareRequired = 401,
		[Token(Token = "0x4001C13")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Token(Token = "0x4001C14")]
		Compositor_OverlayInitFailed = 403,
		[Token(Token = "0x4001C15")]
		Compositor_ScreenshotsInitFailed = 404,
		[Token(Token = "0x4001C16")]
		Compositor_UnableToCreateDevice = 405,
		[Token(Token = "0x4001C17")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Token(Token = "0x4001C18")]
		VendorSpecific_WindowsNotInDevMode = 1001,
		[Token(Token = "0x4001C19")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Token(Token = "0x4001C1A")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Token(Token = "0x4001C1B")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Token(Token = "0x4001C1C")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Token(Token = "0x4001C1D")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Token(Token = "0x4001C1E")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Token(Token = "0x4001C1F")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Token(Token = "0x4001C20")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Token(Token = "0x4001C21")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Token(Token = "0x4001C22")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Token(Token = "0x4001C23")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Token(Token = "0x4001C24")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Token(Token = "0x4001C25")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Token(Token = "0x4001C26")]
		Steam_SteamInstallationNotFound = 2000
	}
	[Token(Token = "0x20005B2")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4001C28")]
		None,
		[Token(Token = "0x4001C29")]
		Mono,
		[Token(Token = "0x4001C2A")]
		Stereo,
		[Token(Token = "0x4001C2B")]
		Cubemap,
		[Token(Token = "0x4001C2C")]
		MonoPanorama,
		[Token(Token = "0x4001C2D")]
		StereoPanorama
	}
	[Token(Token = "0x20005B3")]
	public enum EVRScreenshotPropertyFilenames
	{
		[Token(Token = "0x4001C2F")]
		Preview,
		[Token(Token = "0x4001C30")]
		VR
	}
	[Token(Token = "0x20005B4")]
	public enum EVRTrackedCameraError
	{
		[Token(Token = "0x4001C32")]
		None = 0,
		[Token(Token = "0x4001C33")]
		OperationFailed = 100,
		[Token(Token = "0x4001C34")]
		InvalidHandle = 101,
		[Token(Token = "0x4001C35")]
		InvalidFrameHeaderVersion = 102,
		[Token(Token = "0x4001C36")]
		OutOfHandles = 103,
		[Token(Token = "0x4001C37")]
		IPCFailure = 104,
		[Token(Token = "0x4001C38")]
		NotSupportedForThisDevice = 105,
		[Token(Token = "0x4001C39")]
		SharedMemoryFailure = 106,
		[Token(Token = "0x4001C3A")]
		FrameBufferingFailure = 107,
		[Token(Token = "0x4001C3B")]
		StreamSetupFailure = 108,
		[Token(Token = "0x4001C3C")]
		InvalidGLTextureId = 109,
		[Token(Token = "0x4001C3D")]
		InvalidSharedTextureHandle = 110,
		[Token(Token = "0x4001C3E")]
		FailedToGetGLTextureId = 111,
		[Token(Token = "0x4001C3F")]
		SharedTextureFailure = 112,
		[Token(Token = "0x4001C40")]
		NoFrameAvailable = 113,
		[Token(Token = "0x4001C41")]
		InvalidArgument = 114,
		[Token(Token = "0x4001C42")]
		InvalidFrameBufferSize = 115
	}
	[Token(Token = "0x20005B5")]
	public enum EVRTrackedCameraFrameType
	{
		[Token(Token = "0x4001C44")]
		Distorted,
		[Token(Token = "0x4001C45")]
		Undistorted,
		[Token(Token = "0x4001C46")]
		MaximumUndistorted,
		[Token(Token = "0x4001C47")]
		MAX_CAMERA_FRAME_TYPES
	}
	[Token(Token = "0x20005B6")]
	public enum EVRApplicationError
	{
		[Token(Token = "0x4001C49")]
		None = 0,
		[Token(Token = "0x4001C4A")]
		AppKeyAlreadyExists = 100,
		[Token(Token = "0x4001C4B")]
		NoManifest = 101,
		[Token(Token = "0x4001C4C")]
		NoApplication = 102,
		[Token(Token = "0x4001C4D")]
		InvalidIndex = 103,
		[Token(Token = "0x4001C4E")]
		UnknownApplication = 104,
		[Token(Token = "0x4001C4F")]
		IPCFailed = 105,
		[Token(Token = "0x4001C50")]
		ApplicationAlreadyRunning = 106,
		[Token(Token = "0x4001C51")]
		InvalidManifest = 107,
		[Token(Token = "0x4001C52")]
		InvalidApplication = 108,
		[Token(Token = "0x4001C53")]
		LaunchFailed = 109,
		[Token(Token = "0x4001C54")]
		ApplicationAlreadyStarting = 110,
		[Token(Token = "0x4001C55")]
		LaunchInProgress = 111,
		[Token(Token = "0x4001C56")]
		OldApplicationQuitting = 112,
		[Token(Token = "0x4001C57")]
		TransitionAborted = 113,
		[Token(Token = "0x4001C58")]
		IsTemplate = 114,
		[Token(Token = "0x4001C59")]
		SteamVRIsExiting = 115,
		[Token(Token = "0x4001C5A")]
		BufferTooSmall = 200,
		[Token(Token = "0x4001C5B")]
		PropertyNotSet = 201,
		[Token(Token = "0x4001C5C")]
		UnknownProperty = 202,
		[Token(Token = "0x4001C5D")]
		InvalidParameter = 203
	}
	[Token(Token = "0x20005B7")]
	public enum EVRApplicationProperty
	{
		[Token(Token = "0x4001C5F")]
		Name_String = 0,
		[Token(Token = "0x4001C60")]
		LaunchType_String = 11,
		[Token(Token = "0x4001C61")]
		WorkingDirectory_String = 12,
		[Token(Token = "0x4001C62")]
		BinaryPath_String = 13,
		[Token(Token = "0x4001C63")]
		Arguments_String = 14,
		[Token(Token = "0x4001C64")]
		URL_String = 15,
		[Token(Token = "0x4001C65")]
		Description_String = 50,
		[Token(Token = "0x4001C66")]
		NewsURL_String = 51,
		[Token(Token = "0x4001C67")]
		ImagePath_String = 52,
		[Token(Token = "0x4001C68")]
		Source_String = 53,
		[Token(Token = "0x4001C69")]
		ActionManifestURL_String = 54,
		[Token(Token = "0x4001C6A")]
		IsDashboardOverlay_Bool = 60,
		[Token(Token = "0x4001C6B")]
		IsTemplate_Bool = 61,
		[Token(Token = "0x4001C6C")]
		IsInstanced_Bool = 62,
		[Token(Token = "0x4001C6D")]
		IsInternal_Bool = 63,
		[Token(Token = "0x4001C6E")]
		WantsCompositorPauseInStandby_Bool = 64,
		[Token(Token = "0x4001C6F")]
		LastLaunchTime_Uint64 = 70
	}
	[Token(Token = "0x20005B8")]
	public enum EVRApplicationTransitionState
	{
		[Token(Token = "0x4001C71")]
		VRApplicationTransition_None = 0,
		[Token(Token = "0x4001C72")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Token(Token = "0x4001C73")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Token(Token = "0x4001C74")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	[Token(Token = "0x20005B9")]
	public enum ChaperoneCalibrationState
	{
		[Token(Token = "0x4001C76")]
		OK = 1,
		[Token(Token = "0x4001C77")]
		Warning = 100,
		[Token(Token = "0x4001C78")]
		Warning_BaseStationMayHaveMoved = 101,
		[Token(Token = "0x4001C79")]
		Warning_BaseStationRemoved = 102,
		[Token(Token = "0x4001C7A")]
		Warning_SeatedBoundsInvalid = 103,
		[Token(Token = "0x4001C7B")]
		Error = 200,
		[Token(Token = "0x4001C7C")]
		Error_BaseStationUninitialized = 201,
		[Token(Token = "0x4001C7D")]
		Error_BaseStationConflict = 202,
		[Token(Token = "0x4001C7E")]
		Error_PlayAreaInvalid = 203,
		[Token(Token = "0x4001C7F")]
		Error_CollisionBoundsInvalid = 204
	}
	[Token(Token = "0x20005BA")]
	public enum EChaperoneConfigFile
	{
		[Token(Token = "0x4001C81")]
		Live = 1,
		[Token(Token = "0x4001C82")]
		Temp
	}
	[Token(Token = "0x20005BB")]
	public enum EChaperoneImportFlags
	{
		[Token(Token = "0x4001C84")]
		EChaperoneImport_BoundsOnly = 1
	}
	[Token(Token = "0x20005BC")]
	public enum EVRCompositorError
	{
		[Token(Token = "0x4001C86")]
		None = 0,
		[Token(Token = "0x4001C87")]
		RequestFailed = 1,
		[Token(Token = "0x4001C88")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4001C89")]
		DoNotHaveFocus = 101,
		[Token(Token = "0x4001C8A")]
		InvalidTexture = 102,
		[Token(Token = "0x4001C8B")]
		IsNotSceneApplication = 103,
		[Token(Token = "0x4001C8C")]
		TextureIsOnWrongDevice = 104,
		[Token(Token = "0x4001C8D")]
		TextureUsesUnsupportedFormat = 105,
		[Token(Token = "0x4001C8E")]
		SharedTexturesNotSupported = 106,
		[Token(Token = "0x4001C8F")]
		IndexOutOfRange = 107,
		[Token(Token = "0x4001C90")]
		AlreadySubmitted = 108,
		[Token(Token = "0x4001C91")]
		InvalidBounds = 109
	}
	[Token(Token = "0x20005BD")]
	public enum EVRCompositorTimingMode
	{
		[Token(Token = "0x4001C93")]
		Implicit,
		[Token(Token = "0x4001C94")]
		Explicit_RuntimePerformsPostPresentHandoff,
		[Token(Token = "0x4001C95")]
		Explicit_ApplicationPerformsPostPresentHandoff
	}
	[Token(Token = "0x20005BE")]
	public enum VROverlayInputMethod
	{
		[Token(Token = "0x4001C97")]
		None,
		[Token(Token = "0x4001C98")]
		Mouse,
		[Token(Token = "0x4001C99")]
		DualAnalog
	}
	[Token(Token = "0x20005BF")]
	public enum VROverlayTransformType
	{
		[Token(Token = "0x4001C9B")]
		VROverlayTransform_Absolute,
		[Token(Token = "0x4001C9C")]
		VROverlayTransform_TrackedDeviceRelative,
		[Token(Token = "0x4001C9D")]
		VROverlayTransform_SystemOverlay,
		[Token(Token = "0x4001C9E")]
		VROverlayTransform_TrackedComponent
	}
	[Token(Token = "0x20005C0")]
	public enum VROverlayFlags
	{
		[Token(Token = "0x4001CA0")]
		None,
		[Token(Token = "0x4001CA1")]
		Curved,
		[Token(Token = "0x4001CA2")]
		RGSS4X,
		[Token(Token = "0x4001CA3")]
		NoDashboardTab,
		[Token(Token = "0x4001CA4")]
		AcceptsGamepadEvents,
		[Token(Token = "0x4001CA5")]
		ShowGamepadFocus,
		[Token(Token = "0x4001CA6")]
		SendVRScrollEvents,
		[Token(Token = "0x4001CA7")]
		SendVRTouchpadEvents,
		[Token(Token = "0x4001CA8")]
		ShowTouchPadScrollWheel,
		[Token(Token = "0x4001CA9")]
		TransferOwnershipToInternalProcess,
		[Token(Token = "0x4001CAA")]
		SideBySide_Parallel,
		[Token(Token = "0x4001CAB")]
		SideBySide_Crossed,
		[Token(Token = "0x4001CAC")]
		Panorama,
		[Token(Token = "0x4001CAD")]
		StereoPanorama,
		[Token(Token = "0x4001CAE")]
		SortWithNonSceneOverlays,
		[Token(Token = "0x4001CAF")]
		VisibleInDashboard
	}
	[Token(Token = "0x20005C1")]
	public enum VRMessageOverlayResponse
	{
		[Token(Token = "0x4001CB1")]
		ButtonPress_0,
		[Token(Token = "0x4001CB2")]
		ButtonPress_1,
		[Token(Token = "0x4001CB3")]
		ButtonPress_2,
		[Token(Token = "0x4001CB4")]
		ButtonPress_3,
		[Token(Token = "0x4001CB5")]
		CouldntFindSystemOverlay,
		[Token(Token = "0x4001CB6")]
		CouldntFindOrCreateClientOverlay,
		[Token(Token = "0x4001CB7")]
		ApplicationQuit
	}
	[Token(Token = "0x20005C2")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4001CB9")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4001CBA")]
		k_EGamepadTextInputModePassword,
		[Token(Token = "0x4001CBB")]
		k_EGamepadTextInputModeSubmit
	}
	[Token(Token = "0x20005C3")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4001CBD")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4001CBE")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x20005C4")]
	public enum EOverlayDirection
	{
		[Token(Token = "0x4001CC0")]
		Up,
		[Token(Token = "0x4001CC1")]
		Down,
		[Token(Token = "0x4001CC2")]
		Left,
		[Token(Token = "0x4001CC3")]
		Right,
		[Token(Token = "0x4001CC4")]
		Count
	}
	[Token(Token = "0x20005C5")]
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Token(Token = "0x4001CC6")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Token(Token = "0x4001CC7")]
		OverlayIntersectionPrimitiveType_Circle
	}
	[Token(Token = "0x20005C6")]
	public enum EVRRenderModelError
	{
		[Token(Token = "0x4001CC9")]
		None = 0,
		[Token(Token = "0x4001CCA")]
		Loading = 100,
		[Token(Token = "0x4001CCB")]
		NotSupported = 200,
		[Token(Token = "0x4001CCC")]
		InvalidArg = 300,
		[Token(Token = "0x4001CCD")]
		InvalidModel = 301,
		[Token(Token = "0x4001CCE")]
		NoShapes = 302,
		[Token(Token = "0x4001CCF")]
		MultipleShapes = 303,
		[Token(Token = "0x4001CD0")]
		TooManyVertices = 304,
		[Token(Token = "0x4001CD1")]
		MultipleTextures = 305,
		[Token(Token = "0x4001CD2")]
		BufferTooSmall = 306,
		[Token(Token = "0x4001CD3")]
		NotEnoughNormals = 307,
		[Token(Token = "0x4001CD4")]
		NotEnoughTexCoords = 308,
		[Token(Token = "0x4001CD5")]
		InvalidTexture = 400
	}
	[Token(Token = "0x20005C7")]
	public enum EVRComponentProperty
	{
		[Token(Token = "0x4001CD7")]
		IsStatic = 1,
		[Token(Token = "0x4001CD8")]
		IsVisible = 2,
		[Token(Token = "0x4001CD9")]
		IsTouched = 4,
		[Token(Token = "0x4001CDA")]
		IsPressed = 8,
		[Token(Token = "0x4001CDB")]
		IsScrolled = 0x10
	}
	[Token(Token = "0x20005C8")]
	public enum EVRNotificationType
	{
		[Token(Token = "0x4001CDD")]
		Transient,
		[Token(Token = "0x4001CDE")]
		Persistent,
		[Token(Token = "0x4001CDF")]
		Transient_SystemWithUserValue
	}
	[Token(Token = "0x20005C9")]
	public enum EVRNotificationStyle
	{
		[Token(Token = "0x4001CE1")]
		None = 0,
		[Token(Token = "0x4001CE2")]
		Application = 100,
		[Token(Token = "0x4001CE3")]
		Contact_Disabled = 200,
		[Token(Token = "0x4001CE4")]
		Contact_Enabled = 201,
		[Token(Token = "0x4001CE5")]
		Contact_Active = 202
	}
	[Token(Token = "0x20005CA")]
	public enum EVRSettingsError
	{
		[Token(Token = "0x4001CE7")]
		None,
		[Token(Token = "0x4001CE8")]
		IPCFailed,
		[Token(Token = "0x4001CE9")]
		WriteFailed,
		[Token(Token = "0x4001CEA")]
		ReadFailed,
		[Token(Token = "0x4001CEB")]
		JsonParseFailed,
		[Token(Token = "0x4001CEC")]
		UnsetSettingHasNoDefault
	}
	[Token(Token = "0x20005CB")]
	public enum EVRScreenshotError
	{
		[Token(Token = "0x4001CEE")]
		None = 0,
		[Token(Token = "0x4001CEF")]
		RequestFailed = 1,
		[Token(Token = "0x4001CF0")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4001CF1")]
		NotFound = 101,
		[Token(Token = "0x4001CF2")]
		BufferTooSmall = 102,
		[Token(Token = "0x4001CF3")]
		ScreenshotAlreadyInProgress = 108
	}
	[StructLayout(2)]
	[Token(Token = "0x20005CC")]
	public struct VREvent_Data_t
	{
		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Property_t property;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_DualAnalog_t dualAnalog;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_HapticVibration_t hapticVibration;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	[Token(Token = "0x20005CD")]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	[Token(Token = "0x20005CE")]
	public struct HmdMatrix34_t
	{
		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	[Token(Token = "0x20005CF")]
	public struct HmdMatrix44_t
	{
		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	[Token(Token = "0x20005D0")]
	public struct HmdVector3_t
	{
		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	[Token(Token = "0x20005D1")]
	public struct HmdVector4_t
	{
		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	[Token(Token = "0x20005D2")]
	public struct HmdVector3d_t
	{
		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	[Token(Token = "0x20005D3")]
	public struct HmdVector2_t
	{
		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	[Token(Token = "0x20005D4")]
	public struct HmdQuaternion_t
	{
		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	[Token(Token = "0x20005D5")]
	public struct HmdColor_t
	{
		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	[Token(Token = "0x20005D6")]
	public struct HmdQuad_t
	{
		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	[Token(Token = "0x20005D7")]
	public struct HmdRect2_t
	{
		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	[Token(Token = "0x20005D8")]
	public struct DistortionCoordinates_t
	{
		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	[Token(Token = "0x20005D9")]
	public struct Texture_t
	{
		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETextureType eType;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EColorSpace eColorSpace;
	}
	[Token(Token = "0x20005DA")]
	public struct TrackedDevicePose_t
	{
		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	[Token(Token = "0x20005DB")]
	public struct VRTextureBounds_t
	{
		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	[Token(Token = "0x20005DC")]
	public struct VRTextureWithPose_t
	{
		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;
	}
	[Token(Token = "0x20005DD")]
	public struct VRTextureDepthInfo_t
	{
		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdMatrix44_t mProjection;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HmdVector2_t vRange;
	}
	[Token(Token = "0x20005DE")]
	public struct VRTextureWithDepth_t
	{
		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x20005DF")]
	public struct VRTextureWithPoseAndDepth_t
	{
		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x20005E0")]
	public struct VRVulkanTextureData_t
	{
		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pPhysicalDevice;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pInstance;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pQueue;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nQueueFamilyIndex;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nWidth;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nHeight;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nFormat;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nSampleCount;
	}
	[Token(Token = "0x20005E1")]
	public struct D3D12TextureData_t
	{
		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pCommandQueue;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNodeMask;
	}
	[Token(Token = "0x20005E2")]
	public struct VREvent_Controller_t
	{
		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	[Token(Token = "0x20005E3")]
	public struct VREvent_Mouse_t
	{
		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	[Token(Token = "0x20005E4")]
	public struct VREvent_Scroll_t
	{
		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	[Token(Token = "0x20005E5")]
	public struct VREvent_TouchPadMove_t
	{
		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	[Token(Token = "0x20005E6")]
	public struct VREvent_Notification_t
	{
		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	[Token(Token = "0x20005E7")]
	public struct VREvent_Process_t
	{
		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	[Token(Token = "0x20005E8")]
	public struct VREvent_Overlay_t
	{
		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;
	}
	[Token(Token = "0x20005E9")]
	public struct VREvent_Status_t
	{
		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	[Token(Token = "0x20005EA")]
	public struct VREvent_Keyboard_t
	{
		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;
	}
	[Token(Token = "0x20005EB")]
	public struct VREvent_Ipd_t
	{
		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	[Token(Token = "0x20005EC")]
	public struct VREvent_Chaperone_t
	{
		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	[Token(Token = "0x20005ED")]
	public struct VREvent_Reserved_t
	{
		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;
	}
	[Token(Token = "0x20005EE")]
	public struct VREvent_PerformanceTest_t
	{
		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	[Token(Token = "0x20005EF")]
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	[Token(Token = "0x20005F0")]
	public struct VREvent_Screenshot_t
	{
		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	[Token(Token = "0x20005F1")]
	public struct VREvent_ScreenshotProgress_t
	{
		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	[Token(Token = "0x20005F2")]
	public struct VREvent_ApplicationLaunch_t
	{
		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	[Token(Token = "0x20005F3")]
	public struct VREvent_EditingCameraSurface_t
	{
		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	[Token(Token = "0x20005F4")]
	public struct VREvent_MessageOverlay_t
	{
		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	[Token(Token = "0x20005F5")]
	public struct VREvent_Property_t
	{
		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	[Token(Token = "0x20005F6")]
	public struct VREvent_DualAnalog_t
	{
		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float transformedX;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float transformedY;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EDualAnalogWhich which;
	}
	[Token(Token = "0x20005F7")]
	public struct VREvent_HapticVibration_t
	{
		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong containerHandle;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong componentHandle;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fDurationSeconds;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fFrequency;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fAmplitude;
	}
	[Token(Token = "0x20005F8")]
	public struct VREvent_t
	{
		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	[Token(Token = "0x20005F9")]
	public struct VREvent_t_Packed
	{
		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Token(Token = "0x6002483")]
		[Address(RVA = "0xBEA344", Offset = "0xBEA344", VA = "0xBEA344")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0xBE5454", Offset = "0xBE5454", VA = "0xBE5454")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	[Token(Token = "0x20005FA")]
	public struct HiddenAreaMesh_t
	{
		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unTriangleCount;
	}
	[Token(Token = "0x20005FB")]
	public struct VRControllerAxis_t
	{
		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x20005FC")]
	public struct VRControllerState_t
	{
		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	[Token(Token = "0x20005FD")]
	public struct VRControllerState_t_Packed
	{
		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Token(Token = "0x6002485")]
		[Address(RVA = "0xBE5718", Offset = "0xBE5718", VA = "0xBE5718")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0xBE575C", Offset = "0xBE575C", VA = "0xBE575C")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	[Token(Token = "0x20005FE")]
	public struct Compositor_OverlaySettings
	{
		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	[Token(Token = "0x20005FF")]
	public struct CameraVideoStreamFrameHeader_t
	{
		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	[Token(Token = "0x2000600")]
	public struct DriverDirectMode_FrameTiming
	{
		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nReprojectionFlags;
	}
	[Token(Token = "0x2000601")]
	public struct AppOverrideKeys_t
	{
		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pchValue;
	}
	[Token(Token = "0x2000602")]
	public struct Compositor_FrameTiming
	{
		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	[Token(Token = "0x2000603")]
	public struct Compositor_CumulativeStats
	{
		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	[Token(Token = "0x2000604")]
	public struct VROverlayIntersectionParams_t
	{
		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	[Token(Token = "0x2000605")]
	public struct VROverlayIntersectionResults_t
	{
		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	[Token(Token = "0x2000606")]
	public struct IntersectionMaskRectangle_t
	{
		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	[Token(Token = "0x2000607")]
	public struct IntersectionMaskCircle_t
	{
		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	[Token(Token = "0x2000608")]
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	[Token(Token = "0x2000609")]
	public struct RenderModel_ComponentState_t
	{
		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	[Token(Token = "0x200060A")]
	public struct RenderModel_Vertex_t
	{
		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	[Token(Token = "0x200060B")]
	public struct RenderModel_TextureMap_t
	{
		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;
	}
	[Token(Token = "0x200060C")]
	public struct RenderModel_TextureMap_t_Packed
	{
		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr rubTextureMapData;

		[Token(Token = "0x6002487")]
		[Address(RVA = "0xBEA37C", Offset = "0xBEA37C", VA = "0xBEA37C")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0xBEA390", Offset = "0xBEA390", VA = "0xBEA390")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	[Token(Token = "0x200060D")]
	public struct RenderModel_t
	{
		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr rIndexData;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unTriangleCount;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diffuseTextureId;
	}
	[Token(Token = "0x200060E")]
	public struct RenderModel_t_Packed
	{
		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr rIndexData;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTriangleCount;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diffuseTextureId;

		[Token(Token = "0x6002489")]
		[Address(RVA = "0xBEA3AC", Offset = "0xBEA3AC", VA = "0xBEA3AC")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0xBEA3D8", Offset = "0xBEA3D8", VA = "0xBEA3D8")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	[Token(Token = "0x200060F")]
	public struct RenderModel_ControllerMode_State_t
	{
		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	[Token(Token = "0x2000610")]
	public struct NotificationBitmap_t
	{
		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nWidth;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nHeight;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nBytesPerPixel;
	}
	[Token(Token = "0x2000611")]
	public struct COpenVRContext
	{
		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperone;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVRChaperoneSetup;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRCompositor;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVROverlay;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRResources;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRRenderModels;

		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRExtendedDisplay;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntPtr m_pVRSettings;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntPtr m_pVRApplications;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr m_pVRTrackedCamera;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr m_pVRScreenshots;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntPtr m_pVRDriverManager;
	}
	[Token(Token = "0x2000612")]
	public class OpenVR
	{
		[Token(Token = "0x2000613")]
		private class COpenVRContext
		{
			[Token(Token = "0x4001EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRSystem m_pVRSystem;

			[Token(Token = "0x4001EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRChaperone m_pVRChaperone;

			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRCompositor m_pVRCompositor;

			[Token(Token = "0x4001EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVROverlay m_pVROverlay;

			[Token(Token = "0x4001EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels m_pVRRenderModels;

			[Token(Token = "0x4001EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Token(Token = "0x4001EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CVRSettings m_pVRSettings;

			[Token(Token = "0x4001EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CVRApplications m_pVRApplications;

			[Token(Token = "0x4001EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private CVRScreenshots m_pVRScreenshots;

			[Token(Token = "0x4001EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Token(Token = "0x60024A4")]
			[Address(RVA = "0xBEA5B8", Offset = "0xBEA5B8", VA = "0xBEA5B8")]
			public COpenVRContext()
			{
			}

			[Token(Token = "0x60024A5")]
			[Address(RVA = "0xBEB19C", Offset = "0xBEB19C", VA = "0xBEB19C")]
			public void Clear()
			{
			}

			[Token(Token = "0x60024A6")]
			[Address(RVA = "0xBEB260", Offset = "0xBEB260", VA = "0xBEB260")]
			private void CheckClear()
			{
			}

			[Token(Token = "0x60024A7")]
			[Address(RVA = "0xBEA5EC", Offset = "0xBEA5EC", VA = "0xBEA5EC")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Token(Token = "0x60024A8")]
			[Address(RVA = "0xBEA6EC", Offset = "0xBEA6EC", VA = "0xBEA6EC")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Token(Token = "0x60024A9")]
			[Address(RVA = "0xBEA7EC", Offset = "0xBEA7EC", VA = "0xBEA7EC")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Token(Token = "0x60024AA")]
			[Address(RVA = "0xBEA8EC", Offset = "0xBEA8EC", VA = "0xBEA8EC")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Token(Token = "0x60024AB")]
			[Address(RVA = "0xBEA9EC", Offset = "0xBEA9EC", VA = "0xBEA9EC")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Token(Token = "0x60024AC")]
			[Address(RVA = "0xBEAAEC", Offset = "0xBEAAEC", VA = "0xBEAAEC")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Token(Token = "0x60024AD")]
			[Address(RVA = "0xBEABEC", Offset = "0xBEABEC", VA = "0xBEABEC")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Token(Token = "0x60024AE")]
			[Address(RVA = "0xBEACEC", Offset = "0xBEACEC", VA = "0xBEACEC")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Token(Token = "0x60024AF")]
			[Address(RVA = "0xBEADEC", Offset = "0xBEADEC", VA = "0xBEADEC")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Token(Token = "0x60024B0")]
			[Address(RVA = "0xBEAEEC", Offset = "0xBEAEEC", VA = "0xBEAEEC")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Token(Token = "0x60024B1")]
			[Address(RVA = "0xBEAFEC", Offset = "0xBEAFEC", VA = "0xBEAFEC")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}
		}

		[Token(Token = "0x4001E37")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Token(Token = "0x4001E38")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Token(Token = "0x4001E39")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Token(Token = "0x4001E3A")]
		public const uint k_unMaxTrackedDeviceCount = 64u;

		[Token(Token = "0x4001E3B")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Token(Token = "0x4001E3C")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Token(Token = "0x4001E3D")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Token(Token = "0x4001E3E")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Token(Token = "0x4001E3F")]
		public const uint k_unFloatPropertyTag = 1u;

		[Token(Token = "0x4001E40")]
		public const uint k_unInt32PropertyTag = 2u;

		[Token(Token = "0x4001E41")]
		public const uint k_unUint64PropertyTag = 3u;

		[Token(Token = "0x4001E42")]
		public const uint k_unBoolPropertyTag = 4u;

		[Token(Token = "0x4001E43")]
		public const uint k_unStringPropertyTag = 5u;

		[Token(Token = "0x4001E44")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Token(Token = "0x4001E45")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Token(Token = "0x4001E46")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Token(Token = "0x4001E47")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Token(Token = "0x4001E48")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Token(Token = "0x4001E49")]
		public const uint k_unPathHandleInfoTag = 31u;

		[Token(Token = "0x4001E4A")]
		public const uint k_unActionPropertyTag = 32u;

		[Token(Token = "0x4001E4B")]
		public const uint k_unInputValuePropertyTag = 33u;

		[Token(Token = "0x4001E4C")]
		public const uint k_unWildcardPropertyTag = 34u;

		[Token(Token = "0x4001E4D")]
		public const uint k_unHapticVibrationPropertyTag = 35u;

		[Token(Token = "0x4001E4E")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Token(Token = "0x4001E4F")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Token(Token = "0x4001E50")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Token(Token = "0x4001E51")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Token(Token = "0x4001E52")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Token(Token = "0x4001E53")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Token(Token = "0x4001E54")]
		public const string IVRSystem_Version = "IVRSystem_019";

		[Token(Token = "0x4001E55")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Token(Token = "0x4001E56")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Token(Token = "0x4001E57")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Token(Token = "0x4001E58")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Token(Token = "0x4001E59")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Token(Token = "0x4001E5A")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Token(Token = "0x4001E5B")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Token(Token = "0x4001E5C")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Token(Token = "0x4001E5D")]
		public const string IVRCompositor_Version = "IVRCompositor_022";

		[Token(Token = "0x4001E5E")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Token(Token = "0x4001E5F")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Token(Token = "0x4001E60")]
		public const uint k_unMaxOverlayCount = 64u;

		[Token(Token = "0x4001E61")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Token(Token = "0x4001E62")]
		public const string IVROverlay_Version = "IVROverlay_018";

		[Token(Token = "0x4001E63")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Token(Token = "0x4001E64")]
		public const string k_pch_Controller_Component_Base = "base";

		[Token(Token = "0x4001E65")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Token(Token = "0x4001E66")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Token(Token = "0x4001E67")]
		public const string k_pch_Controller_Component_Status = "status";

		[Token(Token = "0x4001E68")]
		public const string IVRRenderModels_Version = "IVRRenderModels_005";

		[Token(Token = "0x4001E69")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Token(Token = "0x4001E6A")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Token(Token = "0x4001E6B")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Token(Token = "0x4001E6C")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Token(Token = "0x4001E6D")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Token(Token = "0x4001E6E")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Token(Token = "0x4001E6F")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Token(Token = "0x4001E70")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Token(Token = "0x4001E71")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Token(Token = "0x4001E72")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Token(Token = "0x4001E73")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Token(Token = "0x4001E74")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Token(Token = "0x4001E75")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Token(Token = "0x4001E76")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Token(Token = "0x4001E77")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Token(Token = "0x4001E78")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Token(Token = "0x4001E79")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Token(Token = "0x4001E7A")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Token(Token = "0x4001E7B")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Token(Token = "0x4001E7C")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Token(Token = "0x4001E7D")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Token(Token = "0x4001E7E")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Token(Token = "0x4001E7F")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Token(Token = "0x4001E80")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Token(Token = "0x4001E81")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Token(Token = "0x4001E82")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Token(Token = "0x4001E83")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Token(Token = "0x4001E84")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Token(Token = "0x4001E85")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Token(Token = "0x4001E86")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Token(Token = "0x4001E87")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Token(Token = "0x4001E88")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Token(Token = "0x4001E89")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Token(Token = "0x4001E8A")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Token(Token = "0x4001E8B")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Token(Token = "0x4001E8C")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Token(Token = "0x4001E8D")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Token(Token = "0x4001E8E")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Token(Token = "0x4001E8F")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Token(Token = "0x4001E90")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Token(Token = "0x4001E91")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Token(Token = "0x4001E92")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Token(Token = "0x4001E93")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Token(Token = "0x4001E94")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Token(Token = "0x4001E95")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Token(Token = "0x4001E96")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Token(Token = "0x4001E97")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Token(Token = "0x4001E98")]
		public const string k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = "enableLinuxVulkanAsync";

		[Token(Token = "0x4001E99")]
		public const string k_pch_SteamVR_AllowDisplayLockedMode_Bool = "allowDisplayLockedMode";

		[Token(Token = "0x4001E9A")]
		public const string k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = "haveStartedTutorialForNativeChaperoneDriver";

		[Token(Token = "0x4001E9B")]
		public const string k_pch_SteamVR_ForceWindows32bitVRMonitor = "forceWindows32BitVRMonitor";

		[Token(Token = "0x4001E9C")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Token(Token = "0x4001E9D")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Token(Token = "0x4001E9E")]
		public const string k_pch_Lighthouse_DisableIMUExceptHMD_Bool = "disableimuexcepthmd";

		[Token(Token = "0x4001E9F")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Token(Token = "0x4001EA0")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Token(Token = "0x4001EA1")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Token(Token = "0x4001EA2")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Token(Token = "0x4001EA3")]
		public const string k_pch_Lighthouse_EnableBluetooth_Bool = "enableBluetooth";

		[Token(Token = "0x4001EA4")]
		public const string k_pch_Null_Section = "driver_null";

		[Token(Token = "0x4001EA5")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Token(Token = "0x4001EA6")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Token(Token = "0x4001EA7")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Token(Token = "0x4001EA8")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Token(Token = "0x4001EA9")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Token(Token = "0x4001EAA")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Token(Token = "0x4001EAB")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Token(Token = "0x4001EAC")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Token(Token = "0x4001EAD")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Token(Token = "0x4001EAE")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Token(Token = "0x4001EAF")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Token(Token = "0x4001EB0")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Token(Token = "0x4001EB1")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Token(Token = "0x4001EB2")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Token(Token = "0x4001EB3")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Token(Token = "0x4001EB4")]
		public const string k_pch_Notifications_Section = "notifications";

		[Token(Token = "0x4001EB5")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Token(Token = "0x4001EB6")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Token(Token = "0x4001EB7")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Token(Token = "0x4001EB8")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Token(Token = "0x4001EB9")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Token(Token = "0x4001EBA")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Token(Token = "0x4001EBB")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Token(Token = "0x4001EBC")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Token(Token = "0x4001EBD")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Token(Token = "0x4001EBE")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Token(Token = "0x4001EBF")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Token(Token = "0x4001EC0")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Token(Token = "0x4001EC1")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Token(Token = "0x4001EC2")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Token(Token = "0x4001EC3")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Token(Token = "0x4001EC4")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Token(Token = "0x4001EC5")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Token(Token = "0x4001EC6")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Token(Token = "0x4001EC7")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Token(Token = "0x4001EC8")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Token(Token = "0x4001EC9")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Token(Token = "0x4001ECA")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Token(Token = "0x4001ECB")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Token(Token = "0x4001ECC")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Token(Token = "0x4001ECD")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Token(Token = "0x4001ECE")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Token(Token = "0x4001ECF")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Token(Token = "0x4001ED0")]
		public const string k_pch_Camera_Section = "camera";

		[Token(Token = "0x4001ED1")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Token(Token = "0x4001ED2")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Token(Token = "0x4001ED3")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Token(Token = "0x4001ED4")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Token(Token = "0x4001ED5")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Token(Token = "0x4001ED6")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Token(Token = "0x4001ED7")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Token(Token = "0x4001ED8")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Token(Token = "0x4001ED9")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Token(Token = "0x4001EDA")]
		public const string k_pch_audio_Section = "audio";

		[Token(Token = "0x4001EDB")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Token(Token = "0x4001EDC")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Token(Token = "0x4001EDD")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Token(Token = "0x4001EDE")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Token(Token = "0x4001EDF")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Token(Token = "0x4001EE0")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Token(Token = "0x4001EE1")]
		public const string k_pch_Power_Section = "power";

		[Token(Token = "0x4001EE2")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Token(Token = "0x4001EE3")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Token(Token = "0x4001EE4")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Token(Token = "0x4001EE5")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Token(Token = "0x4001EE6")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Token(Token = "0x4001EE7")]
		public const string k_pch_Power_PauseCompositorOnStandby_Bool = "pauseCompositorOnStandby";

		[Token(Token = "0x4001EE8")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Token(Token = "0x4001EE9")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Token(Token = "0x4001EEA")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Token(Token = "0x4001EEB")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Token(Token = "0x4001EEC")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Token(Token = "0x4001EED")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Token(Token = "0x4001EEE")]
		public const string IVRResources_Version = "IVRResources_001";

		[Token(Token = "0x4001EEF")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Token(Token = "0x4001EF1")]
		private const string FnTable_Prefix = "FnTable:";

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		[Token(Token = "0x170001D5")]
		private static uint VRToken
		{
			[Token(Token = "0x6002493")]
			[Address(RVA = "0xBEA480", Offset = "0xBEA480", VA = "0xBEA480")]
			[CompilerGenerated]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6002494")]
			[Address(RVA = "0xBEA4C8", Offset = "0xBEA4C8", VA = "0xBEA4C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Token(Token = "0x6002495")]
			[Address(RVA = "0xBEA514", Offset = "0xBEA514", VA = "0xBEA514")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D7")]
		public static CVRSystem System
		{
			[Token(Token = "0x6002496")]
			[Address(RVA = "0xBEA5D4", Offset = "0xBEA5D4", VA = "0xBEA5D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D8")]
		public static CVRChaperone Chaperone
		{
			[Token(Token = "0x6002497")]
			[Address(RVA = "0xBEA6D4", Offset = "0xBEA6D4", VA = "0xBEA6D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Token(Token = "0x6002498")]
			[Address(RVA = "0xBEA7D4", Offset = "0xBEA7D4", VA = "0xBEA7D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		public static CVRCompositor Compositor
		{
			[Token(Token = "0x6002499")]
			[Address(RVA = "0xBEA8D4", Offset = "0xBEA8D4", VA = "0xBEA8D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DB")]
		public static CVROverlay Overlay
		{
			[Token(Token = "0x600249A")]
			[Address(RVA = "0xBEA9D4", Offset = "0xBEA9D4", VA = "0xBEA9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		public static CVRRenderModels RenderModels
		{
			[Token(Token = "0x600249B")]
			[Address(RVA = "0xBEAAD4", Offset = "0xBEAAD4", VA = "0xBEAAD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Token(Token = "0x600249C")]
			[Address(RVA = "0xBEABD4", Offset = "0xBEABD4", VA = "0xBEABD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DE")]
		public static CVRSettings Settings
		{
			[Token(Token = "0x600249D")]
			[Address(RVA = "0xBEACD4", Offset = "0xBEACD4", VA = "0xBEACD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		public static CVRApplications Applications
		{
			[Token(Token = "0x600249E")]
			[Address(RVA = "0xBEADD4", Offset = "0xBEADD4", VA = "0xBEADD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		public static CVRScreenshots Screenshots
		{
			[Token(Token = "0x600249F")]
			[Address(RVA = "0xBEAED4", Offset = "0xBEAED4", VA = "0xBEAED4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public static CVRTrackedCamera TrackedCamera
		{
			[Token(Token = "0x60024A0")]
			[Address(RVA = "0xBEAFD4", Offset = "0xBEAFD4", VA = "0xBEAFD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0xBEA3FC", Offset = "0xBEA3FC", VA = "0xBEA3FC")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0xBEA400", Offset = "0xBEA400", VA = "0xBEA400")]
		public static void ShutdownInternal()
		{
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0xBEA404", Offset = "0xBEA404", VA = "0xBEA404")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0xBEA408", Offset = "0xBEA408", VA = "0xBEA408")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0xBEA40C", Offset = "0xBEA40C", VA = "0xBEA40C")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0xBEA474", Offset = "0xBEA474", VA = "0xBEA474")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0xBEA478", Offset = "0xBEA478", VA = "0xBEA478")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0xBEA47C", Offset = "0xBEA47C", VA = "0xBEA47C")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0xBEB0D4", Offset = "0xBEB0D4", VA = "0xBEB0D4")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene)
		{
			return null;
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0xBEB254", Offset = "0xBEB254", VA = "0xBEB254")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0xBEB258", Offset = "0xBEB258", VA = "0xBEB258")]
		public OpenVR()
		{
		}
	}
}
namespace Valve.VR.InteractionSystem
{
	[Token(Token = "0x2000614")]
	[RequireComponent(typeof(CapsuleCollider))]
	public class BodyCollider : MonoBehaviour
	{
		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform head;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0xBEB2F4", Offset = "0xBEB2F4", VA = "0xBEB2F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0xBEB34C", Offset = "0xBEB34C", VA = "0xBEB34C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0xBEB498", Offset = "0xBEB498", VA = "0xBEB498")]
		public BodyCollider()
		{
		}
	}
	[Token(Token = "0x2000615")]
	[RequireComponent(typeof(Interactable))]
	public class CircularDrive : MonoBehaviour
	{
		[Token(Token = "0x2000616")]
		public enum Axis_t
		{
			[Token(Token = "0x4001F27")]
			XAxis,
			[Token(Token = "0x4001F28")]
			YAxis,
			[Token(Token = "0x4001F29")]
			ZAxis
		}

		[Token(Token = "0x2000617")]
		[CompilerGenerated]
		private sealed class <HapticPulses>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_Controller.Device controller;

			[Token(Token = "0x4001F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Token(Token = "0x4001F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Token(Token = "0x4001F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Token(Token = "0x4001F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			[Token(Token = "0x170001E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60024C8")]
				[Address(RVA = "0xBED444", Offset = "0xBED444", VA = "0xBED444", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024CA")]
				[Address(RVA = "0xBED48C", Offset = "0xBED48C", VA = "0xBED48C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024C5")]
			[Address(RVA = "0xBEBCAC", Offset = "0xBEBCAC", VA = "0xBEBCAC")]
			[DebuggerHidden]
			public <HapticPulses>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x60024C6")]
			[Address(RVA = "0xBED2EC", Offset = "0xBED2EC", VA = "0xBED2EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60024C7")]
			[Address(RVA = "0xBED2F0", Offset = "0xBED2F0", VA = "0xBED2F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024C9")]
			[Address(RVA = "0xBED44C", Offset = "0xBED44C", VA = "0xBED44C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The axis around which the circular drive will rotate in local space")]
		public Axis_t axisOfRotation;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Child GameObject which has the Collider component to initiate interaction, only needs to be set if there is more than one Collider child")]
		public Collider childCollider;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A LinearMapping component to drive, if not specified one will be dynamically added to this GameObject")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If true, the drive will stay manipulating as long as the button is held down, if false, it will stop if the controller moves out of the collider")]
		public bool hoverLock;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("If true, the rotation will be limited to [minAngle, maxAngle], if false, the rotation is unlimited")]
		[Header("Limited Rotation")]
		public bool limited;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onFrozenDistanceThreshold;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Limited Rotation Min")]
		[Tooltip("If limited is true, the specifies the lower limit, otherwise value is unused")]
		public float minAngle;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the min angle is reached")]
		public bool freezeOnMin;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If limited, event invoked when minAngle is reached")]
		public UnityEvent onMinAngle;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Limited Rotation Max")]
		[Tooltip("If limited is true, the specifies the upper limit, otherwise value is unused")]
		public float maxAngle;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the max angle is reached")]
		public bool freezeOnMax;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If limited, event invoked when maxAngle is reached")]
		public UnityEvent onMaxAngle;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If limited is true, this forces the starting angle to be startAngle, clamped to [minAngle, maxAngle]")]
		public bool forceStart;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If limited is true and forceStart is true, the starting angle will be this, clamped to [minAngle, maxAngle]")]
		public float startAngle;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, the transform of the GameObject this component is on will be rotated accordingly")]
		public bool rotateGameObject;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("If true, the path of the Hand (red) and the projected value (green) will be drawn")]
		public bool debugPath;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If debugPath is true, this is the maximum number of GameObjects to create to draw the path")]
		public int dbgPathLimit;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If not null, the TextMesh will display the linear value and the angular value of this circular drive")]
		public TextMesh debugText;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The output angle value of the drive in degrees, unlimited will increase or decrease without bound, take the 360 modulus to find number of rotations")]
		public float outAngle;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion start;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 worldPlaneNormal;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 localPlaneNormal;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastHandProjected;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Color red;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Color green;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject[] dbgHandObjects;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameObject[] dbgProjObjects;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject dbgObjectsParent;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int dbgObjectCount;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int dbgObjectIndex;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool driving;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float minMaxAngularThreshold;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool frozen;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float frozenAngle;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 frozenHandWorldPos;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Hand handHoverLocked;

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0xBEB4A0", Offset = "0xBEB4A0", VA = "0xBEB4A0")]
		private void Freeze(Hand hand)
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0xBEB4F4", Offset = "0xBEB4F4", VA = "0xBEB4F4")]
		private void UnFreeze()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0xBEB504", Offset = "0xBEB504", VA = "0xBEB504")]
		private void Start()
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0xBEBA38", Offset = "0xBEBA38", VA = "0xBEBA38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0xBEBC18", Offset = "0xBEBC18", VA = "0xBEBC18")]
		[IteratorStateMachine(typeof(<HapticPulses>d__43))]
		private IEnumerator HapticPulses(SteamVR_Controller.Device controller, float flMagnitude, int nCount)
		{
			return null;
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0xBEBCD4", Offset = "0xBEBCD4", VA = "0xBEBCD4")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0xBEBD48", Offset = "0xBEBD48", VA = "0xBEBD48")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0xBEBEA4", Offset = "0xBEBEA4", VA = "0xBEBEA4")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0xBEC114", Offset = "0xBEC114", VA = "0xBEC114")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0xBECA1C", Offset = "0xBECA1C", VA = "0xBECA1C")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0xBED044", Offset = "0xBED044", VA = "0xBED044")]
		private void UpdateLinearMapping()
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0xBED1A8", Offset = "0xBED1A8", VA = "0xBED1A8")]
		private void UpdateGameObject()
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0xBED0A4", Offset = "0xBED0A4", VA = "0xBED0A4")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0xBEBA18", Offset = "0xBEBA18", VA = "0xBEBA18")]
		private void UpdateAll()
		{
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0xBEC558", Offset = "0xBEC558", VA = "0xBEC558")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0xBED288", Offset = "0xBED288", VA = "0xBED288")]
		public CircularDrive()
		{
		}
	}
	[Token(Token = "0x2000618")]
	[RequireComponent(typeof(Interactable))]
	public class ComplexThrowable : MonoBehaviour
	{
		[Token(Token = "0x2000619")]
		public enum AttachMode
		{
			[Token(Token = "0x4001F3A")]
			FixedJoint,
			[Token(Token = "0x4001F3B")]
			Force
		}

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float attachForce;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attachForceDamper;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachMode attachMode;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> holdingHands;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Rigidbody> holdingBodies;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> holdingPoints;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Rigidbody> rigidBodies;

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0xBED494", Offset = "0xBED494", VA = "0xBED494")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0xBED4E0", Offset = "0xBED4E0", VA = "0xBED4E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0xBED754", Offset = "0xBED754", VA = "0xBED754")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0xBED7DC", Offset = "0xBED7DC", VA = "0xBED7DC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0xBED864", Offset = "0xBED864", VA = "0xBED864")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0xBED8A8", Offset = "0xBED8A8", VA = "0xBED8A8")]
		private void PhysicsAttach(Hand hand)
		{
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0xBED58C", Offset = "0xBED58C", VA = "0xBED58C")]
		private bool PhysicsDetach(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0xBEE678", Offset = "0xBEE678", VA = "0xBEE678")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0xBEE8A0", Offset = "0xBEE8A0", VA = "0xBEE8A0")]
		public ComplexThrowable()
		{
		}
	}
	[Token(Token = "0x200061A")]
	public class ControllerHoverHighlight : MonoBehaviour
	{
		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material highLightMaterial;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fireHapticsOnHightlight;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer bodyMeshRenderer;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer trackingHatMeshRenderer;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool renderModelLoaded;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0xBEEA04", Offset = "0xBEEA04", VA = "0xBEEA04")]
		private void Start()
		{
		}

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0xBEEA5C", Offset = "0xBEEA5C", VA = "0xBEEA5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0xBEEB10", Offset = "0xBEEB10", VA = "0xBEEB10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024D7")]
		[Address(RVA = "0xBEEB30", Offset = "0xBEEB30", VA = "0xBEEB30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0xBEEB50", Offset = "0xBEEB50", VA = "0xBEEB50")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0xBEEBE0", Offset = "0xBEEBE0", VA = "0xBEEBE0")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0xBEF1E8", Offset = "0xBEF1E8", VA = "0xBEF1E8")]
		private void OnParentHandHoverBegin(Interactable other)
		{
		}

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0xBEF3A8", Offset = "0xBEF3A8", VA = "0xBEF3A8")]
		private void OnParentHandHoverEnd(Interactable other)
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0xBEF4A0", Offset = "0xBEF4A0", VA = "0xBEF4A0")]
		private void OnParentHandInputFocusAcquired()
		{
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0xBEF59C", Offset = "0xBEF59C", VA = "0xBEF59C")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0xBEF2B4", Offset = "0xBEF2B4", VA = "0xBEF2B4")]
		public void ShowHighlight()
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0xBEF3AC", Offset = "0xBEF3AC", VA = "0xBEF3AC")]
		public void HideHighlight()
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0xBEF5A0", Offset = "0xBEF5A0", VA = "0xBEF5A0")]
		public ControllerHoverHighlight()
		{
		}
	}
	[Token(Token = "0x200061B")]
	public static class CustomEvents
	{
		[Serializable]
		[Token(Token = "0x200061C")]
		public class UnityEventSingleFloat : UnityEvent<float>
		{
			[Token(Token = "0x60024E1")]
			[Address(RVA = "0xBEF5B0", Offset = "0xBEF5B0", VA = "0xBEF5B0")]
			public UnityEventSingleFloat()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200061D")]
		public class UnityEventHand : UnityEvent<Hand>
		{
			[Token(Token = "0x60024E2")]
			[Address(RVA = "0xBEF5F8", Offset = "0xBEF5F8", VA = "0xBEF5F8")]
			public UnityEventHand()
			{
			}
		}
	}
	[Token(Token = "0x200061E")]
	public class DebugUI : MonoBehaviour
	{
		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Player player;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugUI _instance;

		[Token(Token = "0x170001E4")]
		public static DebugUI instance
		{
			[Token(Token = "0x60024E3")]
			[Address(RVA = "0xBEF640", Offset = "0xBEF640", VA = "0xBEF640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0xBEF714", Offset = "0xBEF714", VA = "0xBEF714")]
		private void Start()
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0xBEF808", Offset = "0xBEF808", VA = "0xBEF808")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0xBEF998", Offset = "0xBEF998", VA = "0xBEF998")]
		public DebugUI()
		{
		}
	}
	[Token(Token = "0x200061F")]
	[RequireComponent(typeof(Interactable))]
	public class DestroyOnDetachedFromHand : MonoBehaviour
	{
		[Token(Token = "0x60024E7")]
		[Address(RVA = "0xBEF9A0", Offset = "0xBEF9A0", VA = "0xBEF9A0")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0xBEFA0C", Offset = "0xBEFA0C", VA = "0xBEFA0C")]
		public DestroyOnDetachedFromHand()
		{
		}
	}
	[Token(Token = "0x2000620")]
	[RequireComponent(typeof(ParticleSystem))]
	public class DestroyOnParticleSystemDeath : MonoBehaviour
	{
		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0xBEFA14", Offset = "0xBEFA14", VA = "0xBEFA14")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0xBEFAA4", Offset = "0xBEFAA4", VA = "0xBEFAA4")]
		private void CheckParticleSystem()
		{
		}

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0xBEFB34", Offset = "0xBEFB34", VA = "0xBEFB34")]
		public DestroyOnParticleSystemDeath()
		{
		}
	}
	[Token(Token = "0x2000621")]
	public class DestroyOnTriggerEnter : MonoBehaviour
	{
		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tagFilter;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useTag;

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0xBEFB3C", Offset = "0xBEFB3C", VA = "0xBEFB3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0xBEFB64", Offset = "0xBEFB64", VA = "0xBEFB64")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0xBEFC40", Offset = "0xBEFC40", VA = "0xBEFC40")]
		public DestroyOnTriggerEnter()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class DistanceHaptics : MonoBehaviour
	{
		[Token(Token = "0x2000623")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DistanceHaptics <>4__this;

			[Token(Token = "0x170001E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60024F4")]
				[Address(RVA = "0xBEFF6C", Offset = "0xBEFF6C", VA = "0xBEFF6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024F6")]
				[Address(RVA = "0xBEFFB4", Offset = "0xBEFFB4", VA = "0xBEFFB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024F1")]
			[Address(RVA = "0xBEFCBC", Offset = "0xBEFCBC", VA = "0xBEFCBC")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60024F2")]
			[Address(RVA = "0xBEFD60", Offset = "0xBEFD60", VA = "0xBEFD60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60024F3")]
			[Address(RVA = "0xBEFD64", Offset = "0xBEFD64", VA = "0xBEFD64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024F5")]
			[Address(RVA = "0xBEFF74", Offset = "0xBEFF74", VA = "0xBEFF74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform firstTransform;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform secondTransform;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve distanceIntensityCurve;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve pulseIntervalCurve;

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0xBEFC48", Offset = "0xBEFC48", VA = "0xBEFC48")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0xBEFCE4", Offset = "0xBEFCE4", VA = "0xBEFCE4")]
		public DistanceHaptics()
		{
		}
	}
	[Token(Token = "0x2000624")]
	public class DontDestroyOnLoad : MonoBehaviour
	{
		[Token(Token = "0x60024F7")]
		[Address(RVA = "0xBEFFBC", Offset = "0xBEFFBC", VA = "0xBEFFBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0xBF0014", Offset = "0xBF0014", VA = "0xBF0014")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class EnumFlags : PropertyAttribute
	{
		[Token(Token = "0x60024F9")]
		[Address(RVA = "0xBF001C", Offset = "0xBF001C", VA = "0xBF001C")]
		public EnumFlags()
		{
		}
	}
	[Token(Token = "0x2000626")]
	[RequireComponent(typeof(Camera))]
	public class FallbackCameraController : MonoBehaviour
	{
		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float shiftSpeed;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showInstructions;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 startEulerAngles;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 startMousePosition;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float realTime;

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0xBF0024", Offset = "0xBF0024", VA = "0xBF0024")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0xBF0040", Offset = "0xBF0040", VA = "0xBF0040")]
		private void Update()
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0xBF02D0", Offset = "0xBF02D0", VA = "0xBF02D0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0xBF0380", Offset = "0xBF0380", VA = "0xBF0380")]
		public FallbackCameraController()
		{
		}
	}
	[Token(Token = "0x2000627")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x2000628")]
		public enum HandType
		{
			[Token(Token = "0x4001F71")]
			Left,
			[Token(Token = "0x4001F72")]
			Right,
			[Token(Token = "0x4001F73")]
			Any
		}

		[Token(Token = "0x2000629")]
		[Flags]
		public enum AttachmentFlags
		{
			[Token(Token = "0x4001F75")]
			SnapOnAttach = 1,
			[Token(Token = "0x4001F76")]
			DetachOthers = 2,
			[Token(Token = "0x4001F77")]
			DetachFromOtherHand = 4,
			[Token(Token = "0x4001F78")]
			ParentToHand = 8
		}

		[Token(Token = "0x200062A")]
		public struct AttachedObject
		{
			[Token(Token = "0x4001F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject attachedObject;

			[Token(Token = "0x4001F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject originalParent;

			[Token(Token = "0x4001F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isParentedToHand;
		}

		[Token(Token = "0x200062D")]
		[CompilerGenerated]
		private sealed class <Start>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x170001EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002528")]
				[Address(RVA = "0xBF2AA0", Offset = "0xBF2AA0", VA = "0xBF2AA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600252A")]
				[Address(RVA = "0xBF2AE8", Offset = "0xBF2AE8", VA = "0xBF2AE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002525")]
			[Address(RVA = "0xBF1438", Offset = "0xBF1438", VA = "0xBF1438")]
			[DebuggerHidden]
			public <Start>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6002526")]
			[Address(RVA = "0xBF2774", Offset = "0xBF2774", VA = "0xBF2774", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002527")]
			[Address(RVA = "0xBF2778", Offset = "0xBF2778", VA = "0xBF2778", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002529")]
			[Address(RVA = "0xBF2AA8", Offset = "0xBF2AA8", VA = "0xBF2AA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F56")]
		public const AttachmentFlags defaultAttachmentFlags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand otherHand;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandType startingHandType;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform hoverSphereTransform;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float hoverSphereRadius;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask hoverLayerMask;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float hoverUpdateInterval;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Camera noSteamVRFallbackCamera;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float noSteamVRFallbackMaxDistanceNoItem;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float noSteamVRFallbackMaxDistanceWithItem;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float noSteamVRFallbackInteractorDistance;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SteamVR_Controller.Device controller;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject controllerPrefab;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject controllerObject;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool showDebugText;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool spewDebugText;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<AttachedObject> attachedObjects;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Interactable _hoveringInteractable;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TextMesh debugText;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int prevOverlappingColliders;

		[Token(Token = "0x4001F6B")]
		private const int ColliderArraySize = 16;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] overlappingColliders;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player playerInstance;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject applicationLostFocusObject;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private SteamVR_Events.Action inputFocusAction;

		[Token(Token = "0x170001E7")]
		public ReadOnlyCollection<AttachedObject> AttachedObjects
		{
			[Token(Token = "0x60024FE")]
			[Address(RVA = "0xBF039C", Offset = "0xBF039C", VA = "0xBF039C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		public bool hoverLocked
		{
			[Token(Token = "0x60024FF")]
			[Address(RVA = "0xBF03EC", Offset = "0xBF03EC", VA = "0xBF03EC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002500")]
			[Address(RVA = "0xBF03F4", Offset = "0xBF03F4", VA = "0xBF03F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public Interactable hoveringInteractable
		{
			[Token(Token = "0x6002501")]
			[Address(RVA = "0xBF0400", Offset = "0xBF0400", VA = "0xBF0400")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002502")]
			[Address(RVA = "0xBF0408", Offset = "0xBF0408", VA = "0xBF0408")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public GameObject currentAttachedObject
		{
			[Token(Token = "0x6002503")]
			[Address(RVA = "0xBF0784", Offset = "0xBF0784", VA = "0xBF0784")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0xBF0918", Offset = "0xBF0918", VA = "0xBF0918")]
		public Transform GetAttachmentTransform(string attachmentPoint = "")
		{
			return null;
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0xBF09CC", Offset = "0xBF09CC", VA = "0xBF09CC")]
		public HandType GuessCurrentHandType()
		{
			return default(HandType);
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0xBEDE70", Offset = "0xBEDE70", VA = "0xBEDE70")]
		public void AttachObject(GameObject objectToAttach, AttachmentFlags flags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand, string attachmentPoint = "")
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0xBEE2D0", Offset = "0xBEE2D0", VA = "0xBEE2D0")]
		public void DetachObject(GameObject objectToDetach, bool restoreOriginalParent = true)
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0xBF10E4", Offset = "0xBF10E4", VA = "0xBF10E4")]
		public Vector3 GetTrackedObjectVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0xBF1178", Offset = "0xBF1178", VA = "0xBF1178")]
		public Vector3 GetTrackedObjectAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0xBF0810", Offset = "0xBF0810", VA = "0xBF0810")]
		private void CleanUpAttachedObjectStack()
		{
		}

		[Token(Token = "0x600250B")]
		[Address(RVA = "0xBF120C", Offset = "0xBF120C", VA = "0xBF120C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600250C")]
		[Address(RVA = "0xBF13C4", Offset = "0xBF13C4", VA = "0xBF13C4")]
		[IteratorStateMachine(typeof(<Start>d__47))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0xBF0AD0", Offset = "0xBF0AD0", VA = "0xBF0AD0")]
		private void UpdateHovering()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0xBF1468", Offset = "0xBF1468", VA = "0xBF1468")]
		private void UpdateNoSteamVRFallback()
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0xBF170C", Offset = "0xBF170C", VA = "0xBF170C")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0xBF1C90", Offset = "0xBF1C90", VA = "0xBF1C90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0xBF1DA4", Offset = "0xBF1DA4", VA = "0xBF1DA4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002512")]
		[Address(RVA = "0xBF1DD4", Offset = "0xBF1DD4", VA = "0xBF1DD4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002513")]
		[Address(RVA = "0xBF1EDC", Offset = "0xBF1EDC", VA = "0xBF1EDC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0xBF1F94", Offset = "0xBF1F94", VA = "0xBF1F94")]
		private void OnInputFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6002515")]
		[Address(RVA = "0xBF21C0", Offset = "0xBF21C0", VA = "0xBF21C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0xBF21C4", Offset = "0xBF21C4", VA = "0xBF21C4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0xBF06B0", Offset = "0xBF06B0", VA = "0xBF06B0")]
		private void HandDebugLog(string msg)
		{
		}

		[Token(Token = "0x6002518")]
		[Address(RVA = "0xBF207C", Offset = "0xBF207C", VA = "0xBF207C")]
		private void UpdateHandPoses()
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0xBEC4B8", Offset = "0xBEC4B8", VA = "0xBEC4B8")]
		public void HoverLock(Interactable interactable)
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0xBEBB48", Offset = "0xBEBB48", VA = "0xBEBB48")]
		public void HoverUnlock(Interactable interactable)
		{
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0xBEC084", Offset = "0xBEC084", VA = "0xBEC084")]
		public bool GetStandardInteractionButtonDown()
		{
			return default(bool);
		}

		[Token(Token = "0x600251C")]
		[Address(RVA = "0xBEC98C", Offset = "0xBEC98C", VA = "0xBEC98C")]
		public bool GetStandardInteractionButtonUp()
		{
			return default(bool);
		}

		[Token(Token = "0x600251D")]
		[Address(RVA = "0xBEBE14", Offset = "0xBEBE14", VA = "0xBEBE14")]
		public bool GetStandardInteractionButton()
		{
			return default(bool);
		}

		[Token(Token = "0x600251E")]
		[Address(RVA = "0xBF2274", Offset = "0xBF2274", VA = "0xBF2274")]
		private void InitController(int index)
		{
		}

		[Token(Token = "0x600251F")]
		[Address(RVA = "0xBF256C", Offset = "0xBF256C", VA = "0xBF256C")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200062F")]
	[RequireComponent(typeof(Interactable))]
	public class HapticRack : MonoBehaviour
	{
		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The linear mapping driving the haptic rack")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The number of haptic pulses evenly distributed along the mapping")]
		public int teethCount;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Minimum duration of the haptic pulse")]
		public int minimumPulseDuration;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximum duration of the haptic pulse")]
		public int maximumPulseDuration;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This event is triggered every time a haptic pulse is made")]
		public UnityEvent onPulse;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int previousToothIndex;

		[Token(Token = "0x600252D")]
		[Address(RVA = "0xBF2B70", Offset = "0xBF2B70", VA = "0xBF2B70")]
		private void Awake()
		{
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0xBF2C20", Offset = "0xBF2C20", VA = "0xBF2C20")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0xBF2C28", Offset = "0xBF2C28", VA = "0xBF2C28")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0xBF2C34", Offset = "0xBF2C34", VA = "0xBF2C34")]
		private void Update()
		{
		}

		[Token(Token = "0x6002531")]
		[Address(RVA = "0xBF2D4C", Offset = "0xBF2D4C", VA = "0xBF2D4C")]
		private void Pulse()
		{
		}

		[Token(Token = "0x6002532")]
		[Address(RVA = "0xBF2E14", Offset = "0xBF2E14", VA = "0xBF2E14")]
		public HapticRack()
		{
		}
	}
	[Token(Token = "0x2000630")]
	public class HideOnHandFocusLost : MonoBehaviour
	{
		[Token(Token = "0x6002533")]
		[Address(RVA = "0xBF2E38", Offset = "0xBF2E38", VA = "0xBF2E38")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6002534")]
		[Address(RVA = "0xBF2E5C", Offset = "0xBF2E5C", VA = "0xBF2E5C")]
		public HideOnHandFocusLost()
		{
		}
	}
	[Token(Token = "0x2000631")]
	public class IgnoreHovering : MonoBehaviour
	{
		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If Hand is not null, only ignore the specified hand")]
		public Hand onlyIgnoreHand;

		[Token(Token = "0x6002535")]
		[Address(RVA = "0xBF2E64", Offset = "0xBF2E64", VA = "0xBF2E64")]
		public IgnoreHovering()
		{
		}
	}
	[Token(Token = "0x2000632")]
	public class InputModule : BaseInputModule
	{
		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject submitObject;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputModule _instance;

		[Token(Token = "0x170001ED")]
		public static InputModule instance
		{
			[Token(Token = "0x6002536")]
			[Address(RVA = "0xBF2E6C", Offset = "0xBF2E6C", VA = "0xBF2E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002537")]
		[Address(RVA = "0xBF2F40", Offset = "0xBF2F40", VA = "0xBF2F40", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6002538")]
		[Address(RVA = "0xBF2FC0", Offset = "0xBF2FC0", VA = "0xBF2FC0")]
		public void HoverBegin(GameObject gameObject)
		{
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0xBF30B0", Offset = "0xBF30B0", VA = "0xBF30B0")]
		public void HoverEnd(GameObject gameObject)
		{
		}

		[Token(Token = "0x600253A")]
		[Address(RVA = "0xBF31B0", Offset = "0xBF31B0", VA = "0xBF31B0")]
		public void Submit(GameObject gameObject)
		{
		}

		[Token(Token = "0x600253B")]
		[Address(RVA = "0xBF31B8", Offset = "0xBF31B8", VA = "0xBF31B8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x600253C")]
		[Address(RVA = "0xBF32F8", Offset = "0xBF32F8", VA = "0xBF32F8")]
		public InputModule()
		{
		}
	}
	[Token(Token = "0x2000633")]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x2000634")]
		public delegate void OnAttachedToHandDelegate(Hand hand);

		[Token(Token = "0x2000635")]
		public delegate void OnDetachedFromHandDelegate(Hand hand);

		[Token(Token = "0x14000107")]
		[HideInInspector]
		public event OnAttachedToHandDelegate onAttachedToHand
		{
			[Token(Token = "0x600253D")]
			[Address(RVA = "0xBF3300", Offset = "0xBF3300", VA = "0xBF3300")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600253E")]
			[Address(RVA = "0xBF339C", Offset = "0xBF339C", VA = "0xBF339C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000108")]
		[HideInInspector]
		public event OnDetachedFromHandDelegate onDetachedFromHand
		{
			[Token(Token = "0x600253F")]
			[Address(RVA = "0xBF3438", Offset = "0xBF3438", VA = "0xBF3438")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002540")]
			[Address(RVA = "0xBF34D4", Offset = "0xBF34D4", VA = "0xBF34D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002541")]
		[Address(RVA = "0xBF3570", Offset = "0xBF3570", VA = "0xBF3570")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6002542")]
		[Address(RVA = "0xBF358C", Offset = "0xBF358C", VA = "0xBF358C")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0xBF35A8", Offset = "0xBF35A8", VA = "0xBF35A8")]
		public Interactable()
		{
		}
	}
	[Token(Token = "0x2000636")]
	[RequireComponent(typeof(Interactable))]
	public class InteractableButtonEvents : MonoBehaviour
	{
		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onGripDown;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onGripUp;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onTouchpadDown;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onTouchpadUp;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onTouchpadTouch;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onTouchpadRelease;

		[Token(Token = "0x600254C")]
		[Address(RVA = "0xBF38A8", Offset = "0xBF38A8", VA = "0xBF38A8")]
		private void Update()
		{
		}

		[Token(Token = "0x600254D")]
		[Address(RVA = "0xBF3B68", Offset = "0xBF3B68", VA = "0xBF3B68")]
		public InteractableButtonEvents()
		{
		}
	}
	[Token(Token = "0x2000637")]
	[RequireComponent(typeof(Interactable))]
	public class InteractableHoverEvents : MonoBehaviour
	{
		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onHandHoverBegin;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onHandHoverEnd;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onAttachedToHand;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onDetachedFromHand;

		[Token(Token = "0x600254E")]
		[Address(RVA = "0xBF3B70", Offset = "0xBF3B70", VA = "0xBF3B70")]
		private void OnHandHoverBegin()
		{
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0xBF3B8C", Offset = "0xBF3B8C", VA = "0xBF3B8C")]
		private void OnHandHoverEnd()
		{
		}

		[Token(Token = "0x6002550")]
		[Address(RVA = "0xBF3BA8", Offset = "0xBF3BA8", VA = "0xBF3BA8")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6002551")]
		[Address(RVA = "0xBF3BC4", Offset = "0xBF3BC4", VA = "0xBF3BC4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0xBF3BE0", Offset = "0xBF3BE0", VA = "0xBF3BE0")]
		public InteractableHoverEvents()
		{
		}
	}
	[Token(Token = "0x2000638")]
	public class ItemPackage : MonoBehaviour
	{
		[Token(Token = "0x2000639")]
		public enum ItemPackageType
		{
			[Token(Token = "0x4001FA2")]
			Unrestricted,
			[Token(Token = "0x4001FA3")]
			OneHanded,
			[Token(Token = "0x4001FA4")]
			TwoHanded
		}

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemPackageType packageType;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemPrefab;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject otherHandItemPrefab;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject previewPrefab;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject fadedPreviewPrefab;

		[Token(Token = "0x6002553")]
		[Address(RVA = "0xBF3BE8", Offset = "0xBF3BE8", VA = "0xBF3BE8")]
		public ItemPackage()
		{
		}
	}
	[Token(Token = "0x200063A")]
	public class ItemPackageReference : MonoBehaviour
	{
		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage itemPackage;

		[Token(Token = "0x6002554")]
		[Address(RVA = "0xBF3BF0", Offset = "0xBF3BF0", VA = "0xBF3BF0")]
		public ItemPackageReference()
		{
		}
	}
	[Token(Token = "0x200063B")]
	[RequireComponent(typeof(Interactable))]
	public class ItemPackageSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage _itemPackage;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useItemPackagePreview;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool useFadedPreview;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject previewObject;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool requireTriggerPressToTake;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool requireTriggerPressToReturn;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool showTriggerHint;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string attachmentPoint;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool takeBackItem;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool acceptDifferentItems;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject spawnedItem;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool itemIsSpawned;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent pickupEvent;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent dropEvent;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool justPickedUpItem;

		[Token(Token = "0x170001EE")]
		public ItemPackage itemPackage
		{
			[Token(Token = "0x6002555")]
			[Address(RVA = "0xBF3BF8", Offset = "0xBF3BF8", VA = "0xBF3BF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002556")]
			[Address(RVA = "0xBF3C00", Offset = "0xBF3C00", VA = "0xBF3C00")]
			set
			{
			}
		}

		[Token(Token = "0x6002557")]
		[Address(RVA = "0xBF3C04", Offset = "0xBF3C04", VA = "0xBF3C04")]
		private void CreatePreviewObject()
		{
		}

		[Token(Token = "0x6002558")]
		[Address(RVA = "0xBF4204", Offset = "0xBF4204", VA = "0xBF4204")]
		private void Start()
		{
		}

		[Token(Token = "0x6002559")]
		[Address(RVA = "0xBF4208", Offset = "0xBF4208", VA = "0xBF4208")]
		private void VerifyItemPackage()
		{
		}

		[Token(Token = "0x600255A")]
		[Address(RVA = "0xBF42BC", Offset = "0xBF42BC", VA = "0xBF42BC")]
		private void ItemPackageNotValid()
		{
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0xBF3E94", Offset = "0xBF3E94", VA = "0xBF3E94")]
		private void ClearPreview()
		{
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0xBF43C4", Offset = "0xBF43C4", VA = "0xBF43C4")]
		private void Update()
		{
		}

		[Token(Token = "0x600255D")]
		[Address(RVA = "0xBF4460", Offset = "0xBF4460", VA = "0xBF4460")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0xBF4644", Offset = "0xBF4644", VA = "0xBF4644")]
		private void TakeBackItem(Hand hand)
		{
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0xBF455C", Offset = "0xBF455C", VA = "0xBF455C")]
		private ItemPackage GetAttachedItemPackage(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0xBF4B24", Offset = "0xBF4B24", VA = "0xBF4B24")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0xBF4C24", Offset = "0xBF4C24", VA = "0xBF4C24")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0xBF4978", Offset = "0xBF4978", VA = "0xBF4978")]
		private void RemoveMatchingItemsFromHandStack(ItemPackage package, Hand hand)
		{
		}

		[Token(Token = "0x6002563")]
		[Address(RVA = "0xBF4C60", Offset = "0xBF4C60", VA = "0xBF4C60")]
		private void RemoveMatchingItemTypesFromHand(ItemPackage.ItemPackageType packageType, Hand hand)
		{
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0xBF469C", Offset = "0xBF469C", VA = "0xBF469C")]
		private void SpawnAndAttachObject(Hand hand)
		{
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0xBF4DD4", Offset = "0xBF4DD4", VA = "0xBF4DD4")]
		public ItemPackageSpawner()
		{
		}
	}
	[Token(Token = "0x200063C")]
	public class LinearAnimation : MonoBehaviour
	{
		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationState animState;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float animLength;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lastValue;

		[Token(Token = "0x6002566")]
		[Address(RVA = "0xBF4DEC", Offset = "0xBF4DEC", VA = "0xBF4DEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002567")]
		[Address(RVA = "0xBF4F84", Offset = "0xBF4F84", VA = "0xBF4F84")]
		private void Update()
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0xBF4FD4", Offset = "0xBF4FD4", VA = "0xBF4FD4")]
		public LinearAnimation()
		{
		}
	}
	[Token(Token = "0x200063D")]
	public class LinearAnimator : MonoBehaviour
	{
		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentLinearMapping;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesUnchanged;

		[Token(Token = "0x6002569")]
		[Address(RVA = "0xBF4FDC", Offset = "0xBF4FDC", VA = "0xBF4FDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600256A")]
		[Address(RVA = "0xBF5100", Offset = "0xBF5100", VA = "0xBF5100")]
		private void Update()
		{
		}

		[Token(Token = "0x600256B")]
		[Address(RVA = "0xBF5194", Offset = "0xBF5194", VA = "0xBF5194")]
		public LinearAnimator()
		{
		}
	}
	[Token(Token = "0x200063E")]
	public class LinearAudioPitch : MonoBehaviour
	{
		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchCurve;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool applyContinuously;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Token(Token = "0x600256C")]
		[Address(RVA = "0xBF51A4", Offset = "0xBF51A4", VA = "0xBF51A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600256D")]
		[Address(RVA = "0xBF52B0", Offset = "0xBF52B0", VA = "0xBF52B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600256E")]
		[Address(RVA = "0xBF52C0", Offset = "0xBF52C0", VA = "0xBF52C0")]
		private void Apply()
		{
		}

		[Token(Token = "0x600256F")]
		[Address(RVA = "0xBF5320", Offset = "0xBF5320", VA = "0xBF5320")]
		public LinearAudioPitch()
		{
		}
	}
	[Token(Token = "0x200063F")]
	public class LinearBlendshape : MonoBehaviour
	{
		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer skinnedMesh;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastValue;

		[Token(Token = "0x6002570")]
		[Address(RVA = "0xBF5330", Offset = "0xBF5330", VA = "0xBF5330")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002571")]
		[Address(RVA = "0xBF543C", Offset = "0xBF543C", VA = "0xBF543C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002572")]
		[Address(RVA = "0xBF54A8", Offset = "0xBF54A8", VA = "0xBF54A8")]
		public LinearBlendshape()
		{
		}
	}
	[Token(Token = "0x2000640")]
	public class LinearDisplacement : MonoBehaviour
	{
		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 displacement;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialPosition;

		[Token(Token = "0x6002573")]
		[Address(RVA = "0xBF54B0", Offset = "0xBF54B0", VA = "0xBF54B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002574")]
		[Address(RVA = "0xBF5584", Offset = "0xBF5584", VA = "0xBF5584")]
		private void Update()
		{
		}

		[Token(Token = "0x6002575")]
		[Address(RVA = "0xBF563C", Offset = "0xBF563C", VA = "0xBF563C")]
		public LinearDisplacement()
		{
		}
	}
	[Token(Token = "0x2000641")]
	[RequireComponent(typeof(Interactable))]
	public class LinearDrive : MonoBehaviour
	{
		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform startPosition;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform endPosition;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool repositionGameObject;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool maintainMomemntum;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float momemtumDampenRate;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float initialMappingOffset;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int numMappingChangeSamples;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] mappingChangeSamples;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float prevMapping;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float mappingChangeRate;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int sampleCount;

		[Token(Token = "0x6002576")]
		[Address(RVA = "0xBF5644", Offset = "0xBF5644", VA = "0xBF5644")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002577")]
		[Address(RVA = "0xBF569C", Offset = "0xBF569C", VA = "0xBF569C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002578")]
		[Address(RVA = "0xBF5948", Offset = "0xBF5948", VA = "0xBF5948")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0xBF5C04", Offset = "0xBF5C04", VA = "0xBF5C04")]
		private void CalculateMappingChangeRate()
		{
		}

		[Token(Token = "0x600257A")]
		[Address(RVA = "0xBF57E4", Offset = "0xBF57E4", VA = "0xBF57E4")]
		private void UpdateLinearMapping(Transform tr)
		{
		}

		[Token(Token = "0x600257B")]
		[Address(RVA = "0xBF5A4C", Offset = "0xBF5A4C", VA = "0xBF5A4C")]
		private float CalculateLinearMapping(Transform tr)
		{
			return default(float);
		}

		[Token(Token = "0x600257C")]
		[Address(RVA = "0xBF5C88", Offset = "0xBF5C88", VA = "0xBF5C88")]
		private void Update()
		{
		}

		[Token(Token = "0x600257D")]
		[Address(RVA = "0xBF5DD0", Offset = "0xBF5DD0", VA = "0xBF5DD0")]
		public LinearDrive()
		{
		}
	}
	[Token(Token = "0x2000642")]
	public class LinearMapping : MonoBehaviour
	{
		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x600257E")]
		[Address(RVA = "0xBF5DF0", Offset = "0xBF5DF0", VA = "0xBF5DF0")]
		public LinearMapping()
		{
		}
	}
	[Token(Token = "0x2000643")]
	public class Player : MonoBehaviour
	{
		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Virtual transform corresponding to the meatspace tracking origin. Devices are tracked relative to this.")]
		public Transform trackingOriginTransform;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("List of possible transforms for the head/HMD, including the no-SteamVR fallback camera.")]
		public Transform[] hmdTransforms;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("List of possible Hands, including no-SteamVR fallback Hands.")]
		public Hand[] hands;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the physics collider that follows the player's HMD position.")]
		public Collider headCollider;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("These objects are enabled when SteamVR is available")]
		public GameObject rigSteamVR;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("These objects are enabled when SteamVR is not available, or when the user toggles out of VR")]
		public GameObject rig2DFallback;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The audio listener for this player")]
		public Transform audioListener;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowToggleTo2D;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player _instance;

		[Token(Token = "0x170001EF")]
		public static Player instance
		{
			[Token(Token = "0x600257F")]
			[Address(RVA = "0xBEF734", Offset = "0xBEF734", VA = "0xBEF734")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F0")]
		public int handCount
		{
			[Token(Token = "0x6002580")]
			[Address(RVA = "0xBF3AEC", Offset = "0xBF3AEC", VA = "0xBF3AEC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F1")]
		public Hand leftHand
		{
			[Token(Token = "0x6002582")]
			[Address(RVA = "0xBF5DF8", Offset = "0xBF5DF8", VA = "0xBF5DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F2")]
		public Hand rightHand
		{
			[Token(Token = "0x6002583")]
			[Address(RVA = "0xBF5EB8", Offset = "0xBF5EB8", VA = "0xBF5EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		public SteamVR_Controller.Device leftController
		{
			[Token(Token = "0x6002584")]
			[Address(RVA = "0xBF5F7C", Offset = "0xBF5F7C", VA = "0xBF5F7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F4")]
		public SteamVR_Controller.Device rightController
		{
			[Token(Token = "0x6002585")]
			[Address(RVA = "0xBF6000", Offset = "0xBF6000", VA = "0xBF6000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F5")]
		public Transform hmdTransform
		{
			[Token(Token = "0x6002586")]
			[Address(RVA = "0xBF6084", Offset = "0xBF6084", VA = "0xBF6084")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		public float eyeHeight
		{
			[Token(Token = "0x6002587")]
			[Address(RVA = "0xBF6114", Offset = "0xBF6114", VA = "0xBF6114")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F7")]
		public Vector3 feetPositionGuess
		{
			[Token(Token = "0x6002588")]
			[Address(RVA = "0xBF6334", Offset = "0xBF6334", VA = "0xBF6334")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001F8")]
		public Vector3 bodyDirectionGuess
		{
			[Token(Token = "0x6002589")]
			[Address(RVA = "0xBF64FC", Offset = "0xBF64FC", VA = "0xBF64FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002581")]
		[Address(RVA = "0xBF3A40", Offset = "0xBF3A40", VA = "0xBF3A40")]
		public Hand GetHand(int i)
		{
			return null;
		}

		[Token(Token = "0x600258A")]
		[Address(RVA = "0xBF66C4", Offset = "0xBF66C4", VA = "0xBF66C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600258B")]
		[Address(RVA = "0xBF6760", Offset = "0xBF6760", VA = "0xBF6760")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600258C")]
		[Address(RVA = "0xBF69BC", Offset = "0xBF69BC", VA = "0xBF69BC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600258D")]
		[Address(RVA = "0xBEF820", Offset = "0xBEF820", VA = "0xBEF820")]
		public void Draw2DDebug()
		{
		}

		[Token(Token = "0x600258E")]
		[Address(RVA = "0xBF6808", Offset = "0xBF6808", VA = "0xBF6808")]
		private void ActivateRig(GameObject rig)
		{
		}

		[Token(Token = "0x600258F")]
		[Address(RVA = "0xBF6E48", Offset = "0xBF6E48", VA = "0xBF6E48")]
		public void PlayerShotSelf()
		{
		}

		[Token(Token = "0x6002590")]
		[Address(RVA = "0xBF6E4C", Offset = "0xBF6E4C", VA = "0xBF6E4C")]
		public Player()
		{
		}
	}
	[Token(Token = "0x2000644")]
	[RequireComponent(typeof(AudioSource))]
	public class PlaySound : MonoBehaviour
	{
		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("List of audio clips to play.")]
		public AudioClip[] waveFile;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Stops the currently playing clip in the audioSource. Otherwise clips will overlap/mix.")]
		public bool stopOnPlay;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("After the audio clip finishes playing, disable the game object the sound is on.")]
		public bool disableOnEnd;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("Loop the sound after the wave file variation has been chosen.")]
		public bool looping;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[Tooltip("If the sound is looping and updating it's position every frame, stop the sound at the end of the wav/clip length. ")]
		public bool stopOnEnd;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Start a wave file playing on awake, but after a delay.")]
		public bool playOnAwakeWithDelay;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Header("Random Volume")]
		public bool useRandomVolume;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Minimum volume that will be used when randomly set.")]
		[Range(0f, 1f)]
		public float volMin;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Maximum volume that will be used when randomly set.")]
		[Range(0f, 1f)]
		public float volMax;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Random Pitch")]
		[Tooltip("Use min and max random pitch levels when playing sounds.")]
		public bool useRandomPitch;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Minimum pitch that will be used when randomly set.")]
		[Range(-3f, 3f)]
		public float pitchMin;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(-3f, 3f)]
		[Tooltip("Maximum pitch that will be used when randomly set.")]
		public float pitchMax;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Random Time")]
		[Tooltip("Use Retrigger Time to repeat the sound within a time range")]
		public bool useRetriggerTime;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Inital time before the first repetion starts")]
		[Range(0f, 360f)]
		public float timeInitial;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 360f)]
		[Tooltip("Minimum time that will pass before the sound is retriggered")]
		public float timeMin;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 360f)]
		[Tooltip("Maximum pitch that will be used when randomly set.")]
		public float timeMax;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Use Retrigger Time to repeat the sound within a time range")]
		[Header("Random Silence")]
		public bool useRandomSilence;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[Tooltip("Percent chance that the wave file will not play")]
		public float percentToNotPlay;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Delay Time")]
		[Tooltip("Time to offset playback of sound")]
		public float delayOffsetTime;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioClip clip;

		[Token(Token = "0x6002591")]
		[Address(RVA = "0xC08FE8", Offset = "0xC08FE8", VA = "0xC08FE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002592")]
		[Address(RVA = "0xC0913C", Offset = "0xC0913C", VA = "0xC0913C")]
		public void Play()
		{
		}

		[Token(Token = "0x6002593")]
		[Address(RVA = "0xC0914C", Offset = "0xC0914C", VA = "0xC0914C")]
		public void PlayWithDelay(float delayTime)
		{
		}

		[Token(Token = "0x6002594")]
		[Address(RVA = "0xC0928C", Offset = "0xC0928C", VA = "0xC0928C")]
		public AudioClip PlayOneShotSound()
		{
			return null;
		}

		[Token(Token = "0x6002595")]
		[Address(RVA = "0xC091D0", Offset = "0xC091D0", VA = "0xC091D0")]
		public AudioClip PlayLooping()
		{
			return null;
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0xC09464", Offset = "0xC09464", VA = "0xC09464")]
		public void Disable()
		{
		}

		[Token(Token = "0x6002597")]
		[Address(RVA = "0xC09488", Offset = "0xC09488", VA = "0xC09488")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002598")]
		[Address(RVA = "0xC0934C", Offset = "0xC0934C", VA = "0xC0934C")]
		private void SetAudioSource()
		{
		}

		[Token(Token = "0x6002599")]
		[Address(RVA = "0xC094A4", Offset = "0xC094A4", VA = "0xC094A4")]
		public PlaySound()
		{
		}
	}
	[Token(Token = "0x2000645")]
	public class SeeThru : MonoBehaviour
	{
		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material seeThruMaterial;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject seeThru;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Interactable interactable;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer sourceRenderer;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer destRenderer;

		[Token(Token = "0x600259A")]
		[Address(RVA = "0xC094C4", Offset = "0xC094C4", VA = "0xC094C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0xC09B78", Offset = "0xC09B78", VA = "0xC09B78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0xC09C6C", Offset = "0xC09C6C", VA = "0xC09C6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0xC09D60", Offset = "0xC09D60", VA = "0xC09D60")]
		private void AttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0xC09D80", Offset = "0xC09D80", VA = "0xC09D80")]
		private void DetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0xC09DA0", Offset = "0xC09DA0", VA = "0xC09DA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0xC09F6C", Offset = "0xC09F6C", VA = "0xC09F6C")]
		public SeeThru()
		{
		}
	}
	[Token(Token = "0x2000646")]
	public class SleepOnAwake : MonoBehaviour
	{
		[Token(Token = "0x60025A1")]
		[Address(RVA = "0xC09F74", Offset = "0xC09F74", VA = "0xC09F74")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0xC0A024", Offset = "0xC0A024", VA = "0xC0A024")]
		public SleepOnAwake()
		{
		}
	}
	[Token(Token = "0x2000647")]
	public class SoundDeparent : MonoBehaviour
	{
		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool destroyAfterPlayOnce;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x60025A3")]
		[Address(RVA = "0xC0A02C", Offset = "0xC0A02C", VA = "0xC0A02C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025A4")]
		[Address(RVA = "0xC0A084", Offset = "0xC0A084", VA = "0xC0A084")]
		private void Start()
		{
		}

		[Token(Token = "0x60025A5")]
		[Address(RVA = "0xC0A160", Offset = "0xC0A160", VA = "0xC0A160")]
		public SoundDeparent()
		{
		}
	}
	[Token(Token = "0x2000648")]
	public class SoundPlayOneshot : MonoBehaviour
	{
		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] waveFiles;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volMin;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volMax;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMin;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitchMax;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool playOnAwake;

		[Token(Token = "0x60025A6")]
		[Address(RVA = "0xC0A170", Offset = "0xC0A170", VA = "0xC0A170")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025A7")]
		[Address(RVA = "0xC0A1E8", Offset = "0xC0A1E8", VA = "0xC0A1E8")]
		public void Play()
		{
		}

		[Token(Token = "0x60025A8")]
		[Address(RVA = "0xC0A318", Offset = "0xC0A318", VA = "0xC0A318")]
		public void Pause()
		{
		}

		[Token(Token = "0x60025A9")]
		[Address(RVA = "0xC0A39C", Offset = "0xC0A39C", VA = "0xC0A39C")]
		public void UnPause()
		{
		}

		[Token(Token = "0x60025AA")]
		[Address(RVA = "0xC0A420", Offset = "0xC0A420", VA = "0xC0A420")]
		public SoundPlayOneshot()
		{
		}
	}
	[Token(Token = "0x2000649")]
	public class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour
	{
		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemPrefab;

		[Token(Token = "0x60025AB")]
		[Address(RVA = "0xC0A428", Offset = "0xC0A428", VA = "0xC0A428")]
		private void Start()
		{
		}

		[Token(Token = "0x60025AC")]
		[Address(RVA = "0xC0A480", Offset = "0xC0A480", VA = "0xC0A480")]
		private void Update()
		{
		}

		[Token(Token = "0x60025AD")]
		[Address(RVA = "0xC0A5FC", Offset = "0xC0A5FC", VA = "0xC0A5FC")]
		public SpawnAndAttachAfterControllerIsTracking()
		{
		}
	}
	[Token(Token = "0x200064A")]
	public class SpawnAndAttachToHand : MonoBehaviour
	{
		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject prefab;

		[Token(Token = "0x60025AE")]
		[Address(RVA = "0xC0A604", Offset = "0xC0A604", VA = "0xC0A604")]
		public void SpawnAndAttach(Hand passedInhand)
		{
		}

		[Token(Token = "0x60025AF")]
		[Address(RVA = "0xC0A710", Offset = "0xC0A710", VA = "0xC0A710")]
		public SpawnAndAttachToHand()
		{
		}
	}
	[Token(Token = "0x200064B")]
	public class SpawnRenderModel : MonoBehaviour
	{
		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material[] materials;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamVR_RenderModel[] renderModels;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MeshRenderer> renderers;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<SpawnRenderModel> spawnRenderModels;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lastFrameUpdated;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int spawnRenderModelUpdateIndex;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x60025B0")]
		[Address(RVA = "0xC0A718", Offset = "0xC0A718", VA = "0xC0A718")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0xC0A804", Offset = "0xC0A804", VA = "0xC0A804")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0xC0AB7C", Offset = "0xC0AB7C", VA = "0xC0AB7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0xC0ACF4", Offset = "0xC0ACF4", VA = "0xC0ACF4")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0xC0AD10", Offset = "0xC0AD10", VA = "0xC0AD10")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0xC0AD30", Offset = "0xC0AD30", VA = "0xC0AD30")]
		private void Update()
		{
		}

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0xC0A8F8", Offset = "0xC0A8F8", VA = "0xC0A8F8")]
		private void ShowController()
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0xC0AC18", Offset = "0xC0AC18", VA = "0xC0AC18")]
		private void HideController()
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0xC0AFDC", Offset = "0xC0AFDC", VA = "0xC0AFDC")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0xC0B2C4", Offset = "0xC0B2C4", VA = "0xC0B2C4")]
		public SpawnRenderModel()
		{
		}
	}
	[Token(Token = "0x200064C")]
	[RequireComponent(typeof(Interactable))]
	[RequireComponent(typeof(VelocityEstimator))]
	[RequireComponent(typeof(Rigidbody))]
	public class Throwable : MonoBehaviour
	{
		[Token(Token = "0x200064D")]
		[CompilerGenerated]
		private sealed class <LateDetach>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4002024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Throwable <>4__this;

			[Token(Token = "0x170001F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025C9")]
				[Address(RVA = "0xC0C5B0", Offset = "0xC0C5B0", VA = "0xC0C5B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025CB")]
				[Address(RVA = "0xC0C5F8", Offset = "0xC0C5F8", VA = "0xC0C5F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025C6")]
			[Address(RVA = "0xC0C3FC", Offset = "0xC0C3FC", VA = "0xC0C3FC")]
			[DebuggerHidden]
			public <LateDetach>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60025C7")]
			[Address(RVA = "0xC0C4E0", Offset = "0xC0C4E0", VA = "0xC0C4E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025C8")]
			[Address(RVA = "0xC0C4E4", Offset = "0xC0C4E4", VA = "0xC0C4E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025CA")]
			[Address(RVA = "0xC0C5B8", Offset = "0xC0C5B8", VA = "0xC0C5B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[EnumFlags]
		[Tooltip("The flags used to attach this object to the hand.")]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Name of the attachment transform under in the hand's hierarchy which the object should should snap to.")]
		public string attachmentPoint;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How fast must this object be moving to attach due to a trigger hold instead of a trigger press?")]
		public float catchSpeedThreshold;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("When detaching the object, should it return to its original parent?")]
		public bool restoreOriginalParent;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool attachEaseIn;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve snapAttachEaseInCurve;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float snapAttachEaseInTime;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] attachEaseInAttachmentNames;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VelocityEstimator velocityEstimator;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool attached;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float attachTime;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 attachPosition;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion attachRotation;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform attachEaseInTransform;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onPickUp;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onDetachFromHand;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool snapAttachEaseInCompleted;

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0xC0B3E4", Offset = "0xC0B3E4", VA = "0xC0B3E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0xC0B48C", Offset = "0xC0B48C", VA = "0xC0B48C")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0xC0B660", Offset = "0xC0B660", VA = "0xC0B660")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0xC0B770", Offset = "0xC0B770", VA = "0xC0B770")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60025BF")]
		[Address(RVA = "0xC0B828", Offset = "0xC0B828", VA = "0xC0B828")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60025C0")]
		[Address(RVA = "0xC0BAA4", Offset = "0xC0BAA4", VA = "0xC0BAA4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60025C1")]
		[Address(RVA = "0xC0C11C", Offset = "0xC0C11C", VA = "0xC0C11C")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60025C2")]
		[Address(RVA = "0xC0C334", Offset = "0xC0C334", VA = "0xC0C334")]
		[IteratorStateMachine(typeof(<LateDetach>d__24))]
		private IEnumerator LateDetach(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x60025C3")]
		[Address(RVA = "0xC0C424", Offset = "0xC0C424", VA = "0xC0C424")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x60025C4")]
		[Address(RVA = "0xC0C458", Offset = "0xC0C458", VA = "0xC0C458")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x60025C5")]
		[Address(RVA = "0xC0C48C", Offset = "0xC0C48C", VA = "0xC0C48C")]
		public Throwable()
		{
		}
	}
	[Token(Token = "0x200064E")]
	[RequireComponent(typeof(Interactable))]
	public class UIElement : MonoBehaviour
	{
		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomEvents.UnityEventHand onHandClick;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand currentHand;

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0xC0C600", Offset = "0xC0C600", VA = "0xC0C600")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0xC0C704", Offset = "0xC0C704", VA = "0xC0C704")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60025CE")]
		[Address(RVA = "0xC0C7B4", Offset = "0xC0C7B4", VA = "0xC0C7B4")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60025CF")]
		[Address(RVA = "0xC0C86C", Offset = "0xC0C86C", VA = "0xC0C86C")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60025D0")]
		[Address(RVA = "0xC0C92C", Offset = "0xC0C92C", VA = "0xC0C92C")]
		private void OnButtonClick()
		{
		}

		[Token(Token = "0x60025D1")]
		[Address(RVA = "0xC0C980", Offset = "0xC0C980", VA = "0xC0C980")]
		public UIElement()
		{
		}
	}
	[Token(Token = "0x200064F")]
	public class Unparent : MonoBehaviour
	{
		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform oldParent;

		[Token(Token = "0x60025D2")]
		[Address(RVA = "0xC0C988", Offset = "0xC0C988", VA = "0xC0C988")]
		private void Start()
		{
		}

		[Token(Token = "0x60025D3")]
		[Address(RVA = "0xC0CA80", Offset = "0xC0CA80", VA = "0xC0CA80")]
		private void Update()
		{
		}

		[Token(Token = "0x60025D4")]
		[Address(RVA = "0xC0CB20", Offset = "0xC0CB20", VA = "0xC0CB20")]
		public Transform GetOldParent()
		{
			return null;
		}

		[Token(Token = "0x60025D5")]
		[Address(RVA = "0xC0CB28", Offset = "0xC0CB28", VA = "0xC0CB28")]
		public Unparent()
		{
		}
	}
	[Token(Token = "0x2000650")]
	public static class Util
	{
		[Token(Token = "0x2000651")]
		[CompilerGenerated]
		private sealed class <WrapCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator coroutine;

			[Token(Token = "0x4002035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onCoroutineFinished;

			[Token(Token = "0x170001FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002607")]
				[Address(RVA = "0xC0E57C", Offset = "0xC0E57C", VA = "0xC0E57C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002609")]
				[Address(RVA = "0xC0E5C4", Offset = "0xC0E5C4", VA = "0xC0E5C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002604")]
			[Address(RVA = "0xC0DD78", Offset = "0xC0DD78", VA = "0xC0DD78")]
			[DebuggerHidden]
			public <WrapCoroutine>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6002605")]
			[Address(RVA = "0xC0E420", Offset = "0xC0E420", VA = "0xC0E420", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002606")]
			[Address(RVA = "0xC0E424", Offset = "0xC0E424", VA = "0xC0E424", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002608")]
			[Address(RVA = "0xC0E584", Offset = "0xC0E584", VA = "0xC0E584", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002028")]
		public const float FeetToMeters = 0.3048f;

		[Token(Token = "0x4002029")]
		public const float FeetToCentimeters = 30.48f;

		[Token(Token = "0x400202A")]
		public const float InchesToMeters = 0.0254f;

		[Token(Token = "0x400202B")]
		public const float InchesToCentimeters = 2.54f;

		[Token(Token = "0x400202C")]
		public const float MetersToFeet = 3.28084f;

		[Token(Token = "0x400202D")]
		public const float MetersToInches = 39.3701f;

		[Token(Token = "0x400202E")]
		public const float CentimetersToFeet = 0.0328084f;

		[Token(Token = "0x400202F")]
		public const float CentimetersToInches = 0.393701f;

		[Token(Token = "0x4002030")]
		public const float KilometersToMiles = 0.621371f;

		[Token(Token = "0x4002031")]
		public const float MilesToKilometers = 1.60934f;

		[Token(Token = "0x60025D6")]
		[Address(RVA = "0xC0CB30", Offset = "0xC0CB30", VA = "0xC0CB30")]
		public static float RemapNumber(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x60025D7")]
		[Address(RVA = "0xC0C3C4", Offset = "0xC0C3C4", VA = "0xC0C3C4")]
		public static float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x60025D8")]
		[Address(RVA = "0xC0CB4C", Offset = "0xC0CB4C", VA = "0xC0CB4C")]
		public static float Approach(float target, float value, float speed)
		{
			return default(float);
		}

		[Token(Token = "0x60025D9")]
		[Address(RVA = "0xC0CB74", Offset = "0xC0CB74", VA = "0xC0CB74")]
		public static Vector3 BezierInterpolate3(Vector3 p0, Vector3 c0, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60025DA")]
		[Address(RVA = "0xC0CBF4", Offset = "0xC0CBF4", VA = "0xC0CBF4")]
		public static Vector3 BezierInterpolate4(Vector3 p0, Vector3 c0, Vector3 c1, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60025DB")]
		[Address(RVA = "0xC0CCCC", Offset = "0xC0CCCC", VA = "0xC0CCCC")]
		public static Vector3 Vector3FromString(string szString)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60025DC")]
		[Address(RVA = "0xC0CD74", Offset = "0xC0CD74", VA = "0xC0CD74")]
		public static Vector2 Vector2FromString(string szString)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60025DD")]
		[Address(RVA = "0xC0CDFC", Offset = "0xC0CDFC", VA = "0xC0CDFC")]
		public static float Normalize(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60025DE")]
		[Address(RVA = "0xC0CE0C", Offset = "0xC0CE0C", VA = "0xC0CE0C")]
		public static Vector3 Vector2AsVector3(Vector2 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60025DF")]
		[Address(RVA = "0xC0CE18", Offset = "0xC0CE18", VA = "0xC0CE18")]
		public static Vector2 Vector3AsVector2(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60025E0")]
		[Address(RVA = "0xC0CE20", Offset = "0xC0CE20", VA = "0xC0CE20")]
		public static float AngleOf(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x60025E1")]
		[Address(RVA = "0xC0CEB4", Offset = "0xC0CEB4", VA = "0xC0CEB4")]
		public static float YawOf(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60025E2")]
		public static void Swap<T>(ref T lhs, ref T rhs)
		{
		}

		[Token(Token = "0x60025E3")]
		public static void Shuffle<T>(T[] array)
		{
		}

		[Token(Token = "0x60025E4")]
		public static void Shuffle<T>(List<T> list)
		{
		}

		[Token(Token = "0x60025E5")]
		[Address(RVA = "0xC0CF60", Offset = "0xC0CF60", VA = "0xC0CF60")]
		public static int RandomWithLookback(int min, int max, List<int> history, int historyCount)
		{
			return default(int);
		}

		[Token(Token = "0x60025E6")]
		[Address(RVA = "0xC0D0BC", Offset = "0xC0D0BC", VA = "0xC0D0BC")]
		public static Transform FindChild(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x60025E7")]
		public static bool IsNullOrEmpty<T>(T[] array)
		{
			return default(bool);
		}

		[Token(Token = "0x60025E8")]
		public static bool IsValidIndex<T>(T[] array, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x60025E9")]
		public static bool IsValidIndex<T>(List<T> list, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x60025EA")]
		public static int FindOrAdd<T>(List<T> list, T item)
		{
			return default(int);
		}

		[Token(Token = "0x60025EB")]
		public static List<T> FindAndRemove<T>(List<T> list, Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x60025EC")]
		public static T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60025ED")]
		public static void FastRemove<T>(List<T> list, int index)
		{
		}

		[Token(Token = "0x60025EE")]
		public static void ReplaceGameObject<T, U>(T replace, U replaceWith) where T : MonoBehaviour where U : MonoBehaviour
		{
		}

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0xC0D410", Offset = "0xC0D410", VA = "0xC0D410")]
		public static void SwitchLayerRecursively(Transform transform, int fromLayer, int toLayer)
		{
		}

		[Token(Token = "0x60025F0")]
		[Address(RVA = "0xC0D4BC", Offset = "0xC0D4BC", VA = "0xC0D4BC")]
		public static void DrawCross(Vector3 origin, Color crossColor, float size)
		{
		}

		[Token(Token = "0x60025F1")]
		[Address(RVA = "0xC0AF0C", Offset = "0xC0AF0C", VA = "0xC0AF0C")]
		public static void ResetTransform(Transform t, bool resetScale = true)
		{
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0xC0D6D0", Offset = "0xC0D6D0", VA = "0xC0D6D0")]
		public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0xC0D8DC", Offset = "0xC0D8DC", VA = "0xC0D8DC")]
		public static void AfterTimer(GameObject go, float _time, Action callback, bool trigger_if_destroyed_early = false)
		{
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0xC0D9A4", Offset = "0xC0D9A4", VA = "0xC0D9A4")]
		public static void SendPhysicsMessage(Collider collider, string message, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0xC0DAA8", Offset = "0xC0DAA8", VA = "0xC0DAA8")]
		public static void SendPhysicsMessage(Collider collider, string message, object arg, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0xC0DBB8", Offset = "0xC0DBB8", VA = "0xC0DBB8")]
		public static void IgnoreCollisions(GameObject goA, GameObject goB)
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0xC0DCE8", Offset = "0xC0DCE8", VA = "0xC0DCE8")]
		[IteratorStateMachine(typeof(<WrapCoroutine>d__43))]
		public static IEnumerator WrapCoroutine(IEnumerator coroutine, Action onCoroutineFinished)
		{
			return null;
		}

		[Token(Token = "0x60025F8")]
		[Address(RVA = "0xC0DDA0", Offset = "0xC0DDA0", VA = "0xC0DDA0")]
		public static Color ColorWithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x60025F9")]
		[Address(RVA = "0xC0DDA8", Offset = "0xC0DDA8", VA = "0xC0DDA8")]
		public static void Quit()
		{
		}

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0xC0DDC8", Offset = "0xC0DDC8", VA = "0xC0DDC8")]
		public static decimal FloatToDecimal(float value, int decimalPlaces = 2)
		{
			return default(decimal);
		}

		[Token(Token = "0x60025FB")]
		public static T Median<T>(this IEnumerable<T> source)
		{
			return (T)null;
		}

		[Token(Token = "0x60025FC")]
		public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
		{
		}

		[Token(Token = "0x60025FD")]
		[Address(RVA = "0xC0DEA4", Offset = "0xC0DEA4", VA = "0xC0DEA4")]
		public static string FixupNewlines(string text)
		{
			return null;
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0xC0DF58", Offset = "0xC0DF58", VA = "0xC0DF58")]
		public static float PathLength(NavMeshPath path)
		{
			return default(float);
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0xC0E0BC", Offset = "0xC0E0BC", VA = "0xC0E0BC")]
		public static bool HasCommandLineArgument(string argumentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0xC0E13C", Offset = "0xC0E13C", VA = "0xC0E13C")]
		public static int GetCommandLineArgValue(string argumentName, int nDefaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0xC0E1FC", Offset = "0xC0E1FC", VA = "0xC0E1FC")]
		public static float GetCommandLineArgValue(string argumentName, float flDefaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0xC0E2B4", Offset = "0xC0E2B4", VA = "0xC0E2B4")]
		public static void SetActive(GameObject gameObject, bool active)
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0xC0E348", Offset = "0xC0E348", VA = "0xC0E348")]
		public static string CombinePaths(params string[] paths)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000653")]
	public class AfterTimer_Component : MonoBehaviour
	{
		[Token(Token = "0x2000654")]
		[CompilerGenerated]
		private sealed class <Wait>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400203C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400203D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400203E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AfterTimer_Component <>4__this;

			[Token(Token = "0x170001FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002614")]
				[Address(RVA = "0xC0E7D0", Offset = "0xC0E7D0", VA = "0xC0E7D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002616")]
				[Address(RVA = "0xC0E818", Offset = "0xC0E818", VA = "0xC0E818", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002611")]
			[Address(RVA = "0xC0E640", Offset = "0xC0E640", VA = "0xC0E640")]
			[DebuggerHidden]
			public <Wait>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002612")]
			[Address(RVA = "0xC0E6C8", Offset = "0xC0E6C8", VA = "0xC0E6C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002613")]
			[Address(RVA = "0xC0E6CC", Offset = "0xC0E6CC", VA = "0xC0E6CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002615")]
			[Address(RVA = "0xC0E7D8", Offset = "0xC0E7D8", VA = "0xC0E7D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action callback;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float triggerTime;

		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool timerActive;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool triggerOnEarlyDestroy;

		[Token(Token = "0x600260D")]
		[Address(RVA = "0xC0D95C", Offset = "0xC0D95C", VA = "0xC0D95C")]
		public void Init(float _time, Action _callback, bool earlydestroy)
		{
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0xC0E5CC", Offset = "0xC0E5CC", VA = "0xC0E5CC")]
		[IteratorStateMachine(typeof(<Wait>d__5))]
		private IEnumerator Wait()
		{
			return null;
		}

		[Token(Token = "0x600260F")]
		[Address(RVA = "0xC0E668", Offset = "0xC0E668", VA = "0xC0E668")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002610")]
		[Address(RVA = "0xC0E6C0", Offset = "0xC0E6C0", VA = "0xC0E6C0")]
		public AfterTimer_Component()
		{
		}
	}
	[Token(Token = "0x2000655")]
	public class VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x2000656")]
		[CompilerGenerated]
		private sealed class <EstimateVelocityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Token(Token = "0x4002049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x400204A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x170001FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002622")]
				[Address(RVA = "0xC0EE2C", Offset = "0xC0EE2C", VA = "0xC0EE2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000200")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002624")]
				[Address(RVA = "0xC0EE74", Offset = "0xC0EE74", VA = "0xC0EE74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600261F")]
			[Address(RVA = "0xC0EA5C", Offset = "0xC0EA5C", VA = "0xC0EA5C")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002620")]
			[Address(RVA = "0xC0EA98", Offset = "0xC0EA98", VA = "0xC0EA98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002621")]
			[Address(RVA = "0xC0EA9C", Offset = "0xC0EA9C", VA = "0xC0EA9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002623")]
			[Address(RVA = "0xC0EE34", Offset = "0xC0EE34", VA = "0xC0EE34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How many frames to average over for computing velocity")]
		public int velocityAverageFrames;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How many frames to average over for computing angular velocity")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnAwake;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] velocitySamples;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Token(Token = "0x6002617")]
		[Address(RVA = "0xC0BA6C", Offset = "0xC0BA6C", VA = "0xC0BA6C")]
		public void BeginEstimatingVelocity()
		{
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0xC0BF48", Offset = "0xC0BF48", VA = "0xC0BF48")]
		public void FinishEstimatingVelocity()
		{
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0xC0BF8C", Offset = "0xC0BF8C", VA = "0xC0BF8C")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0xC0C054", Offset = "0xC0C054", VA = "0xC0C054")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600261B")]
		[Address(RVA = "0xC0E894", Offset = "0xC0E894", VA = "0xC0E894")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600261C")]
		[Address(RVA = "0xC0E9C8", Offset = "0xC0E9C8", VA = "0xC0E9C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600261D")]
		[Address(RVA = "0xC0E820", Offset = "0xC0E820", VA = "0xC0E820")]
		[IteratorStateMachine(typeof(<EstimateVelocityCoroutine>d__13))]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600261E")]
		[Address(RVA = "0xC0EA84", Offset = "0xC0EA84", VA = "0xC0EA84")]
		public VelocityEstimator()
		{
		}
	}
	[Token(Token = "0x2000657")]
	public class ControllerButtonHints : MonoBehaviour
	{
		[Token(Token = "0x2000658")]
		private enum OffsetType
		{
			[Token(Token = "0x400205D")]
			Up,
			[Token(Token = "0x400205E")]
			Right,
			[Token(Token = "0x400205F")]
			Forward,
			[Token(Token = "0x4002060")]
			Back
		}

		[Token(Token = "0x2000659")]
		private class ButtonHintInfo
		{
			[Token(Token = "0x4002061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string componentName;

			[Token(Token = "0x4002062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MeshRenderer> renderers;

			[Token(Token = "0x4002063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform localTransform;

			[Token(Token = "0x4002064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject textHintObject;

			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform textStartAnchor;

			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform textEndAnchor;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 textEndOffsetDir;

			[Token(Token = "0x4002068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform canvasOffset;

			[Token(Token = "0x4002069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Text text;

			[Token(Token = "0x400206A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public TextMesh textMesh;

			[Token(Token = "0x400206B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Canvas textCanvas;

			[Token(Token = "0x400206C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public LineRenderer line;

			[Token(Token = "0x400206D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float distanceFromCenter;

			[Token(Token = "0x400206E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool textHintActive;

			[Token(Token = "0x6002648")]
			[Address(RVA = "0xC119D4", Offset = "0xC119D4", VA = "0xC119D4")]
			public ButtonHintInfo()
			{
			}
		}

		[Token(Token = "0x200065A")]
		[CompilerGenerated]
		private sealed class <TestButtonHints>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400206F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x17000202")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600264C")]
				[Address(RVA = "0xC13628", Offset = "0xC13628", VA = "0xC13628", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000203")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600264E")]
				[Address(RVA = "0xC13670", Offset = "0xC13670", VA = "0xC13670", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002649")]
			[Address(RVA = "0xC12388", Offset = "0xC12388", VA = "0xC12388")]
			[DebuggerHidden]
			public <TestButtonHints>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x600264A")]
			[Address(RVA = "0xC133AC", Offset = "0xC133AC", VA = "0xC133AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600264B")]
			[Address(RVA = "0xC133B0", Offset = "0xC133B0", VA = "0xC133B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600264D")]
			[Address(RVA = "0xC13630", Offset = "0xC13630", VA = "0xC13630", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200065B")]
		[CompilerGenerated]
		private sealed class <TestTextHints>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x17000204")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002652")]
				[Address(RVA = "0xC13904", Offset = "0xC13904", VA = "0xC13904", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000205")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002654")]
				[Address(RVA = "0xC1394C", Offset = "0xC1394C", VA = "0xC1394C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600264F")]
			[Address(RVA = "0xC12424", Offset = "0xC12424", VA = "0xC12424")]
			[DebuggerHidden]
			public <TestTextHints>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6002650")]
			[Address(RVA = "0xC13678", Offset = "0xC13678", VA = "0xC13678", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002651")]
			[Address(RVA = "0xC1367C", Offset = "0xC1367C", VA = "0xC1367C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002653")]
			[Address(RVA = "0xC1390C", Offset = "0xC1390C", VA = "0xC1390C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material controllerMaterial;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color flashColor;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject textHintPrefab;

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Debug")]
		public bool debugHints;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Player player;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<MeshRenderer> renderers;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<MeshRenderer> flashingRenderers;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startTime;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float tickCount;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<EVRButtonId, ButtonHintInfo> buttonHintInfos;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform textHintParent;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<KeyValuePair<string, ulong>> componentButtonMasks;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int colorID;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 centerPosition;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x17000201")]
		public bool initialized
		{
			[Token(Token = "0x6002625")]
			[Address(RVA = "0xC0EE7C", Offset = "0xC0EE7C", VA = "0xC0EE7C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002626")]
			[Address(RVA = "0xC0EE84", Offset = "0xC0EE84", VA = "0xC0EE84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002627")]
		[Address(RVA = "0xC0EE90", Offset = "0xC0EE90", VA = "0xC0EE90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002628")]
		[Address(RVA = "0xC0EF74", Offset = "0xC0EF74", VA = "0xC0EF74")]
		private void Start()
		{
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0xC0EF98", Offset = "0xC0EF98", VA = "0xC0EF98")]
		private void HintDebugLog(string msg)
		{
		}

		[Token(Token = "0x600262A")]
		[Address(RVA = "0xC0F034", Offset = "0xC0F034", VA = "0xC0F034")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600262B")]
		[Address(RVA = "0xC0F054", Offset = "0xC0F054", VA = "0xC0F054")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600262C")]
		[Address(RVA = "0xC0F11C", Offset = "0xC0F11C", VA = "0xC0F11C")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x600262D")]
		[Address(RVA = "0xC0F2EC", Offset = "0xC0F2EC", VA = "0xC0F2EC")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x600262E")]
		[Address(RVA = "0xC0F534", Offset = "0xC0F534", VA = "0xC0F534")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool succeess)
		{
		}

		[Token(Token = "0x600262F")]
		[Address(RVA = "0xC10010", Offset = "0xC10010", VA = "0xC10010")]
		private void CreateAndAddButtonInfo(EVRButtonId buttonID)
		{
		}

		[Token(Token = "0x6002630")]
		[Address(RVA = "0xC1138C", Offset = "0xC1138C", VA = "0xC1138C")]
		private void ComputeTextEndTransforms()
		{
		}

		[Token(Token = "0x6002631")]
		[Address(RVA = "0xC119DC", Offset = "0xC119DC", VA = "0xC119DC")]
		private void ShowButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6002632")]
		[Address(RVA = "0xC0F134", Offset = "0xC0F134", VA = "0xC0F134")]
		private void HideAllButtonHints()
		{
		}

		[Token(Token = "0x6002633")]
		[Address(RVA = "0xC11E2C", Offset = "0xC11E2C", VA = "0xC11E2C")]
		private void HideButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6002634")]
		[Address(RVA = "0xC12118", Offset = "0xC12118", VA = "0xC12118")]
		private bool IsButtonHintActive(EVRButtonId button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002635")]
		[Address(RVA = "0xC12314", Offset = "0xC12314", VA = "0xC12314")]
		[IteratorStateMachine(typeof(<TestButtonHints>d__36))]
		private IEnumerator TestButtonHints()
		{
			return null;
		}

		[Token(Token = "0x6002636")]
		[Address(RVA = "0xC123B0", Offset = "0xC123B0", VA = "0xC123B0")]
		[IteratorStateMachine(typeof(<TestTextHints>d__37))]
		private IEnumerator TestTextHints()
		{
			return null;
		}

		[Token(Token = "0x6002637")]
		[Address(RVA = "0xC1244C", Offset = "0xC1244C", VA = "0xC1244C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002638")]
		[Address(RVA = "0xC127A8", Offset = "0xC127A8", VA = "0xC127A8")]
		private void UpdateTextHint(ButtonHintInfo hintInfo)
		{
		}

		[Token(Token = "0x6002639")]
		[Address(RVA = "0xC0F080", Offset = "0xC0F080", VA = "0xC0F080")]
		private void Clear()
		{
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0xC12A0C", Offset = "0xC12A0C", VA = "0xC12A0C")]
		private void ShowText(EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x600263B")]
		[Address(RVA = "0xC12BE4", Offset = "0xC12BE4", VA = "0xC12BE4")]
		private void HideText(EVRButtonId button)
		{
		}

		[Token(Token = "0x600263C")]
		[Address(RVA = "0xC0F168", Offset = "0xC0F168", VA = "0xC0F168")]
		private void HideAllText()
		{
		}

		[Token(Token = "0x600263D")]
		[Address(RVA = "0xC12CE0", Offset = "0xC12CE0", VA = "0xC12CE0")]
		private string GetActiveHintText(EVRButtonId button)
		{
			return null;
		}

		[Token(Token = "0x600263E")]
		[Address(RVA = "0xC12DB4", Offset = "0xC12DB4", VA = "0xC12DB4")]
		private static ControllerButtonHints GetControllerButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600263F")]
		[Address(RVA = "0xC0B5C0", Offset = "0xC0B5C0", VA = "0xC0B5C0")]
		public static void ShowButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6002640")]
		[Address(RVA = "0xC0B6D0", Offset = "0xC0B6D0", VA = "0xC0B6D0")]
		public static void HideButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6002641")]
		[Address(RVA = "0xC12E80", Offset = "0xC12E80", VA = "0xC12E80")]
		public static void HideAllButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x6002642")]
		[Address(RVA = "0xC12F0C", Offset = "0xC12F0C", VA = "0xC12F0C")]
		public static bool IsButtonHintActive(Hand hand, EVRButtonId button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0xC12FB0", Offset = "0xC12FB0", VA = "0xC12FB0")]
		public static void ShowTextHint(Hand hand, EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x6002644")]
		[Address(RVA = "0xC1306C", Offset = "0xC1306C", VA = "0xC1306C")]
		public static void HideTextHint(Hand hand, EVRButtonId button)
		{
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0xC1310C", Offset = "0xC1310C", VA = "0xC1310C")]
		public static void HideAllTextHints(Hand hand)
		{
		}

		[Token(Token = "0x6002646")]
		[Address(RVA = "0xC13198", Offset = "0xC13198", VA = "0xC13198")]
		public static string GetActiveHintText(Hand hand, EVRButtonId button)
		{
			return null;
		}

		[Token(Token = "0x6002647")]
		[Address(RVA = "0xC13258", Offset = "0xC13258", VA = "0xC13258")]
		public ControllerButtonHints()
		{
		}
	}
	[Token(Token = "0x200065C")]
	public class ArcheryTarget : MonoBehaviour
	{
		[Token(Token = "0x200065D")]
		[CompilerGenerated]
		private sealed class <FallDown>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400207D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400207E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400207F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcheryTarget <>4__this;

			[Token(Token = "0x4002080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Quaternion <startingRot>5__2;

			[Token(Token = "0x4002081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__3;

			[Token(Token = "0x4002082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <rotLerp>5__4;

			[Token(Token = "0x17000206")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600265D")]
				[Address(RVA = "0xC13C1C", Offset = "0xC13C1C", VA = "0xC13C1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000207")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600265F")]
				[Address(RVA = "0xC13C64", Offset = "0xC13C64", VA = "0xC13C64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600265A")]
			[Address(RVA = "0xC13A20", Offset = "0xC13A20", VA = "0xC13A20")]
			[DebuggerHidden]
			public <FallDown>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600265B")]
			[Address(RVA = "0xC13A60", Offset = "0xC13A60", VA = "0xC13A60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600265C")]
			[Address(RVA = "0xC13A64", Offset = "0xC13A64", VA = "0xC13A64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600265E")]
			[Address(RVA = "0xC13C24", Offset = "0xC13C24", VA = "0xC13C24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTakeDamage;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool onceOnly;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform targetCenter;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform baseTransform;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform fallenDownTransform;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fallTime;

		[Token(Token = "0x400207B")]
		private const float targetRadius = 0.25f;

		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool targetEnabled;

		[Token(Token = "0x6002655")]
		[Address(RVA = "0xC13954", Offset = "0xC13954", VA = "0xC13954")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x6002656")]
		[Address(RVA = "0xC139A8", Offset = "0xC139A8", VA = "0xC139A8")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x6002657")]
		[Address(RVA = "0xC13958", Offset = "0xC13958", VA = "0xC13958")]
		private void OnDamageTaken()
		{
		}

		[Token(Token = "0x6002658")]
		[Address(RVA = "0xC139AC", Offset = "0xC139AC", VA = "0xC139AC")]
		[IteratorStateMachine(typeof(<FallDown>d__11))]
		private IEnumerator FallDown()
		{
			return null;
		}

		[Token(Token = "0x6002659")]
		[Address(RVA = "0xC13A48", Offset = "0xC13A48", VA = "0xC13A48")]
		public ArcheryTarget()
		{
		}
	}
	[Token(Token = "0x200065E")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem glintParticle;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody arrowHeadRB;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody shaftRB;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhysicMaterial targetPhysMaterial;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 prevPosition;

		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion prevRotation;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 prevVelocity;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 prevHeadPosition;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SoundPlayOneshot fireReleaseSound;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SoundPlayOneshot airReleaseSound;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SoundPlayOneshot hitTargetSound;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PlaySound hitGroundSound;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool inFlight;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool released;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool hasSpreadFire;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int travelledFrames;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject scaleParentObject;

		[Token(Token = "0x6002660")]
		[Address(RVA = "0xC13C6C", Offset = "0xC13C6C", VA = "0xC13C6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0xC13CDC", Offset = "0xC13CDC", VA = "0xC13CDC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002662")]
		[Address(RVA = "0xC13DC0", Offset = "0xC13DC0", VA = "0xC13DC0")]
		public void ArrowReleased(float inputVelocity)
		{
		}

		[Token(Token = "0x6002663")]
		[Address(RVA = "0xC14190", Offset = "0xC14190", VA = "0xC14190")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002664")]
		[Address(RVA = "0xC14814", Offset = "0xC14814", VA = "0xC14814")]
		private void StickInTarget(Collision collision, bool bSkipRayCast)
		{
		}

		[Token(Token = "0x6002665")]
		[Address(RVA = "0xC14F24", Offset = "0xC14F24", VA = "0xC14F24")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002666")]
		[Address(RVA = "0xC14FB4", Offset = "0xC14FB4", VA = "0xC14FB4")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x200065F")]
	public class ArrowHand : MonoBehaviour
	{
		[Token(Token = "0x2000660")]
		[CompilerGenerated]
		private sealed class <ArrowReleaseHaptics>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArrowHand <>4__this;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002676")]
				[Address(RVA = "0xC1631C", Offset = "0xC1631C", VA = "0xC1631C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002678")]
				[Address(RVA = "0xC16364", Offset = "0xC16364", VA = "0xC16364", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002673")]
			[Address(RVA = "0xC16050", Offset = "0xC16050", VA = "0xC16050")]
			[DebuggerHidden]
			public <ArrowReleaseHaptics>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6002674")]
			[Address(RVA = "0xC160E4", Offset = "0xC160E4", VA = "0xC160E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002675")]
			[Address(RVA = "0xC160E8", Offset = "0xC160E8", VA = "0xC160E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002677")]
			[Address(RVA = "0xC16324", Offset = "0xC16324", VA = "0xC16324", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Longbow bow;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject currentArrow;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject arrowPrefab;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform arrowNockTransform;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float nockDistance;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lerpCompleteDistance;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationLerpThreshold;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float positionLerpThreshold;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool allowArrowSpawn;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool nocked;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool inNockRange;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool arrowLerpComplete;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundPlayOneshot arrowSpawnSound;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AllowTeleportWhileAttachedToHand allowTeleport;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int maxArrowCount;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<GameObject> arrowList;

		[Token(Token = "0x6002667")]
		[Address(RVA = "0xC14FBC", Offset = "0xC14FBC", VA = "0xC14FBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002668")]
		[Address(RVA = "0xC1507C", Offset = "0xC1507C", VA = "0xC1507C")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x6002669")]
		[Address(RVA = "0xC15100", Offset = "0xC15100", VA = "0xC15100")]
		private GameObject InstantiateArrow()
		{
			return null;
		}

		[Token(Token = "0x600266A")]
		[Address(RVA = "0xC15390", Offset = "0xC15390", VA = "0xC15390")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600266B")]
		[Address(RVA = "0xC15E6C", Offset = "0xC15E6C", VA = "0xC15E6C")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0xC15B40", Offset = "0xC15B40", VA = "0xC15B40")]
		private void FireArrow()
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0xC16044", Offset = "0xC16044", VA = "0xC16044")]
		private void EnableArrowSpawn()
		{
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0xC15FD0", Offset = "0xC15FD0", VA = "0xC15FD0")]
		[IteratorStateMachine(typeof(<ArrowReleaseHaptics>d__24))]
		private IEnumerator ArrowReleaseHaptics()
		{
			return null;
		}

		[Token(Token = "0x600266F")]
		[Address(RVA = "0xC16078", Offset = "0xC16078", VA = "0xC16078")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0xC1609C", Offset = "0xC1609C", VA = "0xC1609C")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0xC15098", Offset = "0xC15098", VA = "0xC15098")]
		private void FindBow()
		{
		}

		[Token(Token = "0x6002672")]
		[Address(RVA = "0xC160C0", Offset = "0xC160C0", VA = "0xC160C0")]
		public ArrowHand()
		{
		}
	}
	[Token(Token = "0x2000661")]
	public class ArrowheadRotation : MonoBehaviour
	{
		[Token(Token = "0x6002679")]
		[Address(RVA = "0xC1636C", Offset = "0xC1636C", VA = "0xC1636C")]
		private void Start()
		{
		}

		[Token(Token = "0x600267A")]
		[Address(RVA = "0xC163C8", Offset = "0xC163C8", VA = "0xC163C8")]
		public ArrowheadRotation()
		{
		}
	}
	[Token(Token = "0x2000662")]
	public class Balloon : MonoBehaviour
	{
		[Token(Token = "0x2000663")]
		public enum BalloonColor
		{
			[Token(Token = "0x40020B8")]
			Red,
			[Token(Token = "0x40020B9")]
			OrangeRed,
			[Token(Token = "0x40020BA")]
			Orange,
			[Token(Token = "0x40020BB")]
			YellowOrange,
			[Token(Token = "0x40020BC")]
			Yellow,
			[Token(Token = "0x40020BD")]
			GreenYellow,
			[Token(Token = "0x40020BE")]
			Green,
			[Token(Token = "0x40020BF")]
			BlueGreen,
			[Token(Token = "0x40020C0")]
			Blue,
			[Token(Token = "0x40020C1")]
			VioletBlue,
			[Token(Token = "0x40020C2")]
			Violet,
			[Token(Token = "0x40020C3")]
			RedViolet,
			[Token(Token = "0x40020C4")]
			LightGray,
			[Token(Token = "0x40020C5")]
			DarkGray,
			[Token(Token = "0x40020C6")]
			Random
		}

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject popPrefab;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lifetime;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool burstOnLifetimeEnd;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject lifetimeEndParticlePrefab;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot lifetimeEndSound;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float destructTime;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float releaseTime;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SoundPlayOneshot collisionSound;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastSoundTime;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float soundDelay;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody balloonRigidbody;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool bParticlesSpawned;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float s_flLastDeathSound;

		[Token(Token = "0x600267B")]
		[Address(RVA = "0xC163D0", Offset = "0xC163D0", VA = "0xC163D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600267C")]
		[Address(RVA = "0xC1648C", Offset = "0xC1648C", VA = "0xC1648C")]
		private void Update()
		{
		}

		[Token(Token = "0x600267D")]
		[Address(RVA = "0xC16538", Offset = "0xC16538", VA = "0xC16538")]
		private void SpawnParticles(GameObject particlePrefab, SoundPlayOneshot sound)
		{
		}

		[Token(Token = "0x600267E")]
		[Address(RVA = "0xC16750", Offset = "0xC16750", VA = "0xC16750")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600267F")]
		[Address(RVA = "0xC167CC", Offset = "0xC167CC", VA = "0xC167CC")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x6002680")]
		[Address(RVA = "0xC16848", Offset = "0xC16848", VA = "0xC16848")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0xC16C38", Offset = "0xC16C38", VA = "0xC16C38")]
		public void SetColor(BalloonColor color)
		{
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0xC16CBC", Offset = "0xC16CBC", VA = "0xC16CBC")]
		private Color BalloonColorToRGB(BalloonColor balloonColorVar)
		{
			return default(Color);
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0xC16E7C", Offset = "0xC16E7C", VA = "0xC16E7C")]
		public Balloon()
		{
		}
	}
	[Token(Token = "0x2000664")]
	public class BalloonColliders : MonoBehaviour
	{
		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] colliders;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] colliderLocalPositions;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] colliderLocalRotations;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x6002684")]
		[Address(RVA = "0xC16EA8", Offset = "0xC16EA8", VA = "0xC16EA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0xC17100", Offset = "0xC17100", VA = "0xC17100")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002686")]
		[Address(RVA = "0xC17358", Offset = "0xC17358", VA = "0xC17358")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0xC1748C", Offset = "0xC1748C", VA = "0xC1748C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002688")]
		[Address(RVA = "0xC1752C", Offset = "0xC1752C", VA = "0xC1752C")]
		public BalloonColliders()
		{
		}
	}
	[Token(Token = "0x2000665")]
	public class BalloonHapticBump : MonoBehaviour
	{
		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject physParent;

		[Token(Token = "0x6002689")]
		[Address(RVA = "0xC17534", Offset = "0xC17534", VA = "0xC17534")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x600268A")]
		[Address(RVA = "0xC1764C", Offset = "0xC1764C", VA = "0xC1764C")]
		public BalloonHapticBump()
		{
		}
	}
	[Token(Token = "0x2000666")]
	public class BalloonSpawner : MonoBehaviour
	{
		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSpawnTime;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxSpawnTime;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject balloonPrefab;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool autoSpawn;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool spawnAtStartup;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool playSounds;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundPlayOneshot inflateSound;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot stretchSound;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool sendSpawnMessageToParent;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scale;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnDirectionTransform;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float spawnForce;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool attachBalloon;

		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Balloon.BalloonColor color;

		[Token(Token = "0x600268B")]
		[Address(RVA = "0xC17654", Offset = "0xC17654", VA = "0xC17654")]
		private void Start()
		{
		}

		[Token(Token = "0x600268C")]
		[Address(RVA = "0xC17A48", Offset = "0xC17A48", VA = "0xC17A48")]
		private void Update()
		{
		}

		[Token(Token = "0x600268D")]
		[Address(RVA = "0xC17700", Offset = "0xC17700", VA = "0xC17700")]
		public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)
		{
			return null;
		}

		[Token(Token = "0x600268E")]
		[Address(RVA = "0xC17B00", Offset = "0xC17B00", VA = "0xC17B00")]
		public void SpawnBalloonFromEvent(int color)
		{
		}

		[Token(Token = "0x600268F")]
		[Address(RVA = "0xC17B04", Offset = "0xC17B04", VA = "0xC17B04")]
		public BalloonSpawner()
		{
		}
	}
	[Token(Token = "0x2000667")]
	public class ExplosionWobble : MonoBehaviour
	{
		[Token(Token = "0x6002690")]
		[Address(RVA = "0xC17B38", Offset = "0xC17B38", VA = "0xC17B38")]
		public void ExplosionEvent(Vector3 explosionPos)
		{
		}

		[Token(Token = "0x6002691")]
		[Address(RVA = "0xC17C24", Offset = "0xC17C24", VA = "0xC17C24")]
		public ExplosionWobble()
		{
		}
	}
	[Token(Token = "0x2000668")]
	public class FireSource : MonoBehaviour
	{
		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fireParticlePrefab;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startActive;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject fireObject;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem customParticles;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isBurning;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float burnTime;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ignitionDelay;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float ignitionTime;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand hand;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSource ignitionSound;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool canSpreadFromThisSource;

		[Token(Token = "0x6002692")]
		[Address(RVA = "0xC17C2C", Offset = "0xC17C2C", VA = "0xC17C2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002693")]
		[Address(RVA = "0xC17E70", Offset = "0xC17E70", VA = "0xC17E70")]
		private void Update()
		{
		}

		[Token(Token = "0x6002694")]
		[Address(RVA = "0xC17F50", Offset = "0xC17F50", VA = "0xC17F50")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002695")]
		[Address(RVA = "0xC17FC8", Offset = "0xC17FC8", VA = "0xC17FC8")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x6002696")]
		[Address(RVA = "0xC17C3C", Offset = "0xC17C3C", VA = "0xC17C3C")]
		private void StartBurning()
		{
		}

		[Token(Token = "0x6002697")]
		[Address(RVA = "0xC180E4", Offset = "0xC180E4", VA = "0xC180E4")]
		public FireSource()
		{
		}
	}
	[Token(Token = "0x2000669")]
	[RequireComponent(typeof(Interactable))]
	public class Longbow : MonoBehaviour
	{
		[Token(Token = "0x200066A")]
		public enum Handedness
		{
			[Token(Token = "0x4002115")]
			Left,
			[Token(Token = "0x4002116")]
			Right
		}

		[Token(Token = "0x200066B")]
		[CompilerGenerated]
		private sealed class <ResetDrawAnim>d__55 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002119")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Longbow <>4__this;

			[Token(Token = "0x400211A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x400211B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <startLerp>5__3;

			[Token(Token = "0x1700020A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026B1")]
				[Address(RVA = "0xC191A4", Offset = "0xC191A4", VA = "0xC191A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026B3")]
				[Address(RVA = "0xC191EC", Offset = "0xC191EC", VA = "0xC191EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026AE")]
			[Address(RVA = "0xC18D48", Offset = "0xC18D48", VA = "0xC18D48")]
			[DebuggerHidden]
			public <ResetDrawAnim>d__55(int <>1__state)
			{
			}

			[Token(Token = "0x60026AF")]
			[Address(RVA = "0xC19090", Offset = "0xC19090", VA = "0xC19090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026B0")]
			[Address(RVA = "0xC19094", Offset = "0xC19094", VA = "0xC19094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026B2")]
			[Address(RVA = "0xC191AC", Offset = "0xC191AC", VA = "0xC191AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Handedness currentHandGuess;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float timeOfPossibleHandSwitch;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timeBeforeConfirmingHandSwitch;

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool possibleHandSwitch;

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform pivotTransform;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform handleTransform;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ArrowHand arrowHand;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform nockTransform;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform nockRestTransform;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool autoSpawnArrowHand;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemPackage arrowHandItemPackage;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject arrowHandPrefab;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool nocked;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool pulled;

		[Token(Token = "0x40020F5")]
		private const float minPull = 0.05f;

		[Token(Token = "0x40020F6")]
		private const float maxPull = 0.5f;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float nockDistanceTravelled;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float hapticDistanceThreshold;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastTickDistance;

		[Token(Token = "0x40020FA")]
		private const float bowPullPulseStrengthLow = 100f;

		[Token(Token = "0x40020FB")]
		private const float bowPullPulseStrengthHigh = 500f;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 bowLeftVector;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float arrowMinVelocity;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float arrowMaxVelocity;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float arrowVelocity;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float minStrainTickTime;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float maxStrainTickTime;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float nextStrainTick;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool lerpBackToZeroRotation;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lerpStartTime;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float lerpDuration;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion lerpStartRotation;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float nockLerpStartTime;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion nockLerpStartRotation;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float drawOffset;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LinearMapping bowDrawLinearMapping;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool deferNewPoses;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 lateUpdatePos;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion lateUpdateRot;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SoundBowClick drawSound;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float drawTension;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SoundPlayOneshot arrowSlideSound;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SoundPlayOneshot releaseSound;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public SoundPlayOneshot nockSound;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SteamVR_Events.Action newPosesAppliedAction;

		[Token(Token = "0x6002698")]
		[Address(RVA = "0xC180F4", Offset = "0xC180F4", VA = "0xC180F4")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x6002699")]
		[Address(RVA = "0xC180FC", Offset = "0xC180FC", VA = "0xC180FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600269A")]
		[Address(RVA = "0xC181B0", Offset = "0xC181B0", VA = "0xC181B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0xC181D0", Offset = "0xC181D0", VA = "0xC181D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600269C")]
		[Address(RVA = "0xC181F0", Offset = "0xC181F0", VA = "0xC181F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0xC18248", Offset = "0xC18248", VA = "0xC18248")]
		private void OnNewPosesApplied()
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0xC182A4", Offset = "0xC182A4", VA = "0xC182A4")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0xC15ED8", Offset = "0xC15ED8", VA = "0xC15ED8")]
		public void ArrowReleased()
		{
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0xC18CD4", Offset = "0xC18CD4", VA = "0xC18CD4")]
		[IteratorStateMachine(typeof(<ResetDrawAnim>d__55))]
		private IEnumerator ResetDrawAnim()
		{
			return null;
		}

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0xC18D70", Offset = "0xC18D70", VA = "0xC18D70")]
		public float GetArrowVelocity()
		{
			return default(float);
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0xC15E24", Offset = "0xC15E24", VA = "0xC15E24")]
		public void StartRotationLerp()
		{
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0xC15A80", Offset = "0xC15A80", VA = "0xC15A80")]
		public void StartNock(ArrowHand currentArrowHand)
		{
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0xC18BA4", Offset = "0xC18BA4", VA = "0xC18BA4")]
		private void EvaluateHandedness()
		{
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0xC18D78", Offset = "0xC18D78", VA = "0xC18D78")]
		private void DoHandednessCheck()
		{
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0xC159F8", Offset = "0xC159F8", VA = "0xC159F8")]
		public void ArrowInPosition()
		{
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0xC15DA4", Offset = "0xC15DA4", VA = "0xC15DA4")]
		public void ReleaseNock()
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0xC18DB8", Offset = "0xC18DB8", VA = "0xC18DB8")]
		private void ShutDown()
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0xC18F68", Offset = "0xC18F68", VA = "0xC18F68")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0xC18F8C", Offset = "0xC18F8C", VA = "0xC18F8C")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0xC18FD0", Offset = "0xC18FD0", VA = "0xC18FD0")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0xC1903C", Offset = "0xC1903C", VA = "0xC1903C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0xC19040", Offset = "0xC19040", VA = "0xC19040")]
		public Longbow()
		{
		}
	}
	[Token(Token = "0x200066C")]
	public class SoundBowClick : MonoBehaviour
	{
		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip bowClick;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchTensionCurve;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x60026B4")]
		[Address(RVA = "0xC191F4", Offset = "0xC191F4", VA = "0xC191F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60026B5")]
		[Address(RVA = "0xC18C80", Offset = "0xC18C80", VA = "0xC18C80")]
		public void PlayBowTensionClicks(float normalizedTension)
		{
		}

		[Token(Token = "0x60026B6")]
		[Address(RVA = "0xC1924C", Offset = "0xC1924C", VA = "0xC1924C")]
		public SoundBowClick()
		{
		}
	}
	[Token(Token = "0x200066D")]
	public class ControllerHintsExample : MonoBehaviour
	{
		[Token(Token = "0x200066E")]
		[CompilerGenerated]
		private sealed class <TestButtonHints>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x1700020C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026C0")]
				[Address(RVA = "0xC197EC", Offset = "0xC197EC", VA = "0xC197EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026C2")]
				[Address(RVA = "0xC19834", Offset = "0xC19834", VA = "0xC19834", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026BD")]
			[Address(RVA = "0xC194C4", Offset = "0xC194C4", VA = "0xC194C4")]
			[DebuggerHidden]
			public <TestButtonHints>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60026BE")]
			[Address(RVA = "0xC1951C", Offset = "0xC1951C", VA = "0xC1951C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026BF")]
			[Address(RVA = "0xC19520", Offset = "0xC19520", VA = "0xC19520", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026C1")]
			[Address(RVA = "0xC197F4", Offset = "0xC197F4", VA = "0xC197F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200066F")]
		[CompilerGenerated]
		private sealed class <TestTextHints>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x1700020E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026C6")]
				[Address(RVA = "0xC19AD8", Offset = "0xC19AD8", VA = "0xC19AD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026C8")]
				[Address(RVA = "0xC19B20", Offset = "0xC19B20", VA = "0xC19B20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026C3")]
			[Address(RVA = "0xC194EC", Offset = "0xC194EC", VA = "0xC194EC")]
			[DebuggerHidden]
			public <TestTextHints>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60026C4")]
			[Address(RVA = "0xC1983C", Offset = "0xC1983C", VA = "0xC1983C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026C5")]
			[Address(RVA = "0xC19840", Offset = "0xC19840", VA = "0xC19840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026C7")]
			[Address(RVA = "0xC19AE0", Offset = "0xC19AE0", VA = "0xC19AE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine buttonHintCoroutine;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine textHintCoroutine;

		[Token(Token = "0x60026B7")]
		[Address(RVA = "0xC19254", Offset = "0xC19254", VA = "0xC19254")]
		public void ShowButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x60026B8")]
		[Address(RVA = "0xC19324", Offset = "0xC19324", VA = "0xC19324")]
		public void ShowTextHints(Hand hand)
		{
		}

		[Token(Token = "0x60026B9")]
		[Address(RVA = "0xC193F4", Offset = "0xC193F4", VA = "0xC193F4")]
		public void DisableHints()
		{
		}

		[Token(Token = "0x60026BA")]
		[Address(RVA = "0xC192B0", Offset = "0xC192B0", VA = "0xC192B0")]
		[IteratorStateMachine(typeof(<TestButtonHints>d__5))]
		private IEnumerator TestButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x60026BB")]
		[Address(RVA = "0xC19380", Offset = "0xC19380", VA = "0xC19380")]
		[IteratorStateMachine(typeof(<TestTextHints>d__6))]
		private IEnumerator TestTextHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x60026BC")]
		[Address(RVA = "0xC19514", Offset = "0xC19514", VA = "0xC19514")]
		public ControllerHintsExample()
		{
		}
	}
	[Token(Token = "0x2000670")]
	[RequireComponent(typeof(Interactable))]
	public class InteractableExample : MonoBehaviour
	{
		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh textMesh;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 oldPosition;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion oldRotation;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float attachTime;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x60026C9")]
		[Address(RVA = "0xC19B28", Offset = "0xC19B28", VA = "0xC19B28")]
		private void Awake()
		{
		}

		[Token(Token = "0x60026CA")]
		[Address(RVA = "0xC19BAC", Offset = "0xC19BAC", VA = "0xC19BAC")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60026CB")]
		[Address(RVA = "0xC19C2C", Offset = "0xC19C2C", VA = "0xC19C2C")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60026CC")]
		[Address(RVA = "0xC19C80", Offset = "0xC19C80", VA = "0xC19C80")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60026CD")]
		[Address(RVA = "0xC19E80", Offset = "0xC19E80", VA = "0xC19E80")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60026CE")]
		[Address(RVA = "0xC19F18", Offset = "0xC19F18", VA = "0xC19F18")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60026CF")]
		[Address(RVA = "0xC19F98", Offset = "0xC19F98", VA = "0xC19F98")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60026D0")]
		[Address(RVA = "0xC1A088", Offset = "0xC1A088", VA = "0xC1A088")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x60026D1")]
		[Address(RVA = "0xC1A08C", Offset = "0xC1A08C", VA = "0xC1A08C")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x60026D2")]
		[Address(RVA = "0xC1A090", Offset = "0xC1A090", VA = "0xC1A090")]
		public InteractableExample()
		{
		}
	}
	[Token(Token = "0x2000671")]
	public class AllowTeleportWhileAttachedToHand : MonoBehaviour
	{
		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool teleportAllowed;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool overrideHoverLock;

		[Token(Token = "0x60026D3")]
		[Address(RVA = "0xC1A0A0", Offset = "0xC1A0A0", VA = "0xC1A0A0")]
		public AllowTeleportWhileAttachedToHand()
		{
		}
	}
	[Token(Token = "0x2000672")]
	public class ChaperoneInfo : MonoBehaviour
	{
		[Token(Token = "0x2000673")]
		[CompilerGenerated]
		private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ChaperoneInfo <>4__this;

			[Token(Token = "0x4002139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRChaperone <chaperone>5__2;

			[Token(Token = "0x17000215")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026E4")]
				[Address(RVA = "0xC1A77C", Offset = "0xC1A77C", VA = "0xC1A77C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000216")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026E6")]
				[Address(RVA = "0xC1A7C4", Offset = "0xC1A7C4", VA = "0xC1A7C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026E1")]
			[Address(RVA = "0xC1A39C", Offset = "0xC1A39C", VA = "0xC1A39C")]
			[DebuggerHidden]
			public <Start>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60026E2")]
			[Address(RVA = "0xC1A450", Offset = "0xC1A450", VA = "0xC1A450", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026E3")]
			[Address(RVA = "0xC1A454", Offset = "0xC1A454", VA = "0xC1A454", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026E5")]
			[Address(RVA = "0xC1A784", Offset = "0xC1A784", VA = "0xC1A784", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event Initialized;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ChaperoneInfo _instance;

		[Token(Token = "0x17000210")]
		public bool initialized
		{
			[Token(Token = "0x60026D4")]
			[Address(RVA = "0xC1A0B0", Offset = "0xC1A0B0", VA = "0xC1A0B0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60026D5")]
			[Address(RVA = "0xC1A0B8", Offset = "0xC1A0B8", VA = "0xC1A0B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public float playAreaSizeX
		{
			[Token(Token = "0x60026D6")]
			[Address(RVA = "0xC1A0C4", Offset = "0xC1A0C4", VA = "0xC1A0C4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60026D7")]
			[Address(RVA = "0xC1A0CC", Offset = "0xC1A0CC", VA = "0xC1A0CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public float playAreaSizeZ
		{
			[Token(Token = "0x60026D8")]
			[Address(RVA = "0xC1A0D4", Offset = "0xC1A0D4", VA = "0xC1A0D4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60026D9")]
			[Address(RVA = "0xC1A0DC", Offset = "0xC1A0DC", VA = "0xC1A0DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public bool roomscale
		{
			[Token(Token = "0x60026DA")]
			[Address(RVA = "0xC1A0E4", Offset = "0xC1A0E4", VA = "0xC1A0E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60026DB")]
			[Address(RVA = "0xC1A0EC", Offset = "0xC1A0EC", VA = "0xC1A0EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public static ChaperoneInfo instance
		{
			[Token(Token = "0x60026DD")]
			[Address(RVA = "0xC1A190", Offset = "0xC1A190", VA = "0xC1A190")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60026DC")]
		[Address(RVA = "0xC1A0F8", Offset = "0xC1A0F8", VA = "0xC1A0F8")]
		public static SteamVR_Events.Action InitializedAction(UnityAction action)
		{
			return null;
		}

		[Token(Token = "0x60026DE")]
		[Address(RVA = "0xC1A328", Offset = "0xC1A328", VA = "0xC1A328")]
		[IteratorStateMachine(typeof(<Start>d__21))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60026DF")]
		[Address(RVA = "0xC1A3C4", Offset = "0xC1A3C4", VA = "0xC1A3C4")]
		public ChaperoneInfo()
		{
		}
	}
	[Token(Token = "0x2000674")]
	public class IgnoreTeleportTrace : MonoBehaviour
	{
		[Token(Token = "0x60026E7")]
		[Address(RVA = "0xC1A7CC", Offset = "0xC1A7CC", VA = "0xC1A7CC")]
		public IgnoreTeleportTrace()
		{
		}
	}
	[Token(Token = "0x2000675")]
	public class Teleport : MonoBehaviour
	{
		[Token(Token = "0x2000676")]
		[CompilerGenerated]
		private sealed class <TeleportHintCoroutine>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400218B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Teleport <>4__this;

			[Token(Token = "0x400218C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <prevBreakTime>5__2;

			[Token(Token = "0x400218D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <prevHapticPulseTime>5__3;

			[Token(Token = "0x400218E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <pulsed>5__4;

			[Token(Token = "0x17000218")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600270D")]
				[Address(RVA = "0xC1FB50", Offset = "0xC1FB50", VA = "0xC1FB50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000219")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600270F")]
				[Address(RVA = "0xC1FB98", Offset = "0xC1FB98", VA = "0xC1FB98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600270A")]
			[Address(RVA = "0xC1F8B8", Offset = "0xC1F8B8", VA = "0xC1F8B8")]
			[DebuggerHidden]
			public <TeleportHintCoroutine>d__105(int <>1__state)
			{
			}

			[Token(Token = "0x600270B")]
			[Address(RVA = "0xC1F8E0", Offset = "0xC1F8E0", VA = "0xC1F8E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600270C")]
			[Address(RVA = "0xC1F8E4", Offset = "0xC1F8E4", VA = "0xC1F8E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600270E")]
			[Address(RVA = "0xC1FB58", Offset = "0xC1FB58", VA = "0xC1FB58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask traceLayerMask;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask floorFixupTraceLayerMask;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float floorFixupMaximumTraceDistance;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material areaVisibleMaterial;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material areaLockedMaterial;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material areaHighlightedMaterial;

		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material pointVisibleMaterial;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material pointLockedMaterial;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material pointHighlightedMaterial;

		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform destinationReticleTransform;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform invalidReticleTransform;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject playAreaPreviewCorner;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject playAreaPreviewSide;

		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color pointerValidColor;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color pointerInvalidColor;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color pointerLockedColor;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool showPlayAreaMarker;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float teleportFadeTime;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float meshFadeTime;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float arcDistance;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Effects")]
		public Transform onActivateObjectTransform;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform onDeactivateObjectTransform;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float activateObjectTime;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float deactivateObjectTime;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Audio Sources")]
		public AudioSource pointerAudioSource;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioSource loopingAudioSource;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioSource headAudioSource;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioSource reticleAudioSource;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Sounds")]
		public AudioClip teleportSound;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioClip pointerStartSound;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioClip pointerLoopSound;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip pointerStopSound;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioClip goodHighlightSound;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip badHighlightSound;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("Debug")]
		public bool debugFloor;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool showOffsetReticle;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Transform offsetReticleTransform;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MeshRenderer floorDebugSphere;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public LineRenderer floorDebugLine;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private LineRenderer pointerLineRenderer;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private GameObject teleportPointerObject;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform pointerStartTransform;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Hand pointerHand;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Player player;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private TeleportArc teleportArc;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool visible;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private TeleportMarkerBase[] teleportMarkers;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private TeleportMarkerBase pointedAtTeleportMarker;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private TeleportMarkerBase teleportingToMarker;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 pointedAtPosition;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Vector3 prevPointedAtPosition;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool teleporting;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private float currentFadeTime;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float meshAlphaPercent;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float pointerShowStartTime;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float pointerHideStartTime;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool meshFading;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float fullTintAlpha;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float invalidReticleMinScale;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float invalidReticleMaxScale;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float invalidReticleMinScaleDistance;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float invalidReticleMaxScaleDistance;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 invalidReticleScale;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Quaternion invalidReticleTargetRotation;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Transform playAreaPreviewTransform;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform[] playAreaPreviewCorners;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform[] playAreaPreviewSides;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float loopingAudioMaxVolume;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Coroutine hintCoroutine;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool originalHoverLockState;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Interactable originalHoveringInteractable;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private AllowTeleportWhileAttachedToHand allowTeleportWhileAttached;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Vector3 startingFeetOffset;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private bool movedFeetFarEnough;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private SteamVR_Events.Action chaperoneInfoInitializedAction;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event<float> ChangeScene;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static SteamVR_Events.Event<TeleportMarkerBase> Player;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SteamVR_Events.Event<TeleportMarkerBase> PlayerPre;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Teleport _instance;

		[Token(Token = "0x17000217")]
		public static Teleport instance
		{
			[Token(Token = "0x60026EB")]
			[Address(RVA = "0xC1A9D8", Offset = "0xC1A9D8", VA = "0xC1A9D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60026E8")]
		[Address(RVA = "0xC1A7D4", Offset = "0xC1A7D4", VA = "0xC1A7D4")]
		public static SteamVR_Events.Action<float> ChangeSceneAction(UnityAction<float> action)
		{
			return null;
		}

		[Token(Token = "0x60026E9")]
		[Address(RVA = "0xC1A880", Offset = "0xC1A880", VA = "0xC1A880")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x60026EA")]
		[Address(RVA = "0xC1A92C", Offset = "0xC1A92C", VA = "0xC1A92C")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerPreAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x60026EC")]
		[Address(RVA = "0xC1AAE0", Offset = "0xC1AAE0", VA = "0xC1AAE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60026ED")]
		[Address(RVA = "0xC1AD04", Offset = "0xC1AD04", VA = "0xC1AD04")]
		private void Start()
		{
		}

		[Token(Token = "0x60026EE")]
		[Address(RVA = "0xC1B284", Offset = "0xC1B284", VA = "0xC1B284")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60026EF")]
		[Address(RVA = "0xC1BDA8", Offset = "0xC1BDA8", VA = "0xC1BDA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60026F0")]
		[Address(RVA = "0xC1B144", Offset = "0xC1B144", VA = "0xC1B144")]
		private void CheckForSpawnPoint()
		{
		}

		[Token(Token = "0x60026F1")]
		[Address(RVA = "0xC1C1CC", Offset = "0xC1C1CC", VA = "0xC1C1CC")]
		public void HideTeleportPointer()
		{
		}

		[Token(Token = "0x60026F2")]
		[Address(RVA = "0xC1C244", Offset = "0xC1C244", VA = "0xC1C244")]
		private void Update()
		{
		}

		[Token(Token = "0x60026F3")]
		[Address(RVA = "0xC1CCCC", Offset = "0xC1CCCC", VA = "0xC1CCCC")]
		private void UpdatePointer()
		{
		}

		[Token(Token = "0x60026F4")]
		[Address(RVA = "0xC1DBA8", Offset = "0xC1DBA8", VA = "0xC1DBA8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60026F5")]
		[Address(RVA = "0xC1B2B0", Offset = "0xC1B2B0", VA = "0xC1B2B0")]
		private void OnChaperoneInfoInitialized()
		{
		}

		[Token(Token = "0x60026F6")]
		[Address(RVA = "0xC1AE5C", Offset = "0xC1AE5C", VA = "0xC1AE5C")]
		private void HidePointer()
		{
		}

		[Token(Token = "0x60026F7")]
		[Address(RVA = "0xC1C714", Offset = "0xC1C714", VA = "0xC1C714")]
		private void ShowPointer(Hand newPointerHand, Hand oldPointerHand)
		{
		}

		[Token(Token = "0x60026F8")]
		[Address(RVA = "0xC1D86C", Offset = "0xC1D86C", VA = "0xC1D86C")]
		private void UpdateTeleportColors()
		{
		}

		[Token(Token = "0x60026F9")]
		[Address(RVA = "0xC1DFF4", Offset = "0xC1DFF4", VA = "0xC1DFF4")]
		private void PlayAudioClip(AudioSource source, AudioClip clip)
		{
		}

		[Token(Token = "0x60026FA")]
		[Address(RVA = "0xC1E0D4", Offset = "0xC1E0D4", VA = "0xC1E0D4")]
		private void PlayPointerHaptic(bool validLocation)
		{
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0xC1C5B4", Offset = "0xC1C5B4", VA = "0xC1C5B4")]
		private void TryTeleportPlayer()
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0xC1E114", Offset = "0xC1E114", VA = "0xC1E114")]
		private void InitiateTeleportFade()
		{
		}

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0xC1BDD4", Offset = "0xC1BDD4", VA = "0xC1BDD4")]
		private void TeleportPlayer()
		{
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0xC1D928", Offset = "0xC1D928", VA = "0xC1D928")]
		private void HighlightSelected(TeleportMarkerBase hitTeleportMarker)
		{
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0xC1E450", Offset = "0xC1E450", VA = "0xC1E450")]
		public void ShowTeleportHint()
		{
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0xC1E37C", Offset = "0xC1E37C", VA = "0xC1E37C")]
		public void CancelTeleportHint()
		{
		}

		[Token(Token = "0x6002701")]
		[Address(RVA = "0xC1E488", Offset = "0xC1E488", VA = "0xC1E488")]
		[IteratorStateMachine(typeof(<TeleportHintCoroutine>d__105))]
		private IEnumerator TeleportHintCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0xC1E4FC", Offset = "0xC1E4FC", VA = "0xC1E4FC")]
		public bool IsEligibleForTeleport(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0xC1DF78", Offset = "0xC1DF78", VA = "0xC1DF78")]
		private bool ShouldOverrideHoverLock()
		{
			return default(bool);
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0xC1C504", Offset = "0xC1C504", VA = "0xC1C504")]
		private bool WasTeleportButtonReleased(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0xC1CC1C", Offset = "0xC1CC1C", VA = "0xC1CC1C")]
		private bool IsTeleportButtonDown(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002706")]
		[Address(RVA = "0xC1C664", Offset = "0xC1C664", VA = "0xC1C664")]
		private bool WasTeleportButtonPressed(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002707")]
		[Address(RVA = "0xC1E024", Offset = "0xC1E024", VA = "0xC1E024")]
		private Transform GetPointerStartTransform(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6002708")]
		[Address(RVA = "0xC1E684", Offset = "0xC1E684", VA = "0xC1E684")]
		public Teleport()
		{
		}
	}
	[Token(Token = "0x2000677")]
	public class TeleportArc : MonoBehaviour
	{
		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int segmentCount;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time in seconds to predict the motion of the projectile.")]
		public float arcDuration;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The amount of time in seconds between each segment of the projectile.")]
		public float segmentBreak;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The speed at which the line segments of the arc move.")]
		public float arcSpeed;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int traceLayerMask;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer[] lineRenderers;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float arcTimeOffset;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevThickness;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevSegmentCount;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showArc;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startPos;

		[Token(Token = "0x400219C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 projectileVelocity;

		[Token(Token = "0x400219D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useGravity;

		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform arcObjectsTransfrom;

		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool arcInvalid;

		[Token(Token = "0x6002710")]
		[Address(RVA = "0xC1FBA0", Offset = "0xC1FBA0", VA = "0xC1FBA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0xC1FBBC", Offset = "0xC1FBBC", VA = "0xC1FBBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002712")]
		[Address(RVA = "0xC1FC00", Offset = "0xC1FC00", VA = "0xC1FC00")]
		private void CreateLineRendererObjects()
		{
		}

		[Token(Token = "0x6002713")]
		[Address(RVA = "0xC20010", Offset = "0xC20010", VA = "0xC20010")]
		public void SetArcData(Vector3 position, Vector3 velocity, bool gravity, bool pointerAtBadAngle)
		{
		}

		[Token(Token = "0x6002714")]
		[Address(RVA = "0xC2005C", Offset = "0xC2005C", VA = "0xC2005C")]
		public void Show()
		{
		}

		[Token(Token = "0x6002715")]
		[Address(RVA = "0xC20074", Offset = "0xC20074", VA = "0xC20074")]
		public void Hide()
		{
		}

		[Token(Token = "0x6002716")]
		[Address(RVA = "0xC20110", Offset = "0xC20110", VA = "0xC20110")]
		public bool DrawArc(out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6002717")]
		[Address(RVA = "0xC20614", Offset = "0xC20614", VA = "0xC20614")]
		private void DrawArcSegment(int index, float startTime, float endTime)
		{
		}

		[Token(Token = "0x6002718")]
		[Address(RVA = "0xC206F4", Offset = "0xC206F4", VA = "0xC206F4")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6002719")]
		[Address(RVA = "0xC2031C", Offset = "0xC2031C", VA = "0xC2031C")]
		private float FindProjectileCollision(out RaycastHit hitInfo)
		{
			return default(float);
		}

		[Token(Token = "0x600271A")]
		[Address(RVA = "0xC20550", Offset = "0xC20550", VA = "0xC20550")]
		public Vector3 GetArcPositionAtTime(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600271B")]
		[Address(RVA = "0xC200A0", Offset = "0xC200A0", VA = "0xC200A0")]
		private void HideLineSegments(int startSegment, int endSegment)
		{
		}

		[Token(Token = "0x600271C")]
		[Address(RVA = "0xC207C4", Offset = "0xC207C4", VA = "0xC207C4")]
		public TeleportArc()
		{
		}
	}
	[Token(Token = "0x2000678")]
	public class TeleportArea : TeleportMarkerBase
	{
		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer areaMesh;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int tintColorId;

		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color visibleTintColor;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color highlightedTintColor;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color lockedTintColor;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool highlighted;

		[Token(Token = "0x1700021A")]
		public Bounds meshBounds
		{
			[Token(Token = "0x600271D")]
			[Address(RVA = "0xC207EC", Offset = "0xC207EC", VA = "0xC207EC")]
			[CompilerGenerated]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x600271E")]
			[Address(RVA = "0xC20800", Offset = "0xC20800", VA = "0xC20800")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600271F")]
		[Address(RVA = "0xC20814", Offset = "0xC20814", VA = "0xC20814")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002720")]
		[Address(RVA = "0xC209B4", Offset = "0xC209B4", VA = "0xC209B4")]
		public void Start()
		{
		}

		[Token(Token = "0x6002721")]
		[Address(RVA = "0xC20A80", Offset = "0xC20A80", VA = "0xC20A80", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002722")]
		[Address(RVA = "0xC20A88", Offset = "0xC20A88", VA = "0xC20A88", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6002723")]
		[Address(RVA = "0xC20A90", Offset = "0xC20A90", VA = "0xC20A90", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x6002724")]
		[Address(RVA = "0xC20B38", Offset = "0xC20B38", VA = "0xC20B38", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x6002725")]
		[Address(RVA = "0xC20C48", Offset = "0xC20C48", VA = "0xC20C48", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x6002726")]
		[Address(RVA = "0xC20CD4", Offset = "0xC20CD4", VA = "0xC20CD4")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6002727")]
		[Address(RVA = "0xC208A0", Offset = "0xC208A0", VA = "0xC208A0")]
		private bool CalculateBounds()
		{
			return default(bool);
		}

		[Token(Token = "0x6002728")]
		[Address(RVA = "0xC20BEC", Offset = "0xC20BEC", VA = "0xC20BEC")]
		private Color GetTintColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002729")]
		[Address(RVA = "0xC20D98", Offset = "0xC20D98", VA = "0xC20D98")]
		public TeleportArea()
		{
		}
	}
	[Token(Token = "0x2000679")]
	public abstract class TeleportMarkerBase : MonoBehaviour
	{
		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool locked;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool markerActive;

		[Token(Token = "0x1700021B")]
		public virtual bool showReticle
		{
			[Token(Token = "0x600272A")]
			[Address(RVA = "0xC20DC8", Offset = "0xC20DC8", VA = "0xC20DC8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600272B")]
		[Address(RVA = "0xC20DD0", Offset = "0xC20DD0", VA = "0xC20DD0")]
		public void SetLocked(bool locked)
		{
		}

		[Token(Token = "0x600272C")]
		[Address(RVA = "0xC20DE4", Offset = "0xC20DE4", VA = "0xC20DE4", Slot = "5")]
		public virtual void TeleportPlayer(Vector3 pointedAtPosition)
		{
		}

		[Token(Token = "0x600272D")]
		public abstract void UpdateVisuals();

		[Token(Token = "0x600272E")]
		public abstract void Highlight(bool highlight);

		[Token(Token = "0x600272F")]
		public abstract void SetAlpha(float tintAlpha, float alphaPercent);

		[Token(Token = "0x6002730")]
		public abstract bool ShouldActivate(Vector3 playerPosition);

		[Token(Token = "0x6002731")]
		public abstract bool ShouldMovePlayer();

		[Token(Token = "0x6002732")]
		[Address(RVA = "0xC20DB8", Offset = "0xC20DB8", VA = "0xC20DB8")]
		protected TeleportMarkerBase()
		{
		}
	}
	[Token(Token = "0x200067A")]
	public class TeleportPoint : TeleportMarkerBase
	{
		[Token(Token = "0x200067B")]
		public enum TeleportPointType
		{
			[Token(Token = "0x40021C3")]
			MoveToLocation,
			[Token(Token = "0x40021C4")]
			SwitchToNewScene
		}

		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TeleportPointType teleportType;

		[Token(Token = "0x40021AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string title;

		[Token(Token = "0x40021AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string switchToScene;

		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color titleVisibleColor;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color titleHighlightedColor;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color titleLockedColor;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool playerSpawnPoint;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool gotReleventComponents;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshRenderer markerMesh;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshRenderer switchSceneIcon;

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer moveLocationIcon;

		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer lockedIcon;

		[Token(Token = "0x40021B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MeshRenderer pointIcon;

		[Token(Token = "0x40021B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform lookAtJointTransform;

		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animation animation;

		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Text titleText;

		[Token(Token = "0x40021B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player player;

		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 lookAtPosition;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int tintColorID;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color tintColor;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Color titleColor;

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fullTitleAlpha;

		[Token(Token = "0x40021BF")]
		private const string switchSceneAnimation = "switch_scenes_idle";

		[Token(Token = "0x40021C0")]
		private const string moveLocationAnimation = "move_location_idle";

		[Token(Token = "0x40021C1")]
		private const string lockedAnimation = "locked_idle";

		[Token(Token = "0x1700021C")]
		public override bool showReticle
		{
			[Token(Token = "0x6002733")]
			[Address(RVA = "0xC20DE8", Offset = "0xC20DE8", VA = "0xC20DE8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0xC20DF0", Offset = "0xC20DF0", VA = "0xC20DF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002735")]
		[Address(RVA = "0xC21114", Offset = "0xC21114", VA = "0xC21114")]
		private void Start()
		{
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0xC21138", Offset = "0xC21138", VA = "0xC21138")]
		private void Update()
		{
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0xC211C4", Offset = "0xC211C4", VA = "0xC211C4", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0xC21280", Offset = "0xC21280", VA = "0xC21280", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0xC21288", Offset = "0xC21288", VA = "0xC21288", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x600273A")]
		[Address(RVA = "0xC21450", Offset = "0xC21450", VA = "0xC21450", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x600273B")]
		[Address(RVA = "0xC215D4", Offset = "0xC215D4", VA = "0xC215D4", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0xC21394", Offset = "0xC21394", VA = "0xC21394")]
		public void SetMeshMaterials(Material material, Color textColor)
		{
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0xC216E8", Offset = "0xC216E8", VA = "0xC216E8")]
		public void TeleportToScene()
		{
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0xC20EF8", Offset = "0xC20EF8", VA = "0xC20EF8")]
		public void GetRelevantComponents()
		{
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0xC217C8", Offset = "0xC217C8", VA = "0xC217C8")]
		public void ReleaseRelevantComponents()
		{
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0xC21830", Offset = "0xC21830", VA = "0xC21830")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6002741")]
		[Address(RVA = "0xC21ACC", Offset = "0xC21ACC", VA = "0xC21ACC")]
		public TeleportPoint()
		{
		}
	}
}
namespace DanielLochner.Assets.SimpleScrollSnap
{
	[Token(Token = "0x200067C")]
	public class FileSelected : MonoBehaviour
	{
		[Token(Token = "0x6002742")]
		[Address(RVA = "0xC21B3C", Offset = "0xC21B3C", VA = "0xC21B3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0xC21C14", Offset = "0xC21C14", VA = "0xC21C14")]
		public FileSelected()
		{
		}
	}
	[Token(Token = "0x200067D")]
	public class SlotMachine : MonoBehaviour
	{
		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected SimpleScrollSnap[] slots;

		[Token(Token = "0x6002744")]
		[Address(RVA = "0xC21C1C", Offset = "0xC21C1C", VA = "0xC21C1C")]
		public void OnSpin()
		{
		}

		[Token(Token = "0x6002745")]
		[Address(RVA = "0xC21D14", Offset = "0xC21D14", VA = "0xC21D14")]
		public SlotMachine()
		{
		}
	}
	[Token(Token = "0x200067E")]
	public class DynamicContentController : MonoBehaviour
	{
		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected GameObject panel;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected GameObject toggle;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected GameObject addInput;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected GameObject removeInput;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float toggleWidth;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SimpleScrollSnap sss;

		[Token(Token = "0x6002746")]
		[Address(RVA = "0xC21D1C", Offset = "0xC21D1C", VA = "0xC21D1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002747")]
		[Address(RVA = "0xC21DDC", Offset = "0xC21DDC", VA = "0xC21DDC")]
		public void AddToFront()
		{
		}

		[Token(Token = "0x6002748")]
		[Address(RVA = "0xC22050", Offset = "0xC22050", VA = "0xC22050")]
		public void AddToBack()
		{
		}

		[Token(Token = "0x6002749")]
		[Address(RVA = "0xC2209C", Offset = "0xC2209C", VA = "0xC2209C")]
		public void AddAtIndex()
		{
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0xC21DE4", Offset = "0xC21DE4", VA = "0xC21DE4")]
		private void Add(int index)
		{
		}

		[Token(Token = "0x600274B")]
		[Address(RVA = "0xC2231C", Offset = "0xC2231C", VA = "0xC2231C")]
		public void RemoveFromFront()
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0xC22458", Offset = "0xC22458", VA = "0xC22458")]
		public void RemoveFromBack()
		{
		}

		[Token(Token = "0x600274D")]
		[Address(RVA = "0xC2249C", Offset = "0xC2249C", VA = "0xC2249C")]
		public void RemoveAtIndex()
		{
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0xC22324", Offset = "0xC22324", VA = "0xC22324")]
		private void Remove(int index)
		{
		}

		[Token(Token = "0x600274F")]
		[Address(RVA = "0xC22754", Offset = "0xC22754", VA = "0xC22754")]
		public DynamicContentController()
		{
		}
	}
	[Token(Token = "0x200067F")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float rotationSpeed;

		[Token(Token = "0x6002750")]
		[Address(RVA = "0xC2275C", Offset = "0xC2275C", VA = "0xC2275C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0xC227F8", Offset = "0xC227F8", VA = "0xC227F8")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x2000680")]
	public class ExpandInformation : MonoBehaviour
	{
		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool expanded;

		[Token(Token = "0x6002752")]
		[Address(RVA = "0xC22800", Offset = "0xC22800", VA = "0xC22800")]
		public void Expand()
		{
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0xC22880", Offset = "0xC22880", VA = "0xC22880")]
		public ExpandInformation()
		{
		}
	}
	[Token(Token = "0x2000681")]
	[AddComponentMenu("UI/Simple Scroll-Snap")]
	[RequireComponent(typeof(ScrollRect))]
	public class SimpleScrollSnap : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000682")]
		public enum MovementType
		{
			[Token(Token = "0x4002204")]
			Fixed,
			[Token(Token = "0x4002205")]
			Free
		}

		[Token(Token = "0x2000683")]
		public enum MovementAxis
		{
			[Token(Token = "0x4002207")]
			Horizontal,
			[Token(Token = "0x4002208")]
			Vertical
		}

		[Token(Token = "0x2000684")]
		public enum Direction
		{
			[Token(Token = "0x400220A")]
			Up,
			[Token(Token = "0x400220B")]
			Down,
			[Token(Token = "0x400220C")]
			Left,
			[Token(Token = "0x400220D")]
			Right
		}

		[Token(Token = "0x2000685")]
		public enum SnapTarget
		{
			[Token(Token = "0x400220F")]
			Nearest,
			[Token(Token = "0x4002210")]
			Previous,
			[Token(Token = "0x4002211")]
			Next
		}

		[Token(Token = "0x2000686")]
		public enum SizeControl
		{
			[Token(Token = "0x4002213")]
			Manual,
			[Token(Token = "0x4002214")]
			Fit
		}

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MovementType movementType;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MovementAxis movementAxis;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool automaticallyLayout;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SizeControl sizeControl;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 size;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float automaticLayoutSpacing;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float leftMargin;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rightMargin;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float topMargin;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bottomMargin;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool infinitelyScroll;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float infiniteScrollingEndSpacing;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useOcclusionCulling;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int startingPanel;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool swipeGestures;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minimumSwipeSpeed;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.UI.Button previousButton;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.UI.Button nextButton;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject pagination;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool toggleNavigation;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public SnapTarget snapTarget;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float snappingSpeed;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float thresholdSnappingSpeed;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool hardSnap;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] distances;

		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool useUnscaledTime;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onPanelChanged;

		[Token(Token = "0x40021E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onPanelSelecting;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onPanelSelected;

		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onPanelChanging;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEvent onPanelSwipeSound;

		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<TransitionEffect> transitionEffects;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool dragging;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool selected;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		private bool pressing;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float releaseSpeed;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float contentLength;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Direction releaseDirection;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Graphic[] graphics;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Canvas canvas;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RectTransform canvasRectTransform;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private CanvasScaler canvasScaler;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private ScrollRect scrollRect;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector2 previousContentAnchoredPosition;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector2 velocity;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool setupComplite;

		[Token(Token = "0x1700021D")]
		public RectTransform Content
		{
			[Token(Token = "0x6002754")]
			[Address(RVA = "0xC22888", Offset = "0xC22888", VA = "0xC22888")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		public RectTransform Viewport
		{
			[Token(Token = "0x6002755")]
			[Address(RVA = "0xC228A4", Offset = "0xC228A4", VA = "0xC228A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021F")]
		public int CurrentPanel
		{
			[Token(Token = "0x6002756")]
			[Address(RVA = "0xC228C0", Offset = "0xC228C0", VA = "0xC228C0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002757")]
			[Address(RVA = "0xC228C8", Offset = "0xC228C8", VA = "0xC228C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public int TargetPanel
		{
			[Token(Token = "0x6002758")]
			[Address(RVA = "0xC228D0", Offset = "0xC228D0", VA = "0xC228D0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002759")]
			[Address(RVA = "0xC228D8", Offset = "0xC228D8", VA = "0xC228D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public int NearestPanel
		{
			[Token(Token = "0x600275A")]
			[Address(RVA = "0xC228E0", Offset = "0xC228E0", VA = "0xC228E0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600275B")]
			[Address(RVA = "0xC228E8", Offset = "0xC228E8", VA = "0xC228E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public int CurrentPanelSwipe
		{
			[Token(Token = "0x600275C")]
			[Address(RVA = "0xC228F0", Offset = "0xC228F0", VA = "0xC228F0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600275D")]
			[Address(RVA = "0xC228F8", Offset = "0xC228F8", VA = "0xC228F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		private RectTransform[] PanelsRT
		{
			[Token(Token = "0x600275E")]
			[Address(RVA = "0xC22900", Offset = "0xC22900", VA = "0xC22900")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600275F")]
			[Address(RVA = "0xC22908", Offset = "0xC22908", VA = "0xC22908")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public GameObject[] Panels
		{
			[Token(Token = "0x6002760")]
			[Address(RVA = "0xC22918", Offset = "0xC22918", VA = "0xC22918")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002761")]
			[Address(RVA = "0xC22920", Offset = "0xC22920", VA = "0xC22920")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public UnityEngine.UI.Toggle[] Toggles
		{
			[Token(Token = "0x6002762")]
			[Address(RVA = "0xC22930", Offset = "0xC22930", VA = "0xC22930")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002763")]
			[Address(RVA = "0xC22938", Offset = "0xC22938", VA = "0xC22938")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public int NumberOfPanels
		{
			[Token(Token = "0x6002764")]
			[Address(RVA = "0xC22078", Offset = "0xC22078", VA = "0xC22078")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002765")]
		[Address(RVA = "0xC22948", Offset = "0xC22948", VA = "0xC22948")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002766")]
		[Address(RVA = "0xC22AA0", Offset = "0xC22AA0", VA = "0xC22AA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002767")]
		[Address(RVA = "0xC22CD8", Offset = "0xC22CD8", VA = "0xC22CD8")]
		private void OnSelectingWhileDrag()
		{
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0xC242D8", Offset = "0xC242D8", VA = "0xC242D8", Slot = "7")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0xC242E4", Offset = "0xC242E4", VA = "0xC242E4", Slot = "8")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0xC242EC", Offset = "0xC242EC", VA = "0xC242EC", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0xC2431C", Offset = "0xC2431C", VA = "0xC2431C", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600276C")]
		[Address(RVA = "0xC24348", Offset = "0xC24348", VA = "0xC24348", Slot = "5")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0xC22950", Offset = "0xC22950", VA = "0xC22950")]
		private void Initialize()
		{
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0xC24414", Offset = "0xC24414", VA = "0xC24414")]
		private bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x600276F")]
		[Address(RVA = "0xC24760", Offset = "0xC24760", VA = "0xC24760")]
		public void Setup()
		{
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0xC25274", Offset = "0xC25274", VA = "0xC25274")]
		private Vector2 DisplacementFromCenter(int index)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0xC25330", Offset = "0xC25330", VA = "0xC25330")]
		private int DetermineNearestPanel()
		{
			return default(int);
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0xC2419C", Offset = "0xC2419C", VA = "0xC2419C")]
		private int DetermineNearestSwipedPanel()
		{
			return default(int);
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0xC24118", Offset = "0xC24118", VA = "0xC24118")]
		private void DetermineVelocity()
		{
		}

		[Token(Token = "0x6002774")]
		[Address(RVA = "0xC254C8", Offset = "0xC254C8", VA = "0xC254C8")]
		private void SelectTargetPanel()
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0xC257C0", Offset = "0xC257C0", VA = "0xC257C0")]
		private void SnapToTargetPanel()
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0xC22D98", Offset = "0xC22D98", VA = "0xC22D98")]
		private void OnSelectingAndSnapping()
		{
		}

		[Token(Token = "0x6002777")]
		[Address(RVA = "0xC22B04", Offset = "0xC22B04", VA = "0xC22B04")]
		private void OnOcclusionCulling(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0xC22E74", Offset = "0xC22E74", VA = "0xC22E74")]
		private void OnInfiniteScrolling(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0xC231AC", Offset = "0xC231AC", VA = "0xC231AC")]
		private void OnTransitionEffects()
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0xC240A4", Offset = "0xC240A4", VA = "0xC240A4")]
		private void OnSwipeGestures()
		{
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0xC255C0", Offset = "0xC255C0", VA = "0xC255C0")]
		public void GoToPanel(int panelNumber)
		{
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0xC25784", Offset = "0xC25784", VA = "0xC25784")]
		public void GoToPreviousPanel()
		{
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0xC25728", Offset = "0xC25728", VA = "0xC25728")]
		public void GoToNextPanel()
		{
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0xC25A28", Offset = "0xC25A28", VA = "0xC25A28")]
		public void AddToFront(GameObject panel)
		{
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0xC25A30", Offset = "0xC25A30", VA = "0xC25A30")]
		public void AddToBack(GameObject panel)
		{
		}

		[Token(Token = "0x6002780")]
		[Address(RVA = "0xC22134", Offset = "0xC22134", VA = "0xC22134")]
		public void Add(GameObject panel, int index)
		{
		}

		[Token(Token = "0x6002781")]
		[Address(RVA = "0xC25A5C", Offset = "0xC25A5C", VA = "0xC25A5C")]
		public void RemoveFromFront()
		{
		}

		[Token(Token = "0x6002782")]
		[Address(RVA = "0xC25A64", Offset = "0xC25A64", VA = "0xC25A64")]
		public void RemoveFromBack()
		{
		}

		[Token(Token = "0x6002783")]
		[Address(RVA = "0xC22534", Offset = "0xC22534", VA = "0xC22534")]
		public void Remove(int index)
		{
		}

		[Token(Token = "0x6002784")]
		[Address(RVA = "0xC21CE8", Offset = "0xC21CE8", VA = "0xC21CE8")]
		public void AddVelocity(Vector2 velocity)
		{
		}

		[Token(Token = "0x6002785")]
		[Address(RVA = "0xC25A98", Offset = "0xC25A98", VA = "0xC25A98")]
		public SimpleScrollSnap()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000688")]
	public class TransitionEffect
	{
		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected float minDisplacement;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected float maxDisplacement;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected float minValue;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		protected float maxValue;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected float defaultMinValue;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float defaultMaxValue;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected float defaultMinDisplacement;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected float defaultMaxDisplacement;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool showPanel;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		protected bool showDisplacement;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[SerializeField]
		protected bool showValue;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string label;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AnimationCurve function;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AnimationCurve defaultFunction;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private SimpleScrollSnap simpleScrollSnap;

		[Token(Token = "0x17000227")]
		public string Label
		{
			[Token(Token = "0x6002788")]
			[Address(RVA = "0xC25BC0", Offset = "0xC25BC0", VA = "0xC25BC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002789")]
			[Address(RVA = "0xC25BC8", Offset = "0xC25BC8", VA = "0xC25BC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float MinValue
		{
			[Token(Token = "0x600278A")]
			[Address(RVA = "0xC25BD0", Offset = "0xC25BD0", VA = "0xC25BD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600278B")]
			[Address(RVA = "0xC25BD4", Offset = "0xC25BD4", VA = "0xC25BD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public float MaxValue
		{
			[Token(Token = "0x600278C")]
			[Address(RVA = "0xC25BDC", Offset = "0xC25BDC", VA = "0xC25BDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600278D")]
			[Address(RVA = "0xC25BE4", Offset = "0xC25BE4", VA = "0xC25BE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public float MinDisplacement
		{
			[Token(Token = "0x600278E")]
			[Address(RVA = "0xC25BEC", Offset = "0xC25BEC", VA = "0xC25BEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600278F")]
			[Address(RVA = "0xC25BF4", Offset = "0xC25BF4", VA = "0xC25BF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public float MaxDisplacement
		{
			[Token(Token = "0x6002790")]
			[Address(RVA = "0xC25BFC", Offset = "0xC25BFC", VA = "0xC25BFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002791")]
			[Address(RVA = "0xC25C04", Offset = "0xC25C04", VA = "0xC25C04")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public AnimationCurve Function
		{
			[Token(Token = "0x6002792")]
			[Address(RVA = "0xC25C0C", Offset = "0xC25C0C", VA = "0xC25C0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002793")]
			[Address(RVA = "0xC25C14", Offset = "0xC25C14", VA = "0xC25C14")]
			set
			{
			}
		}

		[Token(Token = "0x6002794")]
		[Address(RVA = "0xC25C1C", Offset = "0xC25C1C", VA = "0xC25C1C")]
		public TransitionEffect(string label, float minValue, float maxValue, float minDisplacement, float maxDisplacement, AnimationCurve function, SimpleScrollSnap simpleScrollSnap)
		{
		}

		[Token(Token = "0x6002795")]
		[Address(RVA = "0xC25CBC", Offset = "0xC25CBC", VA = "0xC25CBC")]
		private void SetDefaultValues(float minValue, float maxValue, float minDisplacement, float maxDisplacement, AnimationCurve function)
		{
		}

		[Token(Token = "0x6002796")]
		[Address(RVA = "0xC25CCC", Offset = "0xC25CCC", VA = "0xC25CCC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002797")]
		[Address(RVA = "0xC25A10", Offset = "0xC25A10", VA = "0xC25A10")]
		public float GetValue(float displacement)
		{
			return default(float);
		}
	}
}
namespace UnityTemplateProjects
{
	[Token(Token = "0x2000689")]
	public class SimpleCameraController : MonoBehaviour
	{
		[Token(Token = "0x200068A")]
		private class CameraState
		{
			[Token(Token = "0x400222D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yaw;

			[Token(Token = "0x400222E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pitch;

			[Token(Token = "0x400222F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float roll;

			[Token(Token = "0x4002230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float x;

			[Token(Token = "0x4002231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float y;

			[Token(Token = "0x4002232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float z;

			[Token(Token = "0x600279C")]
			[Address(RVA = "0xC25D38", Offset = "0xC25D38", VA = "0xC25D38")]
			public void SetFromTransform(Transform t)
			{
			}

			[Token(Token = "0x600279D")]
			[Address(RVA = "0xC26278", Offset = "0xC26278", VA = "0xC26278")]
			public void Translate(Vector3 translation)
			{
			}

			[Token(Token = "0x600279E")]
			[Address(RVA = "0xC262F8", Offset = "0xC262F8", VA = "0xC262F8")]
			public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)
			{
			}

			[Token(Token = "0x600279F")]
			[Address(RVA = "0xC26380", Offset = "0xC26380", VA = "0xC26380")]
			public void UpdateTransform(Transform t)
			{
			}

			[Token(Token = "0x60027A0")]
			[Address(RVA = "0xC265A4", Offset = "0xC265A4", VA = "0xC265A4")]
			public CameraState()
			{
			}
		}

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CameraState m_TargetCameraState;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraState m_InterpolatingCameraState;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Exponential boost factor on translation, controllable by mouse wheel.")]
		[Header("Movement Settings")]
		public float boost;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Time it takes to interpolate camera position 99% of the way to the target.")]
		[Range(0.001f, 1f)]
		public float positionLerpTime;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Settings")]
		[Tooltip("X = Change in mouse position.\nY = Multiplicative factor for camera rotation.")]
		public AnimationCurve mouseSensitivityCurve;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0.001f, 1f)]
		[Tooltip("Time it takes to interpolate camera rotation 99% of the way to the target.")]
		public float rotationLerpTime;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Whether or not to invert our Y axis for mouse input to rotation.")]
		public bool invertY;

		[Token(Token = "0x6002798")]
		[Address(RVA = "0xC25CE4", Offset = "0xC25CE4", VA = "0xC25CE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002799")]
		[Address(RVA = "0xC25DBC", Offset = "0xC25DBC", VA = "0xC25DBC")]
		private Vector3 GetInputTranslationDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600279A")]
		[Address(RVA = "0xC25FEC", Offset = "0xC25FEC", VA = "0xC25FEC")]
		private void Update()
		{
		}

		[Token(Token = "0x600279B")]
		[Address(RVA = "0xC263C8", Offset = "0xC263C8", VA = "0xC263C8")]
		public SimpleCameraController()
		{
		}
	}
}
namespace VRHardwareService
{
	[Token(Token = "0x200068B")]
	public class AppSettings
	{
		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AppSettingsData data;

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0xC265AC", Offset = "0xC265AC", VA = "0xC265AC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
		public static void InitInstance()
		{
		}

		[Token(Token = "0x60027A2")]
		[Address(RVA = "0xC26684", Offset = "0xC26684", VA = "0xC26684")]
		public AppSettings()
		{
		}
	}
	[Token(Token = "0x200068C")]
	[CreateAssetMenu(fileName = "AppSettings", menuName = "AppSettings", order = 1)]
	public class AppSettingsData : SerializedScriptableObject
	{
		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool enableVR;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public PlatformType platform;

		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip commonUIClick;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float commonUIClickVolume;

		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color outlineColor;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color textHoverColor;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool needCheckEntitlements;

		[Token(Token = "0x60027A3")]
		[Address(RVA = "0xC2668C", Offset = "0xC2668C", VA = "0xC2668C")]
		private void ClearPlayerPrefs()
		{
		}

		[Token(Token = "0x60027A4")]
		[Address(RVA = "0xC26694", Offset = "0xC26694", VA = "0xC26694")]
		public AppSettingsData()
		{
		}
	}
	[Token(Token = "0x200068D")]
	public class CommonXRHapticHandler : IHapticHandler
	{
		[Token(Token = "0x200068E")]
		[CompilerGenerated]
		private sealed class <DoHaptic>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticPattern pattern;

			[Token(Token = "0x4002244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CommonXRHapticHandler <>4__this;

			[Token(Token = "0x4002245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Hand hand;

			[Token(Token = "0x4002246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__2;

			[Token(Token = "0x1700022F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027B2")]
				[Address(RVA = "0xC26C5C", Offset = "0xC26C5C", VA = "0xC26C5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000230")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027B4")]
				[Address(RVA = "0xC26CA4", Offset = "0xC26CA4", VA = "0xC26CA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027AF")]
			[Address(RVA = "0xC26AF4", Offset = "0xC26AF4", VA = "0xC26AF4")]
			[DebuggerHidden]
			public <DoHaptic>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60027B0")]
			[Address(RVA = "0xC26B24", Offset = "0xC26B24", VA = "0xC26B24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027B1")]
			[Address(RVA = "0xC26B28", Offset = "0xC26B28", VA = "0xC26B28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027B3")]
			[Address(RVA = "0xC26C64", Offset = "0xC26C64", VA = "0xC26C64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isPlayRight;

		[Token(Token = "0x400223C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool isPlayLeft;

		[Token(Token = "0x400223D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine rightHapticCororutine;

		[Token(Token = "0x400223E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine leftHapticCororutine;

		[Token(Token = "0x400223F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputDevice _leftHandDevice;

		[Token(Token = "0x4002240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InputDevice _rightHandDevice;

		[Token(Token = "0x1700022D")]
		private InputDevice LeftHandDevice
		{
			[Token(Token = "0x60027A5")]
			[Address(RVA = "0xC2669C", Offset = "0xC2669C", VA = "0xC2669C")]
			get
			{
				return default(InputDevice);
			}
		}

		[Token(Token = "0x1700022E")]
		private InputDevice RightHandDevice
		{
			[Token(Token = "0x60027A6")]
			[Address(RVA = "0xC26770", Offset = "0xC26770", VA = "0xC26770")]
			get
			{
				return default(InputDevice);
			}
		}

		[Token(Token = "0x60027A7")]
		[Address(RVA = "0xC26844", Offset = "0xC26844", VA = "0xC26844")]
		public InputDevice GetDevice(Hand hand)
		{
			return default(InputDevice);
		}

		[Token(Token = "0x60027A8")]
		[Address(RVA = "0xC26854", Offset = "0xC26854", VA = "0xC26854")]
		private bool GetPlayState(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027A9")]
		[Address(RVA = "0xC26868", Offset = "0xC26868", VA = "0xC26868")]
		private void SetPlayState(Hand hand, bool state)
		{
		}

		[Token(Token = "0x60027AA")]
		[Address(RVA = "0xC26880", Offset = "0xC26880", VA = "0xC26880", Slot = "4")]
		public void PlayHaptic(Hand hand, HapticPattern pattern)
		{
		}

		[Token(Token = "0x60027AB")]
		[Address(RVA = "0xC26AB0", Offset = "0xC26AB0", VA = "0xC26AB0", Slot = "5")]
		public void StartHaptic(Hand hand, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x60027AC")]
		[Address(RVA = "0xC2695C", Offset = "0xC2695C", VA = "0xC2695C", Slot = "6")]
		public void StopHaptic(Hand hand)
		{
		}

		[Token(Token = "0x60027AD")]
		[Address(RVA = "0xC26A18", Offset = "0xC26A18", VA = "0xC26A18")]
		[IteratorStateMachine(typeof(<DoHaptic>d__16))]
		private IEnumerator DoHaptic(Hand hand, HapticPattern pattern)
		{
			return null;
		}

		[Token(Token = "0x60027AE")]
		[Address(RVA = "0xC26B1C", Offset = "0xC26B1C", VA = "0xC26B1C")]
		public CommonXRHapticHandler()
		{
		}
	}
	[Token(Token = "0x200068F")]
	public class CommonXRInputHandler : IInputHandler
	{
		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Button, bool> buttonStatus;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputDevice _leftHandDevice;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputDevice _rightHandDevice;

		[Token(Token = "0x17000231")]
		private InputDevice LeftHandDevice
		{
			[Token(Token = "0x60027B5")]
			[Address(RVA = "0xC26CAC", Offset = "0xC26CAC", VA = "0xC26CAC")]
			get
			{
				return default(InputDevice);
			}
		}

		[Token(Token = "0x17000232")]
		private InputDevice RightHandDevice
		{
			[Token(Token = "0x60027B6")]
			[Address(RVA = "0xC26D80", Offset = "0xC26D80", VA = "0xC26D80")]
			get
			{
				return default(InputDevice);
			}
		}

		[Token(Token = "0x60027B7")]
		[Address(RVA = "0xC26E54", Offset = "0xC26E54", VA = "0xC26E54")]
		private InputDevice GetDevice(Hand hand)
		{
			return default(InputDevice);
		}

		[Token(Token = "0x60027B8")]
		[Address(RVA = "0xC26E64", Offset = "0xC26E64", VA = "0xC26E64")]
		private bool GetValueDown(Button button, InputFeatureUsage<bool> inputFeatureUsage, Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027B9")]
		[Address(RVA = "0xC26F4C", Offset = "0xC26F4C", VA = "0xC26F4C")]
		private bool GetValueUp(Button button, InputFeatureUsage<bool> inputFeatureUsage, Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027BA")]
		[Address(RVA = "0xC27034", Offset = "0xC27034", VA = "0xC27034")]
		private bool GetValue(InputFeatureUsage<bool> inputFeatureUsage, Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027BB")]
		[Address(RVA = "0xC2707C", Offset = "0xC2707C", VA = "0xC2707C")]
		private float GetValue(InputFeatureUsage<float> inputFeatureUsage, Hand hand)
		{
			return default(float);
		}

		[Token(Token = "0x60027BC")]
		[Address(RVA = "0xC270BC", Offset = "0xC270BC", VA = "0xC270BC")]
		private Vector2 GetValue(InputFeatureUsage<Vector2> inputFeatureUsage, Hand hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60027BD")]
		[Address(RVA = "0xC270FC", Offset = "0xC270FC", VA = "0xC270FC")]
		private Vector3 GetValue(InputFeatureUsage<Vector3> inputFeatureUsage, Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027BE")]
		[Address(RVA = "0xC27144", Offset = "0xC27144", VA = "0xC27144")]
		private Quaternion GetValue(InputFeatureUsage<Quaternion> inputFeatureUsage, Hand hand)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60027BF")]
		[Address(RVA = "0xC27188", Offset = "0xC27188", VA = "0xC27188", Slot = "9")]
		public Vector3 GetAngularVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027C0")]
		[Address(RVA = "0xC271F8", Offset = "0xC271F8", VA = "0xC271F8", Slot = "6")]
		public bool GetButton(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027C1")]
		[Address(RVA = "0xC27444", Offset = "0xC27444", VA = "0xC27444", Slot = "5")]
		public bool GetButtonDown(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027C2")]
		[Address(RVA = "0xC274AC", Offset = "0xC274AC", VA = "0xC274AC", Slot = "7")]
		public bool GetButtonUp(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027C3")]
		[Address(RVA = "0xC27514", Offset = "0xC27514", VA = "0xC27514", Slot = "4")]
		public Vector2 GetThumbstickPosition(Hand hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60027C4")]
		[Address(RVA = "0xC27584", Offset = "0xC27584", VA = "0xC27584", Slot = "8")]
		public Vector3 GetVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027C5")]
		[Address(RVA = "0xC2725C", Offset = "0xC2725C", VA = "0xC2725C")]
		private Tuple<InputFeatureUsage<bool>, Hand> ResolveButton(Button btn)
		{
			return null;
		}

		[Token(Token = "0x60027C6")]
		[Address(RVA = "0xC275F4", Offset = "0xC275F4", VA = "0xC275F4")]
		public CommonXRInputHandler()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000690")]
	public class HapticPattern
	{
		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float duration;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isSmooth;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float frequency;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float amplitude;

		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve frequencyCurve;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve amplitudeCurve;

		[Token(Token = "0x60027C7")]
		[Address(RVA = "0xC2776C", Offset = "0xC2776C", VA = "0xC2776C")]
		public HapticPattern(float duration, float frequency, float amplitude)
		{
		}
	}
	[Token(Token = "0x2000691")]
	public interface IHapticHandler
	{
		[Token(Token = "0x60027C8")]
		void PlayHaptic(Hand hand, HapticPattern pattern);

		[Token(Token = "0x60027C9")]
		void StartHaptic(Hand hand, float frequency, float amplitude);

		[Token(Token = "0x60027CA")]
		void StopHaptic(Hand hand);
	}
	[Token(Token = "0x2000692")]
	public static class HapticService
	{
		[Token(Token = "0x4002250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IHapticHandler hapticHandler;

		[Token(Token = "0x60027CB")]
		[Address(RVA = "0xC277BC", Offset = "0xC277BC", VA = "0xC277BC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void InitService()
		{
		}

		[Token(Token = "0x60027CC")]
		[Address(RVA = "0xC278D0", Offset = "0xC278D0", VA = "0xC278D0")]
		public static void PlayHaptic(Hand hand, HapticPattern pattern)
		{
		}

		[Token(Token = "0x60027CD")]
		[Address(RVA = "0xC279A0", Offset = "0xC279A0", VA = "0xC279A0")]
		public static void StartHaptic(Hand hand, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x60027CE")]
		[Address(RVA = "0xC27A7C", Offset = "0xC27A7C", VA = "0xC27A7C")]
		public static void StopHaptic(Hand hand)
		{
		}
	}
	[Token(Token = "0x2000693")]
	public enum InputType
	{
		[Token(Token = "0x4002252")]
		Oculus,
		[Token(Token = "0x4002253")]
		KeyBoard
	}
	[Token(Token = "0x2000694")]
	public enum Button
	{
		[Token(Token = "0x4002255")]
		none,
		[Token(Token = "0x4002256")]
		LeftTrigger,
		[Token(Token = "0x4002257")]
		RightTrigger,
		[Token(Token = "0x4002258")]
		LeftGrip,
		[Token(Token = "0x4002259")]
		RightGrip,
		[Token(Token = "0x400225A")]
		Menu,
		[Token(Token = "0x400225B")]
		Button1,
		[Token(Token = "0x400225C")]
		Button2,
		[Token(Token = "0x400225D")]
		Button3,
		[Token(Token = "0x400225E")]
		Button4,
		[Token(Token = "0x400225F")]
		LeftStick,
		[Token(Token = "0x4002260")]
		RightStick
	}
	[Token(Token = "0x2000695")]
	public interface IInputHandler
	{
		[Token(Token = "0x60027CF")]
		Vector2 GetThumbstickPosition(Hand hand);

		[Token(Token = "0x60027D0")]
		bool GetButtonDown(Button btn);

		[Token(Token = "0x60027D1")]
		bool GetButton(Button btn);

		[Token(Token = "0x60027D2")]
		bool GetButtonUp(Button btn);

		[Token(Token = "0x60027D3")]
		Vector3 GetVelocity(Hand hand);

		[Token(Token = "0x60027D4")]
		Vector3 GetAngularVelocity(Hand hand);
	}
	[Token(Token = "0x2000696")]
	public static class InputService
	{
		[Token(Token = "0x4002261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IInputHandler inputHandler;

		[Token(Token = "0x4002262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int buttonsCount;

		[Token(Token = "0x60027D5")]
		[Address(RVA = "0xC27B40", Offset = "0xC27B40", VA = "0xC27B40")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void InitService()
		{
		}

		[Token(Token = "0x60027D6")]
		[Address(RVA = "0xC27CC8", Offset = "0xC27CC8", VA = "0xC27CC8")]
		public static Vector2 GetThumbstickPosition(Hand hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60027D7")]
		[Address(RVA = "0xC27D88", Offset = "0xC27D88", VA = "0xC27D88")]
		public static bool GetButtonDown(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D8")]
		[Address(RVA = "0xC27E4C", Offset = "0xC27E4C", VA = "0xC27E4C")]
		public static Vector3 GetVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0xC27F10", Offset = "0xC27F10", VA = "0xC27F10")]
		public static Vector3 GetAngularVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027DA")]
		[Address(RVA = "0xC27FD4", Offset = "0xC27FD4", VA = "0xC27FD4")]
		public static bool GetButton(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027DB")]
		[Address(RVA = "0xC28098", Offset = "0xC28098", VA = "0xC28098")]
		public static bool GetButtonUp(Button btn)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000697")]
	public class KeyboardInputService : IInputHandler
	{
		[Token(Token = "0x60027DC")]
		[Address(RVA = "0xC2815C", Offset = "0xC2815C", VA = "0xC2815C", Slot = "9")]
		public Vector3 GetAngularVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027DD")]
		[Address(RVA = "0xC281A0", Offset = "0xC281A0", VA = "0xC281A0", Slot = "6")]
		public bool GetButton(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027DE")]
		[Address(RVA = "0xC281B4", Offset = "0xC281B4", VA = "0xC281B4", Slot = "5")]
		public bool GetButtonDown(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027DF")]
		[Address(RVA = "0xC281C0", Offset = "0xC281C0", VA = "0xC281C0", Slot = "7")]
		public bool GetButtonUp(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E0")]
		[Address(RVA = "0xC281CC", Offset = "0xC281CC", VA = "0xC281CC", Slot = "4")]
		public Vector2 GetThumbstickPosition(Hand hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60027E1")]
		[Address(RVA = "0xC282A0", Offset = "0xC282A0", VA = "0xC282A0", Slot = "8")]
		public Vector3 GetVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027E2")]
		[Address(RVA = "0xC281AC", Offset = "0xC281AC", VA = "0xC281AC")]
		private KeyCode ResolveButton(Button btn)
		{
			return default(KeyCode);
		}

		[Token(Token = "0x60027E3")]
		[Address(RVA = "0xC282E4", Offset = "0xC282E4", VA = "0xC282E4")]
		public KeyboardInputService()
		{
		}
	}
	[Token(Token = "0x2000698")]
	public class OVRHapticHandler : IHapticHandler
	{
		[Token(Token = "0x2000699")]
		[CompilerGenerated]
		private sealed class <DoHaptic>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticPattern pattern;

			[Token(Token = "0x400226A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OVRHapticHandler <>4__this;

			[Token(Token = "0x400226B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Hand hand;

			[Token(Token = "0x400226C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__2;

			[Token(Token = "0x17000233")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027EE")]
				[Address(RVA = "0xC28700", Offset = "0xC28700", VA = "0xC28700", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000234")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027F0")]
				[Address(RVA = "0xC28748", Offset = "0xC28748", VA = "0xC28748", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027EB")]
			[Address(RVA = "0xC285C0", Offset = "0xC285C0", VA = "0xC285C0")]
			[DebuggerHidden]
			public <DoHaptic>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60027EC")]
			[Address(RVA = "0xC285E8", Offset = "0xC285E8", VA = "0xC285E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027ED")]
			[Address(RVA = "0xC285EC", Offset = "0xC285EC", VA = "0xC285EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027EF")]
			[Address(RVA = "0xC28708", Offset = "0xC28708", VA = "0xC28708", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isPlayRight;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool isPlayLeft;

		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine rightHapticCororutine;

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine leftHapticCororutine;

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0xC282EC", Offset = "0xC282EC", VA = "0xC282EC")]
		private bool GetPlayState(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E5")]
		[Address(RVA = "0xC28300", Offset = "0xC28300", VA = "0xC28300")]
		private void SetPlayState(Hand hand, bool state)
		{
		}

		[Token(Token = "0x60027E6")]
		[Address(RVA = "0xC28318", Offset = "0xC28318", VA = "0xC28318", Slot = "4")]
		public void PlayHaptic(Hand hand, HapticPattern pattern)
		{
		}

		[Token(Token = "0x60027E7")]
		[Address(RVA = "0xC28544", Offset = "0xC28544", VA = "0xC28544", Slot = "5")]
		public void StartHaptic(Hand hand, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x60027E8")]
		[Address(RVA = "0xC283F4", Offset = "0xC283F4", VA = "0xC283F4", Slot = "6")]
		public void StopHaptic(Hand hand)
		{
		}

		[Token(Token = "0x60027E9")]
		[Address(RVA = "0xC284AC", Offset = "0xC284AC", VA = "0xC284AC")]
		[IteratorStateMachine(typeof(<DoHaptic>d__9))]
		private IEnumerator DoHaptic(Hand hand, HapticPattern pattern)
		{
			return null;
		}

		[Token(Token = "0x60027EA")]
		[Address(RVA = "0xC278C8", Offset = "0xC278C8", VA = "0xC278C8")]
		public OVRHapticHandler()
		{
		}
	}
	[Token(Token = "0x200069A")]
	public class OVRInputHandler : IInputHandler
	{
		[Token(Token = "0x60027F1")]
		[Address(RVA = "0xC28750", Offset = "0xC28750", VA = "0xC28750", Slot = "5")]
		public bool GetButtonDown(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0xC287F0", Offset = "0xC287F0", VA = "0xC287F0", Slot = "6")]
		public bool GetButton(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0xC2886C", Offset = "0xC2886C", VA = "0xC2886C", Slot = "7")]
		public bool GetButtonUp(Button btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60027F4")]
		[Address(RVA = "0xC288E8", Offset = "0xC288E8", VA = "0xC288E8", Slot = "4")]
		public Vector2 GetThumbstickPosition(Hand hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60027F5")]
		[Address(RVA = "0xC287CC", Offset = "0xC287CC", VA = "0xC287CC")]
		private OVRInput.Button ResolveButton(Button btn)
		{
			return default(OVRInput.Button);
		}

		[Token(Token = "0x60027F6")]
		[Address(RVA = "0xC28950", Offset = "0xC28950", VA = "0xC28950", Slot = "8")]
		public Vector3 GetVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027F7")]
		[Address(RVA = "0xC289B4", Offset = "0xC289B4", VA = "0xC289B4", Slot = "9")]
		public Vector3 GetAngularVelocity(Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60027F8")]
		[Address(RVA = "0xC27CC0", Offset = "0xC27CC0", VA = "0xC27CC0")]
		public OVRInputHandler()
		{
		}
	}
	[Token(Token = "0x200069B")]
	public class PicoHapticsHandler : IHapticHandler
	{
		[Token(Token = "0x200069C")]
		[CompilerGenerated]
		private sealed class <DoHaptic>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticPattern pattern;

			[Token(Token = "0x4002274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PicoHapticsHandler <>4__this;

			[Token(Token = "0x4002275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Hand hand;

			[Token(Token = "0x4002276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__2;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002803")]
				[Address(RVA = "0xC28D70", Offset = "0xC28D70", VA = "0xC28D70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002805")]
				[Address(RVA = "0xC28DB8", Offset = "0xC28DB8", VA = "0xC28DB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002800")]
			[Address(RVA = "0xC28C54", Offset = "0xC28C54", VA = "0xC28C54")]
			[DebuggerHidden]
			public <DoHaptic>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002801")]
			[Address(RVA = "0xC28C7C", Offset = "0xC28C7C", VA = "0xC28C7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002802")]
			[Address(RVA = "0xC28C80", Offset = "0xC28C80", VA = "0xC28C80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002804")]
			[Address(RVA = "0xC28D78", Offset = "0xC28D78", VA = "0xC28D78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isPlayRight;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool isPlayLeft;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine rightHapticCororutine;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine leftHapticCororutine;

		[Token(Token = "0x60027F9")]
		[Address(RVA = "0xC28A18", Offset = "0xC28A18", VA = "0xC28A18")]
		private bool GetPlayState(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60027FA")]
		[Address(RVA = "0xC28A2C", Offset = "0xC28A2C", VA = "0xC28A2C")]
		private void SetPlayState(Hand hand, bool state)
		{
		}

		[Token(Token = "0x60027FB")]
		[Address(RVA = "0xC28A44", Offset = "0xC28A44", VA = "0xC28A44", Slot = "4")]
		public void PlayHaptic(Hand hand, HapticPattern pattern)
		{
		}

		[Token(Token = "0x60027FC")]
		[Address(RVA = "0xC28C50", Offset = "0xC28C50", VA = "0xC28C50", Slot = "5")]
		public void StartHaptic(Hand hand, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x60027FD")]
		[Address(RVA = "0xC28B20", Offset = "0xC28B20", VA = "0xC28B20", Slot = "6")]
		public void StopHaptic(Hand hand)
		{
		}

		[Token(Token = "0x60027FE")]
		[Address(RVA = "0xC28BB8", Offset = "0xC28BB8", VA = "0xC28BB8")]
		[IteratorStateMachine(typeof(<DoHaptic>d__9))]
		private IEnumerator DoHaptic(Hand hand, HapticPattern pattern)
		{
			return null;
		}

		[Token(Token = "0x60027FF")]
		[Address(RVA = "0xC278C0", Offset = "0xC278C0", VA = "0xC278C0")]
		public PicoHapticsHandler()
		{
		}
	}
	[Token(Token = "0x200069D")]
	public static class XRService
	{
		[Token(Token = "0x200069E")]
		[CompilerGenerated]
		private sealed class <StartXR>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000237")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600280C")]
				[Address(RVA = "0xC29428", Offset = "0xC29428", VA = "0xC29428", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000238")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600280E")]
				[Address(RVA = "0xC29470", Offset = "0xC29470", VA = "0xC29470", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002809")]
			[Address(RVA = "0xC28F00", Offset = "0xC28F00", VA = "0xC28F00")]
			[DebuggerHidden]
			public <StartXR>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600280A")]
			[Address(RVA = "0xC290A0", Offset = "0xC290A0", VA = "0xC290A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600280B")]
			[Address(RVA = "0xC290A4", Offset = "0xC290A4", VA = "0xC290A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600280D")]
			[Address(RVA = "0xC29430", Offset = "0xC29430", VA = "0xC29430", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool VRInited;

		[Token(Token = "0x6002806")]
		[Address(RVA = "0xC28DC0", Offset = "0xC28DC0", VA = "0xC28DC0")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
		private static void InitService()
		{
		}

		[Token(Token = "0x6002807")]
		[Address(RVA = "0xC28EA0", Offset = "0xC28EA0", VA = "0xC28EA0")]
		[IteratorStateMachine(typeof(<StartXR>d__2))]
		private static IEnumerator StartXR()
		{
			return null;
		}

		[Token(Token = "0x6002808")]
		[Address(RVA = "0xC28F28", Offset = "0xC28F28", VA = "0xC28F28")]
		private static void StopXR()
		{
		}
	}
	[Token(Token = "0x200069F")]
	[RequireComponent(typeof(Canvas))]
	public class VRGraphicRaycaster : GraphicRaycaster, IPointerEnterHandler, IEventSystemHandler
	{
		[Token(Token = "0x20006A0")]
		private struct RaycastHit
		{
			[Token(Token = "0x4002282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Graphic graphic;

			[Token(Token = "0x4002283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 worldPos;

			[Token(Token = "0x4002284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool fromMouse;
		}

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("A world space pointer for this canvas")]
		public GameObject pointer;

		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxInteractionDistance;

		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float minInteractionDistance;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int sortOrder;

		[NonSerialized]
		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Canvas m_Canvas;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Player player;

		[NonSerialized]
		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<RaycastHit> m_RaycastResults;

		[NonSerialized]
		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<RaycastHit> s_SortedGraphics;

		[Token(Token = "0x17000239")]
		private Canvas canvas
		{
			[Token(Token = "0x6002810")]
			[Address(RVA = "0xC29530", Offset = "0xC29530", VA = "0xC29530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023A")]
		public override Camera eventCamera
		{
			[Token(Token = "0x6002811")]
			[Address(RVA = "0xC295D8", Offset = "0xC295D8", VA = "0xC295D8", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023B")]
		public override int sortOrderPriority
		{
			[Token(Token = "0x6002812")]
			[Address(RVA = "0xC295F4", Offset = "0xC295F4", VA = "0xC295F4", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600280F")]
		[Address(RVA = "0xC29478", Offset = "0xC29478", VA = "0xC29478")]
		protected VRGraphicRaycaster()
		{
		}

		[Token(Token = "0x6002813")]
		[Address(RVA = "0xC295FC", Offset = "0xC295FC", VA = "0xC295FC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002814")]
		[Address(RVA = "0xC296C4", Offset = "0xC296C4", VA = "0xC296C4")]
		private void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList, Ray ray, bool checkForBlocking)
		{
		}

		[Token(Token = "0x6002815")]
		[Address(RVA = "0xC2A3B4", Offset = "0xC2A3B4", VA = "0xC2A3B4", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6002816")]
		[Address(RVA = "0xC2A508", Offset = "0xC2A508", VA = "0xC2A508")]
		public void RaycastPointer(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6002817")]
		[Address(RVA = "0xC29D48", Offset = "0xC29D48", VA = "0xC29D48")]
		private void GraphicRaycast(Canvas canvas, Ray ray, List<RaycastHit> results)
		{
		}

		[Token(Token = "0x6002818")]
		[Address(RVA = "0xC2A994", Offset = "0xC2A994", VA = "0xC2A994")]
		public Vector2 GetScreenPosition(RaycastResult raycastResult)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002819")]
		[Address(RVA = "0xC2A758", Offset = "0xC2A758", VA = "0xC2A758")]
		private static bool RayIntersectsRectTransform(RectTransform rectTransform, Ray ray, out Vector3 worldPos)
		{
			return default(bool);
		}

		[Token(Token = "0x600281A")]
		[Address(RVA = "0xC2A9CC", Offset = "0xC2A9CC", VA = "0xC2A9CC")]
		public bool IsFocussed()
		{
			return default(bool);
		}

		[Token(Token = "0x600281B")]
		[Address(RVA = "0xC2AAE4", Offset = "0xC2AAE4", VA = "0xC2AAE4", Slot = "22")]
		public void OnPointerEnter(PointerEventData e)
		{
		}
	}
	[Token(Token = "0x20006A2")]
	public class VRPointerEventData : PointerEventData
	{
		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Ray worldSpaceRay;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Vector2 swipeStart;

		[Token(Token = "0x6002820")]
		[Address(RVA = "0xC2AD5C", Offset = "0xC2AD5C", VA = "0xC2AD5C")]
		public VRPointerEventData(EventSystem eventSystem)
		{
		}

		[Token(Token = "0x6002821")]
		[Address(RVA = "0xC2AD64", Offset = "0xC2AD64", VA = "0xC2AD64", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20006A3")]
	public static class PointerEventDataExtension
	{
		[Token(Token = "0x6002822")]
		[Address(RVA = "0xC2A408", Offset = "0xC2A408", VA = "0xC2A408")]
		public static bool IsVRPointer(this PointerEventData pointerEventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002823")]
		[Address(RVA = "0xC2A480", Offset = "0xC2A480", VA = "0xC2A480")]
		public static Ray GetRay(this PointerEventData pointerEventData)
		{
			return default(Ray);
		}

		[Token(Token = "0x6002824")]
		[Address(RVA = "0xC2B118", Offset = "0xC2B118", VA = "0xC2B118")]
		public static Vector2 GetSwipeStart(this PointerEventData pointerEventData)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002825")]
		[Address(RVA = "0xC2B194", Offset = "0xC2B194", VA = "0xC2B194")]
		public static void SetSwipeStart(this PointerEventData pointerEventData, Vector2 start)
		{
		}
	}
	[Token(Token = "0x20006A4")]
	public class VRInputModule : PointerInputModule
	{
		[Token(Token = "0x20006A5")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public enum InputMode
		{
			[Token(Token = "0x40022A4")]
			Mouse,
			[Token(Token = "0x40022A5")]
			Buttons
		}

		[Token(Token = "0x4002289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Object which points with Z axis. E.g. CentreEyeAnchor from OVRCameraRig")]
		public Transform rayTransform;

		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Hand inputHand;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public VRCursorPointer m_Cursor;

		[Token(Token = "0x400228C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Gamepad button to act as gaze click")]
		public Button joyPadClickButton;

		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Keyboard button to act as gaze click")]
		public KeyCode gazeClickKey;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Physics")]
		[Tooltip("Perform an sphere cast to determine correct depth for gaze pointer")]
		public bool performSphereCastForGazepointer;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Header("Gamepad Stick Scroll")]
		[Tooltip("Enable scrolling with the right stick on a gamepad")]
		public bool useRightStickScroll;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Deadzone for right stick to prevent accidental scrolling")]
		public float rightStickDeadZone;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Enable scrolling by swiping the touchpad")]
		[Header("Touchpad Swipe Scroll")]
		public bool useSwipeScroll;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Minimum trackpad movement in pixels to start swiping")]
		public float swipeDragThreshold;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Distance scrolled when swipe scroll occurs")]
		public float swipeDragScale;

		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Invert X axis on touchpad")]
		public bool InvertSwipeXAxis;

		[NonSerialized]
		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public VRGraphicRaycaster activeGraphicRaycaster;

		[Token(Token = "0x4002296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Dragging")]
		[Tooltip("Minimum pointer movement in degrees to start dragging")]
		public float angleDragThreshold;

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private float m_SpherecastRadius;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float m_NextAction;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector2 m_LastMousePosition;

		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector2 m_MousePosition;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Standalone Input Module")]
		[SerializeField]
		private string m_HorizontalAxis;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private string m_VerticalAxis;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private string m_SubmitButton;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private string m_CancelButton;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private float m_InputActionsPerSecond;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private bool m_AllowActivationOnMobileDevice;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Dictionary<int, VRPointerEventData> m_VRRayPointerData;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly MouseState m_MouseState;

		[Token(Token = "0x1700023C")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public InputMode inputMode
		{
			[Token(Token = "0x6002827")]
			[Address(RVA = "0xC2B3C8", Offset = "0xC2B3C8", VA = "0xC2B3C8")]
			get
			{
				return default(InputMode);
			}
		}

		[Token(Token = "0x1700023D")]
		public bool allowActivationOnMobileDevice
		{
			[Token(Token = "0x6002828")]
			[Address(RVA = "0xC2B3D0", Offset = "0xC2B3D0", VA = "0xC2B3D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002829")]
			[Address(RVA = "0xC2B3D8", Offset = "0xC2B3D8", VA = "0xC2B3D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public float inputActionsPerSecond
		{
			[Token(Token = "0x600282A")]
			[Address(RVA = "0xC2B3E4", Offset = "0xC2B3E4", VA = "0xC2B3E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600282B")]
			[Address(RVA = "0xC2B3EC", Offset = "0xC2B3EC", VA = "0xC2B3EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public string horizontalAxis
		{
			[Token(Token = "0x600282C")]
			[Address(RVA = "0xC2B3F4", Offset = "0xC2B3F4", VA = "0xC2B3F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600282D")]
			[Address(RVA = "0xC2B3FC", Offset = "0xC2B3FC", VA = "0xC2B3FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public string verticalAxis
		{
			[Token(Token = "0x600282E")]
			[Address(RVA = "0xC2B404", Offset = "0xC2B404", VA = "0xC2B404")]
			get
			{
				return null;
			}
			[Token(Token = "0x600282F")]
			[Address(RVA = "0xC2B40C", Offset = "0xC2B40C", VA = "0xC2B40C")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public string submitButton
		{
			[Token(Token = "0x6002830")]
			[Address(RVA = "0xC2B414", Offset = "0xC2B414", VA = "0xC2B414")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002831")]
			[Address(RVA = "0xC2B41C", Offset = "0xC2B41C", VA = "0xC2B41C")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public string cancelButton
		{
			[Token(Token = "0x6002832")]
			[Address(RVA = "0xC2B424", Offset = "0xC2B424", VA = "0xC2B424")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002833")]
			[Address(RVA = "0xC2B42C", Offset = "0xC2B42C", VA = "0xC2B42C")]
			set
			{
			}
		}

		[Token(Token = "0x6002826")]
		[Address(RVA = "0xC2B220", Offset = "0xC2B220", VA = "0xC2B220")]
		protected VRInputModule()
		{
		}

		[Token(Token = "0x6002834")]
		[Address(RVA = "0xC2B434", Offset = "0xC2B434", VA = "0xC2B434", Slot = "24")]
		public override void UpdateModule()
		{
		}

		[Token(Token = "0x6002835")]
		[Address(RVA = "0xC2B458", Offset = "0xC2B458", VA = "0xC2B458", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6002836")]
		[Address(RVA = "0xC2B470", Offset = "0xC2B470", VA = "0xC2B470", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6002837")]
		[Address(RVA = "0xC2B5F8", Offset = "0xC2B5F8", VA = "0xC2B5F8", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6002838")]
		[Address(RVA = "0xC2B6C4", Offset = "0xC2B6C4", VA = "0xC2B6C4", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6002839")]
		[Address(RVA = "0xC2B9D4", Offset = "0xC2B9D4", VA = "0xC2B9D4")]
		private bool SendSubmitEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600283A")]
		[Address(RVA = "0xC2BBBC", Offset = "0xC2BBBC", VA = "0xC2BBBC")]
		private bool AllowMoveEventProcessing(float time)
		{
			return default(bool);
		}

		[Token(Token = "0x600283B")]
		[Address(RVA = "0xC2BC18", Offset = "0xC2BC18", VA = "0xC2BC18")]
		private Vector2 GetRawMoveVector()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600283C")]
		[Address(RVA = "0xC2BCD4", Offset = "0xC2BCD4", VA = "0xC2BCD4")]
		private bool SendMoveEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600283D")]
		[Address(RVA = "0xC2BED8", Offset = "0xC2BED8", VA = "0xC2BED8")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600283E")]
		[Address(RVA = "0xC2C020", Offset = "0xC2C020", VA = "0xC2C020")]
		private void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x600283F")]
		[Address(RVA = "0xC2C6B8", Offset = "0xC2C6B8", VA = "0xC2C6B8")]
		private void ProcessMouseEvent(MouseState mouseData)
		{
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0xC2C9C0", Offset = "0xC2C9C0", VA = "0xC2C9C0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6002841")]
		[Address(RVA = "0xC2C980", Offset = "0xC2C980", VA = "0xC2C980")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002842")]
		[Address(RVA = "0xC2CA58", Offset = "0xC2CA58", VA = "0xC2CA58")]
		protected void CopyFromTo(VRPointerEventData from, VRPointerEventData to)
		{
		}

		[Token(Token = "0x6002843")]
		[Address(RVA = "0xC2CAD8", Offset = "0xC2CAD8", VA = "0xC2CAD8")]
		protected new void CopyFromTo(PointerEventData from, PointerEventData to)
		{
		}

		[Token(Token = "0x6002844")]
		[Address(RVA = "0xC2CB44", Offset = "0xC2CB44", VA = "0xC2CB44")]
		protected bool GetPointerData(int id, out VRPointerEventData data, bool create)
		{
			return default(bool);
		}

		[Token(Token = "0x6002845")]
		[Address(RVA = "0xC2B6E0", Offset = "0xC2B6E0", VA = "0xC2B6E0")]
		protected new void ClearSelection()
		{
		}

		[Token(Token = "0x6002846")]
		[Address(RVA = "0xC2CC3C", Offset = "0xC2CC3C", VA = "0xC2CC3C")]
		private static Vector3 GetRectTransformNormal(RectTransform rectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002847")]
		[Address(RVA = "0xC2CDE0", Offset = "0xC2CDE0", VA = "0xC2CDE0", Slot = "31")]
		protected virtual MouseState GetGazePointerData()
		{
			return null;
		}

		[Token(Token = "0x6002848")]
		[Address(RVA = "0xC2D54C", Offset = "0xC2D54C", VA = "0xC2D54C")]
		protected MouseState GetCanvasPointerData()
		{
			return null;
		}

		[Token(Token = "0x6002849")]
		[Address(RVA = "0xC2D8F0", Offset = "0xC2D8F0", VA = "0xC2D8F0")]
		private bool ShouldStartDrag(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600284A")]
		[Address(RVA = "0xC2CA24", Offset = "0xC2CA24", VA = "0xC2CA24")]
		private static bool IsPointerMoving(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600284B")]
		[Address(RVA = "0xC2DC28", Offset = "0xC2DC28", VA = "0xC2DC28")]
		protected Vector2 SwipeAdjustedPosition(Vector2 originalPosition, PointerEventData pointerEvent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600284C")]
		[Address(RVA = "0xC2DCB0", Offset = "0xC2DCB0", VA = "0xC2DCB0", Slot = "30")]
		protected override void ProcessDrag(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x600284D")]
		[Address(RVA = "0xC2DFB8", Offset = "0xC2DFB8", VA = "0xC2DFB8", Slot = "32")]
		protected virtual PointerEventData.FramePressState GetGazeButtonState()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x600284E")]
		[Address(RVA = "0xC2D46C", Offset = "0xC2D46C", VA = "0xC2D46C")]
		protected Vector2 GetExtraScrollDelta()
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20006A6")]
	public class VRPhysicsRaycaster : BaseRaycaster
	{
		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera mainCamera;

		[Token(Token = "0x40022A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool camInited;

		[Token(Token = "0x40022A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRCursorPointer pointer;

		[Token(Token = "0x40022A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxDistance;

		[Token(Token = "0x40022AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minDistance;

		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool vrMode;

		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sortOrder;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool raycastInteractables;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask uiOnlyMask;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask interactablesMask;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RaycastHit[] hits;

		[Token(Token = "0x17000243")]
		public override Camera eventCamera
		{
			[Token(Token = "0x6002850")]
			[Address(RVA = "0xC2E0E0", Offset = "0xC2E0E0", VA = "0xC2E0E0", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000244")]
		public virtual int depth
		{
			[Token(Token = "0x6002851")]
			[Address(RVA = "0xC2E18C", Offset = "0xC2E18C", VA = "0xC2E18C", Slot = "22")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000245")]
		public override int sortOrderPriority
		{
			[Token(Token = "0x6002852")]
			[Address(RVA = "0xC2E250", Offset = "0xC2E250", VA = "0xC2E250", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000246")]
		private LayerMask eventMask
		{
			[Token(Token = "0x6002853")]
			[Address(RVA = "0xC2E258", Offset = "0xC2E258", VA = "0xC2E258")]
			get
			{
				return default(LayerMask);
			}
		}

		[Token(Token = "0x600284F")]
		[Address(RVA = "0xC2E068", Offset = "0xC2E068", VA = "0xC2E068")]
		protected VRPhysicsRaycaster()
		{
		}

		[Token(Token = "0x6002854")]
		[Address(RVA = "0xC2E274", Offset = "0xC2E274", VA = "0xC2E274", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6002855")]
		[Address(RVA = "0xC2E784", Offset = "0xC2E784", VA = "0xC2E784")]
		private void Sort(ref RaycastHit[] arr, int length)
		{
		}

		[Token(Token = "0x6002856")]
		[Address(RVA = "0xC2D4B8", Offset = "0xC2D4B8", VA = "0xC2D4B8")]
		public void Spherecast(PointerEventData eventData, List<RaycastResult> resultAppendList, float radius)
		{
		}

		[Token(Token = "0x6002857")]
		[Address(RVA = "0xC2D4FC", Offset = "0xC2D4FC", VA = "0xC2D4FC")]
		public Vector2 GetScreenPos(Vector3 worldPosition)
		{
			return default(Vector2);
		}
	}
}
namespace PlayStationVRExample
{
	[Token(Token = "0x20006A7")]
	public class SetupManager : MonoBehaviour
	{
		[Token(Token = "0x40022B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject recenterStep;

		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject contunueStep;

		[Token(Token = "0x40022B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool recenterSuccess;

		[Token(Token = "0x40022B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer fade;

		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float holdTimer;

		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float holdTimerThreshold;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image holdProgressBar;

		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject holdBtnPanel;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Renderer safetyPanel;

		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool setupCompleted;

		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform cam;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float visibleThreshold;

		[Token(Token = "0x6002858")]
		[Address(RVA = "0xC2E8F4", Offset = "0xC2E8F4", VA = "0xC2E8F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002859")]
		[Address(RVA = "0xC2E9FC", Offset = "0xC2E9FC", VA = "0xC2E9FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600285A")]
		[Address(RVA = "0xC2EA00", Offset = "0xC2EA00", VA = "0xC2EA00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600285B")]
		[Address(RVA = "0xC2EAE0", Offset = "0xC2EAE0", VA = "0xC2EAE0")]
		public void Fade(float startAlpha, float endAlpha, float stayDur, float dur)
		{
		}

		[Token(Token = "0x600285C")]
		[Address(RVA = "0xC2EC20", Offset = "0xC2EC20", VA = "0xC2EC20")]
		public void ResolveSceneSwitch()
		{
		}

		[Token(Token = "0x600285D")]
		[Address(RVA = "0xC2EC24", Offset = "0xC2EC24", VA = "0xC2EC24")]
		public void Update()
		{
		}

		[Token(Token = "0x600285E")]
		[Address(RVA = "0xC2ED88", Offset = "0xC2ED88", VA = "0xC2ED88")]
		private void GoToGame()
		{
		}

		[Token(Token = "0x600285F")]
		[Address(RVA = "0xC2EE98", Offset = "0xC2EE98", VA = "0xC2EE98")]
		public SetupManager()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x20006AA")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40022C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x40022C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x40022C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x40022C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x40022C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x40022CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6002867")]
		[Address(RVA = "0xC2F164", Offset = "0xC2F164", VA = "0xC2F164")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002868")]
		[Address(RVA = "0xC2F3EC", Offset = "0xC2F3EC", VA = "0xC2F3EC")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6002869")]
		[Address(RVA = "0xC2F570", Offset = "0xC2F570", VA = "0xC2F570")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600286A")]
		[Address(RVA = "0xC2F5E0", Offset = "0xC2F5E0", VA = "0xC2F5E0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600286B")]
		[Address(RVA = "0xC2F6AC", Offset = "0xC2F6AC", VA = "0xC2F6AC", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600286C")]
		[Address(RVA = "0xC2F710", Offset = "0xC2F710", VA = "0xC2F710")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x20006AB")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x40022CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x600286D")]
		[Address(RVA = "0xC2F77C", Offset = "0xC2F77C", VA = "0xC2F77C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600286E")]
		[Address(RVA = "0xC2F780", Offset = "0xC2F780", VA = "0xC2F780")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x600286F")]
		[Address(RVA = "0xC2F848", Offset = "0xC2F848", VA = "0xC2F848")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x6002870")]
		[Address(RVA = "0xC2F910", Offset = "0xC2F910", VA = "0xC2F910")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x6002871")]
		[Address(RVA = "0xC2F9D8", Offset = "0xC2F9D8", VA = "0xC2F9D8")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0xC2FAA0", Offset = "0xC2FAA0", VA = "0xC2FAA0")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x6002873")]
		[Address(RVA = "0xC2FB68", Offset = "0xC2FB68", VA = "0xC2FB68")]
		public void Update()
		{
		}

		[Token(Token = "0x6002874")]
		[Address(RVA = "0xC2FB6C", Offset = "0xC2FB6C", VA = "0xC2FB6C")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x20006AC")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x20006AD")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x40022D0")]
			Hardware,
			[Token(Token = "0x40022D1")]
			Touch
		}

		[Token(Token = "0x20006AE")]
		public class VirtualAxis
		{
			[Token(Token = "0x40022D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x17000248")]
			public string name
			{
				[Token(Token = "0x600288E")]
				[Address(RVA = "0xC3094C", Offset = "0xC3094C", VA = "0xC3094C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600288F")]
				[Address(RVA = "0xC30954", Offset = "0xC30954", VA = "0xC30954")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000249")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6002890")]
				[Address(RVA = "0xC3095C", Offset = "0xC3095C", VA = "0xC3095C")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6002891")]
				[Address(RVA = "0xC30964", Offset = "0xC30964", VA = "0xC30964")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700024A")]
			public float GetValue
			{
				[Token(Token = "0x6002896")]
				[Address(RVA = "0xC309B8", Offset = "0xC309B8", VA = "0xC309B8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700024B")]
			public float GetValueRaw
			{
				[Token(Token = "0x6002897")]
				[Address(RVA = "0xC309C0", Offset = "0xC309C0", VA = "0xC309C0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6002892")]
			[Address(RVA = "0xC2F2E0", Offset = "0xC2F2E0", VA = "0xC2F2E0")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x6002893")]
			[Address(RVA = "0xC30970", Offset = "0xC30970", VA = "0xC30970")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6002894")]
			[Address(RVA = "0xC2F588", Offset = "0xC2F588", VA = "0xC2F588")]
			public void Remove()
			{
			}

			[Token(Token = "0x6002895")]
			[Address(RVA = "0xC309B0", Offset = "0xC309B0", VA = "0xC309B0")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x20006AF")]
		public class VirtualButton
		{
			[Token(Token = "0x40022D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x40022D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x40022D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x1700024C")]
			public string name
			{
				[Token(Token = "0x6002898")]
				[Address(RVA = "0xC309C8", Offset = "0xC309C8", VA = "0xC309C8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6002899")]
				[Address(RVA = "0xC309D0", Offset = "0xC309D0", VA = "0xC309D0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700024D")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600289A")]
				[Address(RVA = "0xC309D8", Offset = "0xC309D8", VA = "0xC309D8")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600289B")]
				[Address(RVA = "0xC309E0", Offset = "0xC309E0", VA = "0xC309E0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700024E")]
			public bool GetButton
			{
				[Token(Token = "0x60028A1")]
				[Address(RVA = "0xC30B1C", Offset = "0xC30B1C", VA = "0xC30B1C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700024F")]
			public bool GetButtonDown
			{
				[Token(Token = "0x60028A2")]
				[Address(RVA = "0xC30B24", Offset = "0xC30B24", VA = "0xC30B24")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000250")]
			public bool GetButtonUp
			{
				[Token(Token = "0x60028A3")]
				[Address(RVA = "0xC30B48", Offset = "0xC30B48", VA = "0xC30B48")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600289C")]
			[Address(RVA = "0xC309EC", Offset = "0xC309EC", VA = "0xC309EC")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x600289D")]
			[Address(RVA = "0xC30A30", Offset = "0xC30A30", VA = "0xC30A30")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x600289E")]
			[Address(RVA = "0xC30A78", Offset = "0xC30A78", VA = "0xC30A78")]
			public void Pressed()
			{
			}

			[Token(Token = "0x600289F")]
			[Address(RVA = "0xC30AA4", Offset = "0xC30AA4", VA = "0xC30AA4")]
			public void Released()
			{
			}

			[Token(Token = "0x60028A0")]
			[Address(RVA = "0xC30AC4", Offset = "0xC30AC4", VA = "0xC30AC4")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x40022CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x40022CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x40022CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000247")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x600288A")]
			[Address(RVA = "0xC30778", Offset = "0xC30778", VA = "0xC30778")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002875")]
		[Address(RVA = "0xC2FB74", Offset = "0xC2FB74", VA = "0xC2FB74")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x6002876")]
		[Address(RVA = "0xC2FC4C", Offset = "0xC2FC4C", VA = "0xC2FC4C")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x6002877")]
		[Address(RVA = "0xC2F278", Offset = "0xC2F278", VA = "0xC2F278")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002878")]
		[Address(RVA = "0xC2FD48", Offset = "0xC2FD48", VA = "0xC2FD48")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0xC2F31C", Offset = "0xC2F31C", VA = "0xC2F31C")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x600287A")]
		[Address(RVA = "0xC2FFA0", Offset = "0xC2FFA0", VA = "0xC2FFA0")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x600287B")]
		[Address(RVA = "0xC301A0", Offset = "0xC301A0", VA = "0xC301A0")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x600287C")]
		[Address(RVA = "0xC302E8", Offset = "0xC302E8", VA = "0xC302E8")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0xC2F384", Offset = "0xC2F384", VA = "0xC2F384")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0xC30474", Offset = "0xC30474", VA = "0xC30474")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x600287F")]
		[Address(RVA = "0xC3054C", Offset = "0xC3054C", VA = "0xC3054C")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6002880")]
		[Address(RVA = "0xC304CC", Offset = "0xC304CC", VA = "0xC304CC")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0xC305A4", Offset = "0xC305A4", VA = "0xC305A4")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002882")]
		[Address(RVA = "0xC30614", Offset = "0xC30614", VA = "0xC30614")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002883")]
		[Address(RVA = "0xC30684", Offset = "0xC30684", VA = "0xC30684")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002884")]
		[Address(RVA = "0xC2F7D8", Offset = "0xC2F7D8", VA = "0xC2F7D8")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6002885")]
		[Address(RVA = "0xC2F8A0", Offset = "0xC2F8A0", VA = "0xC2F8A0")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6002886")]
		[Address(RVA = "0xC2F968", Offset = "0xC2F968", VA = "0xC2F968")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6002887")]
		[Address(RVA = "0xC2FAF8", Offset = "0xC2FAF8", VA = "0xC2FAF8")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6002888")]
		[Address(RVA = "0xC2FA30", Offset = "0xC2FA30", VA = "0xC2FA30")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6002889")]
		[Address(RVA = "0xC306F4", Offset = "0xC306F4", VA = "0xC306F4")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0xC307E4", Offset = "0xC307E4", VA = "0xC307E4")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0xC3085C", Offset = "0xC3085C", VA = "0xC3085C")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x600288D")]
		[Address(RVA = "0xC308D4", Offset = "0xC308D4", VA = "0xC308D4")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x20006B0")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x60028A4")]
		[Address(RVA = "0xC30B6C", Offset = "0xC30B6C", VA = "0xC30B6C")]
		private void Update()
		{
		}

		[Token(Token = "0x60028A5")]
		[Address(RVA = "0xC30B70", Offset = "0xC30B70", VA = "0xC30B70")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x60028A6")]
		[Address(RVA = "0xC30BE0", Offset = "0xC30BE0", VA = "0xC30BE0")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x20006B1")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x20006B2")]
		public enum AxisOption
		{
			[Token(Token = "0x40022E5")]
			Both,
			[Token(Token = "0x40022E6")]
			OnlyHorizontal,
			[Token(Token = "0x40022E7")]
			OnlyVertical
		}

		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x40022DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40022DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40022DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40022E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x40022E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x40022E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x40022E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0xC30BE8", Offset = "0xC30BE8", VA = "0xC30BE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0xC30D4C", Offset = "0xC30D4C", VA = "0xC30D4C")]
		private void Start()
		{
		}

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0xC30D7C", Offset = "0xC30D7C", VA = "0xC30D7C")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0xC30BEC", Offset = "0xC30BEC", VA = "0xC30BEC")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0xC30DDC", Offset = "0xC30DDC", VA = "0xC30DDC", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60028AC")]
		[Address(RVA = "0xC30F28", Offset = "0xC30F28", VA = "0xC30F28", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0xC30F64", Offset = "0xC30F64", VA = "0xC30F64", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60028AE")]
		[Address(RVA = "0xC30F68", Offset = "0xC30F68", VA = "0xC30F68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60028AF")]
		[Address(RVA = "0xC30FA8", Offset = "0xC30FA8", VA = "0xC30FA8")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x20006B3")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x60028B0")]
		[Address(RVA = "0xC31034", Offset = "0xC31034", VA = "0xC31034")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0xC31044", Offset = "0xC31044", VA = "0xC31044")]
		private void Start()
		{
		}

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0xC3103C", Offset = "0xC3103C", VA = "0xC3103C")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0xC3114C", Offset = "0xC3114C", VA = "0xC3114C")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0xC314C4", Offset = "0xC314C4", VA = "0xC314C4")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x20006B4")]
	[RequireComponent(typeof(Image))]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x20006B5")]
		public enum AxisOption
		{
			[Token(Token = "0x40022FB")]
			Both,
			[Token(Token = "0x40022FC")]
			OnlyHorizontal,
			[Token(Token = "0x40022FD")]
			OnlyVertical
		}

		[Token(Token = "0x20006B6")]
		public enum ControlStyle
		{
			[Token(Token = "0x40022FF")]
			Absolute,
			[Token(Token = "0x4002300")]
			Relative,
			[Token(Token = "0x4002301")]
			Swipe
		}

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x40022E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x40022EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40022EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40022EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x40022ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x40022EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40022EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x40022F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0xC314CC", Offset = "0xC314CC", VA = "0xC314CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0xC31630", Offset = "0xC31630", VA = "0xC31630")]
		private void Start()
		{
		}

		[Token(Token = "0x60028B7")]
		[Address(RVA = "0xC314D0", Offset = "0xC314D0", VA = "0xC314D0")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60028B8")]
		[Address(RVA = "0xC316B8", Offset = "0xC316B8", VA = "0xC316B8")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60028B9")]
		[Address(RVA = "0xC317B8", Offset = "0xC317B8", VA = "0xC317B8", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60028BA")]
		[Address(RVA = "0xC317F0", Offset = "0xC317F0", VA = "0xC317F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0xC319C8", Offset = "0xC319C8", VA = "0xC319C8", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0xC31A28", Offset = "0xC31A28", VA = "0xC31A28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0xC31AE8", Offset = "0xC31AE8", VA = "0xC31AE8")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x20006B7")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000251")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x60028BE")]
			[Address(RVA = "0xC31B7C", Offset = "0xC31B7C", VA = "0xC31B7C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60028BF")]
			[Address(RVA = "0xC31B88", Offset = "0xC31B88", VA = "0xC31B88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0xC2FCF0", Offset = "0xC2FCF0", VA = "0xC2FCF0")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028C1")]
		[Address(RVA = "0xC2FDB0", Offset = "0xC2FDB0", VA = "0xC2FDB0")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028C2")]
		[Address(RVA = "0xC2FE08", Offset = "0xC2FE08", VA = "0xC2FE08")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x60028C3")]
		[Address(RVA = "0xC30008", Offset = "0xC30008", VA = "0xC30008")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60028C4")]
		[Address(RVA = "0xC30258", Offset = "0xC30258", VA = "0xC30258")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60028C5")]
		[Address(RVA = "0xC30350", Offset = "0xC30350", VA = "0xC30350")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60028C6")]
		[Address(RVA = "0xC303E0", Offset = "0xC303E0", VA = "0xC303E0")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60028C7")]
		[Address(RVA = "0xC30854", Offset = "0xC30854", VA = "0xC30854")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60028C8")]
		[Address(RVA = "0xC308CC", Offset = "0xC308CC", VA = "0xC308CC")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60028C9")]
		[Address(RVA = "0xC30944", Offset = "0xC30944", VA = "0xC30944")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60028CA")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60028CB")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60028CC")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60028CD")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60028CE")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60028CF")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60028D0")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60028D1")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60028D2")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60028D3")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60028D4")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0xC31B94", Offset = "0xC31B94", VA = "0xC31B94")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x20006B8")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x60028D6")]
		[Address(RVA = "0xC31CBC", Offset = "0xC31CBC", VA = "0xC31CBC")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0xC31D6C", Offset = "0xC31D6C", VA = "0xC31D6C")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0xC31E14", Offset = "0xC31E14", VA = "0xC31E14", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0xC31EAC", Offset = "0xC31EAC", VA = "0xC31EAC", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60028DA")]
		[Address(RVA = "0xC31F60", Offset = "0xC31F60", VA = "0xC31F60", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60028DB")]
		[Address(RVA = "0xC32008", Offset = "0xC32008", VA = "0xC32008", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60028DC")]
		[Address(RVA = "0xC320A4", Offset = "0xC320A4", VA = "0xC320A4", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60028DD")]
		[Address(RVA = "0xC32140", Offset = "0xC32140", VA = "0xC32140", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60028DE")]
		[Address(RVA = "0xC321D8", Offset = "0xC321D8", VA = "0xC321D8", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60028DF")]
		[Address(RVA = "0xC3227C", Offset = "0xC3227C", VA = "0xC3227C", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E0")]
		[Address(RVA = "0xC32328", Offset = "0xC32328", VA = "0xC32328", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E1")]
		[Address(RVA = "0xC323D4", Offset = "0xC323D4", VA = "0xC323D4", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E2")]
		[Address(RVA = "0xC3246C", Offset = "0xC3246C", VA = "0xC3246C", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60028E3")]
		[Address(RVA = "0xC2FC48", Offset = "0xC2FC48", VA = "0xC2FC48")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x20006B9")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x60028E4")]
		[Address(RVA = "0xC32478", Offset = "0xC32478", VA = "0xC32478", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60028E5")]
		[Address(RVA = "0xC3248C", Offset = "0xC3248C", VA = "0xC3248C", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E6")]
		[Address(RVA = "0xC32498", Offset = "0xC32498", VA = "0xC32498", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E7")]
		[Address(RVA = "0xC324A4", Offset = "0xC324A4", VA = "0xC324A4", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60028E8")]
		[Address(RVA = "0xC324B0", Offset = "0xC324B0", VA = "0xC324B0", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60028E9")]
		[Address(RVA = "0xC32500", Offset = "0xC32500", VA = "0xC32500", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60028EA")]
		[Address(RVA = "0xC32550", Offset = "0xC32550", VA = "0xC32550", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60028EB")]
		[Address(RVA = "0xC325A0", Offset = "0xC325A0", VA = "0xC325A0", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60028EC")]
		[Address(RVA = "0xC325F0", Offset = "0xC325F0", VA = "0xC325F0", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60028ED")]
		[Address(RVA = "0xC32640", Offset = "0xC32640", VA = "0xC32640", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60028EE")]
		[Address(RVA = "0xC32690", Offset = "0xC32690", VA = "0xC32690", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60028EF")]
		[Address(RVA = "0xC32698", Offset = "0xC32698", VA = "0xC32698")]
		public StandaloneInput()
		{
		}
	}
}
namespace ExitGames.Demos.DemoPunVoice
{
	[Token(Token = "0x20006BA")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(PhotonView))]
	[RequireComponent(typeof(Animator))]
	public abstract class BaseController : MonoBehaviour
	{
		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera ControllerCamera;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody rigidBody;

		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Animator animator;

		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform camTrans;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float h;

		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float v;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float speed;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float cameraDistance;

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0xC326A0", Offset = "0xC326A0", VA = "0xC326A0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0xC328A8", Offset = "0xC328A8", VA = "0xC328A8", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0xC329CC", Offset = "0xC329CC", VA = "0xC329CC", Slot = "6")]
		protected virtual void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x60028F3")]
		[Address(RVA = "0xC32A74", Offset = "0xC32A74", VA = "0xC32A74", Slot = "7")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60028F4")]
		[Address(RVA = "0xC32B04", Offset = "0xC32B04", VA = "0xC32B04", Slot = "8")]
		protected virtual void Init()
		{
		}

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0xC32B94", Offset = "0xC32B94", VA = "0xC32B94", Slot = "9")]
		protected virtual void SetCamera()
		{
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0xC32C40", Offset = "0xC32C40", VA = "0xC32C40", Slot = "10")]
		protected virtual void UpdateAnimator(float h, float v)
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0xC32CB8", Offset = "0xC32CB8", VA = "0xC32CB8", Slot = "11")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0xC32DB4", Offset = "0xC32DB4", VA = "0xC32DB4", Slot = "12")]
		protected virtual void ShowCamera(Camera camera)
		{
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0xC32E44", Offset = "0xC32E44", VA = "0xC32E44", Slot = "13")]
		protected virtual void HideCamera(Camera camera)
		{
		}

		[Token(Token = "0x60028FA")]
		protected abstract void Move(float h, float v);

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0xC32ED4", Offset = "0xC32ED4", VA = "0xC32ED4")]
		protected BaseController()
		{
		}
	}
	[Token(Token = "0x20006BB")]
	[RequireComponent(typeof(UnityEngine.UI.Toggle))]
	[DisallowMultipleComponent]
	public class BetterToggle : MonoBehaviour
	{
		[Token(Token = "0x20006BC")]
		public delegate void OnToggle(UnityEngine.UI.Toggle toggle);

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Toggle toggle;

		[Token(Token = "0x14000109")]
		public static event OnToggle ToggleValueChanged
		{
			[Token(Token = "0x60028FC")]
			[Address(RVA = "0xC32EE4", Offset = "0xC32EE4", VA = "0xC32EE4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028FD")]
			[Address(RVA = "0xC32F9C", Offset = "0xC32F9C", VA = "0xC32F9C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0xC33054", Offset = "0xC33054", VA = "0xC33054")]
		private void Start()
		{
		}

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0xC33130", Offset = "0xC33130", VA = "0xC33130")]
		public void OnToggleValueChanged()
		{
		}

		[Token(Token = "0x6002900")]
		[Address(RVA = "0xC3319C", Offset = "0xC3319C", VA = "0xC3319C")]
		public BetterToggle()
		{
		}
	}
	[Token(Token = "0x20006BD")]
	public class ChangePOV : MonoBehaviour, IMatchmakingCallbacks
	{
		[Token(Token = "0x20006BE")]
		public delegate void OnCameraChanged(Camera newCamera);

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FirstPersonController firstPersonController;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ThirdPersonController thirdPersonController;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OrthographicController orthographicController;

		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialCameraPosition;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion initialCameraRotation;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera defaultCamera;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject ButtonsHolder;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private UnityEngine.UI.Button FirstPersonCamActivator;

		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private UnityEngine.UI.Button ThirdPersonCamActivator;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private UnityEngine.UI.Button OrthographicCamActivator;

		[Token(Token = "0x1400010A")]
		public static event OnCameraChanged CameraChanged
		{
			[Token(Token = "0x6002906")]
			[Address(RVA = "0xC327F0", Offset = "0xC327F0", VA = "0xC327F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002907")]
			[Address(RVA = "0xC32914", Offset = "0xC32914", VA = "0xC32914")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002908")]
		[Address(RVA = "0xC33324", Offset = "0xC33324", VA = "0xC33324")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002909")]
		[Address(RVA = "0xC33568", Offset = "0xC33568", VA = "0xC33568")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600290A")]
		[Address(RVA = "0xC336C8", Offset = "0xC336C8", VA = "0xC336C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600290B")]
		[Address(RVA = "0xC338EC", Offset = "0xC338EC", VA = "0xC338EC")]
		private void OnCharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x600290C")]
		[Address(RVA = "0xC339F4", Offset = "0xC339F4", VA = "0xC339F4")]
		private void FirstPersonMode()
		{
		}

		[Token(Token = "0x600290D")]
		[Address(RVA = "0xC33B78", Offset = "0xC33B78", VA = "0xC33B78")]
		private void ThirdPersonMode()
		{
		}

		[Token(Token = "0x600290E")]
		[Address(RVA = "0xC33B80", Offset = "0xC33B80", VA = "0xC33B80")]
		private void OrthographicMode()
		{
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0xC339FC", Offset = "0xC339FC", VA = "0xC339FC")]
		private void ToggleMode(BaseController controller)
		{
		}

		[Token(Token = "0x6002910")]
		[Address(RVA = "0xC33B88", Offset = "0xC33B88", VA = "0xC33B88")]
		private void BroadcastChange(Camera camera)
		{
		}

		[Token(Token = "0x6002911")]
		[Address(RVA = "0xC33C2C", Offset = "0xC33C2C", VA = "0xC33C2C", Slot = "4")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6002912")]
		[Address(RVA = "0xC33C30", Offset = "0xC33C30", VA = "0xC33C30", Slot = "5")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6002913")]
		[Address(RVA = "0xC33C34", Offset = "0xC33C34", VA = "0xC33C34", Slot = "6")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002914")]
		[Address(RVA = "0xC33C38", Offset = "0xC33C38", VA = "0xC33C38", Slot = "7")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002915")]
		[Address(RVA = "0xC33C3C", Offset = "0xC33C3C", VA = "0xC33C3C", Slot = "8")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002916")]
		[Address(RVA = "0xC33C40", Offset = "0xC33C40", VA = "0xC33C40", Slot = "9")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002917")]
		[Address(RVA = "0xC33C44", Offset = "0xC33C44", VA = "0xC33C44", Slot = "10")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6002918")]
		[Address(RVA = "0xC33D0C", Offset = "0xC33D0C", VA = "0xC33D0C")]
		public ChangePOV()
		{
		}
	}
	[Token(Token = "0x20006BF")]
	public class CharacterInstantiation : MonoBehaviourPunCallbacks, IOnEventCallback
	{
		[Token(Token = "0x20006C0")]
		public enum SpawnSequence
		{
			[Token(Token = "0x400232A")]
			Connection,
			[Token(Token = "0x400232B")]
			Random,
			[Token(Token = "0x400232C")]
			RoundRobin
		}

		[Token(Token = "0x20006C1")]
		public delegate void OnCharacterInstantiated(GameObject character);

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform SpawnPosition;

		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PositionOffset;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] PrefabsToInstantiate;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Transform> SpawnPoints;

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool AutoSpawn;

		[Token(Token = "0x4002320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool UseRandomOffset;

		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SpawnSequence Sequence;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private byte manualInstantiationEventCode;

		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected int lastUsedSpawnPointIndex;

		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool manualInstantiation;

		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		private bool differentPrefabs;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private string localPrefabSuffix;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string remotePrefabSuffix;

		[Token(Token = "0x1400010B")]
		public static event OnCharacterInstantiated CharacterInstantiated
		{
			[Token(Token = "0x600291D")]
			[Address(RVA = "0xC334B0", Offset = "0xC334B0", VA = "0xC334B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600291E")]
			[Address(RVA = "0xC33610", Offset = "0xC33610", VA = "0xC33610")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0xC33D54", Offset = "0xC33D54", VA = "0xC33D54", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0xC33F68", Offset = "0xC33F68", VA = "0xC33F68")]
		private void ManualInstantiation(int index, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0xC34494", Offset = "0xC34494", VA = "0xC34494", Slot = "54")]
		public void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x6002922")]
		[Address(RVA = "0xC347F4", Offset = "0xC347F4", VA = "0xC347F4", Slot = "55")]
		protected virtual void GetSpawnPoint(out Vector3 spawnPos, out Quaternion spawnRot)
		{
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0xC34A0C", Offset = "0xC34A0C", VA = "0xC34A0C", Slot = "56")]
		protected virtual Transform GetSpawnPoint()
		{
			return null;
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0xC34B2C", Offset = "0xC34B2C", VA = "0xC34B2C")]
		public CharacterInstantiation()
		{
		}
	}
	[Token(Token = "0x20006C2")]
	public class FirstPersonController : BaseController
	{
		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MouseLookHelper mouseLook;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float oldYRotation;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion velRotation;

		[Token(Token = "0x17000252")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002929")]
			[Address(RVA = "0xC34B94", Offset = "0xC34B94", VA = "0xC34B94")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600292A")]
		[Address(RVA = "0xC34BB0", Offset = "0xC34BB0", VA = "0xC34BB0", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0xC34BF4", Offset = "0xC34BF4", VA = "0xC34BF4", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x600292C")]
		[Address(RVA = "0xC34C7C", Offset = "0xC34C7C", VA = "0xC34C7C")]
		private void Update()
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0xC34C80", Offset = "0xC34C80", VA = "0xC34C80")]
		private void RotateView()
		{
		}

		[Token(Token = "0x600292E")]
		[Address(RVA = "0xC34DA8", Offset = "0xC34DA8", VA = "0xC34DA8")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x20006C3")]
	[RequireComponent(typeof(Canvas))]
	public class Highlighter : MonoBehaviour
	{
		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Canvas canvas;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonVoiceView photonVoiceView;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image recorderSprite;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image speakerSprite;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showSpeakerLag;

		[Token(Token = "0x600292F")]
		[Address(RVA = "0xC34E24", Offset = "0xC34E24", VA = "0xC34E24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002930")]
		[Address(RVA = "0xC35074", Offset = "0xC35074", VA = "0xC35074")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0xC351F0", Offset = "0xC351F0", VA = "0xC351F0")]
		private void VoiceDemoUI_DebugToggled(bool debugMode)
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0xC351FC", Offset = "0xC351FC", VA = "0xC351FC")]
		private void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x6002933")]
		[Address(RVA = "0xC35218", Offset = "0xC35218", VA = "0xC35218")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0xC35348", Offset = "0xC35348", VA = "0xC35348")]
		private void Update()
		{
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0xC354A8", Offset = "0xC354A8", VA = "0xC354A8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002936")]
		[Address(RVA = "0xC355C0", Offset = "0xC355C0", VA = "0xC355C0")]
		public Highlighter()
		{
		}
	}
	[Token(Token = "0x20006C4")]
	public class OrthographicController : ThirdPersonController
	{
		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float smoothing;

		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 offset;

		[Token(Token = "0x6002937")]
		[Address(RVA = "0xC355C8", Offset = "0xC355C8", VA = "0xC355C8", Slot = "8")]
		protected override void Init()
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0xC355F0", Offset = "0xC355F0", VA = "0xC355F0", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0xC35660", Offset = "0xC35660", VA = "0xC35660", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x600293A")]
		[Address(RVA = "0xC357F4", Offset = "0xC357F4", VA = "0xC357F4")]
		private void CameraFollow()
		{
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0xC358C8", Offset = "0xC358C8", VA = "0xC358C8")]
		public OrthographicController()
		{
		}
	}
	[Token(Token = "0x20006C5")]
	public class ThirdPersonController : BaseController
	{
		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float movingTurnSpeed;

		[Token(Token = "0x600293C")]
		[Address(RVA = "0xC35678", Offset = "0xC35678", VA = "0xC35678", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0xC358E4", Offset = "0xC358E4", VA = "0xC358E4")]
		public ThirdPersonController()
		{
		}
	}
	[Token(Token = "0x20006C6")]
	public class VoiceDemoUI : MonoBehaviour
	{
		[Token(Token = "0x20006C7")]
		public delegate void OnDebugToggle(bool debugMode);

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text punState;

		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text voiceState;

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PunVoiceClient punVoiceClient;

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Canvas canvas;

		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.UI.Button punSwitch;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text punSwitchText;

		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.UI.Button voiceSwitch;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text voiceSwitchText;

		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UnityEngine.UI.Button calibrateButton;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text calibrateText;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text voiceDebugText;

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PhotonVoiceView recorder;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject inGameSettings;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject globalSettings;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Text devicesInfoText;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject debugGO;

		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool debugMode;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float volumeBeforeMute;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DebugLevel previousDebugLevel;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private int calibrationMilliSeconds;

		[Token(Token = "0x17000253")]
		public bool DebugMode
		{
			[Token(Token = "0x600293E")]
			[Address(RVA = "0xC358FC", Offset = "0xC358FC", VA = "0xC358FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600293F")]
			[Address(RVA = "0xC35904", Offset = "0xC35904", VA = "0xC35904")]
			set
			{
			}
		}

		[Token(Token = "0x1400010C")]
		public static event OnDebugToggle DebugToggled
		{
			[Token(Token = "0x6002940")]
			[Address(RVA = "0xC34FBC", Offset = "0xC34FBC", VA = "0xC34FBC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002941")]
			[Address(RVA = "0xC35138", Offset = "0xC35138", VA = "0xC35138")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002942")]
		[Address(RVA = "0xC35A1C", Offset = "0xC35A1C", VA = "0xC35A1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002943")]
		[Address(RVA = "0xC35A40", Offset = "0xC35A40", VA = "0xC35A40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002944")]
		[Address(RVA = "0xC35C38", Offset = "0xC35C38", VA = "0xC35C38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002945")]
		[Address(RVA = "0xC35E30", Offset = "0xC35E30", VA = "0xC35E30")]
		private void CharacterInstantiation_CharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x6002946")]
		[Address(RVA = "0xC35EE0", Offset = "0xC35EE0", VA = "0xC35EE0")]
		private void InitToggles(UnityEngine.UI.Toggle[] toggles)
		{
		}

		[Token(Token = "0x6002947")]
		[Address(RVA = "0xC362FC", Offset = "0xC362FC", VA = "0xC362FC")]
		private void BetterToggle_ToggleValueChanged(UnityEngine.UI.Toggle toggle)
		{
		}

		[Token(Token = "0x6002948")]
		[Address(RVA = "0xC36680", Offset = "0xC36680", VA = "0xC36680")]
		private void OnCameraChanged(Camera newCamera)
		{
		}

		[Token(Token = "0x6002949")]
		[Address(RVA = "0xC3669C", Offset = "0xC3669C", VA = "0xC3669C")]
		private void Start()
		{
		}

		[Token(Token = "0x600294A")]
		[Address(RVA = "0xC36C80", Offset = "0xC36C80", VA = "0xC36C80")]
		private void PunSwitchOnClick()
		{
		}

		[Token(Token = "0x600294B")]
		[Address(RVA = "0xC36D50", Offset = "0xC36D50", VA = "0xC36D50")]
		private void VoiceSwitchOnClick()
		{
		}

		[Token(Token = "0x600294C")]
		[Address(RVA = "0xC36DD0", Offset = "0xC36DD0", VA = "0xC36DD0")]
		private void CalibrateButtonOnClick()
		{
		}

		[Token(Token = "0x600294D")]
		[Address(RVA = "0xC36E84", Offset = "0xC36E84", VA = "0xC36E84")]
		private void Update()
		{
		}

		[Token(Token = "0x600294E")]
		[Address(RVA = "0xC370D8", Offset = "0xC370D8", VA = "0xC370D8")]
		private void PunClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x600294F")]
		[Address(RVA = "0xC376E0", Offset = "0xC376E0", VA = "0xC376E0")]
		private void VoiceClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x6002950")]
		[Address(RVA = "0xC3726C", Offset = "0xC3726C", VA = "0xC3726C")]
		private void UpdateUiBasedOnVoiceState(ClientState voiceClientState)
		{
		}

		[Token(Token = "0x6002951")]
		[Address(RVA = "0xC376E8", Offset = "0xC376E8", VA = "0xC376E8")]
		protected void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002952")]
		[Address(RVA = "0xC377FC", Offset = "0xC377FC", VA = "0xC377FC")]
		public VoiceDemoUI()
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos
{
	[Token(Token = "0x20006C8")]
	public class BackgroundMusicController : MonoBehaviour
	{
		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text volumeText;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Slider volumeSlider;

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float initialVolume;

		[Token(Token = "0x6002957")]
		[Address(RVA = "0xC378B8", Offset = "0xC378B8", VA = "0xC378B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002958")]
		[Address(RVA = "0xC37A00", Offset = "0xC37A00", VA = "0xC37A00")]
		private void OnVolumeChanged(float newValue)
		{
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0xC37A1C", Offset = "0xC37A1C", VA = "0xC37A1C")]
		public BackgroundMusicController()
		{
		}
	}
	[Token(Token = "0x20006C9")]
	public class SidebarToggle : MonoBehaviour
	{
		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.UI.Button sidebarButton;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform panelsHolder;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float sidebarWidth;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool sidebarOpen;

		[Token(Token = "0x600295A")]
		[Address(RVA = "0xC37A2C", Offset = "0xC37A2C", VA = "0xC37A2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0xC37AFC", Offset = "0xC37AFC", VA = "0xC37AFC")]
		[ContextMenu("ToggleSidebar")]
		private void ToggleSidebar()
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0xC37AE4", Offset = "0xC37AE4", VA = "0xC37AE4")]
		private void ToggleSidebar(bool open)
		{
		}

		[Token(Token = "0x600295D")]
		[Address(RVA = "0xC37B60", Offset = "0xC37B60", VA = "0xC37B60")]
		public SidebarToggle()
		{
		}
	}
	[Token(Token = "0x20006CA")]
	public static class UiExtensions
	{
		[Token(Token = "0x600295E")]
		[Address(RVA = "0xC37B14", Offset = "0xC37B14", VA = "0xC37B14")]
		public static void SetPosX(this RectTransform rectTransform, float x)
		{
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0xC37B78", Offset = "0xC37B78", VA = "0xC37B78")]
		public static void SetHeight(this RectTransform rectTransform, float h)
		{
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0xC37B90", Offset = "0xC37B90", VA = "0xC37B90")]
		public static void SetValue(this UnityEngine.UI.Toggle toggle, bool isOn)
		{
		}

		[Token(Token = "0x6002961")]
		[Address(RVA = "0xC37BA8", Offset = "0xC37BA8", VA = "0xC37BA8")]
		public static void SetValue(this Slider slider, float v)
		{
		}

		[Token(Token = "0x6002962")]
		[Address(RVA = "0xC37BC8", Offset = "0xC37BC8", VA = "0xC37BC8")]
		public static void SetValue(this InputField inputField, string v)
		{
		}

		[Token(Token = "0x6002963")]
		[Address(RVA = "0xC37BDC", Offset = "0xC37BDC", VA = "0xC37BDC")]
		public static void DestroyChildren(this Transform transform)
		{
		}

		[Token(Token = "0x6002964")]
		[Address(RVA = "0xC37D44", Offset = "0xC37D44", VA = "0xC37D44")]
		public static void Hide(this CanvasGroup canvasGroup, bool blockRaycasts = false, bool interactable = false)
		{
		}

		[Token(Token = "0x6002965")]
		[Address(RVA = "0xC37D94", Offset = "0xC37D94", VA = "0xC37D94")]
		public static void Show(this CanvasGroup canvasGroup, bool blockRaycasts = true, bool interactable = true)
		{
		}

		[Token(Token = "0x6002966")]
		[Address(RVA = "0xC37DE4", Offset = "0xC37DE4", VA = "0xC37DE4")]
		public static bool IsHidden(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6002967")]
		[Address(RVA = "0xC37E08", Offset = "0xC37E08", VA = "0xC37E08")]
		public static bool IsShown(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6002968")]
		[Address(RVA = "0xC37E2C", Offset = "0xC37E2C", VA = "0xC37E2C")]
		public static void SetSingleOnClickCallback(this UnityEngine.UI.Button button, UnityAction action)
		{
		}

		[Token(Token = "0x6002969")]
		[Address(RVA = "0xC37E70", Offset = "0xC37E70", VA = "0xC37E70")]
		public static void SetSingleOnValueChangedCallback(this UnityEngine.UI.Toggle toggle, UnityAction<bool> action)
		{
		}

		[Token(Token = "0x600296A")]
		[Address(RVA = "0xC37EDC", Offset = "0xC37EDC", VA = "0xC37EDC")]
		public static void SetSingleOnValueChangedCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x600296B")]
		[Address(RVA = "0xC37F48", Offset = "0xC37F48", VA = "0xC37F48")]
		public static void SetSingleOnEndEditCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x600296C")]
		[Address(RVA = "0xC37FB4", Offset = "0xC37FB4", VA = "0xC37FB4")]
		public static void SetSingleOnValueChangedCallback(this Dropdown inputField, UnityAction<int> action)
		{
		}

		[Token(Token = "0x600296D")]
		[Address(RVA = "0xC37994", Offset = "0xC37994", VA = "0xC37994")]
		public static void SetSingleOnValueChangedCallback(this Slider slider, UnityAction<float> action)
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos.DemoVoiceUI
{
	[Token(Token = "0x20006CB")]
	public class CodecSettingsUI : MonoBehaviour
	{
		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Dropdown frameDurationDropdown;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown samplingRateDropdown;

		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InputField bitrateInputField;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x400235A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<string> frameDurationOptions;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<string> samplingRateOptions;

		[Token(Token = "0x600296E")]
		[Address(RVA = "0xC38020", Offset = "0xC38020", VA = "0xC38020")]
		private void Awake()
		{
		}

		[Token(Token = "0x600296F")]
		[Address(RVA = "0xC38324", Offset = "0xC38324", VA = "0xC38324")]
		private void Update()
		{
		}

		[Token(Token = "0x6002970")]
		[Address(RVA = "0xC38344", Offset = "0xC38344", VA = "0xC38344")]
		private void OnBitrateChanged(string newBitrateString)
		{
		}

		[Token(Token = "0x6002971")]
		[Address(RVA = "0xC38390", Offset = "0xC38390", VA = "0xC38390")]
		private void OnFrameDurationChanged(int index)
		{
		}

		[Token(Token = "0x6002972")]
		[Address(RVA = "0xC383C8", Offset = "0xC383C8", VA = "0xC383C8")]
		private void OnSamplingRateChanged(int index)
		{
		}

		[Token(Token = "0x6002973")]
		[Address(RVA = "0xC381E0", Offset = "0xC381E0", VA = "0xC381E0")]
		private void InitFrameDuration()
		{
		}

		[Token(Token = "0x6002974")]
		[Address(RVA = "0xC3826C", Offset = "0xC3826C", VA = "0xC3826C")]
		private void InitSamplingRate()
		{
		}

		[Token(Token = "0x6002975")]
		[Address(RVA = "0xC382D4", Offset = "0xC382D4", VA = "0xC382D4")]
		private void InitBitrate()
		{
		}

		[Token(Token = "0x6002976")]
		[Address(RVA = "0xC38400", Offset = "0xC38400", VA = "0xC38400")]
		public CodecSettingsUI()
		{
		}
	}
	[Token(Token = "0x20006CC")]
	[RequireComponent(typeof(UnityVoiceClient), typeof(ConnectAndJoin))]
	public class DemoVoiceUI : MonoBehaviour, IInRoomCallbacks, IMatchmakingCallbacks
	{
		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text connectionStatusText;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text serverStatusText;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text roomStatusText;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text inputWarningText;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text rttText;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text rttVariationText;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text packetLossWarningText;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InputField localNicknameText;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UnityEngine.UI.Toggle debugEchoToggle;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private UnityEngine.UI.Toggle reliableTransmissionToggle;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private UnityEngine.UI.Toggle encryptionToggle;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject webRtcDspGameObject;

		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private UnityEngine.UI.Toggle aecToggle;

		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private UnityEngine.UI.Toggle aecHighPassToggle;

		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InputField reverseStreamDelayInputField;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private UnityEngine.UI.Toggle noiseSuppressionToggle;

		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private UnityEngine.UI.Toggle agcToggle;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Slider agcCompressionGainSlider;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Slider agcTargetLevelSlider;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private UnityEngine.UI.Toggle vadToggle;

		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private UnityEngine.UI.Toggle muteToggle;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private UnityEngine.UI.Toggle streamAudioClipToggle;

		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private UnityEngine.UI.Toggle audioToneToggle;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private UnityEngine.UI.Toggle dspToggle;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private UnityEngine.UI.Toggle highPassToggle;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private UnityEngine.UI.Toggle photonVadToggle;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private GameObject microphoneSetupGameObject;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private bool defaultTransmitEnabled;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		[SerializeField]
		private bool fullScreen;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private InputField roomNameInputField;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private int rttYellowThreshold;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private int rttRedThreshold;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private int rttVariationYellowThreshold;

		[Token(Token = "0x400237D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private int rttVariationRedThreshold;

		[Token(Token = "0x400237E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private GameObject compressionGainGameObject;

		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GameObject targetLevelGameObject;

		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Text compressionGainText;

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Text targetLevelText;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GameObject aecOptionsGameObject;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Transform RemoteVoicesPanel;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected UnityVoiceClient voiceConnection;

		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private WebRtcAudioDsp voiceAudioPreprocessor;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private ConnectAndJoin connectAndJoin;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly Color warningColor;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly Color okColor;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly Color redColor;

		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private readonly Color defaultColor;

		[Token(Token = "0x6002978")]
		[Address(RVA = "0xC389B8", Offset = "0xC389B8", VA = "0xC389B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002979")]
		[Address(RVA = "0xC39650", Offset = "0xC39650", VA = "0xC39650", Slot = "16")]
		protected virtual void SetDefaults()
		{
		}

		[Token(Token = "0x600297A")]
		[Address(RVA = "0xC3967C", Offset = "0xC3967C", VA = "0xC3967C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600297B")]
		[Address(RVA = "0xC39714", Offset = "0xC39714", VA = "0xC39714")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600297C")]
		[Address(RVA = "0xC395B8", Offset = "0xC395B8", VA = "0xC395B8")]
		private void GetSavedNickname()
		{
		}

		[Token(Token = "0x600297D")]
		[Address(RVA = "0xC397AC", Offset = "0xC397AC", VA = "0xC397AC", Slot = "17")]
		protected virtual void OnSpeakerCreated(Speaker speaker)
		{
		}

		[Token(Token = "0x600297E")]
		[Address(RVA = "0xC398DC", Offset = "0xC398DC", VA = "0xC398DC")]
		private void OnRemoteVoiceRemove(Speaker speaker)
		{
		}

		[Token(Token = "0x600297F")]
		[Address(RVA = "0xC39980", Offset = "0xC39980", VA = "0xC39980")]
		private void ToggleMute(bool isOn)
		{
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0xC39BC8", Offset = "0xC39BC8", VA = "0xC39BC8", Slot = "18")]
		protected virtual void ToggleIsRecording(bool isRecording)
		{
		}

		[Token(Token = "0x6002981")]
		[Address(RVA = "0xC39BF0", Offset = "0xC39BF0", VA = "0xC39BF0")]
		private void ToggleDebugEcho(bool isOn)
		{
		}

		[Token(Token = "0x6002982")]
		[Address(RVA = "0xC39C18", Offset = "0xC39C18", VA = "0xC39C18")]
		private void ToggleReliable(bool isOn)
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0xC39C40", Offset = "0xC39C40", VA = "0xC39C40")]
		private void ToggleEncryption(bool isOn)
		{
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0xC39C68", Offset = "0xC39C68", VA = "0xC39C68")]
		private void ToggleAEC(bool isOn)
		{
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0xC39CAC", Offset = "0xC39CAC", VA = "0xC39CAC")]
		private void ToggleNoiseSuppression(bool isOn)
		{
		}

		[Token(Token = "0x6002986")]
		[Address(RVA = "0xC39CCC", Offset = "0xC39CCC", VA = "0xC39CCC")]
		private void ToggleAGC(bool isOn)
		{
		}

		[Token(Token = "0x6002987")]
		[Address(RVA = "0xC39D28", Offset = "0xC39D28", VA = "0xC39D28")]
		private void ToggleVAD(bool isOn)
		{
		}

		[Token(Token = "0x6002988")]
		[Address(RVA = "0xC39D48", Offset = "0xC39D48", VA = "0xC39D48")]
		private void ToggleHighPass(bool isOn)
		{
		}

		[Token(Token = "0x6002989")]
		[Address(RVA = "0xC39D68", Offset = "0xC39D68", VA = "0xC39D68")]
		private void ToggleDsp(bool isOn)
		{
		}

		[Token(Token = "0x600298A")]
		[Address(RVA = "0xC39DC4", Offset = "0xC39DC4", VA = "0xC39DC4")]
		private void ToggleAudioClipStreaming(bool isOn)
		{
		}

		[Token(Token = "0x600298B")]
		[Address(RVA = "0xC39E78", Offset = "0xC39E78", VA = "0xC39E78")]
		private void ToggleAudioToneFactory(bool isOn)
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0xC39F2C", Offset = "0xC39F2C", VA = "0xC39F2C")]
		private void TogglePhotonVAD(bool isOn)
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0xC39F54", Offset = "0xC39F54", VA = "0xC39F54")]
		private void ToggleAecHighPass(bool isOn)
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0xC39F74", Offset = "0xC39F74", VA = "0xC39F74")]
		private void OnAgcCompressionGainChanged(float agcCompressionGain)
		{
		}

		[Token(Token = "0x600298F")]
		[Address(RVA = "0xC3A044", Offset = "0xC3A044", VA = "0xC3A044")]
		private void OnAgcTargetLevelChanged(float agcTargetLevel)
		{
		}

		[Token(Token = "0x6002990")]
		[Address(RVA = "0xC3A114", Offset = "0xC3A114", VA = "0xC3A114")]
		private void OnReverseStreamDelayChanged(string newReverseStreamString)
		{
		}

		[Token(Token = "0x6002991")]
		[Address(RVA = "0xC3A1A0", Offset = "0xC3A1A0", VA = "0xC3A1A0")]
		private void UpdateSyncedNickname(string nickname)
		{
		}

		[Token(Token = "0x6002992")]
		[Address(RVA = "0xC3A22C", Offset = "0xC3A22C", VA = "0xC3A22C")]
		private void JoinOrCreateRoom(string roomName)
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0xC3A35C", Offset = "0xC3A35C", VA = "0xC3A35C", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0xC3A8B0", Offset = "0xC3A8B0", VA = "0xC3A8B0")]
		private void SetTextColor(int textValue, Text text, int yellowThreshold, int redThreshold)
		{
		}

		[Token(Token = "0x6002995")]
		[Address(RVA = "0xC3A878", Offset = "0xC3A878", VA = "0xC3A878")]
		private void ResetTextColor(Text text)
		{
		}

		[Token(Token = "0x6002996")]
		[Address(RVA = "0xC38C78", Offset = "0xC38C78", VA = "0xC38C78")]
		private void InitUiCallbacks()
		{
		}

		[Token(Token = "0x6002997")]
		[Address(RVA = "0xC391F4", Offset = "0xC391F4", VA = "0xC391F4")]
		private void InitUiValues()
		{
		}

		[Token(Token = "0x6002998")]
		[Address(RVA = "0xC3A9F8", Offset = "0xC3A9F8", VA = "0xC3A9F8")]
		private void SetRoomDebugText()
		{
		}

		[Token(Token = "0x6002999")]
		[Address(RVA = "0xC3ACDC", Offset = "0xC3ACDC", VA = "0xC3ACDC", Slot = "20")]
		protected virtual void OnActorPropertiesChanged(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x600299A")]
		[Address(RVA = "0xC3AD48", Offset = "0xC3AD48", VA = "0xC3AD48")]
		protected void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600299B")]
		[Address(RVA = "0xC3AD70", Offset = "0xC3AD70", VA = "0xC3AD70", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
		{
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0xC3AD74", Offset = "0xC3AD74", VA = "0xC3AD74", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
		{
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0xC3AD78", Offset = "0xC3AD78", VA = "0xC3AD78", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0xC3AD7C", Offset = "0xC3AD7C", VA = "0xC3AD7C", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0xC3AD8C", Offset = "0xC3AD8C", VA = "0xC3AD8C", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
		{
		}

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0xC3AD90", Offset = "0xC3AD90", VA = "0xC3AD90", Slot = "9")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0xC3AD94", Offset = "0xC3AD94", VA = "0xC3AD94", Slot = "10")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
		{
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0xC3AD98", Offset = "0xC3AD98", VA = "0xC3AD98", Slot = "11")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0xC3AD9C", Offset = "0xC3AD9C", VA = "0xC3AD9C", Slot = "12")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0xC3ADA0", Offset = "0xC3ADA0", VA = "0xC3ADA0", Slot = "13")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0xC3ADA4", Offset = "0xC3ADA4", VA = "0xC3ADA4", Slot = "14")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0xC3ADA8", Offset = "0xC3ADA8", VA = "0xC3ADA8", Slot = "15")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
		{
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0xC3ADCC", Offset = "0xC3ADCC", VA = "0xC3ADCC")]
		public DemoVoiceUI()
		{
		}
	}
	[Token(Token = "0x20006CE")]
	public struct MicRef
	{
		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Recorder.MicType MicType;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly DeviceInfo Device;

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0xC3AF08", Offset = "0xC3AF08", VA = "0xC3AF08")]
		public MicRef(Recorder.MicType micType, DeviceInfo device)
		{
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0xC3AF30", Offset = "0xC3AF30", VA = "0xC3AF30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20006CF")]
	public class MicrophoneDropdownFiller : VoiceComponent
	{
		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<MicRef> micOptions;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Dropdown micDropdown;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[FormerlySerializedAs("RefreshButton")]
		private GameObject refreshButton;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IDeviceEnumerator unityMicEnum;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IDeviceEnumerator photonMicEnum;

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0xC3AF7C", Offset = "0xC3AF7C", VA = "0xC3AF7C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60029AE")]
		[Address(RVA = "0xC3B1D4", Offset = "0xC3B1D4", VA = "0xC3B1D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0xC3B254", Offset = "0xC3B254", VA = "0xC3B254")]
		private void OnMicrophonePermissionCallback(bool granted)
		{
		}

		[Token(Token = "0x60029B0")]
		[Address(RVA = "0xC3B258", Offset = "0xC3B258", VA = "0xC3B258")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60029B1")]
		[Address(RVA = "0xC3B2D8", Offset = "0xC3B2D8", VA = "0xC3B2D8")]
		private void SetupMicDropdown()
		{
		}

		[Token(Token = "0x60029B2")]
		[Address(RVA = "0xC3C0A0", Offset = "0xC3C0A0", VA = "0xC3C0A0")]
		private void MicDropdownValueChanged(MicRef mic)
		{
		}

		[Token(Token = "0x60029B3")]
		[Address(RVA = "0xC3C124", Offset = "0xC3C124", VA = "0xC3C124")]
		private void SetCurrentValue()
		{
		}

		[Token(Token = "0x60029B4")]
		[Address(RVA = "0xC3C34C", Offset = "0xC3C34C", VA = "0xC3C34C")]
		public void PhotonMicToggled(bool on)
		{
		}

		[Token(Token = "0x60029B5")]
		[Address(RVA = "0xC3B0BC", Offset = "0xC3B0BC", VA = "0xC3B0BC")]
		public void RefreshMicrophones()
		{
		}

		[Token(Token = "0x60029B6")]
		[Address(RVA = "0xC3C3B8", Offset = "0xC3C3B8", VA = "0xC3C3B8")]
		private void PhotonVoiceCreated()
		{
		}

		[Token(Token = "0x60029B7")]
		[Address(RVA = "0xC3C3BC", Offset = "0xC3C3BC", VA = "0xC3C3BC")]
		public MicrophoneDropdownFiller()
		{
		}
	}
	[Token(Token = "0x20006D0")]
	public static class PhotonDemoExtensions
	{
		[Token(Token = "0x4002395")]
		internal const string IS_MUTED_PROPERTY_KEY = "mute";

		[Token(Token = "0x60029B9")]
		[Address(RVA = "0xC399E4", Offset = "0xC399E4", VA = "0xC399E4")]
		public static bool Mute(this Photon.Realtime.Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60029BA")]
		[Address(RVA = "0xC39AD8", Offset = "0xC39AD8", VA = "0xC39AD8")]
		public static bool Unmute(this Photon.Realtime.Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60029BB")]
		[Address(RVA = "0xC3A92C", Offset = "0xC3A92C", VA = "0xC3A92C")]
		public static bool IsMuted(this Photon.Realtime.Player player)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20006D1")]
	[RequireComponent(typeof(Speaker))]
	public class RemoteSpeakerUI : MonoBehaviour, IInRoomCallbacks
	{
		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text nameText;

		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Image remoteIsMuting;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image remoteIsTalking;

		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InputField playDelayInputField;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Slider volumeSlider;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Speaker speaker;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VoiceConnection voiceConnection;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected LoadBalancingClient loadBalancingClient;

		[Token(Token = "0x17000254")]
		protected Photon.Realtime.Player Actor
		{
			[Token(Token = "0x60029BC")]
			[Address(RVA = "0xC3C44C", Offset = "0xC3C44C", VA = "0xC3C44C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029BD")]
		[Address(RVA = "0xC3C498", Offset = "0xC3C498", VA = "0xC3C498", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60029BE")]
		[Address(RVA = "0xC3C7A0", Offset = "0xC3C7A0", VA = "0xC3C7A0")]
		private void OnVolumeChanged(float newValue)
		{
		}

		[Token(Token = "0x60029BF")]
		[Address(RVA = "0xC3C7BC", Offset = "0xC3C7BC", VA = "0xC3C7BC")]
		private void OnPlayDelayChanged(string str)
		{
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0xC3C8D8", Offset = "0xC3C8D8", VA = "0xC3C8D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0xC3C9B8", Offset = "0xC3C9B8", VA = "0xC3C9B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60029C2")]
		[Address(RVA = "0xC3C68C", Offset = "0xC3C68C", VA = "0xC3C68C")]
		private void SetNickname()
		{
		}

		[Token(Token = "0x60029C3")]
		[Address(RVA = "0xC3C778", Offset = "0xC3C778", VA = "0xC3C778")]
		private void SetMutedState()
		{
		}

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0xC3C9D0", Offset = "0xC3C9D0", VA = "0xC3C9D0", Slot = "10")]
		protected virtual void SetMutedState(bool isMuted)
		{
		}

		[Token(Token = "0x60029C5")]
		[Address(RVA = "0xC3C9F0", Offset = "0xC3C9F0", VA = "0xC3C9F0", Slot = "11")]
		protected virtual void OnActorPropertiesChanged(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60029C6")]
		[Address(RVA = "0xC3CA40", Offset = "0xC3CA40", VA = "0xC3CA40", Slot = "12")]
		public virtual void Init(VoiceConnection vC)
		{
		}

		[Token(Token = "0x60029C7")]
		[Address(RVA = "0xC3CA98", Offset = "0xC3CA98", VA = "0xC3CA98", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
		{
		}

		[Token(Token = "0x60029C8")]
		[Address(RVA = "0xC3CA9C", Offset = "0xC3CA9C", VA = "0xC3CA9C", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
		{
		}

		[Token(Token = "0x60029C9")]
		[Address(RVA = "0xC3CAA0", Offset = "0xC3CAA0", VA = "0xC3CAA0", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60029CA")]
		[Address(RVA = "0xC3CAA4", Offset = "0xC3CAA4", VA = "0xC3CAA4", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60029CB")]
		[Address(RVA = "0xC3CAB0", Offset = "0xC3CAB0", VA = "0xC3CAB0", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
		{
		}

		[Token(Token = "0x60029CC")]
		[Address(RVA = "0xC3CAB4", Offset = "0xC3CAB4", VA = "0xC3CAB4")]
		public RemoteSpeakerUI()
		{
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x20006D2")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x60029CD")]
		[Address(RVA = "0xC3CABC", Offset = "0xC3CABC", VA = "0xC3CABC")]
		public void Start()
		{
		}

		[Token(Token = "0x60029CE")]
		[Address(RVA = "0xC3CC48", Offset = "0xC3CC48", VA = "0xC3CC48")]
		public void Update()
		{
		}

		[Token(Token = "0x60029CF")]
		[Address(RVA = "0xC3CD7C", Offset = "0xC3CD7C", VA = "0xC3CD7C", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x60029D0")]
		[Address(RVA = "0xC3CD80", Offset = "0xC3CD80", VA = "0xC3CD80", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60029D1")]
		[Address(RVA = "0xC3CE04", Offset = "0xC3CE04", VA = "0xC3CE04", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60029D2")]
		[Address(RVA = "0xC3CEF0", Offset = "0xC3CEF0", VA = "0xC3CEF0", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x60029D3")]
		[Address(RVA = "0xC3CEF4", Offset = "0xC3CEF4", VA = "0xC3CEF4", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x60029D4")]
		[Address(RVA = "0xC3CEF8", Offset = "0xC3CEF8", VA = "0xC3CEF8", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0xC3CFD4", Offset = "0xC3CFD4", VA = "0xC3CFD4", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0xC3CFD8", Offset = "0xC3CFD8", VA = "0xC3CFD8", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0xC3CFDC", Offset = "0xC3CFDC", VA = "0xC3CFDC", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0xC3CFE0", Offset = "0xC3CFE0", VA = "0xC3CFE0", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0xC3CFE4", Offset = "0xC3CFE4", VA = "0xC3CFE4", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0xC3CFE8", Offset = "0xC3CFE8", VA = "0xC3CFE8", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0xC3CFEC", Offset = "0xC3CFEC", VA = "0xC3CFEC", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029DC")]
		[Address(RVA = "0xC3CFF0", Offset = "0xC3CFF0", VA = "0xC3CFF0", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0xC3D058", Offset = "0xC3D058", VA = "0xC3D058", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0xC3D05C", Offset = "0xC3D05C", VA = "0xC3D05C", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60029DF")]
		[Address(RVA = "0xC3D110", Offset = "0xC3D110", VA = "0xC3D110", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0xC3D114", Offset = "0xC3D114", VA = "0xC3D114")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0xC3D238", Offset = "0xC3D238", VA = "0xC3D238")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.Demo
{
	[Token(Token = "0x20006D3")]
	public static class AppSettingsExtensions
	{
		[Token(Token = "0x60029E2")]
		[Address(RVA = "0xC3D2AC", Offset = "0xC3D2AC", VA = "0xC3D2AC")]
		public static ChatAppSettings GetChatSettings(this Photon.Realtime.AppSettings appSettings)
		{
			return null;
		}
	}
	[Token(Token = "0x20006D4")]
	public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Channel;

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0xC3D3AC", Offset = "0xC3D3AC", VA = "0xC3D3AC")]
		public void SetChannel(string channel)
		{
		}

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0xC3D430", Offset = "0xC3D430", VA = "0xC3D430", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0xC3D74C", Offset = "0xC3D74C", VA = "0xC3D74C")]
		public ChannelSelector()
		{
		}
	}
	[Token(Token = "0x20006D5")]
	[ExecuteInEditMode]
	public class ChatAppIdCheckerUI : MonoBehaviour
	{
		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Description;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool WizardOpenedOnce;

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0xC3D754", Offset = "0xC3D754", VA = "0xC3D754")]
		public void Update()
		{
		}

		[Token(Token = "0x60029E7")]
		[Address(RVA = "0xC3D828", Offset = "0xC3D828", VA = "0xC3D828")]
		public ChatAppIdCheckerUI()
		{
		}
	}
	[Token(Token = "0x20006D6")]
	public class ChatGui : MonoBehaviour, IChatClientListener
	{
		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] ChannelsToJoinOnConnect;

		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] FriendsList;

		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int HistoryLengthToFetch;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string selectedChannelName;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChatClient chatClient;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected internal ChatAppSettings chatAppSettings;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject missingAppIdErrorPanel;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject ConnectingLabel;

		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform ChatPanel;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject UserIdFormPanel;

		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InputField InputFieldChat;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text CurrentChannelText;

		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.UI.Toggle ChannelToggleToInstantiate;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject FriendListUiItemtoInstantiate;

		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, UnityEngine.UI.Toggle> channelToggles;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, FriendItem> friendListItemLUT;

		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool ShowState;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Title;

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Text StateText;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Text UserIdText;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string HelpText;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int TestLength;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private byte[] testBytes;

		[Token(Token = "0x17000255")]
		public string UserName
		{
			[Token(Token = "0x60029E8")]
			[Address(RVA = "0xC3D830", Offset = "0xC3D830", VA = "0xC3D830")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60029E9")]
			[Address(RVA = "0xC3D838", Offset = "0xC3D838", VA = "0xC3D838")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0xC3D840", Offset = "0xC3D840", VA = "0xC3D840")]
		public void Start()
		{
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0xC3DB04", Offset = "0xC3DB04", VA = "0xC3DB04")]
		public void Connect()
		{
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0xC3DC98", Offset = "0xC3DC98", VA = "0xC3DC98")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60029ED")]
		[Address(RVA = "0xC3DCB0", Offset = "0xC3DCB0", VA = "0xC3DCB0")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60029EE")]
		[Address(RVA = "0xC3DCC8", Offset = "0xC3DCC8", VA = "0xC3DCC8")]
		public void Update()
		{
		}

		[Token(Token = "0x60029EF")]
		[Address(RVA = "0xC3DD98", Offset = "0xC3DD98", VA = "0xC3DD98")]
		public void OnEnterSend()
		{
		}

		[Token(Token = "0x60029F0")]
		[Address(RVA = "0xC3E894", Offset = "0xC3E894", VA = "0xC3E894")]
		public void OnClickSend()
		{
		}

		[Token(Token = "0x60029F1")]
		[Address(RVA = "0xC3DE2C", Offset = "0xC3DE2C", VA = "0xC3DE2C")]
		private void SendChatMessage(string inputLine)
		{
		}

		[Token(Token = "0x60029F2")]
		[Address(RVA = "0xC3E944", Offset = "0xC3E944", VA = "0xC3E944")]
		public void PostHelpToCurrentChannel()
		{
		}

		[Token(Token = "0x60029F3")]
		[Address(RVA = "0xC3E9E8", Offset = "0xC3E9E8", VA = "0xC3E9E8", Slot = "4")]
		public void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x60029F4")]
		[Address(RVA = "0xC3EA90", Offset = "0xC3EA90", VA = "0xC3EA90", Slot = "6")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0xC3EDCC", Offset = "0xC3EDCC", VA = "0xC3EDCC", Slot = "5")]
		public void OnDisconnected()
		{
		}

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0xC3EE50", Offset = "0xC3EE50", VA = "0xC3EE50", Slot = "7")]
		public void OnChatStateChange(ChatState state)
		{
		}

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0xC3EEE4", Offset = "0xC3EEE4", VA = "0xC3EEE4", Slot = "10")]
		public void OnSubscribed(string[] channels, bool[] results)
		{
		}

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0xC3F234", Offset = "0xC3F234", VA = "0xC3F234")]
		public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0xC3F078", Offset = "0xC3F078", VA = "0xC3F078")]
		private void InstantiateChannelButton(string channelName)
		{
		}

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0xC3EC74", Offset = "0xC3EC74", VA = "0xC3EC74")]
		private void InstantiateFriendButton(string friendId)
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0xC3F41C", Offset = "0xC3F41C", VA = "0xC3F41C", Slot = "11")]
		public void OnUnsubscribed(string[] channels)
		{
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0xC3F860", Offset = "0xC3F860", VA = "0xC3F860", Slot = "8")]
		public void OnGetMessages(string channelName, string[] senders, object[] messages)
		{
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0xC3F8A0", Offset = "0xC3F8A0", VA = "0xC3F8A0", Slot = "9")]
		public void OnPrivateMessage(string sender, object message, string channelName)
		{
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0xC3F9B4", Offset = "0xC3F9B4", VA = "0xC3F9B4", Slot = "12")]
		public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x60029FF")]
		[Address(RVA = "0xC3FCF4", Offset = "0xC3FCF4", VA = "0xC3FCF4", Slot = "13")]
		public void OnUserSubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6002A00")]
		[Address(RVA = "0xC3FE10", Offset = "0xC3FE10", VA = "0xC3FE10", Slot = "14")]
		public void OnUserUnsubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6002A01")]
		[Address(RVA = "0xC3FF2C", Offset = "0xC3FF2C", VA = "0xC3FF2C")]
		public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0xC400B4", Offset = "0xC400B4", VA = "0xC400B4")]
		public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0xC4027C", Offset = "0xC4027C", VA = "0xC4027C")]
		public void OnErrorInfo(string channel, string error, object data)
		{
		}

		[Token(Token = "0x6002A04")]
		[Address(RVA = "0xC403D0", Offset = "0xC403D0", VA = "0xC403D0")]
		public void AddMessageToSelectedChannel(string msg)
		{
		}

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0xC3D4A8", Offset = "0xC3D4A8", VA = "0xC3D4A8")]
		public void ShowChannel(string channelName)
		{
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0xC404BC", Offset = "0xC404BC", VA = "0xC404BC")]
		public void OpenDashboard()
		{
		}

		[Token(Token = "0x6002A07")]
		[Address(RVA = "0xC40500", Offset = "0xC40500", VA = "0xC40500")]
		public ChatGui()
		{
		}
	}
	[Token(Token = "0x20006D7")]
	public class FriendItem : MonoBehaviour
	{
		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text NameLabel;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text StatusLabel;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Health;

		[Token(Token = "0x17000256")]
		[HideInInspector]
		public string FriendId
		{
			[Token(Token = "0x6002A0A")]
			[Address(RVA = "0xC40684", Offset = "0xC40684", VA = "0xC40684")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A09")]
			[Address(RVA = "0xC3F3F8", Offset = "0xC3F3F8", VA = "0xC3F3F8")]
			set
			{
			}
		}

		[Token(Token = "0x6002A0B")]
		[Address(RVA = "0xC406A8", Offset = "0xC406A8", VA = "0xC406A8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002A0C")]
		[Address(RVA = "0xC3FB74", Offset = "0xC3FB74", VA = "0xC3FB74")]
		public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0xC4070C", Offset = "0xC4070C", VA = "0xC4070C")]
		public FriendItem()
		{
		}
	}
	[Token(Token = "0x20006D8")]
	public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6002A0E")]
		[Address(RVA = "0xC40714", Offset = "0xC40714", VA = "0xC40714", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A0F")]
		[Address(RVA = "0xC40734", Offset = "0xC40734", VA = "0xC40734")]
		public IgnoreUiRaycastWhenInactive()
		{
		}
	}
	[Token(Token = "0x20006D9")]
	[RequireComponent(typeof(ChatGui))]
	public class NamePickGui : MonoBehaviour
	{
		[Token(Token = "0x40023C2")]
		private const string UserNamePlayerPref = "NamePickUserName";

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChatGui chatNewComponent;

		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField idInput;

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0xC4073C", Offset = "0xC4073C", VA = "0xC4073C")]
		public void Start()
		{
		}

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0xC40808", Offset = "0xC40808", VA = "0xC40808")]
		public void EndEditOnEnter()
		{
		}

		[Token(Token = "0x6002A12")]
		[Address(RVA = "0xC40844", Offset = "0xC40844", VA = "0xC40844")]
		public void StartChat()
		{
		}

		[Token(Token = "0x6002A13")]
		[Address(RVA = "0xC40928", Offset = "0xC40928", VA = "0xC40928")]
		public NamePickGui()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x20006DA")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x6002A14")]
		[Address(RVA = "0xC40930", Offset = "0xC40930", VA = "0xC40930")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002A15")]
		[Address(RVA = "0xC40A38", Offset = "0xC40A38", VA = "0xC40A38")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x20006DB")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x6002A16")]
		[Address(RVA = "0xC40A40", Offset = "0xC40A40", VA = "0xC40A40")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A17")]
		[Address(RVA = "0xC40AAC", Offset = "0xC40AAC", VA = "0xC40AAC")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalColor;

		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color HoverColor;

		[Token(Token = "0x6002A18")]
		[Address(RVA = "0xC40AB4", Offset = "0xC40AB4", VA = "0xC40AB4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002A19")]
		[Address(RVA = "0xC40B0C", Offset = "0xC40B0C", VA = "0xC40B0C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0xC40B3C", Offset = "0xC40B3C", VA = "0xC40B3C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002A1B")]
		[Address(RVA = "0xC40B6C", Offset = "0xC40B6C", VA = "0xC40B6C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0xC40C1C", Offset = "0xC40C1C", VA = "0xC40C1C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A1D")]
		[Address(RVA = "0xC40CCC", Offset = "0xC40CCC", VA = "0xC40CCC")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x20006DD")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Toggle toggle;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0xC40CE8", Offset = "0xC40CE8", VA = "0xC40CE8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002A1F")]
		[Address(RVA = "0xC40E3C", Offset = "0xC40E3C", VA = "0xC40E3C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002A20")]
		[Address(RVA = "0xC40DD8", Offset = "0xC40DD8", VA = "0xC40DD8")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x6002A21")]
		[Address(RVA = "0xC40EE4", Offset = "0xC40EE4", VA = "0xC40EE4", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A22")]
		[Address(RVA = "0xC40F58", Offset = "0xC40F58", VA = "0xC40F58", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A23")]
		[Address(RVA = "0xC40FC8", Offset = "0xC40FC8", VA = "0xC40FC8")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace cakeslice
{
	[Token(Token = "0x20006DE")]
	public class MaterialSwitcher : MonoBehaviour
	{
		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material target;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x6002A24")]
		[Address(RVA = "0xC40FEC", Offset = "0xC40FEC", VA = "0xC40FEC")]
		public void Update()
		{
		}

		[Token(Token = "0x6002A25")]
		[Address(RVA = "0xC410DC", Offset = "0xC410DC", VA = "0xC410DC")]
		public MaterialSwitcher()
		{
		}
	}
	[Token(Token = "0x20006DF")]
	public class OutlineAnimation : MonoBehaviour
	{
		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool pingPong;

		[Token(Token = "0x6002A26")]
		[Address(RVA = "0xC410E4", Offset = "0xC410E4", VA = "0xC410E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A27")]
		[Address(RVA = "0xC410E8", Offset = "0xC410E8", VA = "0xC410E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A28")]
		[Address(RVA = "0xC416A4", Offset = "0xC416A4", VA = "0xC416A4")]
		public OutlineAnimation()
		{
		}
	}
	[Token(Token = "0x20006E0")]
	public class Rotate : MonoBehaviour
	{
		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x40023D4")]
		private const float time = 1f;

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0xC416AC", Offset = "0xC416AC", VA = "0xC416AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0xC416B0", Offset = "0xC416B0", VA = "0xC416B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0xC4176C", Offset = "0xC4176C", VA = "0xC4176C")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x20006E1")]
	public class Toggle : MonoBehaviour
	{
		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0xC41774", Offset = "0xC41774", VA = "0xC41774")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0xC41778", Offset = "0xC41778", VA = "0xC41778")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0xC41814", Offset = "0xC41814", VA = "0xC41814")]
		public Toggle()
		{
		}
	}
	[Token(Token = "0x20006E2")]
	public class LinkedSet<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20006E3")]
		public enum AddType
		{
			[Token(Token = "0x40023D8")]
			NO_CHANGE,
			[Token(Token = "0x40023D9")]
			ADDED,
			[Token(Token = "0x40023DA")]
			MOVED
		}

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LinkedList<T> list;

		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<T, LinkedListNode<T>> dictionary;

		[Token(Token = "0x6002A2F")]
		public LinkedSet()
		{
		}

		[Token(Token = "0x6002A30")]
		public LinkedSet(IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6002A31")]
		public bool Contains(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A32")]
		public bool Add(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A33")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002A34")]
		public AddType AddOrMoveToEnd(T t)
		{
			return default(AddType);
		}

		[Token(Token = "0x6002A35")]
		public bool Remove(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A36")]
		public void ExceptWith(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6002A37")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002A38")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20006E4")]
	[RequireComponent(typeof(Renderer))]
	public class Outline : MonoBehaviour
	{
		[Token(Token = "0x20006E5")]
		public enum Mode
		{
			[Token(Token = "0x40023F0")]
			OutlineAll,
			[Token(Token = "0x40023F1")]
			OutlineVisible,
			[Token(Token = "0x40023F2")]
			OutlineHidden,
			[Token(Token = "0x40023F3")]
			OutlineAndSilhouette,
			[Token(Token = "0x40023F4")]
			SilhouetteOnly
		}

		[Token(Token = "0x20006E6")]
		private class ListVector3
		{
			[Token(Token = "0x40023F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<Vector3> data;

			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0xC43694", Offset = "0xC43694", VA = "0xC43694")]
			public ListVector3()
			{
			}
		}

		[Token(Token = "0x40023DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int color;

		[Token(Token = "0x40023DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public int originalLayer;

		[Token(Token = "0x40023DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Material[] originalMaterials;

		[Token(Token = "0x40023DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Renderer Renderer;

		[Token(Token = "0x40023DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool eraseRenderer;

		[Token(Token = "0x40023E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool inited;

		[Token(Token = "0x40023E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<Mesh> registeredMeshes;

		[Token(Token = "0x40023E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[HideInInspector]
		private Mode outlineMode;

		[Token(Token = "0x40023E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private Color outlineColor;

		[Token(Token = "0x40023E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		[Range(0f, 100f)]
		private float outlineWidth;

		[Token(Token = "0x40023E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		[Header("Optional")]
		[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
		[SerializeField]
		private bool precomputeOutline;

		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[HideInInspector]
		[SerializeField]
		private bool usePreparedObject;

		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		private GameObject outlineObject;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private List<Mesh> bakeKeys;

		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		private List<ListVector3> bakeValues;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Renderer[] renderers;

		[Token(Token = "0x40023EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material outlineMaskMaterial;

		[Token(Token = "0x40023EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material outlineFillMaterial;

		[Token(Token = "0x40023ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool needsUpdate;

		[Token(Token = "0x40023EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool outLineShow;

		[Token(Token = "0x17000257")]
		public Mode OutlineMode
		{
			[Token(Token = "0x6002A3D")]
			[Address(RVA = "0xC42670", Offset = "0xC42670", VA = "0xC42670")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6002A3E")]
			[Address(RVA = "0xC42678", Offset = "0xC42678", VA = "0xC42678")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public Color OutlineColor
		{
			[Token(Token = "0x6002A3F")]
			[Address(RVA = "0xC42688", Offset = "0xC42688", VA = "0xC42688")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002A40")]
			[Address(RVA = "0xC42694", Offset = "0xC42694", VA = "0xC42694")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public float OutlineWidth
		{
			[Token(Token = "0x6002A41")]
			[Address(RVA = "0xC426A8", Offset = "0xC426A8", VA = "0xC426A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A42")]
			[Address(RVA = "0xC426B0", Offset = "0xC426B0", VA = "0xC426B0")]
			set
			{
			}
		}

		[Token(Token = "0x6002A39")]
		[Address(RVA = "0xC4181C", Offset = "0xC4181C", VA = "0xC4181C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002A3A")]
		[Address(RVA = "0xC41D0C", Offset = "0xC41D0C", VA = "0xC41D0C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002A3B")]
		[Address(RVA = "0xC41D78", Offset = "0xC41D78", VA = "0xC41D78")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A3C")]
		[Address(RVA = "0xC4187C", Offset = "0xC4187C", VA = "0xC4187C")]
		public void Init()
		{
		}

		[Token(Token = "0x6002A43")]
		[Address(RVA = "0xC41CC0", Offset = "0xC41CC0", VA = "0xC41CC0")]
		public void ShowOutline()
		{
		}

		[Token(Token = "0x6002A44")]
		[Address(RVA = "0xC41D30", Offset = "0xC41D30", VA = "0xC41D30")]
		public void HideOutline()
		{
		}

		[Token(Token = "0x6002A45")]
		[Address(RVA = "0xC426C0", Offset = "0xC426C0", VA = "0xC426C0")]
		public void ShowOutline(bool show)
		{
		}

		[Token(Token = "0x6002A46")]
		[Address(RVA = "0xC4260C", Offset = "0xC4260C", VA = "0xC4260C")]
		public void SetOutlineWidth(float val)
		{
		}

		[Token(Token = "0x6002A47")]
		[Address(RVA = "0xC426CC", Offset = "0xC426CC", VA = "0xC426CC")]
		private void GetAllRenderersFromChilds()
		{
		}

		[Token(Token = "0x6002A48")]
		[Address(RVA = "0xC42724", Offset = "0xC42724", VA = "0xC42724")]
		private void Bake(List<MeshFilter> meshFilters)
		{
		}

		[Token(Token = "0x6002A49")]
		[Address(RVA = "0xC41D7C", Offset = "0xC41D7C", VA = "0xC41D7C")]
		private void LoadSmoothNormals()
		{
		}

		[Token(Token = "0x6002A4A")]
		[Address(RVA = "0xC4369C", Offset = "0xC4369C", VA = "0xC4369C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002A4B")]
		[Address(RVA = "0xC42ADC", Offset = "0xC42ADC", VA = "0xC42ADC")]
		private List<Vector3> SmoothNormals(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6002A4C")]
		[Address(RVA = "0xC424BC", Offset = "0xC424BC", VA = "0xC424BC")]
		private void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6002A4D")]
		[Address(RVA = "0xC438C4", Offset = "0xC438C4", VA = "0xC438C4")]
		public Outline()
		{
		}
	}
	[Token(Token = "0x20006E8")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Camera))]
	public class OutlineEffect : MonoBehaviour
	{
		[Token(Token = "0x40023F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static OutlineEffect m_instance;

		[Token(Token = "0x40023FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LinkedSet<Outline> outlines;

		[Token(Token = "0x40023FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 6f)]
		public float lineThickness;

		[Token(Token = "0x40023FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 10f)]
		public float lineIntensity;

		[Token(Token = "0x40023FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float fillAmount;

		[Token(Token = "0x40023FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color lineColor0;

		[Token(Token = "0x40023FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color lineColor1;

		[Token(Token = "0x4002400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color lineColor2;

		[Token(Token = "0x4002401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool additiveRendering;

		[Token(Token = "0x4002402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool backfaceCulling;

		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		[Header("These settings can affect performance!")]
		public bool cornerOutlines;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		public bool addLinesBetweenColors;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Advanced settings")]
		public bool scaleWithScreenSize;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0.1f, 0.9f)]
		public float alphaCutoff;

		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool flipY;

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Camera sourceCamera;

		[Token(Token = "0x4002409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Camera outlineCamera;

		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material outline1Material;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material outline2Material;

		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material outline3Material;

		[Token(Token = "0x400240D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material outlineEraseMaterial;

		[Token(Token = "0x400240E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Shader outlineShader;

		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Shader outlineBufferShader;

		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Material outlineShaderMaterial;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public RenderTexture renderTexture;

		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public RenderTexture extraRenderTexture;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private CommandBuffer commandBuffer;

		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Material> materialBuffer;

		[Token(Token = "0x1700025A")]
		public static OutlineEffect Instance
		{
			[Token(Token = "0x6002A54")]
			[Address(RVA = "0xC43BA4", Offset = "0xC43BA4", VA = "0xC43BA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A55")]
		[Address(RVA = "0xC43CE0", Offset = "0xC43CE0", VA = "0xC43CE0")]
		private OutlineEffect()
		{
		}

		[Token(Token = "0x6002A56")]
		[Address(RVA = "0xC43E0C", Offset = "0xC43E0C", VA = "0xC43E0C")]
		private Material GetMaterialFromID(int ID)
		{
			return null;
		}

		[Token(Token = "0x6002A57")]
		[Address(RVA = "0xC43E34", Offset = "0xC43E34", VA = "0xC43E34")]
		private Material CreateMaterial(Color emissionColor)
		{
			return null;
		}

		[Token(Token = "0x6002A58")]
		[Address(RVA = "0xC43FFC", Offset = "0xC43FFC", VA = "0xC43FFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A59")]
		[Address(RVA = "0xC44054", Offset = "0xC44054", VA = "0xC44054")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A5A")]
		[Address(RVA = "0xC44798", Offset = "0xC44798", VA = "0xC44798")]
		public void OnPreRender()
		{
		}

		[Token(Token = "0x6002A5B")]
		[Address(RVA = "0xC45630", Offset = "0xC45630", VA = "0xC45630")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002A5C")]
		[Address(RVA = "0xC45634", Offset = "0xC45634", VA = "0xC45634")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0xC45960", Offset = "0xC45960", VA = "0xC45960")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0xC44380", Offset = "0xC44380", VA = "0xC44380")]
		private void CreateMaterialsIfNeeded()
		{
		}

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0xC456EC", Offset = "0xC456EC", VA = "0xC456EC")]
		private void DestroyMaterials()
		{
		}

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0xC411F8", Offset = "0xC411F8", VA = "0xC411F8")]
		public void UpdateMaterialsPublicProperties()
		{
		}

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0xC4468C", Offset = "0xC4468C", VA = "0xC4468C")]
		private void UpdateOutlineCameraFromSource()
		{
		}

		[Token(Token = "0x6002A62")]
		[Address(RVA = "0xC45A60", Offset = "0xC45A60", VA = "0xC45A60")]
		public void AddOutline(Outline outline)
		{
		}

		[Token(Token = "0x6002A63")]
		[Address(RVA = "0xC45AF0", Offset = "0xC45AF0", VA = "0xC45AF0")]
		public void RemoveOutline(Outline outline)
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x20006E9")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4002416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4002417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4002418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4002419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700025B")]
		public bool Highlight
		{
			[Token(Token = "0x6002A64")]
			[Address(RVA = "0xC45B80", Offset = "0xC45B80", VA = "0xC45B80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A65")]
			[Address(RVA = "0xC45B88", Offset = "0xC45B88", VA = "0xC45B88")]
			set
			{
			}
		}

		[Token(Token = "0x6002A66")]
		[Address(RVA = "0xC45B94", Offset = "0xC45B94", VA = "0xC45B94")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6002A67")]
		[Address(RVA = "0xC45D34", Offset = "0xC45D34", VA = "0xC45D34", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6002A68")]
		[Address(RVA = "0xC45D50", Offset = "0xC45D50", VA = "0xC45D50", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6002A69")]
		[Address(RVA = "0xC45D6C", Offset = "0xC45D6C", VA = "0xC45D6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0xC45C40", Offset = "0xC45C40", VA = "0xC45C40")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6002A6B")]
		[Address(RVA = "0xC46020", Offset = "0xC46020", VA = "0xC46020")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x20006EA")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x400241A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x400241B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x400241C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x400241D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x400241E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x400241F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4002420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700025C")]
		public bool InRange
		{
			[Token(Token = "0x6002A6D")]
			[Address(RVA = "0xC46098", Offset = "0xC46098", VA = "0xC46098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A6E")]
			[Address(RVA = "0xC460A0", Offset = "0xC460A0", VA = "0xC460A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public bool Targeted
		{
			[Token(Token = "0x6002A6F")]
			[Address(RVA = "0xC4620C", Offset = "0xC4620C", VA = "0xC4620C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A70")]
			[Address(RVA = "0xC46214", Offset = "0xC46214", VA = "0xC46214")]
			set
			{
			}
		}

		[Token(Token = "0x6002A71")]
		[Address(RVA = "0xC46220", Offset = "0xC46220", VA = "0xC46220", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002A72")]
		[Address(RVA = "0xC460AC", Offset = "0xC460AC", VA = "0xC460AC")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6002A73")]
		[Address(RVA = "0xC46410", Offset = "0xC46410", VA = "0xC46410")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x20006EB")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4002421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4002423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4002424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4002425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4002426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4002427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4002428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700025E")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6002A74")]
			[Address(RVA = "0xC46418", Offset = "0xC46418", VA = "0xC46418")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A75")]
			[Address(RVA = "0xC46420", Offset = "0xC46420", VA = "0xC46420")]
			set
			{
			}
		}

		[Token(Token = "0x6002A76")]
		[Address(RVA = "0xC4643C", Offset = "0xC4643C", VA = "0xC4643C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002A77")]
		[Address(RVA = "0xC46648", Offset = "0xC46648", VA = "0xC46648", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002A78")]
		[Address(RVA = "0xC46F34", Offset = "0xC46F34", VA = "0xC46F34", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6002A79")]
		[Address(RVA = "0xC4749C", Offset = "0xC4749C", VA = "0xC4749C", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0xC478AC", Offset = "0xC478AC", VA = "0xC478AC")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0xC46870", Offset = "0xC46870", VA = "0xC46870")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0xC47998", Offset = "0xC47998", VA = "0xC47998")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0xC47D98", Offset = "0xC47D98", VA = "0xC47D98", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0xC47DB0", Offset = "0xC47DB0", VA = "0xC47DB0", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0xC47DB8", Offset = "0xC47DB8", VA = "0xC47DB8")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x20006EC")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x20006ED")]
		public enum CrosshairState
		{
			[Token(Token = "0x4002433")]
			Disabled,
			[Token(Token = "0x4002434")]
			Enabled,
			[Token(Token = "0x4002435")]
			Targeted
		}

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6002A80")]
		[Address(RVA = "0xC47DD8", Offset = "0xC47DD8", VA = "0xC47DD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A81")]
		[Address(RVA = "0xC46384", Offset = "0xC46384", VA = "0xC46384")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6002A82")]
		[Address(RVA = "0xC47E40", Offset = "0xC47E40", VA = "0xC47E40")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A83")]
		[Address(RVA = "0xC47E78", Offset = "0xC47E78", VA = "0xC47E78")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x20006EE")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6002A84")]
		[Address(RVA = "0xC48E80", Offset = "0xC48E80", VA = "0xC48E80")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6002A85")]
		[Address(RVA = "0xC48F2C", Offset = "0xC48F2C", VA = "0xC48F2C")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6002A86")]
		[Address(RVA = "0xC48FD8", Offset = "0xC48FD8", VA = "0xC48FD8")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x20006EF")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6002A87")]
		[Address(RVA = "0xC48FE0", Offset = "0xC48FE0", VA = "0xC48FE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A88")]
		[Address(RVA = "0xC490CC", Offset = "0xC490CC", VA = "0xC490CC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002A89")]
		[Address(RVA = "0xC490D8", Offset = "0xC490D8", VA = "0xC490D8")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002A8A")]
		[Address(RVA = "0xC490E4", Offset = "0xC490E4", VA = "0xC490E4")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x20006F0")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6002A8B")]
		[Address(RVA = "0xC490EC", Offset = "0xC490EC", VA = "0xC490EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0xC4913C", Offset = "0xC4913C", VA = "0xC4913C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0xC49514", Offset = "0xC49514", VA = "0xC49514")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0xC49600", Offset = "0xC49600", VA = "0xC49600")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0xC49140", Offset = "0xC49140", VA = "0xC49140")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6002A90")]
		[Address(RVA = "0xC496EC", Offset = "0xC496EC", VA = "0xC496EC")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x20006F1")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x20006F2")]
		public enum ContactTest
		{
			[Token(Token = "0x400244C")]
			PerpenTest,
			[Token(Token = "0x400244D")]
			BackwardsPress
		}

		[Token(Token = "0x400243D")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x400243E")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700025F")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6002A91")]
			[Address(RVA = "0xC497C4", Offset = "0xC497C4", VA = "0xC497C4", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000260")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6002A92")]
			[Address(RVA = "0xC497CC", Offset = "0xC497CC", VA = "0xC497CC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000261")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6002A93")]
			[Address(RVA = "0xC497D8", Offset = "0xC497D8", VA = "0xC497D8")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6002A94")]
			[Address(RVA = "0xC497E0", Offset = "0xC497E0", VA = "0xC497E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0xC497E8", Offset = "0xC497E8", VA = "0xC497E8", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002A96")]
		[Address(RVA = "0xC49938", Offset = "0xC49938", VA = "0xC49938")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6002A97")]
		[Address(RVA = "0xC49B40", Offset = "0xC49B40", VA = "0xC49B40", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6002A98")]
		[Address(RVA = "0xC4A104", Offset = "0xC4A104", VA = "0xC4A104")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6002A99")]
		[Address(RVA = "0xC4A26C", Offset = "0xC4A26C", VA = "0xC4A26C")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x6002A9A")]
		[Address(RVA = "0xC4A028", Offset = "0xC4A028", VA = "0xC4A028")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A9B")]
		[Address(RVA = "0xC4A378", Offset = "0xC4A378", VA = "0xC4A378")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A9C")]
		[Address(RVA = "0xC4A484", Offset = "0xC4A484", VA = "0xC4A484")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A9D")]
		[Address(RVA = "0xC4A50C", Offset = "0xC4A50C", VA = "0xC4A50C")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x20006F3")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x400244E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x17000262")]
		public Collider Collider
		{
			[Token(Token = "0x6002A9E")]
			[Address(RVA = "0xC4A630", Offset = "0xC4A630", VA = "0xC4A630", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A9F")]
			[Address(RVA = "0xC4A638", Offset = "0xC4A638", VA = "0xC4A638")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6002AA0")]
			[Address(RVA = "0xC4A640", Offset = "0xC4A640", VA = "0xC4A640", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AA1")]
			[Address(RVA = "0xC4A648", Offset = "0xC4A648", VA = "0xC4A648")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6002AA2")]
			[Address(RVA = "0xC4A650", Offset = "0xC4A650", VA = "0xC4A650", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6002AA3")]
		[Address(RVA = "0xC4A6A0", Offset = "0xC4A6A0", VA = "0xC4A6A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AA4")]
		[Address(RVA = "0xC4A734", Offset = "0xC4A734", VA = "0xC4A734")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x20006F4")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000265")]
		Collider Collider
		{
			[Token(Token = "0x6002AA5")]
			get;
		}

		[Token(Token = "0x17000266")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6002AA6")]
			get;
		}

		[Token(Token = "0x17000267")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6002AA7")]
			get;
		}
	}
	[Token(Token = "0x20006F5")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4002451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6002AA8")]
		[Address(RVA = "0xC49A94", Offset = "0xC49A94", VA = "0xC49A94")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x20006F6")]
	public enum InteractionType
	{
		[Token(Token = "0x4002456")]
		Enter,
		[Token(Token = "0x4002457")]
		Stay,
		[Token(Token = "0x4002458")]
		Exit
	}
	[Token(Token = "0x20006F7")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x20006F8")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x400246A")]
			Mesh,
			[Token(Token = "0x400246B")]
			Skeleton,
			[Token(Token = "0x400246C")]
			Both
		}

		[Token(Token = "0x20006F9")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400246D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400246E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400246F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000273")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002ACA")]
				[Address(RVA = "0xC4BB94", Offset = "0xC4BB94", VA = "0xC4BB94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000274")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002ACC")]
				[Address(RVA = "0xC4BBDC", Offset = "0xC4BBDC", VA = "0xC4BBDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AC7")]
			[Address(RVA = "0xC4B18C", Offset = "0xC4B18C", VA = "0xC4B18C")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6002AC8")]
			[Address(RVA = "0xC4B974", Offset = "0xC4B974", VA = "0xC4B974", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AC9")]
			[Address(RVA = "0xC4B978", Offset = "0xC4B978", VA = "0xC4B978", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002ACB")]
			[Address(RVA = "0xC4BB9C", Offset = "0xC4BB9C", VA = "0xC4BB9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002459")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x400245A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x400245B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000268")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6002AA9")]
			[Address(RVA = "0xC4A73C", Offset = "0xC4A73C", VA = "0xC4A73C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAA")]
			[Address(RVA = "0xC4A768", Offset = "0xC4A768", VA = "0xC4A768")]
			private set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6002AAB")]
			[Address(RVA = "0xC4A7CC", Offset = "0xC4A7CC", VA = "0xC4A7CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAC")]
			[Address(RVA = "0xC4A7F8", Offset = "0xC4A7F8", VA = "0xC4A7F8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6002AAD")]
			[Address(RVA = "0xC4A85C", Offset = "0xC4A85C", VA = "0xC4A85C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAE")]
			[Address(RVA = "0xC4A888", Offset = "0xC4A888", VA = "0xC4A888")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6002AAF")]
			[Address(RVA = "0xC4A8EC", Offset = "0xC4A8EC", VA = "0xC4A8EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB0")]
			[Address(RVA = "0xC4A918", Offset = "0xC4A918", VA = "0xC4A918")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6002AB1")]
			[Address(RVA = "0xC4A97C", Offset = "0xC4A97C", VA = "0xC4A97C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB2")]
			[Address(RVA = "0xC4A9A8", Offset = "0xC4A9A8", VA = "0xC4A9A8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6002AB3")]
			[Address(RVA = "0xC4AA0C", Offset = "0xC4AA0C", VA = "0xC4AA0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB4")]
			[Address(RVA = "0xC4AA34", Offset = "0xC4AA34", VA = "0xC4AA34")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6002AB5")]
			[Address(RVA = "0xC4AA94", Offset = "0xC4AA94", VA = "0xC4AA94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB6")]
			[Address(RVA = "0xC4AABC", Offset = "0xC4AABC", VA = "0xC4AABC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6002AB7")]
			[Address(RVA = "0xC4AB1C", Offset = "0xC4AB1C", VA = "0xC4AB1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB8")]
			[Address(RVA = "0xC4AB44", Offset = "0xC4AB44", VA = "0xC4AB44")]
			private set
			{
			}
		}

		[Token(Token = "0x17000270")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6002AB9")]
			[Address(RVA = "0xC4ABA4", Offset = "0xC4ABA4", VA = "0xC4ABA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002ABA")]
			[Address(RVA = "0xC4ABCC", Offset = "0xC4ABCC", VA = "0xC4ABCC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6002ABB")]
			[Address(RVA = "0xC4AC2C", Offset = "0xC4AC2C", VA = "0xC4AC2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002ABC")]
			[Address(RVA = "0xC4AC54", Offset = "0xC4AC54", VA = "0xC4AC54")]
			private set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6002ABD")]
			[Address(RVA = "0xC4ACB4", Offset = "0xC4ACB4", VA = "0xC4ACB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002ABE")]
			[Address(RVA = "0xC4ACFC", Offset = "0xC4ACFC", VA = "0xC4ACFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002ABF")]
		[Address(RVA = "0xC4AD54", Offset = "0xC4AD54", VA = "0xC4AD54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AC0")]
		[Address(RVA = "0xC4B110", Offset = "0xC4B110", VA = "0xC4B110")]
		private void Update()
		{
		}

		[Token(Token = "0x6002AC1")]
		[Address(RVA = "0xC4B09C", Offset = "0xC4B09C", VA = "0xC4B09C")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6002AC2")]
		[Address(RVA = "0xC4B1B4", Offset = "0xC4B1B4", VA = "0xC4B1B4")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6002AC3")]
		[Address(RVA = "0xC4B278", Offset = "0xC4B278", VA = "0xC4B278")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6002AC4")]
		[Address(RVA = "0xC4B448", Offset = "0xC4B448", VA = "0xC4B448")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6002AC5")]
		[Address(RVA = "0xC4B6AC", Offset = "0xC4B6AC", VA = "0xC4B6AC")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6002AC6")]
		[Address(RVA = "0xC4B80C", Offset = "0xC4B80C", VA = "0xC4B80C")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x20006FA")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20006FB")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6002ADE")]
			[Address(RVA = "0xC4C22C", Offset = "0xC4C22C", VA = "0xC4C22C")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000275")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6002ACD")]
			[Address(RVA = "0xC4BBE4", Offset = "0xC4BBE4", VA = "0xC4BBE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000276")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6002ACE")]
			[Address(RVA = "0xC4BBEC", Offset = "0xC4BBEC", VA = "0xC4BBEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6002ACF")]
			[Address(RVA = "0xC4BBF4", Offset = "0xC4BBF4", VA = "0xC4BBF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6002AD0")]
			[Address(RVA = "0xC4BBFC", Offset = "0xC4BBFC", VA = "0xC4BBFC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400010D")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6002AD1")]
			[Address(RVA = "0xC4BC04", Offset = "0xC4BC04", VA = "0xC4BC04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002AD2")]
			[Address(RVA = "0xC4BCB4", Offset = "0xC4BCB4", VA = "0xC4BCB4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400010E")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6002AD4")]
			[Address(RVA = "0xC4BD80", Offset = "0xC4BD80", VA = "0xC4BD80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002AD5")]
			[Address(RVA = "0xC4BE30", Offset = "0xC4BE30", VA = "0xC4BE30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400010F")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6002AD7")]
			[Address(RVA = "0xC4BEFC", Offset = "0xC4BEFC", VA = "0xC4BEFC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002AD8")]
			[Address(RVA = "0xC4BFAC", Offset = "0xC4BFAC", VA = "0xC4BFAC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0xC4BD64", Offset = "0xC4BD64", VA = "0xC4BD64", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002AD6")]
		[Address(RVA = "0xC4BEE0", Offset = "0xC4BEE0", VA = "0xC4BEE0", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002AD9")]
		[Address(RVA = "0xC4C05C", Offset = "0xC4C05C", VA = "0xC4C05C", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6002ADA")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6002ADB")]
		[Address(RVA = "0xC498E4", Offset = "0xC498E4", VA = "0xC498E4", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0xC4C128", Offset = "0xC4C128", VA = "0xC4C128", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0xC4A628", Offset = "0xC4A628", VA = "0xC4A628")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x20006FC")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4002478")]
		None,
		[Token(Token = "0x4002479")]
		Proximity,
		[Token(Token = "0x400247A")]
		Contact,
		[Token(Token = "0x400247B")]
		Action
	}
	[Token(Token = "0x20006FD")]
	public enum InteractableState
	{
		[Token(Token = "0x400247D")]
		Default,
		[Token(Token = "0x400247E")]
		ProximityState,
		[Token(Token = "0x400247F")]
		ContactState,
		[Token(Token = "0x4002480")]
		ActionState
	}
	[Token(Token = "0x20006FE")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4002481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4002483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6002ADF")]
		[Address(RVA = "0xC4A1B4", Offset = "0xC4A1B4", VA = "0xC4A1B4")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x20006FF")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000279")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6002AE0")]
			[Address(RVA = "0xC4C274", Offset = "0xC4C274", VA = "0xC4C274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0xC4C078", Offset = "0xC4C078", VA = "0xC4C078")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0xC4C17C", Offset = "0xC4C17C", VA = "0xC4C17C")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002AE3")]
		[Address(RVA = "0xC4C2CC", Offset = "0xC4C2CC", VA = "0xC4C2CC")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x2000700")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000701")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400248A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400248B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x400248C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x400248D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x400248E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x400248F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4002490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4002491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x1700027A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AED")]
				[Address(RVA = "0xC4CA8C", Offset = "0xC4CA8C", VA = "0xC4CA8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AEF")]
				[Address(RVA = "0xC4CAD4", Offset = "0xC4CAD4", VA = "0xC4CAD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AE9")]
			[Address(RVA = "0xC4C474", Offset = "0xC4C474", VA = "0xC4C474")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002AEA")]
			[Address(RVA = "0xC4C5B0", Offset = "0xC4C5B0", VA = "0xC4C5B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AEB")]
			[Address(RVA = "0xC4C5CC", Offset = "0xC4C5CC", VA = "0xC4C5CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AEC")]
			[Address(RVA = "0xC4CA3C", Offset = "0xC4CA3C", VA = "0xC4CA3C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002AEE")]
			[Address(RVA = "0xC4CA94", Offset = "0xC4CA94", VA = "0xC4CA94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6002AE5")]
		[Address(RVA = "0xC4C36C", Offset = "0xC4C36C", VA = "0xC4C36C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AE6")]
		[Address(RVA = "0xC4C3D8", Offset = "0xC4C3D8", VA = "0xC4C3D8")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6002AE7")]
		[Address(RVA = "0xC4C49C", Offset = "0xC4C49C", VA = "0xC4C49C")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6002AE8")]
		[Address(RVA = "0xC4C5A8", Offset = "0xC4C5A8", VA = "0xC4C5A8")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000702")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4002498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700027C")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6002AF0")]
			[Address(RVA = "0xC4CADC", Offset = "0xC4CADC", VA = "0xC4CADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002AF1")]
		[Address(RVA = "0xC4CC38", Offset = "0xC4CC38", VA = "0xC4CC38")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6002AF2")]
		[Address(RVA = "0xC4CCD4", Offset = "0xC4CCD4", VA = "0xC4CCD4")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0xC4CD70", Offset = "0xC4CD70", VA = "0xC4CD70")]
		private void Update()
		{
		}

		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0xC4D00C", Offset = "0xC4D00C", VA = "0xC4D00C")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0xC4D048", Offset = "0xC4D048", VA = "0xC4D048")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF6")]
		[Address(RVA = "0xC4D320", Offset = "0xC4D320", VA = "0xC4D320")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6002AF7")]
		[Address(RVA = "0xC4D528", Offset = "0xC4D528", VA = "0xC4D528")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000703")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000704")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40024A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x17000281")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B09")]
				[Address(RVA = "0xC4E6F8", Offset = "0xC4E6F8", VA = "0xC4E6F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000282")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B0B")]
				[Address(RVA = "0xC4E740", Offset = "0xC4E740", VA = "0xC4E740", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B06")]
			[Address(RVA = "0xC4D7C4", Offset = "0xC4D7C4", VA = "0xC4D7C4")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6002B07")]
			[Address(RVA = "0xC4E268", Offset = "0xC4E268", VA = "0xC4E268", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B08")]
			[Address(RVA = "0xC4E26C", Offset = "0xC4E26C", VA = "0xC4E26C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B0A")]
			[Address(RVA = "0xC4E700", Offset = "0xC4E700", VA = "0xC4E700", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002499")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x400249C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x40024A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x40024A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700027D")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002AF8")]
			[Address(RVA = "0xC4D630", Offset = "0xC4D630", VA = "0xC4D630", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700027E")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6002AF9")]
			[Address(RVA = "0xC4D638", Offset = "0xC4D638", VA = "0xC4D638", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700027F")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6002AFA")]
			[Address(RVA = "0xC4D640", Offset = "0xC4D640", VA = "0xC4D640", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000280")]
		public override bool EnableState
		{
			[Token(Token = "0x6002AFB")]
			[Address(RVA = "0xC4D648", Offset = "0xC4D648", VA = "0xC4D648", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002AFC")]
			[Address(RVA = "0xC4D670", Offset = "0xC4D670", VA = "0xC4D670", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002AFD")]
		[Address(RVA = "0xC4D6A0", Offset = "0xC4D6A0", VA = "0xC4D6A0", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6002AFE")]
		[Address(RVA = "0xC4D750", Offset = "0xC4D750", VA = "0xC4D750")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6002AFF")]
		[Address(RVA = "0xC4D7EC", Offset = "0xC4D7EC", VA = "0xC4D7EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B00")]
		[Address(RVA = "0xC4DA6C", Offset = "0xC4DA6C", VA = "0xC4DA6C")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6002B01")]
		[Address(RVA = "0xC4DC28", Offset = "0xC4DC28", VA = "0xC4DC28")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6002B02")]
		[Address(RVA = "0xC4DD10", Offset = "0xC4DD10", VA = "0xC4DD10", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B03")]
		[Address(RVA = "0xC4E0A4", Offset = "0xC4E0A4", VA = "0xC4E0A4", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6002B04")]
		[Address(RVA = "0xC4E0A8", Offset = "0xC4E0A8", VA = "0xC4E0A8", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0xC4E0AC", Offset = "0xC4E0AC", VA = "0xC4E0AC")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000705")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x17000283")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B0C")]
			[Address(RVA = "0xC4E748", Offset = "0xC4E748", VA = "0xC4E748", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B0D")]
			[Address(RVA = "0xC4E750", Offset = "0xC4E750", VA = "0xC4E750")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000284")]
		public bool EnableState
		{
			[Token(Token = "0x6002B0E")]
			[Address(RVA = "0xC4E758", Offset = "0xC4E758", VA = "0xC4E758", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B0F")]
			[Address(RVA = "0xC4E774", Offset = "0xC4E774", VA = "0xC4E774", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6002B10")]
			[Address(RVA = "0xC4E794", Offset = "0xC4E794", VA = "0xC4E794", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B11")]
			[Address(RVA = "0xC4E79C", Offset = "0xC4E79C", VA = "0xC4E79C", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public float SphereRadius
		{
			[Token(Token = "0x6002B12")]
			[Address(RVA = "0xC4E7A8", Offset = "0xC4E7A8", VA = "0xC4E7A8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002B13")]
			[Address(RVA = "0xC4E7B0", Offset = "0xC4E7B0", VA = "0xC4E7B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002B14")]
		[Address(RVA = "0xC4E7B8", Offset = "0xC4E7B8", VA = "0xC4E7B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B15")]
		[Address(RVA = "0xC4E7F4", Offset = "0xC4E7F4", VA = "0xC4E7F4", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0xC4E7F8", Offset = "0xC4E7F8", VA = "0xC4E7F8")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000706")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x40024AC")]
		None = 0,
		[Token(Token = "0x40024AD")]
		Ray = 1,
		[Token(Token = "0x40024AE")]
		Poke = 4,
		[Token(Token = "0x40024AF")]
		All = -1
	}
	[Token(Token = "0x2000707")]
	public enum ToolInputState
	{
		[Token(Token = "0x40024B1")]
		Inactive,
		[Token(Token = "0x40024B2")]
		PrimaryInputDown,
		[Token(Token = "0x40024B3")]
		PrimaryInputDownStay,
		[Token(Token = "0x40024B4")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000708")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6002B17")]
		[Address(RVA = "0xC4E050", Offset = "0xC4E050", VA = "0xC4E050")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000709")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000287")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6002B18")]
			[Address(RVA = "0xC4A504", Offset = "0xC4A504", VA = "0xC4A504")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6002B19")]
			[Address(RVA = "0xC4E800", Offset = "0xC4E800", VA = "0xC4E800")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B1A")]
			[Address(RVA = "0xC4E808", Offset = "0xC4E808", VA = "0xC4E808")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000289")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002B1B")]
			get;
		}

		[Token(Token = "0x1700028A")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6002B1C")]
			get;
		}

		[Token(Token = "0x1700028B")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6002B1D")]
			get;
		}

		[Token(Token = "0x1700028C")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002B1E")]
			[Address(RVA = "0xC4E814", Offset = "0xC4E814", VA = "0xC4E814")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002B1F")]
			[Address(RVA = "0xC4E820", Offset = "0xC4E820", VA = "0xC4E820")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6002B20")]
			[Address(RVA = "0xC4E82C", Offset = "0xC4E82C", VA = "0xC4E82C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002B21")]
			[Address(RVA = "0xC4E838", Offset = "0xC4E838", VA = "0xC4E838")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6002B26")]
			get;
			[Token(Token = "0x6002B27")]
			set;
		}

		[Token(Token = "0x6002B22")]
		[Address(RVA = "0xC4E844", Offset = "0xC4E844", VA = "0xC4E844")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B23")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6002B24")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6002B25")]
		public abstract void DeFocus();

		[Token(Token = "0x6002B28")]
		public abstract void Initialize();

		[Token(Token = "0x6002B29")]
		[Address(RVA = "0xC4D490", Offset = "0xC4D490", VA = "0xC4D490")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6002B2A")]
		[Address(RVA = "0xC4D4D8", Offset = "0xC4D4D8", VA = "0xC4D4D8")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6002B2B")]
		[Address(RVA = "0xC4E84C", Offset = "0xC4E84C", VA = "0xC4E84C", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6002B2C")]
		[Address(RVA = "0xC4EB14", Offset = "0xC4EB14", VA = "0xC4EB14", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6002B2D")]
		[Address(RVA = "0xC4E0C0", Offset = "0xC4E0C0", VA = "0xC4E0C0")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x200070A")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700028F")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B2E")]
			get;
		}

		[Token(Token = "0x17000290")]
		bool EnableState
		{
			[Token(Token = "0x6002B30")]
			get;
			[Token(Token = "0x6002B31")]
			set;
		}

		[Token(Token = "0x17000291")]
		bool ToolActivateState
		{
			[Token(Token = "0x6002B32")]
			get;
			[Token(Token = "0x6002B33")]
			set;
		}

		[Token(Token = "0x6002B2F")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x200070B")]
	public class PinchStateModule
	{
		[Token(Token = "0x200070C")]
		private enum PinchState
		{
			[Token(Token = "0x40024C5")]
			None,
			[Token(Token = "0x40024C6")]
			PinchDown,
			[Token(Token = "0x40024C7")]
			PinchStay,
			[Token(Token = "0x40024C8")]
			PinchUp
		}

		[Token(Token = "0x40024C1")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000292")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6002B34")]
			[Address(RVA = "0xC4F3B0", Offset = "0xC4F3B0", VA = "0xC4F3B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000293")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6002B35")]
			[Address(RVA = "0xC4F42C", Offset = "0xC4F42C", VA = "0xC4F42C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000294")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6002B36")]
			[Address(RVA = "0xC4F4A8", Offset = "0xC4F4A8", VA = "0xC4F4A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0xC4F524", Offset = "0xC4F524", VA = "0xC4F524")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0xC4F54C", Offset = "0xC4F54C", VA = "0xC4F54C")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200070D")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x40024C9")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x40024CA")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x40024CB")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x40024CC")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x40024CD")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Range(0f, 45f)]
		private float _coneAngleDegrees;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x40024D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x40024D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x40024D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x40024D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x40024D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000295")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6002B39")]
			[Address(RVA = "0xC4F6C4", Offset = "0xC4F6C4", VA = "0xC4F6C4", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000296")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6002B3A")]
			[Address(RVA = "0xC4F6CC", Offset = "0xC4F6CC", VA = "0xC4F6CC", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000297")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6002B3B")]
			[Address(RVA = "0xC4F728", Offset = "0xC4F728", VA = "0xC4F728", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000298")]
		public override bool EnableState
		{
			[Token(Token = "0x6002B3C")]
			[Address(RVA = "0xC4F730", Offset = "0xC4F730", VA = "0xC4F730", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B3D")]
			[Address(RVA = "0xC4F770", Offset = "0xC4F770", VA = "0xC4F770", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002B3E")]
		[Address(RVA = "0xC4F7E0", Offset = "0xC4F7E0", VA = "0xC4F7E0", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6002B3F")]
		[Address(RVA = "0xC4F834", Offset = "0xC4F834", VA = "0xC4F834")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B40")]
		[Address(RVA = "0xC4F8C0", Offset = "0xC4F8C0", VA = "0xC4F8C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B41")]
		[Address(RVA = "0xC4FB64", Offset = "0xC4FB64", VA = "0xC4FB64")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B42")]
		[Address(RVA = "0xC4FBE0", Offset = "0xC4FBE0", VA = "0xC4FBE0", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6002B43")]
		[Address(RVA = "0xC4FFD4", Offset = "0xC4FFD4", VA = "0xC4FFD4")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B44")]
		[Address(RVA = "0xC50170", Offset = "0xC50170", VA = "0xC50170")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6002B45")]
		[Address(RVA = "0xC50288", Offset = "0xC50288", VA = "0xC50288")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6002B46")]
		[Address(RVA = "0xC505AC", Offset = "0xC505AC", VA = "0xC505AC")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6002B47")]
		[Address(RVA = "0xC50928", Offset = "0xC50928", VA = "0xC50928", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6002B48")]
		[Address(RVA = "0xC50A00", Offset = "0xC50A00", VA = "0xC50A00", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6002B49")]
		[Address(RVA = "0xC50A30", Offset = "0xC50A30", VA = "0xC50A30")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200070E")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40024D9")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x40024DA")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x40024E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x40024E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x17000299")]
		public bool EnableState
		{
			[Token(Token = "0x6002B4A")]
			[Address(RVA = "0xC4F754", Offset = "0xC4F754", VA = "0xC4F754", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B4B")]
			[Address(RVA = "0xC4F78C", Offset = "0xC4F78C", VA = "0xC4F78C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6002B4C")]
			[Address(RVA = "0xC50B44", Offset = "0xC50B44", VA = "0xC50B44", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B4D")]
			[Address(RVA = "0xC4FB28", Offset = "0xC4FB28", VA = "0xC4FB28", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700029B")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6002B4F")]
			[Address(RVA = "0xC50D6C", Offset = "0xC50D6C", VA = "0xC50D6C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B50")]
			[Address(RVA = "0xC50D74", Offset = "0xC50D74", VA = "0xC50D74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002B4E")]
		[Address(RVA = "0xC50B4C", Offset = "0xC50B4C", VA = "0xC50B4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B51")]
		[Address(RVA = "0xC50960", Offset = "0xC50960", VA = "0xC50960", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6002B52")]
		[Address(RVA = "0xC50D7C", Offset = "0xC50D7C", VA = "0xC50D7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B53")]
		[Address(RVA = "0xC51028", Offset = "0xC51028", VA = "0xC51028")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B54")]
		[Address(RVA = "0xC510D0", Offset = "0xC510D0", VA = "0xC510D0")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200070F")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x1700029C")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6002B55")]
			[Address(RVA = "0xC51134", Offset = "0xC51134", VA = "0xC51134")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B56")]
			[Address(RVA = "0xC5113C", Offset = "0xC5113C", VA = "0xC5113C")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6002B57")]
			[Address(RVA = "0xC511A8", Offset = "0xC511A8", VA = "0xC511A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B58")]
			[Address(RVA = "0xC511B0", Offset = "0xC511B0", VA = "0xC511B0")]
			set
			{
			}
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0xC5120C", Offset = "0xC5120C", VA = "0xC5120C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0xC514AC", Offset = "0xC514AC", VA = "0xC514AC")]
		public void ToggleSphereCasting(UnityEngine.UI.Toggle t)
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0xC514BC", Offset = "0xC514BC", VA = "0xC514BC")]
		public void ToggleGrabThroughWalls(UnityEngine.UI.Toggle t)
		{
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0xC514CC", Offset = "0xC514CC", VA = "0xC514CC")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x2000710")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0xC514D4", Offset = "0xC514D4", VA = "0xC514D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0xC514D8", Offset = "0xC514D8", VA = "0xC514D8")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0xC51564", Offset = "0xC51564", VA = "0xC51564")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0xC515F4", Offset = "0xC515F4", VA = "0xC515F4")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B61")]
		[Address(RVA = "0xC51684", Offset = "0xC51684", VA = "0xC51684")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B62")]
		[Address(RVA = "0xC51730", Offset = "0xC51730", VA = "0xC51730")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B63")]
		[Address(RVA = "0xC5180C", Offset = "0xC5180C", VA = "0xC5180C")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B64")]
		[Address(RVA = "0xC51850", Offset = "0xC51850", VA = "0xC51850")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B65")]
		[Address(RVA = "0xC518B0", Offset = "0xC518B0", VA = "0xC518B0")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B66")]
		[Address(RVA = "0xC51910", Offset = "0xC51910", VA = "0xC51910")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000711")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6002B67")]
		[Address(RVA = "0xC51918", Offset = "0xC51918", VA = "0xC51918")]
		private void Start()
		{
		}

		[Token(Token = "0x6002B68")]
		[Address(RVA = "0xC5191C", Offset = "0xC5191C", VA = "0xC5191C")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6002B69")]
		[Address(RVA = "0xC518E0", Offset = "0xC518E0", VA = "0xC518E0")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6002B6A")]
		[Address(RVA = "0xC51950", Offset = "0xC51950", VA = "0xC51950")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000712")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000713")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40024F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x40024F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x40024F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x40024F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700029E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B73")]
				[Address(RVA = "0xC51FD0", Offset = "0xC51FD0", VA = "0xC51FD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B75")]
				[Address(RVA = "0xC52018", Offset = "0xC52018", VA = "0xC52018", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B70")]
			[Address(RVA = "0xC51D48", Offset = "0xC51D48", VA = "0xC51D48")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002B71")]
			[Address(RVA = "0xC51E10", Offset = "0xC51E10", VA = "0xC51E10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B72")]
			[Address(RVA = "0xC51E14", Offset = "0xC51E14", VA = "0xC51E14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B74")]
			[Address(RVA = "0xC51FD8", Offset = "0xC51FD8", VA = "0xC51FD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40024EA")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x40024EB")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x40024EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x40024ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x40024EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6002B6B")]
		[Address(RVA = "0xC51958", Offset = "0xC51958", VA = "0xC51958")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B6C")]
		[Address(RVA = "0xC519F8", Offset = "0xC519F8", VA = "0xC519F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B6D")]
		[Address(RVA = "0xC51D08", Offset = "0xC51D08", VA = "0xC51D08")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B6E")]
		[Address(RVA = "0xC51C94", Offset = "0xC51C94", VA = "0xC51C94")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6002B6F")]
		[Address(RVA = "0xC51D70", Offset = "0xC51D70", VA = "0xC51D70")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000714")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000715")]
		public enum SelectionState
		{
			[Token(Token = "0x4002501")]
			Off,
			[Token(Token = "0x4002502")]
			Selected,
			[Token(Token = "0x4002503")]
			Highlighted
		}

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x170002A0")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6002B76")]
			[Address(RVA = "0xC52020", Offset = "0xC52020", VA = "0xC52020")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6002B77")]
			[Address(RVA = "0xC52028", Offset = "0xC52028", VA = "0xC52028")]
			set
			{
			}
		}

		[Token(Token = "0x6002B78")]
		[Address(RVA = "0xC5217C", Offset = "0xC5217C", VA = "0xC5217C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0xC52340", Offset = "0xC52340", VA = "0xC52340")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B7A")]
		[Address(RVA = "0xC5209C", Offset = "0xC5209C", VA = "0xC5209C")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6002B7B")]
		[Address(RVA = "0xC52408", Offset = "0xC52408", VA = "0xC52408")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000716")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000717")]
		public enum SegmentType
		{
			[Token(Token = "0x4002512")]
			Straight,
			[Token(Token = "0x4002513")]
			LeftTurn,
			[Token(Token = "0x4002514")]
			RightTurn,
			[Token(Token = "0x4002515")]
			Switch
		}

		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x400250A")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x400250B")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x170002A1")]
		public float StartDistance
		{
			[Token(Token = "0x6002B7D")]
			[Address(RVA = "0xC52478", Offset = "0xC52478", VA = "0xC52478")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002B7E")]
			[Address(RVA = "0xC52480", Offset = "0xC52480", VA = "0xC52480")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public float GridSize
		{
			[Token(Token = "0x6002B7F")]
			[Address(RVA = "0xC52488", Offset = "0xC52488", VA = "0xC52488")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002B80")]
			[Address(RVA = "0xC52490", Offset = "0xC52490", VA = "0xC52490")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public int SubDivCount
		{
			[Token(Token = "0x6002B81")]
			[Address(RVA = "0xC52498", Offset = "0xC52498", VA = "0xC52498")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002B82")]
			[Address(RVA = "0xC524A0", Offset = "0xC524A0", VA = "0xC524A0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public SegmentType Type
		{
			[Token(Token = "0x6002B83")]
			[Address(RVA = "0xC524A8", Offset = "0xC524A8", VA = "0xC524A8")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x170002A5")]
		public Pose EndPose
		{
			[Token(Token = "0x6002B84")]
			[Address(RVA = "0xC524B0", Offset = "0xC524B0", VA = "0xC524B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A6")]
		public float Radius
		{
			[Token(Token = "0x6002B85")]
			[Address(RVA = "0xC52884", Offset = "0xC52884", VA = "0xC52884")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A7")]
		public float SegmentLength
		{
			[Token(Token = "0x6002B87")]
			[Address(RVA = "0xC5250C", Offset = "0xC5250C", VA = "0xC5250C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0xC52894", Offset = "0xC52894", VA = "0xC52894")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0xC528AC", Offset = "0xC528AC", VA = "0xC528AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0xC5254C", Offset = "0xC5254C", VA = "0xC5254C")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6002B8A")]
		[Address(RVA = "0xC528B0", Offset = "0xC528B0", VA = "0xC528B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002B8B")]
		[Address(RVA = "0xC528B4", Offset = "0xC528B4", VA = "0xC528B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002B8C")]
		[Address(RVA = "0xC52910", Offset = "0xC52910", VA = "0xC52910")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0xC53244", Offset = "0xC53244", VA = "0xC53244")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0xC534C8", Offset = "0xC534C8", VA = "0xC534C8")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000718")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000719")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x400252A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x400252B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x170002A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B9D")]
				[Address(RVA = "0xC53FEC", Offset = "0xC53FEC", VA = "0xC53FEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B9F")]
				[Address(RVA = "0xC54034", Offset = "0xC54034", VA = "0xC54034", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B9A")]
			[Address(RVA = "0xC53E20", Offset = "0xC53E20", VA = "0xC53E20")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6002B9B")]
			[Address(RVA = "0xC53E70", Offset = "0xC53E70", VA = "0xC53E70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B9C")]
			[Address(RVA = "0xC53E74", Offset = "0xC53E74", VA = "0xC53E74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B9E")]
			[Address(RVA = "0xC53FF4", Offset = "0xC53FF4", VA = "0xC53FF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002516")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4002517")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x400251B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x400251C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x400251D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400251E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x400251F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4002520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4002521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4002522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4002523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4002524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4002525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4002526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0xC53628", Offset = "0xC53628", VA = "0xC53628")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B90")]
		[Address(RVA = "0xC536E0", Offset = "0xC536E0", VA = "0xC536E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0xC53770", Offset = "0xC53770", VA = "0xC53770")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0xC538B8", Offset = "0xC538B8", VA = "0xC538B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0xC53A44", Offset = "0xC53A44", VA = "0xC53A44")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0xC53B54", Offset = "0xC53B54", VA = "0xC53B54")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0xC53D58", Offset = "0xC53D58", VA = "0xC53D58")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6002B96")]
		[Address(RVA = "0xC53C64", Offset = "0xC53C64", VA = "0xC53C64")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6002B97")]
		[Address(RVA = "0xC53C78", Offset = "0xC53C78", VA = "0xC53C78")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0xC53DAC", Offset = "0xC53DAC", VA = "0xC53DAC")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0xC53E48", Offset = "0xC53E48", VA = "0xC53E48")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x200071A")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x400252C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x400252D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170002AA")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6002BA0")]
			[Address(RVA = "0xC5403C", Offset = "0xC5403C", VA = "0xC5403C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002BA1")]
		[Address(RVA = "0xC5404C", Offset = "0xC5404C", VA = "0xC5404C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002BA2")]
		[Address(RVA = "0xC54054", Offset = "0xC54054", VA = "0xC54054", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6002BA3")]
		[Address(RVA = "0xC54384", Offset = "0xC54384", VA = "0xC54384")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x200071B")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x400252E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x400252F")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4002530")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4002531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4002532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4002533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4002534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4002536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170002AB")]
		public float Distance
		{
			[Token(Token = "0x6002BA4")]
			[Address(RVA = "0xC54480", Offset = "0xC54480", VA = "0xC54480")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BA5")]
			[Address(RVA = "0xC54488", Offset = "0xC54488", VA = "0xC54488")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public float Scale
		{
			[Token(Token = "0x6002BA6")]
			[Address(RVA = "0xC54490", Offset = "0xC54490", VA = "0xC54490")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BA7")]
			[Address(RVA = "0xC54498", Offset = "0xC54498", VA = "0xC54498")]
			set
			{
			}
		}

		[Token(Token = "0x6002BA8")]
		[Address(RVA = "0xC54050", Offset = "0xC54050", VA = "0xC54050", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002BA9")]
		[Address(RVA = "0xC544A0", Offset = "0xC544A0", VA = "0xC544A0")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6002BAA")]
		[Address(RVA = "0xC54090", Offset = "0xC54090", VA = "0xC54090")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6002BAB")]
		[Address(RVA = "0xC542A0", Offset = "0xC542A0", VA = "0xC542A0")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6002BAC")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6002BAD")]
		[Address(RVA = "0xC543E4", Offset = "0xC543E4", VA = "0xC543E4")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200071C")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200071D")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4002546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4002547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4002548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4002549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x400254A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x400254B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x400254C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x400254D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x400254E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x170002AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BBB")]
				[Address(RVA = "0xC54D70", Offset = "0xC54D70", VA = "0xC54D70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BBD")]
				[Address(RVA = "0xC54DB8", Offset = "0xC54DB8", VA = "0xC54DB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BB8")]
			[Address(RVA = "0xC549E4", Offset = "0xC549E4", VA = "0xC549E4")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002BB9")]
			[Address(RVA = "0xC54B58", Offset = "0xC54B58", VA = "0xC54B58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BBA")]
			[Address(RVA = "0xC54B5C", Offset = "0xC54B5C", VA = "0xC54B5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BBC")]
			[Address(RVA = "0xC54D78", Offset = "0xC54D78", VA = "0xC54D78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x400253F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4002540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4002541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4002542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6002BAF")]
		[Address(RVA = "0xC54610", Offset = "0xC54610", VA = "0xC54610")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BB0")]
		[Address(RVA = "0xC5466C", Offset = "0xC5466C", VA = "0xC5466C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0xC54744", Offset = "0xC54744", VA = "0xC54744")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0xC54898", Offset = "0xC54898", VA = "0xC54898")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0xC547A0", Offset = "0xC547A0", VA = "0xC547A0")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0xC54960", Offset = "0xC54960", VA = "0xC54960")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0xC54A0C", Offset = "0xC54A0C", VA = "0xC54A0C")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0xC54AA4", Offset = "0xC54AA4", VA = "0xC54AA4")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0xC54B00", Offset = "0xC54B00", VA = "0xC54B00")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200071E")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200071F")]
		private enum EngineSoundState
		{
			[Token(Token = "0x400256D")]
			Start,
			[Token(Token = "0x400256E")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x400256F")]
			Stop
		}

		[Token(Token = "0x2000720")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4002573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4002574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4002575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4002576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4002577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4002578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x170002AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BD0")]
				[Address(RVA = "0xC55650", Offset = "0xC55650", VA = "0xC55650", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BD2")]
				[Address(RVA = "0xC55698", Offset = "0xC55698", VA = "0xC55698", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BCD")]
			[Address(RVA = "0xC55060", Offset = "0xC55060", VA = "0xC55060")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6002BCE")]
			[Address(RVA = "0xC55428", Offset = "0xC55428", VA = "0xC55428", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BCF")]
			[Address(RVA = "0xC5542C", Offset = "0xC5542C", VA = "0xC5542C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BD1")]
			[Address(RVA = "0xC55658", Offset = "0xC55658", VA = "0xC55658", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400254F")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4002550")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4002551")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4002552")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4002553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0.2f, 2.7f)]
		[SerializeField]
		protected float _initialSpeed;

		[Token(Token = "0x4002554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4002555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4002556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4002557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4002558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4002559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4002561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4002562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4002567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4002568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4002569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x400256A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x400256B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0xC54DC0", Offset = "0xC54DC0", VA = "0xC54DC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0xC54F1C", Offset = "0xC54F1C", VA = "0xC54F1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0xC54F28", Offset = "0xC54F28", VA = "0xC54F28", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0xC51508", Offset = "0xC51508", VA = "0xC51508")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0xC54E94", Offset = "0xC54E94", VA = "0xC54E94")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0xC55088", Offset = "0xC55088", VA = "0xC55088")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0xC55000", Offset = "0xC55000", VA = "0xC55000")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0xC51594", Offset = "0xC51594", VA = "0xC51594")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0xC51624", Offset = "0xC51624", VA = "0xC51624")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0xC5529C", Offset = "0xC5529C", VA = "0xC5529C")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0xC55390", Offset = "0xC55390", VA = "0xC55390")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0xC516B4", Offset = "0xC516B4", VA = "0xC516B4")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BCA")]
		[Address(RVA = "0xC51760", Offset = "0xC51760", VA = "0xC51760")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BCB")]
		[Address(RVA = "0xC51840", Offset = "0xC51840", VA = "0xC51840")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6002BCC")]
		[Address(RVA = "0xC553CC", Offset = "0xC553CC", VA = "0xC553CC")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x2000721")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x400257C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x400257D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x400257E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x400257F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170002B1")]
		public float TrackLength
		{
			[Token(Token = "0x6002BD3")]
			[Address(RVA = "0xC556A0", Offset = "0xC556A0", VA = "0xC556A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BD4")]
			[Address(RVA = "0xC556A8", Offset = "0xC556A8", VA = "0xC556A8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0xC556B0", Offset = "0xC556B0", VA = "0xC556B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0xC54508", Offset = "0xC54508", VA = "0xC54508")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0xC556B4", Offset = "0xC556B4", VA = "0xC556B4")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0xC558AC", Offset = "0xC558AC", VA = "0xC558AC")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0xC5598C", Offset = "0xC5598C", VA = "0xC5598C")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x2000722")]
	public class Pose
	{
		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4002581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6002BDA")]
		[Address(RVA = "0xC53590", Offset = "0xC53590", VA = "0xC53590")]
		public Pose()
		{
		}

		[Token(Token = "0x6002BDB")]
		[Address(RVA = "0xC559A8", Offset = "0xC559A8", VA = "0xC559A8")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000723")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000724")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400258D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400258E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400258F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4002590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4002591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4002592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x170002B3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BE8")]
				[Address(RVA = "0xC55F9C", Offset = "0xC55F9C", VA = "0xC55F9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BEA")]
				[Address(RVA = "0xC55FE4", Offset = "0xC55FE4", VA = "0xC55FE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BE5")]
			[Address(RVA = "0xC55C84", Offset = "0xC55C84", VA = "0xC55C84")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002BE6")]
			[Address(RVA = "0xC55DF8", Offset = "0xC55DF8", VA = "0xC55DF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BE7")]
			[Address(RVA = "0xC55DFC", Offset = "0xC55DFC", VA = "0xC55DFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BE9")]
			[Address(RVA = "0xC55FA4", Offset = "0xC55FA4", VA = "0xC55FA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000725")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4002596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4002597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4002598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170002B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BEE")]
				[Address(RVA = "0xC560C0", Offset = "0xC560C0", VA = "0xC560C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BF0")]
				[Address(RVA = "0xC56108", Offset = "0xC56108", VA = "0xC56108", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BEB")]
			[Address(RVA = "0xC55D60", Offset = "0xC55D60", VA = "0xC55D60")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002BEC")]
			[Address(RVA = "0xC55FEC", Offset = "0xC55FEC", VA = "0xC55FEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BED")]
			[Address(RVA = "0xC55FF0", Offset = "0xC55FF0", VA = "0xC55FF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BEF")]
			[Address(RVA = "0xC560C8", Offset = "0xC560C8", VA = "0xC560C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002582")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4002583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4002584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4002585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4002586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4002588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4002589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x400258A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x400258B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x400258C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170002B2")]
		public bool IsMoving
		{
			[Token(Token = "0x6002BDC")]
			[Address(RVA = "0xC55A0C", Offset = "0xC55A0C", VA = "0xC55A0C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BDD")]
			[Address(RVA = "0xC55A14", Offset = "0xC55A14", VA = "0xC55A14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002BDE")]
		[Address(RVA = "0xC55A20", Offset = "0xC55A20", VA = "0xC55A20")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0xC55A50", Offset = "0xC55A50", VA = "0xC55A50")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0xC55B90", Offset = "0xC55B90", VA = "0xC55B90")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6002BE1")]
		[Address(RVA = "0xC55C00", Offset = "0xC55C00", VA = "0xC55C00")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6002BE2")]
		[Address(RVA = "0xC55CAC", Offset = "0xC55CAC", VA = "0xC55CAC")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6002BE3")]
		[Address(RVA = "0xC55D88", Offset = "0xC55D88", VA = "0xC55D88")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6002BE4")]
		[Address(RVA = "0xC55DF0", Offset = "0xC55DF0", VA = "0xC55DF0")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000726")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4002599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x400259A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x400259B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x400259C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x400259D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0xC56110", Offset = "0xC56110", VA = "0xC56110")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0xC56184", Offset = "0xC56184", VA = "0xC56184")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0xC5624C", Offset = "0xC5624C", VA = "0xC5624C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0xC5635C", Offset = "0xC5635C", VA = "0xC5635C")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0xC563D8", Offset = "0xC563D8", VA = "0xC563D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BF6")]
		[Address(RVA = "0xC564A0", Offset = "0xC564A0", VA = "0xC564A0")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000727")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x400259F")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x40025A0")]
		EUDT_OverlayQuad,
		[Token(Token = "0x40025A1")]
		EUDT_None,
		[Token(Token = "0x40025A2")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000728")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000729")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170002B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C0A")]
				[Address(RVA = "0xC57B30", Offset = "0xC57B30", VA = "0xC57B30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C0C")]
				[Address(RVA = "0xC57B78", Offset = "0xC57B78", VA = "0xC57B78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C07")]
			[Address(RVA = "0xC571C0", Offset = "0xC571C0", VA = "0xC571C0")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6002C08")]
			[Address(RVA = "0xC57934", Offset = "0xC57934", VA = "0xC57934", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C09")]
			[Address(RVA = "0xC57938", Offset = "0xC57938", VA = "0xC57938", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C0B")]
			[Address(RVA = "0xC57B38", Offset = "0xC57B38", VA = "0xC57B38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40025A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x40025A4")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x40025A5")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x40025A6")]
		private const string noneID = "NoneID";

		[Token(Token = "0x40025A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.UI.Toggle applicationRadioButton;

		[Token(Token = "0x40025A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.UI.Toggle noneRadioButton;

		[Token(Token = "0x40025A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x40025AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x40025B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x40025B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x40025B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x40025B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x40025B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x40025B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x40025B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x40025B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x40025B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x40025B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x40025BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6002BF7")]
		[Address(RVA = "0xC564B0", Offset = "0xC564B0", VA = "0xC564B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BF8")]
		[Address(RVA = "0xC56CF0", Offset = "0xC56CF0", VA = "0xC56CF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002BF9")]
		[Address(RVA = "0xC56E18", Offset = "0xC56E18", VA = "0xC56E18")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6002BFA")]
		[Address(RVA = "0xC56F48", Offset = "0xC56F48", VA = "0xC56F48")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0xC57078", Offset = "0xC57078", VA = "0xC57078")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0xC56DF8", Offset = "0xC56DF8", VA = "0xC56DF8")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0xC5714C", Offset = "0xC5714C", VA = "0xC5714C")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0xC571E8", Offset = "0xC571E8", VA = "0xC571E8")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0xC56920", Offset = "0xC56920", VA = "0xC56920")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0xC57330", Offset = "0xC57330", VA = "0xC57330")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6002C01")]
		[Address(RVA = "0xC57210", Offset = "0xC57210", VA = "0xC57210")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6002C02")]
		[Address(RVA = "0xC576B8", Offset = "0xC576B8", VA = "0xC576B8")]
		public void RadioPressed(string radioLabel, string group, UnityEngine.UI.Toggle t)
		{
		}

		[Token(Token = "0x6002C03")]
		[Address(RVA = "0xC577A4", Offset = "0xC577A4", VA = "0xC577A4")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x200072A")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x40025BE")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x40025BF")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x40025C0")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x40025C1")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x40025C2")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x40025C3")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x40025C4")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x40025C5")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x40025C6")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x40025C7")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x40025C8")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x40025C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x40025CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40025CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x40025CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x40025CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x40025CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x40025CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x40025D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x40025D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x40025D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x40025D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x40025D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x40025D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6002C0D")]
		[Address(RVA = "0xC57B80", Offset = "0xC57B80", VA = "0xC57B80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C0E")]
		[Address(RVA = "0xC57BD8", Offset = "0xC57BD8", VA = "0xC57BD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002C0F")]
		[Address(RVA = "0xC58028", Offset = "0xC58028", VA = "0xC58028")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002C10")]
		[Address(RVA = "0xC58114", Offset = "0xC58114", VA = "0xC58114")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C11")]
		[Address(RVA = "0xC58278", Offset = "0xC58278", VA = "0xC58278")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6002C12")]
		[Address(RVA = "0xC58548", Offset = "0xC58548", VA = "0xC58548")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002C13")]
		[Address(RVA = "0xC5862C", Offset = "0xC5862C", VA = "0xC5862C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002C14")]
		[Address(RVA = "0xC587DC", Offset = "0xC587DC", VA = "0xC587DC")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002C15")]
		[Address(RVA = "0xC58304", Offset = "0xC58304", VA = "0xC58304")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6002C16")]
		[Address(RVA = "0xC58358", Offset = "0xC58358", VA = "0xC58358")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6002C17")]
		[Address(RVA = "0xC57EE8", Offset = "0xC57EE8", VA = "0xC57EE8")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6002C18")]
		[Address(RVA = "0xC58900", Offset = "0xC58900", VA = "0xC58900")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200072C")]
	public enum HandPoseId
	{
		[Token(Token = "0x40025DD")]
		Default,
		[Token(Token = "0x40025DE")]
		Generic,
		[Token(Token = "0x40025DF")]
		PingPongBall,
		[Token(Token = "0x40025E0")]
		Controller
	}
	[Token(Token = "0x200072D")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x40025E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x40025E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x40025E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170002B9")]
		public bool AllowPointing
		{
			[Token(Token = "0x6002C1C")]
			[Address(RVA = "0xC589B8", Offset = "0xC589B8", VA = "0xC589B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BA")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6002C1D")]
			[Address(RVA = "0xC589C0", Offset = "0xC589C0", VA = "0xC589C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BB")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6002C1E")]
			[Address(RVA = "0xC589C8", Offset = "0xC589C8", VA = "0xC589C8")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6002C1F")]
		[Address(RVA = "0xC589D0", Offset = "0xC589D0", VA = "0xC589D0")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200072E")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x40025E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6002C20")]
		[Address(RVA = "0xC589D8", Offset = "0xC589D8", VA = "0xC589D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C21")]
		[Address(RVA = "0xC58CA4", Offset = "0xC58CA4", VA = "0xC58CA4")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6002C22")]
		[Address(RVA = "0xC58CF4", Offset = "0xC58CF4", VA = "0xC58CF4")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6002C23")]
		[Address(RVA = "0xC58D2C", Offset = "0xC58D2C", VA = "0xC58D2C")]
		public TouchController()
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x200072F")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x6002C24")]
		[Address(RVA = "0xC58D34", Offset = "0xC58D34", VA = "0xC58D34")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0xC58E44", Offset = "0xC58E44", VA = "0xC58E44")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x2000730")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x6002C26")]
		[Address(RVA = "0xC58E4C", Offset = "0xC58E4C", VA = "0xC58E4C")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0xC58F1C", Offset = "0xC58F1C", VA = "0xC58F1C")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0xC58F5C", Offset = "0xC58F5C", VA = "0xC58F5C")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0xC58E8C", Offset = "0xC58E8C", VA = "0xC58E8C")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0xC58F9C", Offset = "0xC58F9C", VA = "0xC58F9C")]
		public Example_ChangeLanguage()
		{
		}
	}
	[Token(Token = "0x2000731")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x40025E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x40025E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x40025E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TermsPopup("")]
		public string _StringWithTermPopup;

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0xC58FA4", Offset = "0xC58FA4", VA = "0xC58FA4")]
		public void Start()
		{
		}

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0xC592CC", Offset = "0xC592CC", VA = "0xC592CC")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x2000732")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0xC592D4", Offset = "0xC592D4", VA = "0xC592D4", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0xC59394", Offset = "0xC59394", VA = "0xC59394")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x2000733")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x40025EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x40025EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x40025EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0xC5939C", Offset = "0xC5939C", VA = "0xC5939C")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0xC598DC", Offset = "0xC598DC", VA = "0xC598DC")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6002C31")]
		[Address(RVA = "0xC59B84", Offset = "0xC59B84", VA = "0xC59B84")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6002C32")]
		[Address(RVA = "0xC59C10", Offset = "0xC59C10", VA = "0xC59C10")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x6002C33")]
		[Address(RVA = "0xC599B0", Offset = "0xC599B0", VA = "0xC599B0")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x6002C34")]
		[Address(RVA = "0xC59E84", Offset = "0xC59E84", VA = "0xC59E84")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x6002C35")]
		[Address(RVA = "0xC5A0FC", Offset = "0xC5A0FC", VA = "0xC5A0FC")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0xC5A104", Offset = "0xC5A104", VA = "0xC5A104")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0xC5A10C", Offset = "0xC5A10C", VA = "0xC5A10C")]
		public void SetOriginalText(string text)
		{
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0xC5A114", Offset = "0xC5A114", VA = "0xC5A114")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x2000734")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6002C39")]
		[Address(RVA = "0xC5A1A0", Offset = "0xC5A1A0", VA = "0xC5A1A0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0xC5A29C", Offset = "0xC5A29C", VA = "0xC5A29C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0xC5A2FC", Offset = "0xC5A2FC", VA = "0xC5A2FC", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}

		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0xC5A304", Offset = "0xC5A304", VA = "0xC5A304")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x2000735")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0xC5A30C", Offset = "0xC5A30C", VA = "0xC5A30C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0xC5A35C", Offset = "0xC5A35C", VA = "0xC5A35C")]
		private void test()
		{
		}

		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0xC5A420", Offset = "0xC5A420", VA = "0xC5A420")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x2000736")]
	public static class PersistentStorage
	{
		[Token(Token = "0x2000737")]
		public enum eFileType
		{
			[Token(Token = "0x40025EF")]
			Raw,
			[Token(Token = "0x40025F0")]
			Persistent,
			[Token(Token = "0x40025F1")]
			Temporal,
			[Token(Token = "0x40025F2")]
			Streaming
		}

		[Token(Token = "0x40025ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x6002C40")]
		[Address(RVA = "0xC5A428", Offset = "0xC5A428", VA = "0xC5A428")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6002C41")]
		[Address(RVA = "0xC5A4F8", Offset = "0xC5A4F8", VA = "0xC5A4F8")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6002C42")]
		[Address(RVA = "0xC5A5C0", Offset = "0xC5A5C0", VA = "0xC5A5C0")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6002C43")]
		[Address(RVA = "0xC5A678", Offset = "0xC5A678", VA = "0xC5A678")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C44")]
		[Address(RVA = "0xC5A730", Offset = "0xC5A730", VA = "0xC5A730")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6002C45")]
		[Address(RVA = "0xC5A7E0", Offset = "0xC5A7E0", VA = "0xC5A7E0")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C46")]
		[Address(RVA = "0xC5A890", Offset = "0xC5A890", VA = "0xC5A890")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C47")]
		[Address(RVA = "0xC5A970", Offset = "0xC5A970", VA = "0xC5A970")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x6002C48")]
		[Address(RVA = "0xC5AA40", Offset = "0xC5AA40", VA = "0xC5AA40")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C49")]
		[Address(RVA = "0xC5AB10", Offset = "0xC5AB10", VA = "0xC5AB10")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000738")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0xC5ABE4", Offset = "0xC5ABE4", VA = "0xC5ABE4", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0xC5AE80", Offset = "0xC5AE80", VA = "0xC5AE80", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0xC5B0BC", Offset = "0xC5B0BC", VA = "0xC5B0BC", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0xC5B2BC", Offset = "0xC5B2BC", VA = "0xC5B2BC", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0xC5B2C4", Offset = "0xC5B2C4", VA = "0xC5B2C4", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0xC5B2D0", Offset = "0xC5B2D0", VA = "0xC5B2D0", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0xC5B2D8", Offset = "0xC5B2D8", VA = "0xC5B2D8")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0xC5B370", Offset = "0xC5B370", VA = "0xC5B370", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C52")]
		[Address(RVA = "0xC5B504", Offset = "0xC5B504", VA = "0xC5B504", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x6002C53")]
		[Address(RVA = "0xC5B68C", Offset = "0xC5B68C", VA = "0xC5B68C", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C54")]
		[Address(RVA = "0xC5B808", Offset = "0xC5B808", VA = "0xC5B808", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0xC5B984", Offset = "0xC5B984", VA = "0xC5B984")]
		protected I2BasePersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000739")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x6002C56")]
		[Address(RVA = "0xC5A4F0", Offset = "0xC5A4F0", VA = "0xC5A4F0")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x200073A")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x40025F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0xC5B98C", Offset = "0xC5B98C", VA = "0xC5B98C", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x6002C58")]
		[Address(RVA = "0xC5BF78", Offset = "0xC5BF78", VA = "0xC5BF78", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0xC5BFD4", Offset = "0xC5BFD4", VA = "0xC5BFD4", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}

		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0xC5C07C", Offset = "0xC5C07C", VA = "0xC5C07C")]
		public BaseSpecializationManager()
		{
		}
	}
	[Token(Token = "0x200073B")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0xC5C084", Offset = "0xC5C084", VA = "0xC5C084")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0xC5C0A8", Offset = "0xC5C0A8", VA = "0xC5C0A8")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0xC5C294", Offset = "0xC5C294", VA = "0xC5C294")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0xC5C5B4", Offset = "0xC5C5B4", VA = "0xC5C5B4")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0xC5C3B4", Offset = "0xC5C3B4", VA = "0xC5C3B4")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x6002C60")]
		[Address(RVA = "0xC5C9CC", Offset = "0xC5C9CC", VA = "0xC5C9CC")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200073C")]
	public class EventCallback
	{
		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6002C62")]
		[Address(RVA = "0xC5CC80", Offset = "0xC5CC80", VA = "0xC5CC80")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0xC5CCE4", Offset = "0xC5CCE4", VA = "0xC5CCE4")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C64")]
		[Address(RVA = "0xC5CD68", Offset = "0xC5CD68", VA = "0xC5CD68")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x200073D")]
	public enum ePluralType
	{
		[Token(Token = "0x40025F9")]
		Zero,
		[Token(Token = "0x40025FA")]
		One,
		[Token(Token = "0x40025FB")]
		Two,
		[Token(Token = "0x40025FC")]
		Few,
		[Token(Token = "0x40025FD")]
		Many,
		[Token(Token = "0x40025FE")]
		Plural
	}
	[Token(Token = "0x200073E")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x200073F")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x4002600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x4002601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x4002602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x4002603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x6002C65")]
		[Address(RVA = "0xC5CDC8", Offset = "0xC5CDC8", VA = "0xC5CDC8")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6002C66")]
		[Address(RVA = "0xC5D1C4", Offset = "0xC5D1C4", VA = "0xC5D1C4")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x6002C67")]
		[Address(RVA = "0xC5D07C", Offset = "0xC5D07C", VA = "0xC5D07C")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C68")]
		[Address(RVA = "0xC5D750", Offset = "0xC5D750", VA = "0xC5D750")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002C69")]
		[Address(RVA = "0xC5D898", Offset = "0xC5D898", VA = "0xC5D898")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0xC5D968", Offset = "0xC5D968", VA = "0xC5D968")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0xC5DAEC", Offset = "0xC5DAEC", VA = "0xC5DAEC")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0xC5DCE8", Offset = "0xC5DCE8", VA = "0xC5DCE8")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0xC5DFE4", Offset = "0xC5DFE4", VA = "0xC5DFE4")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0xC5E210", Offset = "0xC5E210", VA = "0xC5E210")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0xC5E3D0", Offset = "0xC5E3D0", VA = "0xC5E3D0")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0xC5E5B0", Offset = "0xC5E5B0", VA = "0xC5E5B0")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0xC5E760", Offset = "0xC5E760", VA = "0xC5E760")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0xC5EE00", Offset = "0xC5EE00", VA = "0xC5EE00")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0xC5EDE8", Offset = "0xC5EDE8", VA = "0xC5EDE8")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000740")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000741")]
		public delegate void fnOnTranslated(string Translation, string Error);

		[Token(Token = "0x2000742")]
		public delegate void fnOnTranslationReady(Dictionary<string, TranslationQuery> dict, string error);

		[Token(Token = "0x2000744")]
		[CompilerGenerated]
		private sealed class <WaitForTranslations>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400260A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400260B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170002BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C9E")]
				[Address(RVA = "0xC6AB78", Offset = "0xC6AB78", VA = "0xC6AB78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CA0")]
				[Address(RVA = "0xC6ABC0", Offset = "0xC6ABC0", VA = "0xC6ABC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C9B")]
			[Address(RVA = "0xC688D8", Offset = "0xC688D8", VA = "0xC688D8")]
			[DebuggerHidden]
			public <WaitForTranslations>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6002C9C")]
			[Address(RVA = "0xC6A9E4", Offset = "0xC6A9E4", VA = "0xC6A9E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C9D")]
			[Address(RVA = "0xC6A9E8", Offset = "0xC6A9E8", VA = "0xC6A9E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C9F")]
			[Address(RVA = "0xC6AB80", Offset = "0xC6AB80", VA = "0xC6AB80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityWebRequest> mCurrentTranslations;

		[Token(Token = "0x4002605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0xC670F4", Offset = "0xC670F4", VA = "0xC670F4")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C76")]
		[Address(RVA = "0xC6732C", Offset = "0xC6732C", VA = "0xC6732C")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, fnOnTranslated OnTranslationReady)
		{
		}

		[Token(Token = "0x6002C77")]
		[Address(RVA = "0xC67A84", Offset = "0xC67A84", VA = "0xC67A84")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6002C78")]
		[Address(RVA = "0xC679F0", Offset = "0xC679F0", VA = "0xC679F0")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, fnOnTranslationReady OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x6002C79")]
		[Address(RVA = "0xC681D0", Offset = "0xC681D0", VA = "0xC681D0")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C7A")]
		[Address(RVA = "0xC6824C", Offset = "0xC6824C", VA = "0xC6824C")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x6002C7B")]
		[Address(RVA = "0xC680B0", Offset = "0xC680B0", VA = "0xC680B0")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x6002C7C")]
		[Address(RVA = "0xC68878", Offset = "0xC68878", VA = "0xC68878")]
		[IteratorStateMachine(typeof(<WaitForTranslations>d__11))]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0xC68900", Offset = "0xC68900", VA = "0xC68900")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0xC6906C", Offset = "0xC6906C", VA = "0xC6906C")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0xC69120", Offset = "0xC69120", VA = "0xC69120")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x6002C80")]
		[Address(RVA = "0xC676A0", Offset = "0xC676A0", VA = "0xC676A0")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002C81")]
		[Address(RVA = "0xC69328", Offset = "0xC69328", VA = "0xC69328")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002C82")]
		[Address(RVA = "0xC67BD8", Offset = "0xC67BD8", VA = "0xC67BD8")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002C83")]
		[Address(RVA = "0xC69DC8", Offset = "0xC69DC8", VA = "0xC69DC8")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x6002C84")]
		[Address(RVA = "0xC68DEC", Offset = "0xC68DEC", VA = "0xC68DEC")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x6002C85")]
		[Address(RVA = "0xC69578", Offset = "0xC69578", VA = "0xC69578")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C86")]
		[Address(RVA = "0xC69734", Offset = "0xC69734", VA = "0xC69734")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x6002C87")]
		[Address(RVA = "0xC6960C", Offset = "0xC6960C", VA = "0xC6960C")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x6002C88")]
		[Address(RVA = "0xC69EC8", Offset = "0xC69EC8", VA = "0xC69EC8")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6002C89")]
		[Address(RVA = "0xC68FBC", Offset = "0xC68FBC", VA = "0xC68FBC")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0xC69818", Offset = "0xC69818", VA = "0xC69818")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x6002C8B")]
		[Address(RVA = "0xC67F98", Offset = "0xC67F98", VA = "0xC67F98")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0xC69F8C", Offset = "0xC69F8C", VA = "0xC69F8C")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0xC6A240", Offset = "0xC6A240", VA = "0xC6A240")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0xC6A5A8", Offset = "0xC6A5A8", VA = "0xC6A5A8")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0xC687C4", Offset = "0xC687C4", VA = "0xC687C4")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000745")]
	public struct TranslationQuery
	{
		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
	[Token(Token = "0x2000746")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x2000747")]
		public enum eJobState
		{
			[Token(Token = "0x4002614")]
			Running,
			[Token(Token = "0x4002615")]
			Succeeded,
			[Token(Token = "0x4002616")]
			Failed
		}

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0xC6ABC8", Offset = "0xC6ABC8", VA = "0xC6ABC8", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6002CA2")]
		[Address(RVA = "0xC6ABD0", Offset = "0xC6ABD0", VA = "0xC6ABD0", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002CA3")]
		[Address(RVA = "0xC6ABD4", Offset = "0xC6ABD4", VA = "0xC6ABD4")]
		public TranslationJob()
		{
		}
	}
	[Token(Token = "0x2000748")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityWebRequest www;

		[Token(Token = "0x6002CA4")]
		[Address(RVA = "0xC6ABDC", Offset = "0xC6ABDC", VA = "0xC6ABDC", Slot = "6")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6002CA5")]
		[Address(RVA = "0xC6AC08", Offset = "0xC6AC08", VA = "0xC6AC08")]
		public TranslationJob_WWW()
		{
		}
	}
	[Token(Token = "0x2000749")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x6002CA6")]
		[Address(RVA = "0xC6AC10", Offset = "0xC6AC10", VA = "0xC6AC10")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0xC6ACC4", Offset = "0xC6ACC4", VA = "0xC6ACC4")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0xC6ADFC", Offset = "0xC6ADFC", VA = "0xC6ADFC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0xC6AEA8", Offset = "0xC6AEA8", VA = "0xC6AEA8")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x200074A")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4002620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x4002621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0xC67EF0", Offset = "0xC67EF0", VA = "0xC67EF0")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0xC6B16C", Offset = "0xC6B16C", VA = "0xC6B16C", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0xC6B380", Offset = "0xC6B380", VA = "0xC6B380", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x200074B")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x4002622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4002623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0xC6AFC0", Offset = "0xC6AFC0", VA = "0xC6AFC0")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0xC6B3E0", Offset = "0xC6B3E0", VA = "0xC6B3E0", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0xC6B47C", Offset = "0xC6B47C", VA = "0xC6B47C")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x200074C")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Token(Token = "0x4002624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4002625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x4002626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x4002627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x4002628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x4002629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x400262A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0xC6B564", Offset = "0xC6B564", VA = "0xC6B564")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0xC6B5B8", Offset = "0xC6B5B8", VA = "0xC6B5B8")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0xC6B99C", Offset = "0xC6B99C", VA = "0xC6B99C")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0xC6BD70", Offset = "0xC6BD70", VA = "0xC6BD70", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0xC6BE1C", Offset = "0xC6BE1C", VA = "0xC6BE1C")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0xC6BF50", Offset = "0xC6BF50", VA = "0xC6BF50")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}
	}
	[Token(Token = "0x200074E")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x4002630")]
		DISABLED = 1,
		[Token(Token = "0x4002631")]
		KEEP_LOADED = 2,
		[Token(Token = "0x4002632")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x200074F")]
	public class LanguageData
	{
		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0xC6C63C", Offset = "0xC6C63C", VA = "0xC6C63C")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0xC6C64C", Offset = "0xC6C64C", VA = "0xC6C64C")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0xC6C668", Offset = "0xC6C668", VA = "0xC6C668")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0xC6C678", Offset = "0xC6C678", VA = "0xC6C678")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0xC6C688", Offset = "0xC6C688", VA = "0xC6C688")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0xC6C6A4", Offset = "0xC6C6A4", VA = "0xC6C6A4")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0xC6C6C0", Offset = "0xC6C6C0", VA = "0xC6C6C0")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x2000750")]
	[ExecuteInEditMode]
	[AddComponentMenu("I2/Localization/Source")]
	public class LanguageSource : MonoBehaviour, ISerializationCallbackReceiver, ILanguageSource
	{
		[Token(Token = "0x2000751")]
		public delegate void fnOnSourceUpdated(LanguageSourceData source, bool ReceivedNewData, string errorMsg);

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool NeverDestroy;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool GoogleLiveSyncIsUptoDate;

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UnityEngine.Object> Assets;

		[Token(Token = "0x400263E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4002642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LanguageSourceData.eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4002643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4002645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x4002647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LanguageSourceData.eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x4002648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TermData> mTerms;

		[Token(Token = "0x4002649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool CaseInsensitiveTerms;

		[Token(Token = "0x400264A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LanguageSourceData.MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x400264B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string mTerm_AppName;

		[Token(Token = "0x170002BE")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x6002CC2")]
			[Address(RVA = "0xC6C6C8", Offset = "0xC6C6C8", VA = "0xC6C6C8", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CC3")]
			[Address(RVA = "0xC6C6D0", Offset = "0xC6C6D0", VA = "0xC6C6D0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x14000110")]
		public event fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x6002CC4")]
			[Address(RVA = "0xC6C6D8", Offset = "0xC6C6D8", VA = "0xC6C6D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002CC5")]
			[Address(RVA = "0xC6C774", Offset = "0xC6C774", VA = "0xC6C774")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0xC6C810", Offset = "0xC6C810", VA = "0xC6C810")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0xC6C8B0", Offset = "0xC6C8B0", VA = "0xC6C8B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0xC6C924", Offset = "0xC6C924", VA = "0xC6C924")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0xC6CA14", Offset = "0xC6CA14", VA = "0xC6CA14", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0xC6CA20", Offset = "0xC6CA20", VA = "0xC6CA20", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0xC6D1A4", Offset = "0xC6D1A4", VA = "0xC6D1A4")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x2000752")]
	[CreateAssetMenu(fileName = "I2Languages", menuName = "I2 Localization/LanguageSource", order = 1)]
	public class LanguageSourceAsset : ScriptableObject, ILanguageSource
	{
		[Token(Token = "0x400264C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x170002BF")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x6002CD0")]
			[Address(RVA = "0xC6D530", Offset = "0xC6D530", VA = "0xC6D530", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CD1")]
			[Address(RVA = "0xC6D538", Offset = "0xC6D538", VA = "0xC6D538", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0xC6D540", Offset = "0xC6D540", VA = "0xC6D540")]
		public LanguageSourceAsset()
		{
		}
	}
	[Token(Token = "0x2000753")]
	public interface ILanguageSource
	{
		[Token(Token = "0x170002C0")]
		LanguageSourceData SourceData
		{
			[Token(Token = "0x6002CD3")]
			get;
			[Token(Token = "0x6002CD4")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x2000754")]
	[ExecuteInEditMode]
	public class LanguageSourceData
	{
		[Token(Token = "0x2000755")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x4002669")]
			Empty,
			[Token(Token = "0x400266A")]
			Fallback,
			[Token(Token = "0x400266B")]
			ShowWarning,
			[Token(Token = "0x400266C")]
			ShowTerm
		}

		[Token(Token = "0x2000756")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x400266E")]
			Never,
			[Token(Token = "0x400266F")]
			OnlyInDevice,
			[Token(Token = "0x4002670")]
			EditorAndDevice
		}

		[Token(Token = "0x2000757")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x4002672")]
			Always,
			[Token(Token = "0x4002673")]
			Never,
			[Token(Token = "0x4002674")]
			Daily,
			[Token(Token = "0x4002675")]
			Weekly,
			[Token(Token = "0x4002676")]
			Monthly,
			[Token(Token = "0x4002677")]
			OnlyOnce,
			[Token(Token = "0x4002678")]
			EveryOtherDay
		}

		[Token(Token = "0x2000758")]
		public enum eGoogleUpdateSynchronization
		{
			[Token(Token = "0x400267A")]
			Manual,
			[Token(Token = "0x400267B")]
			OnSceneLoaded,
			[Token(Token = "0x400267C")]
			AsSoonAsDownloaded
		}

		[Token(Token = "0x200075A")]
		[CompilerGenerated]
		private sealed class <Import_Google_Coroutine>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSourceData <>4__this;

			[Token(Token = "0x4002687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool JustCheck;

			[Token(Token = "0x4002688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170002C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D2F")]
				[Address(RVA = "0xC76008", Offset = "0xC76008", VA = "0xC76008", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D31")]
				[Address(RVA = "0xC76050", Offset = "0xC76050", VA = "0xC76050", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D2C")]
			[Address(RVA = "0xC7360C", Offset = "0xC7360C", VA = "0xC7360C")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6002D2D")]
			[Address(RVA = "0xC75D18", Offset = "0xC75D18", VA = "0xC75D18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D2E")]
			[Address(RVA = "0xC75D1C", Offset = "0xC75D1C", VA = "0xC75D1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D30")]
			[Address(RVA = "0xC76010", Offset = "0xC76010", VA = "0xC76010", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x400264D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ILanguageSource owner;

		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x400264F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4002650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool mIsGlobalSource;

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<TermData> mTerms;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mTerm_AppName;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x4002659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x400265A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Google_WebServiceURL;

		[Token(Token = "0x400265B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x400265C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public eGoogleUpdateSynchronization GoogleUpdateSynchronization;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string mDelayedGoogleData;

		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x4002667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x170002C1")]
		public UnityEngine.Object ownerObject
		{
			[Token(Token = "0x6002CD5")]
			[Address(RVA = "0xC6D5B0", Offset = "0xC6D5B0", VA = "0xC6D5B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000111")]
		public event LanguageSource.fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x6002CD6")]
			[Address(RVA = "0xC6D108", Offset = "0xC6D108", VA = "0xC6D108")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002CD7")]
			[Address(RVA = "0xC6D62C", Offset = "0xC6D62C", VA = "0xC6D62C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0xC6C840", Offset = "0xC6C840", VA = "0xC6C840")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0xC6C8D0", Offset = "0xC6C8D0", VA = "0xC6C8D0")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0xC6E0E0", Offset = "0xC6E0E0", VA = "0xC6E0E0")]
		public bool IsEqualTo(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0xC6E648", Offset = "0xC6E648", VA = "0xC6E648")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0xC6E750", Offset = "0xC6E750", VA = "0xC6E750")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x6002CDD")]
		[Address(RVA = "0xC6E834", Offset = "0xC6E834", VA = "0xC6E834")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0xC6E83C", Offset = "0xC6E83C", VA = "0xC6E83C")]
		public void Editor_SetDirty()
		{
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0xC6DC2C", Offset = "0xC6DC2C", VA = "0xC6DC2C")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0xC6E840", Offset = "0xC6E840", VA = "0xC6E840")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0xC6E914", Offset = "0xC6E914", VA = "0xC6E914")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE2")]
		[Address(RVA = "0xC6E96C", Offset = "0xC6E96C", VA = "0xC6E96C")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0xC6EA58", Offset = "0xC6EA58", VA = "0xC6EA58")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0xC6F184", Offset = "0xC6F184", VA = "0xC6F184")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0xC6F3E0", Offset = "0xC6F3E0", VA = "0xC6F3E0")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0xC6F4AC", Offset = "0xC6F4AC", VA = "0xC6F4AC")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0xC6F9E4", Offset = "0xC6F9E4", VA = "0xC6F9E4")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0xC70330", Offset = "0xC70330", VA = "0xC70330")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0xC701CC", Offset = "0xC701CC", VA = "0xC701CC")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0xC70590", Offset = "0xC70590", VA = "0xC70590")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0xC7070C", Offset = "0xC7070C", VA = "0xC7070C")]
		public UnityWebRequest Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0xC708D0", Offset = "0xC708D0", VA = "0xC708D0")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0xC70DAC", Offset = "0xC70DAC", VA = "0xC70DAC")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002CEE")]
		[Address(RVA = "0xC71BC4", Offset = "0xC71BC4", VA = "0xC71BC4")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6002CEF")]
		[Address(RVA = "0xC70F10", Offset = "0xC70F10", VA = "0xC70F10")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6002CF0")]
		[Address(RVA = "0xC71E48", Offset = "0xC71E48", VA = "0xC71E48")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF1")]
		[Address(RVA = "0xC721F0", Offset = "0xC721F0", VA = "0xC721F0")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002CF2")]
		[Address(RVA = "0xC72438", Offset = "0xC72438", VA = "0xC72438")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x6002CF3")]
		[Address(RVA = "0xC72664", Offset = "0xC72664", VA = "0xC72664")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x6002CF4")]
		[Address(RVA = "0xC72824", Offset = "0xC72824", VA = "0xC72824")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x6002CF5")]
		[Address(RVA = "0xC72C58", Offset = "0xC72C58", VA = "0xC72C58")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0xC73314", Offset = "0xC73314", VA = "0xC73314")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0xC72A98", Offset = "0xC72A98", VA = "0xC72A98")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0xC73584", Offset = "0xC73584", VA = "0xC73584")]
		[IteratorStateMachine(typeof(<Import_Google_Coroutine>d__65))]
		private IEnumerator Import_Google_Coroutine(bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0xC73634", Offset = "0xC73634", VA = "0xC73634")]
		private void ApplyDownloadedDataOnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0xC736E0", Offset = "0xC736E0", VA = "0xC736E0")]
		public void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0xC73840", Offset = "0xC73840", VA = "0xC73840")]
		public UnityWebRequest Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0xC739B4", Offset = "0xC739B4", VA = "0xC739B4")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0xC72CE8", Offset = "0xC72CE8", VA = "0xC72CE8")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0xC6E240", Offset = "0xC6E240", VA = "0xC6E240")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0xC73C08", Offset = "0xC73C08", VA = "0xC73C08")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0xC73C98", Offset = "0xC73C98", VA = "0xC73C98")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0xC71ED8", Offset = "0xC71ED8", VA = "0xC71ED8")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true, bool ignoreDisabled = false)
		{
			return default(int);
		}

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0xC73A4C", Offset = "0xC73A4C", VA = "0xC73A4C")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x6002D03")]
		[Address(RVA = "0xC73D3C", Offset = "0xC73D3C", VA = "0xC73D3C")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D04")]
		[Address(RVA = "0xC73DC8", Offset = "0xC73DC8", VA = "0xC73DC8")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002D05")]
		[Address(RVA = "0xC73E60", Offset = "0xC73E60", VA = "0xC73E60")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6002D06")]
		[Address(RVA = "0xC73ED8", Offset = "0xC73ED8", VA = "0xC73ED8")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x6002D07")]
		[Address(RVA = "0xC740D4", Offset = "0xC740D4", VA = "0xC740D4")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6002D08")]
		[Address(RVA = "0xC743A4", Offset = "0xC743A4", VA = "0xC743A4")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002D09")]
		[Address(RVA = "0xC7451C", Offset = "0xC7451C", VA = "0xC7451C")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002D0A")]
		[Address(RVA = "0xC74714", Offset = "0xC74714", VA = "0xC74714")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D0B")]
		[Address(RVA = "0xC747A0", Offset = "0xC747A0", VA = "0xC747A0")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x6002D0C")]
		[Address(RVA = "0xC7483C", Offset = "0xC7483C", VA = "0xC7483C")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D0D")]
		[Address(RVA = "0xC7484C", Offset = "0xC7484C", VA = "0xC7484C")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x6002D0E")]
		[Address(RVA = "0xC74A94", Offset = "0xC74A94", VA = "0xC74A94")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x6002D0F")]
		[Address(RVA = "0xC74E60", Offset = "0xC74E60", VA = "0xC74E60")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x6002D10")]
		[Address(RVA = "0xC74BF8", Offset = "0xC74BF8", VA = "0xC74BF8")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x6002D11")]
		[Address(RVA = "0xC72320", Offset = "0xC72320", VA = "0xC72320")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x6002D12")]
		[Address(RVA = "0xC72288", Offset = "0xC72288", VA = "0xC72288")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0xC70AE4", Offset = "0xC70AE4", VA = "0xC70AE4")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0xC74FAC", Offset = "0xC74FAC", VA = "0xC74FAC")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0xC74EE4", Offset = "0xC74EE4", VA = "0xC74EE4")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0xC75058", Offset = "0xC75058", VA = "0xC75058")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0xC6D924", Offset = "0xC6D924", VA = "0xC6D924")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0xC75170", Offset = "0xC75170", VA = "0xC75170")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0xC75214", Offset = "0xC75214", VA = "0xC75214")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0xC6F760", Offset = "0xC6F760", VA = "0xC6F760")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0xC7546C", Offset = "0xC7546C", VA = "0xC7546C")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0xC6E3F0", Offset = "0xC6E3F0", VA = "0xC6E3F0")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0xC756C8", Offset = "0xC756C8", VA = "0xC756C8")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0xC756E4", Offset = "0xC756E4", VA = "0xC756E4")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x6002D1F")]
		[Address(RVA = "0xC75478", Offset = "0xC75478", VA = "0xC75478")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x6002D20")]
		[Address(RVA = "0xC75934", Offset = "0xC75934", VA = "0xC75934")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x6002D21")]
		[Address(RVA = "0xC7204C", Offset = "0xC7204C", VA = "0xC7204C")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0xC6CE68", Offset = "0xC6CE68", VA = "0xC6CE68")]
		public LanguageSourceData()
		{
		}
	}
	[Token(Token = "0x200075B")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x400268A")]
		None,
		[Token(Token = "0x400268B")]
		Replace,
		[Token(Token = "0x400268C")]
		Merge,
		[Token(Token = "0x400268D")]
		AddNewTerms
	}
	[Token(Token = "0x200075C")]
	public class LocalizationReader
	{
		[Token(Token = "0x6002D32")]
		[Address(RVA = "0xC76058", Offset = "0xC76058", VA = "0xC76058")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0xC762C4", Offset = "0xC762C4", VA = "0xC762C4")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0xC7674C", Offset = "0xC7674C", VA = "0xC7674C")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0xC70DE8", Offset = "0xC70DE8", VA = "0xC70DE8")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0xC7696C", Offset = "0xC7696C", VA = "0xC7696C")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0xC76B58", Offset = "0xC76B58", VA = "0xC76B58")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0xC71BFC", Offset = "0xC71BFC", VA = "0xC71BFC")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0xC766A4", Offset = "0xC766A4", VA = "0xC766A4")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0xC76CE4", Offset = "0xC76CE4", VA = "0xC76CE4")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0xC765FC", Offset = "0xC765FC", VA = "0xC765FC")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0xC76DDC", Offset = "0xC76DDC", VA = "0xC76DDC")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x200075D")]
	[AddComponentMenu("I2/Localization/I2 Localize")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x200075E")]
		public enum TermModification
		{
			[Token(Token = "0x40026AE")]
			DontModify,
			[Token(Token = "0x40026AF")]
			ToUpper,
			[Token(Token = "0x40026B0")]
			ToLower,
			[Token(Token = "0x40026B1")]
			ToUpperFirst,
			[Token(Token = "0x40026B2")]
			ToTitle
		}

		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x400268F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x4002690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x4002697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x4002698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x400269A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x400269B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x400269C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x400269D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool AllowLocalizedParameters;

		[Token(Token = "0x400269E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x400269F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x40026A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x40026A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x40026A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x40026A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x40026A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x40026A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x40026A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x40026A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x40026A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x170002C4")]
		public string Term
		{
			[Token(Token = "0x6002D3D")]
			[Address(RVA = "0xC76DE4", Offset = "0xC76DE4", VA = "0xC76DE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D3E")]
			[Address(RVA = "0xC76DEC", Offset = "0xC76DEC", VA = "0xC76DEC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public string SecondaryTerm
		{
			[Token(Token = "0x6002D3F")]
			[Address(RVA = "0xC76E44", Offset = "0xC76E44", VA = "0xC76E44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D40")]
			[Address(RVA = "0xC76E4C", Offset = "0xC76E4C", VA = "0xC76E4C")]
			set
			{
			}
		}

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0xC76ED0", Offset = "0xC76ED0", VA = "0xC76ED0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0xC77FF0", Offset = "0xC77FF0", VA = "0xC77FF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002D43")]
		[Address(RVA = "0xC77FF8", Offset = "0xC77FF8", VA = "0xC77FF8")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D44")]
		[Address(RVA = "0xC7771C", Offset = "0xC7771C", VA = "0xC7771C")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x6002D45")]
		[Address(RVA = "0xC7726C", Offset = "0xC7726C", VA = "0xC7726C")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0xC78040", Offset = "0xC78040", VA = "0xC78040")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0xC78848", Offset = "0xC78848", VA = "0xC78848")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0xC78910", Offset = "0xC78910", VA = "0xC78910")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0xC76DF0", Offset = "0xC76DF0", VA = "0xC76DF0")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0xC76E58", Offset = "0xC76E58", VA = "0xC76E58")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x6002D4B")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0xC76F04", Offset = "0xC76F04", VA = "0xC76F04")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x6002D4D")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D4E")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0xC78960", Offset = "0xC78960", VA = "0xC78960")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x6002D50")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0xC78A70", Offset = "0xC78A70", VA = "0xC78A70")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0xC78AF4", Offset = "0xC78AF4", VA = "0xC78AF4")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6002D53")]
		[Address(RVA = "0xC78BE0", Offset = "0xC78BE0", VA = "0xC78BE0")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x6002D54")]
		[Address(RVA = "0xC78D04", Offset = "0xC78D04", VA = "0xC78D04")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x2000760")]
	[AddComponentMenu("I2/Localization/Localize Dropdown")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x6002D5B")]
		[Address(RVA = "0xC790F4", Offset = "0xC790F4", VA = "0xC790F4")]
		public void Start()
		{
		}

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0xC7942C", Offset = "0xC7942C", VA = "0xC7942C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0xC795A4", Offset = "0xC795A4", VA = "0xC795A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0xC79340", Offset = "0xC79340", VA = "0xC79340")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0xC795FC", Offset = "0xC795FC", VA = "0xC795FC")]
		private void FillValues()
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0xC79860", Offset = "0xC79860", VA = "0xC79860")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0xC79DD8", Offset = "0xC79DD8", VA = "0xC79DD8")]
		public void UpdateLocalizationTMPro()
		{
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0xC79B8C", Offset = "0xC79B8C", VA = "0xC79B8C")]
		private void FillValuesTMPro()
		{
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0xC7A0F8", Offset = "0xC7A0F8", VA = "0xC7A0F8")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x2000761")]
	public static class LocalizationManager
	{
		[Token(Token = "0x2000762")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x2000763")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000769")]
		[CompilerGenerated]
		private sealed class <Delayed_Import_Google>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40026D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x40026D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSourceData source;

			[Token(Token = "0x40026D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool justCheck;

			[Token(Token = "0x170002CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002DBE")]
				[Address(RVA = "0xC7FA1C", Offset = "0xC7FA1C", VA = "0xC7FA1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DC0")]
				[Address(RVA = "0xC7FA64", Offset = "0xC7FA64", VA = "0xC7FA64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DBB")]
			[Address(RVA = "0xC7D63C", Offset = "0xC7D63C", VA = "0xC7D63C")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x6002DBC")]
			[Address(RVA = "0xC7F958", Offset = "0xC7F958", VA = "0xC7F958", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DBD")]
			[Address(RVA = "0xC7F95C", Offset = "0xC7F95C", VA = "0xC7F95C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DBF")]
			[Address(RVA = "0xC7FA24", Offset = "0xC7FA24", VA = "0xC7FA24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200076B")]
		[CompilerGenerated]
		private sealed class <Coroutine_LocalizeAll>d__84 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170002CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002DC6")]
				[Address(RVA = "0xC7FB5C", Offset = "0xC7FB5C", VA = "0xC7FB5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DC8")]
				[Address(RVA = "0xC7FBA4", Offset = "0xC7FBA4", VA = "0xC7FBA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DC3")]
			[Address(RVA = "0xC7E81C", Offset = "0xC7E81C", VA = "0xC7E81C")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__84(int <>1__state)
			{
			}

			[Token(Token = "0x6002DC4")]
			[Address(RVA = "0xC7FA94", Offset = "0xC7FA94", VA = "0xC7FA94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DC5")]
			[Address(RVA = "0xC7FA98", Offset = "0xC7FA98", VA = "0xC7FA98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DC7")]
			[Address(RVA = "0xC7FB64", Offset = "0xC7FB64", VA = "0xC7FB64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x40026BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x40026BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x40026BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x40026BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x40026C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x40026C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static List<LanguageSourceData> Sources;

		[Token(Token = "0x40026C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] GlobalSources;

		[Token(Token = "0x40026C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x40026C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x40026C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x40026C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x170002C6")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6002D68")]
			[Address(RVA = "0xC727C8", Offset = "0xC727C8", VA = "0xC727C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D69")]
			[Address(RVA = "0xC78C34", Offset = "0xC78C34", VA = "0xC78C34")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6002D6A")]
			[Address(RVA = "0xC7AF08", Offset = "0xC7AF08", VA = "0xC7AF08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D6B")]
			[Address(RVA = "0xC7AF64", Offset = "0xC7AF64", VA = "0xC7AF64")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6002D6C")]
			[Address(RVA = "0xC7B1F4", Offset = "0xC7B1F4", VA = "0xC7B1F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D6D")]
			[Address(RVA = "0xC7B368", Offset = "0xC7B368", VA = "0xC7B368")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x6002D6E")]
			[Address(RVA = "0xC7B528", Offset = "0xC7B528", VA = "0xC7B528")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D6F")]
			[Address(RVA = "0xC7B5F8", Offset = "0xC7B5F8", VA = "0xC7B5F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x6002D70")]
			[Address(RVA = "0xC7B6FC", Offset = "0xC7B6FC", VA = "0xC7B6FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000112")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x6002D98")]
			[Address(RVA = "0xC79264", Offset = "0xC79264", VA = "0xC79264")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002D99")]
			[Address(RVA = "0xC794C8", Offset = "0xC794C8", VA = "0xC794C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0xC675DC", Offset = "0xC675DC", VA = "0xC675DC")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0xC7A7B8", Offset = "0xC7A7B8", VA = "0xC7A7B8")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0xC73A44", Offset = "0xC73A44", VA = "0xC73A44")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6002D67")]
		[Address(RVA = "0xC67198", Offset = "0xC67198", VA = "0xC67198")]
		public static string GetWebServiceURL([Optional] LanguageSourceData source)
		{
			return null;
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0xC7AD0C", Offset = "0xC7AD0C", VA = "0xC7AD0C")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0xC7B754", Offset = "0xC7B754", VA = "0xC7B754")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0xC7B944", Offset = "0xC7B944", VA = "0xC7B944")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0xC7B848", Offset = "0xC7B848", VA = "0xC7B848")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0xC7A3E4", Offset = "0xC7A3E4", VA = "0xC7A3E4")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0xC7BA74", Offset = "0xC7BA74", VA = "0xC7BA74")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D77")]
		[Address(RVA = "0xC7A7F8", Offset = "0xC7A7F8", VA = "0xC7A7F8")]
		public static string GetSupportedLanguage(string Language, bool ignoreDisabled = false)
		{
			return null;
		}

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0xC7AB54", Offset = "0xC7AB54", VA = "0xC7AB54")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0xC7B02C", Offset = "0xC7B02C", VA = "0xC7B02C")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0xC7BC2C", Offset = "0xC7BC2C", VA = "0xC7BC2C")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0xC7BEAC", Offset = "0xC7BEAC", VA = "0xC7BEAC")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0xC7C100", Offset = "0xC7C100", VA = "0xC7C100")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0xC7C1F4", Offset = "0xC7C1F4", VA = "0xC7C1F4")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x6002D7E")]
		[Address(RVA = "0xC7C31C", Offset = "0xC7C31C", VA = "0xC7C31C")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0xC7A180", Offset = "0xC7A180", VA = "0xC7A180")]
		public static void AutoLoadGlobalParamManagers()
		{
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0xC7C414", Offset = "0xC7C414", VA = "0xC7C414")]
		public static void ApplyLocalizationParams(ref string translation, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002D81")]
		[Address(RVA = "0xC78290", Offset = "0xC78290", VA = "0xC78290")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002D82")]
		[Address(RVA = "0xC7CA28", Offset = "0xC7CA28", VA = "0xC7CA28")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002D83")]
		[Address(RVA = "0xC7C608", Offset = "0xC7C608", VA = "0xC7C608")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0xC7CC78", Offset = "0xC7CC78", VA = "0xC7CC78")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0xC7CF08", Offset = "0xC7CF08", VA = "0xC7CF08")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0xC787EC", Offset = "0xC787EC", VA = "0xC787EC")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0xC78380", Offset = "0xC78380", VA = "0xC78380")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x6002D88")]
		[Address(RVA = "0xC7D0CC", Offset = "0xC7D0CC", VA = "0xC7D0CC")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6002D89")]
		[Address(RVA = "0xC7B8C0", Offset = "0xC7B8C0", VA = "0xC7B8C0")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0xC7A360", Offset = "0xC7A360", VA = "0xC7A360")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0xC7D168", Offset = "0xC7D168", VA = "0xC7D168")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0xC7D410", Offset = "0xC7D410", VA = "0xC7D410")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0xC7D270", Offset = "0xC7D270", VA = "0xC7D270")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0xC6D6C8", Offset = "0xC6D6C8", VA = "0xC6D6C8")]
		internal static void AddSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6002D8F")]
		[Address(RVA = "0xC7D5A4", Offset = "0xC7D5A4", VA = "0xC7D5A4")]
		[IteratorStateMachine(typeof(<Delayed_Import_Google>d__59))]
		private static IEnumerator Delayed_Import_Google(LanguageSourceData source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x6002D90")]
		[Address(RVA = "0xC6E060", Offset = "0xC6E060", VA = "0xC6E060")]
		internal static void RemoveSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6002D91")]
		[Address(RVA = "0xC7D664", Offset = "0xC7D664", VA = "0xC7D664")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D92")]
		[Address(RVA = "0xC7D6E8", Offset = "0xC7D6E8", VA = "0xC7D6E8")]
		public static LanguageSourceData GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x6002D93")]
		[Address(RVA = "0xC7D88C", Offset = "0xC7D88C", VA = "0xC7D88C")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x6002D94")]
		[Address(RVA = "0xC7D9BC", Offset = "0xC7D9BC", VA = "0xC7D9BC")]
		public static void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x6002D95")]
		[Address(RVA = "0xC7B9D8", Offset = "0xC7B9D8", VA = "0xC7B9D8")]
		public static string GetCurrentDeviceLanguage(bool force = false)
		{
			return null;
		}

		[Token(Token = "0x6002D96")]
		[Address(RVA = "0xC7DA98", Offset = "0xC7DA98", VA = "0xC7DA98")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x6002D97")]
		[Address(RVA = "0xC7DF18", Offset = "0xC7DF18", VA = "0xC7DF18")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0xC781DC", Offset = "0xC781DC", VA = "0xC781DC")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0xC7E3B8", Offset = "0xC7E3B8", VA = "0xC7E3B8")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6002D9C")]
		[Address(RVA = "0xC7E1D0", Offset = "0xC7E1D0", VA = "0xC7E1D0")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D9D")]
		public static T GetTranslatedObject<T>(string AssetName, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D9E")]
		public static T GetTranslatedObjectByTermName<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0xC7E454", Offset = "0xC7E454", VA = "0xC7E454")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0xC6DF94", Offset = "0xC6DF94", VA = "0xC6DF94")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0xC7E7BC", Offset = "0xC7E7BC", VA = "0xC7E7BC")]
		[IteratorStateMachine(typeof(<Coroutine_LocalizeAll>d__84))]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0xC7E644", Offset = "0xC7E644", VA = "0xC7E644")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0xC7E844", Offset = "0xC7E844", VA = "0xC7E844")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0xC7E96C", Offset = "0xC7E96C", VA = "0xC7E96C")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0xC7EBB0", Offset = "0xC7EBB0", VA = "0xC7EBB0")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x6002DA6")]
		[Address(RVA = "0xC7CB20", Offset = "0xC7CB20", VA = "0xC7CB20")]
		public static TermData GetTermData(string term, out LanguageSourceData source)
		{
			return null;
		}
	}
	[Token(Token = "0x200076C")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x6002DC9")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x6002DCA")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x6002DCB")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x6002DCC")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x6002DCD")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x6002DCE")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x6002DCF")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x6002DD0")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0xC7FBAC", Offset = "0xC7FBAC", VA = "0xC7FBAC")]
		protected ILocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200076D")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x40026D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x6002DD2")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DD3")]
		protected LocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200076E")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x6002DD4")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x6002DD5")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x6002DD6")]
		public abstract Type GetTargetType();

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0xC7FBB4", Offset = "0xC7FBB4", VA = "0xC7FBB4")]
		protected ILocalizeTargetDescriptor()
		{
		}
	}
	[Token(Token = "0x200076F")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x6002DD8")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x6002DD9")]
		public override Type GetTargetType()
		{
			return null;
		}

		[Token(Token = "0x6002DDA")]
		protected LocalizeTargetDesc()
		{
		}
	}
	[Token(Token = "0x2000770")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x6002DDB")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DDC")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x6002DDD")]
		public LocalizeTargetDesc_Type()
		{
		}
	}
	[Token(Token = "0x2000771")]
	public class LocalizeTarget_TextMeshPro_Label : LocalizeTarget<TextMeshPro>
	{
		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0xC7FBBC", Offset = "0xC7FBBC", VA = "0xC7FBBC")]
		static LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0xC7FBC0", Offset = "0xC7FBC0", VA = "0xC7FBC0")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0xC7FC88", Offset = "0xC7FC88", VA = "0xC7FC88", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DE1")]
		[Address(RVA = "0xC7FC90", Offset = "0xC7FC90", VA = "0xC7FC90", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DE2")]
		[Address(RVA = "0xC7FC98", Offset = "0xC7FC98", VA = "0xC7FC98", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE3")]
		[Address(RVA = "0xC7FCA0", Offset = "0xC7FCA0", VA = "0xC7FCA0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE4")]
		[Address(RVA = "0xC7FCA8", Offset = "0xC7FCA8", VA = "0xC7FCA8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE5")]
		[Address(RVA = "0xC7FCB0", Offset = "0xC7FCB0", VA = "0xC7FCB0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0xC7FDCC", Offset = "0xC7FDCC", VA = "0xC7FDCC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0xC80360", Offset = "0xC80360", VA = "0xC80360")]
		internal static TMP_FontAsset GetTMPFontFromMaterial(Localize cmp, string matName)
		{
			return null;
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0xC805C8", Offset = "0xC805C8", VA = "0xC805C8")]
		internal static void InitAlignment_TMPro(bool isRTL, TextAlignmentOptions alignment, out TextAlignmentOptions alignLTR, out TextAlignmentOptions alignRTL)
		{
		}

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0xC80280", Offset = "0xC80280", VA = "0xC80280")]
		internal static void SetFont(TMP_Text label, TMP_FontAsset newFont)
		{
		}

		[Token(Token = "0x6002DEA")]
		[Address(RVA = "0xC804C8", Offset = "0xC804C8", VA = "0xC804C8")]
		internal static void SetMaterial(TMP_Text label, Material newMat)
		{
		}

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0xC8086C", Offset = "0xC8086C", VA = "0xC8086C")]
		public LocalizeTarget_TextMeshPro_Label()
		{
		}
	}
	[Token(Token = "0x2000772")]
	public class LocalizeTarget_TextMeshPro_UGUI : LocalizeTarget<TextMeshProUGUI>
	{
		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x40026E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x40026E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool mAlignmentWasRTL;

		[Token(Token = "0x40026E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool mInitializeAlignment;

		[Token(Token = "0x6002DEC")]
		[Address(RVA = "0xC808C8", Offset = "0xC808C8", VA = "0xC808C8")]
		static LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x6002DED")]
		[Address(RVA = "0xC808CC", Offset = "0xC808CC", VA = "0xC808CC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002DEE")]
		[Address(RVA = "0xC80994", Offset = "0xC80994", VA = "0xC80994", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DEF")]
		[Address(RVA = "0xC8099C", Offset = "0xC8099C", VA = "0xC8099C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DF0")]
		[Address(RVA = "0xC809A4", Offset = "0xC809A4", VA = "0xC809A4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DF1")]
		[Address(RVA = "0xC809AC", Offset = "0xC809AC", VA = "0xC809AC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DF2")]
		[Address(RVA = "0xC809B4", Offset = "0xC809B4", VA = "0xC809B4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DF3")]
		[Address(RVA = "0xC809BC", Offset = "0xC809BC", VA = "0xC809BC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002DF4")]
		[Address(RVA = "0xC80AD8", Offset = "0xC80AD8", VA = "0xC80AD8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002DF5")]
		[Address(RVA = "0xC80F8C", Offset = "0xC80F8C", VA = "0xC80F8C")]
		public LocalizeTarget_TextMeshPro_UGUI()
		{
		}
	}
	[Token(Token = "0x2000773")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x6002DF6")]
		[Address(RVA = "0xC80FE8", Offset = "0xC80FE8", VA = "0xC80FE8")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0xC80FEC", Offset = "0xC80FEC", VA = "0xC80FEC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002DF8")]
		[Address(RVA = "0xC810B4", Offset = "0xC810B4", VA = "0xC810B4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0xC810BC", Offset = "0xC810BC", VA = "0xC810BC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002DFA")]
		[Address(RVA = "0xC810C4", Offset = "0xC810C4", VA = "0xC810C4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DFB")]
		[Address(RVA = "0xC810CC", Offset = "0xC810CC", VA = "0xC810CC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DFC")]
		[Address(RVA = "0xC810D4", Offset = "0xC810D4", VA = "0xC810D4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DFD")]
		[Address(RVA = "0xC810DC", Offset = "0xC810DC", VA = "0xC810DC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0xC811C4", Offset = "0xC811C4", VA = "0xC811C4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0xC81334", Offset = "0xC81334", VA = "0xC81334")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}
	}
	[Token(Token = "0x2000774")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x6002E00")]
		[Address(RVA = "0xC8137C", Offset = "0xC8137C", VA = "0xC8137C", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0xC813B0", Offset = "0xC813B0", VA = "0xC813B0")]
		public LocalizeTargetDesc_Child()
		{
		}
	}
	[Token(Token = "0x2000775")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x6002E02")]
		[Address(RVA = "0xC813F8", Offset = "0xC813F8", VA = "0xC813F8")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0xC813FC", Offset = "0xC813FC", VA = "0xC813FC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0xC814AC", Offset = "0xC814AC", VA = "0xC814AC", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0xC814E0", Offset = "0xC814E0", VA = "0xC814E0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0xC814E8", Offset = "0xC814E8", VA = "0xC814E8", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E07")]
		[Address(RVA = "0xC814F0", Offset = "0xC814F0", VA = "0xC814F0", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E08")]
		[Address(RVA = "0xC814F8", Offset = "0xC814F8", VA = "0xC814F8", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0xC81500", Offset = "0xC81500", VA = "0xC81500", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0xC81508", Offset = "0xC81508", VA = "0xC81508", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0xC81554", Offset = "0xC81554", VA = "0xC81554", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0xC81694", Offset = "0xC81694", VA = "0xC81694")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}
	}
	[Token(Token = "0x2000776")]
	public class LocalizeTarget_UnityStandard_MeshRenderer : LocalizeTarget<MeshRenderer>
	{
		[Token(Token = "0x6002E0D")]
		[Address(RVA = "0xC816DC", Offset = "0xC816DC", VA = "0xC816DC")]
		static LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}

		[Token(Token = "0x6002E0E")]
		[Address(RVA = "0xC816E0", Offset = "0xC816E0", VA = "0xC816E0")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E0F")]
		[Address(RVA = "0xC817A8", Offset = "0xC817A8", VA = "0xC817A8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E10")]
		[Address(RVA = "0xC817B0", Offset = "0xC817B0", VA = "0xC817B0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E11")]
		[Address(RVA = "0xC817B8", Offset = "0xC817B8", VA = "0xC817B8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E12")]
		[Address(RVA = "0xC817C0", Offset = "0xC817C0", VA = "0xC817C0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E13")]
		[Address(RVA = "0xC817C8", Offset = "0xC817C8", VA = "0xC817C8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E14")]
		[Address(RVA = "0xC817D0", Offset = "0xC817D0", VA = "0xC817D0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E15")]
		[Address(RVA = "0xC819C8", Offset = "0xC819C8", VA = "0xC819C8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0xC81B94", Offset = "0xC81B94", VA = "0xC81B94")]
		public LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x2000777")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x6002E17")]
		[Address(RVA = "0xC81BDC", Offset = "0xC81BDC", VA = "0xC81BDC", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0xC81BE4", Offset = "0xC81BE4", VA = "0xC81BE4")]
		public LocalizeTargetDesc_Prefab()
		{
		}
	}
	[Token(Token = "0x2000778")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x6002E19")]
		[Address(RVA = "0xC81C2C", Offset = "0xC81C2C", VA = "0xC81C2C")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0xC81C30", Offset = "0xC81C30", VA = "0xC81C30")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0xC81CE0", Offset = "0xC81CE0", VA = "0xC81CE0", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0xC81CE8", Offset = "0xC81CE8", VA = "0xC81CE8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0xC81CF0", Offset = "0xC81CF0", VA = "0xC81CF0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0xC81CF8", Offset = "0xC81CF8", VA = "0xC81CF8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0xC81D00", Offset = "0xC81D00", VA = "0xC81D00", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0xC81D08", Offset = "0xC81D08", VA = "0xC81D08", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0xC81D10", Offset = "0xC81D10", VA = "0xC81D10", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0xC81D5C", Offset = "0xC81D5C", VA = "0xC81D5C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0xC81F60", Offset = "0xC81F60", VA = "0xC81F60")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}

		[Token(Token = "0x6002E24")]
		[Address(RVA = "0xC82114", Offset = "0xC82114", VA = "0xC82114")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}
	}
	[Token(Token = "0x2000779")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x6002E25")]
		[Address(RVA = "0xC8215C", Offset = "0xC8215C", VA = "0xC8215C")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0xC82160", Offset = "0xC82160", VA = "0xC82160")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0xC82228", Offset = "0xC82228", VA = "0xC82228", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0xC82230", Offset = "0xC82230", VA = "0xC82230", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0xC82238", Offset = "0xC82238", VA = "0xC82238", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0xC82240", Offset = "0xC82240", VA = "0xC82240", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0xC82248", Offset = "0xC82248", VA = "0xC82248", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0xC82250", Offset = "0xC82250", VA = "0xC82250", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0xC8233C", Offset = "0xC8233C", VA = "0xC8233C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0xC82438", Offset = "0xC82438", VA = "0xC82438")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}
	}
	[Token(Token = "0x200077A")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x40026E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40026E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0xC82480", Offset = "0xC82480", VA = "0xC82480")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0xC82484", Offset = "0xC82484", VA = "0xC82484")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0xC8254C", Offset = "0xC8254C", VA = "0xC8254C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0xC82554", Offset = "0xC82554", VA = "0xC82554", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0xC8255C", Offset = "0xC8255C", VA = "0xC8255C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0xC82564", Offset = "0xC82564", VA = "0xC82564", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0xC8256C", Offset = "0xC8256C", VA = "0xC8256C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0xC82574", Offset = "0xC82574", VA = "0xC82574", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0xC82698", Offset = "0xC82698", VA = "0xC82698", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0xC828F4", Offset = "0xC828F4", VA = "0xC828F4")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}
	}
	[Token(Token = "0x200077B")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<Image>
	{
		[Token(Token = "0x6002E39")]
		[Address(RVA = "0xC8294C", Offset = "0xC8294C", VA = "0xC8294C")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0xC82950", Offset = "0xC82950", VA = "0xC82950")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0xC82A18", Offset = "0xC82A18", VA = "0xC82A18", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0xC82A20", Offset = "0xC82A20", VA = "0xC82A20", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0xC82A28", Offset = "0xC82A28", VA = "0xC82A28", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0xC82A30", Offset = "0xC82A30", VA = "0xC82A30", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0xC82AB0", Offset = "0xC82AB0", VA = "0xC82AB0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0xC82AB8", Offset = "0xC82AB8", VA = "0xC82AB8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0xC82C54", Offset = "0xC82C54", VA = "0xC82C54", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0xC82D44", Offset = "0xC82D44", VA = "0xC82D44")]
		public LocalizeTarget_UnityUI_Image()
		{
		}
	}
	[Token(Token = "0x200077C")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x6002E43")]
		[Address(RVA = "0xC82D8C", Offset = "0xC82D8C", VA = "0xC82D8C")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0xC82D90", Offset = "0xC82D90", VA = "0xC82D90")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0xC82E58", Offset = "0xC82E58", VA = "0xC82E58", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0xC82E60", Offset = "0xC82E60", VA = "0xC82E60", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0xC82E68", Offset = "0xC82E68", VA = "0xC82E68", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E48")]
		[Address(RVA = "0xC82E70", Offset = "0xC82E70", VA = "0xC82E70", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0xC82E78", Offset = "0xC82E78", VA = "0xC82E78", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0xC82E80", Offset = "0xC82E80", VA = "0xC82E80", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0xC82F70", Offset = "0xC82F70", VA = "0xC82F70", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0xC83060", Offset = "0xC83060", VA = "0xC83060")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}
	}
	[Token(Token = "0x200077D")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x40026E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x40026EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40026EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0xC830A8", Offset = "0xC830A8", VA = "0xC830A8")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0xC830AC", Offset = "0xC830AC", VA = "0xC830AC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0xC83174", Offset = "0xC83174", VA = "0xC83174", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0xC8317C", Offset = "0xC8317C", VA = "0xC8317C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0xC83184", Offset = "0xC83184", VA = "0xC83184", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0xC8318C", Offset = "0xC8318C", VA = "0xC8318C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0xC83194", Offset = "0xC83194", VA = "0xC83194", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E54")]
		[Address(RVA = "0xC8319C", Offset = "0xC8319C", VA = "0xC8319C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0xC832C8", Offset = "0xC832C8", VA = "0xC832C8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002E56")]
		[Address(RVA = "0xC83570", Offset = "0xC83570", VA = "0xC83570")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0xC83628", Offset = "0xC83628", VA = "0xC83628")]
		public LocalizeTarget_UnityUI_Text()
		{
		}
	}
	[Token(Token = "0x200077E")]
	public enum eTermType
	{
		[Token(Token = "0x40026ED")]
		Text,
		[Token(Token = "0x40026EE")]
		Font,
		[Token(Token = "0x40026EF")]
		Texture,
		[Token(Token = "0x40026F0")]
		AudioClip,
		[Token(Token = "0x40026F1")]
		GameObject,
		[Token(Token = "0x40026F2")]
		Sprite,
		[Token(Token = "0x40026F3")]
		Material,
		[Token(Token = "0x40026F4")]
		Child,
		[Token(Token = "0x40026F5")]
		Mesh,
		[Token(Token = "0x40026F6")]
		TextMeshPFont,
		[Token(Token = "0x40026F7")]
		Object
	}
	[Token(Token = "0x200077F")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x40026F9")]
		Normal = 1,
		[Token(Token = "0x40026FA")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x2000780")]
	public class TermData
	{
		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[NonSerialized]
		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x6002E58")]
		[Address(RVA = "0xC83680", Offset = "0xC83680", VA = "0xC83680")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x6002E59")]
		[Address(RVA = "0xC83794", Offset = "0xC83794", VA = "0xC83794")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x6002E5A")]
		[Address(RVA = "0xC83878", Offset = "0xC83878", VA = "0xC83878")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x6002E5B")]
		[Address(RVA = "0xC838CC", Offset = "0xC838CC", VA = "0xC838CC")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x6002E5C")]
		[Address(RVA = "0xC83A6C", Offset = "0xC83A6C", VA = "0xC83A6C")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E5D")]
		[Address(RVA = "0xC83AA0", Offset = "0xC83AA0", VA = "0xC83AA0")]
		public void Validate()
		{
		}

		[Token(Token = "0x6002E5E")]
		[Address(RVA = "0xC83C9C", Offset = "0xC83C9C", VA = "0xC83C9C")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E5F")]
		[Address(RVA = "0xC83D24", Offset = "0xC83D24", VA = "0xC83D24")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E60")]
		[Address(RVA = "0xC83DEC", Offset = "0xC83DEC", VA = "0xC83DEC")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}

		[Token(Token = "0x6002E61")]
		[Address(RVA = "0xC83ED4", Offset = "0xC83ED4", VA = "0xC83ED4")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x2000781")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x170002CF")]
		public string Filter
		{
			[Token(Token = "0x6002E63")]
			[Address(RVA = "0xC83FCC", Offset = "0xC83FCC", VA = "0xC83FCC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E64")]
			[Address(RVA = "0xC83FD4", Offset = "0xC83FD4", VA = "0xC83FD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002E62")]
		[Address(RVA = "0xC83F9C", Offset = "0xC83F9C", VA = "0xC83F9C")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x2000782")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x6002E65")]
		[Address(RVA = "0xC83FDC", Offset = "0xC83FDC", VA = "0xC83FDC")]
		public void Start()
		{
		}

		[Token(Token = "0x6002E66")]
		[Address(RVA = "0xC84030", Offset = "0xC84030", VA = "0xC84030")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x2000783")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x170002D0")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x6002E67")]
			[Address(RVA = "0xC84038", Offset = "0xC84038", VA = "0xC84038")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002E68")]
		[Address(RVA = "0xC84188", Offset = "0xC84188", VA = "0xC84188")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0xC8420C", Offset = "0xC8420C", VA = "0xC8420C")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0xC84230", Offset = "0xC84230", VA = "0xC84230")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x2000784")]
	[AddComponentMenu("I2/Localization/I2 Localize Callback")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0xC84238", Offset = "0xC84238", VA = "0xC84238")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0xC84310", Offset = "0xC84310", VA = "0xC84310")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0xC843B4", Offset = "0xC843B4", VA = "0xC843B4")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0xC843D0", Offset = "0xC843D0", VA = "0xC843D0")]
		public CustomLocalizeCallback()
		{
		}
	}
	[Token(Token = "0x2000785")]
	public class HindiFixer
	{
		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0xC84444", Offset = "0xC84444", VA = "0xC84444")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x6002E70")]
		[Address(RVA = "0xC84850", Offset = "0xC84850", VA = "0xC84850")]
		public HindiFixer()
		{
		}
	}
	[Token(Token = "0x2000787")]
	public static class I2Utils
	{
		[Token(Token = "0x4002706")]
		public const string ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

		[Token(Token = "0x4002707")]
		public const string NumberChars = "0123456789";

		[Token(Token = "0x4002708")]
		public const string ValidNameSymbols = ".-_$#@*()[]{}+:?!&',^=<>~`";

		[Token(Token = "0x6002E74")]
		[Address(RVA = "0xC807B0", Offset = "0xC807B0", VA = "0xC807B0")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0xC848DC", Offset = "0xC848DC", VA = "0xC848DC")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002E76")]
		[Address(RVA = "0xC84B04", Offset = "0xC84B04", VA = "0xC84B04")]
		public static string GetValidTermName(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0xC84BAC", Offset = "0xC84BAC", VA = "0xC84BAC")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0xC84E50", Offset = "0xC84E50", VA = "0xC84E50")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0xC84B24", Offset = "0xC84B24", VA = "0xC84B24")]
		public static string RemoveTags(string text)
		{
			return null;
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0xC84FD4", Offset = "0xC84FD4", VA = "0xC84FD4")]
		public static bool RemoveResourcesPath(ref string sPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0xC85268", Offset = "0xC85268", VA = "0xC85268")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E7C")]
		[Address(RVA = "0xC85270", Offset = "0xC85270", VA = "0xC85270")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0xC85340", Offset = "0xC85340", VA = "0xC85340")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0xC853A0", Offset = "0xC853A0", VA = "0xC853A0")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0xC854DC", Offset = "0xC854DC", VA = "0xC854DC")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6002E80")]
		public static H FindInParents<H>(Transform tr) where H : Component
		{
			return null;
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0xC85600", Offset = "0xC85600", VA = "0xC85600")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0xC856AC", Offset = "0xC856AC", VA = "0xC856AC")]
		public static void SendWebRequest(UnityWebRequest www)
		{
		}
	}
	[Token(Token = "0x2000789")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x6002E86")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x200078A")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x200078B")]
		public struct ParamValue
		{
			[Token(Token = "0x400270D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x400270E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x400270B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x400270C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _IsGlobalManager;

		[Token(Token = "0x6002E87")]
		[Address(RVA = "0xC85744", Offset = "0xC85744", VA = "0xC85744", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0xC85808", Offset = "0xC85808", VA = "0xC85808")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0xC859E8", Offset = "0xC859E8", VA = "0xC859E8")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6002E8A")]
		[Address(RVA = "0xC85AA0", Offset = "0xC85AA0", VA = "0xC85AA0", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002E8B")]
		[Address(RVA = "0xC85AB0", Offset = "0xC85AB0", VA = "0xC85AB0")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x6002E8C")]
		[Address(RVA = "0xC85BE0", Offset = "0xC85BE0", VA = "0xC85BE0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002E8D")]
		[Address(RVA = "0xC85C60", Offset = "0xC85C60", VA = "0xC85C60")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200078C")]
	public struct LocalizedString
	{
		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_DontLocalizeParameters;

		[Token(Token = "0x6002E8E")]
		[Address(RVA = "0xC85CE8", Offset = "0xC85CE8", VA = "0xC85CE8")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x6002E8F")]
		[Address(RVA = "0xC85DAC", Offset = "0xC85DAC", VA = "0xC85DAC")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x6002E90")]
		[Address(RVA = "0xC85DE8", Offset = "0xC85DE8", VA = "0xC85DE8")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x6002E91")]
		[Address(RVA = "0xC85CEC", Offset = "0xC85CEC", VA = "0xC85CEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200078D")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x6002E92")]
		[Address(RVA = "0xC85E3C", Offset = "0xC85E3C", VA = "0xC85E3C", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002E93")]
		[Address(RVA = "0xC85F6C", Offset = "0xC85F6C", VA = "0xC85F6C", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002E94")]
		[Address(RVA = "0xC85FEC", Offset = "0xC85FEC", VA = "0xC85FEC", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002E95")]
		[Address(RVA = "0xC85FF4", Offset = "0xC85FF4", VA = "0xC85FF4")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x200078E")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x6002E96")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x200078F")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x4002716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x4002717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x170002D1")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x6002E97")]
			[Address(RVA = "0xC85FFC", Offset = "0xC85FFC", VA = "0xC85FFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002E98")]
		[Address(RVA = "0xC863D8", Offset = "0xC863D8", VA = "0xC863D8")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6002E99")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002E9A")]
		[Address(RVA = "0xC86494", Offset = "0xC86494", VA = "0xC86494")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6002E9B")]
		[Address(RVA = "0xC865B8", Offset = "0xC865B8", VA = "0xC865B8")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E9C")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002E9D")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002E9E")]
		[Address(RVA = "0xC86430", Offset = "0xC86430", VA = "0xC86430")]
		public void CleanResourceCache()
		{
		}

		[Token(Token = "0x6002E9F")]
		[Address(RVA = "0xC86618", Offset = "0xC86618", VA = "0xC86618")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x2000790")]
	public class RTLFixer
	{
		[Token(Token = "0x6002EA0")]
		[Address(RVA = "0xC86754", Offset = "0xC86754", VA = "0xC86754")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x6002EA1")]
		[Address(RVA = "0xC869DC", Offset = "0xC869DC", VA = "0xC869DC")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x6002EA2")]
		[Address(RVA = "0xC86760", Offset = "0xC86760", VA = "0xC86760")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0xC87BE4", Offset = "0xC87BE4", VA = "0xC87BE4")]
		public RTLFixer()
		{
		}
	}
	[Token(Token = "0x2000791")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x4002719")]
		Hamza = 65152,
		[Token(Token = "0x400271A")]
		Alef = 65165,
		[Token(Token = "0x400271B")]
		AlefHamza = 65155,
		[Token(Token = "0x400271C")]
		WawHamza = 65157,
		[Token(Token = "0x400271D")]
		AlefMaksoor = 65159,
		[Token(Token = "0x400271E")]
		AlefMaksora = 64508,
		[Token(Token = "0x400271F")]
		HamzaNabera = 65161,
		[Token(Token = "0x4002720")]
		Ba = 65167,
		[Token(Token = "0x4002721")]
		Ta = 65173,
		[Token(Token = "0x4002722")]
		Tha2 = 65177,
		[Token(Token = "0x4002723")]
		Jeem = 65181,
		[Token(Token = "0x4002724")]
		H7aa = 65185,
		[Token(Token = "0x4002725")]
		Khaa2 = 65189,
		[Token(Token = "0x4002726")]
		Dal = 65193,
		[Token(Token = "0x4002727")]
		Thal = 65195,
		[Token(Token = "0x4002728")]
		Ra2 = 65197,
		[Token(Token = "0x4002729")]
		Zeen = 65199,
		[Token(Token = "0x400272A")]
		Seen = 65201,
		[Token(Token = "0x400272B")]
		Sheen = 65205,
		[Token(Token = "0x400272C")]
		S9a = 65209,
		[Token(Token = "0x400272D")]
		Dha = 65213,
		[Token(Token = "0x400272E")]
		T6a = 65217,
		[Token(Token = "0x400272F")]
		T6ha = 65221,
		[Token(Token = "0x4002730")]
		Ain = 65225,
		[Token(Token = "0x4002731")]
		Gain = 65229,
		[Token(Token = "0x4002732")]
		Fa = 65233,
		[Token(Token = "0x4002733")]
		Gaf = 65237,
		[Token(Token = "0x4002734")]
		Kaf = 65241,
		[Token(Token = "0x4002735")]
		Lam = 65245,
		[Token(Token = "0x4002736")]
		Meem = 65249,
		[Token(Token = "0x4002737")]
		Noon = 65253,
		[Token(Token = "0x4002738")]
		Ha = 65257,
		[Token(Token = "0x4002739")]
		Waw = 65261,
		[Token(Token = "0x400273A")]
		Ya = 65265,
		[Token(Token = "0x400273B")]
		AlefMad = 65153,
		[Token(Token = "0x400273C")]
		TaMarboota = 65171,
		[Token(Token = "0x400273D")]
		PersianPe = 64342,
		[Token(Token = "0x400273E")]
		PersianChe = 64378,
		[Token(Token = "0x400273F")]
		PersianZe = 64394,
		[Token(Token = "0x4002740")]
		PersianGaf = 64402,
		[Token(Token = "0x4002741")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x2000792")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x4002743")]
		Hamza = 1569,
		[Token(Token = "0x4002744")]
		Alef = 1575,
		[Token(Token = "0x4002745")]
		AlefHamza = 1571,
		[Token(Token = "0x4002746")]
		WawHamza = 1572,
		[Token(Token = "0x4002747")]
		AlefMaksoor = 1573,
		[Token(Token = "0x4002748")]
		AlefMagsora = 1609,
		[Token(Token = "0x4002749")]
		HamzaNabera = 1574,
		[Token(Token = "0x400274A")]
		Ba = 1576,
		[Token(Token = "0x400274B")]
		Ta = 1578,
		[Token(Token = "0x400274C")]
		Tha2 = 1579,
		[Token(Token = "0x400274D")]
		Jeem = 1580,
		[Token(Token = "0x400274E")]
		H7aa = 1581,
		[Token(Token = "0x400274F")]
		Khaa2 = 1582,
		[Token(Token = "0x4002750")]
		Dal = 1583,
		[Token(Token = "0x4002751")]
		Thal = 1584,
		[Token(Token = "0x4002752")]
		Ra2 = 1585,
		[Token(Token = "0x4002753")]
		Zeen = 1586,
		[Token(Token = "0x4002754")]
		Seen = 1587,
		[Token(Token = "0x4002755")]
		Sheen = 1588,
		[Token(Token = "0x4002756")]
		S9a = 1589,
		[Token(Token = "0x4002757")]
		Dha = 1590,
		[Token(Token = "0x4002758")]
		T6a = 1591,
		[Token(Token = "0x4002759")]
		T6ha = 1592,
		[Token(Token = "0x400275A")]
		Ain = 1593,
		[Token(Token = "0x400275B")]
		Gain = 1594,
		[Token(Token = "0x400275C")]
		Fa = 1601,
		[Token(Token = "0x400275D")]
		Gaf = 1602,
		[Token(Token = "0x400275E")]
		Kaf = 1603,
		[Token(Token = "0x400275F")]
		Lam = 1604,
		[Token(Token = "0x4002760")]
		Meem = 1605,
		[Token(Token = "0x4002761")]
		Noon = 1606,
		[Token(Token = "0x4002762")]
		Ha = 1607,
		[Token(Token = "0x4002763")]
		Waw = 1608,
		[Token(Token = "0x4002764")]
		Ya = 1610,
		[Token(Token = "0x4002765")]
		AlefMad = 1570,
		[Token(Token = "0x4002766")]
		TaMarboota = 1577,
		[Token(Token = "0x4002767")]
		PersianPe = 1662,
		[Token(Token = "0x4002768")]
		PersianChe = 1670,
		[Token(Token = "0x4002769")]
		PersianZe = 1688,
		[Token(Token = "0x400276A")]
		PersianGaf = 1711,
		[Token(Token = "0x400276B")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x2000793")]
	internal class ArabicMapping
	{
		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x400276D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x6002EA4")]
		[Address(RVA = "0xC87BEC", Offset = "0xC87BEC", VA = "0xC87BEC")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x2000794")]
	internal class ArabicTable
	{
		[Token(Token = "0x400276E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x400276F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x170002D2")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x6002EA6")]
			[Address(RVA = "0xC894AC", Offset = "0xC894AC", VA = "0xC894AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002EA5")]
		[Address(RVA = "0xC87C18", Offset = "0xC87C18", VA = "0xC87C18")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x6002EA7")]
		[Address(RVA = "0xC89530", Offset = "0xC89530", VA = "0xC89530")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000795")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x4002770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x6002EA8")]
		[Address(RVA = "0xC896C4", Offset = "0xC896C4", VA = "0xC896C4")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x2000796")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x6002EA9")]
		[Address(RVA = "0xC896F4", Offset = "0xC896F4", VA = "0xC896F4")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6002EAA")]
		[Address(RVA = "0xC89C24", Offset = "0xC89C24", VA = "0xC89C24")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6002EAB")]
		[Address(RVA = "0xC86BDC", Offset = "0xC86BDC", VA = "0xC86BDC")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x6002EAC")]
		[Address(RVA = "0xC89E4C", Offset = "0xC89E4C", VA = "0xC89E4C")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0xC8A41C", Offset = "0xC8A41C", VA = "0xC8A41C")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EAE")]
		[Address(RVA = "0xC8A2D8", Offset = "0xC8A2D8", VA = "0xC8A2D8")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EAF")]
		[Address(RVA = "0xC89FA8", Offset = "0xC89FA8", VA = "0xC89FA8")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EB0")]
		[Address(RVA = "0xC8A708", Offset = "0xC8A708", VA = "0xC8A708")]
		public RTLFixerTool()
		{
		}
	}
	[Token(Token = "0x2000797")]
	[AddComponentMenu("I2/Localization/SetLanguage Button")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x6002EB2")]
		[Address(RVA = "0xC8A75C", Offset = "0xC8A75C", VA = "0xC8A75C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6002EB3")]
		[Address(RVA = "0xC8A760", Offset = "0xC8A760", VA = "0xC8A760")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x6002EB4")]
		[Address(RVA = "0xC8A7F8", Offset = "0xC8A7F8", VA = "0xC8A7F8")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x2000798")]
	[AddComponentMenu("I2/Localization/SetLanguage Dropdown")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x6002EB5")]
		[Address(RVA = "0xC8A800", Offset = "0xC8A800", VA = "0xC8A800")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002EB6")]
		[Address(RVA = "0xC8AA58", Offset = "0xC8AA58", VA = "0xC8AA58")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x6002EB7")]
		[Address(RVA = "0xC8AB44", Offset = "0xC8AB44", VA = "0xC8AB44")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x2000799")]
	public class StringObfucator
	{
		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0xC8AB4C", Offset = "0xC8AB4C", VA = "0xC8AB4C")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0xC8AE40", Offset = "0xC8AE40", VA = "0xC8AE40")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x6002EBA")]
		[Address(RVA = "0xC8ADBC", Offset = "0xC8ADBC", VA = "0xC8ADBC")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x6002EBB")]
		[Address(RVA = "0xC8AF18", Offset = "0xC8AF18", VA = "0xC8AF18")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x6002EBC")]
		[Address(RVA = "0xC8AC24", Offset = "0xC8AC24", VA = "0xC8AC24")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x6002EBD")]
		[Address(RVA = "0xC8AFA4", Offset = "0xC8AFA4", VA = "0xC8AFA4")]
		public StringObfucator()
		{
		}
	}
	[Token(Token = "0x200079A")]
	public static class ScriptLocalization
	{
		[Token(Token = "0x170002D3")]
		public static string RESTART
		{
			[Token(Token = "0x6002EBF")]
			[Address(RVA = "0xC8B028", Offset = "0xC8B028", VA = "0xC8B028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D4")]
		public static string START
		{
			[Token(Token = "0x6002EC0")]
			[Address(RVA = "0xC8B0A8", Offset = "0xC8B0A8", VA = "0xC8B0A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D5")]
		public static string card_divide_all_money_description
		{
			[Token(Token = "0x6002EC1")]
			[Address(RVA = "0xC8B128", Offset = "0xC8B128", VA = "0xC8B128")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D6")]
		public static string card_extra_live_description
		{
			[Token(Token = "0x6002EC2")]
			[Address(RVA = "0xC8B1A8", Offset = "0xC8B1A8", VA = "0xC8B1A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D7")]
		public static string card_protect_yourself_description
		{
			[Token(Token = "0x6002EC3")]
			[Address(RVA = "0xC8B228", Offset = "0xC8B228", VA = "0xC8B228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D8")]
		public static string card_second_bullet_description
		{
			[Token(Token = "0x6002EC4")]
			[Address(RVA = "0xC8B2A8", Offset = "0xC8B2A8", VA = "0xC8B2A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D9")]
		public static string card_see_bullet_description
		{
			[Token(Token = "0x6002EC5")]
			[Address(RVA = "0xC8B328", Offset = "0xC8B328", VA = "0xC8B328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		public static string card_set_target_description
		{
			[Token(Token = "0x6002EC6")]
			[Address(RVA = "0xC8B3A8", Offset = "0xC8B3A8", VA = "0xC8B3A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DB")]
		public static string card_skip_turn_description
		{
			[Token(Token = "0x6002EC7")]
			[Address(RVA = "0xC8B428", Offset = "0xC8B428", VA = "0xC8B428")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public static string card_spin_pistol_description
		{
			[Token(Token = "0x6002EC8")]
			[Address(RVA = "0xC8B4A8", Offset = "0xC8B4A8", VA = "0xC8B4A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DD")]
		public static string card_turm_move_direction_description
		{
			[Token(Token = "0x6002EC9")]
			[Address(RVA = "0xC8B528", Offset = "0xC8B528", VA = "0xC8B528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DE")]
		public static string card_undo_last_played_description
		{
			[Token(Token = "0x6002ECA")]
			[Address(RVA = "0xC8B5A8", Offset = "0xC8B5A8", VA = "0xC8B5A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DF")]
		public static string create_room_menu_button_private
		{
			[Token(Token = "0x6002ECB")]
			[Address(RVA = "0xC8B628", Offset = "0xC8B628", VA = "0xC8B628")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		public static string create_room_menu_button_public
		{
			[Token(Token = "0x6002ECC")]
			[Address(RVA = "0xC8B6A8", Offset = "0xC8B6A8", VA = "0xC8B6A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E1")]
		public static string create_room_menu_title
		{
			[Token(Token = "0x6002ECD")]
			[Address(RVA = "0xC8B728", Offset = "0xC8B728", VA = "0xC8B728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E2")]
		public static string find_game_menu_title
		{
			[Token(Token = "0x6002ECE")]
			[Address(RVA = "0xC8B7A8", Offset = "0xC8B7A8", VA = "0xC8B7A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		public static string hints_gun_pointer_no_bullet
		{
			[Token(Token = "0x6002ECF")]
			[Address(RVA = "0xC8B828", Offset = "0xC8B828", VA = "0xC8B828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E4")]
		public static string hints_gun_pointer_no_coins
		{
			[Token(Token = "0x6002ED0")]
			[Address(RVA = "0xC8B8A8", Offset = "0xC8B8A8", VA = "0xC8B8A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E5")]
		public static string hints_gun_pointer_not_public_enemy
		{
			[Token(Token = "0x6002ED1")]
			[Address(RVA = "0xC8B928", Offset = "0xC8B928", VA = "0xC8B928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E6")]
		public static string hints_gun_pointer_protected_player
		{
			[Token(Token = "0x6002ED2")]
			[Address(RVA = "0xC8B9A8", Offset = "0xC8B9A8", VA = "0xC8B9A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		public static string hints_gun_pointer_shoot_youself
		{
			[Token(Token = "0x6002ED3")]
			[Address(RVA = "0xC8BA28", Offset = "0xC8BA28", VA = "0xC8BA28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E8")]
		public static string hints_recharging_close_barrel
		{
			[Token(Token = "0x6002ED4")]
			[Address(RVA = "0xC8BAA8", Offset = "0xC8BAA8", VA = "0xC8BAA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E9")]
		public static string hints_recharging_insert_bullet
		{
			[Token(Token = "0x6002ED5")]
			[Address(RVA = "0xC8BB28", Offset = "0xC8BB28", VA = "0xC8BB28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EA")]
		public static string hints_recharging_open_barrel
		{
			[Token(Token = "0x6002ED6")]
			[Address(RVA = "0xC8BBA8", Offset = "0xC8BBA8", VA = "0xC8BBA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EB")]
		public static string hints_recharging_spin_barrel
		{
			[Token(Token = "0x6002ED7")]
			[Address(RVA = "0xC8BC28", Offset = "0xC8BC28", VA = "0xC8BC28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EC")]
		public static string hints_recharging_take_bullet
		{
			[Token(Token = "0x6002ED8")]
			[Address(RVA = "0xC8BCA8", Offset = "0xC8BCA8", VA = "0xC8BCA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002ED")]
		public static string hints_take_revolver
		{
			[Token(Token = "0x6002ED9")]
			[Address(RVA = "0xC8BD28", Offset = "0xC8BD28", VA = "0xC8BD28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EE")]
		public static string invite_from_friend_menu_button_accept
		{
			[Token(Token = "0x6002EDA")]
			[Address(RVA = "0xC8BDA8", Offset = "0xC8BDA8", VA = "0xC8BDA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EF")]
		public static string invite_from_friend_menu_description_part1
		{
			[Token(Token = "0x6002EDB")]
			[Address(RVA = "0xC8BE28", Offset = "0xC8BE28", VA = "0xC8BE28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F0")]
		public static string invite_from_friend_menu_description_part2
		{
			[Token(Token = "0x6002EDC")]
			[Address(RVA = "0xC8BEA8", Offset = "0xC8BEA8", VA = "0xC8BEA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F1")]
		public static string invite_from_friend_menu_tittle
		{
			[Token(Token = "0x6002EDD")]
			[Address(RVA = "0xC8BF28", Offset = "0xC8BF28", VA = "0xC8BF28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F2")]
		public static string invite_menu_title
		{
			[Token(Token = "0x6002EDE")]
			[Address(RVA = "0xC8BFA8", Offset = "0xC8BFA8", VA = "0xC8BFA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F3")]
		public static string main_menu_button_create_game
		{
			[Token(Token = "0x6002EDF")]
			[Address(RVA = "0xC8C028", Offset = "0xC8C028", VA = "0xC8C028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F4")]
		public static string main_menu_button_find_game
		{
			[Token(Token = "0x6002EE0")]
			[Address(RVA = "0xC8C0A8", Offset = "0xC8C0A8", VA = "0xC8C0A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public static string main_menu_button_settings
		{
			[Token(Token = "0x6002EE1")]
			[Address(RVA = "0xC8C128", Offset = "0xC8C128", VA = "0xC8C128")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		public static string main_menu_ok
		{
			[Token(Token = "0x6002EE2")]
			[Address(RVA = "0xC8C1A8", Offset = "0xC8C1A8", VA = "0xC8C1A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public static string main_menu_region
		{
			[Token(Token = "0x6002EE3")]
			[Address(RVA = "0xC8C228", Offset = "0xC8C228", VA = "0xC8C228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F8")]
		public static string no_found_game_menu_create_game
		{
			[Token(Token = "0x6002EE4")]
			[Address(RVA = "0xC8C2A8", Offset = "0xC8C2A8", VA = "0xC8C2A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F9")]
		public static string no_found_game_menu_title
		{
			[Token(Token = "0x6002EE5")]
			[Address(RVA = "0xC8C328", Offset = "0xC8C328", VA = "0xC8C328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		public static string no_found_game_menu_try_again
		{
			[Token(Token = "0x6002EE6")]
			[Address(RVA = "0xC8C3A8", Offset = "0xC8C3A8", VA = "0xC8C3A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FB")]
		public static string offline_menu_button_play_offline
		{
			[Token(Token = "0x6002EE7")]
			[Address(RVA = "0xC8C428", Offset = "0xC8C428", VA = "0xC8C428")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		public static string offline_menu_button_try_reconnect
		{
			[Token(Token = "0x6002EE8")]
			[Address(RVA = "0xC8C4A8", Offset = "0xC8C4A8", VA = "0xC8C4A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FD")]
		public static string offline_menu_title
		{
			[Token(Token = "0x6002EE9")]
			[Address(RVA = "0xC8C528", Offset = "0xC8C528", VA = "0xC8C528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FE")]
		public static string player_game_menu_button_mute_player
		{
			[Token(Token = "0x6002EEA")]
			[Address(RVA = "0xC8C5A8", Offset = "0xC8C5A8", VA = "0xC8C5A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FF")]
		public static string player_game_menu_button_restart_session
		{
			[Token(Token = "0x6002EEB")]
			[Address(RVA = "0xC8C628", Offset = "0xC8C628", VA = "0xC8C628")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000300")]
		public static string player_game_menu_kick_panel_button_kick
		{
			[Token(Token = "0x6002EEC")]
			[Address(RVA = "0xC8C6A8", Offset = "0xC8C6A8", VA = "0xC8C6A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000301")]
		public static string player_game_menu_kick_panel_tittle
		{
			[Token(Token = "0x6002EED")]
			[Address(RVA = "0xC8C728", Offset = "0xC8C728", VA = "0xC8C728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000302")]
		public static string player_game_menu_mute_panel_button_mute
		{
			[Token(Token = "0x6002EEE")]
			[Address(RVA = "0xC8C7A8", Offset = "0xC8C7A8", VA = "0xC8C7A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000303")]
		public static string player_game_menu_mute_panel_button_unmute
		{
			[Token(Token = "0x6002EEF")]
			[Address(RVA = "0xC8C828", Offset = "0xC8C828", VA = "0xC8C828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000304")]
		public static string player_game_menu_mute_panel_tittle
		{
			[Token(Token = "0x6002EF0")]
			[Address(RVA = "0xC8C8A8", Offset = "0xC8C8A8", VA = "0xC8C8A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000305")]
		public static string region_code_asia
		{
			[Token(Token = "0x6002EF1")]
			[Address(RVA = "0xC8C928", Offset = "0xC8C928", VA = "0xC8C928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000306")]
		public static string region_code_au
		{
			[Token(Token = "0x6002EF2")]
			[Address(RVA = "0xC8C9A8", Offset = "0xC8C9A8", VA = "0xC8C9A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000307")]
		public static string region_code_cae
		{
			[Token(Token = "0x6002EF3")]
			[Address(RVA = "0xC8CA28", Offset = "0xC8CA28", VA = "0xC8CA28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000308")]
		public static string region_code_cn
		{
			[Token(Token = "0x6002EF4")]
			[Address(RVA = "0xC8CAA8", Offset = "0xC8CAA8", VA = "0xC8CAA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000309")]
		public static string region_code_eu
		{
			[Token(Token = "0x6002EF5")]
			[Address(RVA = "0xC8CB28", Offset = "0xC8CB28", VA = "0xC8CB28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030A")]
		public static string region_code_in
		{
			[Token(Token = "0x6002EF6")]
			[Address(RVA = "0xC8CBA8", Offset = "0xC8CBA8", VA = "0xC8CBA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030B")]
		public static string region_code_jp
		{
			[Token(Token = "0x6002EF7")]
			[Address(RVA = "0xC8CC28", Offset = "0xC8CC28", VA = "0xC8CC28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030C")]
		public static string region_code_kr
		{
			[Token(Token = "0x6002EF8")]
			[Address(RVA = "0xC8CCA8", Offset = "0xC8CCA8", VA = "0xC8CCA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030D")]
		public static string region_code_ru
		{
			[Token(Token = "0x6002EF9")]
			[Address(RVA = "0xC8CD28", Offset = "0xC8CD28", VA = "0xC8CD28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030E")]
		public static string region_code_rue
		{
			[Token(Token = "0x6002EFA")]
			[Address(RVA = "0xC8CDA8", Offset = "0xC8CDA8", VA = "0xC8CDA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030F")]
		public static string region_code_sa
		{
			[Token(Token = "0x6002EFB")]
			[Address(RVA = "0xC8CE28", Offset = "0xC8CE28", VA = "0xC8CE28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000310")]
		public static string region_code_us
		{
			[Token(Token = "0x6002EFC")]
			[Address(RVA = "0xC8CEA8", Offset = "0xC8CEA8", VA = "0xC8CEA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000311")]
		public static string region_code_usw
		{
			[Token(Token = "0x6002EFD")]
			[Address(RVA = "0xC8CF28", Offset = "0xC8CF28", VA = "0xC8CF28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		public static string region_code_za
		{
			[Token(Token = "0x6002EFE")]
			[Address(RVA = "0xC8CFA8", Offset = "0xC8CFA8", VA = "0xC8CFA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000313")]
		public static string room_members_menu_button_invite_friends
		{
			[Token(Token = "0x6002EFF")]
			[Address(RVA = "0xC8D028", Offset = "0xC8D028", VA = "0xC8D028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public static string room_members_menu_button_kick
		{
			[Token(Token = "0x6002F00")]
			[Address(RVA = "0xC8D0A8", Offset = "0xC8D0A8", VA = "0xC8D0A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public static string room_members_menu_button_start_game
		{
			[Token(Token = "0x6002F01")]
			[Address(RVA = "0xC8D128", Offset = "0xC8D128", VA = "0xC8D128")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public static string settings_menu_master
		{
			[Token(Token = "0x6002F02")]
			[Address(RVA = "0xC8D1A8", Offset = "0xC8D1A8", VA = "0xC8D1A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000317")]
		public static string settings_menu_microphone
		{
			[Token(Token = "0x6002F03")]
			[Address(RVA = "0xC8D228", Offset = "0xC8D228", VA = "0xC8D228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public static string settings_menu_music
		{
			[Token(Token = "0x6002F04")]
			[Address(RVA = "0xC8D2A8", Offset = "0xC8D2A8", VA = "0xC8D2A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000319")]
		public static string settings_menu_sfx
		{
			[Token(Token = "0x6002F05")]
			[Address(RVA = "0xC8D328", Offset = "0xC8D328", VA = "0xC8D328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031A")]
		public static string settings_menu_tittle
		{
			[Token(Token = "0x6002F06")]
			[Address(RVA = "0xC8D3A8", Offset = "0xC8D3A8", VA = "0xC8D3A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		public static string settings_menu_voice
		{
			[Token(Token = "0x6002F07")]
			[Address(RVA = "0xC8D428", Offset = "0xC8D428", VA = "0xC8D428")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200079B")]
	public static class ScriptTerms
	{
		[Token(Token = "0x4002776")]
		public const string RESTART = "RESTART";

		[Token(Token = "0x4002777")]
		public const string START = "START";

		[Token(Token = "0x4002778")]
		public const string card_divide_all_money_description = "card_divide_all_money_description";

		[Token(Token = "0x4002779")]
		public const string card_extra_live_description = "card_extra_live_description";

		[Token(Token = "0x400277A")]
		public const string card_protect_yourself_description = "card_protect yourself_description";

		[Token(Token = "0x400277B")]
		public const string card_second_bullet_description = "card_second_bullet_description";

		[Token(Token = "0x400277C")]
		public const string card_see_bullet_description = "card_see_bullet_description";

		[Token(Token = "0x400277D")]
		public const string card_set_target_description = "card_set_target_description";

		[Token(Token = "0x400277E")]
		public const string card_skip_turn_description = "card_skip_turn_description";

		[Token(Token = "0x400277F")]
		public const string card_spin_pistol_description = "card_spin_pistol_description";

		[Token(Token = "0x4002780")]
		public const string card_turm_move_direction_description = "card_turm_move_direction_description";

		[Token(Token = "0x4002781")]
		public const string card_undo_last_played_description = "card_undo_last_played_description";

		[Token(Token = "0x4002782")]
		public const string create_room_menu_button_private = "create_room_menu_button_private";

		[Token(Token = "0x4002783")]
		public const string create_room_menu_button_public = "create_room_menu_button_public";

		[Token(Token = "0x4002784")]
		public const string create_room_menu_title = "create_room_menu_title";

		[Token(Token = "0x4002785")]
		public const string find_game_menu_title = "find_game_menu_title";

		[Token(Token = "0x4002786")]
		public const string hints_gun_pointer_no_bullet = "hints_gun_pointer_no_bullet";

		[Token(Token = "0x4002787")]
		public const string hints_gun_pointer_no_coins = "hints_gun_pointer_no_coins";

		[Token(Token = "0x4002788")]
		public const string hints_gun_pointer_not_public_enemy = "hints_gun_pointer_not_public_enemy";

		[Token(Token = "0x4002789")]
		public const string hints_gun_pointer_protected_player = "hints_gun_pointer_protected_player";

		[Token(Token = "0x400278A")]
		public const string hints_gun_pointer_shoot_youself = "hints_gun_pointer_shoot_youself";

		[Token(Token = "0x400278B")]
		public const string hints_recharging_close_barrel = "hints_recharging_close_barrel";

		[Token(Token = "0x400278C")]
		public const string hints_recharging_insert_bullet = "hints_recharging_insert_bullet";

		[Token(Token = "0x400278D")]
		public const string hints_recharging_open_barrel = "hints_recharging_open_barrel";

		[Token(Token = "0x400278E")]
		public const string hints_recharging_spin_barrel = "hints_recharging_spin_barrel";

		[Token(Token = "0x400278F")]
		public const string hints_recharging_take_bullet = "hints_recharging_take_bullet";

		[Token(Token = "0x4002790")]
		public const string hints_take_revolver = "hints_take_revolver";

		[Token(Token = "0x4002791")]
		public const string invite_from_friend_menu_button_accept = "invite_from_friend_menu_button_accept";

		[Token(Token = "0x4002792")]
		public const string invite_from_friend_menu_description_part1 = "invite_from_friend_menu_description_part1";

		[Token(Token = "0x4002793")]
		public const string invite_from_friend_menu_description_part2 = "invite_from_friend_menu_description_part2";

		[Token(Token = "0x4002794")]
		public const string invite_from_friend_menu_tittle = "invite_from_friend_menu_tittle";

		[Token(Token = "0x4002795")]
		public const string invite_menu_title = "invite_menu_title";

		[Token(Token = "0x4002796")]
		public const string main_menu_button_create_game = "main_menu_button_create_game";

		[Token(Token = "0x4002797")]
		public const string main_menu_button_find_game = "main_menu_button_find_game";

		[Token(Token = "0x4002798")]
		public const string main_menu_button_settings = "main_menu_button_settings";

		[Token(Token = "0x4002799")]
		public const string main_menu_ok = "main_menu_ok";

		[Token(Token = "0x400279A")]
		public const string main_menu_region = "main_menu_region";

		[Token(Token = "0x400279B")]
		public const string no_found_game_menu_create_game = "no_found_game_menu_create_game";

		[Token(Token = "0x400279C")]
		public const string no_found_game_menu_title = "no_found_game_menu_title";

		[Token(Token = "0x400279D")]
		public const string no_found_game_menu_try_again = "no_found_game_menu_try_again";

		[Token(Token = "0x400279E")]
		public const string offline_menu_button_play_offline = "offline_menu_button_play_offline";

		[Token(Token = "0x400279F")]
		public const string offline_menu_button_try_reconnect = "offline_menu_button_try_reconnect";

		[Token(Token = "0x40027A0")]
		public const string offline_menu_title = "offline_menu_title";

		[Token(Token = "0x40027A1")]
		public const string player_game_menu_button_mute_player = "player_game_menu_button_mute_player";

		[Token(Token = "0x40027A2")]
		public const string player_game_menu_button_restart_session = "player_game_menu_button_restart_session";

		[Token(Token = "0x40027A3")]
		public const string player_game_menu_kick_panel_button_kick = "player_game_menu_kick_panel_button_kick";

		[Token(Token = "0x40027A4")]
		public const string player_game_menu_kick_panel_tittle = "player_game_menu_kick_panel_tittle";

		[Token(Token = "0x40027A5")]
		public const string player_game_menu_mute_panel_button_mute = "player_game_menu_mute_panel_button_mute";

		[Token(Token = "0x40027A6")]
		public const string player_game_menu_mute_panel_button_unmute = "player_game_menu_mute_panel_button_unmute";

		[Token(Token = "0x40027A7")]
		public const string player_game_menu_mute_panel_tittle = "player_game_menu_mute_panel_tittle";

		[Token(Token = "0x40027A8")]
		public const string region_code_asia = "region_code_asia";

		[Token(Token = "0x40027A9")]
		public const string region_code_au = "region_code_au";

		[Token(Token = "0x40027AA")]
		public const string region_code_cae = "region_code_cae";

		[Token(Token = "0x40027AB")]
		public const string region_code_cn = "region_code_cn";

		[Token(Token = "0x40027AC")]
		public const string region_code_eu = "region_code_eu";

		[Token(Token = "0x40027AD")]
		public const string region_code_in = "region_code_in";

		[Token(Token = "0x40027AE")]
		public const string region_code_jp = "region_code_jp";

		[Token(Token = "0x40027AF")]
		public const string region_code_kr = "region_code_kr";

		[Token(Token = "0x40027B0")]
		public const string region_code_ru = "region_code_ru";

		[Token(Token = "0x40027B1")]
		public const string region_code_rue = "region_code_rue";

		[Token(Token = "0x40027B2")]
		public const string region_code_sa = "region_code_sa";

		[Token(Token = "0x40027B3")]
		public const string region_code_us = "region_code_us";

		[Token(Token = "0x40027B4")]
		public const string region_code_usw = "region_code_usw";

		[Token(Token = "0x40027B5")]
		public const string region_code_za = "region_code_za";

		[Token(Token = "0x40027B6")]
		public const string room_members_menu_button_invite_friends = "room_members_menu_button_invite_friends";

		[Token(Token = "0x40027B7")]
		public const string room_members_menu_button_kick = "room_members_menu_button_kick";

		[Token(Token = "0x40027B8")]
		public const string room_members_menu_button_start_game = "room_members_menu_button_start_game";

		[Token(Token = "0x40027B9")]
		public const string settings_menu_master = "settings_menu_master";

		[Token(Token = "0x40027BA")]
		public const string settings_menu_microphone = "settings_menu_microphone";

		[Token(Token = "0x40027BB")]
		public const string settings_menu_music = "settings_menu_music";

		[Token(Token = "0x40027BC")]
		public const string settings_menu_sfx = "settings_menu_sfx";

		[Token(Token = "0x40027BD")]
		public const string settings_menu_tittle = "settings_menu_tittle";

		[Token(Token = "0x40027BE")]
		public const string settings_menu_voice = "settings_menu_voice";
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x200079C")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x40027C0")]
		Array = 1,
		[Token(Token = "0x40027C1")]
		Class,
		[Token(Token = "0x40027C2")]
		Value,
		[Token(Token = "0x40027C3")]
		IntValue,
		[Token(Token = "0x40027C4")]
		DoubleValue,
		[Token(Token = "0x40027C5")]
		BoolValue,
		[Token(Token = "0x40027C6")]
		FloatValue
	}
	[Token(Token = "0x200079D")]
	public class JSONNode
	{
		[Token(Token = "0x200079E")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40027C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x17000328")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002F3C")]
				[Address(RVA = "0xC8F564", Offset = "0xC8F564", VA = "0xC8F564", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000329")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F3E")]
				[Address(RVA = "0xC8F5AC", Offset = "0xC8F5AC", VA = "0xC8F5AC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F39")]
			[Address(RVA = "0xC8D5F8", Offset = "0xC8D5F8", VA = "0xC8D5F8")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002F3A")]
			[Address(RVA = "0xC8F548", Offset = "0xC8F548", VA = "0xC8F548", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F3B")]
			[Address(RVA = "0xC8F54C", Offset = "0xC8F54C", VA = "0xC8F54C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F3D")]
			[Address(RVA = "0xC8F56C", Offset = "0xC8F56C", VA = "0xC8F56C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002F3F")]
			[Address(RVA = "0xC8F5B4", Offset = "0xC8F5B4", VA = "0xC8F5B4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002F40")]
			[Address(RVA = "0xC8F64C", Offset = "0xC8F64C", VA = "0xC8F64C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200079F")]
		[CompilerGenerated]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40027CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40027CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x40027CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x40027CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x1700032A")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002F46")]
				[Address(RVA = "0xC8FCB8", Offset = "0xC8FCB8", VA = "0xC8FCB8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F48")]
				[Address(RVA = "0xC8FD00", Offset = "0xC8FD00", VA = "0xC8FD00", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F41")]
			[Address(RVA = "0xC8D6B0", Offset = "0xC8D6B0", VA = "0xC8D6B0")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6002F42")]
			[Address(RVA = "0xC8F650", Offset = "0xC8F650", VA = "0xC8F650", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F43")]
			[Address(RVA = "0xC8F708", Offset = "0xC8F708", VA = "0xC8F708", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F44")]
			[Address(RVA = "0xC8FC08", Offset = "0xC8FC08", VA = "0xC8FC08")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002F45")]
			[Address(RVA = "0xC8FB58", Offset = "0xC8FB58", VA = "0xC8FB58")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002F47")]
			[Address(RVA = "0xC8FCC0", Offset = "0xC8FCC0", VA = "0xC8FCC0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002F49")]
			[Address(RVA = "0xC8FD08", Offset = "0xC8FD08", VA = "0xC8FD08", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002F4A")]
			[Address(RVA = "0xC8FDB4", Offset = "0xC8FDB4", VA = "0xC8FDB4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		public virtual JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002F09")]
			[Address(RVA = "0xC8D4AC", Offset = "0xC8D4AC", VA = "0xC8D4AC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F0A")]
			[Address(RVA = "0xC8D4B4", Offset = "0xC8D4B4", VA = "0xC8D4B4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700031D")]
		public virtual JSONNode this[string aKey]
		{
			[Token(Token = "0x6002F0B")]
			[Address(RVA = "0xC8D4B8", Offset = "0xC8D4B8", VA = "0xC8D4B8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F0C")]
			[Address(RVA = "0xC8D4C0", Offset = "0xC8D4C0", VA = "0xC8D4C0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700031E")]
		public virtual string Value
		{
			[Token(Token = "0x6002F0D")]
			[Address(RVA = "0xC8D4C4", Offset = "0xC8D4C4", VA = "0xC8D4C4", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F0E")]
			[Address(RVA = "0xC8D504", Offset = "0xC8D504", VA = "0xC8D504", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700031F")]
		public virtual int Count
		{
			[Token(Token = "0x6002F0F")]
			[Address(RVA = "0xC8D508", Offset = "0xC8D508", VA = "0xC8D508", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000320")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6002F14")]
			[Address(RVA = "0xC8D588", Offset = "0xC8D588", VA = "0xC8D588", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__17))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000321")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6002F15")]
			[Address(RVA = "0xC8D62C", Offset = "0xC8D62C", VA = "0xC8D62C")]
			[IteratorStateMachine(typeof(<get_DeepChilds>d__19))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		public virtual int AsInt
		{
			[Token(Token = "0x6002F18")]
			[Address(RVA = "0xC8D764", Offset = "0xC8D764", VA = "0xC8D764", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002F19")]
			[Address(RVA = "0xC8D798", Offset = "0xC8D798", VA = "0xC8D798", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6002F1A")]
			[Address(RVA = "0xC8D7D4", Offset = "0xC8D7D4", VA = "0xC8D7D4", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002F1B")]
			[Address(RVA = "0xC8D80C", Offset = "0xC8D80C", VA = "0xC8D80C", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6002F1C")]
			[Address(RVA = "0xC8D848", Offset = "0xC8D848", VA = "0xC8D848", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002F1D")]
			[Address(RVA = "0xC8D880", Offset = "0xC8D880", VA = "0xC8D880", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000325")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6002F1E")]
			[Address(RVA = "0xC8D8BC", Offset = "0xC8D8BC", VA = "0xC8D8BC", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002F1F")]
			[Address(RVA = "0xC8D974", Offset = "0xC8D974", VA = "0xC8D974", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000326")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6002F20")]
			[Address(RVA = "0xC8D9EC", Offset = "0xC8D9EC", VA = "0xC8D9EC", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000327")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6002F21")]
			[Address(RVA = "0xC8DA64", Offset = "0xC8DA64", VA = "0xC8DA64", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F08")]
		[Address(RVA = "0xC8D4A8", Offset = "0xC8D4A8", VA = "0xC8D4A8", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0xC8D510", Offset = "0xC8D510", VA = "0xC8D510", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0xC8D570", Offset = "0xC8D570", VA = "0xC8D570", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6002F12")]
		[Address(RVA = "0xC8D578", Offset = "0xC8D578", VA = "0xC8D578", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6002F13")]
		[Address(RVA = "0xC8D580", Offset = "0xC8D580", VA = "0xC8D580", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6002F16")]
		[Address(RVA = "0xC8D6E4", Offset = "0xC8D6E4", VA = "0xC8D6E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0xC8D724", Offset = "0xC8D724", VA = "0xC8D724", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002F22")]
		[Address(RVA = "0xC8DADC", Offset = "0xC8DADC", VA = "0xC8DADC")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0xC8DB7C", Offset = "0xC8DB7C", VA = "0xC8DB7C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0xC8DBB8", Offset = "0xC8DBB8", VA = "0xC8DBB8")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F25")]
		[Address(RVA = "0xC8DC40", Offset = "0xC8DC40", VA = "0xC8DC40")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0xC8DC58", Offset = "0xC8DC58", VA = "0xC8DC58", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F27")]
		[Address(RVA = "0xC8DC64", Offset = "0xC8DC64", VA = "0xC8DC64", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002F28")]
		[Address(RVA = "0xC8DC6C", Offset = "0xC8DC6C", VA = "0xC8DC6C")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6002F29")]
		[Address(RVA = "0xC8DE38", Offset = "0xC8DE38", VA = "0xC8DE38")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6002F2A")]
		[Address(RVA = "0xC8E6D0", Offset = "0xC8E6D0", VA = "0xC8E6D0", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002F2B")]
		[Address(RVA = "0xC8E6D4", Offset = "0xC8E6D4", VA = "0xC8E6D4")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6002F2C")]
		[Address(RVA = "0xC8E754", Offset = "0xC8E754", VA = "0xC8E754")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0xC8E7A4", Offset = "0xC8E7A4", VA = "0xC8E7A4")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0xC8E7F4", Offset = "0xC8E7F4", VA = "0xC8E7F4")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0xC8E844", Offset = "0xC8E844", VA = "0xC8E844")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0xC8EA14", Offset = "0xC8EA14", VA = "0xC8EA14")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6002F31")]
		[Address(RVA = "0xC8EC14", Offset = "0xC8EC14", VA = "0xC8EC14")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6002F32")]
		[Address(RVA = "0xC8F08C", Offset = "0xC8F08C", VA = "0xC8F08C")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0xC8F0DC", Offset = "0xC8F0DC", VA = "0xC8F0DC")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0xC8F12C", Offset = "0xC8F12C", VA = "0xC8F12C")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002F35")]
		[Address(RVA = "0xC8F17C", Offset = "0xC8F17C", VA = "0xC8F17C")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002F36")]
		[Address(RVA = "0xC8F310", Offset = "0xC8F310", VA = "0xC8F310")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6002F37")]
		[Address(RVA = "0xC8F48C", Offset = "0xC8F48C", VA = "0xC8F48C")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002F38")]
		[Address(RVA = "0xC8F540", Offset = "0xC8F540", VA = "0xC8F540")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x20007A0")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x20007A1")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40027D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40027D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x40027D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000330")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002F5D")]
				[Address(RVA = "0xC90BB0", Offset = "0xC90BB0", VA = "0xC90BB0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000331")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F5F")]
				[Address(RVA = "0xC90BF8", Offset = "0xC90BF8", VA = "0xC90BF8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F59")]
			[Address(RVA = "0xC90358", Offset = "0xC90358", VA = "0xC90358")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002F5A")]
			[Address(RVA = "0xC9099C", Offset = "0xC9099C", VA = "0xC9099C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F5B")]
			[Address(RVA = "0xC909B8", Offset = "0xC909B8", VA = "0xC909B8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F5C")]
			[Address(RVA = "0xC90B60", Offset = "0xC90B60", VA = "0xC90B60")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002F5E")]
			[Address(RVA = "0xC90BB8", Offset = "0xC90BB8", VA = "0xC90BB8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002F60")]
			[Address(RVA = "0xC90C00", Offset = "0xC90C00", VA = "0xC90C00", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002F61")]
			[Address(RVA = "0xC90CAC", Offset = "0xC90CAC", VA = "0xC90CAC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20007A2")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x40027D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000332")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002F66")]
				[Address(RVA = "0xC90EC4", Offset = "0xC90EC4", VA = "0xC90EC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F68")]
				[Address(RVA = "0xC90F0C", Offset = "0xC90F0C", VA = "0xC90F0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F62")]
			[Address(RVA = "0xC90400", Offset = "0xC90400", VA = "0xC90400")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002F63")]
			[Address(RVA = "0xC90CB0", Offset = "0xC90CB0", VA = "0xC90CB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F64")]
			[Address(RVA = "0xC90CCC", Offset = "0xC90CCC", VA = "0xC90CCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F65")]
			[Address(RVA = "0xC90E74", Offset = "0xC90E74", VA = "0xC90E74")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002F67")]
			[Address(RVA = "0xC90ECC", Offset = "0xC90ECC", VA = "0xC90ECC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x1700032C")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002F4B")]
			[Address(RVA = "0xC8FDB8", Offset = "0xC8FDB8", VA = "0xC8FDB8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F4C")]
			[Address(RVA = "0xC8FEA8", Offset = "0xC8FEA8", VA = "0xC8FEA8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002F4D")]
			[Address(RVA = "0xC8FFB8", Offset = "0xC8FFB8", VA = "0xC8FFB8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F4E")]
			[Address(RVA = "0xC90018", Offset = "0xC90018", VA = "0xC90018", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700032E")]
		public override int Count
		{
			[Token(Token = "0x6002F4F")]
			[Address(RVA = "0xC900C8", Offset = "0xC900C8", VA = "0xC900C8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700032F")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6002F53")]
			[Address(RVA = "0xC902D4", Offset = "0xC902D4", VA = "0xC902D4", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__13))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F50")]
		[Address(RVA = "0xC90110", Offset = "0xC90110", VA = "0xC90110", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F51")]
		[Address(RVA = "0xC901C0", Offset = "0xC901C0", VA = "0xC901C0", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6002F52")]
		[Address(RVA = "0xC90274", Offset = "0xC90274", VA = "0xC90274", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6002F54")]
		[Address(RVA = "0xC9038C", Offset = "0xC9038C", VA = "0xC9038C", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__14))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002F55")]
		[Address(RVA = "0xC90428", Offset = "0xC90428", VA = "0xC90428", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F56")]
		[Address(RVA = "0xC90640", Offset = "0xC90640", VA = "0xC90640", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0xC908C0", Offset = "0xC908C0", VA = "0xC908C0", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0xC8E648", Offset = "0xC8E648", VA = "0xC8E648")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20007A3")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x20007A5")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x40027DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40027DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x40027E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000338")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002F7E")]
				[Address(RVA = "0xC92628", Offset = "0xC92628", VA = "0xC92628", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000339")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F80")]
				[Address(RVA = "0xC92670", Offset = "0xC92670", VA = "0xC92670", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F7A")]
			[Address(RVA = "0xC917C4", Offset = "0xC917C4", VA = "0xC917C4")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002F7B")]
			[Address(RVA = "0xC92400", Offset = "0xC92400", VA = "0xC92400", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F7C")]
			[Address(RVA = "0xC9241C", Offset = "0xC9241C", VA = "0xC9241C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F7D")]
			[Address(RVA = "0xC925D8", Offset = "0xC925D8", VA = "0xC925D8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002F7F")]
			[Address(RVA = "0xC92630", Offset = "0xC92630", VA = "0xC92630", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002F81")]
			[Address(RVA = "0xC92678", Offset = "0xC92678", VA = "0xC92678", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002F82")]
			[Address(RVA = "0xC92724", Offset = "0xC92724", VA = "0xC92724", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20007A6")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x40027E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700033A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002F87")]
				[Address(RVA = "0xC92978", Offset = "0xC92978", VA = "0xC92978", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F89")]
				[Address(RVA = "0xC929C0", Offset = "0xC929C0", VA = "0xC929C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F83")]
			[Address(RVA = "0xC9186C", Offset = "0xC9186C", VA = "0xC9186C")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002F84")]
			[Address(RVA = "0xC92728", Offset = "0xC92728", VA = "0xC92728", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F85")]
			[Address(RVA = "0xC92744", Offset = "0xC92744", VA = "0xC92744", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F86")]
			[Address(RVA = "0xC92928", Offset = "0xC92928", VA = "0xC92928")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002F88")]
			[Address(RVA = "0xC92980", Offset = "0xC92980", VA = "0xC92980", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000334")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002F69")]
			[Address(RVA = "0xC90F14", Offset = "0xC90F14", VA = "0xC90F14", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F6A")]
			[Address(RVA = "0xC9101C", Offset = "0xC9101C", VA = "0xC9101C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002F6B")]
			[Address(RVA = "0xC910E8", Offset = "0xC910E8", VA = "0xC910E8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F6C")]
			[Address(RVA = "0xC91188", Offset = "0xC91188", VA = "0xC91188", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public override int Count
		{
			[Token(Token = "0x6002F6D")]
			[Address(RVA = "0xC91264", Offset = "0xC91264", VA = "0xC91264", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000337")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6002F72")]
			[Address(RVA = "0xC91740", Offset = "0xC91740", VA = "0xC91740", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__14))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F6E")]
		[Address(RVA = "0xC912B4", Offset = "0xC912B4", VA = "0xC912B4", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F6F")]
		[Address(RVA = "0xC913C8", Offset = "0xC913C8", VA = "0xC913C8", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6002F70")]
		[Address(RVA = "0xC9148C", Offset = "0xC9148C", VA = "0xC9148C", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6002F71")]
		[Address(RVA = "0xC91568", Offset = "0xC91568", VA = "0xC91568", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6002F73")]
		[Address(RVA = "0xC917F8", Offset = "0xC917F8", VA = "0xC917F8", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__15))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002F74")]
		[Address(RVA = "0xC91894", Offset = "0xC91894", VA = "0xC91894", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F75")]
		[Address(RVA = "0xC91CD8", Offset = "0xC91CD8", VA = "0xC91CD8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002F76")]
		[Address(RVA = "0xC9219C", Offset = "0xC9219C", VA = "0xC9219C", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002F77")]
		[Address(RVA = "0xC8E554", Offset = "0xC8E554", VA = "0xC8E554")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20007A7")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x1700033C")]
		public override string Value
		{
			[Token(Token = "0x6002F8A")]
			[Address(RVA = "0xC929C8", Offset = "0xC929C8", VA = "0xC929C8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F8B")]
			[Address(RVA = "0xC929D0", Offset = "0xC929D0", VA = "0xC929D0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0xC8DB4C", Offset = "0xC8DB4C", VA = "0xC8DB4C")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6002F8D")]
		[Address(RVA = "0xC8F054", Offset = "0xC8F054", VA = "0xC8F054")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0xC8EFE4", Offset = "0xC8EFE4", VA = "0xC8EFE4")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0xC8F01C", Offset = "0xC8F01C", VA = "0xC8F01C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0xC8EFAC", Offset = "0xC8EFAC", VA = "0xC8EFAC")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0xC929D8", Offset = "0xC929D8", VA = "0xC929D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F92")]
		[Address(RVA = "0xC92A30", Offset = "0xC92A30", VA = "0xC92A30", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0xC92A88", Offset = "0xC92A88", VA = "0xC92A88", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20007A8")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x40027E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x1700033D")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002F97")]
			[Address(RVA = "0xC92DB8", Offset = "0xC92DB8", VA = "0xC92DB8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F98")]
			[Address(RVA = "0xC92E18", Offset = "0xC92E18", VA = "0xC92E18", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002F99")]
			[Address(RVA = "0xC92E98", Offset = "0xC92E98", VA = "0xC92E98", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F9A")]
			[Address(RVA = "0xC92F08", Offset = "0xC92F08", VA = "0xC92F08", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public override int AsInt
		{
			[Token(Token = "0x6002FA3")]
			[Address(RVA = "0xC93168", Offset = "0xC93168", VA = "0xC93168", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002FA4")]
			[Address(RVA = "0xC931EC", Offset = "0xC931EC", VA = "0xC931EC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000340")]
		public override float AsFloat
		{
			[Token(Token = "0x6002FA5")]
			[Address(RVA = "0xC93274", Offset = "0xC93274", VA = "0xC93274", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002FA6")]
			[Address(RVA = "0xC932F8", Offset = "0xC932F8", VA = "0xC932F8", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000341")]
		public override double AsDouble
		{
			[Token(Token = "0x6002FA7")]
			[Address(RVA = "0xC93380", Offset = "0xC93380", VA = "0xC93380", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002FA8")]
			[Address(RVA = "0xC93404", Offset = "0xC93404", VA = "0xC93404", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		public override bool AsBool
		{
			[Token(Token = "0x6002FA9")]
			[Address(RVA = "0xC9348C", Offset = "0xC9348C", VA = "0xC9348C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002FAA")]
			[Address(RVA = "0xC93510", Offset = "0xC93510", VA = "0xC93510", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6002FAB")]
			[Address(RVA = "0xC93598", Offset = "0xC93598", VA = "0xC93598", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000344")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6002FAC")]
			[Address(RVA = "0xC93600", Offset = "0xC93600", VA = "0xC93600", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0xC8FE68", Offset = "0xC8FE68", VA = "0xC8FE68")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6002F95")]
		[Address(RVA = "0xC90FD8", Offset = "0xC90FD8", VA = "0xC90FD8")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6002F96")]
		[Address(RVA = "0xC92D58", Offset = "0xC92D58", VA = "0xC92D58")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0xC92F90", Offset = "0xC92F90", VA = "0xC92F90", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0xC93010", Offset = "0xC93010", VA = "0xC93010", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002F9D")]
		[Address(RVA = "0xC93098", Offset = "0xC93098", VA = "0xC93098")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0xC930B0", Offset = "0xC930B0", VA = "0xC930B0")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0xC930C8", Offset = "0xC930C8", VA = "0xC930C8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FA0")]
		[Address(RVA = "0xC930E0", Offset = "0xC930E0", VA = "0xC930E0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002FA1")]
		[Address(RVA = "0xC930E8", Offset = "0xC930E8", VA = "0xC930E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0xC93128", Offset = "0xC93128", VA = "0xC93128", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20007A9")]
	public static class JSON
	{
		[Token(Token = "0x6002FAD")]
		[Address(RVA = "0xC93668", Offset = "0xC93668", VA = "0xC93668")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace SaloonSpin
{
	[Token(Token = "0x20007AA")]
	public class HandAnchorPositionSetter : MonoBehaviour
	{
		[Token(Token = "0x40027E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Dama")]
		private Vector3 damaPosition;

		[Token(Token = "0x40027E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 damaRotation;

		[Token(Token = "0x40027EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3 damaPosition_newSnap;

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Vector3 damaRotation_newSnap;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("Gentelman")]
		private Vector3 gentelmanPosition;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private Vector3 gentelmanRotation;

		[Token(Token = "0x40027EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Vector3 gentelmanPosition_newSnap;

		[Token(Token = "0x40027EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private Vector3 gentelmanRotation_newSnap;

		[Token(Token = "0x40027F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Header("Bandit")]
		private Vector3 banditPosition;

		[Token(Token = "0x40027F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private Vector3 banditRotation;

		[Token(Token = "0x40027F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Vector3 banditPosition_newSnap;

		[Token(Token = "0x40027F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private Vector3 banditRotation_newSnap;

		[Token(Token = "0x40027F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Polisman")]
		[SerializeField]
		private Vector3 policemanPosition;

		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private Vector3 policemanRotation;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Vector3 policemanPosition_newSnap;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private Vector3 policemanRotation_newSnap;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[Header("Indian")]
		private Vector3 indPosition;

		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private Vector3 indRotation;

		[Token(Token = "0x40027FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Vector3 indPosition_newSnap;

		[Token(Token = "0x40027FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private Vector3 indRotation_newSnap;

		[Token(Token = "0x40027FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Header("Ranger")]
		[SerializeField]
		private Vector3 rangerPosition;

		[Token(Token = "0x40027FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private Vector3 rangerRotation;

		[Token(Token = "0x40027FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Vector3 rangerPosition_newSnap;

		[Token(Token = "0x40027FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		private Vector3 rangerRotation_newSnap;

		[Token(Token = "0x4002800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _transform;

		[Token(Token = "0x6002FAE")]
		[Address(RVA = "0xC9366C", Offset = "0xC9366C", VA = "0xC9366C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002FAF")]
		[Address(RVA = "0xC936A0", Offset = "0xC936A0", VA = "0xC936A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0xC937A0", Offset = "0xC937A0", VA = "0xC937A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0xC938A0", Offset = "0xC938A0", VA = "0xC938A0")]
		private void PlayersTurnSwithed(GameState state)
		{
		}

		[Token(Token = "0x6002FB2")]
		[Address(RVA = "0xC93974", Offset = "0xC93974", VA = "0xC93974")]
		public void UpdatePositionAndRotation(PlayerType pType)
		{
		}

		[Token(Token = "0x6002FB3")]
		[Address(RVA = "0xC93ACC", Offset = "0xC93ACC", VA = "0xC93ACC")]
		public Tuple<Vector3, Vector3> GetPistolSnapPosByType(PlayerType pType)
		{
			return null;
		}

		[Token(Token = "0x6002FB4")]
		[Address(RVA = "0xC93C74", Offset = "0xC93C74", VA = "0xC93C74")]
		[ContextMenu("SaveDama")]
		private void saveAnchorDama()
		{
		}

		[Token(Token = "0x6002FB5")]
		[Address(RVA = "0xC93CC4", Offset = "0xC93CC4", VA = "0xC93CC4")]
		[ContextMenu("SaveGentelman")]
		private void saveAnchorGentelman()
		{
		}

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0xC93D14", Offset = "0xC93D14", VA = "0xC93D14")]
		[ContextMenu("SaveBandit")]
		private void saveAnchorBandit()
		{
		}

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0xC93D64", Offset = "0xC93D64", VA = "0xC93D64")]
		[ContextMenu("SavePolisman")]
		private void saveAnchorPolisman()
		{
		}

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0xC93DB4", Offset = "0xC93DB4", VA = "0xC93DB4")]
		[ContextMenu("SaveIndian")]
		private void saveAnchorind()
		{
		}

		[Token(Token = "0x6002FB9")]
		[Address(RVA = "0xC93E04", Offset = "0xC93E04", VA = "0xC93E04")]
		[ContextMenu("SaveRanger")]
		private void saveAnchorRanger()
		{
		}

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0xC93E5C", Offset = "0xC93E5C", VA = "0xC93E5C")]
		public HandAnchorPositionSetter()
		{
		}
	}
	[Token(Token = "0x20007AB")]
	public class Head : MonoBehaviour
	{
		[Token(Token = "0x4002801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Outline outliner;

		[Token(Token = "0x4002802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool aimingEffectOn;

		[Token(Token = "0x4002803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent AimAtMyself;

		[Token(Token = "0x4002804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent StopAimAtMyself;

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0xC93E64", Offset = "0xC93E64", VA = "0xC93E64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0xC941D4", Offset = "0xC941D4", VA = "0xC941D4")]
		public void AimingEffectTurnOn()
		{
		}

		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0xC941A0", Offset = "0xC941A0", VA = "0xC941A0")]
		public void AimingEffectTurnOff()
		{
		}

		[Token(Token = "0x6002FBE")]
		[Address(RVA = "0xC94214", Offset = "0xC94214", VA = "0xC94214")]
		public Head()
		{
		}
	}
	[Token(Token = "0x20007AD")]
	public class CardsVFX : MonoBehaviour
	{
		[Token(Token = "0x20007AE")]
		[CompilerGenerated]
		private sealed class <Show>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400281C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400281D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400281E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject obj;

			[Token(Token = "0x400281F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x4002820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TweenScale <scale>5__2;

			[Token(Token = "0x17000348")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002FDA")]
				[Address(RVA = "0xC94FDC", Offset = "0xC94FDC", VA = "0xC94FDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000349")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002FDC")]
				[Address(RVA = "0xC95024", Offset = "0xC95024", VA = "0xC95024", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002FD7")]
			[Address(RVA = "0xC9490C", Offset = "0xC9490C", VA = "0xC9490C")]
			[DebuggerHidden]
			public <Show>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6002FD8")]
			[Address(RVA = "0xC94D18", Offset = "0xC94D18", VA = "0xC94D18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002FD9")]
			[Address(RVA = "0xC94D1C", Offset = "0xC94D1C", VA = "0xC94D1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002FDB")]
			[Address(RVA = "0xC94FE4", Offset = "0xC94FE4", VA = "0xC94FE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007AF")]
		[CompilerGenerated]
		private sealed class <TurnMoveDirection>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CardsVFX <>4__this;

			[Token(Token = "0x1700034A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002FE0")]
				[Address(RVA = "0xC95108", Offset = "0xC95108", VA = "0xC95108", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002FE2")]
				[Address(RVA = "0xC95150", Offset = "0xC95150", VA = "0xC95150", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002FDD")]
			[Address(RVA = "0xC94934", Offset = "0xC94934", VA = "0xC94934")]
			[DebuggerHidden]
			public <TurnMoveDirection>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6002FDE")]
			[Address(RVA = "0xC9502C", Offset = "0xC9502C", VA = "0xC9502C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002FDF")]
			[Address(RVA = "0xC95030", Offset = "0xC95030", VA = "0xC95030", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002FE1")]
			[Address(RVA = "0xC95110", Offset = "0xC95110", VA = "0xC95110", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007B0")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x4002824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform target;

			[Token(Token = "0x6002FE3")]
			[Address(RVA = "0xC95158", Offset = "0xC95158", VA = "0xC95158")]
			public <>c__DisplayClass37_0()
			{
			}

			[Token(Token = "0x6002FE4")]
			[Address(RVA = "0xC95160", Offset = "0xC95160", VA = "0xC95160")]
			internal bool <CalculateOffsets>b__1(FollowPlayerEffect e)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20007B2")]
		[CompilerGenerated]
		private sealed class <CalculateOffsets>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002828")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002829")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private <>c__DisplayClass37_0 <>8__1;

			[Token(Token = "0x400282A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CardsVFX <>4__this;

			[Token(Token = "0x400282B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlayingCardType cType;

			[Token(Token = "0x1700034C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002FEB")]
				[Address(RVA = "0xC958DC", Offset = "0xC958DC", VA = "0xC958DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002FED")]
				[Address(RVA = "0xC95924", Offset = "0xC95924", VA = "0xC95924", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002FE8")]
			[Address(RVA = "0xC94CE8", Offset = "0xC94CE8", VA = "0xC94CE8")]
			[DebuggerHidden]
			public <CalculateOffsets>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6002FE9")]
			[Address(RVA = "0xC9526C", Offset = "0xC9526C", VA = "0xC9526C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002FEA")]
			[Address(RVA = "0xC95270", Offset = "0xC95270", VA = "0xC95270", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002FEC")]
			[Address(RVA = "0xC958E4", Offset = "0xC958E4", VA = "0xC958E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Default card material")]
		public Material defaultCardMaterial;

		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Reverse Direction")]
		public GameObject reverseDirectionVFX;

		[Token(Token = "0x400280C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject reverseDirectionVFX_Table;

		[Token(Token = "0x400280D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Skip")]
		public GameObject skip;

		[Token(Token = "0x400280E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Cancel card")]
		public GameObject cancelCard;

		[Token(Token = "0x400280F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Divide all money")]
		public GameObject divideMoney;

		[Token(Token = "0x4002810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject particleContainer;

		[Token(Token = "0x4002811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem[] prtcls;

		[Token(Token = "0x4002812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource cashSound;

		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Sheriff protection")]
		public GameObject sheriffProtection;

		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Set Target")]
		public GameObject setTarget;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("SecondBullet")]
		public GameObject secondBullet;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("DrumCheck")]
		public GameObject drumCheck;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Extra life")]
		public GameObject extraLife;

		[Token(Token = "0x4002818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FollowPlayerEffect extraLifeEffect;

		[Token(Token = "0x4002819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FollowPlayerEffect playerAimEffect;

		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FollowPlayerEffect playerShieldEffect;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Coroutine showing;

		[Token(Token = "0x17000345")]
		public FollowPlayerEffect ExtraLifeEffect
		{
			[Token(Token = "0x6002FC5")]
			[Address(RVA = "0xC94364", Offset = "0xC94364", VA = "0xC94364")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FC6")]
			[Address(RVA = "0xC9436C", Offset = "0xC9436C", VA = "0xC9436C")]
			set
			{
			}
		}

		[Token(Token = "0x17000346")]
		public FollowPlayerEffect PlayerAimEffect
		{
			[Token(Token = "0x6002FC7")]
			[Address(RVA = "0xC94420", Offset = "0xC94420", VA = "0xC94420")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FC8")]
			[Address(RVA = "0xC94428", Offset = "0xC94428", VA = "0xC94428")]
			set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public FollowPlayerEffect PlayerShieldEffect
		{
			[Token(Token = "0x6002FC9")]
			[Address(RVA = "0xC94458", Offset = "0xC94458", VA = "0xC94458")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FCA")]
			[Address(RVA = "0xC94460", Offset = "0xC94460", VA = "0xC94460")]
			set
			{
			}
		}

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0xC94490", Offset = "0xC94490", VA = "0xC94490")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0xC944F0", Offset = "0xC944F0", VA = "0xC944F0")]
		private void HideAllEffects()
		{
		}

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0xC945E4", Offset = "0xC945E4", VA = "0xC945E4")]
		[PunRPC]
		public void EnableVFX(int _type)
		{
		}

		[Token(Token = "0x6002FCE")]
		[Address(RVA = "0xC948E4", Offset = "0xC948E4", VA = "0xC948E4")]
		public void SetRefference(FollowPlayerEffect refference, PlayingCardType cType)
		{
		}

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0xC947EC", Offset = "0xC947EC", VA = "0xC947EC")]
		[IteratorStateMachine(typeof(<Show>d__31))]
		private IEnumerator Show(GameObject obj, float time = 2f)
		{
			return null;
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0xC94870", Offset = "0xC94870", VA = "0xC94870")]
		[IteratorStateMachine(typeof(<TurnMoveDirection>d__32))]
		private IEnumerator TurnMoveDirection()
		{
			return null;
		}

		[Token(Token = "0x6002FD1")]
		[Address(RVA = "0xC9495C", Offset = "0xC9495C", VA = "0xC9495C")]
		public void EnablingEffects(string userID, bool enable)
		{
		}

		[Token(Token = "0x6002FD2")]
		[Address(RVA = "0xC94B08", Offset = "0xC94B08", VA = "0xC94B08")]
		private void ExtraLife(bool enable)
		{
		}

		[Token(Token = "0x6002FD3")]
		[Address(RVA = "0xC94BA8", Offset = "0xC94BA8", VA = "0xC94BA8")]
		private void PlayerAim(bool enable)
		{
		}

		[Token(Token = "0x6002FD4")]
		[Address(RVA = "0xC94C48", Offset = "0xC94C48", VA = "0xC94C48")]
		private void PlayerShield(bool enable)
		{
		}

		[Token(Token = "0x6002FD5")]
		[Address(RVA = "0xC9439C", Offset = "0xC9439C", VA = "0xC9439C")]
		[IteratorStateMachine(typeof(<CalculateOffsets>d__37))]
		private IEnumerator CalculateOffsets(PlayingCardType cType)
		{
			return null;
		}

		[Token(Token = "0x6002FD6")]
		[Address(RVA = "0xC94D10", Offset = "0xC94D10", VA = "0xC94D10")]
		public CardsVFX()
		{
		}
	}
	[Token(Token = "0x20007B3")]
	public class FollowPlayerEffect : MonoBehaviour
	{
		[Token(Token = "0x400282C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float Y_HeadOffset;

		[Token(Token = "0x400282D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public GameObject effectObject;

		[Token(Token = "0x400282E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayingCardType effect;

		[Token(Token = "0x4002832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool inited;

		[Token(Token = "0x1700034E")]
		public string TargetID
		{
			[Token(Token = "0x6002FEE")]
			[Address(RVA = "0xC9592C", Offset = "0xC9592C", VA = "0xC9592C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FEF")]
			[Address(RVA = "0xC95934", Offset = "0xC95934", VA = "0xC95934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public float X_Offset
		{
			[Token(Token = "0x6002FF0")]
			[Address(RVA = "0xC9593C", Offset = "0xC9593C", VA = "0xC9593C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002FF1")]
			[Address(RVA = "0xC95944", Offset = "0xC95944", VA = "0xC95944")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000350")]
		public float Z_Offset
		{
			[Token(Token = "0x6002FF2")]
			[Address(RVA = "0xC9594C", Offset = "0xC9594C", VA = "0xC9594C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002FF3")]
			[Address(RVA = "0xC95954", Offset = "0xC95954", VA = "0xC95954")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public Transform Target
		{
			[Token(Token = "0x6002FF4")]
			[Address(RVA = "0xC9595C", Offset = "0xC9595C", VA = "0xC9595C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FF5")]
			[Address(RVA = "0xC95964", Offset = "0xC95964", VA = "0xC95964")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public PlayingCardType Effect
		{
			[Token(Token = "0x6002FF6")]
			[Address(RVA = "0xC9596C", Offset = "0xC9596C", VA = "0xC9596C")]
			get
			{
				return default(PlayingCardType);
			}
		}

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0xC95974", Offset = "0xC95974", VA = "0xC95974")]
		public void SetTarget(Transform target, string id)
		{
		}

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0xC95AD4", Offset = "0xC95AD4", VA = "0xC95AD4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0xC95B60", Offset = "0xC95B60", VA = "0xC95B60")]
		[PunRPC]
		private void SetTargetID(string id)
		{
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0xC95838", Offset = "0xC95838", VA = "0xC95838")]
		public void SetOffset(float offset)
		{
		}

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0xC95B68", Offset = "0xC95B68", VA = "0xC95B68")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0xC95BC8", Offset = "0xC95BC8", VA = "0xC95BC8")]
		public FollowPlayerEffect()
		{
		}
	}
	[Token(Token = "0x20007B4")]
	public class PlayingCard : MonoBehaviourPunCallbacks, IPunObservable
	{
		[Token(Token = "0x20007B6")]
		[CompilerGenerated]
		private sealed class <DelayReturnCard>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400284F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCard <>4__this;

			[Token(Token = "0x17000358")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003025")]
				[Address(RVA = "0xC984DC", Offset = "0xC984DC", VA = "0xC984DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000359")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003027")]
				[Address(RVA = "0xC98524", Offset = "0xC98524", VA = "0xC98524", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003022")]
			[Address(RVA = "0xC98384", Offset = "0xC98384", VA = "0xC98384")]
			[DebuggerHidden]
			public <DelayReturnCard>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6003023")]
			[Address(RVA = "0xC983AC", Offset = "0xC983AC", VA = "0xC983AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003024")]
			[Address(RVA = "0xC983B0", Offset = "0xC983B0", VA = "0xC983B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003026")]
			[Address(RVA = "0xC984E4", Offset = "0xC984E4", VA = "0xC984E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007B7")]
		[CompilerGenerated]
		private sealed class <DelayDestroyCard>d__48 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCard <>4__this;

			[Token(Token = "0x1700035A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600302B")]
				[Address(RVA = "0xC98640", Offset = "0xC98640", VA = "0xC98640", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600302D")]
				[Address(RVA = "0xC98688", Offset = "0xC98688", VA = "0xC98688", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003028")]
			[Address(RVA = "0xC9852C", Offset = "0xC9852C", VA = "0xC9852C")]
			[DebuggerHidden]
			public <DelayDestroyCard>d__48(int <>1__state)
			{
			}

			[Token(Token = "0x6003029")]
			[Address(RVA = "0xC98554", Offset = "0xC98554", VA = "0xC98554", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600302A")]
			[Address(RVA = "0xC98558", Offset = "0xC98558", VA = "0xC98558", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600302C")]
			[Address(RVA = "0xC98648", Offset = "0xC98648", VA = "0xC98648", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int cardID;

		[Token(Token = "0x4002837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private PlayingCardType cardType;

		[Token(Token = "0x4002838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string cardDescription;

		[Token(Token = "0x4002839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool debug;

		[Token(Token = "0x400283A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody cardRigidbody;

		[Token(Token = "0x400283B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private new PhotonView photonView;

		[Token(Token = "0x400283C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRTK_InteractableObject interactableObject;

		[Token(Token = "0x400283F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4002840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4002841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Coroutine DelayReturning;

		[Token(Token = "0x4002842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool used;

		[Token(Token = "0x4002843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool npcCard;

		[Token(Token = "0x4002844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4002845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 startMarker;

		[Token(Token = "0x4002846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 endMarker;

		[Token(Token = "0x4002847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float startTime;

		[Token(Token = "0x4002848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float journeyLength;

		[Token(Token = "0x4002849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float speed;

		[Token(Token = "0x400284A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public UnityEvent OnCardUsed;

		[Token(Token = "0x400284B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public UnityEvent UseCardVFX;

		[Token(Token = "0x400284C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEvent UseCardFailed;

		[Token(Token = "0x17000353")]
		public bool IsCardMoving
		{
			[Token(Token = "0x6002FFD")]
			[Address(RVA = "0xC95BDC", Offset = "0xC95BDC", VA = "0xC95BDC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002FFE")]
			[Address(RVA = "0xC95BE4", Offset = "0xC95BE4", VA = "0xC95BE4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public string HolderUserID
		{
			[Token(Token = "0x6002FFF")]
			[Address(RVA = "0xC95BF0", Offset = "0xC95BF0", VA = "0xC95BF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003000")]
			[Address(RVA = "0xC95BF8", Offset = "0xC95BF8", VA = "0xC95BF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000355")]
		public PlayingCardType CardType
		{
			[Token(Token = "0x6003001")]
			[Address(RVA = "0xC95C00", Offset = "0xC95C00", VA = "0xC95C00")]
			get
			{
				return default(PlayingCardType);
			}
		}

		[Token(Token = "0x17000356")]
		public int CardPointIndex
		{
			[Token(Token = "0x6003002")]
			[Address(RVA = "0xC95C08", Offset = "0xC95C08", VA = "0xC95C08")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003003")]
			[Address(RVA = "0xC95C10", Offset = "0xC95C10", VA = "0xC95C10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public int CardNumber
		{
			[Token(Token = "0x6003004")]
			[Address(RVA = "0xC95C18", Offset = "0xC95C18", VA = "0xC95C18")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003005")]
			[Address(RVA = "0xC95C20", Offset = "0xC95C20", VA = "0xC95C20")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0xC95C28", Offset = "0xC95C28", VA = "0xC95C28", Slot = "54")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0xC95DF4", Offset = "0xC95DF4", VA = "0xC95DF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003008")]
		[Address(RVA = "0xC95EEC", Offset = "0xC95EEC", VA = "0xC95EEC")]
		private void Start()
		{
		}

		[Token(Token = "0x6003009")]
		[Address(RVA = "0xC96034", Offset = "0xC96034", VA = "0xC96034")]
		private void Update()
		{
		}

		[Token(Token = "0x600300A")]
		[Address(RVA = "0xC96088", Offset = "0xC96088", VA = "0xC96088")]
		private void DebugCardNotUsed(string msg)
		{
		}

		[Token(Token = "0x600300B")]
		[Address(RVA = "0xC9611C", Offset = "0xC9611C", VA = "0xC9611C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600300C")]
		[Address(RVA = "0xC96668", Offset = "0xC96668", VA = "0xC96668")]
		[PunRPC]
		private void RPC_CardUsing()
		{
		}

		[Token(Token = "0x600300D")]
		[Address(RVA = "0xC9667C", Offset = "0xC9667C", VA = "0xC9667C")]
		public void EnableNetworkSync(bool enable)
		{
		}

		[Token(Token = "0x600300E")]
		[Address(RVA = "0xC96718", Offset = "0xC96718", VA = "0xC96718")]
		[IteratorStateMachine(typeof(<DelayReturnCard>d__47))]
		private IEnumerator DelayReturnCard()
		{
			return null;
		}

		[Token(Token = "0x600300F")]
		[Address(RVA = "0xC9678C", Offset = "0xC9678C", VA = "0xC9678C")]
		[IteratorStateMachine(typeof(<DelayDestroyCard>d__48))]
		private IEnumerator DelayDestroyCard()
		{
			return null;
		}

		[Token(Token = "0x6003010")]
		[Address(RVA = "0xC9649C", Offset = "0xC9649C", VA = "0xC9649C")]
		private bool CheckCardSpecific()
		{
			return default(bool);
		}

		[Token(Token = "0x6003011")]
		[Address(RVA = "0xC96800", Offset = "0xC96800", VA = "0xC96800")]
		private bool LastCardCanBeCanceled()
		{
			return default(bool);
		}

		[Token(Token = "0x6003012")]
		[Address(RVA = "0xC9690C", Offset = "0xC9690C", VA = "0xC9690C")]
		[PunRPC]
		private void InitCard(int cardPointIndex, int cardNumber, int cardID)
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0xC96BF4", Offset = "0xC96BF4", VA = "0xC96BF4")]
		private void AddCardListeners(int cardPointIndex)
		{
		}

		[Token(Token = "0x6003014")]
		[Address(RVA = "0xC96BF8", Offset = "0xC96BF8", VA = "0xC96BF8")]
		public void CardGrabbed()
		{
		}

		[Token(Token = "0x6003015")]
		[Address(RVA = "0xC96DE8", Offset = "0xC96DE8", VA = "0xC96DE8")]
		public void CardUngrabbed()
		{
		}

		[Token(Token = "0x6003016")]
		[Address(RVA = "0xC96E6C", Offset = "0xC96E6C", VA = "0xC96E6C")]
		[PunRPC]
		private void ReinitCard()
		{
		}

		[Token(Token = "0x6003017")]
		[Address(RVA = "0xC96D08", Offset = "0xC96D08", VA = "0xC96D08")]
		private string GetLocalizeCardDescription(PlayingCardType playingCardType)
		{
			return null;
		}

		[Token(Token = "0x6003018")]
		[Address(RVA = "0xC96FF4", Offset = "0xC96FF4", VA = "0xC96FF4")]
		[PunRPC]
		private void SetHolderiD(string id)
		{
		}

		[Token(Token = "0x6003019")]
		[Address(RVA = "0xC96ADC", Offset = "0xC96ADC", VA = "0xC96ADC")]
		[PunRPC]
		public void ReturnCard()
		{
		}

		[Token(Token = "0x600301A")]
		[Address(RVA = "0xC96FFC", Offset = "0xC96FFC", VA = "0xC96FFC")]
		[PunRPC]
		private void StopMoving()
		{
		}

		[Token(Token = "0x600301B")]
		[Address(RVA = "0xC97004", Offset = "0xC97004", VA = "0xC97004")]
		[PunRPC]
		private void HideMeshCard()
		{
		}

		[Token(Token = "0x600301C")]
		[Address(RVA = "0xC96108", Offset = "0xC96108", VA = "0xC96108")]
		[PunRPC]
		private void RPC_UseCardFailed()
		{
		}

		[Token(Token = "0x600301D")]
		[Address(RVA = "0xC97060", Offset = "0xC97060", VA = "0xC97060")]
		public PlayingCard()
		{
		}
	}
	[Token(Token = "0x20007B8")]
	public class PlayingCardsManager : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x20007C2")]
		[CompilerGenerated]
		private sealed class <DealingCard>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002880")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002881")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002882")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCardsManager <>4__this;

			[Token(Token = "0x17000364")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600308B")]
				[Address(RVA = "0xC9D778", Offset = "0xC9D778", VA = "0xC9D778", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000365")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600308D")]
				[Address(RVA = "0xC9D7C0", Offset = "0xC9D7C0", VA = "0xC9D7C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003088")]
			[Address(RVA = "0xC9B39C", Offset = "0xC9B39C", VA = "0xC9B39C")]
			[DebuggerHidden]
			public <DealingCard>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6003089")]
			[Address(RVA = "0xC9D3FC", Offset = "0xC9D3FC", VA = "0xC9D3FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600308A")]
			[Address(RVA = "0xC9D400", Offset = "0xC9D400", VA = "0xC9D400", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600308C")]
			[Address(RVA = "0xC9D780", Offset = "0xC9D780", VA = "0xC9D780", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007C3")]
		[CompilerGenerated]
		private sealed class <RemoveCards>d__76 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002884")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002885")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCardsManager <>4__this;

			[Token(Token = "0x17000366")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003091")]
				[Address(RVA = "0xC9D934", Offset = "0xC9D934", VA = "0xC9D934", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000367")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003093")]
				[Address(RVA = "0xC9D97C", Offset = "0xC9D97C", VA = "0xC9D97C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600308E")]
			[Address(RVA = "0xC9B580", Offset = "0xC9B580", VA = "0xC9B580")]
			[DebuggerHidden]
			public <RemoveCards>d__76(int <>1__state)
			{
			}

			[Token(Token = "0x600308F")]
			[Address(RVA = "0xC9D7C8", Offset = "0xC9D7C8", VA = "0xC9D7C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003090")]
			[Address(RVA = "0xC9D7CC", Offset = "0xC9D7CC", VA = "0xC9D7CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003092")]
			[Address(RVA = "0xC9D93C", Offset = "0xC9D93C", VA = "0xC9D93C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007C4")]
		[CompilerGenerated]
		private sealed class <CreateCards>d__78 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCardsManager <>4__this;

			[Token(Token = "0x4002889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<PlayingCardPrefab> card_prefabs;

			[Token(Token = "0x400288A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <instPos>5__2;

			[Token(Token = "0x400288B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__3;

			[Token(Token = "0x17000368")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003097")]
				[Address(RVA = "0xC9E220", Offset = "0xC9E220", VA = "0xC9E220", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000369")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003099")]
				[Address(RVA = "0xC9E268", Offset = "0xC9E268", VA = "0xC9E268", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003094")]
			[Address(RVA = "0xC9B890", Offset = "0xC9B890", VA = "0xC9B890")]
			[DebuggerHidden]
			public <CreateCards>d__78(int <>1__state)
			{
			}

			[Token(Token = "0x6003095")]
			[Address(RVA = "0xC9D984", Offset = "0xC9D984", VA = "0xC9D984", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003096")]
			[Address(RVA = "0xC9D988", Offset = "0xC9D988", VA = "0xC9D988", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003098")]
			[Address(RVA = "0xC9E228", Offset = "0xC9E228", VA = "0xC9E228", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007C7")]
		[CompilerGenerated]
		private sealed class <ShowBarrelWithBullet>d__89 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400288E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400288F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayingCardsManager <>4__this;

			[Token(Token = "0x1700036A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60030A1")]
				[Address(RVA = "0xC9E6A0", Offset = "0xC9E6A0", VA = "0xC9E6A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60030A3")]
				[Address(RVA = "0xC9E6E8", Offset = "0xC9E6E8", VA = "0xC9E6E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600309E")]
			[Address(RVA = "0xC9C6C0", Offset = "0xC9C6C0", VA = "0xC9C6C0")]
			[DebuggerHidden]
			public <ShowBarrelWithBullet>d__89(int <>1__state)
			{
			}

			[Token(Token = "0x600309F")]
			[Address(RVA = "0xC9E2B8", Offset = "0xC9E2B8", VA = "0xC9E2B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60030A0")]
			[Address(RVA = "0xC9E2BC", Offset = "0xC9E2BC", VA = "0xC9E2BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60030A2")]
			[Address(RVA = "0xC9E6A8", Offset = "0xC9E6A8", VA = "0xC9E6A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayingCardsManager Instance;

		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject koloda;

		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Text> cardsDescriptionList;

		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<PlayerCardsPoints> cardPoints;

		[Token(Token = "0x4002859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<PlayingCardPrefab> cardPrefabs;

		[Token(Token = "0x400285A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject spinCardPrefab;

		[Token(Token = "0x400285B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform tableCenter;

		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private BarrelUI barrelWithBullets;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GameObject> allPlayersCoins;

		[Token(Token = "0x400285E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("Player effects prefabs")]
		private GameObject playerAimPrefab;

		[Token(Token = "0x400285F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject extraLifePrefab;

		[Token(Token = "0x4002860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject playerShieldPrefab;

		[Token(Token = "0x4002861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<AbstractPlayer> players;

		[Token(Token = "0x4002862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PhotonView photonView;

		[Token(Token = "0x4002863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Photon.Realtime.Player LastPlayerUsedCard;

		[Token(Token = "0x4002864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<PlayingCard> playingCards;

		[Token(Token = "0x4002865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string lastUserID;

		[Token(Token = "0x4002866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayingCardType lastPlayedCard;

		[Token(Token = "0x4002867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Coroutine showingBarrel;

		[Token(Token = "0x4002868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CardsVFX cardsVFX;

		[Token(Token = "0x400286B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool[] prewExtraLifeStatus;

		[Token(Token = "0x400286C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool[] prewProtectedStatus;

		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool[] prewPublicTargetStatus;

		[Token(Token = "0x1700035C")]
		public PlayingCardType LastPlayedCard
		{
			[Token(Token = "0x600302E")]
			[Address(RVA = "0xC98690", Offset = "0xC98690", VA = "0xC98690")]
			get
			{
				return default(PlayingCardType);
			}
		}

		[Token(Token = "0x1700035D")]
		public string LastUserID
		{
			[Token(Token = "0x600302F")]
			[Address(RVA = "0xC98698", Offset = "0xC98698", VA = "0xC98698")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035E")]
		public string TargetUserID
		{
			[Token(Token = "0x6003030")]
			[Address(RVA = "0xC986A0", Offset = "0xC986A0", VA = "0xC986A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003031")]
			[Address(RVA = "0xC986A8", Offset = "0xC986A8", VA = "0xC986A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700035F")]
		public string ProtectedUserID
		{
			[Token(Token = "0x6003032")]
			[Address(RVA = "0xC986B0", Offset = "0xC986B0", VA = "0xC986B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003033")]
			[Address(RVA = "0xC986B8", Offset = "0xC986B8", VA = "0xC986B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000360")]
		public Photon.Realtime.Player LastUsedCard
		{
			[Token(Token = "0x6003034")]
			[Address(RVA = "0xC986C0", Offset = "0xC986C0", VA = "0xC986C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000361")]
		public Material DefaultMaterial
		{
			[Token(Token = "0x6003035")]
			[Address(RVA = "0xC986C8", Offset = "0xC986C8", VA = "0xC986C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000362")]
		public PhotonView PV
		{
			[Token(Token = "0x6003036")]
			[Address(RVA = "0xC986E4", Offset = "0xC986E4", VA = "0xC986E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000363")]
		public bool IsDealing
		{
			[Token(Token = "0x6003056")]
			[Address(RVA = "0xC9B4D0", Offset = "0xC9B4D0", VA = "0xC9B4D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000113")]
		public event Action<string, PlayingCardType, bool> CardVisualise
		{
			[Token(Token = "0x600304F")]
			[Address(RVA = "0xC9AD60", Offset = "0xC9AD60", VA = "0xC9AD60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003050")]
			[Address(RVA = "0xC9AE10", Offset = "0xC9AE10", VA = "0xC9AE10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0xC986EC", Offset = "0xC986EC", VA = "0xC986EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003038")]
		[Address(RVA = "0xC988A4", Offset = "0xC988A4", VA = "0xC988A4", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003039")]
		[Address(RVA = "0xC989E0", Offset = "0xC989E0", VA = "0xC989E0")]
		private void Update()
		{
		}

		[Token(Token = "0x600303A")]
		[Address(RVA = "0xC98E5C", Offset = "0xC98E5C", VA = "0xC98E5C")]
		public void ChangeCardHolders(string previousHoldeID, string newholderID)
		{
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0xC99288", Offset = "0xC99288", VA = "0xC99288")]
		public bool IsExtraLifeEffectValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600303C")]
		[Address(RVA = "0xC9932C", Offset = "0xC9932C", VA = "0xC9932C")]
		public void SetEffectReference(FollowPlayerEffect refference, PlayingCardType cType)
		{
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0xC993C0", Offset = "0xC993C0", VA = "0xC993C0")]
		public void EnablingCardEffect(string userID, bool enable)
		{
		}

		[Token(Token = "0x600303E")]
		[Address(RVA = "0xC993E0", Offset = "0xC993E0", VA = "0xC993E0")]
		public bool IsPlayerHasCard(string playerID, PlayingCardType cardT)
		{
			return default(bool);
		}

		[Token(Token = "0x600303F")]
		[Address(RVA = "0xC98D94", Offset = "0xC98D94", VA = "0xC98D94")]
		public bool StatusOnPlayer(string player, PlayingCardType pct)
		{
			return default(bool);
		}

		[Token(Token = "0x6003040")]
		[Address(RVA = "0xC99548", Offset = "0xC99548", VA = "0xC99548")]
		[PunRPC]
		private void GetPlayersRefs()
		{
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0xC99618", Offset = "0xC99618", VA = "0xC99618")]
		public void SwitchOwnership(int cardID, Photon.Realtime.Player switchTo)
		{
		}

		[Token(Token = "0x6003042")]
		[Address(RVA = "0xC99784", Offset = "0xC99784", VA = "0xC99784")]
		public void ResetData()
		{
		}

		[Token(Token = "0x6003043")]
		[Address(RVA = "0xC9985C", Offset = "0xC9985C", VA = "0xC9985C")]
		public PlayingCard GetCard(string playerID, PlayingCardType cardType)
		{
			return null;
		}

		[Token(Token = "0x6003044")]
		[Address(RVA = "0xC99954", Offset = "0xC99954", VA = "0xC99954")]
		[PunRPC]
		public void PistolMakedShot(bool isBullet)
		{
		}

		[Token(Token = "0x6003045")]
		[Address(RVA = "0xC99DA4", Offset = "0xC99DA4", VA = "0xC99DA4")]
		[PunRPC]
		private void SetLastCardUsedUser(string id, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003046")]
		[Address(RVA = "0xC99DD4", Offset = "0xC99DD4", VA = "0xC99DD4")]
		[PunRPC]
		private void SetLastCardUsed(int card)
		{
		}

		[Token(Token = "0x6003047")]
		[Address(RVA = "0xC99DDC", Offset = "0xC99DDC", VA = "0xC99DDC")]
		[PunRPC]
		private void RPC_ResetIDs()
		{
		}

		[Token(Token = "0x6003048")]
		[Address(RVA = "0xC99E40", Offset = "0xC99E40", VA = "0xC99E40")]
		public bool CanUseCard(string userID)
		{
			return default(bool);
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0xC99E4C", Offset = "0xC99E4C", VA = "0xC99E4C")]
		public void UseCard(PlayingCardType cardType)
		{
		}

		[Token(Token = "0x600304A")]
		[Address(RVA = "0xC99F54", Offset = "0xC99F54", VA = "0xC99F54")]
		[PunRPC]
		private void RemoveUsedCard(int _cardType, string holder)
		{
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0xC9A0B0", Offset = "0xC9A0B0", VA = "0xC9A0B0")]
		[PunRPC]
		private void RPC_UseCard(int _cardType)
		{
		}

		[Token(Token = "0x600304C")]
		[Address(RVA = "0xC9AB18", Offset = "0xC9AB18", VA = "0xC9AB18")]
		[PunRPC]
		private void EnableHandPointer()
		{
		}

		[Token(Token = "0x600304D")]
		[Address(RVA = "0xC9AC10", Offset = "0xC9AC10", VA = "0xC9AC10")]
		[PunRPC]
		private void IncreaseLifesCount()
		{
		}

		[Token(Token = "0x600304E")]
		[Address(RVA = "0xC9ACBC", Offset = "0xC9ACBC", VA = "0xC9ACBC")]
		[PunRPC]
		private void ShowWhereBulletIS()
		{
		}

		[Token(Token = "0x6003051")]
		[Address(RVA = "0xC9AEC0", Offset = "0xC9AEC0", VA = "0xC9AEC0")]
		[PunRPC]
		private void EnableExtraLifeIcon(string playerID)
		{
		}

		[Token(Token = "0x6003052")]
		[Address(RVA = "0xC9B044", Offset = "0xC9B044", VA = "0xC9B044")]
		[PunRPC]
		private void DisableExtraLifeIcon_Player(string playerID)
		{
		}

		[Token(Token = "0x6003053")]
		[Address(RVA = "0xC9B1C8", Offset = "0xC9B1C8", VA = "0xC9B1C8")]
		public void DealCards()
		{
		}

		[Token(Token = "0x6003054")]
		[Address(RVA = "0xC9B328", Offset = "0xC9B328", VA = "0xC9B328")]
		[IteratorStateMachine(typeof(<DealingCard>d__71))]
		private IEnumerator DealingCard()
		{
			return null;
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0xC9B3C4", Offset = "0xC9B3C4", VA = "0xC9B3C4")]
		public static void DestroyCards(PlayingCard[] cardList)
		{
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0xC9B4EC", Offset = "0xC9B4EC", VA = "0xC9B4EC")]
		[PunRPC]
		private void EnableColoda(bool enable)
		{
		}

		[Token(Token = "0x6003058")]
		[Address(RVA = "0xC9B50C", Offset = "0xC9B50C", VA = "0xC9B50C")]
		[IteratorStateMachine(typeof(<RemoveCards>d__76))]
		private IEnumerator RemoveCards()
		{
			return null;
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0xC9B5A8", Offset = "0xC9B5A8", VA = "0xC9B5A8")]
		public void UpdateAllCardsHolder()
		{
		}

		[Token(Token = "0x600305A")]
		[Address(RVA = "0xC9B800", Offset = "0xC9B800", VA = "0xC9B800")]
		[IteratorStateMachine(typeof(<CreateCards>d__78))]
		private IEnumerator CreateCards(List<PlayingCardPrefab> card_prefabs)
		{
			return null;
		}

		[Token(Token = "0x600305B")]
		[Address(RVA = "0xC9B8B8", Offset = "0xC9B8B8", VA = "0xC9B8B8")]
		public Transform GetCardPoint(int playerIndex, int cardNumer)
		{
			return null;
		}

		[Token(Token = "0x600305C")]
		[Address(RVA = "0xC9B988", Offset = "0xC9B988", VA = "0xC9B988")]
		public void ShowCardDescription(int playerIndex, string message)
		{
		}

		[Token(Token = "0x600305D")]
		[Address(RVA = "0xC9BA34", Offset = "0xC9BA34", VA = "0xC9BA34")]
		public void HideCardDescription(int playerIndex)
		{
		}

		[Token(Token = "0x600305E")]
		public void Shuffle<T>(ref List<T> list)
		{
		}

		[Token(Token = "0x600305F")]
		[Address(RVA = "0xC9BAA8", Offset = "0xC9BAA8", VA = "0xC9BAA8")]
		public void ClearLastUsed()
		{
		}

		[Token(Token = "0x6003060")]
		[Address(RVA = "0xC9BAFC", Offset = "0xC9BAFC", VA = "0xC9BAFC")]
		[PunRPC]
		public void GetCardsReferencesToOthers()
		{
		}

		[Token(Token = "0x6003061")]
		[Address(RVA = "0xC9BC1C", Offset = "0xC9BC1C", VA = "0xC9BC1C")]
		[PunRPC]
		private void ClearCardsReferences()
		{
		}

		[Token(Token = "0x6003062")]
		[Address(RVA = "0xC9BE6C", Offset = "0xC9BE6C", VA = "0xC9BE6C")]
		[PunRPC]
		private void SetTargetID(string targetUserID)
		{
		}

		[Token(Token = "0x6003063")]
		[Address(RVA = "0xC9C16C", Offset = "0xC9C16C", VA = "0xC9C16C")]
		[PunRPC]
		private void SetProtectedID(string protectedUserID)
		{
		}

		[Token(Token = "0x6003064")]
		[Address(RVA = "0xC9AAD8", Offset = "0xC9AAD8", VA = "0xC9AAD8")]
		[PunRPC]
		public void DisableLastUsed()
		{
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0xC9ACEC", Offset = "0xC9ACEC", VA = "0xC9ACEC")]
		[IteratorStateMachine(typeof(<ShowBarrelWithBullet>d__89))]
		private IEnumerator ShowBarrelWithBullet()
		{
			return null;
		}

		[Token(Token = "0x6003066")]
		[Address(RVA = "0xC9C6E8", Offset = "0xC9C6E8", VA = "0xC9C6E8")]
		public void CheckKilledUser(string killedID)
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0xC9C740", Offset = "0xC9C740", VA = "0xC9C740")]
		[PunRPC]
		private void CardsEffectRefs(string playerID)
		{
		}

		[Token(Token = "0x6003068")]
		[Address(RVA = "0xC9C46C", Offset = "0xC9C46C", VA = "0xC9C46C")]
		[PunRPC]
		private void DisableSecondBullet()
		{
		}

		[Token(Token = "0x6003069")]
		[Address(RVA = "0xC99BB8", Offset = "0xC99BB8", VA = "0xC99BB8")]
		[PunRPC]
		public void DisableProtectYourSelf()
		{
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0xC99CA0", Offset = "0xC99CA0", VA = "0xC99CA0")]
		[PunRPC]
		public void DisableSetTarget()
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0xC99A9C", Offset = "0xC99A9C", VA = "0xC99A9C")]
		[PunRPC]
		public void DisableExtraLife(bool syncState = true)
		{
		}

		[Token(Token = "0x600306C")]
		[Address(RVA = "0xC9CD1C", Offset = "0xC9CD1C", VA = "0xC9CD1C")]
		[PunRPC]
		private void DisableExtraLifeIcon()
		{
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0xC9C56C", Offset = "0xC9C56C", VA = "0xC9C56C")]
		[PunRPC]
		private void DisableTurnMoveDirection()
		{
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0xC9CEC0", Offset = "0xC9CEC0", VA = "0xC9CEC0")]
		public PlayingCardsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007C9")]
	public class PlayerCardsPoints
	{
		[Token(Token = "0x4002892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform firstCardPoint;

		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform secondCardPoint;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform reloadCardPoint;

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0xC9E714", Offset = "0xC9E714", VA = "0xC9E714")]
		public PlayerCardsPoints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007CA")]
	public class PlayingCardPrefab
	{
		[Token(Token = "0x4002895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayingCardType playingCardType;

		[Token(Token = "0x4002896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject playingCardPrefab;

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0xC9E71C", Offset = "0xC9E71C", VA = "0xC9E71C")]
		public PlayingCardPrefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007CB")]
	public class BarrelUI
	{
		[Token(Token = "0x4002897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject barrelFull;

		[Token(Token = "0x4002898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> bullets;

		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject pointer;

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0xC9E5EC", Offset = "0xC9E5EC", VA = "0xC9E5EC")]
		public void HideBullets()
		{
		}

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0xC99A58", Offset = "0xC99A58", VA = "0xC99A58")]
		public void Enable(bool b)
		{
		}

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0xC9E724", Offset = "0xC9E724", VA = "0xC9E724")]
		public BarrelUI()
		{
		}
	}
	[Token(Token = "0x20007CC")]
	public class Cigarette : PickUpObject
	{
		[Token(Token = "0x20007CF")]
		[CompilerGenerated]
		private sealed class <AttachNumeratorNetwork>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Cigarette <>4__this;

			[Token(Token = "0x1700036D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60030D3")]
				[Address(RVA = "0xCA0B24", Offset = "0xCA0B24", VA = "0xCA0B24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60030D5")]
				[Address(RVA = "0xCA0B6C", Offset = "0xCA0B6C", VA = "0xCA0B6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60030D0")]
			[Address(RVA = "0xC9EDB0", Offset = "0xC9EDB0", VA = "0xC9EDB0")]
			[DebuggerHidden]
			public <AttachNumeratorNetwork>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60030D1")]
			[Address(RVA = "0xCA06A0", Offset = "0xCA06A0", VA = "0xCA06A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60030D2")]
			[Address(RVA = "0xCA06A4", Offset = "0xCA06A4", VA = "0xCA06A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60030D4")]
			[Address(RVA = "0xCA0B2C", Offset = "0xCA0B2C", VA = "0xCA0B2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007D0")]
		[CompilerGenerated]
		private sealed class <AttachNumerator>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Cigarette <>4__this;

			[Token(Token = "0x1700036F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60030D9")]
				[Address(RVA = "0xCA0E10", Offset = "0xCA0E10", VA = "0xCA0E10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000370")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60030DB")]
				[Address(RVA = "0xCA0E58", Offset = "0xCA0E58", VA = "0xCA0E58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60030D6")]
			[Address(RVA = "0xC9EE4C", Offset = "0xC9EE4C", VA = "0xC9EE4C")]
			[DebuggerHidden]
			public <AttachNumerator>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60030D7")]
			[Address(RVA = "0xCA0B74", Offset = "0xCA0B74", VA = "0xCA0B74", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60030D8")]
			[Address(RVA = "0xCA0B78", Offset = "0xCA0B78", VA = "0xCA0B78", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60030DA")]
			[Address(RVA = "0xCA0E18", Offset = "0xCA0E18", VA = "0xCA0E18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int cigaretteID;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Vector3 inMouthLocalPosition;

		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private Vector3 inMouthLocalRotation;

		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform mouthTransform;

		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private List<CigaretteNetworkPositions> cigaretteNetworkPositions;

		[Token(Token = "0x40028A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 initPos;

		[Token(Token = "0x40028A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Quaternion initRot;

		[Token(Token = "0x1700036C")]
		public bool cigareteInMouthNow
		{
			[Token(Token = "0x60030AB")]
			[Address(RVA = "0xC9E72C", Offset = "0xC9E72C", VA = "0xC9E72C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60030AC")]
			[Address(RVA = "0xC9E734", Offset = "0xC9E734", VA = "0xC9E734")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0xC9E740", Offset = "0xC9E740", VA = "0xC9E740", Slot = "8")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60030AE")]
		[Address(RVA = "0xC9EA00", Offset = "0xC9EA00", VA = "0xC9EA00")]
		private void Start()
		{
		}

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0xC9EA20", Offset = "0xC9EA20", VA = "0xC9EA20")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0xC9EC48", Offset = "0xC9EC48", VA = "0xC9EC48")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0xC9ED3C", Offset = "0xC9ED3C", VA = "0xC9ED3C")]
		[IteratorStateMachine(typeof(<AttachNumeratorNetwork>d__15))]
		private IEnumerator AttachNumeratorNetwork()
		{
			return null;
		}

		[Token(Token = "0x60030B2")]
		[Address(RVA = "0xC9EDD8", Offset = "0xC9EDD8", VA = "0xC9EDD8")]
		[IteratorStateMachine(typeof(<AttachNumerator>d__16))]
		private IEnumerator AttachNumerator()
		{
			return null;
		}

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0xC9EE74", Offset = "0xC9EE74", VA = "0xC9EE74")]
		public void PutCigaretteOnTable()
		{
		}

		[Token(Token = "0x60030B4")]
		[Address(RVA = "0xC9F05C", Offset = "0xC9F05C", VA = "0xC9F05C", Slot = "11")]
		public override void OnPickUpLogic()
		{
		}

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0xC9F0C4", Offset = "0xC9F0C4", VA = "0xC9F0C4", Slot = "13")]
		public override void UnPick()
		{
		}

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0xC9F0E0", Offset = "0xC9F0E0", VA = "0xC9F0E0")]
		public void AttachCigaretteToMouth()
		{
		}

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0xC9F2F4", Offset = "0xC9F2F4", VA = "0xC9F2F4")]
		[PunRPC]
		private void RPC_StopGrabbCigarette()
		{
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0xC9F378", Offset = "0xC9F378", VA = "0xC9F378")]
		public void StopGrabCigarette()
		{
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0xC9F428", Offset = "0xC9F428", VA = "0xC9F428")]
		public void SetUser(Photon.Realtime.Player player)
		{
		}

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0xC9F2D4", Offset = "0xC9F2D4", VA = "0xC9F2D4")]
		[PunRPC]
		private void PitCigaretteInMouth()
		{
		}

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0xC9F444", Offset = "0xC9F444", VA = "0xC9F444")]
		[PunRPC]
		private void PitCigaretteInMouthNetwork()
		{
		}

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0xC9F464", Offset = "0xC9F464", VA = "0xC9F464")]
		[PunRPC]
		private void EnableDisableKinimatic(bool b)
		{
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0xC9F484", Offset = "0xC9F484", VA = "0xC9F484")]
		[PunRPC]
		private void RPC_PutCigaretteOnTable(Vector3 dir, float speed)
		{
		}

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0xC9F638", Offset = "0xC9F638", VA = "0xC9F638")]
		[ContextMenu("Save gentelman pos")]
		private void SaveLocalPosition()
		{
		}

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0xC9F688", Offset = "0xC9F688", VA = "0xC9F688")]
		[ContextMenu("Save gentelman pos")]
		private void SaveGentelman()
		{
		}

		[Token(Token = "0x60030C0")]
		[Address(RVA = "0xC9F884", Offset = "0xC9F884", VA = "0xC9F884")]
		[ContextMenu("Save dame pos")]
		private void SaveDame()
		{
		}

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0xC9FA80", Offset = "0xC9FA80", VA = "0xC9FA80")]
		[ContextMenu("Save police pos")]
		private void SavePolice()
		{
		}

		[Token(Token = "0x60030C2")]
		[Address(RVA = "0xC9FC7C", Offset = "0xC9FC7C", VA = "0xC9FC7C")]
		[ContextMenu("Save bandit pos")]
		private void SaveBandit()
		{
		}

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0xC9FE78", Offset = "0xC9FE78", VA = "0xC9FE78")]
		[ContextMenu("Save ranger pos")]
		private void SaveRanger()
		{
		}

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0xCA0074", Offset = "0xCA0074", VA = "0xCA0074")]
		[ContextMenu("Save indian pos")]
		private void SaveIndian()
		{
		}

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0xCA0270", Offset = "0xCA0270", VA = "0xCA0270")]
		[ContextMenu("Empty")]
		private void Empty()
		{
		}

		[Token(Token = "0x60030C6")]
		[Address(RVA = "0xCA0274", Offset = "0xCA0274", VA = "0xCA0274")]
		public void SetDefaultPosAndRot(Vector3 pos, Quaternion rotation)
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0xCA0448", Offset = "0xCA0448", VA = "0xCA0448")]
		[PunRPC]
		private void RPC_SetDefaultPosAndRot(Vector3 pos, Quaternion rotation)
		{
		}

		[Token(Token = "0x60030C8")]
		[Address(RVA = "0xCA045C", Offset = "0xCA045C", VA = "0xCA045C", Slot = "15")]
		public override void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60030C9")]
		[Address(RVA = "0xCA0554", Offset = "0xCA0554", VA = "0xCA0554")]
		public Cigarette()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007D2")]
	public class CigaretteNetworkPositions
	{
		[Token(Token = "0x40028B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerType playerType;

		[Token(Token = "0x40028B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 localPosition;

		[Token(Token = "0x40028B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion localRotation;

		[Token(Token = "0x60030EA")]
		[Address(RVA = "0xCA1058", Offset = "0xCA1058", VA = "0xCA1058")]
		public CigaretteNetworkPositions()
		{
		}
	}
	[Token(Token = "0x20007D3")]
	public class Coin : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x20007D4")]
		[CompilerGenerated]
		private sealed class <ThrowAnimation>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coin <>4__this;

			[Token(Token = "0x40028C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 endPoint;

			[Token(Token = "0x40028C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 startPoint;

			[Token(Token = "0x40028C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CoinEffectManager <animParams>5__2;

			[Token(Token = "0x40028C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 <rot>5__3;

			[Token(Token = "0x40028C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <time>5__4;

			[Token(Token = "0x40028CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <endRot>5__5;

			[Token(Token = "0x40028CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private float <curHeight>5__6;

			[Token(Token = "0x17000371")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60030FF")]
				[Address(RVA = "0xCA1FD8", Offset = "0xCA1FD8", VA = "0xCA1FD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000372")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003101")]
				[Address(RVA = "0xCA2020", Offset = "0xCA2020", VA = "0xCA2020", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60030FC")]
			[Address(RVA = "0xCA1978", Offset = "0xCA1978", VA = "0xCA1978")]
			[DebuggerHidden]
			public <ThrowAnimation>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60030FD")]
			[Address(RVA = "0xCA1BA8", Offset = "0xCA1BA8", VA = "0xCA1BA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60030FE")]
			[Address(RVA = "0xCA1BAC", Offset = "0xCA1BAC", VA = "0xCA1BAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003100")]
			[Address(RVA = "0xCA1FE0", Offset = "0xCA1FE0", VA = "0xCA1FE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007D5")]
		[CompilerGenerated]
		private sealed class <RemoveAnimation>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coin <>4__this;

			[Token(Token = "0x40028CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CoinEffectManager <animParams>5__2;

			[Token(Token = "0x40028D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <startPoint>5__3;

			[Token(Token = "0x40028D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 <endPoint>5__4;

			[Token(Token = "0x40028D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 <rot>5__5;

			[Token(Token = "0x40028D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <time>5__6;

			[Token(Token = "0x40028D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <endRot>5__7;

			[Token(Token = "0x17000373")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003105")]
				[Address(RVA = "0xCA24A8", Offset = "0xCA24A8", VA = "0xCA24A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000374")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003107")]
				[Address(RVA = "0xCA24F0", Offset = "0xCA24F0", VA = "0xCA24F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003102")]
			[Address(RVA = "0xCA1AE4", Offset = "0xCA1AE4", VA = "0xCA1AE4")]
			[DebuggerHidden]
			public <RemoveAnimation>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6003103")]
			[Address(RVA = "0xCA2028", Offset = "0xCA2028", VA = "0xCA2028", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003104")]
			[Address(RVA = "0xCA202C", Offset = "0xCA202C", VA = "0xCA202C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003106")]
			[Address(RVA = "0xCA24B0", Offset = "0xCA24B0", VA = "0xCA24B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView photonView;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string HolderID;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool move;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 startMarker;

		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 endMarker;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float startTime;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float journeyLength;

		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float speed;

		[Token(Token = "0x60030EB")]
		[Address(RVA = "0xCA1060", Offset = "0xCA1060", VA = "0xCA1060")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030EC")]
		[Address(RVA = "0xCA10B8", Offset = "0xCA10B8", VA = "0xCA10B8", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60030ED")]
		[Address(RVA = "0xCA116C", Offset = "0xCA116C", VA = "0xCA116C")]
		private void Update()
		{
		}

		[Token(Token = "0x60030EE")]
		[Address(RVA = "0xCA12D8", Offset = "0xCA12D8", VA = "0xCA12D8")]
		public void MoveCoinToTableCenter()
		{
		}

		[Token(Token = "0x60030EF")]
		[Address(RVA = "0xCA1420", Offset = "0xCA1420", VA = "0xCA1420")]
		public void MoveCoin(Vector3 target, float Y_Offset = 0f)
		{
		}

		[Token(Token = "0x60030F0")]
		[Address(RVA = "0xCA1510", Offset = "0xCA1510", VA = "0xCA1510")]
		public void SetCoinOwner(string userID)
		{
		}

		[Token(Token = "0x60030F1")]
		[Address(RVA = "0xCA15E4", Offset = "0xCA15E4", VA = "0xCA15E4")]
		[PunRPC]
		private void RPC_MoveCoin(Vector3 start, Vector3 end)
		{
		}

		[Token(Token = "0x60030F2")]
		[Address(RVA = "0xCA16AC", Offset = "0xCA16AC", VA = "0xCA16AC")]
		[PunRPC]
		private void ChangeOwner()
		{
		}

		[Token(Token = "0x60030F3")]
		[Address(RVA = "0xCA171C", Offset = "0xCA171C", VA = "0xCA171C")]
		[PunRPC]
		private void SetOwner(string id)
		{
		}

		[Token(Token = "0x60030F4")]
		[Address(RVA = "0xCA1724", Offset = "0xCA1724", VA = "0xCA1724")]
		public void ThrowCoin(Vector3 startPoint, Vector3 endPoint)
		{
		}

		[Token(Token = "0x60030F5")]
		[Address(RVA = "0xCA18A8", Offset = "0xCA18A8", VA = "0xCA18A8")]
		[PunRPC]
		private void RPC_ThrowCoin(Vector3 startPoint, Vector3 endPoint)
		{
		}

		[Token(Token = "0x60030F6")]
		[Address(RVA = "0xCA18C8", Offset = "0xCA18C8", VA = "0xCA18C8")]
		[IteratorStateMachine(typeof(<ThrowAnimation>d__19))]
		private IEnumerator ThrowAnimation(Vector3 startPoint, Vector3 endPoint)
		{
			return null;
		}

		[Token(Token = "0x60030F7")]
		[Address(RVA = "0xCA19A0", Offset = "0xCA19A0", VA = "0xCA19A0")]
		public void RemoveCoin()
		{
		}

		[Token(Token = "0x60030F8")]
		[Address(RVA = "0xCA1A50", Offset = "0xCA1A50", VA = "0xCA1A50")]
		[PunRPC]
		private void RPC_RemoveCoin()
		{
		}

		[Token(Token = "0x60030F9")]
		[Address(RVA = "0xCA1A70", Offset = "0xCA1A70", VA = "0xCA1A70")]
		[IteratorStateMachine(typeof(<RemoveAnimation>d__22))]
		private IEnumerator RemoveAnimation()
		{
			return null;
		}

		[Token(Token = "0x60030FA")]
		[Address(RVA = "0xCA1B0C", Offset = "0xCA1B0C", VA = "0xCA1B0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60030FB")]
		[Address(RVA = "0xCA1B98", Offset = "0xCA1B98", VA = "0xCA1B98")]
		public Coin()
		{
		}
	}
	[Token(Token = "0x20007D6")]
	public class Coins : MonoBehaviour
	{
		[Token(Token = "0x20007D7")]
		[CompilerGenerated]
		private sealed class <CreateCoinsNumerator>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int count;

			[Token(Token = "0x40028DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string userID;

			[Token(Token = "0x40028DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Coins <>4__this;

			[Token(Token = "0x40028E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <index>5__2;

			[Token(Token = "0x40028E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__3;

			[Token(Token = "0x17000375")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003118")]
				[Address(RVA = "0xCA31F8", Offset = "0xCA31F8", VA = "0xCA31F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000376")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600311A")]
				[Address(RVA = "0xCA3240", Offset = "0xCA3240", VA = "0xCA3240", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003115")]
			[Address(RVA = "0xCA2C90", Offset = "0xCA2C90", VA = "0xCA2C90")]
			[DebuggerHidden]
			public <CreateCoinsNumerator>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6003116")]
			[Address(RVA = "0xCA2E28", Offset = "0xCA2E28", VA = "0xCA2E28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003117")]
			[Address(RVA = "0xCA2E2C", Offset = "0xCA2E2C", VA = "0xCA2E2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003119")]
			[Address(RVA = "0xCA3200", Offset = "0xCA3200", VA = "0xCA3200", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007DA")]
		[CompilerGenerated]
		private sealed class <RemoveAllUserCoins>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string userID;

			[Token(Token = "0x40028E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coins <>4__this;

			[Token(Token = "0x40028E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<Coin> <coins>5__2;

			[Token(Token = "0x40028E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <userIndex>5__3;

			[Token(Token = "0x40028EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__4;

			[Token(Token = "0x17000377")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003122")]
				[Address(RVA = "0xCA357C", Offset = "0xCA357C", VA = "0xCA357C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000378")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003124")]
				[Address(RVA = "0xCA35C4", Offset = "0xCA35C4", VA = "0xCA35C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600311F")]
			[Address(RVA = "0xCA2CC0", Offset = "0xCA2CC0", VA = "0xCA2CC0")]
			[DebuggerHidden]
			public <RemoveAllUserCoins>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6003120")]
			[Address(RVA = "0xCA3298", Offset = "0xCA3298", VA = "0xCA3298", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003121")]
			[Address(RVA = "0xCA329C", Offset = "0xCA329C", VA = "0xCA329C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003123")]
			[Address(RVA = "0xCA3584", Offset = "0xCA3584", VA = "0xCA3584", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007DC")]
		[CompilerGenerated]
		private sealed class <ShuffleCoinsNumerator>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40028ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40028EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40028EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coins <>4__this;

			[Token(Token = "0x40028F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<int> <indexesOfAlivePlayers>5__2;

			[Token(Token = "0x40028F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <divider>5__3;

			[Token(Token = "0x40028F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <startPlayerIndex>5__4;

			[Token(Token = "0x40028F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__5;

			[Token(Token = "0x17000379")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600312B")]
				[Address(RVA = "0xCA3C98", Offset = "0xCA3C98", VA = "0xCA3C98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600312D")]
				[Address(RVA = "0xCA3CE0", Offset = "0xCA3CE0", VA = "0xCA3CE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003128")]
			[Address(RVA = "0xCA2D5C", Offset = "0xCA2D5C", VA = "0xCA2D5C")]
			[DebuggerHidden]
			public <ShuffleCoinsNumerator>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6003129")]
			[Address(RVA = "0xCA36A0", Offset = "0xCA36A0", VA = "0xCA36A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600312A")]
			[Address(RVA = "0xCA36A4", Offset = "0xCA36A4", VA = "0xCA36A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600312C")]
			[Address(RVA = "0xCA3CA0", Offset = "0xCA3CA0", VA = "0xCA3CA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Coins Instance;

		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject coinPrefab;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonView photonView;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Coin> coinsList;

		[Token(Token = "0x40028D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CoinEffectManager effectManager;

		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Coroutine tempCor;

		[Token(Token = "0x6003108")]
		[Address(RVA = "0xCA24F8", Offset = "0xCA24F8", VA = "0xCA24F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003109")]
		[Address(RVA = "0xCA25FC", Offset = "0xCA25FC", VA = "0xCA25FC")]
		public void CreateCoin(string userID, int count)
		{
		}

		[Token(Token = "0x600310A")]
		[Address(RVA = "0xCA273C", Offset = "0xCA273C", VA = "0xCA273C")]
		public void RemoveCoin(string userID, int count)
		{
		}

		[Token(Token = "0x600310B")]
		[Address(RVA = "0xCA287C", Offset = "0xCA287C", VA = "0xCA287C")]
		[PunRPC]
		public void GetCoinsRefs()
		{
		}

		[Token(Token = "0x600310C")]
		[Address(RVA = "0xCA294C", Offset = "0xCA294C", VA = "0xCA294C")]
		[PunRPC]
		private void RPC_RemoveCoin(string userID, int count)
		{
		}

		[Token(Token = "0x600310D")]
		[Address(RVA = "0xCA2BD8", Offset = "0xCA2BD8", VA = "0xCA2BD8")]
		[PunRPC]
		private void RPC_CreateCoin(string userID, int count)
		{
		}

		[Token(Token = "0x600310E")]
		[Address(RVA = "0xCA2BF8", Offset = "0xCA2BF8", VA = "0xCA2BF8")]
		[IteratorStateMachine(typeof(<CreateCoinsNumerator>d__12))]
		private IEnumerator CreateCoinsNumerator(string userID, int count)
		{
			return null;
		}

		[Token(Token = "0x600310F")]
		[Address(RVA = "0xCA2A24", Offset = "0xCA2A24", VA = "0xCA2A24")]
		private void RemoveUserCoin(string userID)
		{
		}

		[Token(Token = "0x6003110")]
		[Address(RVA = "0xCA2994", Offset = "0xCA2994", VA = "0xCA2994")]
		[IteratorStateMachine(typeof(<RemoveAllUserCoins>d__14))]
		private IEnumerator RemoveAllUserCoins(string userID)
		{
			return null;
		}

		[Token(Token = "0x6003111")]
		[Address(RVA = "0xC9AAB8", Offset = "0xC9AAB8", VA = "0xC9AAB8")]
		public void DivideCoins()
		{
		}

		[Token(Token = "0x6003112")]
		[Address(RVA = "0xCA2CE8", Offset = "0xCA2CE8", VA = "0xCA2CE8")]
		[IteratorStateMachine(typeof(<ShuffleCoinsNumerator>d__16))]
		private IEnumerator ShuffleCoinsNumerator()
		{
			return null;
		}

		[Token(Token = "0x6003113")]
		[Address(RVA = "0xCA2D84", Offset = "0xCA2D84", VA = "0xCA2D84")]
		internal void ResetCoinsEffectState()
		{
		}

		[Token(Token = "0x6003114")]
		[Address(RVA = "0xCA2DA0", Offset = "0xCA2DA0", VA = "0xCA2DA0")]
		public Coins()
		{
		}
	}
	[Token(Token = "0x20007DD")]
	public class CustomRaycast : VRTK_CustomRaycast
	{
		[Token(Token = "0x600312E")]
		[Address(RVA = "0xCA3CE8", Offset = "0xCA3CE8", VA = "0xCA3CE8")]
		public CustomRaycast()
		{
		}
	}
	[Token(Token = "0x20007DE")]
	public enum GlassType
	{
		[Token(Token = "0x40028F5")]
		WineGlass,
		[Token(Token = "0x40028F6")]
		Rox,
		[Token(Token = "0x40028F7")]
		CupOfTea
	}
	[Token(Token = "0x20007DF")]
	public enum GrabbObject
	{
		[Token(Token = "0x40028F9")]
		Pistol,
		[Token(Token = "0x40028FA")]
		ReloadCard,
		[Token(Token = "0x40028FB")]
		Bullet,
		[Token(Token = "0x40028FC")]
		Cigarette,
		[Token(Token = "0x40028FD")]
		Glass,
		[Token(Token = "0x40028FE")]
		AFK_kill_Pistol,
		[Token(Token = "0x40028FF")]
		Pepelka,
		[Token(Token = "0x4002900")]
		MainPistol,
		[Token(Token = "0x4002901")]
		PlayingCard
	}
	[Token(Token = "0x20007E0")]
	public enum Hand
	{
		[Token(Token = "0x4002903")]
		Left,
		[Token(Token = "0x4002904")]
		Right
	}
	[Token(Token = "0x20007E1")]
	public enum NPC_State
	{
		[Token(Token = "0x4002906")]
		Idle,
		[Token(Token = "0x4002907")]
		TurnToShoot
	}
	[Serializable]
	[Token(Token = "0x20007E2")]
	public class InteractObjects
	{
		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform objTransform;

		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbObject objType;

		[Token(Token = "0x600312F")]
		[Address(RVA = "0xCA3CF0", Offset = "0xCA3CF0", VA = "0xCA3CF0")]
		public InteractObjects()
		{
		}
	}
	[Token(Token = "0x20007E3")]
	public class GameManager : MonoBehaviour
	{
		[Token(Token = "0x20007E4")]
		[CompilerGenerated]
		private sealed class <ShowStartPanelAfterWin>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002913")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002914")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameManager <>4__this;

			[Token(Token = "0x1700037B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600313E")]
				[Address(RVA = "0xCA4D58", Offset = "0xCA4D58", VA = "0xCA4D58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003140")]
				[Address(RVA = "0xCA4DA0", Offset = "0xCA4DA0", VA = "0xCA4DA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600313B")]
			[Address(RVA = "0xCA46E0", Offset = "0xCA46E0", VA = "0xCA46E0")]
			[DebuggerHidden]
			public <ShowStartPanelAfterWin>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600313C")]
			[Address(RVA = "0xCA4C7C", Offset = "0xCA4C7C", VA = "0xCA4C7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600313D")]
			[Address(RVA = "0xCA4C80", Offset = "0xCA4C80", VA = "0xCA4C80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600313F")]
			[Address(RVA = "0xCA4D60", Offset = "0xCA4D60", VA = "0xCA4D60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GameManager Instance;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GameObject startButton;

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<InteractObjects> interactObjects;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PlayerPostion> playersPositions;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform winPanel;

		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform tableCenter;

		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform reloadCardBox;

		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MicRef microphoneSettings;

		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool isMicSetted;

		[Token(Token = "0x6003130")]
		[Address(RVA = "0xCA3CF8", Offset = "0xCA3CF8", VA = "0xCA3CF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003131")]
		[Address(RVA = "0xCA3D50", Offset = "0xCA3D50", VA = "0xCA3D50")]
		private void Start()
		{
		}

		[Token(Token = "0x6003132")]
		[Address(RVA = "0xCA3E00", Offset = "0xCA3E00", VA = "0xCA3E00")]
		public void WaitForRestart()
		{
		}

		[Token(Token = "0x6003133")]
		[Address(RVA = "0xCA3FC4", Offset = "0xCA3FC4", VA = "0xCA3FC4")]
		private void UpdateGameState(GameState state)
		{
		}

		[Token(Token = "0x6003134")]
		[Address(RVA = "0xCA466C", Offset = "0xCA466C", VA = "0xCA466C")]
		[IteratorStateMachine(typeof(<ShowStartPanelAfterWin>d__11))]
		private IEnumerator ShowStartPanelAfterWin()
		{
			return null;
		}

		[Token(Token = "0x6003135")]
		[Address(RVA = "0xCA4708", Offset = "0xCA4708", VA = "0xCA4708")]
		public int AlivePlayerCount(GameState state)
		{
			return default(int);
		}

		[Token(Token = "0x6003136")]
		[Address(RVA = "0xCA4760", Offset = "0xCA4760", VA = "0xCA4760")]
		public PlayerController GetPlayer(string id)
		{
			return null;
		}

		[Token(Token = "0x6003137")]
		[Address(RVA = "0xCA4838", Offset = "0xCA4838", VA = "0xCA4838")]
		public void ResetObjectsPosition()
		{
		}

		[Token(Token = "0x6003138")]
		[Address(RVA = "0xCA4A0C", Offset = "0xCA4A0C", VA = "0xCA4A0C")]
		public void UpdateStartButtonPosition(Vector3 newPos, Quaternion newRot)
		{
		}

		[Token(Token = "0x6003139")]
		[Address(RVA = "0xCA4B1C", Offset = "0xCA4B1C", VA = "0xCA4B1C")]
		public void StartButtonToDefaultPosition()
		{
		}

		[Token(Token = "0x600313A")]
		[Address(RVA = "0xCA4BA4", Offset = "0xCA4BA4", VA = "0xCA4BA4")]
		public GameManager()
		{
		}
	}
	[Token(Token = "0x20007E5")]
	public class AFK_Checker : MonoBehaviour
	{
		[Token(Token = "0x20007E6")]
		[CompilerGenerated]
		private sealed class <AFK_Countdown>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400291C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400291D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400291E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AFK_Checker <>4__this;

			[Token(Token = "0x1700037D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600314D")]
				[Address(RVA = "0xCA596C", Offset = "0xCA596C", VA = "0xCA596C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600314F")]
				[Address(RVA = "0xCA59B4", Offset = "0xCA59B4", VA = "0xCA59B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600314A")]
			[Address(RVA = "0xCA5130", Offset = "0xCA5130", VA = "0xCA5130")]
			[DebuggerHidden]
			public <AFK_Countdown>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600314B")]
			[Address(RVA = "0xCA5898", Offset = "0xCA5898", VA = "0xCA5898", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600314C")]
			[Address(RVA = "0xCA589C", Offset = "0xCA589C", VA = "0xCA589C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600314E")]
			[Address(RVA = "0xCA5974", Offset = "0xCA5974", VA = "0xCA5974", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeToMakeShot;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<AFK_Pistol> afkPistols;

		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> pistolPositions;

		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Quaternion> pistolsRotation;

		[Token(Token = "0x400291A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Coroutine countdown;

		[Token(Token = "0x400291B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhotonView photonView;

		[Token(Token = "0x6003141")]
		[Address(RVA = "0xCA4DA8", Offset = "0xCA4DA8", VA = "0xCA4DA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003142")]
		[Address(RVA = "0xCA4E00", Offset = "0xCA4E00", VA = "0xCA4E00")]
		private void Start()
		{
		}

		[Token(Token = "0x6003143")]
		[Address(RVA = "0xCA500C", Offset = "0xCA500C", VA = "0xCA500C")]
		public void StartCountDown()
		{
		}

		[Token(Token = "0x6003144")]
		[Address(RVA = "0xCA50BC", Offset = "0xCA50BC", VA = "0xCA50BC")]
		[IteratorStateMachine(typeof(<AFK_Countdown>d__9))]
		private IEnumerator AFK_Countdown()
		{
			return null;
		}

		[Token(Token = "0x6003145")]
		[Address(RVA = "0xCA5158", Offset = "0xCA5158", VA = "0xCA5158")]
		public void HidePistols()
		{
		}

		[Token(Token = "0x6003146")]
		[Address(RVA = "0xCA5304", Offset = "0xCA5304", VA = "0xCA5304")]
		private void GiveOutPistols()
		{
		}

		[Token(Token = "0x6003147")]
		[Address(RVA = "0xCA550C", Offset = "0xCA550C", VA = "0xCA550C")]
		[PunRPC]
		private void RPC_EnablePistol(int index)
		{
		}

		[Token(Token = "0x6003148")]
		[Address(RVA = "0xCA570C", Offset = "0xCA570C", VA = "0xCA570C")]
		[PunRPC]
		private void RPC_StartCountDown()
		{
		}

		[Token(Token = "0x6003149")]
		[Address(RVA = "0xCA5768", Offset = "0xCA5768", VA = "0xCA5768")]
		public AFK_Checker()
		{
		}
	}
	[Token(Token = "0x20007E7")]
	public class GameEnds : MonoBehaviour
	{
		[Token(Token = "0x6003150")]
		[Address(RVA = "0xCA59BC", Offset = "0xCA59BC", VA = "0xCA59BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003151")]
		[Address(RVA = "0xCA5A34", Offset = "0xCA5A34", VA = "0xCA5A34")]
		public GameEnds()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007E8")]
	public class GameState
	{
		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerState[] players;

		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int bulletIndex;

		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currIndex;

		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int playersCount;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string userTurn;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool turnsClockwise;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool npcTurnCalled;

		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool gameRuns;

		[Token(Token = "0x1700037F")]
		public bool MyTurn
		{
			[Token(Token = "0x6003154")]
			[Address(RVA = "0xCA5AAC", Offset = "0xCA5AAC", VA = "0xCA5AAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003152")]
		[Address(RVA = "0xC98D24", Offset = "0xC98D24", VA = "0xC98D24")]
		public int GetPos(string id)
		{
			return default(int);
		}

		[Token(Token = "0x6003153")]
		[Address(RVA = "0xCA5A3C", Offset = "0xCA5A3C", VA = "0xCA5A3C")]
		public int TryGetPos(string id)
		{
			return default(int);
		}

		[Token(Token = "0x6003155")]
		[Address(RVA = "0xCA5B18", Offset = "0xCA5B18", VA = "0xCA5B18")]
		public int GetMyPos(bool force = false)
		{
			return default(int);
		}

		[Token(Token = "0x6003156")]
		[Address(RVA = "0xCA549C", Offset = "0xCA549C", VA = "0xCA549C")]
		public int GetMyPos(string userID)
		{
			return default(int);
		}

		[Token(Token = "0x6003157")]
		[Address(RVA = "0xCA5BDC", Offset = "0xCA5BDC", VA = "0xCA5BDC")]
		public void MakeNewUser(string id, bool npc = false)
		{
		}

		[Token(Token = "0x6003158")]
		[Address(RVA = "0xCA5E78", Offset = "0xCA5E78", VA = "0xCA5E78")]
		public bool IsBullet()
		{
			return default(bool);
		}

		[Token(Token = "0x6003159")]
		[Address(RVA = "0xC9CC5C", Offset = "0xC9CC5C", VA = "0xC9CC5C")]
		public void Spin()
		{
		}

		[Token(Token = "0x600315A")]
		[Address(RVA = "0xCA5E8C", Offset = "0xCA5E8C", VA = "0xCA5E8C")]
		public void DoubleBulletSpin()
		{
		}

		[Token(Token = "0x600315B")]
		[Address(RVA = "0xCA5EB4", Offset = "0xCA5EB4", VA = "0xCA5EB4")]
		public void DeleteUser(string id)
		{
		}

		[Token(Token = "0x600315C")]
		[Address(RVA = "0xC9AA94", Offset = "0xC9AA94", VA = "0xC9AA94")]
		public void SwitchTurnToNextUser()
		{
		}

		[Token(Token = "0x600315D")]
		[Address(RVA = "0xCA617C", Offset = "0xCA617C", VA = "0xCA617C")]
		public int AlivePlayers()
		{
			return default(int);
		}

		[Token(Token = "0x600315E")]
		[Address(RVA = "0xCA6080", Offset = "0xCA6080", VA = "0xCA6080")]
		private void SwitchTurnCounerClockwise()
		{
		}

		[Token(Token = "0x600315F")]
		[Address(RVA = "0xCA5F7C", Offset = "0xCA5F7C", VA = "0xCA5F7C")]
		private void SwitchTurClockwise()
		{
		}

		[Token(Token = "0x6003160")]
		[Address(RVA = "0xCA6218", Offset = "0xCA6218", VA = "0xCA6218")]
		public void MakeRandomTurn()
		{
		}

		[Token(Token = "0x6003161")]
		[Address(RVA = "0xC99514", Offset = "0xC99514", VA = "0xC99514")]
		public PlayerState GetPlayerState(string id)
		{
			return null;
		}

		[Token(Token = "0x6003162")]
		[Address(RVA = "0xCA626C", Offset = "0xCA626C", VA = "0xCA626C")]
		public void ClearUsersStates()
		{
		}

		[Token(Token = "0x6003163")]
		[Address(RVA = "0xCA6338", Offset = "0xCA6338", VA = "0xCA6338", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6003164")]
		[Address(RVA = "0xCA63DC", Offset = "0xCA63DC", VA = "0xCA63DC")]
		public void ResetState()
		{
		}

		[Token(Token = "0x6003165")]
		[Address(RVA = "0xCA64C8", Offset = "0xCA64C8", VA = "0xCA64C8")]
		public GameState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007E9")]
	public class PlayerPostion
	{
		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform drinkSpawnPoint;

		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform coinSpawnPont;

		[Token(Token = "0x4002929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pepelnitsaSpawnPoint;

		[Token(Token = "0x400292A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cigaretteSpawnPoint;

		[Token(Token = "0x400292B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform place;

		[Token(Token = "0x400292C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform playerPlace;

		[Token(Token = "0x400292D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform playerModelPlace;

		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject turnArrow;

		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject reloadIndicator;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text moneyText;

		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Text takeGun;

		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject reloadCardPoint;

		[Token(Token = "0x6003166")]
		[Address(RVA = "0xCA49A0", Offset = "0xCA49A0", VA = "0xCA49A0")]
		public void Hide()
		{
		}

		[Token(Token = "0x6003167")]
		[Address(RVA = "0xCA6560", Offset = "0xCA6560", VA = "0xCA6560")]
		public PlayerPostion()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007EA")]
	public class PlayerState
	{
		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isKilled;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string UserID;

		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lifeCount;

		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int money;

		[Token(Token = "0x4002937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool canReload;

		[Token(Token = "0x4002938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isNPC;

		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] playerWhoShotMe;

		[Token(Token = "0x17000380")]
		public bool IsKilled
		{
			[Token(Token = "0x6003168")]
			[Address(RVA = "0xCA6568", Offset = "0xCA6568", VA = "0xCA6568")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003169")]
			[Address(RVA = "0xCA5E3C", Offset = "0xCA5E3C", VA = "0xCA5E3C")]
			set
			{
			}
		}

		[Token(Token = "0x600316A")]
		[Address(RVA = "0xCA5D50", Offset = "0xCA5D50", VA = "0xCA5D50")]
		public PlayerState()
		{
		}

		[Token(Token = "0x600316B")]
		[Address(RVA = "0xCA6570", Offset = "0xCA6570", VA = "0xCA6570", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20007EB")]
	public class RoomPropertiesKey
	{
		[Token(Token = "0x400293A")]
		public const string PlayerType = "PlayerType";

		[Token(Token = "0x400293B")]
		public const string FirstGamePlayed = "FirstGamePlayed";

		[Token(Token = "0x400293C")]
		public const string EnviromentNum = "SelectedEnviroment";

		[Token(Token = "0x600316C")]
		[Address(RVA = "0xCA6578", Offset = "0xCA6578", VA = "0xCA6578")]
		public RoomPropertiesKey()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	public class GlassesSystem : MonoBehaviour
	{
		[Token(Token = "0x20007ED")]
		[CompilerGenerated]
		private sealed class <GiveGlassesNumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GlassesSystem <>4__this;

			[Token(Token = "0x4002946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000383")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600317B")]
				[Address(RVA = "0xCA79C4", Offset = "0xCA79C4", VA = "0xCA79C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000384")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600317D")]
				[Address(RVA = "0xCA7A0C", Offset = "0xCA7A0C", VA = "0xCA7A0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003178")]
			[Address(RVA = "0xCA71E4", Offset = "0xCA71E4", VA = "0xCA71E4")]
			[DebuggerHidden]
			public <GiveGlassesNumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6003179")]
			[Address(RVA = "0xCA7470", Offset = "0xCA7470", VA = "0xCA7470", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600317A")]
			[Address(RVA = "0xCA7474", Offset = "0xCA7474", VA = "0xCA7474", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600317C")]
			[Address(RVA = "0xCA79CC", Offset = "0xCA79CC", VA = "0xCA79CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GlassesSystem Instance;

		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject wineGlassPrefab;

		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject roxPrefab;

		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cupOfTeaPrefab;

		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<KeyValuePair<int, GlassType>> crashedGlasses;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Glass> glasses;

		[Token(Token = "0x17000381")]
		public bool HaveBrokenGlasses
		{
			[Token(Token = "0x600316E")]
			[Address(RVA = "0xCA66FC", Offset = "0xCA66FC", VA = "0xCA66FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000382")]
		public int BrokenGlassesCount
		{
			[Token(Token = "0x600316F")]
			[Address(RVA = "0xCA6774", Offset = "0xCA6774", VA = "0xCA6774")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600316D")]
		[Address(RVA = "0xCA6580", Offset = "0xCA6580", VA = "0xCA6580")]
		[ContextMenu("Show crashed glasses")]
		private void Show()
		{
		}

		[Token(Token = "0x6003170")]
		[Address(RVA = "0xCA67BC", Offset = "0xCA67BC", VA = "0xCA67BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003171")]
		[Address(RVA = "0xCA6870", Offset = "0xCA6870", VA = "0xCA6870")]
		public void GlassCrashed(GlassType type, int playerIdex)
		{
		}

		[Token(Token = "0x6003172")]
		[Address(RVA = "0xCA6A20", Offset = "0xCA6A20", VA = "0xCA6A20")]
		public void CreateGlass(Transform instPoint, int number)
		{
		}

		[Token(Token = "0x6003173")]
		[Address(RVA = "0xCA7150", Offset = "0xCA7150", VA = "0xCA7150")]
		public void GiveGlasses()
		{
		}

		[Token(Token = "0x6003174")]
		[Address(RVA = "0xCA7170", Offset = "0xCA7170", VA = "0xCA7170")]
		[IteratorStateMachine(typeof(<GiveGlassesNumerator>d__15))]
		private IEnumerator GiveGlassesNumerator()
		{
			return null;
		}

		[Token(Token = "0x6003175")]
		[Address(RVA = "0xCA720C", Offset = "0xCA720C", VA = "0xCA720C")]
		public void ResetGlasses()
		{
		}

		[Token(Token = "0x6003176")]
		[Address(RVA = "0xCA729C", Offset = "0xCA729C", VA = "0xCA729C")]
		public void ClearGlassesReferences()
		{
		}

		[Token(Token = "0x6003177")]
		[Address(RVA = "0xCA7398", Offset = "0xCA7398", VA = "0xCA7398")]
		public GlassesSystem()
		{
		}
	}
	[Token(Token = "0x20007EE")]
	public class WinPanel : MonoBehaviour
	{
		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject winPanel;

		[Token(Token = "0x600317E")]
		[Address(RVA = "0xCA7A14", Offset = "0xCA7A14", VA = "0xCA7A14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600317F")]
		[Address(RVA = "0xCA7B18", Offset = "0xCA7B18", VA = "0xCA7B18")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003180")]
		[Address(RVA = "0xCA7B44", Offset = "0xCA7B44", VA = "0xCA7B44")]
		public WinPanel()
		{
		}
	}
	[Token(Token = "0x20007EF")]
	public delegate void PlayerDrinked();
	[Token(Token = "0x20007F0")]
	public class Glass : MonoBehaviour
	{
		[Token(Token = "0x20007F1")]
		[CompilerGenerated]
		private sealed class <DelayedDestroyGlass>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400295E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400295F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Glass <>4__this;

			[Token(Token = "0x17000387")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600319F")]
				[Address(RVA = "0xCA87E0", Offset = "0xCA87E0", VA = "0xCA87E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000388")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60031A1")]
				[Address(RVA = "0xCA8828", Offset = "0xCA8828", VA = "0xCA8828", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600319C")]
			[Address(RVA = "0xCA8674", Offset = "0xCA8674", VA = "0xCA8674")]
			[DebuggerHidden]
			public <DelayedDestroyGlass>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x600319D")]
			[Address(RVA = "0xCA86F4", Offset = "0xCA86F4", VA = "0xCA86F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600319E")]
			[Address(RVA = "0xCA86F8", Offset = "0xCA86F8", VA = "0xCA86F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60031A0")]
			[Address(RVA = "0xCA87E8", Offset = "0xCA87E8", VA = "0xCA87E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GlassID;

		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Glass Instance;

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GlassType glassType;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ParticleSystem particleSystem;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject fullnessIndicator;

		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float angleToPour;

		[Token(Token = "0x4002951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float timeToDrinkFull;

		[Token(Token = "0x4002952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float pourTime;

		[Token(Token = "0x4002953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float playerDrinkedTime;

		[Token(Token = "0x4002954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PhotonView photonView;

		[Token(Token = "0x4002955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isLiquidPours;

		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isGlassInPlayerMouth;

		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string UserID_ofDrinkingPlayer;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float network_pourTime;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float network_playerDrinkedTime;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool network_isLiquidPours;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool network_isGlassInPlayerMouth;

		[Token(Token = "0x17000385")]
		public bool WaitressCarry
		{
			[Token(Token = "0x6003185")]
			[Address(RVA = "0xCA7C58", Offset = "0xCA7C58", VA = "0xCA7C58")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003186")]
			[Address(RVA = "0xCA7C60", Offset = "0xCA7C60", VA = "0xCA7C60")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public int GlassPointIndex
		{
			[Token(Token = "0x6003187")]
			[Address(RVA = "0xCA7C6C", Offset = "0xCA7C6C", VA = "0xCA7C6C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003188")]
			[Address(RVA = "0xCA7C74", Offset = "0xCA7C74", VA = "0xCA7C74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000114")]
		public event PlayerDrinked OnPlayerDrinked
		{
			[Token(Token = "0x6003189")]
			[Address(RVA = "0xCA7C7C", Offset = "0xCA7C7C", VA = "0xCA7C7C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600318A")]
			[Address(RVA = "0xCA7D18", Offset = "0xCA7D18", VA = "0xCA7D18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000115")]
		public event Action<float> onWaterInGlassChange
		{
			[Token(Token = "0x600318B")]
			[Address(RVA = "0xCA7DB4", Offset = "0xCA7DB4", VA = "0xCA7DB4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600318C")]
			[Address(RVA = "0xCA7E64", Offset = "0xCA7E64", VA = "0xCA7E64")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600318D")]
		[Address(RVA = "0xCA7F14", Offset = "0xCA7F14", VA = "0xCA7F14")]
		private void Awake()
		{
		}

		[Token(Token = "0x600318E")]
		[Address(RVA = "0xCA7FA4", Offset = "0xCA7FA4", VA = "0xCA7FA4")]
		private void Start()
		{
		}

		[Token(Token = "0x600318F")]
		[Address(RVA = "0xCA8044", Offset = "0xCA8044", VA = "0xCA8044")]
		private void Update()
		{
		}

		[Token(Token = "0x6003190")]
		[Address(RVA = "0xCA8048", Offset = "0xCA8048", VA = "0xCA8048")]
		private void CheckGlassRotation()
		{
		}

		[Token(Token = "0x6003191")]
		[Address(RVA = "0xCA810C", Offset = "0xCA810C", VA = "0xCA810C")]
		private void PourLiquid()
		{
		}

		[Token(Token = "0x6003192")]
		[Address(RVA = "0xCA8294", Offset = "0xCA8294", VA = "0xCA8294")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003193")]
		[Address(RVA = "0xCA82FC", Offset = "0xCA82FC", VA = "0xCA82FC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6003194")]
		[Address(RVA = "0xCA8360", Offset = "0xCA8360", VA = "0xCA8360")]
		private void PlayerDrinked()
		{
		}

		[Token(Token = "0x6003195")]
		[Address(RVA = "0xCA842C", Offset = "0xCA842C", VA = "0xCA842C")]
		public void SetUser(Photon.Realtime.Player player)
		{
		}

		[Token(Token = "0x6003196")]
		[Address(RVA = "0xCA8448", Offset = "0xCA8448", VA = "0xCA8448")]
		[PunRPC]
		private void RPC_PlayerDrinked(string userID)
		{
		}

		[Token(Token = "0x6003197")]
		[Address(RVA = "0xCA7148", Offset = "0xCA7148", VA = "0xCA7148")]
		[PunRPC]
		public void RPC_SetUpGlassPoint(int index)
		{
		}

		[Token(Token = "0x6003198")]
		[Address(RVA = "0xCA84D4", Offset = "0xCA84D4", VA = "0xCA84D4")]
		public void DisableGlass()
		{
		}

		[Token(Token = "0x6003199")]
		[Address(RVA = "0xCA8600", Offset = "0xCA8600", VA = "0xCA8600")]
		[IteratorStateMachine(typeof(<DelayedDestroyGlass>d__43))]
		private IEnumerator DelayedDestroyGlass()
		{
			return null;
		}

		[Token(Token = "0x600319A")]
		[Address(RVA = "0xCA869C", Offset = "0xCA869C", VA = "0xCA869C")]
		[PunRPC]
		private void RPC_RequestToDestroyGlass()
		{
		}

		[Token(Token = "0x600319B")]
		[Address(RVA = "0xCA86D8", Offset = "0xCA86D8", VA = "0xCA86D8")]
		public Glass()
		{
		}
	}
	[Token(Token = "0x20007F2")]
	public class GrabbaleObjects : VRTK_ChildOfControllerGrabAttach
	{
		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GrabbObject objectType;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private VRTK_InteractableObject interactableObject;

		[Token(Token = "0x17000389")]
		public bool IsGrabbed
		{
			[Token(Token = "0x60031A2")]
			[Address(RVA = "0xCA8830", Offset = "0xCA8830", VA = "0xCA8830")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60031A3")]
			[Address(RVA = "0xCA8838", Offset = "0xCA8838", VA = "0xCA8838")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60031A4")]
		[Address(RVA = "0xCA8844", Offset = "0xCA8844", VA = "0xCA8844", Slot = "16")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60031A5")]
		[Address(RVA = "0xCA88A8", Offset = "0xCA88A8", VA = "0xCA88A8")]
		[PunRPC]
		private void RPC_AttachPistolNetwork(string userID, int hand)
		{
		}

		[Token(Token = "0x60031A6")]
		[Address(RVA = "0xCA8C74", Offset = "0xCA8C74", VA = "0xCA8C74", Slot = "25")]
		protected override void SnapObjectToGrabToController(GameObject obj)
		{
		}

		[Token(Token = "0x60031A7")]
		[Address(RVA = "0xCA95C8", Offset = "0xCA95C8", VA = "0xCA95C8", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Token(Token = "0x60031A8")]
		[Address(RVA = "0xCA9CB4", Offset = "0xCA9CB4", VA = "0xCA9CB4")]
		[PunRPC]
		private void RigidbodyKinimatic(bool value)
		{
		}

		[Token(Token = "0x60031A9")]
		[Address(RVA = "0xCA9D78", Offset = "0xCA9D78", VA = "0xCA9D78")]
		[PunRPC]
		private void NetworkTransformSync(bool value)
		{
		}

		[Token(Token = "0x60031AA")]
		[Address(RVA = "0xCA9DE0", Offset = "0xCA9DE0", VA = "0xCA9DE0")]
		[PunRPC]
		private void RPC_DisableAFK_pistolGrabbale()
		{
		}

		[Token(Token = "0x60031AB")]
		[Address(RVA = "0xCA9E38", Offset = "0xCA9E38", VA = "0xCA9E38")]
		[PunRPC]
		private void SetParentToObject()
		{
		}

		[Token(Token = "0x60031AC")]
		[Address(RVA = "0xCA9EF0", Offset = "0xCA9EF0", VA = "0xCA9EF0")]
		[PunRPC]
		private void ResetObjectParent()
		{
		}

		[Token(Token = "0x60031AD")]
		[Address(RVA = "0xCA70E0", Offset = "0xCA70E0", VA = "0xCA70E0")]
		[PunRPC]
		public void EnablingSync(bool enable)
		{
		}

		[Token(Token = "0x60031AE")]
		[Address(RVA = "0xCA9FD0", Offset = "0xCA9FD0", VA = "0xCA9FD0")]
		public bool IsOwnerTransfered()
		{
			return default(bool);
		}

		[Token(Token = "0x60031AF")]
		[Address(RVA = "0xCAA0B0", Offset = "0xCAA0B0", VA = "0xCAA0B0")]
		public GrabbaleObjects()
		{
		}
	}
	[Token(Token = "0x20007F4")]
	public class Lobby : MonoBehaviourPunCallbacks
	{
		[Serializable]
		[Token(Token = "0x20007F5")]
		public class LobbyUI
		{
			[Token(Token = "0x40029A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject screen1;

			[Token(Token = "0x40029A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject screen2;

			[Token(Token = "0x40029A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject screen3;

			[Token(Token = "0x40029A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject screen4;

			[Token(Token = "0x40029A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject screen5;

			[Token(Token = "0x40029A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public GameObject console;

			[Token(Token = "0x40029A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public GameObject inviteScreen;

			[Token(Token = "0x40029A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public GameObject settingsScreen;

			[Token(Token = "0x40029AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GameObject regionScreen;

			[Token(Token = "0x40029AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public GameObject regionInfo;

			[Token(Token = "0x40029AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public GameObject kickedScreen;

			[Token(Token = "0x40029AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public GameObject connectingScreen;

			[Token(Token = "0x40029AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public GameObject joiningInvitationScreen;

			[Token(Token = "0x40029AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public GameObject creatingRoomScreen;

			[Token(Token = "0x40029B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public GameObject entitelmentsFailScreen;

			[Token(Token = "0x40029B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public GameObject numpadCreateRoomScreen;

			[Token(Token = "0x40029B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public GameObject numpadJoinRoomScreen;

			[Token(Token = "0x40029B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public GameObject selectFindGameTypeScreen;

			[Token(Token = "0x40029B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public RoomUI roomUI;

			[Token(Token = "0x40029B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public GameObject inviteFriendsButtonPrefab;

			[Token(Token = "0x40029B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public List<Sprite> elementBG;

			[Token(Token = "0x40029B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int lastScreenIndex;

			[Token(Token = "0x600320D")]
			[Address(RVA = "0xCB0B98", Offset = "0xCB0B98", VA = "0xCB0B98")]
			public void ShowScreenPanel(int screenIndex)
			{
			}

			[Token(Token = "0x600320E")]
			[Address(RVA = "0xCB12E0", Offset = "0xCB12E0", VA = "0xCB12E0")]
			public void ShowErrorPanel()
			{
			}

			[Token(Token = "0x600320F")]
			[Address(RVA = "0xCB12E4", Offset = "0xCB12E4", VA = "0xCB12E4")]
			public void UpdateRoomPlayersList(Photon.Realtime.Player[] playerArray)
			{
			}

			[Token(Token = "0x6003210")]
			[Address(RVA = "0xCB1B7C", Offset = "0xCB1B7C", VA = "0xCB1B7C")]
			public void HideAllScreens()
			{
			}

			[Token(Token = "0x6003211")]
			[Address(RVA = "0xCB1CA4", Offset = "0xCB1CA4", VA = "0xCB1CA4")]
			public LobbyUI()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20007F7")]
		public class RoomUI
		{
			[Token(Token = "0x40029B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform roomListPanel;

			[Token(Token = "0x40029BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject listERlementPrefab;

			[Token(Token = "0x40029BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject startGameButton;

			[Token(Token = "0x6003217")]
			[Address(RVA = "0xCB1F38", Offset = "0xCB1F38", VA = "0xCB1F38")]
			public RoomUI()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20007F8")]
		public class LobbyConsole
		{
			[Token(Token = "0x20007F9")]
			[CompilerGenerated]
			private sealed class <PingNumerator>d__4 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40029BF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x40029C0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x40029C1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public LobbyConsole <>4__this;

				[Token(Token = "0x1700038C")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600321E")]
					[Address(RVA = "0xCB2278", Offset = "0xCB2278", VA = "0xCB2278", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700038D")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6003220")]
					[Address(RVA = "0xCB22C0", Offset = "0xCB22C0", VA = "0xCB22C0", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x600321B")]
				[Address(RVA = "0xCB210C", Offset = "0xCB210C", VA = "0xCB210C")]
				[DebuggerHidden]
				public <PingNumerator>d__4(int <>1__state)
				{
				}

				[Token(Token = "0x600321C")]
				[Address(RVA = "0xCB213C", Offset = "0xCB213C", VA = "0xCB213C", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x600321D")]
				[Address(RVA = "0xCB2140", Offset = "0xCB2140", VA = "0xCB2140", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600321F")]
				[Address(RVA = "0xCB2280", Offset = "0xCB2280", VA = "0xCB2280", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x40029BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text ping;

			[Token(Token = "0x40029BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text region;

			[Token(Token = "0x40029BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Text msg;

			[Token(Token = "0x6003218")]
			[Address(RVA = "0xCB1F40", Offset = "0xCB1F40", VA = "0xCB1F40")]
			public void InitConsole(string msg, MonoBehaviour behaviour)
			{
			}

			[Token(Token = "0x6003219")]
			[Address(RVA = "0xCB2098", Offset = "0xCB2098", VA = "0xCB2098")]
			[IteratorStateMachine(typeof(<PingNumerator>d__4))]
			private IEnumerator PingNumerator()
			{
				return null;
			}

			[Token(Token = "0x600321A")]
			[Address(RVA = "0xCB2134", Offset = "0xCB2134", VA = "0xCB2134")]
			public LobbyConsole()
			{
			}
		}

		[Token(Token = "0x20007FA")]
		[CompilerGenerated]
		private sealed class <CheckPlusAndConnect>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700038E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003224")]
				[Address(RVA = "0xCB2378", Offset = "0xCB2378", VA = "0xCB2378", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003226")]
				[Address(RVA = "0xCB23C0", Offset = "0xCB23C0", VA = "0xCB23C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003221")]
			[Address(RVA = "0xCB22C8", Offset = "0xCB22C8", VA = "0xCB22C8")]
			[DebuggerHidden]
			public <CheckPlusAndConnect>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6003222")]
			[Address(RVA = "0xCB22F0", Offset = "0xCB22F0", VA = "0xCB22F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003223")]
			[Address(RVA = "0xCB22F4", Offset = "0xCB22F4", VA = "0xCB22F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003225")]
			[Address(RVA = "0xCB2380", Offset = "0xCB2380", VA = "0xCB2380", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007FB")]
		[CompilerGenerated]
		private sealed class <Init>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x17000390")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600322A")]
				[Address(RVA = "0xCB27D4", Offset = "0xCB27D4", VA = "0xCB27D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000391")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600322C")]
				[Address(RVA = "0xCB281C", Offset = "0xCB281C", VA = "0xCB281C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003227")]
			[Address(RVA = "0xCB23C8", Offset = "0xCB23C8", VA = "0xCB23C8")]
			[DebuggerHidden]
			public <Init>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6003228")]
			[Address(RVA = "0xCB23F0", Offset = "0xCB23F0", VA = "0xCB23F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003229")]
			[Address(RVA = "0xCB23F4", Offset = "0xCB23F4", VA = "0xCB23F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600322B")]
			[Address(RVA = "0xCB27DC", Offset = "0xCB27DC", VA = "0xCB27DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007FC")]
		[CompilerGenerated]
		private sealed class <StartLobbyMenu>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x17000392")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003230")]
				[Address(RVA = "0xCB2B90", Offset = "0xCB2B90", VA = "0xCB2B90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000393")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003232")]
				[Address(RVA = "0xCB2BD8", Offset = "0xCB2BD8", VA = "0xCB2BD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600322D")]
			[Address(RVA = "0xCB2824", Offset = "0xCB2824", VA = "0xCB2824")]
			[DebuggerHidden]
			public <StartLobbyMenu>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x600322E")]
			[Address(RVA = "0xCB284C", Offset = "0xCB284C", VA = "0xCB284C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600322F")]
			[Address(RVA = "0xCB2850", Offset = "0xCB2850", VA = "0xCB2850", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003231")]
			[Address(RVA = "0xCB2B98", Offset = "0xCB2B98", VA = "0xCB2B98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007FD")]
		[CompilerGenerated]
		private sealed class <WaitingSonyRoomCreation>d__86 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x17000394")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003236")]
				[Address(RVA = "0xCB2D44", Offset = "0xCB2D44", VA = "0xCB2D44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000395")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003238")]
				[Address(RVA = "0xCB2D8C", Offset = "0xCB2D8C", VA = "0xCB2D8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003233")]
			[Address(RVA = "0xCB2BE0", Offset = "0xCB2BE0", VA = "0xCB2BE0")]
			[DebuggerHidden]
			public <WaitingSonyRoomCreation>d__86(int <>1__state)
			{
			}

			[Token(Token = "0x6003234")]
			[Address(RVA = "0xCB2C08", Offset = "0xCB2C08", VA = "0xCB2C08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003235")]
			[Address(RVA = "0xCB2C0C", Offset = "0xCB2C0C", VA = "0xCB2C0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003237")]
			[Address(RVA = "0xCB2D4C", Offset = "0xCB2D4C", VA = "0xCB2D4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007FE")]
		[CompilerGenerated]
		private sealed class <LoadingCircleEnable>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x17000396")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600323C")]
				[Address(RVA = "0xCB2EB0", Offset = "0xCB2EB0", VA = "0xCB2EB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000397")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600323E")]
				[Address(RVA = "0xCB2EF8", Offset = "0xCB2EF8", VA = "0xCB2EF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003239")]
			[Address(RVA = "0xCB2D94", Offset = "0xCB2D94", VA = "0xCB2D94")]
			[DebuggerHidden]
			public <LoadingCircleEnable>d__96(int <>1__state)
			{
			}

			[Token(Token = "0x600323A")]
			[Address(RVA = "0xCB2DBC", Offset = "0xCB2DBC", VA = "0xCB2DBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600323B")]
			[Address(RVA = "0xCB2DC0", Offset = "0xCB2DC0", VA = "0xCB2DC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600323D")]
			[Address(RVA = "0xCB2EB8", Offset = "0xCB2EB8", VA = "0xCB2EB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007FF")]
		[CompilerGenerated]
		private sealed class <WaitForWaitressSetUp>d__108 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000398")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003242")]
				[Address(RVA = "0xCB30DC", Offset = "0xCB30DC", VA = "0xCB30DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000399")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003244")]
				[Address(RVA = "0xCB3124", Offset = "0xCB3124", VA = "0xCB3124", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600323F")]
			[Address(RVA = "0xCB2F00", Offset = "0xCB2F00", VA = "0xCB2F00")]
			[DebuggerHidden]
			public <WaitForWaitressSetUp>d__108(int <>1__state)
			{
			}

			[Token(Token = "0x6003240")]
			[Address(RVA = "0xCB2F28", Offset = "0xCB2F28", VA = "0xCB2F28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003241")]
			[Address(RVA = "0xCB2F2C", Offset = "0xCB2F2C", VA = "0xCB2F2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003243")]
			[Address(RVA = "0xCB30E4", Offset = "0xCB30E4", VA = "0xCB30E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000800")]
		[CompilerGenerated]
		private sealed class <SwitchMaster>d__113 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Photon.Realtime.Player <newMaster>5__2;

			[Token(Token = "0x1700039A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003248")]
				[Address(RVA = "0xCB329C", Offset = "0xCB329C", VA = "0xCB329C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600324A")]
				[Address(RVA = "0xCB32E4", Offset = "0xCB32E4", VA = "0xCB32E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003245")]
			[Address(RVA = "0xCB312C", Offset = "0xCB312C", VA = "0xCB312C")]
			[DebuggerHidden]
			public <SwitchMaster>d__113(int <>1__state)
			{
			}

			[Token(Token = "0x6003246")]
			[Address(RVA = "0xCB3154", Offset = "0xCB3154", VA = "0xCB3154", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003247")]
			[Address(RVA = "0xCB3158", Offset = "0xCB3158", VA = "0xCB3158", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003249")]
			[Address(RVA = "0xCB32A4", Offset = "0xCB32A4", VA = "0xCB32A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000801")]
		[CompilerGenerated]
		private sealed class <LeaveRoomNumerator>d__115 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x40029D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool HostLeaving;

			[Token(Token = "0x40029D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			public bool wasKickedByMaster;

			[Token(Token = "0x1700039C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600324E")]
				[Address(RVA = "0xCB46FC", Offset = "0xCB46FC", VA = "0xCB46FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003250")]
				[Address(RVA = "0xCB4744", Offset = "0xCB4744", VA = "0xCB4744", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600324B")]
			[Address(RVA = "0xCB32EC", Offset = "0xCB32EC", VA = "0xCB32EC")]
			[DebuggerHidden]
			public <LeaveRoomNumerator>d__115(int <>1__state)
			{
			}

			[Token(Token = "0x600324C")]
			[Address(RVA = "0xCB3314", Offset = "0xCB3314", VA = "0xCB3314", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600324D")]
			[Address(RVA = "0xCB3318", Offset = "0xCB3318", VA = "0xCB3318", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600324F")]
			[Address(RVA = "0xCB4704", Offset = "0xCB4704", VA = "0xCB4704", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000802")]
		[CompilerGenerated]
		private sealed class <InstantiateOnlyLobbyPlayer>d__116 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x1700039E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003254")]
				[Address(RVA = "0xCB49F0", Offset = "0xCB49F0", VA = "0xCB49F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003256")]
				[Address(RVA = "0xCB4A38", Offset = "0xCB4A38", VA = "0xCB4A38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003251")]
			[Address(RVA = "0xCB474C", Offset = "0xCB474C", VA = "0xCB474C")]
			[DebuggerHidden]
			public <InstantiateOnlyLobbyPlayer>d__116(int <>1__state)
			{
			}

			[Token(Token = "0x6003252")]
			[Address(RVA = "0xCB4774", Offset = "0xCB4774", VA = "0xCB4774", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003253")]
			[Address(RVA = "0xCB4778", Offset = "0xCB4778", VA = "0xCB4778", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003255")]
			[Address(RVA = "0xCB49F8", Offset = "0xCB49F8", VA = "0xCB49F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000803")]
		[CompilerGenerated]
		private sealed class <InstantiateLobbyPlayer>d__117 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x40029E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool HostLeaving;

			[Token(Token = "0x170003A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600325A")]
				[Address(RVA = "0xCB4F0C", Offset = "0xCB4F0C", VA = "0xCB4F0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600325C")]
				[Address(RVA = "0xCB4F54", Offset = "0xCB4F54", VA = "0xCB4F54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003257")]
			[Address(RVA = "0xCB4A40", Offset = "0xCB4A40", VA = "0xCB4A40")]
			[DebuggerHidden]
			public <InstantiateLobbyPlayer>d__117(int <>1__state)
			{
			}

			[Token(Token = "0x6003258")]
			[Address(RVA = "0xCB4A68", Offset = "0xCB4A68", VA = "0xCB4A68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003259")]
			[Address(RVA = "0xCB4A6C", Offset = "0xCB4A6C", VA = "0xCB4A6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600325B")]
			[Address(RVA = "0xCB4F14", Offset = "0xCB4F14", VA = "0xCB4F14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000804")]
		[CompilerGenerated]
		private sealed class <ConnectWithPSNAuth>d__138 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003A2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003260")]
				[Address(RVA = "0xCB500C", Offset = "0xCB500C", VA = "0xCB500C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003262")]
				[Address(RVA = "0xCB5054", Offset = "0xCB5054", VA = "0xCB5054", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600325D")]
			[Address(RVA = "0xCB4F5C", Offset = "0xCB4F5C", VA = "0xCB4F5C")]
			[DebuggerHidden]
			public <ConnectWithPSNAuth>d__138(int <>1__state)
			{
			}

			[Token(Token = "0x600325E")]
			[Address(RVA = "0xCB4F84", Offset = "0xCB4F84", VA = "0xCB4F84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600325F")]
			[Address(RVA = "0xCB4F88", Offset = "0xCB4F88", VA = "0xCB4F88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003261")]
			[Address(RVA = "0xCB5014", Offset = "0xCB5014", VA = "0xCB5014", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000805")]
		[CompilerGenerated]
		private sealed class <DelayJoinRoom>d__141 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string roomName;

			[Token(Token = "0x40029E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Lobby <>4__this;

			[Token(Token = "0x170003A4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003266")]
				[Address(RVA = "0xCB5290", Offset = "0xCB5290", VA = "0xCB5290", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003268")]
				[Address(RVA = "0xCB52D8", Offset = "0xCB52D8", VA = "0xCB52D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003263")]
			[Address(RVA = "0xCB505C", Offset = "0xCB505C", VA = "0xCB505C")]
			[DebuggerHidden]
			public <DelayJoinRoom>d__141(int <>1__state)
			{
			}

			[Token(Token = "0x6003264")]
			[Address(RVA = "0xCB5084", Offset = "0xCB5084", VA = "0xCB5084", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003265")]
			[Address(RVA = "0xCB5088", Offset = "0xCB5088", VA = "0xCB5088", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003267")]
			[Address(RVA = "0xCB5298", Offset = "0xCB5298", VA = "0xCB5298", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000806")]
		[CompilerGenerated]
		private sealed class <DelayConnect>d__142 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lobby <>4__this;

			[Token(Token = "0x170003A6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600326C")]
				[Address(RVA = "0xCB54A0", Offset = "0xCB54A0", VA = "0xCB54A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600326E")]
				[Address(RVA = "0xCB54E8", Offset = "0xCB54E8", VA = "0xCB54E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003269")]
			[Address(RVA = "0xCB52E0", Offset = "0xCB52E0", VA = "0xCB52E0")]
			[DebuggerHidden]
			public <DelayConnect>d__142(int <>1__state)
			{
			}

			[Token(Token = "0x600326A")]
			[Address(RVA = "0xCB5308", Offset = "0xCB5308", VA = "0xCB5308", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600326B")]
			[Address(RVA = "0xCB530C", Offset = "0xCB530C", VA = "0xCB530C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600326D")]
			[Address(RVA = "0xCB54A8", Offset = "0xCB54A8", VA = "0xCB54A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000807")]
		[CompilerGenerated]
		private sealed class <SearchGame>d__144 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40029EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40029EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40029EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x170003A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003272")]
				[Address(RVA = "0xCB55F4", Offset = "0xCB55F4", VA = "0xCB55F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003274")]
				[Address(RVA = "0xCB563C", Offset = "0xCB563C", VA = "0xCB563C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600326F")]
			[Address(RVA = "0xCB54F0", Offset = "0xCB54F0", VA = "0xCB54F0")]
			[DebuggerHidden]
			public <SearchGame>d__144(int <>1__state)
			{
			}

			[Token(Token = "0x6003270")]
			[Address(RVA = "0xCB5518", Offset = "0xCB5518", VA = "0xCB5518", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003271")]
			[Address(RVA = "0xCB551C", Offset = "0xCB551C", VA = "0xCB551C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003273")]
			[Address(RVA = "0xCB55FC", Offset = "0xCB55FC", VA = "0xCB55FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Lobby Instance;

		[Token(Token = "0x4002967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject localPianist;

		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject pianist;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject localWaitress;

		[Token(Token = "0x400296A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject waitress;

		[Token(Token = "0x400296B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject localBarmen;

		[Token(Token = "0x400296C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject networkBarmen;

		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject lobbyPlayerPrefab;

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform LobbyPlayerPostion;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject lobbyCanvas;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private string gameVersion;

		[Token(Token = "0x4002971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public LobbyUI lobbyUI;

		[Token(Token = "0x4002972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private LobbyConsole lobbyConsole;

		[Token(Token = "0x4002973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject loadingCircle;

		[Token(Token = "0x4002974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private string gameSceneName;

		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private GameObject rules;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private UnityEvent OnPlayerLeftRoomEvent;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool isConnected;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string nickname;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Coroutine searchRoom;

		[Token(Token = "0x400297B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool needWaitToChangeServer;

		[Token(Token = "0x400297C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private string newRegion;

		[Token(Token = "0x400297D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int issuerId;

		[Token(Token = "0x400297E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private string token;

		[Token(Token = "0x400297F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private string authCode;

		[Token(Token = "0x4002980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool tokenResieved;

		[Token(Token = "0x4002981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool authCodeResieved;

		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		public bool debugOfflineUI;

		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF3")]
		public bool HostLeavingState;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool wasKickedByMasterState;

		[Token(Token = "0x4002985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal string regionForJoinInvitation;

		[Token(Token = "0x4002986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal string roomNameForJoinInvitation;

		[Token(Token = "0x4002987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal bool needJoinRoomFromInvitation;

		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		private bool wasInvite;

		[Token(Token = "0x4002989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int roomId;

		[Token(Token = "0x400298A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int currentSonyUserID;

		[Token(Token = "0x400298B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioSource buttonAudioSource;

		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioClip clickButtonAudio;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool waitingLeftLobby;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public string roomNameForJoin;

		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private bool MasterClientLeave;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool lobbyWasJoined;

		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		private bool joiningProcess;

		[Token(Token = "0x4002992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		[SerializeField]
		internal bool needShowJoinRoomMenu;

		[Token(Token = "0x4002993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		internal bool needLeaveRoom;

		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		internal bool needShowCreatingRoomMenu;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float updatePSPlusStatusTimer;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float updatePSPlusStatusInterval;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool needCreateOfflineRoom;

		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float waitingTimeOut;

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal bool onceFailPlusSwitchMenu;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		internal bool inRoomNow;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		public User SavedUserData;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private bool failEntitelments;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		private bool pianistWasCreatedInSession;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string accessToken;

		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
		public bool regionMenuisOpened;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private LaunchType launchType;

		[Token(Token = "0x1700038A")]
		public int RoomId
		{
			[Token(Token = "0x60031B2")]
			[Address(RVA = "0xCAA0DC", Offset = "0xCAA0DC", VA = "0xCAA0DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700038B")]
		public BulletGroupPresenceState groupPresenceState
		{
			[Token(Token = "0x60031DB")]
			[Address(RVA = "0xCAE60C", Offset = "0xCAE60C", VA = "0xCAE60C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60031DC")]
			[Address(RVA = "0xCAE614", Offset = "0xCAE614", VA = "0xCAE614")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60031B3")]
		[Address(RVA = "0xCAA0E4", Offset = "0xCAA0E4", VA = "0xCAA0E4")]
		private void Start_Connection()
		{
		}

		[Token(Token = "0x60031B4")]
		[Address(RVA = "0xCAA42C", Offset = "0xCAA42C", VA = "0xCAA42C")]
		private int GetUserId()
		{
			return default(int);
		}

		[Token(Token = "0x60031B5")]
		[Address(RVA = "0xCAA49C", Offset = "0xCAA49C", VA = "0xCAA49C")]
		public void NotifyPlusFeature()
		{
		}

		[Token(Token = "0x60031B6")]
		[Address(RVA = "0xCAA4A0", Offset = "0xCAA4A0", VA = "0xCAA4A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60031B7")]
		[Address(RVA = "0xCAABD4", Offset = "0xCAABD4", VA = "0xCAABD4")]
		[IteratorStateMachine(typeof(<CheckPlusAndConnect>d__45))]
		public IEnumerator CheckPlusAndConnect(bool async, Action OnValidPlusCheck, [Optional] Action OnFailPlusCheck)
		{
			return null;
		}

		[Token(Token = "0x60031B8")]
		[Address(RVA = "0xCAAC34", Offset = "0xCAAC34", VA = "0xCAAC34")]
		private void Awake()
		{
		}

		[Token(Token = "0x60031B9")]
		[Address(RVA = "0xCAAD50", Offset = "0xCAAD50", VA = "0xCAAD50")]
		[IteratorStateMachine(typeof(<Init>d__47))]
		private IEnumerator Init()
		{
			return null;
		}

		[Token(Token = "0x60031BA")]
		[Address(RVA = "0xCAADC4", Offset = "0xCAADC4", VA = "0xCAADC4")]
		private void OnJoinIntentReceived(Message<GroupPresenceJoinIntent> message)
		{
		}

		[Token(Token = "0x60031BB")]
		[Address(RVA = "0xCAB26C", Offset = "0xCAB26C", VA = "0xCAB26C")]
		private void OnInvitationsSent(Message<LaunchInvitePanelFlowResult> message)
		{
		}

		[Token(Token = "0x60031BC")]
		[Address(RVA = "0xCAB694", Offset = "0xCAB694", VA = "0xCAB694")]
		private void CheckEntitelmentsAndGetUser(Message<PlatformInitialize> message)
		{
		}

		[Token(Token = "0x60031BD")]
		[Address(RVA = "0xCAB7BC", Offset = "0xCAB7BC", VA = "0xCAB7BC")]
		private void GetCurrentUserInfo(Message<User> message)
		{
		}

		[Token(Token = "0x60031BE")]
		[Address(RVA = "0xCAB9C0", Offset = "0xCAB9C0", VA = "0xCAB9C0")]
		private void entitlementsCallbackMethod(Message msg)
		{
		}

		[Token(Token = "0x60031BF")]
		[Address(RVA = "0xCABC28", Offset = "0xCABC28", VA = "0xCABC28")]
		public void QuitApp()
		{
		}

		[Token(Token = "0x60031C0")]
		[Address(RVA = "0xCABC30", Offset = "0xCABC30", VA = "0xCABC30")]
		private void OnGetToken(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60031C1")]
		[Address(RVA = "0xCABC3C", Offset = "0xCABC3C", VA = "0xCABC3C")]
		private void OnGetAuthCode(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60031C2")]
		[Address(RVA = "0xCABC48", Offset = "0xCABC48", VA = "0xCABC48")]
		private string GetNickName()
		{
			return null;
		}

		[Token(Token = "0x60031C3")]
		[Address(RVA = "0xCABD3C", Offset = "0xCABD3C", VA = "0xCABD3C", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60031C4")]
		[Address(RVA = "0xCABEC4", Offset = "0xCABEC4", VA = "0xCABEC4", Slot = "36")]
		public override void OnJoinedLobby()
		{
		}

		[Token(Token = "0x60031C5")]
		[Address(RVA = "0xCABF10", Offset = "0xCABF10", VA = "0xCABF10")]
		[IteratorStateMachine(typeof(<StartLobbyMenu>d__59))]
		private IEnumerator StartLobbyMenu()
		{
			return null;
		}

		[Token(Token = "0x60031C6")]
		[Address(RVA = "0xCABF84", Offset = "0xCABF84", VA = "0xCABF84")]
		public void OpenStartMenu()
		{
		}

		[Token(Token = "0x60031C7")]
		[Address(RVA = "0xCABFA4", Offset = "0xCABFA4", VA = "0xCABFA4", Slot = "37")]
		public override void OnLeftLobby()
		{
		}

		[Token(Token = "0x60031C8")]
		[Address(RVA = "0xCAC080", Offset = "0xCAC080", VA = "0xCAC080", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60031C9")]
		[Address(RVA = "0xCAC328", Offset = "0xCAC328", VA = "0xCAC328", Slot = "34")]
		public override void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60031CA")]
		[Address(RVA = "0xCAC494", Offset = "0xCAC494", VA = "0xCAC494")]
		public void LeftLobbyAndJoinRoom(string roomName)
		{
		}

		[Token(Token = "0x60031CB")]
		[Address(RVA = "0xCAC510", Offset = "0xCAC510", VA = "0xCAC510", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60031CC")]
		[Address(RVA = "0xCACB1C", Offset = "0xCACB1C", VA = "0xCACB1C", Slot = "33")]
		public override void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60031CD")]
		[Address(RVA = "0xCACC0C", Offset = "0xCACC0C", VA = "0xCACC0C", Slot = "32")]
		public override void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
		{
		}

		[Token(Token = "0x60031CE")]
		[Address(RVA = "0xCACCB4", Offset = "0xCACCB4", VA = "0xCACCB4")]
		public void SetStartButtonNewPosition(int ind)
		{
		}

		[Token(Token = "0x60031CF")]
		[Address(RVA = "0xCACD88", Offset = "0xCACD88", VA = "0xCACD88", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60031D0")]
		[Address(RVA = "0xCACFF8", Offset = "0xCACFF8", VA = "0xCACFF8")]
		[IteratorStateMachine(typeof(<WaitingSonyRoomCreation>d__86))]
		private IEnumerator WaitingSonyRoomCreation()
		{
			return null;
		}

		[Token(Token = "0x60031D1")]
		[Address(RVA = "0xCAD06C", Offset = "0xCAD06C", VA = "0xCAD06C")]
		private void CreateInRoomMenuAndObjects()
		{
		}

		[Token(Token = "0x60031D2")]
		[Address(RVA = "0xCAC1F0", Offset = "0xCAC1F0", VA = "0xCAC1F0")]
		private static ExitGames.Client.Photon.Hashtable SetupRoomProrerty()
		{
			return null;
		}

		[Token(Token = "0x60031D3")]
		[Address(RVA = "0xCAD68C", Offset = "0xCAD68C", VA = "0xCAD68C", Slot = "43")]
		public override void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
		{
		}

		[Token(Token = "0x60031D4")]
		[Address(RVA = "0xCADC80", Offset = "0xCADC80", VA = "0xCADC80", Slot = "42")]
		public override void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
		{
		}

		[Token(Token = "0x60031D5")]
		[Address(RVA = "0xCADEF0", Offset = "0xCADEF0", VA = "0xCADEF0", Slot = "46")]
		public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60031D6")]
		[Address(RVA = "0xCAE0C4", Offset = "0xCAE0C4", VA = "0xCAE0C4", Slot = "31")]
		public override void OnLeftRoom()
		{
		}

		[Token(Token = "0x60031D7")]
		[Address(RVA = "0xCAE348", Offset = "0xCAE348", VA = "0xCAE348")]
		public void EnableOfflineMode()
		{
		}

		[Token(Token = "0x60031D8")]
		[Address(RVA = "0xCAC8B4", Offset = "0xCAC8B4", VA = "0xCAC8B4")]
		public void EnableOfflineRoom()
		{
		}

		[Token(Token = "0x60031D9")]
		[Address(RVA = "0xCAE484", Offset = "0xCAE484", VA = "0xCAE484")]
		public void TryReconnect()
		{
		}

		[Token(Token = "0x60031DA")]
		[Address(RVA = "0xCAE598", Offset = "0xCAE598", VA = "0xCAE598")]
		[IteratorStateMachine(typeof(<LoadingCircleEnable>d__96))]
		private IEnumerator LoadingCircleEnable()
		{
			return null;
		}

		[Token(Token = "0x60031DD")]
		[Address(RVA = "0xCAD42C", Offset = "0xCAD42C", VA = "0xCAD42C")]
		public void CreatePianist(bool createInSession = false)
		{
		}

		[Token(Token = "0x60031DE")]
		[Address(RVA = "0xCAE624", Offset = "0xCAE624", VA = "0xCAE624")]
		public void CreateBarmen()
		{
		}

		[Token(Token = "0x60031DF")]
		[Address(RVA = "0xCAE73C", Offset = "0xCAE73C", VA = "0xCAE73C")]
		public void CreateWaitress()
		{
		}

		[Token(Token = "0x60031E0")]
		[Address(RVA = "0xCAD62C", Offset = "0xCAD62C", VA = "0xCAD62C")]
		[IteratorStateMachine(typeof(<WaitForWaitressSetUp>d__108))]
		private IEnumerator WaitForWaitressSetUp()
		{
			return null;
		}

		[Token(Token = "0x60031E1")]
		[Address(RVA = "0xCAE854", Offset = "0xCAE854", VA = "0xCAE854")]
		public void LeaveRoom()
		{
		}

		[Token(Token = "0x60031E2")]
		[Address(RVA = "0xCAAB4C", Offset = "0xCAAB4C", VA = "0xCAAB4C")]
		public void OnClick_LeaveRoomFromGame()
		{
		}

		[Token(Token = "0x60031E3")]
		[Address(RVA = "0xCADB3C", Offset = "0xCADB3C", VA = "0xCADB3C")]
		[PunRPC]
		public void OnClick_LeaveRoomFromGame(bool HostLeaving = false, bool wasKickedByMaster = false)
		{
		}

		[Token(Token = "0x60031E4")]
		[Address(RVA = "0xCAEA2C", Offset = "0xCAEA2C", VA = "0xCAEA2C")]
		public void OnClick_ChangeMasterClient()
		{
		}

		[Token(Token = "0x60031E5")]
		[Address(RVA = "0xCAEB00", Offset = "0xCAEB00", VA = "0xCAEB00")]
		[IteratorStateMachine(typeof(<SwitchMaster>d__113))]
		private IEnumerator SwitchMaster()
		{
			return null;
		}

		[Token(Token = "0x60031E6")]
		[Address(RVA = "0xCAEB60", Offset = "0xCAEB60", VA = "0xCAEB60")]
		public void JoinToRoom()
		{
		}

		[Token(Token = "0x60031E7")]
		[Address(RVA = "0xCAE998", Offset = "0xCAE998", VA = "0xCAE998")]
		[IteratorStateMachine(typeof(<LeaveRoomNumerator>d__115))]
		private IEnumerator LeaveRoomNumerator(bool HostLeaving = false, bool wasKickedByMaster = false)
		{
			return null;
		}

		[Token(Token = "0x60031E8")]
		[Address(RVA = "0xCACAA4", Offset = "0xCACAA4", VA = "0xCACAA4")]
		[IteratorStateMachine(typeof(<InstantiateOnlyLobbyPlayer>d__116))]
		private IEnumerator InstantiateOnlyLobbyPlayer()
		{
			return null;
		}

		[Token(Token = "0x60031E9")]
		[Address(RVA = "0xCAEB64", Offset = "0xCAEB64", VA = "0xCAEB64")]
		[IteratorStateMachine(typeof(<InstantiateLobbyPlayer>d__117))]
		private IEnumerator InstantiateLobbyPlayer(bool HostLeaving = false, bool wasKickedByMaster = false)
		{
			return null;
		}

		[Token(Token = "0x60031EA")]
		[Address(RVA = "0xCAEBEC", Offset = "0xCAEBEC", VA = "0xCAEBEC")]
		public void CreateRoom()
		{
		}

		[Token(Token = "0x60031EB")]
		[Address(RVA = "0xCAEC0C", Offset = "0xCAEC0C", VA = "0xCAEC0C")]
		public void OpenSettings()
		{
		}

		[Token(Token = "0x60031EC")]
		[Address(RVA = "0xCAEC2C", Offset = "0xCAEC2C", VA = "0xCAEC2C")]
		public void OpenRegionSelection()
		{
		}

		[Token(Token = "0x60031ED")]
		[Address(RVA = "0xCAEC5C", Offset = "0xCAEC5C", VA = "0xCAEC5C")]
		public void CloseRegionSelection(bool withAnim = false)
		{
		}

		[Token(Token = "0x60031EE")]
		[Address(RVA = "0xCAECD0", Offset = "0xCAECD0", VA = "0xCAECD0")]
		public void ShowCreateRoomNumpadScreen()
		{
		}

		[Token(Token = "0x60031EF")]
		[Address(RVA = "0xCAECF0", Offset = "0xCAECF0", VA = "0xCAECF0")]
		public void ShowJoinRoomNumpadScreen()
		{
		}

		[Token(Token = "0x60031F0")]
		[Address(RVA = "0xCAED10", Offset = "0xCAED10", VA = "0xCAED10")]
		public void CreatePrivateRoomWithCode()
		{
		}

		[Token(Token = "0x60031F1")]
		[Address(RVA = "0xCAEE4C", Offset = "0xCAEE4C", VA = "0xCAEE4C")]
		public void JoinPrivateRoomWithCode()
		{
		}

		[Token(Token = "0x60031F2")]
		[Address(RVA = "0xCAEF2C", Offset = "0xCAEF2C", VA = "0xCAEF2C")]
		public void CreateRoom(bool _isOpen)
		{
		}

		[Token(Token = "0x60031F3")]
		[Address(RVA = "0xCAF064", Offset = "0xCAF064", VA = "0xCAF064")]
		public void CreateRoomOffline()
		{
		}

		[Token(Token = "0x60031F4")]
		[Address(RVA = "0xCAF0C0", Offset = "0xCAF0C0", VA = "0xCAF0C0")]
		private void InvitePlayer()
		{
		}

		[Token(Token = "0x60031F5")]
		[Address(RVA = "0xCAF0C4", Offset = "0xCAF0C4", VA = "0xCAF0C4")]
		public void OnClick_SelectFindGameType()
		{
		}

		[Token(Token = "0x60031F6")]
		[Address(RVA = "0xCAF0E4", Offset = "0xCAF0E4", VA = "0xCAF0E4")]
		public void OnClick_FindGame()
		{
		}

		[Token(Token = "0x60031F7")]
		[Address(RVA = "0xCAF1B4", Offset = "0xCAF1B4", VA = "0xCAF1B4")]
		public void OnClick_StopSearchingRoom()
		{
		}

		[Token(Token = "0x60031F8")]
		[Address(RVA = "0xCAF1C8", Offset = "0xCAF1C8", VA = "0xCAF1C8")]
		public void JoinRandomRoom()
		{
		}

		[Token(Token = "0x60031F9")]
		[Address(RVA = "0xCACB18", Offset = "0xCACB18", VA = "0xCACB18")]
		public void Connect(string customUserID)
		{
		}

		[Token(Token = "0x60031FA")]
		[Address(RVA = "0xCAAB58", Offset = "0xCAAB58", VA = "0xCAAB58")]
		public void ChangeRegion(string regionCode)
		{
		}

		[Token(Token = "0x60031FB")]
		[Address(RVA = "0xCAC7D0", Offset = "0xCAC7D0", VA = "0xCAC7D0")]
		private void TryConnectToNewRegion()
		{
		}

		[Token(Token = "0x60031FC")]
		[Address(RVA = "0xCAF230", Offset = "0xCAF230", VA = "0xCAF230")]
		public void GetCurrentAppId()
		{
		}

		[Token(Token = "0x60031FD")]
		[Address(RVA = "0xCAA1D4", Offset = "0xCAA1D4", VA = "0xCAA1D4")]
		public void Connect()
		{
		}

		[Token(Token = "0x60031FE")]
		[Address(RVA = "0xCAF388", Offset = "0xCAF388", VA = "0xCAF388")]
		[IteratorStateMachine(typeof(<ConnectWithPSNAuth>d__138))]
		private IEnumerator ConnectWithPSNAuth()
		{
			return null;
		}

		[Token(Token = "0x60031FF")]
		[Address(RVA = "0xCAF3E8", Offset = "0xCAF3E8", VA = "0xCAF3E8", Slot = "50")]
		public override void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6003200")]
		[Address(RVA = "0xCAF474", Offset = "0xCAF474", VA = "0xCAF474")]
		private void ApplyAppArgs()
		{
		}

		[Token(Token = "0x6003201")]
		[Address(RVA = "0xCAF6D4", Offset = "0xCAF6D4", VA = "0xCAF6D4")]
		[IteratorStateMachine(typeof(<DelayJoinRoom>d__141))]
		private IEnumerator DelayJoinRoom(string roomName)
		{
			return null;
		}

		[Token(Token = "0x6003202")]
		[Address(RVA = "0xCAF764", Offset = "0xCAF764", VA = "0xCAF764")]
		[IteratorStateMachine(typeof(<DelayConnect>d__142))]
		private IEnumerator DelayConnect()
		{
			return null;
		}

		[Token(Token = "0x6003203")]
		[Address(RVA = "0xCAF7D8", Offset = "0xCAF7D8", VA = "0xCAF7D8")]
		public void StartGame()
		{
		}

		[Token(Token = "0x6003204")]
		[Address(RVA = "0xCAF144", Offset = "0xCAF144", VA = "0xCAF144")]
		[IteratorStateMachine(typeof(<SearchGame>d__144))]
		private IEnumerator SearchGame(float time)
		{
			return null;
		}

		[Token(Token = "0x6003205")]
		[Address(RVA = "0xCAF8A0", Offset = "0xCAF8A0", VA = "0xCAF8A0")]
		[PunRPC]
		private void RPC_StartGame()
		{
		}

		[Token(Token = "0x6003206")]
		[Address(RVA = "0xCAF950", Offset = "0xCAF950", VA = "0xCAF950")]
		public void ShowInviteDialog(string userName, ulong lobbyId)
		{
		}

		[Token(Token = "0x6003207")]
		[Address(RVA = "0xCAF9CC", Offset = "0xCAF9CC", VA = "0xCAF9CC")]
		[PunRPC]
		private void AddSurviveEnemiShootAchiev(string userID)
		{
		}

		[Token(Token = "0x6003208")]
		[Address(RVA = "0xCAFA54", Offset = "0xCAFA54", VA = "0xCAFA54")]
		[PunRPC]
		private void AddSurviveShieldAchiev(string userID)
		{
		}

		[Token(Token = "0x6003209")]
		[Address(RVA = "0xCAFADC", Offset = "0xCAFADC", VA = "0xCAFADC")]
		public Lobby()
		{
		}
	}
	[Token(Token = "0x2000808")]
	public class LobbyPlayer : MonoBehaviour
	{
		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Oculus")]
		private Transform cameraRigOculus;

		[Token(Token = "0x40029EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform centerEyeAnchorsOculus;

		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("SteamVR")]
		private Transform cameraRigSteamVR;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerEyeAnchorsSteamVR;

		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SteamVR_TrackedObject steamTrackerL;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SteamVR_TrackedObject steamTrackerR;

		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool oculus;

		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform target;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action resetPosition;

		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Player playerInputRef;

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public PlayerParts playerModel;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private PlayerVisualParts playerVisualParts;

		[Token(Token = "0x6003275")]
		[Address(RVA = "0xCB5644", Offset = "0xCB5644", VA = "0xCB5644")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003276")]
		[Address(RVA = "0xCB5768", Offset = "0xCB5768", VA = "0xCB5768")]
		private void Start()
		{
		}

		[Token(Token = "0x6003277")]
		[Address(RVA = "0xCB576C", Offset = "0xCB576C", VA = "0xCB576C")]
		private void ResetPositionSteamVR()
		{
		}

		[Token(Token = "0x6003278")]
		[Address(RVA = "0xCB5898", Offset = "0xCB5898", VA = "0xCB5898")]
		private void Update()
		{
		}

		[Token(Token = "0x6003279")]
		[Address(RVA = "0xCB589C", Offset = "0xCB589C", VA = "0xCB589C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600327A")]
		[Address(RVA = "0xCB59A0", Offset = "0xCB59A0", VA = "0xCB59A0")]
		public LobbyPlayer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000809")]
	public class ObjectToInstantiate
	{
		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Prefab;

		[Token(Token = "0x40029FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform InstantiatePoint;

		[Token(Token = "0x600327B")]
		[Address(RVA = "0xCB59A8", Offset = "0xCB59A8", VA = "0xCB59A8")]
		public ObjectToInstantiate()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200080A")]
	public class InstantiateObjectsList
	{
		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerType Player;

		[Token(Token = "0x40029FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ObjectToInstantiate> objToInstantiate;

		[Token(Token = "0x600327C")]
		[Address(RVA = "0xCB59B0", Offset = "0xCB59B0", VA = "0xCB59B0")]
		public InstantiateObjectsList()
		{
		}
	}
	[Token(Token = "0x200080B")]
	public class NetworkManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x200080C")]
		public delegate void OnSyncGameState(GameState state);

		[Token(Token = "0x200080D")]
		[CompilerGenerated]
		private sealed class <Launch>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x170003AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032B6")]
				[Address(RVA = "0xCBBCC4", Offset = "0xCBBCC4", VA = "0xCBBCC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032B8")]
				[Address(RVA = "0xCBBD0C", Offset = "0xCBBD0C", VA = "0xCBBD0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032B3")]
			[Address(RVA = "0xCB8350", Offset = "0xCB8350", VA = "0xCB8350")]
			[DebuggerHidden]
			public <Launch>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x60032B4")]
			[Address(RVA = "0xCBBBCC", Offset = "0xCBBBCC", VA = "0xCBBBCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032B5")]
			[Address(RVA = "0xCBBBD0", Offset = "0xCBBBD0", VA = "0xCBBBD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032B7")]
			[Address(RVA = "0xCBBCCC", Offset = "0xCBBCCC", VA = "0xCBBCCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200080E")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x4002A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NetworkManager <>4__this;

			[Token(Token = "0x4002A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int i;

			[Token(Token = "0x4002A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Predicate<InstantiateObjectsList> <>9__2;

			[Token(Token = "0x60032B9")]
			[Address(RVA = "0xCBBD14", Offset = "0xCBBD14", VA = "0xCBBD14")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x60032BA")]
			[Address(RVA = "0xCBBD1C", Offset = "0xCBBD1C", VA = "0xCBBD1C")]
			internal bool <CreateSceneObjects>b__2(InstantiateObjectsList obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000810")]
		[CompilerGenerated]
		private sealed class <CreateSceneObjects>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x4002A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass41_0 <>8__1;

			[Token(Token = "0x4002A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private InstantiateObjectsList <_prefab>5__2;

			[Token(Token = "0x4002A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <j>5__3;

			[Token(Token = "0x170003AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032C3")]
				[Address(RVA = "0xCBC9C4", Offset = "0xCBC9C4", VA = "0xCBC9C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032C5")]
				[Address(RVA = "0xCBCA0C", Offset = "0xCBCA0C", VA = "0xCBCA0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032C0")]
			[Address(RVA = "0xCB83EC", Offset = "0xCB83EC", VA = "0xCB83EC")]
			[DebuggerHidden]
			public <CreateSceneObjects>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x60032C1")]
			[Address(RVA = "0xCBBFF0", Offset = "0xCBBFF0", VA = "0xCBBFF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032C2")]
			[Address(RVA = "0xCBBFF4", Offset = "0xCBBFF4", VA = "0xCBBFF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032C4")]
			[Address(RVA = "0xCBC9CC", Offset = "0xCBC9CC", VA = "0xCBC9CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000811")]
		[CompilerGenerated]
		private sealed class <NotMasterCreatePlayer>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x170003B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032C9")]
				[Address(RVA = "0xCBCB9C", Offset = "0xCBCB9C", VA = "0xCBCB9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032CB")]
				[Address(RVA = "0xCBCBE4", Offset = "0xCBCBE4", VA = "0xCBCBE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032C6")]
			[Address(RVA = "0xCB9660", Offset = "0xCB9660", VA = "0xCB9660")]
			[DebuggerHidden]
			public <NotMasterCreatePlayer>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x60032C7")]
			[Address(RVA = "0xCBCA14", Offset = "0xCBCA14", VA = "0xCBCA14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032C8")]
			[Address(RVA = "0xCBCA18", Offset = "0xCBCA18", VA = "0xCBCA18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032CA")]
			[Address(RVA = "0xCBCBA4", Offset = "0xCBCBA4", VA = "0xCBCBA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000814")]
		[CompilerGenerated]
		private sealed class <DeleteNPC_AfterDropPistol>d__46 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC npcToRemove;

			[Token(Token = "0x170003B3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032D3")]
				[Address(RVA = "0xCBCF7C", Offset = "0xCBCF7C", VA = "0xCBCF7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032D5")]
				[Address(RVA = "0xCBCFC4", Offset = "0xCBCFC4", VA = "0xCBCFC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032D0")]
			[Address(RVA = "0xCBA3D4", Offset = "0xCBA3D4", VA = "0xCBA3D4")]
			[DebuggerHidden]
			public <DeleteNPC_AfterDropPistol>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x60032D1")]
			[Address(RVA = "0xCBCC88", Offset = "0xCBCC88", VA = "0xCBCC88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032D2")]
			[Address(RVA = "0xCBCC8C", Offset = "0xCBCC8C", VA = "0xCBCC8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032D4")]
			[Address(RVA = "0xCBCF84", Offset = "0xCBCF84", VA = "0xCBCF84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000816")]
		[CompilerGenerated]
		private sealed class <DelayStartGame>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x4002A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <firstGamePlayed>5__2;

			[Token(Token = "0x170003B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032DC")]
				[Address(RVA = "0xCBD8A8", Offset = "0xCBD8A8", VA = "0xCBD8A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032DE")]
				[Address(RVA = "0xCBD8F0", Offset = "0xCBD8F0", VA = "0xCBD8F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032D9")]
			[Address(RVA = "0xCBB58C", Offset = "0xCBB58C", VA = "0xCBB58C")]
			[DebuggerHidden]
			public <DelayStartGame>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x60032DA")]
			[Address(RVA = "0xCBD07C", Offset = "0xCBD07C", VA = "0xCBD07C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032DB")]
			[Address(RVA = "0xCBD080", Offset = "0xCBD080", VA = "0xCBD080", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032DD")]
			[Address(RVA = "0xCBD8B0", Offset = "0xCBD8B0", VA = "0xCBD8B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000817")]
		[CompilerGenerated]
		private sealed class <ReCreatePistol>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x170003B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60032E2")]
				[Address(RVA = "0xCBDC0C", Offset = "0xCBDC0C", VA = "0xCBDC0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60032E4")]
				[Address(RVA = "0xCBDC54", Offset = "0xCBDC54", VA = "0xCBDC54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60032DF")]
			[Address(RVA = "0xCBB628", Offset = "0xCBB628", VA = "0xCBB628")]
			[DebuggerHidden]
			public <ReCreatePistol>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x60032E0")]
			[Address(RVA = "0xCBD8F8", Offset = "0xCBD8F8", VA = "0xCBD8F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60032E1")]
			[Address(RVA = "0xCBD8FC", Offset = "0xCBD8FC", VA = "0xCBD8FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60032E3")]
			[Address(RVA = "0xCBDC14", Offset = "0xCBDC14", VA = "0xCBDC14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40029FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject lobbyPlayer;

		[Token(Token = "0x40029FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform pointToInstantiatePlayers;

		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject startButton;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayerController myPlayer;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<NPC> npcList;

		[Token(Token = "0x4002A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NetworkManager Instance;

		[Token(Token = "0x4002A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameState gameState;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public List<GameObject> playerUIlist;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isConnecting;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject playerPrefab;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject npcPrefab;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject bulletPrefab;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject pistolPrefab;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<ObjectToInstantiate> sceneObjectsPrefabs;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<InstantiateObjectsList> objToInstantiate;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<PlayerType> typesToLoad;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent OnTurnSwitched;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent OnePlayerStayed;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string prevUserFirstTurn;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float timer;

		[Token(Token = "0x170003AA")]
		public bool inited
		{
			[Token(Token = "0x600327D")]
			[Address(RVA = "0xCB5A38", Offset = "0xCB5A38", VA = "0xCB5A38")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600327E")]
			[Address(RVA = "0xCB5A40", Offset = "0xCB5A40", VA = "0xCB5A40")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003AB")]
		public bool firsMasterLoadSync
		{
			[Token(Token = "0x600327F")]
			[Address(RVA = "0xCB5A4C", Offset = "0xCB5A4C", VA = "0xCB5A4C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003280")]
			[Address(RVA = "0xCB5A54", Offset = "0xCB5A54", VA = "0xCB5A54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003AC")]
		public bool NPC_turnToShoot
		{
			[Token(Token = "0x60032AB")]
			[Address(RVA = "0xCBB7D0", Offset = "0xCBB7D0", VA = "0xCBB7D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000116")]
		public event OnSyncGameState onSyncGameState
		{
			[Token(Token = "0x6003281")]
			[Address(RVA = "0xCB5A60", Offset = "0xCB5A60", VA = "0xCB5A60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003282")]
			[Address(RVA = "0xCB5AFC", Offset = "0xCB5AFC", VA = "0xCB5AFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003283")]
		[Address(RVA = "0xCB5B98", Offset = "0xCB5B98", VA = "0xCB5B98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003284")]
		[Address(RVA = "0xCB5C4C", Offset = "0xCB5C4C", VA = "0xCB5C4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6003285")]
		[Address(RVA = "0xCB5EEC", Offset = "0xCB5EEC", VA = "0xCB5EEC")]
		[PunRPC]
		private void RPC_GameRuns(bool runs)
		{
		}

		[Token(Token = "0x6003286")]
		[Address(RVA = "0xCB5F0C", Offset = "0xCB5F0C", VA = "0xCB5F0C")]
		[PunRPC]
		private void RPC_SyncLoadTypesArray(int[] arr)
		{
		}

		[Token(Token = "0x6003287")]
		[Address(RVA = "0xCB5FF8", Offset = "0xCB5FF8", VA = "0xCB5FF8")]
		public void ShakePlayerTypesList()
		{
		}

		[Token(Token = "0x6003288")]
		[Address(RVA = "0xCB6264", Offset = "0xCB6264", VA = "0xCB6264")]
		private string GetNPCname(PlayerType type)
		{
			return null;
		}

		[Token(Token = "0x6003289")]
		[Address(RVA = "0xCB6308", Offset = "0xCB6308", VA = "0xCB6308")]
		public void PlayerLeftRoom(Photon.Realtime.Player player, PlayerType leftPlayerType)
		{
		}

		[Token(Token = "0x600328A")]
		[Address(RVA = "0xCB79F0", Offset = "0xCB79F0", VA = "0xCB79F0")]
		public void MasterPlayerLeftRoom(Photon.Realtime.Player player, PlayerType leftPlayerType)
		{
		}

		[Token(Token = "0x600328B")]
		[Address(RVA = "0xCB8070", Offset = "0xCB8070", VA = "0xCB8070")]
		public void LaunchGame()
		{
		}

		[Token(Token = "0x600328C")]
		[Address(RVA = "0xCB377C", Offset = "0xCB377C", VA = "0xCB377C")]
		public void TryDestroyNpc()
		{
		}

		[Token(Token = "0x600328D")]
		[Address(RVA = "0xCB814C", Offset = "0xCB814C", VA = "0xCB814C")]
		[IteratorStateMachine(typeof(<Launch>d__40))]
		private IEnumerator Launch()
		{
			return null;
		}

		[Token(Token = "0x600328E")]
		[Address(RVA = "0xCB8378", Offset = "0xCB8378", VA = "0xCB8378")]
		[IteratorStateMachine(typeof(<CreateSceneObjects>d__41))]
		private IEnumerator CreateSceneObjects()
		{
			return null;
		}

		[Token(Token = "0x600328F")]
		[Address(RVA = "0xCB8414", Offset = "0xCB8414", VA = "0xCB8414")]
		private void GameStarts()
		{
		}

		[Token(Token = "0x6003290")]
		[Address(RVA = "0xCB8B48", Offset = "0xCB8B48", VA = "0xCB8B48")]
		[IteratorStateMachine(typeof(<NotMasterCreatePlayer>d__43))]
		private IEnumerator NotMasterCreatePlayer()
		{
			return null;
		}

		[Token(Token = "0x6003291")]
		[Address(RVA = "0xCB73F8", Offset = "0xCB73F8", VA = "0xCB73F8")]
		private void UpdateNPC_List()
		{
		}

		[Token(Token = "0x6003292")]
		[Address(RVA = "0xCB9690", Offset = "0xCB9690", VA = "0xCB9690")]
		[PunRPC]
		private void RequestToSyncAfterLoad(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003293")]
		[Address(RVA = "0xCBA360", Offset = "0xCBA360", VA = "0xCBA360")]
		[IteratorStateMachine(typeof(<DeleteNPC_AfterDropPistol>d__46))]
		private IEnumerator DeleteNPC_AfterDropPistol(NPC npcToRemove)
		{
			return null;
		}

		[Token(Token = "0x6003294")]
		[Address(RVA = "0xCBA318", Offset = "0xCBA318", VA = "0xCBA318")]
		private int TryFindNPC_notCurrentTurn()
		{
			return default(int);
		}

		[Token(Token = "0x6003295")]
		[Address(RVA = "0xCBA3FC", Offset = "0xCBA3FC", VA = "0xCBA3FC")]
		[PunRPC]
		private void FirstLoadSync()
		{
		}

		[Token(Token = "0x6003296")]
		[Address(RVA = "0xCB8BBC", Offset = "0xCB8BBC", VA = "0xCB8BBC")]
		[PunRPC]
		public void RPC_SyncGameState(byte[] arr)
		{
		}

		[Token(Token = "0x6003297")]
		[Address(RVA = "0xCBA5A4", Offset = "0xCBA5A4", VA = "0xCBA5A4")]
		[PunRPC]
		public void SyncPistolState()
		{
		}

		[Token(Token = "0x6003298")]
		[Address(RVA = "0xCBA69C", Offset = "0xCBA69C", VA = "0xCBA69C")]
		[PunRPC]
		public void RPC_AcceptSyncRequest(byte[] arr)
		{
		}

		[Token(Token = "0x6003299")]
		[Address(RVA = "0xCBA85C", Offset = "0xCBA85C", VA = "0xCBA85C")]
		[PunRPC]
		public void RPC_ResetAllUsers()
		{
		}

		[Token(Token = "0x600329A")]
		[Address(RVA = "0xCBABF8", Offset = "0xCBABF8", VA = "0xCBABF8")]
		[PunRPC]
		private void EnblePlayerUI()
		{
		}

		[Token(Token = "0x600329B")]
		[Address(RVA = "0xCBAD58", Offset = "0xCBAD58", VA = "0xCBAD58")]
		[PunRPC]
		private void RPC_MovePistolOnTable()
		{
		}

		[Token(Token = "0x600329C")]
		[Address(RVA = "0xCBADB4", Offset = "0xCBADB4", VA = "0xCBADB4")]
		[PunRPC]
		private void RPC_ResetNPC()
		{
		}

		[Token(Token = "0x600329D")]
		[Address(RVA = "0xCB5E2C", Offset = "0xCB5E2C", VA = "0xCB5E2C")]
		private byte[] ObjectToByteArray(object obj)
		{
			return null;
		}

		[Token(Token = "0x600329E")]
		[Address(RVA = "0xCBA408", Offset = "0xCBA408", VA = "0xCBA408")]
		public object ByteArrayToObject(byte[] arrBytes)
		{
			return null;
		}

		[Token(Token = "0x600329F")]
		[Address(RVA = "0xCBAF74", Offset = "0xCBAF74", VA = "0xCBAF74")]
		public void StartGame()
		{
		}

		[Token(Token = "0x60032A0")]
		[Address(RVA = "0xCBB264", Offset = "0xCBB264", VA = "0xCBB264")]
		[PunRPC]
		private void WaitingStartGame()
		{
		}

		[Token(Token = "0x60032A1")]
		[Address(RVA = "0xCBB2B8", Offset = "0xCBB2B8", VA = "0xCBB2B8")]
		[PunRPC]
		private void DisableWinPanel()
		{
		}

		[Token(Token = "0x60032A2")]
		[Address(RVA = "0xCBB418", Offset = "0xCBB418", VA = "0xCBB418")]
		private void CreateLobbyNPC()
		{
		}

		[Token(Token = "0x60032A3")]
		[Address(RVA = "0xCBB1F0", Offset = "0xCBB1F0", VA = "0xCBB1F0")]
		[IteratorStateMachine(typeof(<DelayStartGame>d__64))]
		private IEnumerator DelayStartGame()
		{
			return null;
		}

		[Token(Token = "0x60032A4")]
		[Address(RVA = "0xCBB5B4", Offset = "0xCBB5B4", VA = "0xCBB5B4")]
		[IteratorStateMachine(typeof(<ReCreatePistol>d__65))]
		private IEnumerator ReCreatePistol()
		{
			return null;
		}

		[Token(Token = "0x60032A5")]
		[Address(RVA = "0xCB81C0", Offset = "0xCB81C0", VA = "0xCB81C0")]
		[PunRPC]
		private void DestroyPistol()
		{
		}

		[Token(Token = "0x60032A6")]
		[Address(RVA = "0xCBB650", Offset = "0xCBB650", VA = "0xCBB650")]
		public void PreparePistolToCharge()
		{
		}

		[Token(Token = "0x60032A7")]
		[Address(RVA = "0xCBB654", Offset = "0xCBB654", VA = "0xCBB654")]
		public void Connect()
		{
		}

		[Token(Token = "0x60032A8")]
		[Address(RVA = "0xCBB118", Offset = "0xCBB118", VA = "0xCBB118")]
		public void ResetAllUsers()
		{
		}

		[Token(Token = "0x60032A9")]
		[Address(RVA = "0xCBB6EC", Offset = "0xCBB6EC", VA = "0xCBB6EC")]
		public void RequestToSync()
		{
		}

		[Token(Token = "0x60032AA")]
		[Address(RVA = "0xCB7928", Offset = "0xCB7928", VA = "0xCB7928")]
		public void SyncPistolStateRequest()
		{
		}

		[Token(Token = "0x60032AC")]
		[Address(RVA = "0xCBB7FC", Offset = "0xCBB7FC", VA = "0xCBB7FC")]
		public NetworkManager()
		{
		}
	}
	[Token(Token = "0x2000818")]
	[RequireComponent(typeof(PhotonView))]
	public class PhotonLocalSync : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool SyncEnabled;

		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonView photonView;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 networkLocalPosition;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 direction;

		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 storedPosition;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion networkLocalRotation;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float angle;

		[Token(Token = "0x60032E5")]
		[Address(RVA = "0xCBDC5C", Offset = "0xCBDC5C", VA = "0xCBDC5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60032E6")]
		[Address(RVA = "0xCBDCB4", Offset = "0xCBDCB4", VA = "0xCBDCB4")]
		private void Start()
		{
		}

		[Token(Token = "0x60032E7")]
		[Address(RVA = "0xCBDD68", Offset = "0xCBDD68", VA = "0xCBDD68")]
		private void Update()
		{
		}

		[Token(Token = "0x60032E8")]
		[Address(RVA = "0xCBE078", Offset = "0xCBE078", VA = "0xCBE078", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60032E9")]
		[Address(RVA = "0xCBE434", Offset = "0xCBE434", VA = "0xCBE434")]
		public PhotonLocalSync()
		{
		}
	}
	[Token(Token = "0x2000819")]
	public class Barmen : MonoBehaviour
	{
		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Barmen Instance;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ragdoll;

		[Token(Token = "0x60032EA")]
		[Address(RVA = "0xCBE43C", Offset = "0xCBE43C", VA = "0xCBE43C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60032EB")]
		[Address(RVA = "0xCBE494", Offset = "0xCBE494", VA = "0xCBE494")]
		[PunRPC]
		private void Death()
		{
		}

		[Token(Token = "0x60032EC")]
		[Address(RVA = "0xCBE5D0", Offset = "0xCBE5D0", VA = "0xCBE5D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60032ED")]
		[Address(RVA = "0xCBE624", Offset = "0xCBE624", VA = "0xCBE624")]
		public Barmen()
		{
		}
	}
	[Token(Token = "0x200081A")]
	public class NPC : AbstractPlayer
	{
		[Token(Token = "0x200081C")]
		[CompilerGenerated]
		private sealed class <WaitForPistolSpin>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x170003BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600333B")]
				[Address(RVA = "0xCC21F0", Offset = "0xCC21F0", VA = "0xCC21F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600333D")]
				[Address(RVA = "0xCC2238", Offset = "0xCC2238", VA = "0xCC2238", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003338")]
			[Address(RVA = "0xCBEB5C", Offset = "0xCBEB5C", VA = "0xCBEB5C")]
			[DebuggerHidden]
			public <WaitForPistolSpin>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6003339")]
			[Address(RVA = "0xCC2124", Offset = "0xCC2124", VA = "0xCC2124", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600333A")]
			[Address(RVA = "0xCC2128", Offset = "0xCC2128", VA = "0xCC2128", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600333C")]
			[Address(RVA = "0xCC21F8", Offset = "0xCC21F8", VA = "0xCC21F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200081D")]
		[CompilerGenerated]
		private sealed class <GrabPistolDelay>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003341")]
				[Address(RVA = "0xCC22E4", Offset = "0xCC22E4", VA = "0xCC22E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003343")]
				[Address(RVA = "0xCC232C", Offset = "0xCC232C", VA = "0xCC232C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600333E")]
			[Address(RVA = "0xCBF610", Offset = "0xCBF610", VA = "0xCBF610")]
			[DebuggerHidden]
			public <GrabPistolDelay>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x600333F")]
			[Address(RVA = "0xCC2240", Offset = "0xCC2240", VA = "0xCC2240", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003340")]
			[Address(RVA = "0xCC2244", Offset = "0xCC2244", VA = "0xCC2244", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003342")]
			[Address(RVA = "0xCC22EC", Offset = "0xCC22EC", VA = "0xCC22EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200081E")]
		[CompilerGenerated]
		private sealed class <TurnToShootHasCome>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x4002A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private PlayerState <myState>5__2;

			[Token(Token = "0x4002A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <userIDtoShot>5__3;

			[Token(Token = "0x170003C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003347")]
				[Address(RVA = "0xCC32A4", Offset = "0xCC32A4", VA = "0xCC32A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003349")]
				[Address(RVA = "0xCC32EC", Offset = "0xCC32EC", VA = "0xCC32EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003344")]
			[Address(RVA = "0xCBF6AC", Offset = "0xCBF6AC", VA = "0xCBF6AC")]
			[DebuggerHidden]
			public <TurnToShootHasCome>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6003345")]
			[Address(RVA = "0xCC2334", Offset = "0xCC2334", VA = "0xCC2334", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003346")]
			[Address(RVA = "0xCC2338", Offset = "0xCC2338", VA = "0xCC2338", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003348")]
			[Address(RVA = "0xCC32AC", Offset = "0xCC32AC", VA = "0xCC32AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200081F")]
		[CompilerGenerated]
		private sealed class <DelayFearNonMaster>d__46 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x4002A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool fear;

			[Token(Token = "0x170003C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600334D")]
				[Address(RVA = "0xCC351C", Offset = "0xCC351C", VA = "0xCC351C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600334F")]
				[Address(RVA = "0xCC3564", Offset = "0xCC3564", VA = "0xCC3564", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600334A")]
			[Address(RVA = "0xCBFD3C", Offset = "0xCBFD3C", VA = "0xCBFD3C")]
			[DebuggerHidden]
			public <DelayFearNonMaster>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x600334B")]
			[Address(RVA = "0xCC32F4", Offset = "0xCC32F4", VA = "0xCC32F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600334C")]
			[Address(RVA = "0xCC32F8", Offset = "0xCC32F8", VA = "0xCC32F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600334E")]
			[Address(RVA = "0xCC3524", Offset = "0xCC3524", VA = "0xCC3524", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000820")]
		[CompilerGenerated]
		private sealed class <DelayFear>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x4002A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool fear;

			[Token(Token = "0x170003C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003353")]
				[Address(RVA = "0xCC365C", Offset = "0xCC365C", VA = "0xCC365C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003355")]
				[Address(RVA = "0xCC36A4", Offset = "0xCC36A4", VA = "0xCC36A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003350")]
			[Address(RVA = "0xCBFD64", Offset = "0xCBFD64", VA = "0xCBFD64")]
			[DebuggerHidden]
			public <DelayFear>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6003351")]
			[Address(RVA = "0xCC356C", Offset = "0xCC356C", VA = "0xCC356C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003352")]
			[Address(RVA = "0xCC3570", Offset = "0xCC3570", VA = "0xCC3570", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003354")]
			[Address(RVA = "0xCC3664", Offset = "0xCC3664", VA = "0xCC3664", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000821")]
		[CompilerGenerated]
		private sealed class <DelayDisablePlayer>d__53 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x4002A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool withoutRagdall;

			[Token(Token = "0x4002A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 forceHeadDir;

			[Token(Token = "0x170003C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003359")]
				[Address(RVA = "0xCC3A98", Offset = "0xCC3A98", VA = "0xCC3A98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600335B")]
				[Address(RVA = "0xCC3AE0", Offset = "0xCC3AE0", VA = "0xCC3AE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003356")]
			[Address(RVA = "0xCC01BC", Offset = "0xCC01BC", VA = "0xCC01BC")]
			[DebuggerHidden]
			public <DelayDisablePlayer>d__53(int <>1__state)
			{
			}

			[Token(Token = "0x6003357")]
			[Address(RVA = "0xCC36AC", Offset = "0xCC36AC", VA = "0xCC36AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003358")]
			[Address(RVA = "0xCC36B0", Offset = "0xCC36B0", VA = "0xCC36B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600335A")]
			[Address(RVA = "0xCC3AA0", Offset = "0xCC3AA0", VA = "0xCC3AA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000822")]
		[CompilerGenerated]
		private sealed class <TossCard_Numerator>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x170003C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600335F")]
				[Address(RVA = "0xCC3EA8", Offset = "0xCC3EA8", VA = "0xCC3EA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003361")]
				[Address(RVA = "0xCC3EF0", Offset = "0xCC3EF0", VA = "0xCC3EF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600335C")]
			[Address(RVA = "0xCC0258", Offset = "0xCC0258", VA = "0xCC0258")]
			[DebuggerHidden]
			public <TossCard_Numerator>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x600335D")]
			[Address(RVA = "0xCC3AE8", Offset = "0xCC3AE8", VA = "0xCC3AE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600335E")]
			[Address(RVA = "0xCC3AEC", Offset = "0xCC3AEC", VA = "0xCC3AEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003360")]
			[Address(RVA = "0xCC3EB0", Offset = "0xCC3EB0", VA = "0xCC3EB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000823")]
		[CompilerGenerated]
		private sealed class <WaitForPistolUngrabbed>d__55 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x170003CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003365")]
				[Address(RVA = "0xCC4738", Offset = "0xCC4738", VA = "0xCC4738", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003367")]
				[Address(RVA = "0xCC4780", Offset = "0xCC4780", VA = "0xCC4780", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003362")]
			[Address(RVA = "0xCC02F4", Offset = "0xCC02F4", VA = "0xCC02F4")]
			[DebuggerHidden]
			public <WaitForPistolUngrabbed>d__55(int <>1__state)
			{
			}

			[Token(Token = "0x6003363")]
			[Address(RVA = "0xCC3EF8", Offset = "0xCC3EF8", VA = "0xCC3EF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003364")]
			[Address(RVA = "0xCC3EFC", Offset = "0xCC3EFC", VA = "0xCC3EFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003366")]
			[Address(RVA = "0xCC4740", Offset = "0xCC4740", VA = "0xCC4740", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000824")]
		[CompilerGenerated]
		private sealed class <IK_OFF>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x170003CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600336B")]
				[Address(RVA = "0xCC48E0", Offset = "0xCC48E0", VA = "0xCC48E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600336D")]
				[Address(RVA = "0xCC4928", Offset = "0xCC4928", VA = "0xCC4928", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003368")]
			[Address(RVA = "0xCC1114", Offset = "0xCC1114", VA = "0xCC1114")]
			[DebuggerHidden]
			public <IK_OFF>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6003369")]
			[Address(RVA = "0xCC4788", Offset = "0xCC4788", VA = "0xCC4788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600336A")]
			[Address(RVA = "0xCC478C", Offset = "0xCC478C", VA = "0xCC478C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600336C")]
			[Address(RVA = "0xCC48E8", Offset = "0xCC48E8", VA = "0xCC48E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000825")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass72_0
		{
			[Token(Token = "0x4002A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string targetUserID;

			[Token(Token = "0x600336E")]
			[Address(RVA = "0xCC4930", Offset = "0xCC4930", VA = "0xCC4930")]
			public <>c__DisplayClass72_0()
			{
			}

			[Token(Token = "0x600336F")]
			[Address(RVA = "0xCC4938", Offset = "0xCC4938", VA = "0xCC4938")]
			internal bool <NPC_AimingNumerator>b__0(AbstractPlayer p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000826")]
		[CompilerGenerated]
		private sealed class <NPC_AimingNumerator>d__72 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string targetUserID;

			[Token(Token = "0x4002A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NPC <>4__this;

			[Token(Token = "0x4002A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass72_0 <>8__1;

			[Token(Token = "0x4002A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <layerMask>5__2;

			[Token(Token = "0x170003CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003373")]
				[Address(RVA = "0xCC52F0", Offset = "0xCC52F0", VA = "0xCC52F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003375")]
				[Address(RVA = "0xCC5338", Offset = "0xCC5338", VA = "0xCC5338", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003370")]
			[Address(RVA = "0xCC11CC", Offset = "0xCC11CC", VA = "0xCC11CC")]
			[DebuggerHidden]
			public <NPC_AimingNumerator>d__72(int <>1__state)
			{
			}

			[Token(Token = "0x6003371")]
			[Address(RVA = "0xCC495C", Offset = "0xCC495C", VA = "0xCC495C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003372")]
			[Address(RVA = "0xCC4960", Offset = "0xCC4960", VA = "0xCC4960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003374")]
			[Address(RVA = "0xCC52F8", Offset = "0xCC52F8", VA = "0xCC52F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000827")]
		[CompilerGenerated]
		private sealed class <DELAY_DisableAnimationParameter>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4002A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NPC <>4__this;

			[Token(Token = "0x4002A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string animName;

			[Token(Token = "0x170003D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003379")]
				[Address(RVA = "0xCC5438", Offset = "0xCC5438", VA = "0xCC5438", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600337B")]
				[Address(RVA = "0xCC5480", Offset = "0xCC5480", VA = "0xCC5480", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003376")]
			[Address(RVA = "0xCC5340", Offset = "0xCC5340", VA = "0xCC5340")]
			[DebuggerHidden]
			public <DELAY_DisableAnimationParameter>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6003377")]
			[Address(RVA = "0xCC5368", Offset = "0xCC5368", VA = "0xCC5368", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003378")]
			[Address(RVA = "0xCC536C", Offset = "0xCC536C", VA = "0xCC536C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600337A")]
			[Address(RVA = "0xCC5440", Offset = "0xCC5440", VA = "0xCC5440", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000828")]
		[CompilerGenerated]
		private sealed class <TryDisableNPCBody>d__77 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC <>4__this;

			[Token(Token = "0x4002A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool alive;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600337F")]
				[Address(RVA = "0xCC57F8", Offset = "0xCC57F8", VA = "0xCC57F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003381")]
				[Address(RVA = "0xCC5840", Offset = "0xCC5840", VA = "0xCC5840", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600337C")]
			[Address(RVA = "0xCC5488", Offset = "0xCC5488", VA = "0xCC5488")]
			[DebuggerHidden]
			public <TryDisableNPCBody>d__77(int <>1__state)
			{
			}

			[Token(Token = "0x600337D")]
			[Address(RVA = "0xCC54B0", Offset = "0xCC54B0", VA = "0xCC54B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600337E")]
			[Address(RVA = "0xCC54B4", Offset = "0xCC54B4", VA = "0xCC54B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003380")]
			[Address(RVA = "0xCC5800", Offset = "0xCC5800", VA = "0xCC5800", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private List<GameObject> NPC_List;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Shader hologramShader;

		[Token(Token = "0x4002A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform rHandTarget;

		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private RagdollsManager ragdollsManager;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private NPC_Death npcDeath;

		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LookAtIK lookAtIK;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private LimbIK rightHandIK;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator npcAnimator;

		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool cardUsed;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform npcTarget;

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool cardAlreadyPlayed;

		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private PlayingCardType cardToPlay;

		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Coroutine waitForUngrabPistol;

		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool fearEnabling;

		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Coroutine delayFear;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool firstInit;

		[Token(Token = "0x170003B9")]
		public bool npcFired
		{
			[Token(Token = "0x60032EE")]
			[Address(RVA = "0xCBE62C", Offset = "0xCBE62C", VA = "0xCBE62C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60032EF")]
			[Address(RVA = "0xCBE634", Offset = "0xCBE634", VA = "0xCBE634")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003BA")]
		public NPC_State npcState
		{
			[Token(Token = "0x60032F0")]
			[Address(RVA = "0xCBE640", Offset = "0xCBE640", VA = "0xCBE640")]
			[CompilerGenerated]
			get
			{
				return default(NPC_State);
			}
			[Token(Token = "0x60032F1")]
			[Address(RVA = "0xCBE648", Offset = "0xCBE648", VA = "0xCBE648")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public Transform TARGET_TO_SHOT
		{
			[Token(Token = "0x60032F2")]
			[Address(RVA = "0xCBE650", Offset = "0xCBE650", VA = "0xCBE650")]
			get
			{
				return null;
			}
			[Token(Token = "0x60032F3")]
			[Address(RVA = "0xCBE658", Offset = "0xCBE658", VA = "0xCBE658")]
			set
			{
			}
		}

		[Token(Token = "0x60032F4")]
		[Address(RVA = "0xCBE6D0", Offset = "0xCBE6D0", VA = "0xCBE6D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60032F5")]
		[Address(RVA = "0xCBE728", Offset = "0xCBE728", VA = "0xCBE728")]
		private void Start()
		{
		}

		[Token(Token = "0x60032F6")]
		[Address(RVA = "0xCBE830", Offset = "0xCBE830", VA = "0xCBE830")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60032F7")]
		[Address(RVA = "0xCBE8D8", Offset = "0xCBE8D8", VA = "0xCBE8D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60032F8")]
		[Address(RVA = "0xCBE980", Offset = "0xCBE980", VA = "0xCBE980")]
		private void Instance_onSyncGameState(GameState state)
		{
		}

		[Token(Token = "0x60032F9")]
		[Address(RVA = "0xCB72F0", Offset = "0xCB72F0", VA = "0xCB72F0")]
		public void InitNPC(PlayerType playerType)
		{
		}

		[Token(Token = "0x60032FA")]
		[Address(RVA = "0xCBEA6C", Offset = "0xCBEA6C", VA = "0xCBEA6C")]
		public void SwitchState()
		{
		}

		[Token(Token = "0x60032FB")]
		[Address(RVA = "0xCBEAE8", Offset = "0xCBEAE8", VA = "0xCBEAE8")]
		[IteratorStateMachine(typeof(<WaitForPistolSpin>d__31))]
		private IEnumerator WaitForPistolSpin()
		{
			return null;
		}

		[Token(Token = "0x60032FC")]
		[Address(RVA = "0xCBEB84", Offset = "0xCBEB84", VA = "0xCBEB84")]
		private void ForgetPlayerWhoShotMe(string otherPlayer)
		{
		}

		[Token(Token = "0x60032FD")]
		[Address(RVA = "0xCBECE8", Offset = "0xCBECE8", VA = "0xCBECE8")]
		private string LogicOfTheShotNotInItself()
		{
			return null;
		}

		[Token(Token = "0x60032FE")]
		[Address(RVA = "0xCBF49C", Offset = "0xCBF49C", VA = "0xCBF49C")]
		private void ShootAnotherPlayer(string anotherUserID)
		{
		}

		[Token(Token = "0x60032FF")]
		[Address(RVA = "0xCBF5B0", Offset = "0xCBF5B0", VA = "0xCBF5B0")]
		[IteratorStateMachine(typeof(<GrabPistolDelay>d__35))]
		private IEnumerator GrabPistolDelay()
		{
			return null;
		}

		[Token(Token = "0x6003300")]
		[Address(RVA = "0xCBF638", Offset = "0xCBF638", VA = "0xCBF638")]
		[IteratorStateMachine(typeof(<TurnToShootHasCome>d__36))]
		private IEnumerator TurnToShootHasCome()
		{
			return null;
		}

		[Token(Token = "0x6003301")]
		[Address(RVA = "0xCBF6D4", Offset = "0xCBF6D4", VA = "0xCBF6D4")]
		private void PlayCard(PlayingCardType cardType)
		{
		}

		[Token(Token = "0x6003302")]
		[Address(RVA = "0xCBF808", Offset = "0xCBF808", VA = "0xCBF808")]
		private void ShootToThemSelf()
		{
		}

		[Token(Token = "0x6003303")]
		[Address(RVA = "0xCBF8A0", Offset = "0xCBF8A0", VA = "0xCBF8A0")]
		private void PutPistolOnTable(float time = 0.8f)
		{
		}

		[Token(Token = "0x6003304")]
		[Address(RVA = "0xCB7818", Offset = "0xCB7818", VA = "0xCB7818")]
		public void AcceptPosition(int pos, string id)
		{
		}

		[Token(Token = "0x6003305")]
		[Address(RVA = "0xCB71E4", Offset = "0xCB71E4", VA = "0xCB71E4")]
		public void SetNpcName(string name, string id)
		{
		}

		[Token(Token = "0x6003306")]
		[Address(RVA = "0xCBF950", Offset = "0xCBF950", VA = "0xCBF950")]
		public void Fear(bool fear, Vector3 pointToLook)
		{
		}

		[Token(Token = "0x6003307")]
		[Address(RVA = "0xCBFCB4", Offset = "0xCBFCB4", VA = "0xCBFCB4")]
		[IteratorStateMachine(typeof(<DelayFearNonMaster>d__46))]
		private IEnumerator DelayFearNonMaster(bool fear)
		{
			return null;
		}

		[Token(Token = "0x6003308")]
		[Address(RVA = "0xCBFC2C", Offset = "0xCBFC2C", VA = "0xCBFC2C")]
		[IteratorStateMachine(typeof(<DelayFear>d__47))]
		private IEnumerator DelayFear(bool fear)
		{
			return null;
		}

		[Token(Token = "0x6003309")]
		[Address(RVA = "0xCBA4E4", Offset = "0xCBA4E4", VA = "0xCBA4E4")]
		public void NPC_TurnToShoot()
		{
		}

		[Token(Token = "0x600330A")]
		[Address(RVA = "0xCBFD8C", Offset = "0xCBFD8C", VA = "0xCBFD8C")]
		[PunRPC]
		private void RPC_RememberPistolDirection(Vector3 dir)
		{
		}

		[Token(Token = "0x600330B")]
		[Address(RVA = "0xCBFD98", Offset = "0xCBFD98", VA = "0xCBFD98", Slot = "4")]
		public override void ShowPlayer()
		{
		}

		[Token(Token = "0x600330C")]
		[Address(RVA = "0xCBFEC4", Offset = "0xCBFEC4", VA = "0xCBFEC4", Slot = "5")]
		public override void HidePlayer(bool withoutRagdall = false)
		{
		}

		[Token(Token = "0x600330D")]
		[Address(RVA = "0xCC01B8", Offset = "0xCC01B8", VA = "0xCC01B8", Slot = "6")]
		public override void RetunCardOnTable()
		{
		}

		[Token(Token = "0x600330E")]
		[Address(RVA = "0xCC010C", Offset = "0xCC010C", VA = "0xCC010C")]
		[IteratorStateMachine(typeof(<DelayDisablePlayer>d__53))]
		private IEnumerator DelayDisablePlayer(Vector3 forceHeadDir, bool withoutRagdall = false)
		{
			return null;
		}

		[Token(Token = "0x600330F")]
		[Address(RVA = "0xCC01E4", Offset = "0xCC01E4", VA = "0xCC01E4")]
		[IteratorStateMachine(typeof(<TossCard_Numerator>d__54))]
		private IEnumerator TossCard_Numerator()
		{
			return null;
		}

		[Token(Token = "0x6003310")]
		[Address(RVA = "0xCC0280", Offset = "0xCC0280", VA = "0xCC0280")]
		[IteratorStateMachine(typeof(<WaitForPistolUngrabbed>d__55))]
		private IEnumerator WaitForPistolUngrabbed()
		{
			return null;
		}

		[Token(Token = "0x6003311")]
		[Address(RVA = "0xCC031C", Offset = "0xCC031C", VA = "0xCC031C")]
		[PunRPC]
		private void RPC_SetCardToPlay(int cardID)
		{
		}

		[Token(Token = "0x6003312")]
		[Address(RVA = "0xCC0324", Offset = "0xCC0324", VA = "0xCC0324")]
		public void NPC_TakeCard()
		{
		}

		[Token(Token = "0x6003313")]
		[Address(RVA = "0xCC0720", Offset = "0xCC0720", VA = "0xCC0720")]
		[PunRPC]
		private void RPC_NPC_MadeShot()
		{
		}

		[Token(Token = "0x6003314")]
		[Address(RVA = "0xCC072C", Offset = "0xCC072C", VA = "0xCC072C")]
		public void NPC_MakeShot(int putOnTableAfterShot = 0)
		{
		}

		[Token(Token = "0x6003315")]
		[Address(RVA = "0xCC084C", Offset = "0xCC084C", VA = "0xCC084C")]
		public void NPC_MakeSelfShot()
		{
		}

		[Token(Token = "0x6003316")]
		[Address(RVA = "0xCBE984", Offset = "0xCBE984", VA = "0xCBE984")]
		public void CheckNPC_Freeze()
		{
		}

		[Token(Token = "0x6003317")]
		[Address(RVA = "0xCC096C", Offset = "0xCC096C", VA = "0xCC096C")]
		public void NPC_ReloadByCard()
		{
		}

		[Token(Token = "0x6003318")]
		[Address(RVA = "0xCC0970", Offset = "0xCC0970", VA = "0xCC0970")]
		public void NPC_TossCard()
		{
		}

		[Token(Token = "0x6003319")]
		[Address(RVA = "0xCC09EC", Offset = "0xCC09EC", VA = "0xCC09EC")]
		public void NPC_TakePistolInHand()
		{
		}

		[Token(Token = "0x600331A")]
		[Address(RVA = "0xCC0BC4", Offset = "0xCC0BC4", VA = "0xCC0BC4")]
		public void RPC_CallToUnGrabePistol()
		{
		}

		[Token(Token = "0x600331B")]
		[Address(RVA = "0xCC0CDC", Offset = "0xCC0CDC", VA = "0xCC0CDC")]
		public void NPC_ReloadPistol()
		{
		}

		[Token(Token = "0x600331C")]
		[Address(RVA = "0xCC0DC8", Offset = "0xCC0DC8", VA = "0xCC0DC8")]
		public void NPC_TakeBullet()
		{
		}

		[Token(Token = "0x600331D")]
		[Address(RVA = "0xCC0EB4", Offset = "0xCC0EB4", VA = "0xCC0EB4")]
		public void NPC_ClosePistolBarrel()
		{
		}

		[Token(Token = "0x600331E")]
		[Address(RVA = "0xCC0F64", Offset = "0xCC0F64", VA = "0xCC0F64")]
		public void NPC_DropBullet()
		{
		}

		[Token(Token = "0x600331F")]
		[Address(RVA = "0xCC1050", Offset = "0xCC1050", VA = "0xCC1050")]
		public void ChechIK_Value()
		{
		}

		[Token(Token = "0x6003320")]
		[Address(RVA = "0xCC10A0", Offset = "0xCC10A0", VA = "0xCC10A0")]
		[IteratorStateMachine(typeof(<IK_OFF>d__71))]
		private IEnumerator IK_OFF()
		{
			return null;
		}

		[Token(Token = "0x6003321")]
		[Address(RVA = "0xCC113C", Offset = "0xCC113C", VA = "0xCC113C")]
		[IteratorStateMachine(typeof(<NPC_AimingNumerator>d__72))]
		private IEnumerator NPC_AimingNumerator(string targetUserID)
		{
			return null;
		}

		[Token(Token = "0x6003322")]
		[Address(RVA = "0xCBF880", Offset = "0xCBF880", VA = "0xCBF880")]
		private void DisableAnimatorParameter(string paramName, float time = 0.5f)
		{
		}

		[Token(Token = "0x6003323")]
		[Address(RVA = "0xCC11F4", Offset = "0xCC11F4", VA = "0xCC11F4")]
		[IteratorStateMachine(typeof(<DELAY_DisableAnimationParameter>d__74))]
		private IEnumerator DELAY_DisableAnimationParameter(string animName, float time = 0.5f)
		{
			return null;
		}

		[Token(Token = "0x6003324")]
		[Address(RVA = "0xCBA9F0", Offset = "0xCBA9F0", VA = "0xCBA9F0")]
		public void ResetAnimatorParameters()
		{
		}

		[Token(Token = "0x6003325")]
		[Address(RVA = "0xCC1294", Offset = "0xCC1294", VA = "0xCC1294")]
		[PunRPC]
		private void RPC_InitNPC(PlayerType playerType)
		{
		}

		[Token(Token = "0x6003326")]
		[Address(RVA = "0xCC1530", Offset = "0xCC1530", VA = "0xCC1530")]
		[IteratorStateMachine(typeof(<TryDisableNPCBody>d__77))]
		private IEnumerator TryDisableNPCBody(bool alive)
		{
			return null;
		}

		[Token(Token = "0x6003327")]
		[Address(RVA = "0xCC15B8", Offset = "0xCC15B8", VA = "0xCC15B8")]
		[PunRPC]
		private void RPC_NPC_EnableFear(bool fear, Vector3 pointToLook)
		{
		}

		[Token(Token = "0x6003328")]
		[Address(RVA = "0xCC16F0", Offset = "0xCC16F0", VA = "0xCC16F0")]
		[PunRPC]
		private void NPC_Aiming(string targetUserID)
		{
		}

		[Token(Token = "0x6003329")]
		[Address(RVA = "0xCC1710", Offset = "0xCC1710", VA = "0xCC1710")]
		[PunRPC]
		private void EnablePistolSpinSFX()
		{
		}

		[Token(Token = "0x600332A")]
		[Address(RVA = "0xCC177C", Offset = "0xCC177C", VA = "0xCC177C")]
		[PunRPC]
		private void RPC_NPC_ReloadPistol()
		{
		}

		[Token(Token = "0x600332B")]
		[Address(RVA = "0xCC17D0", Offset = "0xCC17D0", VA = "0xCC17D0")]
		[PunRPC]
		private void RPC_NPC_TakePistolInHand()
		{
		}

		[Token(Token = "0x600332C")]
		[Address(RVA = "0xCC19D4", Offset = "0xCC19D4", VA = "0xCC19D4")]
		[PunRPC]
		private void RPC_NPC_TakeBullet()
		{
		}

		[Token(Token = "0x600332D")]
		[Address(RVA = "0xCC1B88", Offset = "0xCC1B88", VA = "0xCC1B88")]
		[PunRPC]
		private void RPC_NPC_DropBullet()
		{
		}

		[Token(Token = "0x600332E")]
		[Address(RVA = "0xCC1C7C", Offset = "0xCC1C7C", VA = "0xCC1C7C")]
		[PunRPC]
		private void UnGrabReloadCard(Vector3 direction, float speed)
		{
		}

		[Token(Token = "0x600332F")]
		[Address(RVA = "0xCC1D68", Offset = "0xCC1D68", VA = "0xCC1D68")]
		[PunRPC]
		private void SetUpName(string name, string userID)
		{
		}

		[Token(Token = "0x6003330")]
		[Address(RVA = "0xCC1E18", Offset = "0xCC1E18", VA = "0xCC1E18")]
		[PunRPC]
		private void GrabGun()
		{
		}

		[Token(Token = "0x6003331")]
		[Address(RVA = "0xCC1E54", Offset = "0xCC1E54", VA = "0xCC1E54")]
		[PunRPC]
		private void UnGrabPistol()
		{
		}

		[Token(Token = "0x6003332")]
		[Address(RVA = "0xCC1FB8", Offset = "0xCC1FB8", VA = "0xCC1FB8")]
		public NPC()
		{
		}
	}
	[Token(Token = "0x2000829")]
	public class NPC_AnimationsEvents : MonoBehaviour
	{
		[Token(Token = "0x200082A")]
		[CompilerGenerated]
		private sealed class <checkIdle>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC_AnimationsEvents <>4__this;

			[Token(Token = "0x170003D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600339D")]
				[Address(RVA = "0xCC6198", Offset = "0xCC6198", VA = "0xCC6198", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600339F")]
				[Address(RVA = "0xCC61E0", Offset = "0xCC61E0", VA = "0xCC61E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600339A")]
			[Address(RVA = "0xCC5E6C", Offset = "0xCC5E6C", VA = "0xCC5E6C")]
			[DebuggerHidden]
			public <checkIdle>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x600339B")]
			[Address(RVA = "0xCC5F58", Offset = "0xCC5F58", VA = "0xCC5F58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600339C")]
			[Address(RVA = "0xCC5F5C", Offset = "0xCC5F5C", VA = "0xCC5F5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600339E")]
			[Address(RVA = "0xCC61A0", Offset = "0xCC61A0", VA = "0xCC61A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200082B")]
		[CompilerGenerated]
		private sealed class <check>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC_AnimationsEvents <>4__this;

			[Token(Token = "0x170003D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033A3")]
				[Address(RVA = "0xCC63E0", Offset = "0xCC63E0", VA = "0xCC63E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033A5")]
				[Address(RVA = "0xCC6428", Offset = "0xCC6428", VA = "0xCC6428", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033A0")]
			[Address(RVA = "0xCC5F28", Offset = "0xCC5F28", VA = "0xCC5F28")]
			[DebuggerHidden]
			public <check>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60033A1")]
			[Address(RVA = "0xCC61E8", Offset = "0xCC61E8", VA = "0xCC61E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033A2")]
			[Address(RVA = "0xCC61EC", Offset = "0xCC61EC", VA = "0xCC61EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033A4")]
			[Address(RVA = "0xCC63E8", Offset = "0xCC63E8", VA = "0xCC63E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NPC npcRoot;

		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine checkCor;

		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator anim;

		[Token(Token = "0x6003382")]
		[Address(RVA = "0xCC5848", Offset = "0xCC5848", VA = "0xCC5848")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003383")]
		[Address(RVA = "0xCC58D8", Offset = "0xCC58D8", VA = "0xCC58D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003384")]
		[Address(RVA = "0xCC5988", Offset = "0xCC5988", VA = "0xCC5988")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003385")]
		[Address(RVA = "0xCC5A38", Offset = "0xCC5A38", VA = "0xCC5A38")]
		private void CheckPistolInHand()
		{
		}

		[Token(Token = "0x6003386")]
		[Address(RVA = "0xCC5B4C", Offset = "0xCC5B4C", VA = "0xCC5B4C")]
		public void ChecIK()
		{
		}

		[Token(Token = "0x6003387")]
		[Address(RVA = "0xCC5B30", Offset = "0xCC5B30", VA = "0xCC5B30")]
		public void NPC_TakePistolInHand()
		{
		}

		[Token(Token = "0x6003388")]
		[Address(RVA = "0xCC5B68", Offset = "0xCC5B68", VA = "0xCC5B68")]
		public void NPC_MakeSelfShot()
		{
		}

		[Token(Token = "0x6003389")]
		[Address(RVA = "0xCC5B84", Offset = "0xCC5B84", VA = "0xCC5B84")]
		public void NPC_MakeShot(int putOnTableAfterShot = 0)
		{
		}

		[Token(Token = "0x600338A")]
		[Address(RVA = "0xCC5BA0", Offset = "0xCC5BA0", VA = "0xCC5BA0")]
		public void RPC_CallToUnGrabePistol()
		{
		}

		[Token(Token = "0x600338B")]
		[Address(RVA = "0xCC5BBC", Offset = "0xCC5BBC", VA = "0xCC5BBC")]
		public void SwitchState()
		{
		}

		[Token(Token = "0x600338C")]
		[Address(RVA = "0xCC5BD8", Offset = "0xCC5BD8", VA = "0xCC5BD8")]
		public void NPC_ReloadPistol()
		{
		}

		[Token(Token = "0x600338D")]
		[Address(RVA = "0xCC5BF4", Offset = "0xCC5BF4", VA = "0xCC5BF4")]
		public void NPC_TakeCardInhand()
		{
		}

		[Token(Token = "0x600338E")]
		[Address(RVA = "0xCC5C78", Offset = "0xCC5C78", VA = "0xCC5C78")]
		public void NPC_CheckFreeze()
		{
		}

		[Token(Token = "0x600338F")]
		[Address(RVA = "0xCC5C94", Offset = "0xCC5C94", VA = "0xCC5C94")]
		public void NPC_TossCard()
		{
		}

		[Token(Token = "0x6003390")]
		[Address(RVA = "0xCC5CB0", Offset = "0xCC5CB0", VA = "0xCC5CB0")]
		public void NPC_ReloadByCard()
		{
		}

		[Token(Token = "0x6003391")]
		[Address(RVA = "0xCC5CCC", Offset = "0xCC5CCC", VA = "0xCC5CCC")]
		public void NPC_TakeBullet()
		{
		}

		[Token(Token = "0x6003392")]
		[Address(RVA = "0xCC5CE8", Offset = "0xCC5CE8", VA = "0xCC5CE8")]
		public void NPC_DropBullet()
		{
		}

		[Token(Token = "0x6003393")]
		[Address(RVA = "0xCC5D04", Offset = "0xCC5D04", VA = "0xCC5D04")]
		public void NPC_ClosePistolBarrel()
		{
		}

		[Token(Token = "0x6003394")]
		[Address(RVA = "0xCC5D20", Offset = "0xCC5D20", VA = "0xCC5D20")]
		public void NPC_ResetParameters()
		{
		}

		[Token(Token = "0x6003395")]
		[Address(RVA = "0xCC5D24", Offset = "0xCC5D24", VA = "0xCC5D24")]
		private void CheckIdle()
		{
		}

		[Token(Token = "0x6003396")]
		[Address(RVA = "0xCC5DF8", Offset = "0xCC5DF8", VA = "0xCC5DF8")]
		[IteratorStateMachine(typeof(<checkIdle>d__22))]
		private IEnumerator checkIdle()
		{
			return null;
		}

		[Token(Token = "0x6003397")]
		[Address(RVA = "0xCC5E94", Offset = "0xCC5E94", VA = "0xCC5E94")]
		private void CheckFreeze()
		{
		}

		[Token(Token = "0x6003398")]
		[Address(RVA = "0xCC5EB4", Offset = "0xCC5EB4", VA = "0xCC5EB4")]
		[IteratorStateMachine(typeof(<check>d__25))]
		private IEnumerator check()
		{
			return null;
		}

		[Token(Token = "0x6003399")]
		[Address(RVA = "0xCC5F50", Offset = "0xCC5F50", VA = "0xCC5F50")]
		public NPC_AnimationsEvents()
		{
		}
	}
	[Token(Token = "0x200082C")]
	public class NPC_Components : MonoBehaviour
	{
		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerParts playerModel;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LookAtIK lookAtIK;

		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbIK rightHandIK;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<Player_Renderers> renderers;

		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material ghostMaterial;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NPC_Death npcDeath;

		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool hidden;

		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEvent onShow;

		[Token(Token = "0x60033A6")]
		[Address(RVA = "0xCC6430", Offset = "0xCC6430", VA = "0xCC6430")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033A7")]
		[Address(RVA = "0xCC6628", Offset = "0xCC6628", VA = "0xCC6628")]
		public void HidePlayer()
		{
		}

		[Token(Token = "0x60033A8")]
		[Address(RVA = "0xCC6990", Offset = "0xCC6990", VA = "0xCC6990")]
		public void ShowPlayer()
		{
		}

		[Token(Token = "0x60033A9")]
		[Address(RVA = "0xCC6CF8", Offset = "0xCC6CF8", VA = "0xCC6CF8")]
		[ContextMenu("Fill renderers")]
		public void LoadRenderersComponents()
		{
		}

		[Token(Token = "0x60033AA")]
		[Address(RVA = "0xCC6ED0", Offset = "0xCC6ED0", VA = "0xCC6ED0")]
		public NPC_Components()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200082D")]
	public class Player_Renderers
	{
		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer renderer;

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Material> rendererMaterials;

		[Token(Token = "0x60033AB")]
		[Address(RVA = "0xCC6798", Offset = "0xCC6798", VA = "0xCC6798")]
		public void ToGhost(Material ghost, MonoBehaviour beh, bool isNPC = false)
		{
		}

		[Token(Token = "0x60033AC")]
		[Address(RVA = "0xCC6F58", Offset = "0xCC6F58", VA = "0xCC6F58")]
		public void ToGhostMyHead(Material ghost)
		{
		}

		[Token(Token = "0x60033AD")]
		[Address(RVA = "0xCC6AF8", Offset = "0xCC6AF8", VA = "0xCC6AF8")]
		public void ToNormal(bool isNPC = false)
		{
		}

		[Token(Token = "0x60033AE")]
		[Address(RVA = "0xCC6EC8", Offset = "0xCC6EC8", VA = "0xCC6EC8")]
		public Player_Renderers()
		{
		}
	}
	[Token(Token = "0x200082E")]
	public class NPC_Death : MonoBehaviour
	{
		[Token(Token = "0x200082F")]
		[CompilerGenerated]
		private sealed class <DropHat>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC_Death <>4__this;

			[Token(Token = "0x4002AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 from;

			[Token(Token = "0x4002AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 to;

			[Token(Token = "0x170003D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033B8")]
				[Address(RVA = "0xCC77C8", Offset = "0xCC77C8", VA = "0xCC77C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033BA")]
				[Address(RVA = "0xCC7810", Offset = "0xCC7810", VA = "0xCC7810", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033B5")]
			[Address(RVA = "0xCC743C", Offset = "0xCC743C", VA = "0xCC743C")]
			[DebuggerHidden]
			public <DropHat>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60033B6")]
			[Address(RVA = "0xCC75BC", Offset = "0xCC75BC", VA = "0xCC75BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033B7")]
			[Address(RVA = "0xCC75C0", Offset = "0xCC75C0", VA = "0xCC75C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033B9")]
			[Address(RVA = "0xCC77D0", Offset = "0xCC77D0", VA = "0xCC77D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000830")]
		[CompilerGenerated]
		private sealed class <EnableHeadCollider>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NPC_Death <>4__this;

			[Token(Token = "0x170003DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033BE")]
				[Address(RVA = "0xCC7968", Offset = "0xCC7968", VA = "0xCC7968", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033C0")]
				[Address(RVA = "0xCC79B0", Offset = "0xCC79B0", VA = "0xCC79B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033BB")]
			[Address(RVA = "0xCC7464", Offset = "0xCC7464", VA = "0xCC7464")]
			[DebuggerHidden]
			public <EnableHeadCollider>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60033BC")]
			[Address(RVA = "0xCC7818", Offset = "0xCC7818", VA = "0xCC7818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033BD")]
			[Address(RVA = "0xCC781C", Offset = "0xCC781C", VA = "0xCC781C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033BF")]
			[Address(RVA = "0xCC7970", Offset = "0xCC7970", VA = "0xCC7970", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Transform Hat;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform flyingHead;

		[Token(Token = "0x4002A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform currentNPC_HeadTransform;

		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float forceMultiplayer;

		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float dropHatSpeed;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 defaultHatPosition;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine dropHatRoutine;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject ragdollPrefab;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform ragdollPosAndRot;

		[Token(Token = "0x60033AF")]
		[Address(RVA = "0xCC705C", Offset = "0xCC705C", VA = "0xCC705C")]
		private void Start()
		{
		}

		[Token(Token = "0x60033B0")]
		[Address(RVA = "0xCC7094", Offset = "0xCC7094", VA = "0xCC7094")]
		public void InitDeath(Vector3 pointToDropHat, Vector3 headForce)
		{
		}

		[Token(Token = "0x60033B1")]
		[Address(RVA = "0xCC738C", Offset = "0xCC738C", VA = "0xCC738C")]
		[IteratorStateMachine(typeof(<DropHat>d__11))]
		private IEnumerator DropHat(Vector3 from, Vector3 to)
		{
			return null;
		}

		[Token(Token = "0x60033B2")]
		[Address(RVA = "0xCC7318", Offset = "0xCC7318", VA = "0xCC7318")]
		[IteratorStateMachine(typeof(<EnableHeadCollider>d__12))]
		private IEnumerator EnableHeadCollider()
		{
			return null;
		}

		[Token(Token = "0x60033B3")]
		[Address(RVA = "0xCC748C", Offset = "0xCC748C", VA = "0xCC748C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60033B4")]
		[Address(RVA = "0xCC75A8", Offset = "0xCC75A8", VA = "0xCC75A8")]
		public NPC_Death()
		{
		}
	}
	[Token(Token = "0x2000831")]
	public class NPC_HandAttachPoints : MonoBehaviour
	{
		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform pistolAttachPoint;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform bulletAttachPoint;

		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform spinCardAttachPoint;

		[Token(Token = "0x60033C1")]
		[Address(RVA = "0xCC79B8", Offset = "0xCC79B8", VA = "0xCC79B8")]
		public Transform GetAttachPoint(GrabbObject type)
		{
			return null;
		}

		[Token(Token = "0x60033C2")]
		[Address(RVA = "0xCC79F0", Offset = "0xCC79F0", VA = "0xCC79F0")]
		public NPC_HandAttachPoints()
		{
		}
	}
	[Token(Token = "0x2000832")]
	public class Pianist : MonoBehaviour
	{
		[Token(Token = "0x2000833")]
		[CompilerGenerated]
		private sealed class <UnPause>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4002AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Pianist <>4__this;

			[Token(Token = "0x170003DC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033CD")]
				[Address(RVA = "0xCC7EAC", Offset = "0xCC7EAC", VA = "0xCC7EAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033CF")]
				[Address(RVA = "0xCC7EF4", Offset = "0xCC7EF4", VA = "0xCC7EF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033CA")]
			[Address(RVA = "0xCC7D48", Offset = "0xCC7D48", VA = "0xCC7D48")]
			[DebuggerHidden]
			public <UnPause>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60033CB")]
			[Address(RVA = "0xCC7DCC", Offset = "0xCC7DCC", VA = "0xCC7DCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033CC")]
			[Address(RVA = "0xCC7DD0", Offset = "0xCC7DD0", VA = "0xCC7DD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033CE")]
			[Address(RVA = "0xCC7EB4", Offset = "0xCC7EB4", VA = "0xCC7EB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Pianist Instance;

		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ragdoll;

		[Token(Token = "0x60033C3")]
		[Address(RVA = "0xCC79F8", Offset = "0xCC79F8", VA = "0xCC79F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033C4")]
		[Address(RVA = "0xCC7A50", Offset = "0xCC7A50", VA = "0xCC7A50")]
		private void Update()
		{
		}

		[Token(Token = "0x60033C5")]
		[Address(RVA = "0xCC7B04", Offset = "0xCC7B04", VA = "0xCC7B04")]
		[PunRPC]
		private void Death()
		{
		}

		[Token(Token = "0x60033C6")]
		[Address(RVA = "0xCC7C40", Offset = "0xCC7C40", VA = "0xCC7C40")]
		public void PianistPause(float time)
		{
		}

		[Token(Token = "0x60033C7")]
		[Address(RVA = "0xCC7CC4", Offset = "0xCC7CC4", VA = "0xCC7CC4")]
		[IteratorStateMachine(typeof(<UnPause>d__6))]
		private IEnumerator UnPause(float time)
		{
			return null;
		}

		[Token(Token = "0x60033C8")]
		[Address(RVA = "0xCC7D70", Offset = "0xCC7D70", VA = "0xCC7D70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60033C9")]
		[Address(RVA = "0xCC7DC4", Offset = "0xCC7DC4", VA = "0xCC7DC4")]
		public Pianist()
		{
		}
	}
	[Token(Token = "0x2000834")]
	public class Ragdoll : MonoBehaviour
	{
		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject head;

		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] disableObjectsForSkip;

		[Token(Token = "0x60033D0")]
		[Address(RVA = "0xCC7EFC", Offset = "0xCC7EFC", VA = "0xCC7EFC")]
		public void ForceHead(Vector3 dir)
		{
		}

		[Token(Token = "0x60033D1")]
		[Address(RVA = "0xCC7F88", Offset = "0xCC7F88", VA = "0xCC7F88")]
		public void SkipForce()
		{
		}

		[Token(Token = "0x60033D2")]
		[Address(RVA = "0xCC7FEC", Offset = "0xCC7FEC", VA = "0xCC7FEC")]
		public Ragdoll()
		{
		}
	}
	[Token(Token = "0x2000835")]
	public class RagdollsManager : MonoBehaviour
	{
		[Token(Token = "0x2000836")]
		[CompilerGenerated]
		private sealed class <ForceHead>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollsManager <>4__this;

			[Token(Token = "0x4002ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 dir;

			[Token(Token = "0x170003DE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033DA")]
				[Address(RVA = "0xCC8A14", Offset = "0xCC8A14", VA = "0xCC8A14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033DC")]
				[Address(RVA = "0xCC8A5C", Offset = "0xCC8A5C", VA = "0xCC8A5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033D7")]
			[Address(RVA = "0xCC886C", Offset = "0xCC886C", VA = "0xCC886C")]
			[DebuggerHidden]
			public <ForceHead>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60033D8")]
			[Address(RVA = "0xCC891C", Offset = "0xCC891C", VA = "0xCC891C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033D9")]
			[Address(RVA = "0xCC8920", Offset = "0xCC8920", VA = "0xCC8920", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033DB")]
			[Address(RVA = "0xCC8A1C", Offset = "0xCC8A1C", VA = "0xCC8A1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> ragdollsList;

		[Token(Token = "0x4002AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Ragdoll rd;

		[Token(Token = "0x60033D3")]
		[Address(RVA = "0xCC7FF4", Offset = "0xCC7FF4", VA = "0xCC7FF4")]
		public GameObject GetPlayerRagdoll(PlayerType playerType, Vector3 dir, bool forceHead = false)
		{
			return null;
		}

		[Token(Token = "0x60033D4")]
		[Address(RVA = "0xCC849C", Offset = "0xCC849C", VA = "0xCC849C")]
		public GameObject GetRagdallWithoutForce(PlayerType playerType)
		{
			return null;
		}

		[Token(Token = "0x60033D5")]
		[Address(RVA = "0xCC8404", Offset = "0xCC8404", VA = "0xCC8404")]
		[IteratorStateMachine(typeof(<ForceHead>d__4))]
		private IEnumerator ForceHead(Vector3 dir)
		{
			return null;
		}

		[Token(Token = "0x60033D6")]
		[Address(RVA = "0xCC8894", Offset = "0xCC8894", VA = "0xCC8894")]
		public RagdollsManager()
		{
		}
	}
	[Token(Token = "0x2000837")]
	public enum WaitressState
	{
		[Token(Token = "0x4002ABD")]
		Walk,
		[Token(Token = "0x4002ABE")]
		CarryGlass
	}
	[Token(Token = "0x2000838")]
	public class Waitress : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x200083A")]
		[CompilerGenerated]
		private sealed class <CreateGlassesNumerator>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Waitress <>4__this;

			[Token(Token = "0x4002ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170003E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033F2")]
				[Address(RVA = "0xCC9908", Offset = "0xCC9908", VA = "0xCC9908", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033F4")]
				[Address(RVA = "0xCC9950", Offset = "0xCC9950", VA = "0xCC9950", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033EF")]
			[Address(RVA = "0xCC95E4", Offset = "0xCC95E4", VA = "0xCC95E4")]
			[DebuggerHidden]
			public <CreateGlassesNumerator>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60033F0")]
			[Address(RVA = "0xCC97E0", Offset = "0xCC97E0", VA = "0xCC97E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033F1")]
			[Address(RVA = "0xCC97E4", Offset = "0xCC97E4", VA = "0xCC97E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033F3")]
			[Address(RVA = "0xCC9910", Offset = "0xCC9910", VA = "0xCC9910", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Waitress Instance;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject waitressDefaultGlass;

		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayableDirector walk;

		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PlayableDirector carryGlasses;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject ragdoll;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform[] pointsForGlasses;

		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double time;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private WaitressState waitressState;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine checkForBrokenGlasses;

		[Token(Token = "0x60033DD")]
		[Address(RVA = "0xCC8A64", Offset = "0xCC8A64", VA = "0xCC8A64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033DE")]
		[Address(RVA = "0xCC8B18", Offset = "0xCC8B18", VA = "0xCC8B18")]
		private void Start()
		{
		}

		[Token(Token = "0x60033DF")]
		[Address(RVA = "0xCC8B5C", Offset = "0xCC8B5C", VA = "0xCC8B5C")]
		[PunRPC]
		private void InitialTimeRequest()
		{
		}

		[Token(Token = "0x60033E0")]
		[Address(RVA = "0xCC8C80", Offset = "0xCC8C80", VA = "0xCC8C80")]
		[PunRPC]
		private void InitialTimeAccept(float time)
		{
		}

		[Token(Token = "0x60033E1")]
		[Address(RVA = "0xCC8CA0", Offset = "0xCC8CA0", VA = "0xCC8CA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60033E2")]
		[Address(RVA = "0xCC8CCC", Offset = "0xCC8CCC", VA = "0xCC8CCC")]
		[PunRPC]
		private void Death()
		{
		}

		[Token(Token = "0x60033E3")]
		[Address(RVA = "0xCC8F84", Offset = "0xCC8F84", VA = "0xCC8F84")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60033E4")]
		[Address(RVA = "0xCC9008", Offset = "0xCC9008", VA = "0xCC9008")]
		private void SwitchState(WaitressState switchTO, float time)
		{
		}

		[Token(Token = "0x60033E5")]
		[Address(RVA = "0xCC9230", Offset = "0xCC9230", VA = "0xCC9230")]
		[PunRPC]
		private void SwitchState_RPC(int state, float time)
		{
		}

		[Token(Token = "0x60033E6")]
		[Address(RVA = "0xCC9234", Offset = "0xCC9234", VA = "0xCC9234")]
		public void GiveGlasses()
		{
		}

		[Token(Token = "0x60033E7")]
		[Address(RVA = "0xCC9308", Offset = "0xCC9308", VA = "0xCC9308")]
		public void CheckGlasses()
		{
		}

		[Token(Token = "0x60033E8")]
		[Address(RVA = "0xCC9550", Offset = "0xCC9550", VA = "0xCC9550")]
		public void CreateGlasses()
		{
		}

		[Token(Token = "0x60033E9")]
		[Address(RVA = "0xCC9570", Offset = "0xCC9570", VA = "0xCC9570")]
		[IteratorStateMachine(typeof(<CreateGlassesNumerator>d__22))]
		private IEnumerator CreateGlassesNumerator()
		{
			return null;
		}

		[Token(Token = "0x60033EA")]
		[Address(RVA = "0xCC960C", Offset = "0xCC960C", VA = "0xCC960C")]
		private Transform GetFreePoint()
		{
			return null;
		}

		[Token(Token = "0x60033EB")]
		[Address(RVA = "0xCC96F8", Offset = "0xCC96F8", VA = "0xCC96F8")]
		public Waitress()
		{
		}
	}
	[Token(Token = "0x200083B")]
	public class WaitressAnimatorReceiver : MonoBehaviour
	{
		[Token(Token = "0x60033F5")]
		[Address(RVA = "0xCC9958", Offset = "0xCC9958", VA = "0xCC9958")]
		private void CreateGlasses()
		{
		}

		[Token(Token = "0x60033F6")]
		[Address(RVA = "0xCC9A0C", Offset = "0xCC9A0C", VA = "0xCC9A0C")]
		private void GiveGlasses()
		{
		}

		[Token(Token = "0x60033F7")]
		[Address(RVA = "0xCC9AAC", Offset = "0xCC9AAC", VA = "0xCC9AAC")]
		private void CheckGlasses()
		{
		}

		[Token(Token = "0x60033F8")]
		[Address(RVA = "0xCC9B4C", Offset = "0xCC9B4C", VA = "0xCC9B4C")]
		public WaitressAnimatorReceiver()
		{
		}
	}
	[Token(Token = "0x200083C")]
	public class ObjectReturner : MonoBehaviour
	{
		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform tableCenter;

		[Token(Token = "0x60033F9")]
		[Address(RVA = "0xCC9B54", Offset = "0xCC9B54", VA = "0xCC9B54")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60033FA")]
		[Address(RVA = "0xCCA81C", Offset = "0xCCA81C", VA = "0xCCA81C")]
		public ObjectReturner()
		{
		}
	}
	[Token(Token = "0x200083D")]
	public class Pepelka : MonoBehaviour
	{
		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Pepelka Instance;

		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int pepelnitsaID;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonView photonView;

		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rigidbody;

		[Token(Token = "0x60033FB")]
		[Address(RVA = "0xCCA824", Offset = "0xCCA824", VA = "0xCCA824")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033FC")]
		[Address(RVA = "0xCC9EF0", Offset = "0xCC9EF0", VA = "0xCC9EF0")]
		public void PutPeplkaOnTable()
		{
		}

		[Token(Token = "0x60033FD")]
		[Address(RVA = "0xCCA944", Offset = "0xCCA944", VA = "0xCCA944")]
		public void SetUser(Photon.Realtime.Player player)
		{
		}

		[Token(Token = "0x60033FE")]
		[Address(RVA = "0xCCA960", Offset = "0xCCA960", VA = "0xCCA960")]
		[PunRPC]
		private void RPC_PutPepelkaOnTable(Vector3 dir, float speed)
		{
		}

		[Token(Token = "0x60033FF")]
		[Address(RVA = "0xCCA9C0", Offset = "0xCCA9C0", VA = "0xCCA9C0")]
		public Pepelka()
		{
		}
	}
	[Token(Token = "0x200083E")]
	public class AFK_Pistol : PickUpObject
	{
		[Token(Token = "0x200083F")]
		[CompilerGenerated]
		private sealed class <DelayRequestToSync>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003418")]
				[Address(RVA = "0xCCC01C", Offset = "0xCCC01C", VA = "0xCCC01C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600341A")]
				[Address(RVA = "0xCCC064", Offset = "0xCCC064", VA = "0xCCC064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003415")]
			[Address(RVA = "0xCCBB38", Offset = "0xCCBB38", VA = "0xCCBB38")]
			[DebuggerHidden]
			public <DelayRequestToSync>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6003416")]
			[Address(RVA = "0xCCBD7C", Offset = "0xCCBD7C", VA = "0xCCBD7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003417")]
			[Address(RVA = "0xCCBD80", Offset = "0xCCBD80", VA = "0xCCBD80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003419")]
			[Address(RVA = "0xCCC024", Offset = "0xCCC024", VA = "0xCCC024", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000840")]
		[CompilerGenerated]
		private sealed class <ShootingDelay>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AFK_Pistol <>4__this;

			[Token(Token = "0x170003E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600341E")]
				[Address(RVA = "0xCCC130", Offset = "0xCCC130", VA = "0xCCC130", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003420")]
				[Address(RVA = "0xCCC178", Offset = "0xCCC178", VA = "0xCCC178", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600341B")]
			[Address(RVA = "0xCCBB60", Offset = "0xCCBB60", VA = "0xCCBB60")]
			[DebuggerHidden]
			public <ShootingDelay>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x600341C")]
			[Address(RVA = "0xCCC06C", Offset = "0xCCC06C", VA = "0xCCC06C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600341D")]
			[Address(RVA = "0xCCC070", Offset = "0xCCC070", VA = "0xCCC070", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600341F")]
			[Address(RVA = "0xCCC138", Offset = "0xCCC138", VA = "0xCCC138", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private ParticleSystem shotVFX;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Animator shotFlag;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip shotSFX;

		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioClip dryShotSFX;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Transform bulletSpawnPoint;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioSource audioSource;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Animator animator;

		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int ShotIndex;

		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool canShoot;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Coroutine movingNumerator;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float startTime;

		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float journeyLength;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool returning;

		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float speed;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3 startMarker;

		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Vector3 endMarker;

		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Quaternion endRotation;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private AbstractPlayer lastAimedPlayer;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private PlayerController pistolHolder;

		[Token(Token = "0x6003400")]
		[Address(RVA = "0xCCA9D0", Offset = "0xCCA9D0", VA = "0xCCA9D0", Slot = "9")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6003401")]
		[Address(RVA = "0xCCAA6C", Offset = "0xCCAA6C", VA = "0xCCAA6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003402")]
		[Address(RVA = "0xCCAA90", Offset = "0xCCAA90", VA = "0xCCAA90", Slot = "8")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6003403")]
		[Address(RVA = "0xCCAAF8", Offset = "0xCCAAF8", VA = "0xCCAAF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003404")]
		[Address(RVA = "0xCCABB0", Offset = "0xCCABB0", VA = "0xCCABB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6003405")]
		[Address(RVA = "0xCCAB18", Offset = "0xCCAB18", VA = "0xCCAB18")]
		private void turnOffOutline()
		{
		}

		[Token(Token = "0x6003406")]
		[Address(RVA = "0xCCAE38", Offset = "0xCCAE38", VA = "0xCCAE38")]
		private void RayCast()
		{
		}

		[Token(Token = "0x6003407")]
		[Address(RVA = "0xCCB710", Offset = "0xCCB710", VA = "0xCCB710")]
		public void ReturnOnTable(Vector3 returnPosition, Quaternion rotation)
		{
		}

		[Token(Token = "0x6003408")]
		[Address(RVA = "0xCCB86C", Offset = "0xCCB86C", VA = "0xCCB86C", Slot = "10")]
		public override void PickUp(PickUpController controller)
		{
		}

		[Token(Token = "0x6003409")]
		[Address(RVA = "0xCCB874", Offset = "0xCCB874", VA = "0xCCB874", Slot = "11")]
		public override void OnPickUpLogic()
		{
		}

		[Token(Token = "0x600340A")]
		[Address(RVA = "0xCCB950", Offset = "0xCCB950", VA = "0xCCB950", Slot = "13")]
		public override void UnPick()
		{
		}

		[Token(Token = "0x600340B")]
		[Address(RVA = "0xCCBA3C", Offset = "0xCCBA3C", VA = "0xCCBA3C", Slot = "14")]
		public override void HoverByHand(bool hovered)
		{
		}

		[Token(Token = "0x600340C")]
		[Address(RVA = "0xCCBA54", Offset = "0xCCBA54", VA = "0xCCBA54")]
		public void StopGrab()
		{
		}

		[Token(Token = "0x600340D")]
		[Address(RVA = "0xCCB088", Offset = "0xCCB088", VA = "0xCCB088")]
		private void MakeShot()
		{
		}

		[Token(Token = "0x600340E")]
		[Address(RVA = "0xCCBA64", Offset = "0xCCBA64", VA = "0xCCBA64")]
		[IteratorStateMachine(typeof(<DelayRequestToSync>d__33))]
		private IEnumerator DelayRequestToSync()
		{
			return null;
		}

		[Token(Token = "0x600340F")]
		[Address(RVA = "0xCCBAC4", Offset = "0xCCBAC4", VA = "0xCCBAC4")]
		[IteratorStateMachine(typeof(<ShootingDelay>d__34))]
		private IEnumerator ShootingDelay()
		{
			return null;
		}

		[Token(Token = "0x6003410")]
		[Address(RVA = "0xCCBB88", Offset = "0xCCBB88", VA = "0xCCBB88")]
		[PunRPC]
		private void RPC_ShotSFX(bool dryShot)
		{
		}

		[Token(Token = "0x6003411")]
		[Address(RVA = "0xCCBBD0", Offset = "0xCCBBD0", VA = "0xCCBBD0")]
		[PunRPC]
		private void RPC_ShotVFX(bool dryShot)
		{
		}

		[Token(Token = "0x6003412")]
		[Address(RVA = "0xCCBC84", Offset = "0xCCBC84", VA = "0xCCBC84")]
		private void FixFlag()
		{
		}

		[Token(Token = "0x6003413")]
		[Address(RVA = "0xCCBCD8", Offset = "0xCCBCD8", VA = "0xCCBCD8")]
		internal void SetPistolHolder(PlayerController playerController)
		{
		}

		[Token(Token = "0x6003414")]
		[Address(RVA = "0xCCBCE8", Offset = "0xCCBCE8", VA = "0xCCBCE8")]
		public AFK_Pistol()
		{
		}
	}
	[Token(Token = "0x2000841")]
	public class Bullet : PickUpObject
	{
		[Token(Token = "0x2000842")]
		[CompilerGenerated]
		private sealed class <DelayEnabling>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Bullet <>4__this;

			[Token(Token = "0x4002AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool checkPoint;

			[Token(Token = "0x170003E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600343C")]
				[Address(RVA = "0xCCD4B0", Offset = "0xCCD4B0", VA = "0xCCD4B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600343E")]
				[Address(RVA = "0xCCD4F8", Offset = "0xCCD4F8", VA = "0xCCD4F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003439")]
			[Address(RVA = "0xCCCF5C", Offset = "0xCCCF5C", VA = "0xCCCF5C")]
			[DebuggerHidden]
			public <DelayEnabling>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600343A")]
			[Address(RVA = "0xCCD158", Offset = "0xCCD158", VA = "0xCCD158", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600343B")]
			[Address(RVA = "0xCCD15C", Offset = "0xCCD15C", VA = "0xCCD15C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600343D")]
			[Address(RVA = "0xCCD4B8", Offset = "0xCCD4B8", VA = "0xCCD4B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000843")]
		[CompilerGenerated]
		private sealed class <DelayDisabling>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Bullet <>4__this;

			[Token(Token = "0x170003E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003442")]
				[Address(RVA = "0xCCD6A4", Offset = "0xCCD6A4", VA = "0xCCD6A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003444")]
				[Address(RVA = "0xCCD6EC", Offset = "0xCCD6EC", VA = "0xCCD6EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600343F")]
			[Address(RVA = "0xCCCF84", Offset = "0xCCCF84", VA = "0xCCCF84")]
			[DebuggerHidden]
			public <DelayDisabling>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6003440")]
			[Address(RVA = "0xCCD500", Offset = "0xCCD500", VA = "0xCCD500", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003441")]
			[Address(RVA = "0xCCD504", Offset = "0xCCD504", VA = "0xCCD504", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003443")]
			[Address(RVA = "0xCCD6AC", Offset = "0xCCD6AC", VA = "0xCCD6AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Bullet Instance;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DropCollisionEvent collisionEvent;

		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform bulletHole;

		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Coroutine enabling;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Coroutine disabling;

		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool prevObjectEnabled;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool objectEnabled;

		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		private bool objectEnabledNet;

		[Token(Token = "0x170003E6")]
		public int BulletDroppedIndex
		{
			[Token(Token = "0x6003421")]
			[Address(RVA = "0xCCC180", Offset = "0xCCC180", VA = "0xCCC180")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003422")]
			[Address(RVA = "0xCCC188", Offset = "0xCCC188", VA = "0xCCC188")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000117")]
		public event Action OnGrab
		{
			[Token(Token = "0x6003423")]
			[Address(RVA = "0xCCC190", Offset = "0xCCC190", VA = "0xCCC190")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003424")]
			[Address(RVA = "0xCCC22C", Offset = "0xCCC22C", VA = "0xCCC22C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000118")]
		public event Action OnUngrab
		{
			[Token(Token = "0x6003425")]
			[Address(RVA = "0xCCC2C8", Offset = "0xCCC2C8", VA = "0xCCC2C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003426")]
			[Address(RVA = "0xCCC364", Offset = "0xCCC364", VA = "0xCCC364")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003427")]
		[Address(RVA = "0xCCC400", Offset = "0xCCC400", VA = "0xCCC400", Slot = "9")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6003428")]
		[Address(RVA = "0xCCC4E8", Offset = "0xCCC4E8", VA = "0xCCC4E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6003429")]
		[Address(RVA = "0xCCC4F4", Offset = "0xCCC4F4", VA = "0xCCC4F4", Slot = "10")]
		public override void PickUp(PickUpController controller)
		{
		}

		[Token(Token = "0x600342A")]
		[Address(RVA = "0xCCC5EC", Offset = "0xCCC5EC", VA = "0xCCC5EC", Slot = "13")]
		public override void UnPick()
		{
		}

		[Token(Token = "0x600342B")]
		[Address(RVA = "0xCCC620", Offset = "0xCCC620", VA = "0xCCC620", Slot = "14")]
		public override void HoverByHand(bool hovered)
		{
		}

		[Token(Token = "0x600342C")]
		[Address(RVA = "0xCCC700", Offset = "0xCCC700", VA = "0xCCC700")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600342D")]
		[Address(RVA = "0xCCC9F4", Offset = "0xCCC9F4", VA = "0xCCC9F4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600342E")]
		[Address(RVA = "0xCCBF30", Offset = "0xCCBF30", VA = "0xCCBF30")]
		public void UpdateBulletPosition()
		{
		}

		[Token(Token = "0x600342F")]
		[Address(RVA = "0xCCCAD8", Offset = "0xCCCAD8", VA = "0xCCCAD8")]
		public void EnableBullet()
		{
		}

		[Token(Token = "0x6003430")]
		[Address(RVA = "0xCCCBB8", Offset = "0xCCCBB8", VA = "0xCCCBB8")]
		public void DisableBullet(float time = 0.5f)
		{
		}

		[Token(Token = "0x6003431")]
		[Address(RVA = "0xCCCCC8", Offset = "0xCCCCC8", VA = "0xCCCCC8")]
		[PunRPC]
		private void RPC_EnableBullet()
		{
		}

		[Token(Token = "0x6003432")]
		[Address(RVA = "0xCCCE94", Offset = "0xCCCE94", VA = "0xCCCE94")]
		[PunRPC]
		private void RPC_DisableBullet(float time)
		{
		}

		[Token(Token = "0x6003433")]
		[Address(RVA = "0xCCCB30", Offset = "0xCCCB30", VA = "0xCCCB30")]
		[IteratorStateMachine(typeof(<DelayEnabling>d__31))]
		private IEnumerator DelayEnabling(float time, bool checkPoint = true)
		{
			return null;
		}

		[Token(Token = "0x6003434")]
		[Address(RVA = "0xCCCEE8", Offset = "0xCCCEE8", VA = "0xCCCEE8")]
		[IteratorStateMachine(typeof(<DelayDisabling>d__32))]
		private IEnumerator DelayDisabling(float time)
		{
			return null;
		}

		[Token(Token = "0x6003435")]
		[Address(RVA = "0xCCCFAC", Offset = "0xCCCFAC", VA = "0xCCCFAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6003436")]
		[Address(RVA = "0xCCCFF4", Offset = "0xCCCFF4", VA = "0xCCCFF4", Slot = "15")]
		public override void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003437")]
		[Address(RVA = "0xCCD0FC", Offset = "0xCCD0FC", VA = "0xCCD0FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003438")]
		[Address(RVA = "0xCCD100", Offset = "0xCCD100", VA = "0xCCD100")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x2000844")]
	public class BulletPistolHole : MonoBehaviour
	{
		[Token(Token = "0x6003445")]
		[Address(RVA = "0xCCC94C", Offset = "0xCCC94C", VA = "0xCCC94C")]
		public void ShowBullet()
		{
		}

		[Token(Token = "0x6003446")]
		[Address(RVA = "0xCCD8A8", Offset = "0xCCD8A8", VA = "0xCCD8A8")]
		public BulletPistolHole()
		{
		}
	}
	[Token(Token = "0x2000845")]
	public class CustomHighlighter : VRTK_BaseHighlighter
	{
		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool debug;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private OutlineController outlineController;

		[Token(Token = "0x6003447")]
		[Address(RVA = "0xCCD8B0", Offset = "0xCCD8B0", VA = "0xCCD8B0", Slot = "6")]
		public override void Highlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x6003448")]
		[Address(RVA = "0xCCD93C", Offset = "0xCCD93C", VA = "0xCCD93C", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6003449")]
		[Address(RVA = "0xCCD95C", Offset = "0xCCD95C", VA = "0xCCD95C", Slot = "5")]
		public override void ResetHighlighter()
		{
		}

		[Token(Token = "0x600344A")]
		[Address(RVA = "0xCCD9E8", Offset = "0xCCD9E8", VA = "0xCCD9E8", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Token(Token = "0x600344B")]
		[Address(RVA = "0xCCDA74", Offset = "0xCCDA74", VA = "0xCCDA74")]
		public CustomHighlighter()
		{
		}
	}
	[Token(Token = "0x2000846")]
	public class HintsPosition : MonoBehaviour
	{
		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform hints;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float localY;

		[Token(Token = "0x600344C")]
		[Address(RVA = "0xCCDA7C", Offset = "0xCCDA7C", VA = "0xCCDA7C")]
		private void Start()
		{
		}

		[Token(Token = "0x600344D")]
		[Address(RVA = "0xCCDAA4", Offset = "0xCCDAA4", VA = "0xCCDAA4")]
		private void Update()
		{
		}

		[Token(Token = "0x600344E")]
		[Address(RVA = "0xCCDAD8", Offset = "0xCCDAD8", VA = "0xCCDAD8")]
		public HintsPosition()
		{
		}
	}
	[Token(Token = "0x2000847")]
	public class MainPistol : PickUpObject
	{
		[Token(Token = "0x2000848")]
		[CompilerGenerated]
		private sealed class <StartResetingRotation>d__77 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainPistol <>4__this;

			[Token(Token = "0x170003F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600349D")]
				[Address(RVA = "0xCD177C", Offset = "0xCD177C", VA = "0xCD177C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600349F")]
				[Address(RVA = "0xCD17C4", Offset = "0xCD17C4", VA = "0xCD17C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600349A")]
			[Address(RVA = "0xCCF5F4", Offset = "0xCCF5F4", VA = "0xCCF5F4")]
			[DebuggerHidden]
			public <StartResetingRotation>d__77(int <>1__state)
			{
			}

			[Token(Token = "0x600349B")]
			[Address(RVA = "0xCD16B8", Offset = "0xCD16B8", VA = "0xCD16B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600349C")]
			[Address(RVA = "0xCD16BC", Offset = "0xCD16BC", VA = "0xCD16BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600349E")]
			[Address(RVA = "0xCD1784", Offset = "0xCD1784", VA = "0xCD1784", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200084A")]
		[CompilerGenerated]
		private sealed class <InsertSecondBulletNumerator>d__93 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainPistol <>4__this;

			[Token(Token = "0x4002B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x170003FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034A6")]
				[Address(RVA = "0xCD1A18", Offset = "0xCD1A18", VA = "0xCD1A18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034A8")]
				[Address(RVA = "0xCD1A60", Offset = "0xCD1A60", VA = "0xCD1A60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034A3")]
			[Address(RVA = "0xCD00F0", Offset = "0xCD00F0", VA = "0xCD00F0")]
			[DebuggerHidden]
			public <InsertSecondBulletNumerator>d__93(int <>1__state)
			{
			}

			[Token(Token = "0x60034A4")]
			[Address(RVA = "0xCD18CC", Offset = "0xCD18CC", VA = "0xCD18CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034A5")]
			[Address(RVA = "0xCD18D0", Offset = "0xCD18D0", VA = "0xCD18D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034A7")]
			[Address(RVA = "0xCD1A20", Offset = "0xCD1A20", VA = "0xCD1A20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200084B")]
		[CompilerGenerated]
		private sealed class <MoveBulletToBarrel>d__98 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainPistol <>4__this;

			[Token(Token = "0x4002B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <length>5__2;

			[Token(Token = "0x4002B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <ticks>5__3;

			[Token(Token = "0x4002B35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <newBulletPosition>5__4;

			[Token(Token = "0x4002B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__5;

			[Token(Token = "0x170003FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034AC")]
				[Address(RVA = "0xCD1C34", Offset = "0xCD1C34", VA = "0xCD1C34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034AE")]
				[Address(RVA = "0xCD1C7C", Offset = "0xCD1C7C", VA = "0xCD1C7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034A9")]
			[Address(RVA = "0xCD04E0", Offset = "0xCD04E0", VA = "0xCD04E0")]
			[DebuggerHidden]
			public <MoveBulletToBarrel>d__98(int <>1__state)
			{
			}

			[Token(Token = "0x60034AA")]
			[Address(RVA = "0xCD1A68", Offset = "0xCD1A68", VA = "0xCD1A68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034AB")]
			[Address(RVA = "0xCD1A6C", Offset = "0xCD1A6C", VA = "0xCD1A6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034AD")]
			[Address(RVA = "0xCD1C3C", Offset = "0xCD1C3C", VA = "0xCD1C3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200084C")]
		[CompilerGenerated]
		private sealed class <AutoCloseAndSpin>d__99 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainPistol <>4__this;

			[Token(Token = "0x170003FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034B2")]
				[Address(RVA = "0xCD1ED4", Offset = "0xCD1ED4", VA = "0xCD1ED4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034B4")]
				[Address(RVA = "0xCD1F1C", Offset = "0xCD1F1C", VA = "0xCD1F1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034AF")]
			[Address(RVA = "0xCD0508", Offset = "0xCD0508", VA = "0xCD0508")]
			[DebuggerHidden]
			public <AutoCloseAndSpin>d__99(int <>1__state)
			{
			}

			[Token(Token = "0x60034B0")]
			[Address(RVA = "0xCD1C84", Offset = "0xCD1C84", VA = "0xCD1C84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034B1")]
			[Address(RVA = "0xCD1C88", Offset = "0xCD1C88", VA = "0xCD1C88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034B3")]
			[Address(RVA = "0xCD1EDC", Offset = "0xCD1EDC", VA = "0xCD1EDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200084D")]
		[CompilerGenerated]
		private sealed class <CloseJointBarrel>d__100 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool _canOpenBarrel;

			[Token(Token = "0x4002B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MainPistol <>4__this;

			[Token(Token = "0x4002B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x17000400")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034B8")]
				[Address(RVA = "0xCD2128", Offset = "0xCD2128", VA = "0xCD2128", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000401")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034BA")]
				[Address(RVA = "0xCD2170", Offset = "0xCD2170", VA = "0xCD2170", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034B5")]
			[Address(RVA = "0xCD0530", Offset = "0xCD0530", VA = "0xCD0530")]
			[DebuggerHidden]
			public <CloseJointBarrel>d__100(int <>1__state)
			{
			}

			[Token(Token = "0x60034B6")]
			[Address(RVA = "0xCD1F24", Offset = "0xCD1F24", VA = "0xCD1F24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034B7")]
			[Address(RVA = "0xCD1F28", Offset = "0xCD1F28", VA = "0xCD1F28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034B9")]
			[Address(RVA = "0xCD2130", Offset = "0xCD2130", VA = "0xCD2130", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200084E")]
		[CompilerGenerated]
		private sealed class <ShotNumerator>d__110 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AbstractPlayer player;

			[Token(Token = "0x4002B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MainPistol <>4__this;

			[Token(Token = "0x4002B43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <isBullet>5__2;

			[Token(Token = "0x4002B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <i>5__3;

			[Token(Token = "0x4002B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private MainPistolMoving <p_moving>5__4;

			[Token(Token = "0x17000402")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034BE")]
				[Address(RVA = "0xCD3780", Offset = "0xCD3780", VA = "0xCD3780", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000403")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034C0")]
				[Address(RVA = "0xCD37C8", Offset = "0xCD37C8", VA = "0xCD37C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034BB")]
			[Address(RVA = "0xCD0D50", Offset = "0xCD0D50", VA = "0xCD0D50")]
			[DebuggerHidden]
			public <ShotNumerator>d__110(int <>1__state)
			{
			}

			[Token(Token = "0x60034BC")]
			[Address(RVA = "0xCD2178", Offset = "0xCD2178", VA = "0xCD2178", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034BD")]
			[Address(RVA = "0xCD217C", Offset = "0xCD217C", VA = "0xCD217C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034BF")]
			[Address(RVA = "0xCD3788", Offset = "0xCD3788", VA = "0xCD3788", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MainPistol Instance;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform bulletSpawnPoint;

		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject localBullet;

		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private PistolSoundPool pistolSoundPool;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private ParticleSystem shotVFX;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Animator shotFlag;

		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Rigidbody rootGunMechanism;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Transform realBarrel;

		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TweenRotation tweenRotationCilinder;

		[Token(Token = "0x4002B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private PistolBarrelMechanism barrelMechanism;

		[Token(Token = "0x4002B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private MainPistolMoving pistolMoving;

		[Token(Token = "0x4002B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public UnityEvent OnShot;

		[Token(Token = "0x4002B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public UnityEvent OpenBarrelEvent;

		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public UnityEvent CloseBarrelEvent;

		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 defaultBarrelPosition;

		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private ShootOnMesh shootOnMesh;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AbstractPlayer pistolHolder;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Coroutine waitForSpinPistol;

		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 pointDropFromPosition;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Quaternion pointDropFromRotation;

		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[SerializeField]
		private bool isBarrelOpened;

		[Token(Token = "0x4002B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		[SerializeField]
		private bool canHandSpin;

		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14E")]
		[SerializeField]
		private bool canOpenBarrel;

		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14F")]
		[SerializeField]
		private bool gunSpinned;

		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private bool isGunCharged;

		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Text RechargingHintText;

		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[SerializeField]
		private float secondBulletEffectTime;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Coroutine barrelRotating;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public UnityEvent OnSecondBulletEvent_Start;

		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public UnityEvent OnSecondBulletEvent_End;

		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int prevBulletIndex;

		[Token(Token = "0x170003EB")]
		public Rigidbody RigidbodyGunMechanism
		{
			[Token(Token = "0x600344F")]
			[Address(RVA = "0xCCDAE0", Offset = "0xCCDAE0", VA = "0xCCDAE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003450")]
			[Address(RVA = "0xCCDAE8", Offset = "0xCCDAE8", VA = "0xCCDAE8")]
			set
			{
			}
		}

		[Token(Token = "0x170003EC")]
		public MainPistolMoving PistolMoving
		{
			[Token(Token = "0x6003451")]
			[Address(RVA = "0xCCDAF0", Offset = "0xCCDAF0", VA = "0xCCDAF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003ED")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x6003452")]
			[Address(RVA = "0xCCDAF8", Offset = "0xCCDAF8", VA = "0xCCDAF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EE")]
		public bool IsBarellOpenedByJoint
		{
			[Token(Token = "0x6003453")]
			[Address(RVA = "0xCCC8D8", Offset = "0xCCC8D8", VA = "0xCCC8D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003EF")]
		public bool IsAutoCloseAndSpinRunning
		{
			[Token(Token = "0x6003454")]
			[Address(RVA = "0xCCDB00", Offset = "0xCCDB00", VA = "0xCCDB00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003F0")]
		public bool IsBarrelOpened
		{
			[Token(Token = "0x6003455")]
			[Address(RVA = "0xCCDB10", Offset = "0xCCDB10", VA = "0xCCDB10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003456")]
			[Address(RVA = "0xCCDB18", Offset = "0xCCDB18", VA = "0xCCDB18")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F1")]
		public bool CanHandSpin
		{
			[Token(Token = "0x6003457")]
			[Address(RVA = "0xCCDBB0", Offset = "0xCCDBB0", VA = "0xCCDBB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003458")]
			[Address(RVA = "0xCCDBB8", Offset = "0xCCDBB8", VA = "0xCCDBB8")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F2")]
		public bool CanOpenBarrel
		{
			[Token(Token = "0x6003459")]
			[Address(RVA = "0xCCDC50", Offset = "0xCCDC50", VA = "0xCCDC50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600345A")]
			[Address(RVA = "0xCCDC58", Offset = "0xCCDC58", VA = "0xCCDC58")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F3")]
		public bool GunSpinned
		{
			[Token(Token = "0x600345B")]
			[Address(RVA = "0xCCDCF0", Offset = "0xCCDCF0", VA = "0xCCDCF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600345C")]
			[Address(RVA = "0xCCDCF8", Offset = "0xCCDCF8", VA = "0xCCDCF8")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F4")]
		public bool IsGunCharged
		{
			[Token(Token = "0x600345D")]
			[Address(RVA = "0xCCDD88", Offset = "0xCCDD88", VA = "0xCCDD88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600345E")]
			[Address(RVA = "0xCCDD90", Offset = "0xCCDD90", VA = "0xCCDD90")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F5")]
		public bool InUse
		{
			[Token(Token = "0x600345F")]
			[Address(RVA = "0xCCDE30", Offset = "0xCCDE30", VA = "0xCCDE30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003460")]
			[Address(RVA = "0xCCDE38", Offset = "0xCCDE38", VA = "0xCCDE38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003F6")]
		public bool InHand
		{
			[Token(Token = "0x6003468")]
			[Address(RVA = "0xCCE660", Offset = "0xCCE660", VA = "0xCCE660")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003469")]
			[Address(RVA = "0xCCE668", Offset = "0xCCE668", VA = "0xCCE668")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003F7")]
		public bool SecondBulletInserted
		{
			[Token(Token = "0x6003476")]
			[Address(RVA = "0xCCFEAC", Offset = "0xCCFEAC", VA = "0xCCFEAC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003477")]
			[Address(RVA = "0xCCFEB4", Offset = "0xCCFEB4", VA = "0xCCFEB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x14000119")]
		public event Action OnGrab
		{
			[Token(Token = "0x6003463")]
			[Address(RVA = "0xCCE100", Offset = "0xCCE100", VA = "0xCCE100")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003464")]
			[Address(RVA = "0xCCE1A0", Offset = "0xCCE1A0", VA = "0xCCE1A0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400011A")]
		public event Action OnUngrab
		{
			[Token(Token = "0x6003465")]
			[Address(RVA = "0xCCE240", Offset = "0xCCE240", VA = "0xCCE240")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003466")]
			[Address(RVA = "0xCCE2E0", Offset = "0xCCE2E0", VA = "0xCCE2E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003461")]
		[Address(RVA = "0xCCDE44", Offset = "0xCCDE44", VA = "0xCCDE44", Slot = "9")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6003462")]
		[Address(RVA = "0xCCDF24", Offset = "0xCCDF24", VA = "0xCCDF24")]
		private void Start()
		{
		}

		[Token(Token = "0x6003467")]
		[Address(RVA = "0xCCE380", Offset = "0xCCE380", VA = "0xCCE380")]
		private void Update()
		{
		}

		[Token(Token = "0x600346A")]
		[Address(RVA = "0xCCE674", Offset = "0xCCE674", VA = "0xCCE674", Slot = "14")]
		public override void HoverByHand(bool hovered)
		{
		}

		[Token(Token = "0x600346B")]
		[Address(RVA = "0xCCE85C", Offset = "0xCCE85C", VA = "0xCCE85C", Slot = "10")]
		public override void PickUp(PickUpController controller)
		{
		}

		[Token(Token = "0x600346C")]
		[Address(RVA = "0xCCE96C", Offset = "0xCCE96C", VA = "0xCCE96C", Slot = "13")]
		public override void UnPick()
		{
		}

		[Token(Token = "0x600346D")]
		[Address(RVA = "0xCCF004", Offset = "0xCCF004", VA = "0xCCF004")]
		private void MainPistol_InteractableObjectUngrabbed()
		{
		}

		[Token(Token = "0x600346E")]
		[Address(RVA = "0xCCF154", Offset = "0xCCF154", VA = "0xCCF154", Slot = "11")]
		public override void OnPickUpLogic()
		{
		}

		[Token(Token = "0x600346F")]
		[Address(RVA = "0xCCF340", Offset = "0xCCF340", VA = "0xCCF340")]
		private void MainPistol_InteractableObjectGrabbed()
		{
		}

		[Token(Token = "0x6003470")]
		[Address(RVA = "0xCCF3A4", Offset = "0xCCF3A4", VA = "0xCCF3A4")]
		public void SetUser(Photon.Realtime.Player player)
		{
		}

		[Token(Token = "0x6003471")]
		[Address(RVA = "0xCCF4D8", Offset = "0xCCF4D8", VA = "0xCCF4D8")]
		public void SetPistolHolder(AbstractPlayer player)
		{
		}

		[Token(Token = "0x6003472")]
		[Address(RVA = "0xCCF580", Offset = "0xCCF580", VA = "0xCCF580")]
		[IteratorStateMachine(typeof(<StartResetingRotation>d__77))]
		private IEnumerator StartResetingRotation()
		{
			return null;
		}

		[Token(Token = "0x6003473")]
		[Address(RVA = "0xCCF61C", Offset = "0xCCF61C", VA = "0xCCF61C")]
		[PunRPC]
		private void RPC_PlayerUngrabbedPistol()
		{
		}

		[Token(Token = "0x6003474")]
		[Address(RVA = "0xCCF81C", Offset = "0xCCF81C", VA = "0xCCF81C")]
		public void NPC_UngrabbPistol()
		{
		}

		[Token(Token = "0x6003475")]
		[Address(RVA = "0xCCFB98", Offset = "0xCCFB98", VA = "0xCCFB98")]
		[PunRPC]
		private void RPC_DropPistol()
		{
		}

		[Token(Token = "0x6003478")]
		[Address(RVA = "0xCCFEC0", Offset = "0xCCFEC0", VA = "0xCCFEC0")]
		public void InsertSecondBulletStart()
		{
		}

		[Token(Token = "0x6003479")]
		[Address(RVA = "0xCCFFA4", Offset = "0xCCFFA4", VA = "0xCCFFA4")]
		public void InsertSecondBulletStop()
		{
		}

		[Token(Token = "0x600347A")]
		[Address(RVA = "0xCD0054", Offset = "0xCD0054", VA = "0xCD0054")]
		[PunRPC]
		private void RPC_InsertSecondBulletStart()
		{
		}

		[Token(Token = "0x600347B")]
		[Address(RVA = "0xCD0068", Offset = "0xCD0068", VA = "0xCD0068")]
		[PunRPC]
		private void RPC_InsertSecondBulletStop()
		{
		}

		[Token(Token = "0x600347C")]
		[Address(RVA = "0xCD007C", Offset = "0xCD007C", VA = "0xCD007C")]
		[IteratorStateMachine(typeof(<InsertSecondBulletNumerator>d__93))]
		private IEnumerator InsertSecondBulletNumerator()
		{
			return null;
		}

		[Token(Token = "0x600347D")]
		[Address(RVA = "0xCD0118", Offset = "0xCD0118", VA = "0xCD0118")]
		private void OnBarrelClosed()
		{
		}

		[Token(Token = "0x600347E")]
		[Address(RVA = "0xCD0238", Offset = "0xCD0238", VA = "0xCD0238")]
		public void GiveAccessToHandSpin()
		{
		}

		[Token(Token = "0x600347F")]
		[Address(RVA = "0xCCD6F4", Offset = "0xCCD6F4", VA = "0xCCD6F4")]
		public void ChargePistol(Vector3 bulletHoleLocalPosition)
		{
		}

		[Token(Token = "0x6003480")]
		[Address(RVA = "0xCD03EC", Offset = "0xCD03EC", VA = "0xCD03EC")]
		[PunRPC]
		private void RPC_ChargePistol(Vector3 localBulletPosition)
		{
		}

		[Token(Token = "0x6003481")]
		[Address(RVA = "0xCD046C", Offset = "0xCD046C", VA = "0xCD046C")]
		[IteratorStateMachine(typeof(<MoveBulletToBarrel>d__98))]
		private IEnumerator MoveBulletToBarrel()
		{
			return null;
		}

		[Token(Token = "0x6003482")]
		[Address(RVA = "0xCD0378", Offset = "0xCD0378", VA = "0xCD0378")]
		[IteratorStateMachine(typeof(<AutoCloseAndSpin>d__99))]
		private IEnumerator AutoCloseAndSpin()
		{
			return null;
		}

		[Token(Token = "0x6003483")]
		[Address(RVA = "0xCCF784", Offset = "0xCCF784", VA = "0xCCF784")]
		[IteratorStateMachine(typeof(<CloseJointBarrel>d__100))]
		private IEnumerator CloseJointBarrel(float time, bool _canOpenBarrel = false)
		{
			return null;
		}

		[Token(Token = "0x6003484")]
		[Address(RVA = "0xCD0558", Offset = "0xCD0558", VA = "0xCD0558")]
		public void PlayerMakedHandSpin(float time)
		{
		}

		[Token(Token = "0x6003485")]
		[Address(RVA = "0xCD0810", Offset = "0xCD0810", VA = "0xCD0810")]
		private void RPC_SpinSound()
		{
		}

		[Token(Token = "0x6003486")]
		[Address(RVA = "0xCD0838", Offset = "0xCD0838", VA = "0xCD0838")]
		[PunRPC]
		public void VisualSpin()
		{
		}

		[Token(Token = "0x6003487")]
		[Address(RVA = "0xCD0960", Offset = "0xCD0960", VA = "0xCD0960")]
		[PunRPC]
		public void OpenBarrel()
		{
		}

		[Token(Token = "0x6003488")]
		[Address(RVA = "0xCD0A24", Offset = "0xCD0A24", VA = "0xCD0A24")]
		[PunRPC]
		public void CloseBarrel()
		{
		}

		[Token(Token = "0x6003489")]
		[Address(RVA = "0xCD0AB4", Offset = "0xCD0AB4", VA = "0xCD0AB4")]
		[PunRPC]
		public void ChargeGunByNPC()
		{
		}

		[Token(Token = "0x600348A")]
		[Address(RVA = "0xCD0AC0", Offset = "0xCD0AC0", VA = "0xCD0AC0")]
		[PunRPC]
		private void CheckIsGunCharged(bool isBullet)
		{
		}

		[Token(Token = "0x600348B")]
		[Address(RVA = "0xCD0B54", Offset = "0xCD0B54", VA = "0xCD0B54")]
		public void MakeShot(AbstractPlayer player, bool NPC_itselfShooting = false)
		{
		}

		[Token(Token = "0x600348C")]
		[Address(RVA = "0xCD0CC0", Offset = "0xCD0CC0", VA = "0xCD0CC0")]
		[IteratorStateMachine(typeof(<ShotNumerator>d__110))]
		private IEnumerator ShotNumerator(AbstractPlayer player, bool NPC_itselfShooting)
		{
			return null;
		}

		[Token(Token = "0x600348D")]
		[Address(RVA = "0xCD0D78", Offset = "0xCD0D78", VA = "0xCD0D78")]
		private void ShootSaloonNPC(bool isBullet)
		{
		}

		[Token(Token = "0x600348E")]
		[Address(RVA = "0xCD1114", Offset = "0xCD1114", VA = "0xCD1114")]
		[PunRPC]
		private void ShotSFX(bool isBullet)
		{
		}

		[Token(Token = "0x600348F")]
		[Address(RVA = "0xCD1150", Offset = "0xCD1150", VA = "0xCD1150")]
		[PunRPC]
		private void ShotVFX(bool isBullet)
		{
		}

		[Token(Token = "0x6003490")]
		[Address(RVA = "0xCD11F0", Offset = "0xCD11F0", VA = "0xCD11F0")]
		private void FixFlag()
		{
		}

		[Token(Token = "0x6003491")]
		[Address(RVA = "0xCD1244", Offset = "0xCD1244", VA = "0xCD1244")]
		[PunRPC]
		private void OnShotEvent()
		{
		}

		[Token(Token = "0x6003492")]
		[Address(RVA = "0xCD1258", Offset = "0xCD1258", VA = "0xCD1258")]
		[PunRPC]
		private void RPC_ShotAnim(bool isShotWas)
		{
		}

		[Token(Token = "0x6003493")]
		[Address(RVA = "0xCD126C", Offset = "0xCD126C", VA = "0xCD126C")]
		[PunRPC]
		private void RPC_ShotInHand(bool isBullet)
		{
		}

		[Token(Token = "0x6003494")]
		[Address(RVA = "0xCD1294", Offset = "0xCD1294", VA = "0xCD1294")]
		[PunRPC]
		private void SavePointDropFrom(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6003495")]
		[Address(RVA = "0xCD12B4", Offset = "0xCD12B4", VA = "0xCD12B4")]
		[PunRPC]
		private void SyncPistolState(byte[] arr)
		{
		}

		[Token(Token = "0x6003496")]
		[Address(RVA = "0xCD157C", Offset = "0xCD157C", VA = "0xCD157C")]
		public MainPistol()
		{
		}
	}
	[Token(Token = "0x200084F")]
	public class MainPistolMoving : MonoBehaviour
	{
		[Token(Token = "0x2000850")]
		[CompilerGenerated]
		private sealed class <DelayMovePistolInCenter>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float t;

			[Token(Token = "0x4002B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MainPistolMoving <>4__this;

			[Token(Token = "0x17000406")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034D8")]
				[Address(RVA = "0xCD3B00", Offset = "0xCD3B00", VA = "0xCD3B00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000407")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034DA")]
				[Address(RVA = "0xCD3B48", Offset = "0xCD3B48", VA = "0xCD3B48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034D5")]
			[Address(RVA = "0xCD3948", Offset = "0xCD3948", VA = "0xCD3948")]
			[DebuggerHidden]
			public <DelayMovePistolInCenter>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60034D6")]
			[Address(RVA = "0xCD3A44", Offset = "0xCD3A44", VA = "0xCD3A44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034D7")]
			[Address(RVA = "0xCD3A48", Offset = "0xCD3A48", VA = "0xCD3A48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034D9")]
			[Address(RVA = "0xCD3B08", Offset = "0xCD3B08", VA = "0xCD3B08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000851")]
		[CompilerGenerated]
		private sealed class <DelayCheckPistolPositionNumerator>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainPistolMoving <>4__this;

			[Token(Token = "0x17000408")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60034DE")]
				[Address(RVA = "0xCD3CE8", Offset = "0xCD3CE8", VA = "0xCD3CE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000409")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60034E0")]
				[Address(RVA = "0xCD3D30", Offset = "0xCD3D30", VA = "0xCD3D30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60034DB")]
			[Address(RVA = "0xCD3A0C", Offset = "0xCD3A0C", VA = "0xCD3A0C")]
			[DebuggerHidden]
			public <DelayCheckPistolPositionNumerator>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x60034DC")]
			[Address(RVA = "0xCD3B50", Offset = "0xCD3B50", VA = "0xCD3B50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60034DD")]
			[Address(RVA = "0xCD3B54", Offset = "0xCD3B54", VA = "0xCD3B54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60034DF")]
			[Address(RVA = "0xCD3CF0", Offset = "0xCD3CF0", VA = "0xCD3CF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float speed;

		[Token(Token = "0x4002B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonView photonView;

		[Token(Token = "0x4002B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 startMarker;

		[Token(Token = "0x4002B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 endMarker;

		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float startTime;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float journeyLength;

		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine movePistolInCenterAfterSeconds;

		[Token(Token = "0x4002B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine checkPistol;

		[Token(Token = "0x17000404")]
		public bool IsPistolMoving
		{
			[Token(Token = "0x60034C1")]
			[Address(RVA = "0xCD37D0", Offset = "0xCD37D0", VA = "0xCD37D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034C2")]
			[Address(RVA = "0xCD37D8", Offset = "0xCD37D8", VA = "0xCD37D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000405")]
		public bool PistolOnCenterOfTable
		{
			[Token(Token = "0x60034C3")]
			[Address(RVA = "0xCD37E4", Offset = "0xCD37E4", VA = "0xCD37E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034C4")]
			[Address(RVA = "0xCD37EC", Offset = "0xCD37EC", VA = "0xCD37EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60034C5")]
		[Address(RVA = "0xCD37F8", Offset = "0xCD37F8", VA = "0xCD37F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034C6")]
		[Address(RVA = "0xCD3850", Offset = "0xCD3850", VA = "0xCD3850")]
		private void Start()
		{
		}

		[Token(Token = "0x60034C7")]
		[Address(RVA = "0xCD3858", Offset = "0xCD3858", VA = "0xCD3858")]
		private void Update()
		{
		}

		[Token(Token = "0x60034C8")]
		[Address(RVA = "0xCCF9CC", Offset = "0xCCF9CC", VA = "0xCCF9CC")]
		public void SetPistolRotation()
		{
		}

		[Token(Token = "0x60034C9")]
		[Address(RVA = "0xCCA29C", Offset = "0xCCA29C", VA = "0xCCA29C")]
		[PunRPC]
		public void PutPistolOnTableCenter()
		{
		}

		[Token(Token = "0x60034CA")]
		[Address(RVA = "0xCD385C", Offset = "0xCD385C", VA = "0xCD385C")]
		private void PistolSync(bool enable)
		{
		}

		[Token(Token = "0x60034CB")]
		[Address(RVA = "0xCCF290", Offset = "0xCCF290", VA = "0xCCF290")]
		public void CheckMoving()
		{
		}

		[Token(Token = "0x60034CC")]
		[Address(RVA = "0xCD3860", Offset = "0xCD3860", VA = "0xCD3860")]
		[PunRPC]
		private void MovePistolDelayed(float time)
		{
		}

		[Token(Token = "0x60034CD")]
		[Address(RVA = "0xCD38C4", Offset = "0xCD38C4", VA = "0xCD38C4")]
		[IteratorStateMachine(typeof(<DelayMovePistolInCenter>d__23))]
		private IEnumerator DelayMovePistolInCenter(float t)
		{
			return null;
		}

		[Token(Token = "0x60034CE")]
		[Address(RVA = "0xCD3970", Offset = "0xCD3970", VA = "0xCD3970")]
		[PunRPC]
		private void StopMoving()
		{
		}

		[Token(Token = "0x60034CF")]
		[Address(RVA = "0xCCF9C0", Offset = "0xCCF9C0", VA = "0xCCF9C0")]
		[PunRPC]
		public void RPC_PistolOnCenterOfTable(bool b)
		{
		}

		[Token(Token = "0x60034D0")]
		[Address(RVA = "0xCCF4C0", Offset = "0xCCF4C0", VA = "0xCCF4C0")]
		public void PistolGrabbed()
		{
		}

		[Token(Token = "0x60034D1")]
		[Address(RVA = "0xCCF124", Offset = "0xCCF124", VA = "0xCCF124")]
		public void DelayCheckPistolPosition()
		{
		}

		[Token(Token = "0x60034D2")]
		[Address(RVA = "0xCCF390", Offset = "0xCCF390", VA = "0xCCF390")]
		public void DelayCheckPistolPositionStop()
		{
		}

		[Token(Token = "0x60034D3")]
		[Address(RVA = "0xCD3998", Offset = "0xCD3998", VA = "0xCD3998")]
		[IteratorStateMachine(typeof(<DelayCheckPistolPositionNumerator>d__30))]
		private IEnumerator DelayCheckPistolPositionNumerator()
		{
			return null;
		}

		[Token(Token = "0x60034D4")]
		[Address(RVA = "0xCD3A34", Offset = "0xCD3A34", VA = "0xCD3A34")]
		public MainPistolMoving()
		{
		}
	}
	[Token(Token = "0x2000852")]
	public class MainPistolPointer : MonoBehaviour
	{
		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform bulletSpawnPoint;

		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayerUI_LookAtCamera pistolUI;

		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image hintImage;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text hintText;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text plusText;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text minusText;

		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject textPanel;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MainPistol mainPistol;

		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PhotonView photonView;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool aimAtMyself;

		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AbstractPlayer aimingSelfPlayer;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform lastAimedTarget;

		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine hintsCoroutine;

		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool hintsDelayRunning;

		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Head aimedWaitress;

		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Head aimedBarmen;

		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Head aimedPianist;

		[Token(Token = "0x60034E1")]
		[Address(RVA = "0xCD3D38", Offset = "0xCD3D38", VA = "0xCD3D38")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034E2")]
		[Address(RVA = "0xCD3DC8", Offset = "0xCD3DC8", VA = "0xCD3DC8")]
		private void Start()
		{
		}

		[Token(Token = "0x60034E3")]
		[Address(RVA = "0xCD3EDC", Offset = "0xCD3EDC", VA = "0xCD3EDC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60034E4")]
		[Address(RVA = "0xCD3F20", Offset = "0xCD3F20", VA = "0xCD3F20")]
		private void OnShoot()
		{
		}

		[Token(Token = "0x60034E5")]
		[Address(RVA = "0xCD4000", Offset = "0xCD4000", VA = "0xCD4000")]
		private void MainPistolPointer_InteractableObjectUngrabbed()
		{
		}

		[Token(Token = "0x60034E6")]
		[Address(RVA = "0xCD467C", Offset = "0xCD467C", VA = "0xCD467C")]
		private void Update()
		{
		}

		[Token(Token = "0x60034E7")]
		[Address(RVA = "0xCD42E8", Offset = "0xCD42E8", VA = "0xCD42E8")]
		private void SaloonStaffAiming(RaycastHit hit)
		{
		}

		[Token(Token = "0x60034E8")]
		[Address(RVA = "0xCD5B2C", Offset = "0xCD5B2C", VA = "0xCD5B2C")]
		public MainPistolPointer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000853")]
	public class PistolSoundPool
	{
		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource audioSource;

		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Звук выстрела")]
		public AudioClip shotSFX;

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Звук щелчка при холостом выстреле")]
		public AudioClip dryShotSFX;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Звук прокрутки барабана")]
		public AudioClip spinSFX;

		[Token(Token = "0x60034E9")]
		[Address(RVA = "0xCD5B34", Offset = "0xCD5B34", VA = "0xCD5B34")]
		public PistolSoundPool()
		{
		}
	}
	[Token(Token = "0x2000854")]
	public class Pistol : MonoBehaviour
	{
		[Token(Token = "0x2000855")]
		[CompilerGenerated]
		private sealed class <InteractableSetterNumerator>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameState gameState;

			[Token(Token = "0x4002B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Pistol <>4__this;

			[Token(Token = "0x4002B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__2;

			[Token(Token = "0x1700040F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600352E")]
				[Address(RVA = "0xCD9054", Offset = "0xCD9054", VA = "0xCD9054", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000410")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003530")]
				[Address(RVA = "0xCD909C", Offset = "0xCD909C", VA = "0xCD909C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600352B")]
			[Address(RVA = "0xCD6014", Offset = "0xCD6014", VA = "0xCD6014")]
			[DebuggerHidden]
			public <InteractableSetterNumerator>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600352C")]
			[Address(RVA = "0xCD8DC8", Offset = "0xCD8DC8", VA = "0xCD8DC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600352D")]
			[Address(RVA = "0xCD8DCC", Offset = "0xCD8DCC", VA = "0xCD8DCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600352F")]
			[Address(RVA = "0xCD905C", Offset = "0xCD905C", VA = "0xCD905C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000856")]
		[CompilerGenerated]
		private sealed class <DelayHints>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pistol <>4__this;

			[Token(Token = "0x17000411")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003534")]
				[Address(RVA = "0xCD91A8", Offset = "0xCD91A8", VA = "0xCD91A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000412")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003536")]
				[Address(RVA = "0xCD91F0", Offset = "0xCD91F0", VA = "0xCD91F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003531")]
			[Address(RVA = "0xCD60BC", Offset = "0xCD60BC", VA = "0xCD60BC")]
			[DebuggerHidden]
			public <DelayHints>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6003532")]
			[Address(RVA = "0xCD90A4", Offset = "0xCD90A4", VA = "0xCD90A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003533")]
			[Address(RVA = "0xCD90A8", Offset = "0xCD90A8", VA = "0xCD90A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003535")]
			[Address(RVA = "0xCD91B0", Offset = "0xCD91B0", VA = "0xCD91B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000857")]
		[CompilerGenerated]
		private sealed class <MovePistol>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pistol <>4__this;

			[Token(Token = "0x17000413")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600353A")]
				[Address(RVA = "0xCD9418", Offset = "0xCD9418", VA = "0xCD9418", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000414")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600353C")]
				[Address(RVA = "0xCD9460", Offset = "0xCD9460", VA = "0xCD9460", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003537")]
			[Address(RVA = "0xCD707C", Offset = "0xCD707C", VA = "0xCD707C")]
			[DebuggerHidden]
			public <MovePistol>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6003538")]
			[Address(RVA = "0xCD91F8", Offset = "0xCD91F8", VA = "0xCD91F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003539")]
			[Address(RVA = "0xCD91FC", Offset = "0xCD91FC", VA = "0xCD91FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600353B")]
			[Address(RVA = "0xCD9420", Offset = "0xCD9420", VA = "0xCD9420", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000858")]
		[CompilerGenerated]
		private sealed class <BulletMovingToBurrel>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pistol <>4__this;

			[Token(Token = "0x4002B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <length>5__2;

			[Token(Token = "0x4002B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <ticks>5__3;

			[Token(Token = "0x4002B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <oldBulletPostion>5__4;

			[Token(Token = "0x4002B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 <newBulletPosition>5__5;

			[Token(Token = "0x4002B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__6;

			[Token(Token = "0x17000415")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003540")]
				[Address(RVA = "0xCD95A8", Offset = "0xCD95A8", VA = "0xCD95A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000416")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003542")]
				[Address(RVA = "0xCD95F0", Offset = "0xCD95F0", VA = "0xCD95F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600353D")]
			[Address(RVA = "0xCD7528", Offset = "0xCD7528", VA = "0xCD7528")]
			[DebuggerHidden]
			public <BulletMovingToBurrel>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x600353E")]
			[Address(RVA = "0xCD9468", Offset = "0xCD9468", VA = "0xCD9468", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600353F")]
			[Address(RVA = "0xCD946C", Offset = "0xCD946C", VA = "0xCD946C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003541")]
			[Address(RVA = "0xCD95B0", Offset = "0xCD95B0", VA = "0xCD95B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000859")]
		[CompilerGenerated]
		private sealed class <DisableLocalBullet>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pistol <>4__this;

			[Token(Token = "0x4002BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 oldBulletPosition;

			[Token(Token = "0x17000417")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003546")]
				[Address(RVA = "0xCD96DC", Offset = "0xCD96DC", VA = "0xCD96DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000418")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003548")]
				[Address(RVA = "0xCD9724", Offset = "0xCD9724", VA = "0xCD9724", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003543")]
			[Address(RVA = "0xCD75E8", Offset = "0xCD75E8", VA = "0xCD75E8")]
			[DebuggerHidden]
			public <DisableLocalBullet>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6003544")]
			[Address(RVA = "0xCD95F8", Offset = "0xCD95F8", VA = "0xCD95F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003545")]
			[Address(RVA = "0xCD95FC", Offset = "0xCD95FC", VA = "0xCD95FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003547")]
			[Address(RVA = "0xCD96E4", Offset = "0xCD96E4", VA = "0xCD96E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200085A")]
		[CompilerGenerated]
		private sealed class <WaitForHandSpin>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pistol <>4__this;

			[Token(Token = "0x17000419")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600354C")]
				[Address(RVA = "0xCD98C4", Offset = "0xCD98C4", VA = "0xCD98C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700041A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600354E")]
				[Address(RVA = "0xCD990C", Offset = "0xCD990C", VA = "0xCD990C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003549")]
			[Address(RVA = "0xCD78D8", Offset = "0xCD78D8", VA = "0xCD78D8")]
			[DebuggerHidden]
			public <WaitForHandSpin>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x600354A")]
			[Address(RVA = "0xCD972C", Offset = "0xCD972C", VA = "0xCD972C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600354B")]
			[Address(RVA = "0xCD9730", Offset = "0xCD9730", VA = "0xCD9730", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600354D")]
			[Address(RVA = "0xCD98CC", Offset = "0xCD98CC", VA = "0xCD98CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200085B")]
		[CompilerGenerated]
		private sealed class <ShotNumerator>d__73 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AbstractPlayer player;

			[Token(Token = "0x4002BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Pistol <>4__this;

			[Token(Token = "0x4002BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool NPC_itselfShooting;

			[Token(Token = "0x1700041B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003552")]
				[Address(RVA = "0xCDA87C", Offset = "0xCDA87C", VA = "0xCDA87C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700041C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003554")]
				[Address(RVA = "0xCDA8C4", Offset = "0xCDA8C4", VA = "0xCDA8C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600354F")]
			[Address(RVA = "0xCD807C", Offset = "0xCD807C", VA = "0xCD807C")]
			[DebuggerHidden]
			public <ShotNumerator>d__73(int <>1__state)
			{
			}

			[Token(Token = "0x6003550")]
			[Address(RVA = "0xCD9914", Offset = "0xCD9914", VA = "0xCD9914", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003551")]
			[Address(RVA = "0xCD9918", Offset = "0xCD9918", VA = "0xCD9918", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003553")]
			[Address(RVA = "0xCDA884", Offset = "0xCDA884", VA = "0xCDA884", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200085C")]
		[CompilerGenerated]
		private sealed class <DelayMovePistolOnTable>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4002BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Pistol <>4__this;

			[Token(Token = "0x1700041D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003558")]
				[Address(RVA = "0xCDB9B4", Offset = "0xCDB9B4", VA = "0xCDB9B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700041E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600355A")]
				[Address(RVA = "0xCDB9FC", Offset = "0xCDB9FC", VA = "0xCDB9FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003555")]
			[Address(RVA = "0xCDB8CC", Offset = "0xCDB8CC", VA = "0xCDB8CC")]
			[DebuggerHidden]
			public <DelayMovePistolOnTable>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6003556")]
			[Address(RVA = "0xCDB8F4", Offset = "0xCDB8F4", VA = "0xCDB8F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003557")]
			[Address(RVA = "0xCDB8F8", Offset = "0xCDB8F8", VA = "0xCDB8F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003559")]
			[Address(RVA = "0xCDB9BC", Offset = "0xCDB9BC", VA = "0xCDB9BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Pistol Instance;

		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Transform bulletSpawnPoint;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem shotVFX;

		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Animator shotFlag;

		[Token(Token = "0x4002B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PistolSoundPool pistolSoundPool;

		[Token(Token = "0x4002B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject localBullet;

		[Token(Token = "0x4002B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4002B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerUI_LookAtCamera pistolUI;

		[Token(Token = "0x4002B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private ShootOnMesh shootOnMesh;

		[Token(Token = "0x4002B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Sprite no_bullets_sprite;

		[Token(Token = "0x4002B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Sprite no_coins_sprite;

		[Token(Token = "0x4002B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine interactSetterRoutine;

		[Token(Token = "0x4002B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform lastAimedTarget;

		[Token(Token = "0x4002B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Coroutine hintsCoroutine;

		[Token(Token = "0x4002B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool hintsDelayRunning;

		[Token(Token = "0x4002B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool aimAtMyself;

		[Token(Token = "0x4002B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AbstractPlayer aimingSelfPlayer;

		[Token(Token = "0x4002B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Coroutine movingNumerator;

		[Token(Token = "0x4002B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float startTime;

		[Token(Token = "0x4002B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float journeyLength;

		[Token(Token = "0x4002B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float speed;

		[Token(Token = "0x4002B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 startMarker;

		[Token(Token = "0x4002B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool canSpinByHand;

		[Token(Token = "0x4002B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Coroutine waitForSpinByHand;

		[Token(Token = "0x4002B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Coroutine delayMoveOnTable;

		[Token(Token = "0x4002B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool isBulletWas;

		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 pointDropFromPosition;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Quaternion pointDropFromRotation;

		[Token(Token = "0x1700040A")]
		public bool PistolOnTable
		{
			[Token(Token = "0x60034EA")]
			[Address(RVA = "0xCD5B3C", Offset = "0xCD5B3C", VA = "0xCD5B3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034EB")]
			[Address(RVA = "0xCD5B44", Offset = "0xCD5B44", VA = "0xCD5B44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700040B")]
		public bool IsGunCharged
		{
			[Token(Token = "0x60034EC")]
			[Address(RVA = "0xCD5B50", Offset = "0xCD5B50", VA = "0xCD5B50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034ED")]
			[Address(RVA = "0xCD5B58", Offset = "0xCD5B58", VA = "0xCD5B58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700040C")]
		public bool inUse
		{
			[Token(Token = "0x60034EE")]
			[Address(RVA = "0xCD5B64", Offset = "0xCD5B64", VA = "0xCD5B64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034EF")]
			[Address(RVA = "0xCD5B6C", Offset = "0xCD5B6C", VA = "0xCD5B6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700040D")]
		public bool IsBarrelOpen
		{
			[Token(Token = "0x60034F0")]
			[Address(RVA = "0xCD5B78", Offset = "0xCD5B78", VA = "0xCD5B78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034F1")]
			[Address(RVA = "0xCD5B80", Offset = "0xCD5B80", VA = "0xCD5B80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700040E")]
		public bool moving
		{
			[Token(Token = "0x60034FE")]
			[Address(RVA = "0xCD70A4", Offset = "0xCD70A4", VA = "0xCD70A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034FF")]
			[Address(RVA = "0xCD70AC", Offset = "0xCD70AC", VA = "0xCD70AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60034F2")]
		[Address(RVA = "0xCD5B8C", Offset = "0xCD5B8C", VA = "0xCD5B8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034F3")]
		[Address(RVA = "0xCD5C40", Offset = "0xCD5C40", VA = "0xCD5C40")]
		private void Reset()
		{
		}

		[Token(Token = "0x60034F4")]
		[Address(RVA = "0xCD5D2C", Offset = "0xCD5D2C", VA = "0xCD5D2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60034F5")]
		[Address(RVA = "0xCD5E28", Offset = "0xCD5E28", VA = "0xCD5E28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60034F6")]
		[Address(RVA = "0xCD5F24", Offset = "0xCD5F24", VA = "0xCD5F24")]
		public void InteractableSetter(GameState gameState)
		{
		}

		[Token(Token = "0x60034F7")]
		[Address(RVA = "0xCD5F84", Offset = "0xCD5F84", VA = "0xCD5F84")]
		[IteratorStateMachine(typeof(<InteractableSetterNumerator>d__33))]
		private IEnumerator InteractableSetterNumerator(GameState gameState)
		{
			return null;
		}

		[Token(Token = "0x60034F8")]
		[Address(RVA = "0xCD603C", Offset = "0xCD603C", VA = "0xCD603C")]
		[PunRPC]
		private void RPC_EndPistolMoving()
		{
		}

		[Token(Token = "0x60034F9")]
		[Address(RVA = "0xCD6048", Offset = "0xCD6048", VA = "0xCD6048")]
		[IteratorStateMachine(typeof(<DelayHints>d__38))]
		private IEnumerator DelayHints()
		{
			return null;
		}

		[Token(Token = "0x60034FA")]
		[Address(RVA = "0xCD60E4", Offset = "0xCD60E4", VA = "0xCD60E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60034FB")]
		[Address(RVA = "0xCD6E50", Offset = "0xCD6E50", VA = "0xCD6E50")]
		public void MovePistolOnTable()
		{
		}

		[Token(Token = "0x60034FC")]
		[Address(RVA = "0xCD6F58", Offset = "0xCD6F58", VA = "0xCD6F58")]
		public void StopMoving()
		{
		}

		[Token(Token = "0x60034FD")]
		[Address(RVA = "0xCD7008", Offset = "0xCD7008", VA = "0xCD7008")]
		[IteratorStateMachine(typeof(<MovePistol>d__44))]
		private IEnumerator MovePistol()
		{
			return null;
		}

		[Token(Token = "0x6003500")]
		[Address(RVA = "0xCD70B8", Offset = "0xCD70B8", VA = "0xCD70B8")]
		public void OpenBarrelByHandRotation()
		{
		}

		[Token(Token = "0x6003501")]
		[Address(RVA = "0xCD7168", Offset = "0xCD7168", VA = "0xCD7168")]
		public void CloseBarrelByHandRotation()
		{
		}

		[Token(Token = "0x6003502")]
		[Address(RVA = "0xCD7218", Offset = "0xCD7218", VA = "0xCD7218")]
		[PunRPC]
		private void RPC_OpenBarrel()
		{
		}

		[Token(Token = "0x6003503")]
		[Address(RVA = "0xCD72CC", Offset = "0xCD72CC", VA = "0xCD72CC")]
		[PunRPC]
		private void RPC_CloseBarrel()
		{
		}

		[Token(Token = "0x6003504")]
		[Address(RVA = "0xCD7374", Offset = "0xCD7374", VA = "0xCD7374")]
		[PunRPC]
		private void RPC_PistolUncharged()
		{
		}

		[Token(Token = "0x6003505")]
		[Address(RVA = "0xCD737C", Offset = "0xCD737C", VA = "0xCD737C")]
		public void ChargePistol(Vector3 bulletHoleLocalPosition)
		{
		}

		[Token(Token = "0x6003506")]
		[Address(RVA = "0xCD74B4", Offset = "0xCD74B4", VA = "0xCD74B4")]
		[IteratorStateMachine(typeof(<BulletMovingToBurrel>d__60))]
		private IEnumerator BulletMovingToBurrel()
		{
			return null;
		}

		[Token(Token = "0x6003507")]
		[Address(RVA = "0xCD7550", Offset = "0xCD7550", VA = "0xCD7550")]
		[IteratorStateMachine(typeof(<DisableLocalBullet>d__61))]
		private IEnumerator DisableLocalBullet(Vector3 oldBulletPosition)
		{
			return null;
		}

		[Token(Token = "0x6003508")]
		[Address(RVA = "0xCD7610", Offset = "0xCD7610", VA = "0xCD7610")]
		private void HandSpin(float HandSpeed)
		{
		}

		[Token(Token = "0x6003509")]
		[Address(RVA = "0xCD782C", Offset = "0xCD782C", VA = "0xCD782C")]
		public void HandSpinPistol()
		{
		}

		[Token(Token = "0x600350A")]
		[Address(RVA = "0xCD7864", Offset = "0xCD7864", VA = "0xCD7864")]
		[IteratorStateMachine(typeof(<WaitForHandSpin>d__67))]
		private IEnumerator WaitForHandSpin()
		{
			return null;
		}

		[Token(Token = "0x600350B")]
		[Address(RVA = "0xCD7900", Offset = "0xCD7900", VA = "0xCD7900")]
		public void Reload()
		{
		}

		[Token(Token = "0x600350C")]
		[Address(RVA = "0xCD795C", Offset = "0xCD795C", VA = "0xCD795C")]
		public void PistolSpin()
		{
		}

		[Token(Token = "0x600350D")]
		[Address(RVA = "0xCD7A68", Offset = "0xCD7A68", VA = "0xCD7A68")]
		public void NPC_Reload()
		{
		}

		[Token(Token = "0x600350E")]
		[Address(RVA = "0xCD7B14", Offset = "0xCD7B14", VA = "0xCD7B14")]
		public void SetUser(Photon.Realtime.Player player)
		{
		}

		[Token(Token = "0x600350F")]
		[Address(RVA = "0xCD7C44", Offset = "0xCD7C44", VA = "0xCD7C44")]
		private void ShootSaloonNPC(bool isBullet)
		{
		}

		[Token(Token = "0x6003510")]
		[Address(RVA = "0xCD7FE0", Offset = "0xCD7FE0", VA = "0xCD7FE0")]
		[IteratorStateMachine(typeof(<ShotNumerator>d__73))]
		private IEnumerator ShotNumerator(AbstractPlayer player, bool NPC_itselfShooting = false)
		{
			return null;
		}

		[Token(Token = "0x6003511")]
		[Address(RVA = "0xCD80A4", Offset = "0xCD80A4", VA = "0xCD80A4")]
		public void Shot(AbstractPlayer player, bool NPCitseldShooting = false)
		{
		}

		[Token(Token = "0x6003512")]
		[Address(RVA = "0xCD8178", Offset = "0xCD8178", VA = "0xCD8178")]
		[IteratorStateMachine(typeof(<DelayMovePistolOnTable>d__75))]
		private IEnumerator DelayMovePistolOnTable(float delay)
		{
			return null;
		}

		[Token(Token = "0x6003513")]
		[Address(RVA = "0xCD81FC", Offset = "0xCD81FC", VA = "0xCD81FC")]
		private void DelayRequestToSync()
		{
		}

		[Token(Token = "0x6003514")]
		[Address(RVA = "0xCD8250", Offset = "0xCD8250", VA = "0xCD8250")]
		public void CallTo_RPC_ShotSFX()
		{
		}

		[Token(Token = "0x6003515")]
		[Address(RVA = "0xCD8358", Offset = "0xCD8358", VA = "0xCD8358")]
		public void DelayPutOnTableNPC()
		{
		}

		[Token(Token = "0x6003516")]
		[Address(RVA = "0xCD8408", Offset = "0xCD8408", VA = "0xCD8408")]
		public void BarellOpened()
		{
		}

		[Token(Token = "0x6003517")]
		[Address(RVA = "0xCD8418", Offset = "0xCD8418", VA = "0xCD8418")]
		public void BarrelClosed()
		{
		}

		[Token(Token = "0x6003518")]
		[Address(RVA = "0xCD8568", Offset = "0xCD8568", VA = "0xCD8568")]
		public void PlayerUngrabbedPistol()
		{
		}

		[Token(Token = "0x6003519")]
		[Address(RVA = "0xCD8618", Offset = "0xCD8618", VA = "0xCD8618")]
		[PunRPC]
		private void RPC_ShotInHand()
		{
		}

		[Token(Token = "0x600351A")]
		[Address(RVA = "0xCD8634", Offset = "0xCD8634", VA = "0xCD8634")]
		[PunRPC]
		private void SavePointDropFrom(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x600351B")]
		[Address(RVA = "0xCD8648", Offset = "0xCD8648", VA = "0xCD8648")]
		[PunRPC]
		private void RPC_DropPistol()
		{
		}

		[Token(Token = "0x600351C")]
		[Address(RVA = "0xCD8754", Offset = "0xCD8754", VA = "0xCD8754")]
		[PunRPC]
		private void RPC_SetInteractAccess()
		{
		}

		[Token(Token = "0x600351D")]
		[Address(RVA = "0xCD8758", Offset = "0xCD8758", VA = "0xCD8758")]
		[PunRPC]
		private void RPC_DoNotReturnPistolOnTable()
		{
		}

		[Token(Token = "0x600351E")]
		[Address(RVA = "0xCD876C", Offset = "0xCD876C", VA = "0xCD876C")]
		[PunRPC]
		private void RPC_PlayerUngrabbedPistol()
		{
		}

		[Token(Token = "0x600351F")]
		[Address(RVA = "0xCD8774", Offset = "0xCD8774", VA = "0xCD8774")]
		[PunRPC]
		private void RPC_StopMoving()
		{
		}

		[Token(Token = "0x6003520")]
		[Address(RVA = "0xCD87B0", Offset = "0xCD87B0", VA = "0xCD87B0")]
		[PunRPC]
		private void RPC_MovePistolOnTable()
		{
		}

		[Token(Token = "0x6003521")]
		[Address(RVA = "0xCD8904", Offset = "0xCD8904", VA = "0xCD8904")]
		[PunRPC]
		private void RPC_ShotAnim(bool isShotWas)
		{
		}

		[Token(Token = "0x6003522")]
		[Address(RVA = "0xCD8984", Offset = "0xCD8984", VA = "0xCD8984")]
		[PunRPC]
		private void CloseOpenBarrel(bool IsBarrelOpen, bool IsGunCharged)
		{
		}

		[Token(Token = "0x6003523")]
		[Address(RVA = "0xCD8988", Offset = "0xCD8988", VA = "0xCD8988")]
		[PunRPC]
		private void StopWaitingForHandSpin()
		{
		}

		[Token(Token = "0x6003524")]
		[Address(RVA = "0xCD89B8", Offset = "0xCD89B8", VA = "0xCD89B8")]
		[PunRPC]
		private void SpinSFX(float time, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003525")]
		[Address(RVA = "0xCD8AA0", Offset = "0xCD8AA0", VA = "0xCD8AA0")]
		[PunRPC]
		public void RPC_SpinSound()
		{
		}

		[Token(Token = "0x6003526")]
		[Address(RVA = "0xCD8AE4", Offset = "0xCD8AE4", VA = "0xCD8AE4")]
		[PunRPC]
		private void RPC_ChargePistol(Vector3 bulletHoleLocalPosition)
		{
		}

		[Token(Token = "0x6003527")]
		[Address(RVA = "0xCD8B78", Offset = "0xCD8B78", VA = "0xCD8B78")]
		[PunRPC]
		private void RPC_PutPistolOnTable()
		{
		}

		[Token(Token = "0x6003528")]
		[Address(RVA = "0xCD8C40", Offset = "0xCD8C40", VA = "0xCD8C40")]
		[PunRPC]
		private void RPC_ShotSFX(bool isBulet)
		{
		}

		[Token(Token = "0x6003529")]
		[Address(RVA = "0xCD8D20", Offset = "0xCD8D20", VA = "0xCD8D20")]
		[PunRPC]
		private void RPC_PrepareToCharge()
		{
		}

		[Token(Token = "0x600352A")]
		[Address(RVA = "0xCD8D28", Offset = "0xCD8D28", VA = "0xCD8D28")]
		public Pistol()
		{
		}
	}
	[Token(Token = "0x200085D")]
	public delegate void HandRelodad(float handSpeed);
	[Token(Token = "0x200085E")]
	public class PistolBarrel : MonoBehaviour
	{
		[Token(Token = "0x200085F")]
		[CompilerGenerated]
		private sealed class <OpenBarrel>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform tr;

			[Token(Token = "0x4002BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PistolBarrel <>4__this;

			[Token(Token = "0x4002BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startTime>5__2;

			[Token(Token = "0x1700041F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600356B")]
				[Address(RVA = "0xCDC558", Offset = "0xCDC558", VA = "0xCDC558", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000420")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600356D")]
				[Address(RVA = "0xCDC5A0", Offset = "0xCDC5A0", VA = "0xCDC5A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003568")]
			[Address(RVA = "0xCDC43C", Offset = "0xCDC43C", VA = "0xCDC43C")]
			[DebuggerHidden]
			public <OpenBarrel>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6003569")]
			[Address(RVA = "0xCDC474", Offset = "0xCDC474", VA = "0xCDC474", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600356A")]
			[Address(RVA = "0xCDC478", Offset = "0xCDC478", VA = "0xCDC478", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600356C")]
			[Address(RVA = "0xCDC560", Offset = "0xCDC560", VA = "0xCDC560", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool countTime;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform pistolRoot;

		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PhotonView photonView;

		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GrabbaleObjects go;

		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private FakeMechanismCreate fake;

		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float val;

		[Token(Token = "0x4002BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Coroutine opener;

		[Token(Token = "0x1400011B")]
		public event HandRelodad OnHandReload
		{
			[Token(Token = "0x600355F")]
			[Address(RVA = "0xCDBB7C", Offset = "0xCDBB7C", VA = "0xCDBB7C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003560")]
			[Address(RVA = "0xCDBC18", Offset = "0xCDBC18", VA = "0xCDBC18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003561")]
		[Address(RVA = "0xCDBCB4", Offset = "0xCDBCB4", VA = "0xCDBCB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003562")]
		[Address(RVA = "0xCDBD38", Offset = "0xCDBD38", VA = "0xCDBD38")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003563")]
		[Address(RVA = "0xCDBFB0", Offset = "0xCDBFB0", VA = "0xCDBFB0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6003564")]
		[Address(RVA = "0xCDC194", Offset = "0xCDC194", VA = "0xCDC194")]
		private void Update()
		{
		}

		[Token(Token = "0x6003565")]
		[Address(RVA = "0xCDC1C8", Offset = "0xCDC1C8", VA = "0xCDC1C8")]
		public void Action()
		{
		}

		[Token(Token = "0x6003566")]
		[Address(RVA = "0xCDC3AC", Offset = "0xCDC3AC", VA = "0xCDC3AC")]
		[IteratorStateMachine(typeof(<OpenBarrel>d__16))]
		public IEnumerator OpenBarrel(Transform tr)
		{
			return null;
		}

		[Token(Token = "0x6003567")]
		[Address(RVA = "0xCDC464", Offset = "0xCDC464", VA = "0xCDC464")]
		public PistolBarrel()
		{
		}
	}
	[Token(Token = "0x2000860")]
	public class PistolBarrelMechanism : MonoBehaviour
	{
		[Token(Token = "0x2000861")]
		[CompilerGenerated]
		private sealed class <WaitForBarrelClose>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PistolBarrelMechanism <>4__this;

			[Token(Token = "0x17000423")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600357A")]
				[Address(RVA = "0xCDCBC0", Offset = "0xCDCBC0", VA = "0xCDCBC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000424")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600357C")]
				[Address(RVA = "0xCDCC08", Offset = "0xCDCC08", VA = "0xCDCC08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003577")]
			[Address(RVA = "0xCDC7D8", Offset = "0xCDC7D8", VA = "0xCDC7D8")]
			[DebuggerHidden]
			public <WaitForBarrelClose>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6003578")]
			[Address(RVA = "0xCDC948", Offset = "0xCDC948", VA = "0xCDC948", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003579")]
			[Address(RVA = "0xCDC94C", Offset = "0xCDC94C", VA = "0xCDC94C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600357B")]
			[Address(RVA = "0xCDCBC8", Offset = "0xCDCBC8", VA = "0xCDCBC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent OnBarrelClosed;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine waitForBarrelClosing;

		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HingeJoint joint;

		[Token(Token = "0x4002BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool resetRotation;

		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PhotonView pv;

		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform folowing;

		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 curRot;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MainPistol pistol;

		[Token(Token = "0x17000421")]
		public bool ResetRotation
		{
			[Token(Token = "0x600356E")]
			[Address(RVA = "0xCDC5A8", Offset = "0xCDC5A8", VA = "0xCDC5A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600356F")]
			[Address(RVA = "0xCDC5B0", Offset = "0xCDC5B0", VA = "0xCDC5B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000422")]
		public Transform Target
		{
			[Token(Token = "0x6003570")]
			[Address(RVA = "0xCDC5BC", Offset = "0xCDC5BC", VA = "0xCDC5BC")]
			set
			{
			}
		}

		[Token(Token = "0x6003571")]
		[Address(RVA = "0xCDC5C4", Offset = "0xCDC5C4", VA = "0xCDC5C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003572")]
		[Address(RVA = "0xCDC6AC", Offset = "0xCDC6AC", VA = "0xCDC6AC")]
		public void WaitForBarrelClosing()
		{
		}

		[Token(Token = "0x6003573")]
		[Address(RVA = "0xCDC764", Offset = "0xCDC764", VA = "0xCDC764")]
		[IteratorStateMachine(typeof(<WaitForBarrelClose>d__15))]
		private IEnumerator WaitForBarrelClose()
		{
			return null;
		}

		[Token(Token = "0x6003574")]
		[Address(RVA = "0xCDC800", Offset = "0xCDC800", VA = "0xCDC800")]
		private void Update()
		{
		}

		[Token(Token = "0x6003575")]
		[Address(RVA = "0xCDC92C", Offset = "0xCDC92C", VA = "0xCDC92C")]
		public PistolBarrelMechanism()
		{
		}
	}
	[Token(Token = "0x2000862")]
	public class PistolNetworkPositions : MonoBehaviour
	{
		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PistolNetworkPosition> pistolNetworkPositions;

		[Token(Token = "0x600357D")]
		[Address(RVA = "0xCDCC10", Offset = "0xCDCC10", VA = "0xCDCC10")]
		public Vector3 GetPosition(PlayerType player)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600357E")]
		[Address(RVA = "0xCDCD04", Offset = "0xCDCD04", VA = "0xCDCD04")]
		public Quaternion GetRotation(PlayerType player)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600357F")]
		[Address(RVA = "0xCDCDF8", Offset = "0xCDCDF8", VA = "0xCDCDF8")]
		public Vector3 EulerAngels(PlayerType player)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003580")]
		[Address(RVA = "0xCDCEEC", Offset = "0xCDCEEC", VA = "0xCDCEEC")]
		[ContextMenu("SaveNetwork position")]
		public void SavePositions()
		{
		}

		[Token(Token = "0x6003581")]
		[Address(RVA = "0xCDD0C8", Offset = "0xCDD0C8", VA = "0xCDD0C8")]
		[ContextMenu("Save Network Euler")]
		public void ToEuler()
		{
		}

		[Token(Token = "0x6003582")]
		[Address(RVA = "0xCDD21C", Offset = "0xCDD21C", VA = "0xCDD21C")]
		public PistolNetworkPositions()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000868")]
	public class PistolNetworkPosition
	{
		[Token(Token = "0x4002BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerType playerType;

		[Token(Token = "0x4002BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 localPostion;

		[Token(Token = "0x4002BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion localRotation;

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 localRotationEuler;

		[Token(Token = "0x600358E")]
		[Address(RVA = "0xCDD37C", Offset = "0xCDD37C", VA = "0xCDD37C")]
		public PistolNetworkPosition()
		{
		}
	}
	[Token(Token = "0x2000869")]
	public class UsingBarrelBySecondHand : VRTK_AxisScaleGrabAction
	{
		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<float> list;

		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float prevMagnitude;

		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float bottomBound;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float topBound;

		[Token(Token = "0x1400011C")]
		private event HandRotationDelegate rotateLeft
		{
			[Token(Token = "0x600358F")]
			[Address(RVA = "0xCDD384", Offset = "0xCDD384", VA = "0xCDD384")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003590")]
			[Address(RVA = "0xCDD420", Offset = "0xCDD420", VA = "0xCDD420")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400011D")]
		private event HandRotationDelegate rotateRight
		{
			[Token(Token = "0x6003591")]
			[Address(RVA = "0xCDD4BC", Offset = "0xCDD4BC", VA = "0xCDD4BC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003592")]
			[Address(RVA = "0xCDD558", Offset = "0xCDD558", VA = "0xCDD558")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003593")]
		[Address(RVA = "0xCDD5F4", Offset = "0xCDD5F4", VA = "0xCDD5F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003594")]
		[Address(RVA = "0xCDD5F8", Offset = "0xCDD5F8", VA = "0xCDD5F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003595")]
		[Address(RVA = "0xCDD5FC", Offset = "0xCDD5FC", VA = "0xCDD5FC", Slot = "8")]
		public override void ProcessUpdate()
		{
		}

		[Token(Token = "0x6003596")]
		[Address(RVA = "0xCDD834", Offset = "0xCDD834", VA = "0xCDD834", Slot = "14")]
		protected override void UniformScale()
		{
		}

		[Token(Token = "0x6003597")]
		[Address(RVA = "0xCDD98C", Offset = "0xCDD98C", VA = "0xCDD98C")]
		private void CheckSum(float delta)
		{
		}

		[Token(Token = "0x6003598")]
		[Address(RVA = "0xCDDB24", Offset = "0xCDDB24", VA = "0xCDDB24")]
		public UsingBarrelBySecondHand()
		{
		}
	}
	[Token(Token = "0x200086A")]
	public abstract class AbstractPlayer : MonoBehaviour
	{
		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected PhotonView photonView;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool alive;

		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PlayerType typeOfPlayer;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected PlayerUI_LookAtCamera playerInfoUI;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public PlayerParts playerModel;

		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject coinPrefab;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool coinsLocalOnly;

		[Token(Token = "0x4002BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GameObject> playerCoins;

		[Token(Token = "0x4002BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 moveHeadAfterDeathDir;

		[Token(Token = "0x17000425")]
		public PhotonView PlayerPhotonView
		{
			[Token(Token = "0x6003599")]
			[Address(RVA = "0xCDDBB8", Offset = "0xCDDBB8", VA = "0xCDDBB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000426")]
		public PlayerUI_LookAtCamera PlayerInfo
		{
			[Token(Token = "0x600359A")]
			[Address(RVA = "0xCDDBC0", Offset = "0xCDDBC0", VA = "0xCDDBC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000427")]
		public string UserID
		{
			[Token(Token = "0x600359B")]
			[Address(RVA = "0xCDDBC8", Offset = "0xCDDBC8", VA = "0xCDDBC8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600359C")]
			[Address(RVA = "0xCDDBD0", Offset = "0xCDDBD0", VA = "0xCDDBD0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600359D")]
		[Address(RVA = "0xCDDBD8", Offset = "0xCDDBD8", VA = "0xCDDBD8")]
		public void InitShowingInfo(Transform target)
		{
		}

		[Token(Token = "0x600359E")]
		public abstract void ShowPlayer();

		[Token(Token = "0x600359F")]
		public abstract void HidePlayer(bool withoutRagdall = false);

		[Token(Token = "0x60035A0")]
		public abstract void RetunCardOnTable();

		[Token(Token = "0x60035A1")]
		[Address(RVA = "0xCDDC88", Offset = "0xCDDC88", VA = "0xCDDC88")]
		public void ShowPlayerInfo(Transform lookTarget)
		{
		}

		[Token(Token = "0x60035A2")]
		[Address(RVA = "0xCDDE58", Offset = "0xCDDE58", VA = "0xCDDE58")]
		public void HidePlayerInfo()
		{
		}

		[Token(Token = "0x60035A3")]
		[Address(RVA = "0xCDDED0", Offset = "0xCDDED0", VA = "0xCDDED0")]
		public void AddCoinsToPlayer(int count)
		{
		}

		[Token(Token = "0x60035A4")]
		[Address(RVA = "0xCDDFB8", Offset = "0xCDDFB8", VA = "0xCDDFB8")]
		public void RemoveCoin(int count)
		{
		}

		[Token(Token = "0x60035A5")]
		[Address(RVA = "0xCDE024", Offset = "0xCDE024", VA = "0xCDE024")]
		public void PublicDeath(Vector3 shootingDirection)
		{
		}

		[Token(Token = "0x60035A6")]
		[Address(RVA = "0xCDE148", Offset = "0xCDE148", VA = "0xCDE148")]
		protected AbstractPlayer()
		{
		}
	}
	[Token(Token = "0x200086B")]
	public class ControllerInitializer : MonoBehaviour
	{
		[Token(Token = "0x200086C")]
		[CompilerGenerated]
		private sealed class <waitAndReset>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float waitTime;

			[Token(Token = "0x4002BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ControllerInitializer <>4__this;

			[Token(Token = "0x4002BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string id;

			[Token(Token = "0x17000428")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60035B3")]
				[Address(RVA = "0xCDEA4C", Offset = "0xCDEA4C", VA = "0xCDEA4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000429")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60035B5")]
				[Address(RVA = "0xCDEA94", Offset = "0xCDEA94", VA = "0xCDEA94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60035B0")]
			[Address(RVA = "0xCDE6D0", Offset = "0xCDE6D0", VA = "0xCDE6D0")]
			[DebuggerHidden]
			public <waitAndReset>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60035B1")]
			[Address(RVA = "0xCDE960", Offset = "0xCDE960", VA = "0xCDE960", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60035B2")]
			[Address(RVA = "0xCDE964", Offset = "0xCDE964", VA = "0xCDE964", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60035B4")]
			[Address(RVA = "0xCDEA54", Offset = "0xCDEA54", VA = "0xCDEA54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200086D")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerInitializer <>4__this;

			[Token(Token = "0x4002BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string UserID;

			[Token(Token = "0x1700042A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60035B9")]
				[Address(RVA = "0xCDEC6C", Offset = "0xCDEC6C", VA = "0xCDEC6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60035BB")]
				[Address(RVA = "0xCDECB4", Offset = "0xCDECB4", VA = "0xCDECB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60035B6")]
			[Address(RVA = "0xCDE930", Offset = "0xCDE930", VA = "0xCDE930")]
			[DebuggerHidden]
			public <ResetPosition>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60035B7")]
			[Address(RVA = "0xCDEA9C", Offset = "0xCDEA9C", VA = "0xCDEA9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60035B8")]
			[Address(RVA = "0xCDEAA0", Offset = "0xCDEAA0", VA = "0xCDEAA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60035BA")]
			[Address(RVA = "0xCDEC74", Offset = "0xCDEC74", VA = "0xCDEC74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform cameraRig;

		[Token(Token = "0x4002BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private VRTK_SDKSetup vRTK;

		[Token(Token = "0x4002BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x4002BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private FakePlayerController fakeplayerController;

		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform centerEyeAnchors;

		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3 localOffset;

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer pointerRenderer;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool leftPressedDown;

		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rightPressedDown;

		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool ps4StartPressed;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ps4HoldStartTimer;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float TimeOfReset;

		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private OVRManager ovrManagerRef;

		[Token(Token = "0x60035A7")]
		[Address(RVA = "0xCDE1D8", Offset = "0xCDE1D8", VA = "0xCDE1D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60035A8")]
		[Address(RVA = "0xCDE4D8", Offset = "0xCDE4D8", VA = "0xCDE4D8")]
		private void ButtonInput(Hand h, bool b)
		{
		}

		[Token(Token = "0x60035A9")]
		[Address(RVA = "0xCDE598", Offset = "0xCDE598", VA = "0xCDE598")]
		private void ResetPlayerPostion(Hand hand, bool downPress)
		{
		}

		[Token(Token = "0x60035AA")]
		[Address(RVA = "0xCDE600", Offset = "0xCDE600", VA = "0xCDE600")]
		public void ForceRecetPos(string id, float waitTime = 0f)
		{
		}

		[Token(Token = "0x60035AB")]
		[Address(RVA = "0xCDE630", Offset = "0xCDE630", VA = "0xCDE630")]
		[IteratorStateMachine(typeof(<waitAndReset>d__14))]
		private IEnumerator waitAndReset(string id, float waitTime = 0f)
		{
			return null;
		}

		[Token(Token = "0x60035AC")]
		[Address(RVA = "0xCDE6F8", Offset = "0xCDE6F8", VA = "0xCDE6F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60035AD")]
		[Address(RVA = "0xCDE92C", Offset = "0xCDE92C", VA = "0xCDE92C")]
		private void EnablePlayerCanvas(Hand hand, bool downPress)
		{
		}

		[Token(Token = "0x60035AE")]
		[Address(RVA = "0xCDE508", Offset = "0xCDE508", VA = "0xCDE508")]
		[IteratorStateMachine(typeof(<ResetPosition>d__19))]
		private IEnumerator ResetPosition(string UserID)
		{
			return null;
		}

		[Token(Token = "0x60035AF")]
		[Address(RVA = "0xCDE958", Offset = "0xCDE958", VA = "0xCDE958")]
		public ControllerInitializer()
		{
		}
	}
	[Token(Token = "0x200086E")]
	public delegate void ControllersInput(Hand hand, bool downPress);
	[Token(Token = "0x200086F")]
	public class HandAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x4002BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Hand hand;

		[Token(Token = "0x4002BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator anim;

		[Token(Token = "0x4002BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4002BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int animGrabTouchParamId;

		[Token(Token = "0x4002BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int animGrabPressParamId;

		[Token(Token = "0x4002C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int animTriggerParamId;

		[Token(Token = "0x4002C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int animStickParamId;

		[Token(Token = "0x4002C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRInput.Controller controller;

		[Token(Token = "0x4002C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool stickInput;

		[Token(Token = "0x4002C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool grabTouchInput;

		[Token(Token = "0x4002C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		private bool grabPressInput;

		[Token(Token = "0x4002C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		private bool triggerInput;

		[Token(Token = "0x4002C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool alwaysAnimated;

		[Token(Token = "0x1700042C")]
		public Hand Hand
		{
			[Token(Token = "0x60035C0")]
			[Address(RVA = "0xCDEE70", Offset = "0xCDEE70", VA = "0xCDEE70")]
			get
			{
				return default(Hand);
			}
		}

		[Token(Token = "0x60035C1")]
		[Address(RVA = "0xCDEE78", Offset = "0xCDEE78", VA = "0xCDEE78")]
		private void Awake()
		{
		}

		[Token(Token = "0x60035C2")]
		[Address(RVA = "0xCDF020", Offset = "0xCDF020", VA = "0xCDF020")]
		private void Update()
		{
		}

		[Token(Token = "0x60035C3")]
		[Address(RVA = "0xCDF2B8", Offset = "0xCDF2B8", VA = "0xCDF2B8")]
		private void Reset()
		{
		}

		[Token(Token = "0x60035C4")]
		[Address(RVA = "0xCDF310", Offset = "0xCDF310", VA = "0xCDF310")]
		public HandAnimatorController()
		{
		}
	}
	[Token(Token = "0x2000870")]
	public class HandPointerActivator : MonoBehaviour
	{
		[Token(Token = "0x2000872")]
		[CompilerGenerated]
		private sealed class <turenPointerOff>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPointerActivator <>4__this;

			[Token(Token = "0x1700042E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60035D0")]
				[Address(RVA = "0xCDF8C4", Offset = "0xCDF8C4", VA = "0xCDF8C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60035D2")]
				[Address(RVA = "0xCDF90C", Offset = "0xCDF90C", VA = "0xCDF90C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60035CD")]
			[Address(RVA = "0xCDF55C", Offset = "0xCDF55C", VA = "0xCDF55C")]
			[DebuggerHidden]
			public <turenPointerOff>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60035CE")]
			[Address(RVA = "0xCDF6B0", Offset = "0xCDF6B0", VA = "0xCDF6B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60035CF")]
			[Address(RVA = "0xCDF6B4", Offset = "0xCDF6B4", VA = "0xCDF6B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60035D1")]
			[Address(RVA = "0xCDF8CC", Offset = "0xCDF8CC", VA = "0xCDF8CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ActivationBtnSetter> activationBtnSetters;

		[Token(Token = "0x4002C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private VRTK_Pointer pointer;

		[Token(Token = "0x1700042D")]
		public VRTK_Pointer Pointer
		{
			[Token(Token = "0x60035C5")]
			[Address(RVA = "0xCDF320", Offset = "0xCDF320", VA = "0xCDF320")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60035C6")]
		[Address(RVA = "0xCDF328", Offset = "0xCDF328", VA = "0xCDF328")]
		private void Start()
		{
		}

		[Token(Token = "0x60035C7")]
		[Address(RVA = "0xCDF4C8", Offset = "0xCDF4C8", VA = "0xCDF4C8")]
		public void TurnOffPointer()
		{
		}

		[Token(Token = "0x60035C8")]
		[Address(RVA = "0xCDF4E8", Offset = "0xCDF4E8", VA = "0xCDF4E8")]
		[IteratorStateMachine(typeof(<turenPointerOff>d__6))]
		private IEnumerator turenPointerOff()
		{
			return null;
		}

		[Token(Token = "0x60035C9")]
		[Address(RVA = "0xCDF584", Offset = "0xCDF584", VA = "0xCDF584")]
		public HandPointerActivator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000873")]
	public class ActivationBtnSetter
	{
		[Token(Token = "0x4002C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Device;

		[Token(Token = "0x4002C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents.ButtonAlias ActivationButton;

		[Token(Token = "0x60035D3")]
		[Address(RVA = "0xCDF914", Offset = "0xCDF914", VA = "0xCDF914")]
		public ActivationBtnSetter()
		{
		}
	}
	[Token(Token = "0x2000874")]
	public class PlayerController : AbstractPlayer
	{
		[Token(Token = "0x2000875")]
		[CompilerGenerated]
		private sealed class <DelaySwitchPointer>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerController <>4__this;

			[Token(Token = "0x17000433")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600360B")]
				[Address(RVA = "0xCE3654", Offset = "0xCE3654", VA = "0xCE3654", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000434")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600360D")]
				[Address(RVA = "0xCE369C", Offset = "0xCE369C", VA = "0xCE369C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003608")]
			[Address(RVA = "0xCE047C", Offset = "0xCE047C", VA = "0xCE047C")]
			[DebuggerHidden]
			public <DelaySwitchPointer>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6003609")]
			[Address(RVA = "0xCE343C", Offset = "0xCE343C", VA = "0xCE343C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600360A")]
			[Address(RVA = "0xCE3440", Offset = "0xCE3440", VA = "0xCE3440", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600360C")]
			[Address(RVA = "0xCE365C", Offset = "0xCE365C", VA = "0xCE365C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private List<Player_Renderers> p_renderers;

		[Token(Token = "0x4002C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Material ghostMaterial;

		[Token(Token = "0x4002C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private NPC_Death playerDeath;

		[Token(Token = "0x4002C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VRTK_SDKSetup sDKSetup;

		[Token(Token = "0x4002C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private PlayerVisualParts playerVisualParts;

		[Token(Token = "0x4002C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AFK_Pistol pistol;

		[Token(Token = "0x4002C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool controllerInited;

		[Token(Token = "0x4002C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Hand handWhichCard;

		[Token(Token = "0x4002C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool playerPartInited;

		[Token(Token = "0x4002C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		private bool needHideAfterInit;

		[Token(Token = "0x4002C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Player playerInputRef;

		[Token(Token = "0x4002C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Action<Hand, bool> returnPlayer;

		[Token(Token = "0x4002C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Hand handWhichTheGun;

		[Token(Token = "0x4002C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool needCheckPlayerPointerInput;

		[Token(Token = "0x17000430")]
		public bool gunInHand
		{
			[Token(Token = "0x60035D4")]
			[Address(RVA = "0xCDF91C", Offset = "0xCDF91C", VA = "0xCDF91C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60035D5")]
			[Address(RVA = "0xCDF924", Offset = "0xCDF924", VA = "0xCDF924")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000431")]
		public bool IsMuted
		{
			[Token(Token = "0x60035D6")]
			[Address(RVA = "0xCDF930", Offset = "0xCDF930", VA = "0xCDF930")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60035D7")]
			[Address(RVA = "0xCDF938", Offset = "0xCDF938", VA = "0xCDF938")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000432")]
		public Transform PlayerCameraTransform
		{
			[Token(Token = "0x60035D8")]
			[Address(RVA = "0xCDF944", Offset = "0xCDF944", VA = "0xCDF944")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60035D9")]
		[Address(RVA = "0xCDF968", Offset = "0xCDF968", VA = "0xCDF968")]
		private void Awake()
		{
		}

		[Token(Token = "0x60035DA")]
		[Address(RVA = "0xCDFBA0", Offset = "0xCDFBA0", VA = "0xCDFBA0")]
		private void SetupAllRenders()
		{
		}

		[Token(Token = "0x60035DB")]
		[Address(RVA = "0xCDFE30", Offset = "0xCDFE30", VA = "0xCDFE30")]
		private void Start()
		{
		}

		[Token(Token = "0x60035DC")]
		[Address(RVA = "0xCE0028", Offset = "0xCE0028", VA = "0xCE0028")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60035DD")]
		[Address(RVA = "0xCE038C", Offset = "0xCE038C", VA = "0xCE038C")]
		public void MainPistolMakeShot()
		{
		}

		[Token(Token = "0x60035DE")]
		[Address(RVA = "0xCE03EC", Offset = "0xCE03EC", VA = "0xCE03EC")]
		public void InitInfoLookAt(Transform target)
		{
		}

		[Token(Token = "0x60035DF")]
		[Address(RVA = "0xCE0408", Offset = "0xCE0408", VA = "0xCE0408")]
		[IteratorStateMachine(typeof(<DelaySwitchPointer>d__27))]
		private IEnumerator DelaySwitchPointer()
		{
			return null;
		}

		[Token(Token = "0x60035E0")]
		[Address(RVA = "0xCE04A4", Offset = "0xCE04A4", VA = "0xCE04A4")]
		private void LeftHandPointer()
		{
		}

		[Token(Token = "0x60035E1")]
		[Address(RVA = "0xCE0828", Offset = "0xCE0828", VA = "0xCE0828")]
		private void RightHandPointer()
		{
		}

		[Token(Token = "0x60035E2")]
		[Address(RVA = "0xCE0BAC", Offset = "0xCE0BAC", VA = "0xCE0BAC")]
		[PunRPC]
		public void EnableHandPointer()
		{
		}

		[Token(Token = "0x60035E3")]
		[Address(RVA = "0xCE0D08", Offset = "0xCE0D08", VA = "0xCE0D08")]
		private void DisableHandPointer()
		{
		}

		[Token(Token = "0x60035E4")]
		[Address(RVA = "0xCE0DD4", Offset = "0xCE0DD4", VA = "0xCE0DD4")]
		[PunRPC]
		private void HandSpinPistol()
		{
		}

		[Token(Token = "0x60035E5")]
		[Address(RVA = "0xCE0E70", Offset = "0xCE0E70", VA = "0xCE0E70")]
		public void ReloadPistol(out bool isReloaded)
		{
		}

		[Token(Token = "0x60035E6")]
		[Address(RVA = "0xCE0F54", Offset = "0xCE0F54", VA = "0xCE0F54")]
		public void InitPlayer(PlayerType pType)
		{
		}

		[Token(Token = "0x60035E7")]
		[Address(RVA = "0xCE105C", Offset = "0xCE105C", VA = "0xCE105C")]
		[PunRPC]
		private void RPC_BaseInit(PlayerType pType)
		{
		}

		[Token(Token = "0x60035E8")]
		[Address(RVA = "0xCE13CC", Offset = "0xCE13CC", VA = "0xCE13CC")]
		[PunRPC]
		[ContextMenu("updatePosition")]
		public void AcceptPosition()
		{
		}

		[Token(Token = "0x60035E9")]
		[Address(RVA = "0xCE13D0", Offset = "0xCE13D0", VA = "0xCE13D0")]
		public void AcceptPosition(int pos, string id)
		{
		}

		[Token(Token = "0x60035EA")]
		[Address(RVA = "0xCE16C0", Offset = "0xCE16C0", VA = "0xCE16C0")]
		[PunRPC]
		private void RPC_RememberPistolDirection(Vector3 dir)
		{
		}

		[Token(Token = "0x60035EB")]
		[Address(RVA = "0xCE16CC", Offset = "0xCE16CC", VA = "0xCE16CC", Slot = "5")]
		public override void HidePlayer(bool withoutRagdall = false)
		{
		}

		[Token(Token = "0x60035EC")]
		[Address(RVA = "0xCE1BDC", Offset = "0xCE1BDC", VA = "0xCE1BDC", Slot = "4")]
		public override void ShowPlayer()
		{
		}

		[Token(Token = "0x60035ED")]
		[Address(RVA = "0xCE1E14", Offset = "0xCE1E14", VA = "0xCE1E14", Slot = "6")]
		public override void RetunCardOnTable()
		{
		}

		[Token(Token = "0x60035EE")]
		[Address(RVA = "0xCE1E18", Offset = "0xCE1E18", VA = "0xCE1E18")]
		public void MutePlayer()
		{
		}

		[Token(Token = "0x60035EF")]
		[Address(RVA = "0xCE1E88", Offset = "0xCE1E88", VA = "0xCE1E88")]
		public void UnMutePlayer()
		{
		}

		[Token(Token = "0x60035F0")]
		[Address(RVA = "0xCDE41C", Offset = "0xCDE41C", VA = "0xCDE41C")]
		public void InitializeController(VRTK_SDKSetup sdk, Action<Hand, bool> returner)
		{
		}

		[Token(Token = "0x60035F1")]
		[Address(RVA = "0xCE1EF4", Offset = "0xCE1EF4", VA = "0xCE1EF4")]
		public void ReturnPlayer()
		{
		}

		[Token(Token = "0x60035F2")]
		[Address(RVA = "0xCE1F18", Offset = "0xCE1F18", VA = "0xCE1F18")]
		public void SetPlayerName(string name, string user_id)
		{
		}

		[Token(Token = "0x60035F3")]
		[Address(RVA = "0xCE203C", Offset = "0xCE203C", VA = "0xCE203C")]
		public void UnEquipMainPistol(Hand hand)
		{
		}

		[Token(Token = "0x60035F4")]
		[Address(RVA = "0xCE218C", Offset = "0xCE218C", VA = "0xCE218C")]
		public void LeftHandShot()
		{
		}

		[Token(Token = "0x60035F5")]
		[Address(RVA = "0xCE2208", Offset = "0xCE2208", VA = "0xCE2208")]
		public void RightHandShot()
		{
		}

		[Token(Token = "0x60035F6")]
		[Address(RVA = "0xCE2284", Offset = "0xCE2284", VA = "0xCE2284")]
		public void EquipMainPistol(Hand hand)
		{
		}

		[Token(Token = "0x60035F7")]
		[Address(RVA = "0xCE2448", Offset = "0xCE2448", VA = "0xCE2448")]
		public void GetAFK_kill_Pistol(AFK_Pistol pistol, Hand hand)
		{
		}

		[Token(Token = "0x60035F8")]
		[Address(RVA = "0xCE2594", Offset = "0xCE2594", VA = "0xCE2594")]
		public void GetCigarette(int cigaretteID)
		{
		}

		[Token(Token = "0x60035F9")]
		[Address(RVA = "0xCE269C", Offset = "0xCE269C", VA = "0xCE269C")]
		public void GetGlass(int glassID)
		{
		}

		[Token(Token = "0x60035FA")]
		[Address(RVA = "0xCE27A4", Offset = "0xCE27A4", VA = "0xCE27A4")]
		public void GetPlayingCard(int cardID, Hand hand)
		{
		}

		[Token(Token = "0x60035FB")]
		[Address(RVA = "0xCE28B4", Offset = "0xCE28B4", VA = "0xCE28B4")]
		public void GetPepelka(int peplnitsaID)
		{
		}

		[Token(Token = "0x60035FC")]
		[Address(RVA = "0xCE29BC", Offset = "0xCE29BC", VA = "0xCE29BC")]
		public void DropAFK_Pistol()
		{
		}

		[Token(Token = "0x60035FD")]
		[Address(RVA = "0xCE2A70", Offset = "0xCE2A70", VA = "0xCE2A70")]
		public void MakeShotAFK()
		{
		}

		[Token(Token = "0x60035FE")]
		[Address(RVA = "0xCE2B54", Offset = "0xCE2B54", VA = "0xCE2B54")]
		private void Update()
		{
		}

		[Token(Token = "0x60035FF")]
		[Address(RVA = "0xCE2BCC", Offset = "0xCE2BCC", VA = "0xCE2BCC")]
		private void CheckHandPushCollider()
		{
		}

		[Token(Token = "0x6003600")]
		[Address(RVA = "0xCE2FB0", Offset = "0xCE2FB0", VA = "0xCE2FB0")]
		[PunRPC]
		private void RPC_GetPlayingCard(int cardID, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003601")]
		[Address(RVA = "0xCE301C", Offset = "0xCE301C", VA = "0xCE301C")]
		[PunRPC]
		private void RPC_GetMainPistol(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003602")]
		[Address(RVA = "0xCE3078", Offset = "0xCE3078", VA = "0xCE3078")]
		[PunRPC]
		private void RPC_ClearCoins()
		{
		}

		[Token(Token = "0x6003603")]
		[Address(RVA = "0xCE3080", Offset = "0xCE3080", VA = "0xCE3080")]
		[PunRPC]
		private void SetUpName(string name, string user_id)
		{
		}

		[Token(Token = "0x6003604")]
		[Address(RVA = "0xCE31CC", Offset = "0xCE31CC", VA = "0xCE31CC")]
		[PunRPC]
		private void RPC_GetPepelka(int peplnitsaID, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003605")]
		[Address(RVA = "0xCE3298", Offset = "0xCE3298", VA = "0xCE3298")]
		[PunRPC]
		private void RPC_GetCigarette(int cigaretteID, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003606")]
		[Address(RVA = "0xCE3364", Offset = "0xCE3364", VA = "0xCE3364")]
		[PunRPC]
		private void RPC_GetGlass(int glassID, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6003607")]
		[Address(RVA = "0xCE3430", Offset = "0xCE3430", VA = "0xCE3430")]
		public PlayerController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000876")]
	public class PlayerParts
	{
		[Token(Token = "0x4002C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Head;

		[Token(Token = "0x4002C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Body;

		[Token(Token = "0x4002C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LeftHand;

		[Token(Token = "0x4002C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject RightHand;

		[Token(Token = "0x4002C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject FullModel;

		[Token(Token = "0x600360E")]
		[Address(RVA = "0xCE0138", Offset = "0xCE0138", VA = "0xCE0138")]
		public void UpdateHeadTransform(Transform headset)
		{
		}

		[Token(Token = "0x600360F")]
		[Address(RVA = "0xCE01D8", Offset = "0xCE01D8", VA = "0xCE01D8")]
		public void UpdateHandsTransform(Transform left, Transform right)
		{
		}

		[Token(Token = "0x6003610")]
		[Address(RVA = "0xCE02C8", Offset = "0xCE02C8", VA = "0xCE02C8")]
		public void UpdateBodyTransform()
		{
		}

		[Token(Token = "0x6003611")]
		[Address(RVA = "0xCE36A4", Offset = "0xCE36A4", VA = "0xCE36A4")]
		public PlayerParts()
		{
		}
	}
	[Token(Token = "0x2000877")]
	public class PlayerGameplayCanvas : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x2000878")]
		[CompilerGenerated]
		private sealed class <Start>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerGameplayCanvas <>4__this;

			[Token(Token = "0x17000435")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003626")]
				[Address(RVA = "0xCE4E30", Offset = "0xCE4E30", VA = "0xCE4E30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000436")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003628")]
				[Address(RVA = "0xCE4E78", Offset = "0xCE4E78", VA = "0xCE4E78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003623")]
			[Address(RVA = "0xCE3930", Offset = "0xCE3930", VA = "0xCE3930")]
			[DebuggerHidden]
			public <Start>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6003624")]
			[Address(RVA = "0xCE4D70", Offset = "0xCE4D70", VA = "0xCE4D70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003625")]
			[Address(RVA = "0xCE4D74", Offset = "0xCE4D74", VA = "0xCE4D74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003627")]
			[Address(RVA = "0xCE4E38", Offset = "0xCE4E38", VA = "0xCE4E38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200087B")]
		[CompilerGenerated]
		private sealed class <WaitAndTurnOff>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerGameplayCanvas <>4__this;

			[Token(Token = "0x4002C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandPointerActivator hand;

			[Token(Token = "0x17000437")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003631")]
				[Address(RVA = "0xCE5138", Offset = "0xCE5138", VA = "0xCE5138", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000438")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003633")]
				[Address(RVA = "0xCE5180", Offset = "0xCE5180", VA = "0xCE5180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600362E")]
			[Address(RVA = "0xCE48E8", Offset = "0xCE48E8", VA = "0xCE48E8")]
			[DebuggerHidden]
			public <WaitAndTurnOff>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x600362F")]
			[Address(RVA = "0xCE4F60", Offset = "0xCE4F60", VA = "0xCE4F60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003630")]
			[Address(RVA = "0xCE4F64", Offset = "0xCE4F64", VA = "0xCE4F64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003632")]
			[Address(RVA = "0xCE5140", Offset = "0xCE5140", VA = "0xCE5140", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject BackGround;

		[Token(Token = "0x4002C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Main Panel")]
		[SerializeField]
		private GameObject MainPanel;

		[Token(Token = "0x4002C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image muteImgButton;

		[Token(Token = "0x4002C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text muteText;

		[Token(Token = "0x4002C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.UI.Button kickButton;

		[Token(Token = "0x4002C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text nicknameText;

		[Token(Token = "0x4002C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform PlayersList;

		[Token(Token = "0x4002C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject PlayerElementPrefab;

		[Token(Token = "0x4002C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Kick Panel")]
		[SerializeField]
		private GameObject KickPanel;

		[Token(Token = "0x4002C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text kickedPlayerNameField;

		[Token(Token = "0x4002C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Image kickedPlayerAvatarField;

		[Token(Token = "0x4002C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Mute Panel")]
		[SerializeField]
		private GameObject MutePlayersPanel;

		[Token(Token = "0x4002C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Transform MutePlayersList;

		[Token(Token = "0x4002C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject MutePlayerElementPrefab;

		[Token(Token = "0x4002C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Sprite mute_mic;

		[Token(Token = "0x4002C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Sprite mic;

		[Token(Token = "0x4002C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[Header("Invite Panel")]
		private GameObject InvitePanel;

		[Token(Token = "0x4002C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[Header("Restart button")]
		private GameObject restart;

		[Token(Token = "0x4002C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private GameObject LeavePanel;

		[Token(Token = "0x4002C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayerGameplayCanvas Instance;

		[Token(Token = "0x4002C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool microIsMuted;

		[Token(Token = "0x4002C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private PlayerController localPlayer;

		[Token(Token = "0x4002C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Photon.Realtime.Player playerToKick;

		[Token(Token = "0x4002C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioSource buttonAudioSource;

		[Token(Token = "0x4002C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioClip clickButtonAudio;

		[Token(Token = "0x4002C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool opened;

		[Token(Token = "0x4002C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private LineRenderer pointer;

		[Token(Token = "0x6003612")]
		[Address(RVA = "0xCE36AC", Offset = "0xCE36AC", VA = "0xCE36AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003613")]
		[Address(RVA = "0xCE3704", Offset = "0xCE3704", VA = "0xCE3704")]
		private void CheckMuteMicroState()
		{
		}

		[Token(Token = "0x6003614")]
		[Address(RVA = "0xCE38BC", Offset = "0xCE38BC", VA = "0xCE38BC")]
		[IteratorStateMachine(typeof(<Start>d__27))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6003615")]
		[Address(RVA = "0xCE3958", Offset = "0xCE3958", VA = "0xCE3958", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6003616")]
		[Address(RVA = "0xCE39D4", Offset = "0xCE39D4", VA = "0xCE39D4", Slot = "42")]
		public override void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
		{
		}

		[Token(Token = "0x6003617")]
		[Address(RVA = "0xCDE838", Offset = "0xCDE838", VA = "0xCDE838")]
		public bool PlayerMenu(Vector3 point, LineRenderer lr)
		{
			return default(bool);
		}

		[Token(Token = "0x6003618")]
		[Address(RVA = "0xCE3ABC", Offset = "0xCE3ABC", VA = "0xCE3ABC")]
		public void InitCanvas(Vector3 lookAtPoint)
		{
		}

		[Token(Token = "0x6003619")]
		[Address(RVA = "0xCE46B4", Offset = "0xCE46B4", VA = "0xCE46B4")]
		public void PlayerListInit_Delay()
		{
		}

		[Token(Token = "0x600361A")]
		[Address(RVA = "0xCE3C88", Offset = "0xCE3C88", VA = "0xCE3C88")]
		public void PlayerListInit([Optional] Photon.Realtime.Player[] playersList)
		{
		}

		[Token(Token = "0x600361B")]
		[Address(RVA = "0xCE46CC", Offset = "0xCE46CC", VA = "0xCE46CC")]
		private void OpenKickPanel()
		{
		}

		[Token(Token = "0x600361C")]
		[Address(RVA = "0xCE4858", Offset = "0xCE4858", VA = "0xCE4858")]
		[IteratorStateMachine(typeof(<WaitAndTurnOff>d__37))]
		private IEnumerator WaitAndTurnOff(HandPointerActivator hand)
		{
			return null;
		}

		[Token(Token = "0x600361D")]
		[Address(RVA = "0xCE3A24", Offset = "0xCE3A24", VA = "0xCE3A24")]
		public void TurnOffMenu()
		{
		}

		[Token(Token = "0x600361E")]
		[Address(RVA = "0xCE4910", Offset = "0xCE4910", VA = "0xCE4910")]
		public void OnClickExitDebug()
		{
		}

		[Token(Token = "0x600361F")]
		[Address(RVA = "0xCE4918", Offset = "0xCE4918", VA = "0xCE4918")]
		public void OnClick_MuteMicro()
		{
		}

		[Token(Token = "0x6003620")]
		[Address(RVA = "0xCE3884", Offset = "0xCE3884", VA = "0xCE3884")]
		private void UpdateMicroMuteButtonSprite(Image muteImg, bool mute)
		{
		}

		[Token(Token = "0x6003621")]
		[Address(RVA = "0xCE4AAC", Offset = "0xCE4AAC", VA = "0xCE4AAC")]
		public PlayerGameplayCanvas()
		{
		}
	}
	[Token(Token = "0x200087C")]
	public delegate void HandRotationDelegate();
	[Token(Token = "0x200087D")]
	public class PlayerHand : MonoBehaviour
	{
		[Token(Token = "0x4002C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool pointerEnabled;

		[Token(Token = "0x4002C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Hand Hand;

		[Token(Token = "0x4002C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem ps;

		[Token(Token = "0x4002C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PhotonView photonView;

		[Token(Token = "0x4002C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float timeToRotatePistol;

		[Token(Token = "0x4002C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject pushCollider;

		[Token(Token = "0x4002C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_StraightPointerRenderer customPointer;

		[Token(Token = "0x4002C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent GiveA_Five;

		[Token(Token = "0x6003638")]
		[Address(RVA = "0xCE5294", Offset = "0xCE5294", VA = "0xCE5294")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003639")]
		[Address(RVA = "0xCE53F0", Offset = "0xCE53F0", VA = "0xCE53F0")]
		[PunRPC]
		private void RPC_EmitPS()
		{
		}

		[Token(Token = "0x600363A")]
		[Address(RVA = "0xCE543C", Offset = "0xCE543C", VA = "0xCE543C")]
		public PlayerHand()
		{
		}
	}
	[Token(Token = "0x200087E")]
	public class PlayerMouth : MonoBehaviour
	{
		[Token(Token = "0x200087F")]
		[CompilerGenerated]
		private sealed class <Initialize>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerMouth <>4__this;

			[Token(Token = "0x1700043A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003645")]
				[Address(RVA = "0xCE5848", Offset = "0xCE5848", VA = "0xCE5848", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700043B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003647")]
				[Address(RVA = "0xCE5890", Offset = "0xCE5890", VA = "0xCE5890", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003642")]
			[Address(RVA = "0xCE54D8", Offset = "0xCE54D8", VA = "0xCE54D8")]
			[DebuggerHidden]
			public <Initialize>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6003643")]
			[Address(RVA = "0xCE560C", Offset = "0xCE560C", VA = "0xCE560C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003644")]
			[Address(RVA = "0xCE5610", Offset = "0xCE5610", VA = "0xCE5610", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003646")]
			[Address(RVA = "0xCE5850", Offset = "0xCE5850", VA = "0xCE5850", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TweenRotation tweenRotation;

		[Token(Token = "0x4002C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultStart;

		[Token(Token = "0x4002C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 defaultEnd;

		[Token(Token = "0x17000439")]
		public bool IsMouthOpen
		{
			[Token(Token = "0x600363B")]
			[Address(RVA = "0xCE5450", Offset = "0xCE5450", VA = "0xCE5450")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600363C")]
			[Address(RVA = "0xCE5458", Offset = "0xCE5458", VA = "0xCE5458")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600363D")]
		[Address(RVA = "0xCE1348", Offset = "0xCE1348", VA = "0xCE1348")]
		public void Iinitialize()
		{
		}

		[Token(Token = "0x600363E")]
		[Address(RVA = "0xCE5464", Offset = "0xCE5464", VA = "0xCE5464")]
		[IteratorStateMachine(typeof(<Initialize>d__8))]
		private IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x600363F")]
		[Address(RVA = "0xCE5500", Offset = "0xCE5500", VA = "0xCE5500")]
		public void OpenMouth()
		{
		}

		[Token(Token = "0x6003640")]
		[Address(RVA = "0xCE5584", Offset = "0xCE5584", VA = "0xCE5584")]
		public void CloseMouth()
		{
		}

		[Token(Token = "0x6003641")]
		[Address(RVA = "0xCE5604", Offset = "0xCE5604", VA = "0xCE5604")]
		public PlayerMouth()
		{
		}
	}
	[Token(Token = "0x2000880")]
	public class PlayerReturnerZone : MonoBehaviour
	{
		[Token(Token = "0x6003648")]
		[Address(RVA = "0xCE5898", Offset = "0xCE5898", VA = "0xCE5898")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6003649")]
		[Address(RVA = "0xCE599C", Offset = "0xCE599C", VA = "0xCE599C")]
		public PlayerReturnerZone()
		{
		}
	}
	[Token(Token = "0x2000881")]
	public class PlayerUI_LookAtCamera : MonoBehaviour
	{
		[Token(Token = "0x4002C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text nickname;

		[Token(Token = "0x4002C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject money;

		[Token(Token = "0x4002C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image cardEffect;

		[Token(Token = "0x4002C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Sprite extralife;

		[Token(Token = "0x4002C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sprite sheriff_protectoin;

		[Token(Token = "0x4002C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Sprite target;

		[Token(Token = "0x4002C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform lookTarget;

		[Token(Token = "0x4002C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool canLook;

		[Token(Token = "0x4002C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool lockZaxis;

		[Token(Token = "0x1700043C")]
		public bool MoneyEnabled
		{
			[Token(Token = "0x600364A")]
			[Address(RVA = "0xCDDD8C", Offset = "0xCDDD8C", VA = "0xCDDD8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600364B")]
		[Address(RVA = "0xCDDBF4", Offset = "0xCDDBF4", VA = "0xCDDBF4")]
		public void Init(Transform target, bool lockZaxis)
		{
		}

		[Token(Token = "0x600364C")]
		[Address(RVA = "0xCE59A4", Offset = "0xCE59A4", VA = "0xCE59A4")]
		public void Init(Transform target)
		{
		}

		[Token(Token = "0x600364D")]
		[Address(RVA = "0xCDDDB4", Offset = "0xCDDDB4", VA = "0xCDDDB4")]
		public void EnableMoney(int value, bool enable = false)
		{
		}

		[Token(Token = "0x600364E")]
		[Address(RVA = "0xCE5A2C", Offset = "0xCE5A2C", VA = "0xCE5A2C")]
		public void EnableCardEffect(PlayingCardType pct, bool enable)
		{
		}

		[Token(Token = "0x600364F")]
		[Address(RVA = "0xCE31A8", Offset = "0xCE31A8", VA = "0xCE31A8")]
		public void SetNickname(string name)
		{
		}

		[Token(Token = "0x6003650")]
		[Address(RVA = "0xCE5CA4", Offset = "0xCE5CA4", VA = "0xCE5CA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6003651")]
		[Address(RVA = "0xCE5D94", Offset = "0xCE5D94", VA = "0xCE5D94")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003652")]
		[Address(RVA = "0xCE5DA4", Offset = "0xCE5DA4", VA = "0xCE5DA4")]
		public PlayerUI_LookAtCamera()
		{
		}
	}
	[Token(Token = "0x2000882")]
	public class PlayerVisualParts : MonoBehaviour
	{
		[Token(Token = "0x4002C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Gentlman, Bandit, PoliceFemale, Dama, Ranger, Indian")]
		[SerializeField]
		private List<Parts> visualParts;

		[Token(Token = "0x6003653")]
		[Address(RVA = "0xCE11F0", Offset = "0xCE11F0", VA = "0xCE11F0")]
		public void EnableParts(PlayerType pType)
		{
		}

		[Token(Token = "0x6003654")]
		[Address(RVA = "0xCE12E4", Offset = "0xCE12E4", VA = "0xCE12E4")]
		public NPC_Death GetDeathPart(PlayerType pType)
		{
			return null;
		}

		[Token(Token = "0x6003655")]
		[Address(RVA = "0xCE5DAC", Offset = "0xCE5DAC", VA = "0xCE5DAC")]
		public GameObject BaseHead(PlayerType pType)
		{
			return null;
		}

		[Token(Token = "0x6003656")]
		[Address(RVA = "0xCDFC24", Offset = "0xCDFC24", VA = "0xCDFC24")]
		public List<Player_Renderers> GetRenderers()
		{
			return null;
		}

		[Token(Token = "0x6003657")]
		[Address(RVA = "0xCE5E30", Offset = "0xCE5E30", VA = "0xCE5E30")]
		public PlayerVisualParts()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000883")]
	public class Parts
	{
		[Token(Token = "0x4002C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Head;

		[Token(Token = "0x4002C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Body;

		[Token(Token = "0x4002C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LeftHand;

		[Token(Token = "0x4002C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject RightHand;

		[Token(Token = "0x4002C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NPC_Death deathParts;

		[Token(Token = "0x4002C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Player_Renderers> p_renderers;

		[Token(Token = "0x6003658")]
		[Address(RVA = "0xCE5EB8", Offset = "0xCE5EB8", VA = "0xCE5EB8")]
		public Parts()
		{
		}
	}
	[Token(Token = "0x2000884")]
	public class SelectPlayerPointer : MonoBehaviour
	{
		[Token(Token = "0x4002C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public LayerMask mask;

		[Token(Token = "0x4002C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AbstractPlayer target;

		[Token(Token = "0x4002C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform raycastPoint;

		[Token(Token = "0x4002C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private VRCursorPointer pointer;

		[Token(Token = "0x1700043D")]
		public bool PointerEnabled
		{
			[Token(Token = "0x6003659")]
			[Address(RVA = "0xCE5F40", Offset = "0xCE5F40", VA = "0xCE5F40")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600365A")]
			[Address(RVA = "0xCE5F48", Offset = "0xCE5F48", VA = "0xCE5F48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600365B")]
		[Address(RVA = "0xCE0CBC", Offset = "0xCE0CBC", VA = "0xCE0CBC")]
		public void EnablePointer()
		{
		}

		[Token(Token = "0x600365C")]
		[Address(RVA = "0xCE3578", Offset = "0xCE3578", VA = "0xCE3578")]
		public void DisablePointer()
		{
		}

		[Token(Token = "0x600365D")]
		[Address(RVA = "0xCE5F54", Offset = "0xCE5F54", VA = "0xCE5F54")]
		private void Update()
		{
		}

		[Token(Token = "0x600365E")]
		[Address(RVA = "0xCE6598", Offset = "0xCE6598", VA = "0xCE6598")]
		public SelectPlayerPointer()
		{
		}
	}
	[Token(Token = "0x2000885")]
	public class ShowingInfoInit : MonoBehaviour
	{
		[Token(Token = "0x2000886")]
		[CompilerGenerated]
		private sealed class <DelayInitLookInfo1>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShowingInfoInit <>4__this;

			[Token(Token = "0x1700043E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003667")]
				[Address(RVA = "0xCE69F8", Offset = "0xCE69F8", VA = "0xCE69F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700043F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003669")]
				[Address(RVA = "0xCE6A40", Offset = "0xCE6A40", VA = "0xCE6A40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003664")]
			[Address(RVA = "0xCE67E8", Offset = "0xCE67E8", VA = "0xCE67E8")]
			[DebuggerHidden]
			public <DelayInitLookInfo1>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6003665")]
			[Address(RVA = "0xCE6818", Offset = "0xCE6818", VA = "0xCE6818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003666")]
			[Address(RVA = "0xCE681C", Offset = "0xCE681C", VA = "0xCE681C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003668")]
			[Address(RVA = "0xCE6A00", Offset = "0xCE6A00", VA = "0xCE6A00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PhotonView pv;

		[Token(Token = "0x4002C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AbstractPlayer player;

		[Token(Token = "0x600365F")]
		[Address(RVA = "0xCE65A0", Offset = "0xCE65A0", VA = "0xCE65A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003660")]
		[Address(RVA = "0xCE6630", Offset = "0xCE6630", VA = "0xCE6630")]
		private void Start()
		{
		}

		[Token(Token = "0x6003661")]
		[Address(RVA = "0xCE66E0", Offset = "0xCE66E0", VA = "0xCE66E0")]
		[PunRPC]
		private void InitShowingInfo()
		{
		}

		[Token(Token = "0x6003662")]
		[Address(RVA = "0xCE6774", Offset = "0xCE6774", VA = "0xCE6774")]
		[IteratorStateMachine(typeof(<DelayInitLookInfo1>d__5))]
		private IEnumerator DelayInitLookInfo1()
		{
			return null;
		}

		[Token(Token = "0x6003663")]
		[Address(RVA = "0xCE6810", Offset = "0xCE6810", VA = "0xCE6810")]
		public ShowingInfoInit()
		{
		}
	}
	[Token(Token = "0x2000887")]
	public class ReloadCard : MonoBehaviour
	{
		[Token(Token = "0x2000888")]
		[CompilerGenerated]
		private sealed class <CardUsedNumerator>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ReloadCard <>4__this;

			[Token(Token = "0x17000442")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003682")]
				[Address(RVA = "0xCE7998", Offset = "0xCE7998", VA = "0xCE7998", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000443")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003684")]
				[Address(RVA = "0xCE79E0", Offset = "0xCE79E0", VA = "0xCE79E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600367F")]
			[Address(RVA = "0xCE76FC", Offset = "0xCE76FC", VA = "0xCE76FC")]
			[DebuggerHidden]
			public <CardUsedNumerator>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6003680")]
			[Address(RVA = "0xCE78B8", Offset = "0xCE78B8", VA = "0xCE78B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003681")]
			[Address(RVA = "0xCE78BC", Offset = "0xCE78BC", VA = "0xCE78BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003683")]
			[Address(RVA = "0xCE79A0", Offset = "0xCE79A0", VA = "0xCE79A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000889")]
		[CompilerGenerated]
		private sealed class <MoveCard>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ReloadCard <>4__this;

			[Token(Token = "0x17000444")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003688")]
				[Address(RVA = "0xCE7C24", Offset = "0xCE7C24", VA = "0xCE7C24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000445")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600368A")]
				[Address(RVA = "0xCE7C6C", Offset = "0xCE7C6C", VA = "0xCE7C6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003685")]
			[Address(RVA = "0xCE7798", Offset = "0xCE7798", VA = "0xCE7798")]
			[DebuggerHidden]
			public <MoveCard>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6003686")]
			[Address(RVA = "0xCE79E8", Offset = "0xCE79E8", VA = "0xCE79E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003687")]
			[Address(RVA = "0xCE79EC", Offset = "0xCE79EC", VA = "0xCE79EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003689")]
			[Address(RVA = "0xCE7C2C", Offset = "0xCE7C2C", VA = "0xCE7C2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform cardRoot;

		[Token(Token = "0x4002C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject cardMesh;

		[Token(Token = "0x4002C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isNPCcard;

		[Token(Token = "0x4002C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhotonView photonView;

		[Token(Token = "0x4002C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerController cardHolderPlayer;

		[Token(Token = "0x4002C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4002C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4002C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Coroutine movingNumerator;

		[Token(Token = "0x4002C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityEvent OnCardUsed;

		[Token(Token = "0x4002C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent UseCard;

		[Token(Token = "0x4002C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float startTime;

		[Token(Token = "0x4002C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float journeyLength;

		[Token(Token = "0x4002C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float speed;

		[Token(Token = "0x4002C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 startMarker;

		[Token(Token = "0x17000440")]
		public string OwnerUserID
		{
			[Token(Token = "0x600366A")]
			[Address(RVA = "0xCE6A48", Offset = "0xCE6A48", VA = "0xCE6A48")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600366B")]
			[Address(RVA = "0xCE6A50", Offset = "0xCE6A50", VA = "0xCE6A50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000441")]
		public bool moving
		{
			[Token(Token = "0x600367C")]
			[Address(RVA = "0xCE7894", Offset = "0xCE7894", VA = "0xCE7894")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600367D")]
			[Address(RVA = "0xCE789C", Offset = "0xCE789C", VA = "0xCE789C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600366C")]
		[Address(RVA = "0xCE6A58", Offset = "0xCE6A58", VA = "0xCE6A58")]
		private void Awake()
		{
		}

		[Token(Token = "0x600366D")]
		[Address(RVA = "0xCE6B48", Offset = "0xCE6B48", VA = "0xCE6B48")]
		public void InitCardHolder(string HolderUserID, bool isNPS = false)
		{
		}

		[Token(Token = "0x600366E")]
		[Address(RVA = "0xCE6C8C", Offset = "0xCE6C8C", VA = "0xCE6C8C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600366F")]
		[Address(RVA = "0xCE6F88", Offset = "0xCE6F88", VA = "0xCE6F88")]
		public void SetDefaultRotationPosition(Vector3 defaultPosition, Quaternion defaultRotation)
		{
		}

		[Token(Token = "0x6003670")]
		[Address(RVA = "0xCE71A8", Offset = "0xCE71A8", VA = "0xCE71A8")]
		public void ResetCardPostion()
		{
		}

		[Token(Token = "0x6003671")]
		[Address(RVA = "0xCE7204", Offset = "0xCE7204", VA = "0xCE7204")]
		public void SetCardHolder(PlayerController cardHolderPlayer)
		{
		}

		[Token(Token = "0x6003672")]
		[Address(RVA = "0xCE720C", Offset = "0xCE720C", VA = "0xCE720C")]
		public void StopMoving()
		{
		}

		[Token(Token = "0x6003673")]
		[Address(RVA = "0xCE72BC", Offset = "0xCE72BC", VA = "0xCE72BC")]
		[PunRPC]
		private void RPC_StopMoving()
		{
		}

		[Token(Token = "0x6003674")]
		[Address(RVA = "0xCE735C", Offset = "0xCE735C", VA = "0xCE735C")]
		[PunRPC]
		private void RPC_AcceptCard(string holderUserID, bool isNPS)
		{
		}

		[Token(Token = "0x6003675")]
		[Address(RVA = "0xCE754C", Offset = "0xCE754C", VA = "0xCE754C")]
		[PunRPC]
		private void SaveDefaultRoationPosition(Vector3 defaultPosition, Quaternion defaultRotation)
		{
		}

		[Token(Token = "0x6003676")]
		[Address(RVA = "0xCE7608", Offset = "0xCE7608", VA = "0xCE7608")]
		[PunRPC]
		private void UsedCard()
		{
		}

		[Token(Token = "0x6003677")]
		[Address(RVA = "0xCE76E8", Offset = "0xCE76E8", VA = "0xCE76E8")]
		[PunRPC]
		private void RPC_UseCard()
		{
		}

		[Token(Token = "0x6003678")]
		[Address(RVA = "0xCE7674", Offset = "0xCE7674", VA = "0xCE7674")]
		[IteratorStateMachine(typeof(<CardUsedNumerator>d__26))]
		private IEnumerator CardUsedNumerator()
		{
			return null;
		}

		[Token(Token = "0x6003679")]
		[Address(RVA = "0xCE6EAC", Offset = "0xCE6EAC", VA = "0xCE6EAC")]
		[PunRPC]
		private void RPC_ResetCardPosition()
		{
		}

		[Token(Token = "0x600367A")]
		[Address(RVA = "0xCE7724", Offset = "0xCE7724", VA = "0xCE7724")]
		[IteratorStateMachine(typeof(<MoveCard>d__28))]
		private IEnumerator MoveCard()
		{
			return null;
		}

		[Token(Token = "0x600367B")]
		[Address(RVA = "0xCE77C0", Offset = "0xCE77C0", VA = "0xCE77C0")]
		private void Update()
		{
		}

		[Token(Token = "0x600367E")]
		[Address(RVA = "0xCE78A8", Offset = "0xCE78A8", VA = "0xCE78A8")]
		public ReloadCard()
		{
		}
	}
	[Token(Token = "0x200088A")]
	public class ResetGameCounter : MonoBehaviour
	{
		[Token(Token = "0x200088B")]
		[CompilerGenerated]
		private sealed class <ResetCounter>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ResetGameCounter <>4__this;

			[Token(Token = "0x17000446")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003691")]
				[Address(RVA = "0xCE7EF4", Offset = "0xCE7EF4", VA = "0xCE7EF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000447")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003693")]
				[Address(RVA = "0xCE7F3C", Offset = "0xCE7F3C", VA = "0xCE7F3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600368E")]
			[Address(RVA = "0xCE7D08", Offset = "0xCE7D08", VA = "0xCE7D08")]
			[DebuggerHidden]
			public <ResetCounter>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600368F")]
			[Address(RVA = "0xCE7D38", Offset = "0xCE7D38", VA = "0xCE7D38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003690")]
			[Address(RVA = "0xCE7D3C", Offset = "0xCE7D3C", VA = "0xCE7D3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003692")]
			[Address(RVA = "0xCE7EFC", Offset = "0xCE7EFC", VA = "0xCE7EFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text txt;

		[Token(Token = "0x600368B")]
		[Address(RVA = "0xCE7C74", Offset = "0xCE7C74", VA = "0xCE7C74")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600368C")]
		[Address(RVA = "0xCE7C94", Offset = "0xCE7C94", VA = "0xCE7C94")]
		[IteratorStateMachine(typeof(<ResetCounter>d__2))]
		private IEnumerator ResetCounter()
		{
			return null;
		}

		[Token(Token = "0x600368D")]
		[Address(RVA = "0xCE7D30", Offset = "0xCE7D30", VA = "0xCE7D30")]
		public ResetGameCounter()
		{
		}
	}
}
namespace EasyButtons
{
	[Token(Token = "0x200088C")]
	public enum ButtonMode
	{
		[Token(Token = "0x4002C97")]
		AlwaysEnabled,
		[Token(Token = "0x4002C98")]
		EnabledInPlayMode,
		[Token(Token = "0x4002C99")]
		DisabledInPlayMode
	}
	[Token(Token = "0x200088D")]
	[Flags]
	public enum ButtonSpacing
	{
		[Token(Token = "0x4002C9B")]
		None = 0,
		[Token(Token = "0x4002C9C")]
		Before = 1,
		[Token(Token = "0x4002C9D")]
		After = 2
	}
	[Token(Token = "0x200088E")]
	[AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = false)]
	public sealed class ButtonAttribute : Attribute
	{
		[Token(Token = "0x4002C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string name;

		[Token(Token = "0x4002C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ButtonMode mode;

		[Token(Token = "0x4002CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private ButtonSpacing spacing;

		[Token(Token = "0x17000448")]
		public string Name
		{
			[Token(Token = "0x6003694")]
			[Address(RVA = "0xCE7F44", Offset = "0xCE7F44", VA = "0xCE7F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000449")]
		public ButtonMode Mode
		{
			[Token(Token = "0x6003695")]
			[Address(RVA = "0xCE7F4C", Offset = "0xCE7F4C", VA = "0xCE7F4C")]
			get
			{
				return default(ButtonMode);
			}
		}

		[Token(Token = "0x1700044A")]
		public ButtonSpacing Spacing
		{
			[Token(Token = "0x6003696")]
			[Address(RVA = "0xCE7F54", Offset = "0xCE7F54", VA = "0xCE7F54")]
			get
			{
				return default(ButtonSpacing);
			}
		}

		[Token(Token = "0x6003697")]
		[Address(RVA = "0xCE7F5C", Offset = "0xCE7F5C", VA = "0xCE7F5C")]
		public ButtonAttribute()
		{
		}

		[Token(Token = "0x6003698")]
		[Address(RVA = "0xCE7F64", Offset = "0xCE7F64", VA = "0xCE7F64")]
		public ButtonAttribute(string name)
		{
		}

		[Token(Token = "0x6003699")]
		[Address(RVA = "0xCE7F94", Offset = "0xCE7F94", VA = "0xCE7F94")]
		public ButtonAttribute(ButtonMode mode)
		{
		}

		[Token(Token = "0x600369A")]
		[Address(RVA = "0xCE7FBC", Offset = "0xCE7FBC", VA = "0xCE7FBC")]
		public ButtonAttribute(ButtonSpacing spacing)
		{
		}

		[Token(Token = "0x600369B")]
		[Address(RVA = "0xCE7FE4", Offset = "0xCE7FE4", VA = "0xCE7FE4")]
		public ButtonAttribute(string name, ButtonMode mode)
		{
		}

		[Token(Token = "0x600369C")]
		[Address(RVA = "0xCE8020", Offset = "0xCE8020", VA = "0xCE8020")]
		public ButtonAttribute(string name, ButtonSpacing spacing)
		{
		}

		[Token(Token = "0x600369D")]
		[Address(RVA = "0xCE805C", Offset = "0xCE805C", VA = "0xCE805C")]
		public ButtonAttribute(string name, ButtonMode mode, ButtonSpacing spacing)
		{
		}
	}
}
