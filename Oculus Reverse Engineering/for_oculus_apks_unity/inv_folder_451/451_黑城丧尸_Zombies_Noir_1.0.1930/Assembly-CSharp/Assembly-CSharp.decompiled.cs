using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using AK.Wwise;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using SynodicArc;
using TMPro;
using Unity.AI.Navigation;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Localization;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityStandardAssets.Characters.FirstPerson;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class ConsoleProDebug
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0xBA897C", Offset = "0xBA897C", VA = "0xBA897C")]
	public static void Clear()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xBA8980", Offset = "0xBA8980", VA = "0xBA8980")]
	public static void LogToFilter(string inLog, string inFilterName, [Optional] UnityEngine.Object inContext)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xBA8A3C", Offset = "0xBA8A3C", VA = "0xBA8A3C")]
	public static void LogAsType(string inLog, string inTypeName, [Optional] UnityEngine.Object inContext)
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xBA8AF8", Offset = "0xBA8AF8", VA = "0xBA8AF8")]
	public static void Watch(string inName, string inValue)
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xBA8CE0", Offset = "0xBA8CE0", VA = "0xBA8CE0")]
	public static void Search(string inText)
	{
	}
}
[Token(Token = "0x2000003")]
[DisallowMultipleComponent]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	public enum Mode
	{
		[Token(Token = "0x400000D")]
		OutlineAll,
		[Token(Token = "0x400000E")]
		OutlineVisible,
		[Token(Token = "0x400000F")]
		OutlineHidden,
		[Token(Token = "0x4000010")]
		OutlineAndSilhouette,
		[Token(Token = "0x4000011")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000005")]
	private class ListVector3
	{
		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x6000018")]
		[Address(RVA = "0xBAA5F8", Offset = "0xBAA5F8", VA = "0xBAA5F8")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Range(0f, 10f)]
	private float outlineWidth;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Optional")]
	[SerializeField]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	private bool precomputeOutline;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x17000001")]
	public Mode OutlineMode
	{
		[Token(Token = "0x6000006")]
		[Address(RVA = "0xBA8D84", Offset = "0xBA8D84", VA = "0xBA8D84")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x6000007")]
		[Address(RVA = "0xBA8D8C", Offset = "0xBA8D8C", VA = "0xBA8D8C")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public Color OutlineColor
	{
		[Token(Token = "0x6000008")]
		[Address(RVA = "0xBA8D9C", Offset = "0xBA8D9C", VA = "0xBA8D9C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000009")]
		[Address(RVA = "0xBA8DA8", Offset = "0xBA8DA8", VA = "0xBA8DA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public float OutlineWidth
	{
		[Token(Token = "0x600000A")]
		[Address(RVA = "0xBA8DBC", Offset = "0xBA8DBC", VA = "0xBA8DBC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600000B")]
		[Address(RVA = "0xBA8DC4", Offset = "0xBA8DC4", VA = "0xBA8DC4")]
		set
		{
		}
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xBA8DD4", Offset = "0xBA8DD4", VA = "0xBA8DD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xBA9200", Offset = "0xBA9200", VA = "0xBA9200")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xBA93A0", Offset = "0xBA93A0", VA = "0xBA93A0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xBA9710", Offset = "0xBA9710", VA = "0xBA9710")]
	private void Update()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xBA98D0", Offset = "0xBA98D0", VA = "0xBA98D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xBA99E8", Offset = "0xBA99E8", VA = "0xBA99E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xBA94B8", Offset = "0xBA94B8", VA = "0xBA94B8")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xBA8F4C", Offset = "0xBA8F4C", VA = "0xBA8F4C")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xBA9A50", Offset = "0xBA9A50", VA = "0xBA9A50")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xBA9724", Offset = "0xBA9724", VA = "0xBA9724")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xBAA600", Offset = "0xBAA600", VA = "0xBAA600")]
	public Outline()
	{
	}
}
[Token(Token = "0x2000007")]
public static class DebugUtils
{
	[Token(Token = "0x600001D")]
	[Address(RVA = "0xBAA8A8", Offset = "0xBAA8A8", VA = "0xBAA8A8")]
	public static string ToString(Array array)
	{
		return null;
	}

	[Token(Token = "0x600001E")]
	public static string ToString<TKey, TValue>(Dictionary<TKey, TValue> dict)
	{
		return null;
	}
}
[Token(Token = "0x200000A")]
public class SerializableDictionaryExample : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private StringStringDictionary m_stringStringDictionary;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ObjectColorDictionary m_objectColorDictionary;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StringColorArrayDictionary m_stringColorArrayDictionary;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StringHashSet m_stringHashSet;

	[Token(Token = "0x17000004")]
	public IDictionary<string, string> StringStringDictionary
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0xBAAB14", Offset = "0xBAAB14", VA = "0xBAAB14")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000026")]
		[Address(RVA = "0xBAAB1C", Offset = "0xBAAB1C", VA = "0xBAAB1C")]
		set
		{
		}
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xBAAB74", Offset = "0xBAAB74", VA = "0xBAAB74")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xBAADB8", Offset = "0xBAADB8", VA = "0xBAADB8")]
	public SerializableDictionaryExample()
	{
	}
}
[Serializable]
[Token(Token = "0x200000B")]
public class StringStringDictionary : SerializableDictionary<string, string>
{
	[Token(Token = "0x6000029")]
	[Address(RVA = "0xBAADC0", Offset = "0xBAADC0", VA = "0xBAADC0")]
	public StringStringDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x200000C")]
public class ObjectColorDictionary : SerializableDictionary<UnityEngine.Object, Color>
{
	[Token(Token = "0x600002A")]
	[Address(RVA = "0xBAAD70", Offset = "0xBAAD70", VA = "0xBAAD70")]
	public ObjectColorDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x200000D")]
public class ColorArrayStorage : SerializableDictionary.Storage<Color[]>
{
	[Token(Token = "0x600002B")]
	[Address(RVA = "0xBAAE08", Offset = "0xBAAE08", VA = "0xBAAE08")]
	public ColorArrayStorage()
	{
	}
}
[Serializable]
[Token(Token = "0x200000E")]
public class StringColorArrayDictionary : SerializableDictionary<string, Color[], ColorArrayStorage>
{
	[Token(Token = "0x600002C")]
	[Address(RVA = "0xBAAE50", Offset = "0xBAAE50", VA = "0xBAAE50")]
	public StringColorArrayDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x200000F")]
public class MyClass
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int i;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string str;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xBAAE98", Offset = "0xBAAE98", VA = "0xBAAE98")]
	public MyClass()
	{
	}
}
[Serializable]
[Token(Token = "0x2000010")]
public class QuaternionMyClassDictionary : SerializableDictionary<Quaternion, MyClass>
{
	[Token(Token = "0x600002E")]
	[Address(RVA = "0xBAAEA0", Offset = "0xBAAEA0", VA = "0xBAAEA0")]
	public QuaternionMyClassDictionary()
	{
	}
}
[Serializable]
[Token(Token = "0x2000011")]
public class StringHashSet : SerializableHashSet<string>
{
	[Token(Token = "0x600002F")]
	[Address(RVA = "0xBAAEE8", Offset = "0xBAAEE8", VA = "0xBAAEE8")]
	public StringHashSet()
	{
	}
}
[Token(Token = "0x2000012")]
public abstract class SerializableDictionaryBase
{
	[Token(Token = "0x2000013")]
	public abstract class Storage
	{
		[Token(Token = "0x6000031")]
		[Address(RVA = "0xBAAF38", Offset = "0xBAAF38", VA = "0xBAAF38")]
		protected Storage()
		{
		}
	}

	[Token(Token = "0x2000014")]
	protected class Dictionary<TKey, TValue> : System.Collections.Generic.Dictionary<TKey, TValue>
	{
		[Token(Token = "0x6000032")]
		public Dictionary()
		{
		}

		[Token(Token = "0x6000033")]
		public Dictionary(IDictionary<TKey, TValue> dict)
		{
		}

		[Token(Token = "0x6000034")]
		public Dictionary(SerializationInfo info, StreamingContext context)
		{
		}
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xBAAF30", Offset = "0xBAAF30", VA = "0xBAAF30")]
	protected SerializableDictionaryBase()
	{
	}
}
[Serializable]
[Token(Token = "0x2000015")]
public abstract class SerializableDictionaryBase<TKey, TValue, TValueStorage> : SerializableDictionaryBase, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary, ICollection, ISerializationCallbackReceiver, IDeserializationCallback, ISerializable
{
	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<TKey, TValue> m_dict;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private TKey[] m_keys;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private TValueStorage[] m_values;

	[Token(Token = "0x17000005")]
	public ICollection<TKey> Keys
	{
		[Token(Token = "0x600003C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public ICollection<TValue> Values
	{
		[Token(Token = "0x600003D")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000007")]
	public int Count
	{
		[Token(Token = "0x600003E")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000008")]
	public bool IsReadOnly
	{
		[Token(Token = "0x600003F")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000009")]
	public TValue this[TKey key]
	{
		[Token(Token = "0x6000040")]
		get
		{
			return (TValue)null;
		}
		[Token(Token = "0x6000041")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public bool IsFixedSize
	{
		[Token(Token = "0x600004D")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	private ICollection System.Collections.IDictionary.Keys
	{
		[Token(Token = "0x600004E")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	private ICollection System.Collections.IDictionary.Values
	{
		[Token(Token = "0x600004F")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public bool IsSynchronized
	{
		[Token(Token = "0x6000050")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000E")]
	public object SyncRoot
	{
		[Token(Token = "0x6000051")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	public object this[object key]
	{
		[Token(Token = "0x6000052")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000053")]
		set
		{
		}
	}

	[Token(Token = "0x6000035")]
	public SerializableDictionaryBase()
	{
	}

	[Token(Token = "0x6000036")]
	public SerializableDictionaryBase(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x6000037")]
	protected abstract void SetValue(TValueStorage[] storage, int i, TValue value);

	[Token(Token = "0x6000038")]
	protected abstract TValue GetValue(TValueStorage[] storage, int i);

	[Token(Token = "0x6000039")]
	public void CopyFrom(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x600003A")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x600003B")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000042")]
	public void Add(TKey key, TValue value)
	{
	}

	[Token(Token = "0x6000043")]
	public bool ContainsKey(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000044")]
	public bool Remove(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000045")]
	public bool TryGetValue(TKey key, out TValue value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000046")]
	public void Add(KeyValuePair<TKey, TValue> item)
	{
	}

	[Token(Token = "0x6000047")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000048")]
	public bool Contains(KeyValuePair<TKey, TValue> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000049")]
	public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x600004A")]
	public bool Remove(KeyValuePair<TKey, TValue> item)
	{
		return default(bool);
	}

	[Token(Token = "0x600004B")]
	public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x600004C")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	public void Add(object key, object value)
	{
	}

	[Token(Token = "0x6000055")]
	public bool Contains(object key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000056")]
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000057")]
	public void Remove(object key)
	{
	}

	[Token(Token = "0x6000058")]
	public void CopyTo(Array array, int index)
	{
	}

	[Token(Token = "0x6000059")]
	public void OnDeserialization(object sender)
	{
	}

	[Token(Token = "0x600005A")]
	protected SerializableDictionaryBase(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x600005B")]
	public void GetObjectData(SerializationInfo info, StreamingContext context)
	{
	}
}
[Token(Token = "0x2000016")]
public static class SerializableDictionary
{
	[Token(Token = "0x2000017")]
	public class Storage<T> : SerializableDictionaryBase.Storage
	{
		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T data;

		[Token(Token = "0x600005C")]
		public Storage()
		{
		}
	}
}
[Serializable]
[Token(Token = "0x2000018")]
public class SerializableDictionary<TKey, TValue> : SerializableDictionaryBase<TKey, TValue, TValue>
{
	[Token(Token = "0x600005D")]
	public SerializableDictionary()
	{
	}

	[Token(Token = "0x600005E")]
	public SerializableDictionary(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x600005F")]
	protected SerializableDictionary(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x6000060")]
	protected override TValue GetValue(TValue[] storage, int i)
	{
		return (TValue)null;
	}

	[Token(Token = "0x6000061")]
	protected override void SetValue(TValue[] storage, int i, TValue value)
	{
	}
}
[Serializable]
[Token(Token = "0x2000019")]
public class SerializableDictionary<TKey, TValue, TValueStorage> : SerializableDictionaryBase<TKey, TValue, TValueStorage> where TValueStorage : SerializableDictionary.Storage<TValue>, new()
{
	[Token(Token = "0x6000062")]
	public SerializableDictionary()
	{
	}

	[Token(Token = "0x6000063")]
	public SerializableDictionary(IDictionary<TKey, TValue> dict)
	{
	}

	[Token(Token = "0x6000064")]
	protected SerializableDictionary(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x6000065")]
	protected override TValue GetValue(TValueStorage[] storage, int i)
	{
		return (TValue)null;
	}

	[Token(Token = "0x6000066")]
	protected override void SetValue(TValueStorage[] storage, int i, TValue value)
	{
	}
}
[Token(Token = "0x200001A")]
public abstract class SerializableHashSetBase
{
	[Token(Token = "0x200001B")]
	public abstract class Storage
	{
		[Token(Token = "0x6000068")]
		[Address(RVA = "0xBAAF48", Offset = "0xBAAF48", VA = "0xBAAF48")]
		protected Storage()
		{
		}
	}

	[Token(Token = "0x200001C")]
	protected class HashSet<TValue> : System.Collections.Generic.HashSet<TValue>
	{
		[Token(Token = "0x6000069")]
		public HashSet()
		{
		}

		[Token(Token = "0x600006A")]
		public HashSet(ISet<TValue> set)
		{
		}

		[Token(Token = "0x600006B")]
		public HashSet(SerializationInfo info, StreamingContext context)
		{
		}
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xBAAF40", Offset = "0xBAAF40", VA = "0xBAAF40")]
	protected SerializableHashSetBase()
	{
	}
}
[Serializable]
[Token(Token = "0x200001D")]
public abstract class SerializableHashSet<T> : SerializableHashSetBase, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable, ISerializationCallbackReceiver, IDeserializationCallback, ISerializable
{
	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private HashSet<T> m_hashSet;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private T[] m_keys;

	[Token(Token = "0x17000010")]
	public int Count
	{
		[Token(Token = "0x6000071")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000011")]
	public bool IsReadOnly
	{
		[Token(Token = "0x6000072")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600006C")]
	public SerializableHashSet()
	{
	}

	[Token(Token = "0x600006D")]
	public SerializableHashSet(ISet<T> set)
	{
	}

	[Token(Token = "0x600006E")]
	public void CopyFrom(ISet<T> set)
	{
	}

	[Token(Token = "0x600006F")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000070")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000073")]
	public bool Add(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000074")]
	public void ExceptWith(IEnumerable<T> other)
	{
	}

	[Token(Token = "0x6000075")]
	public void IntersectWith(IEnumerable<T> other)
	{
	}

	[Token(Token = "0x6000076")]
	public bool IsProperSubsetOf(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000077")]
	public bool IsProperSupersetOf(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000078")]
	public bool IsSubsetOf(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000079")]
	public bool IsSupersetOf(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x600007A")]
	public bool Overlaps(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x600007B")]
	public bool SetEquals(IEnumerable<T> other)
	{
		return default(bool);
	}

	[Token(Token = "0x600007C")]
	public void SymmetricExceptWith(IEnumerable<T> other)
	{
	}

	[Token(Token = "0x600007D")]
	public void UnionWith(IEnumerable<T> other)
	{
	}

	[Token(Token = "0x600007E")]
	private void System.Collections.Generic.ICollection<T>.Add(T item)
	{
	}

	[Token(Token = "0x600007F")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000080")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000081")]
	public void CopyTo(T[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6000082")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000083")]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	public void OnDeserialization(object sender)
	{
	}

	[Token(Token = "0x6000086")]
	protected SerializableHashSet(SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x6000087")]
	public void GetObjectData(SerializationInfo info, StreamingContext context)
	{
	}
}
[Token(Token = "0x200001E")]
[RequireComponent(typeof(NavMeshAgent))]
public class ClickToMove : MonoBehaviour
{
	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RaycastHit hitInfo;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshAgent agent;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xBAAF50", Offset = "0xBAAF50", VA = "0xBAAF50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xBAAFA0", Offset = "0xBAAFA0", VA = "0xBAAFA0")]
	private void Update()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xBAB094", Offset = "0xBAB094", VA = "0xBAB094")]
	public ClickToMove()
	{
	}
}
[Token(Token = "0x200001F")]
public class DetectPlayerBox : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool bContainsPlayer;

	[Token(Token = "0x14000001")]
	public event Action OnLeftPlayerBox
	{
		[Token(Token = "0x600008B")]
		[Address(RVA = "0xBAB09C", Offset = "0xBAB09C", VA = "0xBAB09C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600008C")]
		[Address(RVA = "0xBAB138", Offset = "0xBAB138", VA = "0xBAB138")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xBAB1D4", Offset = "0xBAB1D4", VA = "0xBAB1D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xBAB2CC", Offset = "0xBAB2CC", VA = "0xBAB2CC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xBAB390", Offset = "0xBAB390", VA = "0xBAB390")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xBAB454", Offset = "0xBAB454", VA = "0xBAB454")]
	private void OnCollisionExit(Collision other)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xBAB4E4", Offset = "0xBAB4E4", VA = "0xBAB4E4")]
	public DetectPlayerBox()
	{
	}
}
[Token(Token = "0x2000021")]
public class IKPuppet : MonoBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator anim;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float weight;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isHandMode;

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xBAB63C", Offset = "0xBAB63C", VA = "0xBAB63C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xBAB68C", Offset = "0xBAB68C", VA = "0xBAB68C")]
	private void OnAnimatorIK(int layerIndex)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xBAB770", Offset = "0xBAB770", VA = "0xBAB770")]
	private void Update()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xBAB93C", Offset = "0xBAB93C", VA = "0xBAB93C")]
	public IKPuppet()
	{
	}
}
[Token(Token = "0x2000022")]
[RequireComponent(typeof(NavMeshAgent))]
[RequireComponent(typeof(Animator))]
public class LocomotionSimpleAgent : MonoBehaviour
{
	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavMeshAgent agent;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 smoothDeltaPosition;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 velocity;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xBAB954", Offset = "0xBAB954", VA = "0xBAB954")]
	private void Start()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xBAB9D0", Offset = "0xBAB9D0", VA = "0xBAB9D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xBABD00", Offset = "0xBABD00", VA = "0xBABD00")]
	private void OnAnimatorMove()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xBABD40", Offset = "0xBABD40", VA = "0xBABD40")]
	public LocomotionSimpleAgent()
	{
	}
}
[Token(Token = "0x2000023")]
[RequireComponent(typeof(Animator))]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform head;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 lookAtTargetPosition;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lookAtCoolTime;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lookAtHeatTime;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool looking;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lookAtPosition;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Animator anim;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float lookAtWeight;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xBABDA4", Offset = "0xBABDA4", VA = "0xBABDA4")]
	private void Start()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xBABF00", Offset = "0xBABF00", VA = "0xBABF00")]
	private void OnAnimatorIK()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xBAC09C", Offset = "0xBAC09C", VA = "0xBAC09C")]
	public LookAt()
	{
	}
}
[Token(Token = "0x2000024")]
public class PrototypeObstacleSpawnManager : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject obstaclePrefab;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject floorPrefab;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float spawnRadius;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int numObstacles;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private NavMeshSurface navSurface;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timeToWait;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool hasBuiltNavMesh;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xBAC0BC", Offset = "0xBAC0BC", VA = "0xBAC0BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xBAC264", Offset = "0xBAC264", VA = "0xBAC264")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xBAC268", Offset = "0xBAC268", VA = "0xBAC268")]
	public PrototypeObstacleSpawnManager()
	{
	}
}
[Token(Token = "0x2000025")]
public class ZombieScript : MonoBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject player;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NavMeshAgent agent;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool playerInFront;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private DetectPlayerBox boxCollider;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool isRootMotionMove;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xBAC27C", Offset = "0xBAC27C", VA = "0xBAC27C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xBAC348", Offset = "0xBAC348", VA = "0xBAC348")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xBAC594", Offset = "0xBAC594", VA = "0xBAC594")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xBAC598", Offset = "0xBAC598", VA = "0xBAC598")]
	private bool DetectPlayerInFront()
	{
		return default(bool);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xBACACC", Offset = "0xBACACC", VA = "0xBACACC")]
	private void OnAnimatorMove()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xBACB4C", Offset = "0xBACB4C", VA = "0xBACB4C")]
	public ZombieScript()
	{
	}
}
[Token(Token = "0x2000026")]
[CreateAssetMenu(fileName = "ZNFinishIntermissionActivityAsset", menuName = "Scriptable Objects/Activities/ZNFinishIntermissionActivityAsset")]
public class ZNFinishIntermissionActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Optional Message to display while this activity is active")]
	[SerializeField]
	protected ZNTutorialPromptAsset OptionalMessage;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xBACB54", Offset = "0xBACB54", VA = "0xBACB54", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xBACC48", Offset = "0xBACC48", VA = "0xBACC48")]
	public ZNTutorialPromptAsset GetOptionalMessage()
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xBACC50", Offset = "0xBACC50", VA = "0xBACC50")]
	public ZNFinishIntermissionActivityAsset()
	{
	}
}
[Token(Token = "0x2000027")]
public class ZNFinishIntermissionActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNFinishIntermissionActivityAsset FinishIntermissionActivityAsset;

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xBACC58", Offset = "0xBACC58", VA = "0xBACC58")]
	protected void Start()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xBACC5C", Offset = "0xBACC5C", VA = "0xBACC5C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xBACDB0", Offset = "0xBACDB0", VA = "0xBACDB0", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xBAD0CC", Offset = "0xBAD0CC", VA = "0xBAD0CC")]
	protected void OnGamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xBAD210", Offset = "0xBAD210", VA = "0xBAD210")]
	public ZNFinishIntermissionActivityInstance()
	{
	}
}
[Token(Token = "0x2000028")]
[CreateAssetMenu(fileName = "ZNFinishWaveActivityAsset", menuName = "Scriptable Objects/Activities/ZNFinishWaveActivityAsset")]
public class ZNFinishWaveActivityAsset : SAActivityAsset
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Optional Message to display while this activity is active")]
	[SerializeField]
	protected ZNTutorialPromptAsset OptionalMessage;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xBAD220", Offset = "0xBAD220", VA = "0xBAD220", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xBAD314", Offset = "0xBAD314", VA = "0xBAD314")]
	public ZNTutorialPromptAsset GetOptionalMessage()
	{
		return null;
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xBAD31C", Offset = "0xBAD31C", VA = "0xBAD31C")]
	public ZNFinishWaveActivityAsset()
	{
	}
}
[Token(Token = "0x2000029")]
public class ZNFinishWaveActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNFinishWaveActivityAsset FinishWaveActivityAsset;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xBAD324", Offset = "0xBAD324", VA = "0xBAD324")]
	protected void Start()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xBAD328", Offset = "0xBAD328", VA = "0xBAD328", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xBAD47C", Offset = "0xBAD47C", VA = "0xBAD47C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xBAD690", Offset = "0xBAD690", VA = "0xBAD690")]
	protected void OnGamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xBAD6DC", Offset = "0xBAD6DC", VA = "0xBAD6DC")]
	public ZNFinishWaveActivityInstance()
	{
	}
}
[Token(Token = "0x200002A")]
[CreateAssetMenu(fileName = "ZNEjectMagazineActivityAsset", menuName = "Scriptable Objects/Activities/ZNEjectMagazineActivityAsset")]
public class ZNEjectMagazineActivityAsset : ZNTrackedWeaponActivityAsset
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The number of times needed to eject the magazine")]
	protected int NumEjectsRequired;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xBAD6E4", Offset = "0xBAD6E4", VA = "0xBAD6E4", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xBAD8C8", Offset = "0xBAD8C8", VA = "0xBAD8C8")]
	public int GetNumEjectsRequired()
	{
		return default(int);
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xBAD8D0", Offset = "0xBAD8D0", VA = "0xBAD8D0")]
	public ZNEjectMagazineActivityAsset()
	{
	}
}
[Token(Token = "0x200002B")]
public class ZNEjectMagazineActivityInstance : ZNTrackedWeaponActivityInstance
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNEjectMagazineActivityAsset EjectMagazineActivityAsset;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int CurrentNumEjects;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xBAD8E8", Offset = "0xBAD8E8", VA = "0xBAD8E8", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xBADC84", Offset = "0xBADC84", VA = "0xBADC84", Slot = "11")]
	protected override void CharacterReceivedTrackedWeapon(ZNWeaponBase GainedWeapon)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xBADDD4", Offset = "0xBADDD4", VA = "0xBADDD4", Slot = "12")]
	protected override void CharacterRemovedTrackedWeapon(ZNWeaponBase RemovedWeapon)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xBADF20", Offset = "0xBADF20", VA = "0xBADF20")]
	protected void MagEjected(ZNMag EjectedMag)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xBADFE0", Offset = "0xBADFE0", VA = "0xBADFE0")]
	public ZNEjectMagazineActivityInstance()
	{
	}
}
[Token(Token = "0x200002C")]
[CreateAssetMenu(fileName = "ZNGrabMagazineActivityAsset", menuName = "Scriptable Objects/Activities/ZNGrabMagazineActivityAsset")]
public class ZNGrabMagazineActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The number of times needed to grab the magazine")]
	[SerializeField]
	protected int NumGrabsRequired;

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xBAE060", Offset = "0xBAE060", VA = "0xBAE060", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xBAE154", Offset = "0xBAE154", VA = "0xBAE154")]
	public int GetNumGrabsRequired()
	{
		return default(int);
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xBAE15C", Offset = "0xBAE15C", VA = "0xBAE15C")]
	public ZNGrabMagazineActivityAsset()
	{
	}
}
[Token(Token = "0x200002D")]
public class ZNGrabMagazineActivityInstance : SAActivityInstance
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNGrabMagazineActivityAsset GrabMagazineActivityAsset;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentNumGrabs;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xBAE16C", Offset = "0xBAE16C", VA = "0xBAE16C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xBAE2C4", Offset = "0xBAE2C4", VA = "0xBAE2C4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xBAE478", Offset = "0xBAE478", VA = "0xBAE478")]
	private void CharacterGrabbedObject(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xBAE540", Offset = "0xBAE540", VA = "0xBAE540")]
	protected void MagGrabbed(ZNMag GrabbedMag)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xBAE600", Offset = "0xBAE600", VA = "0xBAE600")]
	public ZNGrabMagazineActivityInstance()
	{
	}
}
[Token(Token = "0x200002E")]
[CreateAssetMenu(fileName = "ZNPeashooterReloadActivityAsset", menuName = "Scriptable Objects/Activities/ZNPeashooterReloadActivityAsset")]
public class ZNPeashooterReloadActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("If the above checkbox is true, this is the weapon asset that is tracked for firing.")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Tutorial Asset used to tell how to eject magazine")]
	[SerializeField]
	protected ZNTutorialPromptAsset MagEjectTutorial;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("Tutorial Asset used to tell how to grab magazine")]
	protected ZNTutorialPromptAsset MagGrabTutorial;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("Tutorial Asset used to tell how to insert mag, and slide back gun")]
	protected ZNTutorialPromptAsset InsertNSlideTutorial;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xBAE608", Offset = "0xBAE608", VA = "0xBAE608", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xBAE6FC", Offset = "0xBAE6FC", VA = "0xBAE6FC")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xBAE704", Offset = "0xBAE704", VA = "0xBAE704")]
	public ZNTutorialPromptAsset GetMagEjectTutorial()
	{
		return null;
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xBAE70C", Offset = "0xBAE70C", VA = "0xBAE70C")]
	public ZNTutorialPromptAsset GetMagGrabTutorial()
	{
		return null;
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xBAE714", Offset = "0xBAE714", VA = "0xBAE714")]
	public ZNTutorialPromptAsset GetInsertNSlideTutorial()
	{
		return null;
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xBAE71C", Offset = "0xBAE71C", VA = "0xBAE71C")]
	public ZNPeashooterReloadActivityAsset()
	{
	}
}
[Token(Token = "0x200002F")]
public class ZNPeashooterReloadActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNPeashooterReloadActivityAsset PeashooterReloadActivityAsset;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNPeashooter TrackedPeashooter;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected int ReloadProgress;

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xBAE724", Offset = "0xBAE724", VA = "0xBAE724", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xBAE72C", Offset = "0xBAE72C", VA = "0xBAE72C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xBAEA08", Offset = "0xBAEA08", VA = "0xBAEA08")]
	protected void StartMagazineEject()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xBAEB18", Offset = "0xBAEB18", VA = "0xBAEB18")]
	protected void StartGrabMagazine()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xBAEC38", Offset = "0xBAEC38", VA = "0xBAEC38")]
	protected void StartSlide()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xBAEC54", Offset = "0xBAEC54", VA = "0xBAEC54")]
	protected void MagEjected(ZNMag EjectedMag)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xBAED9C", Offset = "0xBAED9C", VA = "0xBAED9C")]
	protected void MagGrabbed(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xBAEF6C", Offset = "0xBAEF6C", VA = "0xBAEF6C")]
	protected void WeaponReloaded(ZNWeaponBase ReloadedWeapon)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xBAF114", Offset = "0xBAF114", VA = "0xBAF114")]
	public ZNPeashooterReloadActivityInstance()
	{
	}
}
[Token(Token = "0x2000030")]
[CreateAssetMenu(fileName = "ZNReloadWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNReloadWeaponActivityAsset")]
public class ZNReloadWeaponActivityAsset : ZNTrackedWeaponActivityAsset
{
	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The number of times needed to reload the weapon")]
	[SerializeField]
	protected int NumReloadsRequired;

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xBAF11C", Offset = "0xBAF11C", VA = "0xBAF11C", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xBAF20C", Offset = "0xBAF20C", VA = "0xBAF20C")]
	public int GetNumReloadsRequired()
	{
		return default(int);
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xBAF214", Offset = "0xBAF214", VA = "0xBAF214")]
	public ZNReloadWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x2000031")]
public class ZNReloadWeaponActivityInstance : ZNTrackedWeaponActivityInstance
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNReloadWeaponActivityAsset ReloadWeaponActivityAsset;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int CurrentNumReloads;

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xBAF224", Offset = "0xBAF224", VA = "0xBAF224", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xBAF2B8", Offset = "0xBAF2B8", VA = "0xBAF2B8", Slot = "11")]
	protected override void CharacterReceivedTrackedWeapon(ZNWeaponBase GainedWeapon)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xBAF404", Offset = "0xBAF404", VA = "0xBAF404", Slot = "12")]
	protected override void CharacterRemovedTrackedWeapon(ZNWeaponBase RemovedWeapon)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xBAF550", Offset = "0xBAF550", VA = "0xBAF550")]
	private void GunReloaded(ZNGunWeapon ReloadedWeapon)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xBAF610", Offset = "0xBAF610", VA = "0xBAF610")]
	public ZNReloadWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x2000032")]
[CreateAssetMenu(fileName = "ZNAvoidGettingHitObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNAvoidGettingHitObjectiveAsset")]
public class ZNAvoidGettingHitObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xBAF614", Offset = "0xBAF614", VA = "0xBAF614", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xBAF8A0", Offset = "0xBAF8A0", VA = "0xBAF8A0")]
	public int GetStartingRemainingHits(int InNumberOfEnemiesForWave)
	{
		return default(int);
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xBAF8A8", Offset = "0xBAF8A8", VA = "0xBAF8A8")]
	public ZNAvoidGettingHitObjectiveAsset()
	{
	}
}
[Token(Token = "0x2000033")]
public class ZNAvoidGettingHitObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNAvoidGettingHitObjectiveAsset AvoidGettingHitObjectiveAsset;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumHitsRemaining;

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xBAF8B8", Offset = "0xBAF8B8", VA = "0xBAF8B8")]
	protected void Start()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xBAF9BC", Offset = "0xBAF9BC", VA = "0xBAF9BC", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xBAFBD4", Offset = "0xBAFBD4", VA = "0xBAFBD4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xBAFE80", Offset = "0xBAFE80", VA = "0xBAFE80", Slot = "11")]
	protected override void InitializeObjectiveTierDictionary()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xBB0088", Offset = "0xBB0088", VA = "0xBB0088")]
	private void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xBB0130", Offset = "0xBB0130", VA = "0xBB0130", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xBB0138", Offset = "0xBB0138", VA = "0xBB0138")]
	public ZNAvoidGettingHitObjectiveInstance()
	{
	}
}
[Token(Token = "0x2000034")]
[CreateAssetMenu(fileName = "ZNDifferentWeaponKillObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNDifferentWeaponKillObjectiveAsset")]
public class ZNDifferentWeaponKillObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xBB01B8", Offset = "0xBB01B8", VA = "0xBB01B8", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xBB02A8", Offset = "0xBB02A8", VA = "0xBB02A8", Slot = "9")]
	public override bool IsPotentialObjective([Optional] GameObject InReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xBB03B4", Offset = "0xBB03B4", VA = "0xBB03B4")]
	public ZNDifferentWeaponKillObjectiveAsset()
	{
	}
}
[Token(Token = "0x2000035")]
public class ZNDifferentWeaponKillObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNDifferentWeaponKillObjectiveAsset DifferentWeaponKillObjectiveAsset;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumDifferentWeaponKills;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected ZNWeaponAsset PreviousKillingWeaponAsset;

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xBB03BC", Offset = "0xBB03BC", VA = "0xBB03BC")]
	protected void Start()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xBB04C0", Offset = "0xBB04C0", VA = "0xBB04C0", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xBB05C8", Offset = "0xBB05C8", VA = "0xBB05C8", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xBB0650", Offset = "0xBB0650", VA = "0xBB0650")]
	private void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xBB0758", Offset = "0xBB0758", VA = "0xBB0758", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xBB0760", Offset = "0xBB0760", VA = "0xBB0760")]
	public ZNDifferentWeaponKillObjectiveInstance()
	{
	}
}
[Token(Token = "0x2000036")]
[CreateAssetMenu(fileName = "ZNFastClearObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNFastClearObjectiveAsset")]
public class ZNFastClearObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Seconds required per enemy for the objective tier")]
	[SerializeField]
	protected SerializableDictionary<EZNObjectiveTiers, float> SecondsPerEnemyDictionary;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xBB0764", Offset = "0xBB0764", VA = "0xBB0764", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xBB08F0", Offset = "0xBB08F0", VA = "0xBB08F0", Slot = "8")]
	public override int GetRequiredProgressForTier(EZNObjectiveTiers InTier, int InNumberOfEnemiesForWave)
	{
		return default(int);
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xBB09C0", Offset = "0xBB09C0", VA = "0xBB09C0")]
	public int GetStartingRemainingTime(int InNumberOfEnemiesForWave)
	{
		return default(int);
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xBB0A6C", Offset = "0xBB0A6C", VA = "0xBB0A6C")]
	public ZNFastClearObjectiveAsset()
	{
	}
}
[Token(Token = "0x2000037")]
public class ZNFastClearObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNFastClearObjectiveAsset FastClearObjectiveAsset;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected float ActiveTime;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected int DisplayedTime;

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xBB0A74", Offset = "0xBB0A74", VA = "0xBB0A74")]
	protected void Update()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xBB0B74", Offset = "0xBB0B74", VA = "0xBB0B74", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xBB0CA4", Offset = "0xBB0CA4", VA = "0xBB0CA4", Slot = "11")]
	protected override void InitializeObjectiveTierDictionary()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xBB0D7C", Offset = "0xBB0D7C", VA = "0xBB0D7C", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xBB0D84", Offset = "0xBB0D84", VA = "0xBB0D84")]
	public ZNFastClearObjectiveInstance()
	{
	}
}
[Token(Token = "0x2000038")]
[CreateAssetMenu(fileName = "ZNHeadshotKillObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNHeadshotKillObjectiveAsset")]
public class ZNHeadshotKillObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xBB0D88", Offset = "0xBB0D88", VA = "0xBB0D88", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xBB0E78", Offset = "0xBB0E78", VA = "0xBB0E78")]
	public ZNHeadshotKillObjectiveAsset()
	{
	}
}
[Token(Token = "0x2000039")]
public class ZNHeadshotKillObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNHeadshotKillObjectiveAsset HeadshotKillObjectiveAsset;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumHeadshotKills;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xBB0E80", Offset = "0xBB0E80", VA = "0xBB0E80")]
	protected void Start()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xBB0F84", Offset = "0xBB0F84", VA = "0xBB0F84", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xBB108C", Offset = "0xBB108C", VA = "0xBB108C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xBB1120", Offset = "0xBB1120", VA = "0xBB1120")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xBB1150", Offset = "0xBB1150", VA = "0xBB1150", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xBB1158", Offset = "0xBB1158", VA = "0xBB1158")]
	public ZNHeadshotKillObjectiveInstance()
	{
	}
}
[Token(Token = "0x200003A")]
[CreateAssetMenu(fileName = "ZNObjectiveActivityAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNObjectiveActivityAsset")]
public class ZNObjectiveActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("Percent of objective for reward")]
	protected SerializableDictionary<EZNObjectiveTiers, double> ObjectivePercentages;

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xBAF704", Offset = "0xBAF704", VA = "0xBAF704", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xBB115C", Offset = "0xBB115C", VA = "0xBB115C")]
	protected double GetPercentageByTier(EZNObjectiveTiers InTier)
	{
		return default(double);
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xBB11F0", Offset = "0xBB11F0", VA = "0xBB11F0", Slot = "8")]
	public virtual int GetRequiredProgressForTier(EZNObjectiveTiers InTier, int InNumberOfEnemiesForWave)
	{
		return default(int);
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xBB1274", Offset = "0xBB1274", VA = "0xBB1274", Slot = "9")]
	public virtual bool IsPotentialObjective([Optional] GameObject InReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xBAF8B0", Offset = "0xBAF8B0", VA = "0xBAF8B0")]
	public ZNObjectiveActivityAsset()
	{
	}
}
[Token(Token = "0x200003B")]
public class ZNObjectiveActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNObjectiveActivityAsset ObjectiveActivityAsset;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FOnObjectiveTierChanged OnObjectiveTierChangedDel;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int NumEnemiesForWave;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected EZNObjectiveTiers CurrentTier;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Dictionary<EZNObjectiveTiers, int> ObjectiveTierDictionary;

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xBB127C", Offset = "0xBB127C", VA = "0xBB127C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xBAFAC4", Offset = "0xBAFAC4", VA = "0xBAFAC4", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xBAFCF0", Offset = "0xBAFCF0", VA = "0xBAFCF0", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xBAFF58", Offset = "0xBAFF58", VA = "0xBAFF58", Slot = "11")]
	protected virtual void InitializeObjectiveTierDictionary()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xBB1450", Offset = "0xBB1450", VA = "0xBB1450", Slot = "7")]
	protected override void NotifyActivityProgressUpdated()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xBB1474", Offset = "0xBB1474", VA = "0xBB1474", Slot = "12")]
	protected virtual void CalculateObjectiveTier()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xBB15DC", Offset = "0xBB15DC", VA = "0xBB15DC")]
	protected void SetObjectiveTier(EZNObjectiveTiers InTier)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xBB1608", Offset = "0xBB1608", VA = "0xBB1608", Slot = "13")]
	public virtual void GrantObjectiveRewards()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xBB182C", Offset = "0xBB182C", VA = "0xBB182C")]
	protected int GetRewardForObjectiveTier(EZNObjectiveTiers InTier)
	{
		return default(int);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xBB185C", Offset = "0xBB185C", VA = "0xBB185C")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xBB18E0", Offset = "0xBB18E0", VA = "0xBB18E0")]
	public ZNObjectiveActivityAsset GetObjectiveActivityAsset()
	{
		return null;
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xBB18E8", Offset = "0xBB18E8", VA = "0xBB18E8")]
	public EZNObjectiveTiers GetCurrentObjectiveTier()
	{
		return default(EZNObjectiveTiers);
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xBB18F0", Offset = "0xBB18F0", VA = "0xBB18F0")]
	public int GetRequiredProgressForTier(EZNObjectiveTiers InTier)
	{
		return default(int);
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xBB013C", Offset = "0xBB013C", VA = "0xBB013C")]
	public ZNObjectiveActivityInstance()
	{
	}
}
[Token(Token = "0x200003C")]
[CreateAssetMenu(fileName = "ZNOutsideKillObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNOutsideKillObjectiveAsset")]
public class ZNOutsideKillObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x6000117")]
	[Address(RVA = "0xBB1948", Offset = "0xBB1948", VA = "0xBB1948", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xBB1A38", Offset = "0xBB1A38", VA = "0xBB1A38")]
	public ZNOutsideKillObjectiveAsset()
	{
	}
}
[Token(Token = "0x200003D")]
public class ZNOutsideKillObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNOutsideKillObjectiveAsset OutsideKillObjectiveAsset;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumOutsideKills;

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xBB1A40", Offset = "0xBB1A40", VA = "0xBB1A40")]
	protected void Start()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xBB1B44", Offset = "0xBB1B44", VA = "0xBB1B44", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xBB1C4C", Offset = "0xBB1C4C", VA = "0xBB1C4C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xBB1CE0", Offset = "0xBB1CE0", VA = "0xBB1CE0")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xBB1E5C", Offset = "0xBB1E5C", VA = "0xBB1E5C", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xBB1E64", Offset = "0xBB1E64", VA = "0xBB1E64")]
	public ZNOutsideKillObjectiveInstance()
	{
	}
}
[Token(Token = "0x200003E")]
[CreateAssetMenu(fileName = "ZNStaggerZombieObjectiveAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNStaggerZombieObjectiveAsset")]
public class ZNStaggerZombieObjectiveAsset : ZNObjectiveActivityAsset
{
	[Token(Token = "0x600011F")]
	[Address(RVA = "0xBB1E68", Offset = "0xBB1E68", VA = "0xBB1E68", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xBB1F58", Offset = "0xBB1F58", VA = "0xBB1F58")]
	public ZNStaggerZombieObjectiveAsset()
	{
	}
}
[Token(Token = "0x200003F")]
public class ZNStaggerZombieObjectiveInstance : ZNObjectiveActivityInstance
{
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNStaggerZombieObjectiveAsset StaggerZombieObjectiveAsset;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumStaggerZombies;

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xBB1F60", Offset = "0xBB1F60", VA = "0xBB1F60")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xBB2064", Offset = "0xBB2064", VA = "0xBB2064", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xBB216C", Offset = "0xBB216C", VA = "0xBB216C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xBB2200", Offset = "0xBB2200", VA = "0xBB2200")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xBB2224", Offset = "0xBB2224", VA = "0xBB2224", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xBB222C", Offset = "0xBB222C", VA = "0xBB222C")]
	public ZNStaggerZombieObjectiveInstance()
	{
	}
}
[Token(Token = "0x2000040")]
[CreateAssetMenu(fileName = "ZNDoorPlacementActivityAsset", menuName = "Scriptable Objects/Activities/ZNDoorPlacementActivityAsset")]
public class ZNDoorPlacementActivityAsset : SAActivityAsset
{
	[Token(Token = "0x6000127")]
	[Address(RVA = "0xBB2230", Offset = "0xBB2230", VA = "0xBB2230", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xBB2324", Offset = "0xBB2324", VA = "0xBB2324")]
	public ZNDoorPlacementActivityAsset()
	{
	}
}
[Token(Token = "0x2000041")]
public class ZNDoorPlacementActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNDoorPlacementActivityAsset DoorPlacementActivityAsset;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentShots;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected List<ZNWeaponBase> TrackedWeapons;

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xBB232C", Offset = "0xBB232C", VA = "0xBB232C")]
	protected void Start()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xBB2330", Offset = "0xBB2330", VA = "0xBB2330", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xBB2338", Offset = "0xBB2338", VA = "0xBB2338", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xBB23F8", Offset = "0xBB23F8", VA = "0xBB23F8")]
	public ZNDoorPlacementActivityInstance()
	{
	}
}
[Token(Token = "0x2000042")]
[CreateAssetMenu(fileName = "ZNSetupPhaseActivityAsset", menuName = "Scriptable Objects/Activities/ZNSetupPhaseActivityAsset")]
public class ZNSetupPhaseActivityAsset : SAActivityAsset
{
	[Token(Token = "0x600012D")]
	[Address(RVA = "0xBB2474", Offset = "0xBB2474", VA = "0xBB2474", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xBB2568", Offset = "0xBB2568", VA = "0xBB2568")]
	public ZNSetupPhaseActivityAsset()
	{
	}
}
[Token(Token = "0x2000043")]
public class ZNSetupPhaseActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNSetupPhaseActivityAsset SetupActivityAsset;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xBB2570", Offset = "0xBB2570", VA = "0xBB2570")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xBB2574", Offset = "0xBB2574", VA = "0xBB2574", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xBB26F4", Offset = "0xBB26F4", VA = "0xBB26F4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xBB28F0", Offset = "0xBB28F0", VA = "0xBB28F0")]
	protected void SetupPhaseComplete()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xBB2A6C", Offset = "0xBB2A6C", VA = "0xBB2A6C")]
	public ZNSetupPhaseActivityInstance()
	{
	}
}
[Token(Token = "0x2000044")]
[CreateAssetMenu(fileName = "ZNStorePlacementActivityAsset", menuName = "Scriptable Objects/Activities/ZNStorePlacementActivityAsset")]
public class ZNStorePlacementActivityAsset : SAActivityAsset
{
	[Token(Token = "0x6000134")]
	[Address(RVA = "0xBB2A74", Offset = "0xBB2A74", VA = "0xBB2A74", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xBB2B68", Offset = "0xBB2B68", VA = "0xBB2B68")]
	public ZNStorePlacementActivityAsset()
	{
	}
}
[Token(Token = "0x2000045")]
public class ZNStorePlacementActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNStorePlacementActivityAsset StorePlacementActivityAsset;

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xBB2B70", Offset = "0xBB2B70", VA = "0xBB2B70")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xBB2B74", Offset = "0xBB2B74", VA = "0xBB2B74", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xBB2B7C", Offset = "0xBB2B7C", VA = "0xBB2B7C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xBB2C3C", Offset = "0xBB2C3C", VA = "0xBB2C3C")]
	public ZNStorePlacementActivityInstance()
	{
	}
}
[Token(Token = "0x2000046")]
[CreateAssetMenu(fileName = "ZNInsertWeaponIntoUpgraderActivityAsset", menuName = "Scriptable Objects/Activities/ZNInsertWeaponIntoUpgraderActivityAsset")]
public class ZNInsertWeaponIntoUpgraderActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("If this only counts for a specific weapon asset")]
	[SerializeField]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("Weapon to be Upgraded")]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xBB2C44", Offset = "0xBB2C44", VA = "0xBB2C44", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xBB2D38", Offset = "0xBB2D38", VA = "0xBB2D38")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xBB2D40", Offset = "0xBB2D40", VA = "0xBB2D40")]
	public ZNWeaponAsset GetWeaponToUpgrade()
	{
		return null;
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xBB2D48", Offset = "0xBB2D48", VA = "0xBB2D48")]
	public ZNInsertWeaponIntoUpgraderActivityAsset()
	{
	}
}
[Token(Token = "0x2000047")]
public class ZNInsertWeaponIntoUpgraderActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x2000048")]
	[CompilerGenerated]
	private sealed class <TryFindShopOnRepeat>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNInsertWeaponIntoUpgraderActivityInstance <>4__this;

		[Token(Token = "0x17000012")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000147")]
			[Address(RVA = "0xBB3360", Offset = "0xBB3360", VA = "0xBB3360", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000149")]
			[Address(RVA = "0xBB33A8", Offset = "0xBB33A8", VA = "0xBB33A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000144")]
		[Address(RVA = "0xBB2FBC", Offset = "0xBB2FBC", VA = "0xBB2FBC")]
		[DebuggerHidden]
		public <TryFindShopOnRepeat>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0xBB323C", Offset = "0xBB323C", VA = "0xBB323C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000146")]
		[Address(RVA = "0xBB3240", Offset = "0xBB3240", VA = "0xBB3240", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0xBB3368", Offset = "0xBB3368", VA = "0xBB3368", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNInsertWeaponIntoUpgraderActivityAsset InsertWeaponIntoUpgraderActivityAsset;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNShopWeaponUpgrader WeaponUpgrader;

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xBB2D50", Offset = "0xBB2D50", VA = "0xBB2D50", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xBB2E5C", Offset = "0xBB2E5C", VA = "0xBB2E5C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xBB2F54", Offset = "0xBB2F54", VA = "0xBB2F54")]
	[IteratorStateMachine(typeof(<TryFindShopOnRepeat>d__4))]
	protected IEnumerator TryFindShopOnRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xBB2FE4", Offset = "0xBB2FE4", VA = "0xBB2FE4")]
	protected void InitializeAfterShopCreated()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xBB30F4", Offset = "0xBB30F4", VA = "0xBB30F4")]
	protected void OnItemPlaced(ZNGrabObjectBase HeldItem)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xBB3234", Offset = "0xBB3234", VA = "0xBB3234")]
	public ZNInsertWeaponIntoUpgraderActivityInstance()
	{
	}
}
[Token(Token = "0x2000049")]
[CreateAssetMenu(fileName = "ZNPurchaseWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNPurchaseWeaponActivityAsset")]
public class ZNPurchaseWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("Optional Message to display while this activity is active")]
	protected ZNTutorialPromptAsset Message;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Weapon to be purchased")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xBB33B0", Offset = "0xBB33B0", VA = "0xBB33B0", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xBB34A4", Offset = "0xBB34A4", VA = "0xBB34A4")]
	public ZNTutorialPromptAsset GetMessage()
	{
		return null;
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xBB34AC", Offset = "0xBB34AC", VA = "0xBB34AC")]
	public ZNWeaponAsset GetWeaponToPurchase()
	{
		return null;
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xBB34B4", Offset = "0xBB34B4", VA = "0xBB34B4")]
	public ZNPurchaseWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x200004A")]
public class ZNPurchaseWeaponActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNPurchaseWeaponActivityAsset PurchaseWeaponActivityAsset;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ZNShopManager ShopManager;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xBB34BC", Offset = "0xBB34BC", VA = "0xBB34BC", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xBB35C4", Offset = "0xBB35C4", VA = "0xBB35C4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xBB3800", Offset = "0xBB3800", VA = "0xBB3800")]
	private void OnItemPurchased(ZNShopItemComponent PurchasedShopItem)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xBB38E8", Offset = "0xBB38E8", VA = "0xBB38E8")]
	public ZNPurchaseWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x200004B")]
[CreateAssetMenu(fileName = "ZNSelectBonusCardActivityAsset", menuName = "Scriptable Objects/Activities/ZNSelectBonusCardActivityAsset")]
public class ZNSelectBonusCardActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Optional Message to display while this activity is active")]
	[SerializeField]
	protected ZNTutorialPromptAsset Message;

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xBB38F0", Offset = "0xBB38F0", VA = "0xBB38F0", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xBB39E4", Offset = "0xBB39E4", VA = "0xBB39E4")]
	public ZNTutorialPromptAsset GetMessage()
	{
		return null;
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xBB39EC", Offset = "0xBB39EC", VA = "0xBB39EC")]
	public ZNSelectBonusCardActivityAsset()
	{
	}
}
[Token(Token = "0x200004C")]
public class ZNSelectBonusCardActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNSelectBonusCardActivityAsset SelectBonusCardActivityAsset;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ZNShopManager ShopManager;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xBB39F4", Offset = "0xBB39F4", VA = "0xBB39F4", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xBB3AFC", Offset = "0xBB3AFC", VA = "0xBB3AFC", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xBB3D38", Offset = "0xBB3D38", VA = "0xBB3D38")]
	private void BonusCardTaken(ZNBonusCard TakenCard)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xBB3E64", Offset = "0xBB3E64", VA = "0xBB3E64")]
	public ZNSelectBonusCardActivityInstance()
	{
	}
}
[Token(Token = "0x200004D")]
[CreateAssetMenu(fileName = "ZNUpgradeWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNUpgradeWeaponActivityAsset")]
public class ZNUpgradeWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Optional Message to display while this activity is active")]
	[SerializeField]
	protected ZNTutorialPromptAsset PlaceMessage;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Optional Message to display while this activity is active")]
	[SerializeField]
	protected ZNTutorialPromptAsset UpgradeMessage;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("If this only counts for a specific weapon asset")]
	[SerializeField]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Weapon to be Upgraded")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("If this only counts at a specific upgrade tier")]
	[SerializeField]
	protected bool bOnlyCountAtSpecificUpgradeTier;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[Tooltip("The upgrade tier")]
	protected int UpgradeTier;

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xBB3E6C", Offset = "0xBB3E6C", VA = "0xBB3E6C", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xBB3F60", Offset = "0xBB3F60", VA = "0xBB3F60")]
	public ZNTutorialPromptAsset GetPlaceMessage()
	{
		return null;
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xBB3F68", Offset = "0xBB3F68", VA = "0xBB3F68")]
	public ZNTutorialPromptAsset GetUpgradeMessage()
	{
		return null;
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xBB3F70", Offset = "0xBB3F70", VA = "0xBB3F70")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xBB3F78", Offset = "0xBB3F78", VA = "0xBB3F78")]
	public ZNWeaponAsset GetWeaponToUpgrade()
	{
		return null;
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xBB3F80", Offset = "0xBB3F80", VA = "0xBB3F80")]
	public bool DoesOnlyCountAtSpecificUpgradeTier()
	{
		return default(bool);
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xBB3F88", Offset = "0xBB3F88", VA = "0xBB3F88")]
	public int GetUpgradeTier()
	{
		return default(int);
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xBB3F90", Offset = "0xBB3F90", VA = "0xBB3F90")]
	public ZNUpgradeWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x200004E")]
public class ZNUpgradeWeaponActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x200004F")]
	[CompilerGenerated]
	private sealed class <TryFindShopOnRepeat>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNUpgradeWeaponActivityInstance <>4__this;

		[Token(Token = "0x17000014")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600016B")]
			[Address(RVA = "0xBB4858", Offset = "0xBB4858", VA = "0xBB4858", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600016D")]
			[Address(RVA = "0xBB48A0", Offset = "0xBB48A0", VA = "0xBB48A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0xBB42B0", Offset = "0xBB42B0", VA = "0xBB42B0")]
		[DebuggerHidden]
		public <TryFindShopOnRepeat>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000169")]
		[Address(RVA = "0xBB4734", Offset = "0xBB4734", VA = "0xBB4734", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0xBB4738", Offset = "0xBB4738", VA = "0xBB4738", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0xBB4860", Offset = "0xBB4860", VA = "0xBB4860", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNUpgradeWeaponActivityAsset UpgradeWeaponActivityAsset;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNShopWeaponUpgrader WeaponUpgrader;

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xBB3FA0", Offset = "0xBB3FA0", VA = "0xBB3FA0", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xBB413C", Offset = "0xBB413C", VA = "0xBB413C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xBB4248", Offset = "0xBB4248", VA = "0xBB4248")]
	[IteratorStateMachine(typeof(<TryFindShopOnRepeat>d__4))]
	protected IEnumerator TryFindShopOnRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xBB42D8", Offset = "0xBB42D8", VA = "0xBB42D8")]
	protected void InitializeAfterShopCreated()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xBB4478", Offset = "0xBB4478", VA = "0xBB4478")]
	private void OnItemPlaced(ZNGrabObjectBase HeldItem)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xBB45C0", Offset = "0xBB45C0", VA = "0xBB45C0")]
	private void OnItemUpgraded(ZNGrabObjectBase UpgradedItem)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xBB472C", Offset = "0xBB472C", VA = "0xBB472C")]
	public ZNUpgradeWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x2000050")]
public class ZNTrackedWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("If true, the activity will only count for the weapon assets below.")]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("If the above checkbox is true, these are the weapon assets that are tracked.")]
	[SerializeField]
	protected List<ZNWeaponAsset> TrackedWeaponAssets;

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xBAD7D4", Offset = "0xBAD7D4", VA = "0xBAD7D4", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xBB48A8", Offset = "0xBB48A8", VA = "0xBB48A8")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xBB48B0", Offset = "0xBB48B0", VA = "0xBB48B0")]
	public List<ZNWeaponAsset> GetTrackedWeaponAssets()
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xBB48B8", Offset = "0xBB48B8", VA = "0xBB48B8")]
	public bool IsValidWeaponAssetForTracking(ZNWeaponAsset InWeaponAsset)
	{
		return default(bool);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xBAD8E0", Offset = "0xBAD8E0", VA = "0xBAD8E0")]
	public ZNTrackedWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x2000051")]
public class ZNTrackedWeaponActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNTrackedWeaponActivityAsset TrackedWeaponActivityAsset;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected List<ZNWeaponBase> TrackedWeapons;

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xBB4928", Offset = "0xBB4928", VA = "0xBB4928", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xBAD97C", Offset = "0xBAD97C", VA = "0xBAD97C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xBB4C90", Offset = "0xBB4C90", VA = "0xBB4C90")]
	protected void CharacterRecievedWeapon(ZNWeaponBase GainedWeapon)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xBB4BBC", Offset = "0xBB4BBC", VA = "0xBB4BBC")]
	protected void CharacterRemovedWeapon(ZNWeaponBase RemovedWeapon)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xBADDD0", Offset = "0xBADDD0", VA = "0xBADDD0", Slot = "11")]
	protected virtual void CharacterReceivedTrackedWeapon(ZNWeaponBase GainedWeapon)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xBB4DA8", Offset = "0xBB4DA8", VA = "0xBB4DA8", Slot = "12")]
	protected virtual void CharacterRemovedTrackedWeapon(ZNWeaponBase RemovedWeapon)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xBADFE4", Offset = "0xBADFE4", VA = "0xBADFE4")]
	public ZNTrackedWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x2000052")]
[CreateAssetMenu(fileName = "ZNHitEnemyWithLaserRifleFullChargeActivityAsset", menuName = "Scriptable Objects/Activities/ZNHitEnemyWithLaserRifleFullChargeActivityAsset")]
public class ZNHitEnemyWithLaserRifleFullChargeActivityAsset : SAActivityAsset
{
	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("How many hits are needed to finish this activity.")]
	protected int RequiredHits;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xBB4DAC", Offset = "0xBB4DAC", VA = "0xBB4DAC", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xBB4EA0", Offset = "0xBB4EA0", VA = "0xBB4EA0")]
	public int GetRequiredHits()
	{
		return default(int);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xBB4EA8", Offset = "0xBB4EA8", VA = "0xBB4EA8", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xBB4ED4", Offset = "0xBB4ED4", VA = "0xBB4ED4", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xBB4EDC", Offset = "0xBB4EDC", VA = "0xBB4EDC")]
	public ZNHitEnemyWithLaserRifleFullChargeActivityAsset()
	{
	}
}
[Token(Token = "0x2000053")]
public class ZNHitEnemyWithLaserRifleFullChargeActivityInstance : SAActivityInstance
{
	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNHitEnemyWithLaserRifleFullChargeActivityAsset HitEnemyWithLaserRifleFullChargeActivityAsset;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int NumHits;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xBB4EEC", Offset = "0xBB4EEC", VA = "0xBB4EEC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xBB5060", Offset = "0xBB5060", VA = "0xBB5060", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xBB516C", Offset = "0xBB516C", VA = "0xBB516C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xBB5204", Offset = "0xBB5204", VA = "0xBB5204", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xBB5248", Offset = "0xBB5248", VA = "0xBB5248", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xBB5280", Offset = "0xBB5280", VA = "0xBB5280")]
	protected void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xBB53EC", Offset = "0xBB53EC", VA = "0xBB53EC", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xBB53F4", Offset = "0xBB53F4", VA = "0xBB53F4")]
	public ZNHitEnemyWithLaserRifleFullChargeActivityInstance()
	{
	}
}
[Token(Token = "0x2000054")]
[CreateAssetMenu(fileName = "ZNHitEnemyWithWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNHitEnemyWithWeaponActivityAsset")]
public class ZNHitEnemyWithWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("How many hits are needed to finish this activity.")]
	protected int RequiredHits;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("These are the weapon assets that are checked for hitting enemies")]
	protected List<ZNWeaponAsset> CheckedWeaponAssets;

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xBB53FC", Offset = "0xBB53FC", VA = "0xBB53FC", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xBB54F0", Offset = "0xBB54F0", VA = "0xBB54F0")]
	public int GetRequiredHits()
	{
		return default(int);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xBB54F8", Offset = "0xBB54F8", VA = "0xBB54F8")]
	public List<ZNWeaponAsset> GetCheckedWeaponAssets()
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xBB5500", Offset = "0xBB5500", VA = "0xBB5500", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xBB5508", Offset = "0xBB5508", VA = "0xBB5508")]
	public ZNHitEnemyWithWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x2000055")]
public class ZNHitEnemyWithWeaponActivityInstance : SAActivityInstance
{
	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNHitEnemyWithWeaponActivityAsset HitEnemyWithWeaponActivityAsset;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int NumHits;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected List<ZNWeaponAsset> CheckedWeaponAssets;

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xBB5518", Offset = "0xBB5518", VA = "0xBB5518", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xBB568C", Offset = "0xBB568C", VA = "0xBB568C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xBB5798", Offset = "0xBB5798", VA = "0xBB5798", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xBB5874", Offset = "0xBB5874", VA = "0xBB5874")]
	protected void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xBB59E4", Offset = "0xBB59E4", VA = "0xBB59E4", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xBB59EC", Offset = "0xBB59EC", VA = "0xBB59EC")]
	public ZNHitEnemyWithWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x2000056")]
[CreateAssetMenu(fileName = "ZNWeaponFireActivityAsset", menuName = "Scriptable Objects/Activities/ZNWeaponFireActivityAsset")]
public class ZNWeaponFireActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("How much damage must be done to finish this activity.")]
	[SerializeField]
	protected int RequiredShots;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If true, the activity will only count when the weapon asset below is fired.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("If the above checkbox is true, this is the weapon asset that is tracked for firing.")]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("If the above checkbox is true, this is the weapon asset that is tracked for firing.")]
	protected ZNMessagePromptAsset PromptAsset;

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xBB5A68", Offset = "0xBB5A68", VA = "0xBB5A68", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xBB5B5C", Offset = "0xBB5B5C", VA = "0xBB5B5C")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xBB5B64", Offset = "0xBB5B64", VA = "0xBB5B64")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xBB5B6C", Offset = "0xBB5B6C", VA = "0xBB5B6C")]
	public int GetRequiredShots()
	{
		return default(int);
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xBB5B74", Offset = "0xBB5B74", VA = "0xBB5B74")]
	public ZNMessagePromptAsset GetPromptAsset()
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xBB5B7C", Offset = "0xBB5B7C", VA = "0xBB5B7C")]
	public ZNWeaponFireActivityAsset()
	{
	}
}
[Token(Token = "0x2000057")]
public class ZNWeaponFireActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNWeaponFireActivityAsset WeaponFireActivityAsset;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentShots;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected List<ZNWeaponBase> TrackedWeapons;

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xBB5B8C", Offset = "0xBB5B8C", VA = "0xBB5B8C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xBB5F30", Offset = "0xBB5F30", VA = "0xBB5F30", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xBB63CC", Offset = "0xBB63CC", VA = "0xBB63CC")]
	protected void CharacterRecievedWeapon(ZNWeaponBase GainedWeapon)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xBB65D8", Offset = "0xBB65D8", VA = "0xBB65D8")]
	protected void GunFired(ZNGunWeapon FiredWeapon)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xBB6794", Offset = "0xBB6794", VA = "0xBB6794", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xBB679C", Offset = "0xBB679C", VA = "0xBB679C")]
	public ZNWeaponFireActivityInstance()
	{
	}
}
[Token(Token = "0x2000058")]
public class ZNActivityInstance : SAActivityInstance
{
	[Token(Token = "0x600019E")]
	[Address(RVA = "0xBACFD4", Offset = "0xBACFD4", VA = "0xBACFD4")]
	public void DisplayMessage(ZNMessagePromptAsset MessageAsset)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xBAD118", Offset = "0xBAD118", VA = "0xBAD118")]
	public void RemoveMessage(ZNMessagePromptAsset MessageAsset)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xBAD218", Offset = "0xBAD218", VA = "0xBAD218")]
	public ZNActivityInstance()
	{
	}
}
[Token(Token = "0x2000059")]
public class ZNActivityManagerComponent : SAActivityManagerComponent
{
	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FOnObjectiveActivityInstanceAdded OnObjectiveActivityInstanceAddedDel;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnObjectiveActivityInstanceRemoved OnObjectiveActivityInstanceRemovedDel;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnObjectiveActivityInstanceFinished OnObjectiveActivityInstanceFinishedDel;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected List<ZNObjectiveActivityInstance> ObjectiveActivityInstances;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xBB6818", Offset = "0xBB6818", VA = "0xBB6818", Slot = "4")]
	public override SAActivityInstance CreateActivityInstance(SAActivityAsset InActivityAsset)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xBB6978", Offset = "0xBB6978", VA = "0xBB6978", Slot = "5")]
	public override bool RemoveActivityInstance(SAActivityInstance InActivityInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xBB183C", Offset = "0xBB183C", VA = "0xBB183C")]
	public void FinishObjective(ZNObjectiveActivityInstance InObjectiveActivityInstance, bool bInSuccess, int InScore)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xBB6A94", Offset = "0xBB6A94", VA = "0xBB6A94")]
	public ZNActivityManagerComponent()
	{
	}
}
[Token(Token = "0x200005A")]
[CreateAssetMenu(fileName = "ZNAttackShopkeeperActivityAsset", menuName = "Scriptable Objects/Activities/ZNAttackShopkeeperActivityAsset")]
public class ZNAttackShopkeeperActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("How many hits must be done against the shopkeeper to finish this activity.")]
	[SerializeField]
	protected int RequiredNumHits;

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xBB6B10", Offset = "0xBB6B10", VA = "0xBB6B10", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xBB6C04", Offset = "0xBB6C04", VA = "0xBB6C04")]
	public int GetRequiredNumHits()
	{
		return default(int);
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xBB6C0C", Offset = "0xBB6C0C", VA = "0xBB6C0C", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xBB6C38", Offset = "0xBB6C38", VA = "0xBB6C38", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xBB6C40", Offset = "0xBB6C40", VA = "0xBB6C40")]
	public ZNAttackShopkeeperActivityAsset()
	{
	}
}
[Token(Token = "0x200005B")]
public class ZNAttackShopkeeperActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNAttackShopkeeperActivityAsset AttackShopkeeperActivityAsset;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentNumHits;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xBB6C50", Offset = "0xBB6C50", VA = "0xBB6C50")]
	protected void Start()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xBB6D9C", Offset = "0xBB6D9C", VA = "0xBB6D9C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xBB6EF0", Offset = "0xBB6EF0", VA = "0xBB6EF0", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xBB6F88", Offset = "0xBB6F88", VA = "0xBB6F88", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xBB6FCC", Offset = "0xBB6FCC", VA = "0xBB6FCC", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xBB7004", Offset = "0xBB7004", VA = "0xBB7004")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xBB71CC", Offset = "0xBB71CC", VA = "0xBB71CC", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xBB71D4", Offset = "0xBB71D4", VA = "0xBB71D4")]
	public ZNAttackShopkeeperActivityInstance()
	{
	}
}
[Token(Token = "0x200005C")]
[CreateAssetMenu(fileName = "ZNBeatPreviousHighScoreActivityAsset", menuName = "Scriptable Objects/Activities/ZNBeatPreviousHighScoreActivityAsset")]
public class ZNBeatPreviousHighScoreActivityAsset : SAActivityAsset
{
	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xBB71DC", Offset = "0xBB71DC", VA = "0xBB71DC", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xBB72D0", Offset = "0xBB72D0", VA = "0xBB72D0")]
	public ZNBeatPreviousHighScoreActivityAsset()
	{
	}
}
[Token(Token = "0x200005D")]
public class ZNBeatPreviousHighScoreActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNBeatPreviousHighScoreActivityAsset BeatPreviousHighScoreActivityAsset;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xBB72D8", Offset = "0xBB72D8", VA = "0xBB72D8", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xBB73E4", Offset = "0xBB73E4", VA = "0xBB73E4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xBB759C", Offset = "0xBB759C", VA = "0xBB759C")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xBB7768", Offset = "0xBB7768", VA = "0xBB7768")]
	public ZNBeatPreviousHighScoreActivityInstance()
	{
	}
}
[Token(Token = "0x200005E")]
[CreateAssetMenu(fileName = "ZNCompleteCaseFileActivityAsset", menuName = "Scriptable Objects/Activities/ZNCompleteCaseFileActivityAsset")]
public class ZNCompleteCaseFileActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("If we restrict completing the activity based on upgrading")]
	[SerializeField]
	protected bool bRestrictBasedOnUpgrades;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Tooltip("The maximum number of upgrades allowed")]
	protected int MaxNumUpgradesAllowed;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("If we restrict completing the activity based on purchasing")]
	protected bool bRestrictBasedOnPurchases;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[Tooltip("The maximum number of purchases allowed")]
	protected int MaxNumPurchasesAllowed;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("If we restrict completing the activity based on having badges")]
	protected bool bRestrictBasedOnBadges;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[Tooltip("The maximum number of badges allowed")]
	protected int MaxNumBadgesAllowed;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xBB7770", Offset = "0xBB7770", VA = "0xBB7770", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xBB7864", Offset = "0xBB7864", VA = "0xBB7864")]
	public bool DoesRestrictBasedOnUpgrades()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xBB786C", Offset = "0xBB786C", VA = "0xBB786C")]
	public int GetMaxNumUpgradesAllowed()
	{
		return default(int);
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xBB7874", Offset = "0xBB7874", VA = "0xBB7874")]
	public bool DoesRestrictBasedOnPurchases()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xBB787C", Offset = "0xBB787C", VA = "0xBB787C")]
	public int GetMaxNumPurchasesAllowed()
	{
		return default(int);
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xBB7884", Offset = "0xBB7884", VA = "0xBB7884")]
	public bool DoesRestrictBasedOnBadges()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xBB788C", Offset = "0xBB788C", VA = "0xBB788C")]
	public int GetMaxNumBadgesAllowed()
	{
		return default(int);
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xBB7894", Offset = "0xBB7894", VA = "0xBB7894")]
	public ZNCompleteCaseFileActivityAsset()
	{
	}
}
[Token(Token = "0x200005F")]
public class ZNCompleteCaseFileActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x2000060")]
	[CompilerGenerated]
	private sealed class <TryFindShopOnRepeat>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCompleteCaseFileActivityInstance <>4__this;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0xBB81D4", Offset = "0xBB81D4", VA = "0xBB81D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CD")]
			[Address(RVA = "0xBB821C", Offset = "0xBB821C", VA = "0xBB821C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xBB7D54", Offset = "0xBB7D54", VA = "0xBB7D54")]
		[DebuggerHidden]
		public <TryFindShopOnRepeat>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0xBB80B0", Offset = "0xBB80B0", VA = "0xBB80B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xBB80B4", Offset = "0xBB80B4", VA = "0xBB80B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0xBB81DC", Offset = "0xBB81DC", VA = "0xBB81DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNCompleteCaseFileActivityAsset CompleteCaseFileActivityAsset;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNShopWeaponUpgrader WeaponUpgrader;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int NumPurchases;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected int NumUpgrades;

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xBB789C", Offset = "0xBB789C", VA = "0xBB789C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xBB7B20", Offset = "0xBB7B20", VA = "0xBB7B20", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xBB7CEC", Offset = "0xBB7CEC", VA = "0xBB7CEC")]
	[IteratorStateMachine(typeof(<TryFindShopOnRepeat>d__3))]
	protected IEnumerator TryFindShopOnRepeat()
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xBB7D7C", Offset = "0xBB7D7C", VA = "0xBB7D7C")]
	protected void InitializeAfterShopCreated()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xBB7F6C", Offset = "0xBB7F6C", VA = "0xBB7F6C")]
	private void ShopItemPurchased(ZNShopItemComponent PurchasedShopItem)
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xBB7F7C", Offset = "0xBB7F7C", VA = "0xBB7F7C")]
	private void ShopUpgradeCompleted(ZNGrabObjectBase UpgradedItem)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xBB7F8C", Offset = "0xBB7F8C", VA = "0xBB7F8C")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xBB80A8", Offset = "0xBB80A8", VA = "0xBB80A8")]
	public ZNCompleteCaseFileActivityInstance()
	{
	}
}
[Token(Token = "0x2000061")]
[CreateAssetMenu(fileName = "ZNCompleteCaseFileWithWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNCompleteCaseFileWithWeaponActivityAsset")]
public class ZNCompleteCaseFileWithWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("If any of these weapon assets are in the player's inventory when completing the case file, adds 1 to the case file clears")]
	protected List<ZNWeaponAsset> ValidWeaponAssets;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The number of case file clears required to complete the activity")]
	[SerializeField]
	protected int NumCaseFileClearsRequired;

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xBB8224", Offset = "0xBB8224", VA = "0xBB8224", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xBB8318", Offset = "0xBB8318", VA = "0xBB8318")]
	public List<ZNWeaponAsset> GetValidWeaponAssets()
	{
		return null;
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xBB8320", Offset = "0xBB8320", VA = "0xBB8320")]
	public int GetNumCaseFileClearsRequired()
	{
		return default(int);
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xBB8328", Offset = "0xBB8328", VA = "0xBB8328", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xBB8354", Offset = "0xBB8354", VA = "0xBB8354", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xBB835C", Offset = "0xBB835C", VA = "0xBB835C")]
	public ZNCompleteCaseFileWithWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x2000062")]
public class ZNCompleteCaseFileWithWeaponActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNCompleteCaseFileWithWeaponActivityAsset CompleteCaseFileWithWeaponActivityAsset;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int NumClearsWithWeapon;

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xBB836C", Offset = "0xBB836C", VA = "0xBB836C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xBB8478", Offset = "0xBB8478", VA = "0xBB8478", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xBB8690", Offset = "0xBB8690", VA = "0xBB8690", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xBB86D4", Offset = "0xBB86D4", VA = "0xBB86D4", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xBB870C", Offset = "0xBB870C", VA = "0xBB870C")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xBB887C", Offset = "0xBB887C", VA = "0xBB887C")]
	public ZNCompleteCaseFileWithWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x2000063")]
[CreateAssetMenu(fileName = "ZNCompleteWaveWithHealthActivityAsset", menuName = "Scriptable Objects/Activities/ZNCompleteWaveWithHealthActivityAsset")]
public class ZNCompleteWaveWithHealthActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("If we need health to be equal or higher for the activity to return true. If false, need to be at equal or lower health.")]
	[SerializeField]
	protected bool bEqualOrHigherHealth;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Tooltip("The amount of health that we need to be at. (NOT percentage right now.)")]
	protected int HealthValue;

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xBB8884", Offset = "0xBB8884", VA = "0xBB8884", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xBB8978", Offset = "0xBB8978", VA = "0xBB8978")]
	public bool CheckForEqualOrHigherHealth()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xBB8980", Offset = "0xBB8980", VA = "0xBB8980")]
	public int GetHealthValue()
	{
		return default(int);
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xBB8988", Offset = "0xBB8988", VA = "0xBB8988")]
	public ZNCompleteWaveWithHealthActivityAsset()
	{
	}
}
[Token(Token = "0x2000064")]
public class ZNCompleteWaveWithHealthActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNCompleteWaveWithHealthActivityAsset CompleteWaveWithHealthActivityAsset;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainCharacter FirstMainCharacter;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xBB8998", Offset = "0xBB8998", VA = "0xBB8998", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xBB8AA4", Offset = "0xBB8AA4", VA = "0xBB8AA4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xBB8CF4", Offset = "0xBB8CF4", VA = "0xBB8CF4")]
	private void WaveEnded(int WaveNumber)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xBB8DCC", Offset = "0xBB8DCC", VA = "0xBB8DCC")]
	public ZNCompleteWaveWithHealthActivityInstance()
	{
	}
}
[Token(Token = "0x2000065")]
[CreateAssetMenu(fileName = "ZNDamageActivityAsset", menuName = "Scriptable Objects/Activities/ZNDamageActivityAsset")]
public class ZNDamageActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("How much damage must be done to finish this activity.")]
	protected int RequiredDamage;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Tooltip("If true, the activity will only count when the weapon asset below is used to damage.")]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("If the above checkbox is true, this is the weapon asset that is tracked when dealing damage.")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("If true, the activity will only count when a weapon of the category specified below is used to damage. If the weapon asset above is set to true, this is ignored.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificWeaponCategory;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[Tooltip("If the above checkbox is true, this is the weapon category that is tracked when dealing damage.")]
	protected EZNWeaponCategories WeaponCategory;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("If true, the activity will only count when the required body part set below is hit.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificBodyPart;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Tooltip("If the above checkbox is true, this is the body part that must be hit for this to be tracked.")]
	[SerializeField]
	protected EZNBodyParts RequiredBodyPart;

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xBB8DD4", Offset = "0xBB8DD4", VA = "0xBB8DD4", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xBB8EC8", Offset = "0xBB8EC8", VA = "0xBB8EC8")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xBB8ED0", Offset = "0xBB8ED0", VA = "0xBB8ED0")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xBB8ED8", Offset = "0xBB8ED8", VA = "0xBB8ED8")]
	public bool DoesOnlyCountForSpecificWeaponCategory()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xBB8EE0", Offset = "0xBB8EE0", VA = "0xBB8EE0")]
	public EZNWeaponCategories GetWeaponCategory()
	{
		return default(EZNWeaponCategories);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xBB8EE8", Offset = "0xBB8EE8", VA = "0xBB8EE8")]
	public int GetRequiredDamage()
	{
		return default(int);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xBB8EF0", Offset = "0xBB8EF0", VA = "0xBB8EF0")]
	public bool DoesOnlyCountForSpecificBodyPart()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xBB8EF8", Offset = "0xBB8EF8", VA = "0xBB8EF8")]
	public EZNBodyParts GetRequiredBodyPart()
	{
		return default(EZNBodyParts);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xBB8F00", Offset = "0xBB8F00", VA = "0xBB8F00", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xBB8F2C", Offset = "0xBB8F2C", VA = "0xBB8F2C", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xBB8F34", Offset = "0xBB8F34", VA = "0xBB8F34")]
	public ZNDamageActivityAsset()
	{
	}
}
[Token(Token = "0x2000066")]
public class ZNDamageActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNDamageActivityAsset WeaponDamageActivityAsset;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentDamage;

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xBB8F54", Offset = "0xBB8F54", VA = "0xBB8F54")]
	protected void Start()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xBB90A0", Offset = "0xBB90A0", VA = "0xBB90A0", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xBB91F4", Offset = "0xBB91F4", VA = "0xBB91F4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xBB928C", Offset = "0xBB928C", VA = "0xBB928C", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xBB92D0", Offset = "0xBB92D0", VA = "0xBB92D0", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xBB9308", Offset = "0xBB9308", VA = "0xBB9308")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xBB9568", Offset = "0xBB9568", VA = "0xBB9568", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xBB9570", Offset = "0xBB9570", VA = "0xBB9570")]
	public ZNDamageActivityInstance()
	{
	}
}
[Token(Token = "0x2000067")]
[CreateAssetMenu(fileName = "ZNDestroyProjectileActivityAsset", menuName = "Scriptable Objects/Activities/ZNDestroyProjectileActivityAsset")]
public class ZNDestroyProjectileActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("How many destroys must be done to finish this activity.")]
	[SerializeField]
	protected int NumRequiredDestroys;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If true, the activity will only count when the weapon asset below is used to destroy.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificWeaponAsset;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("If the above checkbox is true, this is the weapon asset that is tracked when dealing damage.")]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("If true, the activity will only count when a projectile of the category specified below is damaged.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificProjectile;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("If the above checkbox is true, this is the projectile subclass that is needed to count towards projectile destroys.")]
	[SerializeField]
	protected SubclassOf<ZNProjectileBase> ProjectileClass;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("If true, the activity will only count when the specific owner of the projectile threw it.")]
	[SerializeField]
	protected bool bOnlyCountForSpecificProjectileOwner;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("If the above checkbox is true, this is the body part that must be hit for this to be tracked.")]
	[SerializeField]
	protected SubclassOf<ZNCharacterBase> ProjectileOwnerClass;

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xBB9578", Offset = "0xBB9578", VA = "0xBB9578", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xBB966C", Offset = "0xBB966C", VA = "0xBB966C")]
	public int GetNumRequiredDestroys()
	{
		return default(int);
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xBB9674", Offset = "0xBB9674", VA = "0xBB9674")]
	public bool DoesOnlyCountForSpecificWeaponAsset()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xBB967C", Offset = "0xBB967C", VA = "0xBB967C")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xBB9684", Offset = "0xBB9684", VA = "0xBB9684")]
	public bool DoesOnlyCountForSpecificProjectile()
	{
		return default(bool);
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xBB968C", Offset = "0xBB968C", VA = "0xBB968C")]
	public SubclassOf<ZNProjectileBase> GetProjectileClass()
	{
		return null;
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xBB9694", Offset = "0xBB9694", VA = "0xBB9694")]
	public bool DoesOnlyCountForSpecificProjectileOwner()
	{
		return default(bool);
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xBB969C", Offset = "0xBB969C", VA = "0xBB969C")]
	public SubclassOf<ZNCharacterBase> GetProjectileOwnerClass()
	{
		return null;
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xBB96A4", Offset = "0xBB96A4", VA = "0xBB96A4", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xBB96D0", Offset = "0xBB96D0", VA = "0xBB96D0", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xBB96D8", Offset = "0xBB96D8", VA = "0xBB96D8")]
	public ZNDestroyProjectileActivityAsset()
	{
	}
}
[Token(Token = "0x2000068")]
public class ZNDestroyProjectileActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNDestroyProjectileActivityAsset DestroyProjectileActivityAsset;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentNumDestroys;

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xBB96E8", Offset = "0xBB96E8", VA = "0xBB96E8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xBB9834", Offset = "0xBB9834", VA = "0xBB9834", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xBB9988", Offset = "0xBB9988", VA = "0xBB9988", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xBB9A20", Offset = "0xBB9A20", VA = "0xBB9A20", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xBB9A64", Offset = "0xBB9A64", VA = "0xBB9A64", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xBB9A9C", Offset = "0xBB9A9C", VA = "0xBB9A9C")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xBB9E04", Offset = "0xBB9E04", VA = "0xBB9E04", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xBB9E0C", Offset = "0xBB9E0C", VA = "0xBB9E0C")]
	public ZNDestroyProjectileActivityInstance()
	{
	}
}
[Token(Token = "0x2000069")]
[CreateAssetMenu(fileName = "ZNGamePhaseChangedActivityAsset", menuName = "Scriptable Objects/Activities/ZNGamePhaseChangedActivityAsset")]
public class ZNGamePhaseChangedActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("When the phase changes to this phase, the activity is completed")]
	protected ZNGamePhases CompleteOnChangeToPhase;

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xBB9E14", Offset = "0xBB9E14", VA = "0xBB9E14", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xBB9F08", Offset = "0xBB9F08", VA = "0xBB9F08")]
	public ZNGamePhases GetCompleteOnChangeToPhase()
	{
		return default(ZNGamePhases);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xBB9F10", Offset = "0xBB9F10", VA = "0xBB9F10")]
	public ZNGamePhaseChangedActivityAsset()
	{
	}
}
[Token(Token = "0x200006A")]
public class ZNGamePhaseChangedActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNGamePhaseChangedActivityAsset GamePhaseChangedActivityAsset;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xBB9F20", Offset = "0xBB9F20", VA = "0xBB9F20", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xBBA02C", Offset = "0xBBA02C", VA = "0xBBA02C", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xBBA244", Offset = "0xBBA244", VA = "0xBBA244")]
	private void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xBBA2E8", Offset = "0xBBA2E8", VA = "0xBBA2E8")]
	public ZNGamePhaseChangedActivityInstance()
	{
	}
}
[Token(Token = "0x200006B")]
[CreateAssetMenu(fileName = "ZNGrabWeaponActivityAsset", menuName = "Scriptable Objects/Activities/ZNGrabWeaponActivityAsset")]
public class ZNGrabWeaponActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The weapon that needs to be grabbed")]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Prompt for Grabbing")]
	[SerializeField]
	protected ZNMessagePromptAsset GrabPromptAsset;

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xBBA2F0", Offset = "0xBBA2F0", VA = "0xBBA2F0", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xBBA3E4", Offset = "0xBBA3E4", VA = "0xBBA3E4")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xBBA3EC", Offset = "0xBBA3EC", VA = "0xBBA3EC")]
	public ZNMessagePromptAsset GetGrabPromptAsset()
	{
		return null;
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xBBA3F4", Offset = "0xBBA3F4", VA = "0xBBA3F4")]
	public ZNGrabWeaponActivityAsset()
	{
	}
}
[Token(Token = "0x200006C")]
public class ZNGrabWeaponActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNGrabWeaponActivityAsset GrabWeaponActivityAsset;

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xBBA3FC", Offset = "0xBBA3FC", VA = "0xBBA3FC")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xBBA400", Offset = "0xBBA400", VA = "0xBBA400", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xBBA408", Offset = "0xBBA408", VA = "0xBBA408", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xBBA5EC", Offset = "0xBBA5EC", VA = "0xBBA5EC")]
	protected void CharacterGrabbedObject(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xBBA770", Offset = "0xBBA770", VA = "0xBBA770")]
	public ZNGrabWeaponActivityInstance()
	{
	}
}
[Token(Token = "0x200006D")]
[CreateAssetMenu(fileName = "ZNMultiParallelActivityAsset", menuName = "Scriptable Objects/Activities/ZNMultiParallelActivityAsset")]
public class ZNMultiParallelActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("Series of activities to be completed sequentially")]
	protected List<SAActivityAsset> ActivityList;

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xBBA778", Offset = "0xBBA778", VA = "0xBBA778", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xBBA86C", Offset = "0xBBA86C", VA = "0xBBA86C")]
	public SAActivityAsset GetActivityByIndex(int Index)
	{
		return null;
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xBBA8EC", Offset = "0xBBA8EC", VA = "0xBBA8EC")]
	public int GetNumberOfActivities()
	{
		return default(int);
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xBBA934", Offset = "0xBBA934", VA = "0xBBA934", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xBBA960", Offset = "0xBBA960", VA = "0xBBA960", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xBBA964", Offset = "0xBBA964", VA = "0xBBA964")]
	public List<SAActivityAsset> GetActivityList()
	{
		return null;
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xBBA96C", Offset = "0xBBA96C", VA = "0xBBA96C")]
	public ZNMultiParallelActivityAsset()
	{
	}
}
[Token(Token = "0x200006E")]
public class ZNMultiParallelActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMultiParallelActivityAsset MultiParallelActivityAsset;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected SAActivityAsset CurrentActivityAsset;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected SAActivityInstance CurrentActivityInstance;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int CompletedActivities;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xBBA9E8", Offset = "0xBBA9E8", VA = "0xBBA9E8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xBBA9EC", Offset = "0xBBA9EC", VA = "0xBBA9EC", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xBBA9F4", Offset = "0xBBA9F4", VA = "0xBBA9F4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xBBAD1C", Offset = "0xBBAD1C", VA = "0xBBAD1C")]
	protected void ActivityCompleted(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xBBAE30", Offset = "0xBBAE30", VA = "0xBBAE30", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xBBAE38", Offset = "0xBBAE38", VA = "0xBBAE38")]
	public ZNMultiParallelActivityInstance()
	{
	}
}
[Token(Token = "0x200006F")]
[CreateAssetMenu(fileName = "ZNMultiStepActivityAsset", menuName = "Scriptable Objects/Activities/ZNMultiStepActivityAsset")]
public class ZNMultiStepActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Series of activities to be completed sequentially")]
	[SerializeField]
	protected List<SAActivityAsset> ActivityList;

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xBBAE40", Offset = "0xBBAE40", VA = "0xBBAE40", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xBBAF34", Offset = "0xBBAF34", VA = "0xBBAF34")]
	public SAActivityAsset GetActivityByIndex(int Index)
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xBBAFB4", Offset = "0xBBAFB4", VA = "0xBBAFB4")]
	public int GetNumberOfActivities()
	{
		return default(int);
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xBBAFFC", Offset = "0xBBAFFC", VA = "0xBBAFFC", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xBBB028", Offset = "0xBBB028", VA = "0xBBB028", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xBBB02C", Offset = "0xBBB02C", VA = "0xBBB02C")]
	public ZNMultiStepActivityAsset()
	{
	}
}
[Token(Token = "0x2000070")]
public class ZNMultiStepActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMultiStepActivityAsset MultiStepActivityAsset;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected SAActivityAsset CurrentActivityAsset;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected SAActivityInstance CurrentActivityInstance;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int CurrentActivityIndex;

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xBBB0A8", Offset = "0xBBB0A8", VA = "0xBBB0A8")]
	protected void Start()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xBBB0AC", Offset = "0xBBB0AC", VA = "0xBBB0AC", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xBBB0B4", Offset = "0xBBB0B4", VA = "0xBBB0B4", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xBBB1C8", Offset = "0xBBB1C8", VA = "0xBBB1C8")]
	protected void StartNextActivity()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xBBB31C", Offset = "0xBBB31C", VA = "0xBBB31C")]
	protected void ActivityCompleted(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xBBB434", Offset = "0xBBB434", VA = "0xBBB434", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xBBB43C", Offset = "0xBBB43C", VA = "0xBBB43C")]
	public ZNMultiStepActivityInstance()
	{
	}
}
[Token(Token = "0x2000071")]
[CreateAssetMenu(fileName = "ZNSimultaneousHitActivityAsset", menuName = "Scriptable Objects/Activities/ZNSimultaneousHitActivityAsset")]
public class ZNSimultaneousHitActivityAsset : SAActivityAsset
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("How many times we must do this to finish this activity.")]
	[SerializeField]
	protected int NumTimesRequired;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("How many enemies we must hit for this simultaneous hit to track towards the number of times required.")]
	[SerializeField]
	protected int NumSimultaneousHitsRequired;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("If we require killing the target with a simultaneous hit.")]
	[SerializeField]
	protected bool bRequireKill;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The weapon asset that is tracked when doing a simultaneous hit.")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xBBB444", Offset = "0xBBB444", VA = "0xBBB444", Slot = "4")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xBBB538", Offset = "0xBBB538", VA = "0xBBB538")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xBBB540", Offset = "0xBBB540", VA = "0xBBB540")]
	public int GetNumTimesRequired()
	{
		return default(int);
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xBBB548", Offset = "0xBBB548", VA = "0xBBB548")]
	public int GetNumSimultaneousHitsRequired()
	{
		return default(int);
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xBBB550", Offset = "0xBBB550", VA = "0xBBB550")]
	public bool DoesRequireKill()
	{
		return default(bool);
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xBBB558", Offset = "0xBBB558", VA = "0xBBB558", Slot = "6")]
	public override int GetSavedActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xBBB584", Offset = "0xBBB584", VA = "0xBBB584", Slot = "7")]
	public override int GetMaxActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xBBB58C", Offset = "0xBBB58C", VA = "0xBBB58C")]
	public ZNSimultaneousHitActivityAsset()
	{
	}
}
[Token(Token = "0x2000072")]
public class ZNSimultaneousHitActivityInstance : ZNActivityInstance
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNSimultaneousHitActivityAsset SimultaneousHitActivityAsset;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentNumTimes;

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xBBB5A0", Offset = "0xBBB5A0", VA = "0xBBB5A0")]
	protected void Start()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xBBB6EC", Offset = "0xBBB6EC", VA = "0xBBB6EC", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xBBB840", Offset = "0xBBB840", VA = "0xBBB840", Slot = "6")]
	public override void InitializeActivityInstance(SAActivityAsset InActivityAsset)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xBBB8D8", Offset = "0xBBB8D8", VA = "0xBBB8D8", Slot = "8")]
	protected override void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xBBB91C", Offset = "0xBBB91C", VA = "0xBBB91C", Slot = "9")]
	protected override FSASavedActivityInfo CreateSavedActivityInfo()
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xBBB954", Offset = "0xBBB954", VA = "0xBBB954")]
	protected void SimultaneousDamageEvent(ZNCharacterBase DamageInstigator, List<FZNDamageInfo> DamageInfos)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xBBBCAC", Offset = "0xBBBCAC", VA = "0xBBBCAC", Slot = "10")]
	public override int GetCurrentActivityIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xBBBCB4", Offset = "0xBBBCB4", VA = "0xBBBCB4")]
	public ZNSimultaneousHitActivityInstance()
	{
	}
}
[Token(Token = "0x2000073")]
public class ZNBuffAbility : ZNEnemyAbility
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The list of buffs that this ability can give to allies. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected List<SAModAsset> BuffModAssets;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("How long (in seconds) the buffs last. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected float BuffDuration;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The SFX that plays when buffing")]
	[SerializeField]
	protected Event BuffSFX;

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xBBBCBC", Offset = "0xBBBCBC", VA = "0xBBBCBC", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xBBBDD4", Offset = "0xBBBDD4", VA = "0xBBBDD4")]
	public ZNBuffAbility()
	{
	}
}
[Token(Token = "0x2000074")]
public class ZNBuffAllyAbility : ZNBuffAbility
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("The max distance from the user that a buff can reach an ally. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	protected float BuffRadius;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Tooltip("The minimum health a target needs in order to be able to be buffed.")]
	[SerializeField]
	protected int MinHealthRequiredToBuff;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Tooltip("The buff layer mask for determining which targets can be hit")]
	protected LayerMask BuffLayerMask;

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xBBBE54", Offset = "0xBBBE54", VA = "0xBBBE54", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xBBC4F0", Offset = "0xBBC4F0", VA = "0xBBC4F0", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xBBC184", Offset = "0xBBC184", VA = "0xBBC184")]
	public List<ZNCharacterBase> GetNearbyValidCharacters()
	{
		return null;
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xBBC558", Offset = "0xBBC558", VA = "0xBBC558")]
	public ZNBuffAllyAbility()
	{
	}
}
[Token(Token = "0x2000076")]
public class ZNBuffSelfAbility : ZNBuffAbility
{
	[Token(Token = "0x600024A")]
	[Address(RVA = "0xBBC728", Offset = "0xBBC728", VA = "0xBBC728", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xBBC844", Offset = "0xBBC844", VA = "0xBBC844")]
	public ZNBuffSelfAbility()
	{
	}
}
[Token(Token = "0x2000077")]
public class ZNBurpAbility : ZNEnemyAbility
{
	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Tooltip("How much damage the attack does. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	protected int Damage;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("How long (in seconds) the burp lasts. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected float Duration;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	[Tooltip("How far from the player the zombie needs to be in order to start a burp")]
	protected float StartBurpFromDistance;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The burp SFX")]
	[SerializeField]
	protected Event BurpSFX;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The prefab for the visual first part of the burp effect")]
	[SerializeField]
	protected GameObject PF_InitialBurp;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The prefab for the actual burp zone that does damage and has gameplay logic")]
	[SerializeField]
	protected GameObject PF_BurpZone;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected List<ZNBurpZone> ActiveBurpZones;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xBBC888", Offset = "0xBBC888", VA = "0xBBC888", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xBBCAB4", Offset = "0xBBCAB4", VA = "0xBBCAB4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xBBCABC", Offset = "0xBBCABC", VA = "0xBBCABC", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xBBCAC4", Offset = "0xBBCAC4", VA = "0xBBCAC4", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xBBCC5C", Offset = "0xBBCC5C", VA = "0xBBCC5C", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xBBCD90", Offset = "0xBBCD90", VA = "0xBBCD90", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xBBD2F4", Offset = "0xBBD2F4", VA = "0xBBD2F4")]
	protected void BurpZoneDestroyed(GameObject DestroyedGameObject)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xBBD454", Offset = "0xBBD454", VA = "0xBBD454", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xBBD708", Offset = "0xBBD708", VA = "0xBBD708")]
	public ZNBurpAbility()
	{
	}
}
[Token(Token = "0x2000078")]
public class ZNBurpOnDeathAbility : ZNBurpAbility
{
	[Token(Token = "0x6000255")]
	[Address(RVA = "0xBBD7CC", Offset = "0xBBD7CC", VA = "0xBBD7CC", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xBBD804", Offset = "0xBBD804", VA = "0xBBD804")]
	public ZNBurpOnDeathAbility()
	{
	}
}
[Token(Token = "0x2000079")]
public class ZNBurpZone : SACombinedZone
{
	[Token(Token = "0x200007A")]
	[CompilerGenerated]
	private sealed class <DestroyAfterDuration>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDuration;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNBurpZone <>4__this;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000260")]
			[Address(RVA = "0xBBDCDC", Offset = "0xBBDCDC", VA = "0xBBDCDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000262")]
			[Address(RVA = "0xBBDD24", Offset = "0xBBDD24", VA = "0xBBDD24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0xBBD938", Offset = "0xBBD938", VA = "0xBBD938")]
		[DebuggerHidden]
		public <DestroyAfterDuration>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0xBBDC28", Offset = "0xBBDC28", VA = "0xBBDC28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xBBDC2C", Offset = "0xBBDC2C", VA = "0xBBDC2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0xBBDCE4", Offset = "0xBBDCE4", VA = "0xBBDCE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Room size to scale dictionary")]
	[SerializeField]
	protected SerializableDictionary<EZNRoomSizes, float> RoomSizeToScaleDictionary;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ZNSetupManager SetupManagerRef;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ZNCharacterBase OwningCharacter;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int Damage;

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xBBD808", Offset = "0xBBD808", VA = "0xBBD808", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xBBD204", Offset = "0xBBD204", VA = "0xBBD204")]
	public void InitializeBurpZone(ZNCharacterBase InOwningCharacter, int InDamage, float InDuration)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xBBD8C0", Offset = "0xBBD8C0", VA = "0xBBD8C0")]
	[IteratorStateMachine(typeof(<DestroyAfterDuration>d__2))]
	protected IEnumerator DestroyAfterDuration(float InDuration)
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xBBD960", Offset = "0xBBD960", VA = "0xBBD960", Slot = "11")]
	public override void ApplyZoneEffects(MonoBehaviour InMonoBehaviour)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xBBD82C", Offset = "0xBBD82C", VA = "0xBBD82C")]
	public float GetScaleForRoomSize(EZNRoomSizes InRoomSize)
	{
		return default(float);
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xBBDB4C", Offset = "0xBBDB4C", VA = "0xBBDB4C")]
	public ZNBurpZone()
	{
	}
}
[Token(Token = "0x200007B")]
public class ZNElectricityZone : SACombinedZone
{
	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The passive SFX for the electricity zone")]
	protected Event ElectricityPassiveSFX;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected int Damage;

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xBBDD2C", Offset = "0xBBDD2C", VA = "0xBBDD2C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xBBDD50", Offset = "0xBBDD50", VA = "0xBBDD50", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xBBDD94", Offset = "0xBBDD94", VA = "0xBBDD94", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xBBDDE0", Offset = "0xBBDDE0", VA = "0xBBDDE0")]
	public void InitializeElectricityZone(ZNCharacterBase InOwningCharacter, int InDamage)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xBBDDEC", Offset = "0xBBDDEC", VA = "0xBBDDEC", Slot = "11")]
	public override void ApplyZoneEffects(MonoBehaviour InMonoBehaviour)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xBBDFD8", Offset = "0xBBDFD8", VA = "0xBBDFD8")]
	public ZNElectricityZone()
	{
	}
}
[Token(Token = "0x200007C")]
public abstract class ZNEnemyAbility : MonoBehaviour
{
	[Token(Token = "0x200007D")]
	[CompilerGenerated]
	private sealed class <WaitToStartAbilityLogic>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyAbility <>4__this;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600027E")]
			[Address(RVA = "0xBBE344", Offset = "0xBBE344", VA = "0xBBE344", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000280")]
			[Address(RVA = "0xBBE38C", Offset = "0xBBE38C", VA = "0xBBE38C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xBBE0B8", Offset = "0xBBE0B8", VA = "0xBBE0B8")]
		[DebuggerHidden]
		public <WaitToStartAbilityLogic>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xBBE280", Offset = "0xBBE280", VA = "0xBBE280", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xBBE284", Offset = "0xBBE284", VA = "0xBBE284", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xBBE34C", Offset = "0xBBE34C", VA = "0xBBE34C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200007E")]
	[CompilerGenerated]
	private sealed class <EndAbilityAfterDelay>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyAbility <>4__this;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000284")]
			[Address(RVA = "0xBBE450", Offset = "0xBBE450", VA = "0xBBE450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000286")]
			[Address(RVA = "0xBBE498", Offset = "0xBBE498", VA = "0xBBE498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xBBE1E8", Offset = "0xBBE1E8", VA = "0xBBE1E8")]
		[DebuggerHidden]
		public <EndAbilityAfterDelay>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xBBE394", Offset = "0xBBE394", VA = "0xBBE394", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xBBE398", Offset = "0xBBE398", VA = "0xBBE398", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xBBE458", Offset = "0xBBE458", VA = "0xBBE458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200007F")]
	[CompilerGenerated]
	private sealed class <EndCooldown>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyAbility <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600028A")]
			[Address(RVA = "0xBBE55C", Offset = "0xBBE55C", VA = "0xBBE55C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028C")]
			[Address(RVA = "0xBBE5A4", Offset = "0xBBE5A4", VA = "0xBBE5A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xBBE210", Offset = "0xBBE210", VA = "0xBBE210")]
		[DebuggerHidden]
		public <EndCooldown>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xBBE4A0", Offset = "0xBBE4A0", VA = "0xBBE4A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xBBE4A4", Offset = "0xBBE4A4", VA = "0xBBE4A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xBBE564", Offset = "0xBBE564", VA = "0xBBE564", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNEnemyNavigation EnemyNavigation;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNEnemyAnimInstance EnemyAnimInstance;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnAbilityStarted OnAbilityStartedDel;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FOnAbilityEnded OnAbilityEndedDel;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The priority of the ability. Abilities with higher priority will try to be used first in most cases.")]
	[Header("Ability")]
	[SerializeField]
	protected int Priority;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("If set, this condition must also be met in order to use this ability.")]
	[SerializeField]
	protected SAConditionAsset AdditionalRequiredCondition;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("How long the ability goes on cooldown for after use. If set to 0, does not go on cooldown after use.")]
	[SerializeField]
	protected float AbilityCooldown;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[Tooltip("How long (in seconds) before the logic part of the ability starts.")]
	protected float StartAbilityLogicDelay;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("If the ability should automatically end after a delay on start.")]
	[SerializeField]
	protected bool bAutoEndAbilityAfterDelayOnStart;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	[Tooltip("How long (in seconds) it takes for the ability to end automatically when bAutoEndAbilityAfterDelayOnStart is true.")]
	protected float AutoEndAbilityDelayOnStartTime;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("If the ability stops enemy movement when activated.")]
	[SerializeField]
	protected bool bStopMovement;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The ability animation clip that plays when the ability starts")]
	[SerializeField]
	protected AnimationClip AbilityAnimationClip;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The speed of the ability animation clip that plays when the ability starts")]
	[SerializeField]
	protected float AbilityAnimationSpeed;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected int CurrentPriority;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool bAbilityActive;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected int CurrentActiveAbilityID;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected bool bCooldownActive;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xBBC88C", Offset = "0xBBC88C", VA = "0xBBC88C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xBBCAB8", Offset = "0xBBCAB8", VA = "0xBBCAB8", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xBBCAC0", Offset = "0xBBCAC0", VA = "0xBBCAC0", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xBBCAC8", Offset = "0xBBCAC8", VA = "0xBBCAC8", Slot = "7")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xBBCC60", Offset = "0xBBCC60", VA = "0xBBCC60", Slot = "8")]
	public virtual void StartAbility()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xBBE050", Offset = "0xBBE050", VA = "0xBBE050")]
	[IteratorStateMachine(typeof(<WaitToStartAbilityLogic>d__25))]
	protected IEnumerator WaitToStartAbilityLogic()
	{
		return null;
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xBBC180", Offset = "0xBBC180", VA = "0xBBC180", Slot = "9")]
	protected virtual void StartAbilityLogic()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xBBE0E0", Offset = "0xBBE0E0", VA = "0xBBE0E0", Slot = "10")]
	public virtual void EndAbility()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xBBE1D0", Offset = "0xBBE1D0", VA = "0xBBE1D0")]
	public void TryInterruptAbility()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xBBDFE8", Offset = "0xBBDFE8", VA = "0xBBDFE8")]
	[IteratorStateMachine(typeof(<EndAbilityAfterDelay>d__29))]
	protected IEnumerator EndAbilityAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xBBE168", Offset = "0xBBE168", VA = "0xBBE168")]
	[IteratorStateMachine(typeof(<EndCooldown>d__30))]
	protected IEnumerator EndCooldown()
	{
		return null;
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xBBE238", Offset = "0xBBE238", VA = "0xBBE238")]
	private void EnemyDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xBBE250", Offset = "0xBBE250", VA = "0xBBE250")]
	private void EnemyStaggeredStarted(EZNStaggerTypes InStaggerType)
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xBBE268", Offset = "0xBBE268", VA = "0xBBE268", Slot = "11")]
	public virtual int GetCurrentPriority()
	{
		return default(int);
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xBBBD20", Offset = "0xBBBD20", VA = "0xBBBD20", Slot = "12")]
	public virtual bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xBBE270", Offset = "0xBBE270", VA = "0xBBE270", Slot = "13")]
	public virtual bool CanEndAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xBBE278", Offset = "0xBBE278", VA = "0xBBE278")]
	public bool IsAbilityActive()
	{
		return default(bool);
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xBBBE18", Offset = "0xBBBE18", VA = "0xBBBE18")]
	protected ZNEnemyAbility()
	{
	}
}
[Token(Token = "0x2000080")]
public class ZNEquipConstructionToolAbility : ZNEquipItemAbility
{
	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ZNConstructionZombie OwningConstructionZombie;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xBBE5AC", Offset = "0xBBE5AC", VA = "0xBBE5AC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xBBE608", Offset = "0xBBE608", VA = "0xBBE608", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xBBE734", Offset = "0xBBE734", VA = "0xBBE734")]
	public ZNEquipConstructionToolAbility()
	{
	}
}
[Token(Token = "0x2000081")]
public class ZNEquipItemAbility : ZNEnemyAbility
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The game object item to equip.")]
	[SerializeField]
	protected GameObject PF_EquipItem;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected ZNEquipItem AssociatedEquipItem;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xBBE604", Offset = "0xBBE604", VA = "0xBBE604", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xBBE7AC", Offset = "0xBBE7AC", VA = "0xBBE7AC", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xBBE830", Offset = "0xBBE830", VA = "0xBBE830", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xBBE834", Offset = "0xBBE834", VA = "0xBBE834", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xBBE838", Offset = "0xBBE838", VA = "0xBBE838", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xBBE69C", Offset = "0xBBE69C", VA = "0xBBE69C", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xBBE770", Offset = "0xBBE770", VA = "0xBBE770")]
	public ZNEquipItemAbility()
	{
	}
}
[Token(Token = "0x2000082")]
public class ZNExplodeCrateAbility : ZNEnemyAbility
{
	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected ZNPostalZombie OwningPostalZombie;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected ZNDestroyablePostalBox AssociatedPostalBox;

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xBBE8C4", Offset = "0xBBE8C4", VA = "0xBBE8C4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xBBE998", Offset = "0xBBE998", VA = "0xBBE998", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xBBE99C", Offset = "0xBBE99C", VA = "0xBBE99C", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xBBEC74", Offset = "0xBBEC74", VA = "0xBBEC74", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xBBED0C", Offset = "0xBBED0C", VA = "0xBBED0C")]
	public ZNExplodeCrateAbility()
	{
	}
}
[Token(Token = "0x2000083")]
public class ZNHeckleBuffAbility : ZNBuffAllyAbility
{
	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("Heckle")]
	[Tooltip("The heckle SFX")]
	[SerializeField]
	protected Event HeckleSFX;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("The heckle VFX prefab")]
	[SerializeField]
	protected GameObject PF_HeckleVFX;

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xBBED48", Offset = "0xBBED48", VA = "0xBBED48", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xBBEE44", Offset = "0xBBEE44", VA = "0xBBEE44", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xBBEE48", Offset = "0xBBEE48", VA = "0xBBEE48")]
	public ZNHeckleBuffAbility()
	{
	}
}
[Token(Token = "0x2000084")]
public class ZNMachineGunArcAbility : ZNEnemyAbility
{
	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <EndAbilityAfterDelayAfterShooting>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMachineGunArcAbility <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002AE")]
			[Address(RVA = "0xBBFCD8", Offset = "0xBBFCD8", VA = "0xBBFCD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B0")]
			[Address(RVA = "0xBBFD20", Offset = "0xBBFD20", VA = "0xBBFD20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xBBF6D0", Offset = "0xBBF6D0", VA = "0xBBF6D0")]
		[DebuggerHidden]
		public <EndAbilityAfterDelayAfterShooting>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xBBFC1C", Offset = "0xBBFC1C", VA = "0xBBFC1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xBBFC20", Offset = "0xBBFC20", VA = "0xBBFC20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xBBFCE0", Offset = "0xBBFCE0", VA = "0xBBFCE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected SAPoolManager PoolManager;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("How much damage the attack does. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	[Tooltip("How much time we have between shots")]
	protected float TimeBetweenShots;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("How many shots we do")]
	protected float MaxNumShots;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The SFX that plays when the machine gun shoots")]
	[SerializeField]
	protected Event ShootSFX;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The prefab for the machine gun equip item")]
	[SerializeField]
	protected GameObject PF_MachineGunEquipItem;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Tooltip("The VFX for the machine gun shooting")]
	protected FSAPooledObjectInitializationInfo MachineGunShotVFXInitializationInfo;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Tooltip("The VFX for the machine gun hitting a damageable")]
	protected FSAPooledObjectInitializationInfo MachineGunHitVFXInitializationInfo;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Tooltip("The VFX for the machine gun hitting an obstacle")]
	protected FSAPooledObjectInitializationInfo MachineGunObstacleHitVFXInitializationInfo;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNTraceEquipItem MachineGunEquipItem;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected bool bShootingActive;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	protected float TimeUntilNextShot;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected int CurrentNumShots;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected List<IZNDamageable> HitDamageables;

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xBBEE4C", Offset = "0xBBEE4C", VA = "0xBBEE4C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xBBF03C", Offset = "0xBBF03C", VA = "0xBBF03C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xBBF040", Offset = "0xBBF040", VA = "0xBBF040", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xBBF0E4", Offset = "0xBBF0E4", VA = "0xBBF0E4", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xBBF0E8", Offset = "0xBBF0E8", VA = "0xBBF0E8", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xBBF114", Offset = "0xBBF114", VA = "0xBBF114", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xBBF098", Offset = "0xBBF098", VA = "0xBBF098")]
	protected void TryShoot()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xBBF668", Offset = "0xBBF668", VA = "0xBBF668")]
	[IteratorStateMachine(typeof(<EndAbilityAfterDelayAfterShooting>d__21))]
	protected IEnumerator EndAbilityAfterDelayAfterShooting()
	{
		return null;
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xBBF194", Offset = "0xBBF194", VA = "0xBBF194")]
	protected void TryDamageTrace()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xBBF6F8", Offset = "0xBBF6F8", VA = "0xBBF6F8", Slot = "10")]
	public override void EndAbility()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xBBF80C", Offset = "0xBBF80C", VA = "0xBBF80C", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xBBFB58", Offset = "0xBBFB58", VA = "0xBBFB58")]
	public ZNMachineGunArcAbility()
	{
	}
}
[Token(Token = "0x2000086")]
public class ZNShootPeashooterAbility : ZNEnemyAbility
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected SAPoolManager PoolManager;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("How much damage the attack does. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The SFX that plays when the machine gun shoots")]
	[SerializeField]
	protected Event ShootSFX;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("The prefab for the machine gun equip item")]
	protected GameObject PF_PeashooterEquipItem;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Tooltip("How far the additional left and right traces are from the trace root")]
	protected float AdditionalLeftRightTraceDistance;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Tooltip("The VFX for the peashooter shooting")]
	protected FSAPooledObjectInitializationInfo PeashooterShotVFXInitializationInfo;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Tooltip("The VFX for the peashooter hitting a damageable")]
	protected FSAPooledObjectInitializationInfo PeashooterHitVFXInitializationInfo;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Tooltip("The VFX for the peashooter hitting an obstacle")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo PeashooterObstacleHitVFXInitializationInfo;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNTraceEquipItem PeashooterEquipItem;

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xBBFD28", Offset = "0xBBFD28", VA = "0xBBFD28", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xBBFF18", Offset = "0xBBFF18", VA = "0xBBFF18", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xBBFF1C", Offset = "0xBBFF1C", VA = "0xBBFF1C", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xBBFF20", Offset = "0xBBFF20", VA = "0xBBFF20", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xBBFF4C", Offset = "0xBBFF4C", VA = "0xBBFF4C", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xBBFF50", Offset = "0xBBFF50", VA = "0xBBFF50")]
	protected void TryDamageTrace()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xBC0674", Offset = "0xBC0674", VA = "0xBC0674", Slot = "10")]
	public override void EndAbility()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xBC0784", Offset = "0xBC0784", VA = "0xBC0784", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xBC0AD4", Offset = "0xBC0AD4", VA = "0xBC0AD4")]
	public ZNShootPeashooterAbility()
	{
	}
}
[Token(Token = "0x2000087")]
public class ZNSlashAbility : ZNEnemyAbility
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Tooltip("How much damage the attack does. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("How long it takes to deal damage once this ability starts")]
	[SerializeField]
	protected Event SlashSFX;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected IZNDamageable DamageableOnStartAbility;

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xBC0B24", Offset = "0xBC0B24", VA = "0xBC0B24", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xBC0B2C", Offset = "0xBC0B2C", VA = "0xBC0B2C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xBC0B34", Offset = "0xBC0B34", VA = "0xBC0B34", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xBC0B3C", Offset = "0xBC0B3C", VA = "0xBC0B3C", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xBC0B44", Offset = "0xBC0B44", VA = "0xBC0B44", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xBC0BD0", Offset = "0xBC0BD0", VA = "0xBC0BD0", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xBC0CDC", Offset = "0xBC0CDC", VA = "0xBC0CDC", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xBC0D78", Offset = "0xBC0D78", VA = "0xBC0D78")]
	public ZNSlashAbility()
	{
	}
}
[Token(Token = "0x2000088")]
public class ZNSlashAndSpawnGrenadeProjectilesAbility : ZNSlashAbility
{
	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ZNConstructionZombie OwningConstructionZombie;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The grenade projectile prefab to spawn")]
	[SerializeField]
	protected GameObject PF_GrenadeProjectile;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The number of projectiles to spawn")]
	[SerializeField]
	protected int NumProjectilesToSpawn;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	[Tooltip("How far from the hit target that the objects spawn")]
	protected float ProjectileSpawnDistance;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Tooltip("How much damage the grenade does. SHOULD BE MOVED TO ASSET CLASS LONG-TERM")]
	protected int GrenadeDamage;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Tooltip("The grenade stats")]
	protected FZNTieredGrenadeWeaponStats GrenadeStats;

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xBC0D88", Offset = "0xBC0D88", VA = "0xBC0D88", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xBC0DE4", Offset = "0xBC0DE4", VA = "0xBC0DE4", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xBC11DC", Offset = "0xBC11DC", VA = "0xBC11DC", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xBC12CC", Offset = "0xBC12CC", VA = "0xBC12CC")]
	public ZNSlashAndSpawnGrenadeProjectilesAbility()
	{
	}
}
[Token(Token = "0x2000089")]
public class ZNSlashWithVisualWeaponAbility : ZNSlashAbility
{
	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The visual weapon")]
	[SerializeField]
	protected GameObject PF_VisualWeaponEquipItem;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The visual weapon's equip item hand")]
	[SerializeField]
	protected ZNHands EquipItemHand;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ZNEquipItem VisualEquipItem;

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xBC133C", Offset = "0xBC133C", VA = "0xBC133C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xBC1608", Offset = "0xBC1608", VA = "0xBC1608", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xBC173C", Offset = "0xBC173C", VA = "0xBC173C", Slot = "10")]
	public override void EndAbility()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xBC1894", Offset = "0xBC1894", VA = "0xBC1894")]
	public ZNSlashWithVisualWeaponAbility()
	{
	}
}
[Token(Token = "0x200008A")]
public class ZNSummonEnemyAbility : ZNEnemyAbility
{
	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The enemies that can be spawned by this ability.")]
	[SerializeField]
	protected List<ZNEnemyAsset> EnemiesToSpawn;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The number of enemies to spawn at once")]
	protected int NumEnemiesToSpawnAtOnce;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("The SFX that plays when summoning an enemy")]
	protected Event SummonEnemySFX;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("The max number of enemies that can be summoned/spawned by this ability. Mostly as a failsafe to ensure we don't have infinite enemies, but you should set cooldowns to prevent a high number of enemies regardless.")]
	protected int MaxNumEnemiesSummonableWithThisAbility;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected int CurrentNumEnemiesSummoned;

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xBC18A4", Offset = "0xBC18A4", VA = "0xBC18A4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xBC192C", Offset = "0xBC192C", VA = "0xBC192C", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xBC1A3C", Offset = "0xBC1A3C", VA = "0xBC1A3C", Slot = "14")]
	protected virtual ZNEnemyBase SummonEnemy()
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xBC1B3C", Offset = "0xBC1B3C", VA = "0xBC1B3C", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xBC1B74", Offset = "0xBC1B74", VA = "0xBC1B74", Slot = "15")]
	public virtual bool CanSummonEnemy()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xBC1BE8", Offset = "0xBC1BE8", VA = "0xBC1BE8")]
	public ZNSummonEnemyAbility()
	{
	}
}
[Token(Token = "0x200008B")]
public class ZNSummonEnemyAtThresholdAbility : ZNSummonEnemyAbility
{
	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Dictionary<int, int> HealthThresholdAsIntegerToSummonAmountDictionary;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected List<int> OrderedHealthThresholdsAsIntegers;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNHealthComponent OwningEnemyHealthComponent;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Tooltip("A dictionary of health percentages to the number of enemies to summon. When the health reaches the percentage or lower, this ability can be used.")]
	[SerializeField]
	protected SerializableDictionary<double, int> HealthThresholdToSummonAmountDictionary;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected int NextHealthThresholdIndex;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	protected int QueuedSummons;

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xBC1C00", Offset = "0xBC1C00", VA = "0xBC1C00", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xBC22E0", Offset = "0xBC22E0", VA = "0xBC22E0", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xBC1D50", Offset = "0xBC1D50", VA = "0xBC1D50")]
	protected void InitializeTrueDictionaries()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xBC2470", Offset = "0xBC2470", VA = "0xBC2470", Slot = "14")]
	protected override ZNEnemyBase SummonEnemy()
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xBC24F4", Offset = "0xBC24F4", VA = "0xBC24F4")]
	private void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xBC25E0", Offset = "0xBC25E0", VA = "0xBC25E0", Slot = "15")]
	public override bool CanSummonEnemy()
	{
		return default(bool);
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xBC2610", Offset = "0xBC2610", VA = "0xBC2610")]
	public ZNSummonEnemyAtThresholdAbility()
	{
	}
}
[Token(Token = "0x200008D")]
public class ZNTeleportAbility : ZNEnemyAbility
{
	[Token(Token = "0x200008E")]
	[CompilerGenerated]
	private sealed class <SpawnAtNewPosition>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNTeleportAbility <>4__this;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 InPosition;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion InRotation;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E7")]
			[Address(RVA = "0xBC32DC", Offset = "0xBC32DC", VA = "0xBC32DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E9")]
			[Address(RVA = "0xBC3324", Offset = "0xBC3324", VA = "0xBC3324", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xBC2E48", Offset = "0xBC2E48", VA = "0xBC2E48")]
		[DebuggerHidden]
		public <SpawnAtNewPosition>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xBC302C", Offset = "0xBC302C", VA = "0xBC302C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xBC3030", Offset = "0xBC3030", VA = "0xBC3030", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xBC32E4", Offset = "0xBC32E4", VA = "0xBC32E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected SAPoolManager PoolManager;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The VFX for the portal")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo PortalVFXInitializationInfo;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("How far behind Tombie to spawn the portal VFX")]
	[SerializeField]
	protected float BehindTombiePortalVFXSpawnDistance;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("The animation to play when exiting the portal")]
	protected AnimationClip ExitPortalAnimationClip;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("How long it takes (in seconds) after entering the teleporter before spawning at the other one")]
	[SerializeField]
	protected float TeleportDelayTime;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("The SFX to play when the enter portal appears")]
	[SerializeField]
	protected Event EnterPortalAppearSFX;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("The SFX to play when the exit portal appears")]
	[SerializeField]
	protected Event ExitPortalAppearSFX;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected GameObject EnterPortalPositionObject;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected GameObject ExitPortalPositionObject;

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xBC27C0", Offset = "0xBC27C0", VA = "0xBC27C0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xBC28E4", Offset = "0xBC28E4", VA = "0xBC28E4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xBC28EC", Offset = "0xBC28EC", VA = "0xBC28EC", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xBC28F4", Offset = "0xBC28F4", VA = "0xBC28F4", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xBC28FC", Offset = "0xBC28FC", VA = "0xBC28FC", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xBC2A60", Offset = "0xBC2A60", VA = "0xBC2A60", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBC2D94", Offset = "0xBC2D94", VA = "0xBC2D94")]
	[IteratorStateMachine(typeof(<SpawnAtNewPosition>d__15))]
	protected IEnumerator SpawnAtNewPosition(Vector3 InPosition, Quaternion InRotation)
	{
		return null;
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBC2E70", Offset = "0xBC2E70", VA = "0xBC2E70", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBC2E9C", Offset = "0xBC2E9C", VA = "0xBC2E9C")]
	public bool IsAnyDoorOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBC3018", Offset = "0xBC3018", VA = "0xBC3018")]
	public ZNTeleportAbility()
	{
	}
}
[Token(Token = "0x200008F")]
public class ZNThrowGrenadeProjectileAbility : ZNThrowProjectileAbility
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("If the projectile is a grenade, use these stats.")]
	[SerializeField]
	protected FZNTieredGrenadeWeaponStats GrenadeStats;

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xBC332C", Offset = "0xBC332C", VA = "0xBC332C", Slot = "14")]
	protected override ZNProjectileBase SpawnProjectile(Vector3 InSpawnPosition, Quaternion InSpawnRotation, Vector3 InLinearVelocity, Vector3 InAngularVelocity)
	{
		return null;
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xBC34F0", Offset = "0xBC34F0", VA = "0xBC34F0")]
	public ZNThrowGrenadeProjectileAbility()
	{
	}
}
[Token(Token = "0x2000090")]
public class ZNThrowProjectileAbility : ZNEnemyAbility
{
	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The required equip item key we need to have equipped in order to throw the tool")]
	[SerializeField]
	protected string RequiredEquipItemKey;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The projectile that will be thrown")]
	protected GameObject PF_ThrownProjectile;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("If true, we don't need a required equip item key. Instead, we create the instant throw equip item on start. *Note that the user cannot have a current equip item to use this if this is true.")]
	protected bool bInstantThrow;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("When instant throw is true, this is the equip item that we equip mainly for visual purposes")]
	protected GameObject PF_InstantThrowEquipItem;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("How much to multiply the distance by. Higher numbers will cause the projectiles to go faster and go further past the target.")]
	[SerializeField]
	protected float DistanceMultiplier;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[Tooltip("How much damage the projectile does")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ZNEquipItem InstantEquipItem;

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xBC3564", Offset = "0xBC3564", VA = "0xBC3564", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xBC36AC", Offset = "0xBC36AC", VA = "0xBC36AC", Slot = "8")]
	public override void StartAbility()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xBC3748", Offset = "0xBC3748", VA = "0xBC3748", Slot = "9")]
	protected override void StartAbilityLogic()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xBC34B0", Offset = "0xBC34B0", VA = "0xBC34B0", Slot = "14")]
	protected virtual ZNProjectileBase SpawnProjectile(Vector3 InSpawnPosition, Quaternion InSpawnRotation, Vector3 InLinearVelocity, Vector3 InAngularVelocity)
	{
		return null;
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xBC3B60", Offset = "0xBC3B60", VA = "0xBC3B60", Slot = "10")]
	public override void EndAbility()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xBC3BF8", Offset = "0xBC3BF8", VA = "0xBC3BF8", Slot = "12")]
	public override bool CanStartAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xBC3550", Offset = "0xBC3550", VA = "0xBC3550")]
	public ZNThrowProjectileAbility()
	{
	}
}
[Token(Token = "0x2000091")]
public class ZNEnemyStandUpState : ZNEnemyStateMachineBehaviour
{
	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xBC4168", Offset = "0xBC4168", VA = "0xBC4168", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xBC422C", Offset = "0xBC422C", VA = "0xBC422C")]
	public ZNEnemyStandUpState()
	{
	}
}
[Token(Token = "0x2000092")]
public class ZNEnemyStateMachineBehaviour : ZNStateMachineBehaviourBase
{
	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNEnemyAnimInstance AnimInstanceAsZNEnemyAnimInstance;

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xBC423C", Offset = "0xBC423C", VA = "0xBC423C", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBC4294", Offset = "0xBC4294", VA = "0xBC4294", Slot = "19")]
	protected override void TryGetAnimInstance(Animator animator)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBC4438", Offset = "0xBC4438", VA = "0xBC4438", Slot = "20")]
	protected virtual void TryGetOwningEnemy(Animator animator)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xBC4234", Offset = "0xBC4234", VA = "0xBC4234")]
	public ZNEnemyStateMachineBehaviour()
	{
	}
}
[Token(Token = "0x2000093")]
public class ZNStaggerState : ZNEnemyStateMachineBehaviour
{
	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xBC4504", Offset = "0xBC4504", VA = "0xBC4504", Slot = "18")]
	public override void OnStateExitGuaranteed(Animator animator)
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xBC45E0", Offset = "0xBC45E0", VA = "0xBC45E0")]
	public ZNStaggerState()
	{
	}
}
[Token(Token = "0x2000094")]
public class ZNStartStaggeredIdleTimerState : ZNEnemyStateMachineBehaviour
{
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The stagger type that we start the cooldown for")]
	[SerializeField]
	protected EZNStaggerTypes StaggerType;

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xBC45E8", Offset = "0xBC45E8", VA = "0xBC45E8", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xBC47B4", Offset = "0xBC47B4", VA = "0xBC47B4")]
	public ZNStartStaggeredIdleTimerState()
	{
	}
}
[Token(Token = "0x2000095")]
public class ZNStateMachineBehaviourBase : SAStateMachineBehaviourBase
{
	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNAnimInstance AnimInstanceAsZNAnimInstance;

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xBC4364", Offset = "0xBC4364", VA = "0xBC4364", Slot = "19")]
	protected override void TryGetAnimInstance(Animator animator)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xBC44FC", Offset = "0xBC44FC", VA = "0xBC44FC")]
	public ZNStateMachineBehaviourBase()
	{
	}
}
[Token(Token = "0x2000096")]
public class ZNAnimInstance : SAAnimInstance
{
	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xBC47BC", Offset = "0xBC47BC", VA = "0xBC47BC")]
	public ZNAnimInstance()
	{
	}
}
[Token(Token = "0x2000097")]
public class ZNBasicZombieAnimInstance : ZNEnemyAnimInstance
{
	[Token(Token = "0x2000098")]
	[CompilerGenerated]
	private sealed class <PlayTestAnimOnRepeat>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNBasicZombieAnimInstance <>4__this;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000307")]
			[Address(RVA = "0xBC4A74", Offset = "0xBC4A74", VA = "0xBC4A74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000309")]
			[Address(RVA = "0xBC4ABC", Offset = "0xBC4ABC", VA = "0xBC4ABC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0xBC4980", Offset = "0xBC4980", VA = "0xBC4980")]
		[DebuggerHidden]
		public <PlayTestAnimOnRepeat>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xBC49B8", Offset = "0xBC49B8", VA = "0xBC49B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xBC49BC", Offset = "0xBC49BC", VA = "0xBC49BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xBC4A7C", Offset = "0xBC4A7C", VA = "0xBC4A7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Animation component")]
	[SerializeField]
	protected Animation AnimationComponent;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The animation clip to play on repeat")]
	protected AnimationClip AnimClip;

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xBC47C4", Offset = "0xBC47C4", VA = "0xBC47C4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xBC47CC", Offset = "0xBC47CC", VA = "0xBC47CC", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xBC4918", Offset = "0xBC4918", VA = "0xBC4918")]
	[IteratorStateMachine(typeof(<PlayTestAnimOnRepeat>d__4))]
	protected IEnumerator PlayTestAnimOnRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xBC49A8", Offset = "0xBC49A8", VA = "0xBC49A8")]
	public ZNBasicZombieAnimInstance()
	{
	}
}
[Token(Token = "0x2000099")]
public class ZNChunkyZombieAnimInstance : ZNEnemyAnimInstance
{
	[Token(Token = "0x600030A")]
	[Address(RVA = "0xBC4AC4", Offset = "0xBC4AC4", VA = "0xBC4AC4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xBC4ACC", Offset = "0xBC4ACC", VA = "0xBC4ACC")]
	public ZNChunkyZombieAnimInstance()
	{
	}
}
[Token(Token = "0x200009A")]
public class ZNConstructionZombieAnimInstance : ZNEnemyAnimInstance
{
	[Token(Token = "0x600030C")]
	[Address(RVA = "0xBC4AD4", Offset = "0xBC4AD4", VA = "0xBC4AD4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xBC4ADC", Offset = "0xBC4ADC", VA = "0xBC4ADC")]
	public ZNConstructionZombieAnimInstance()
	{
	}
}
[Token(Token = "0x200009B")]
public class ZNEnemyAnimInstance : ZNAnimInstance
{
	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xBC4AE4", Offset = "0xBC4AE4", VA = "0xBC4AE4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xBC47D0", Offset = "0xBC47D0", VA = "0xBC47D0", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xBC4DA4", Offset = "0xBC4DA4", VA = "0xBC4DA4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xBC4EA8", Offset = "0xBC4EA8", VA = "0xBC4EA8", Slot = "7")]
	public override void PlayAnimationMontage(AnimationClip InAnimationClip, float InAnimationSpeed = 1f, bool bInAnimStopsMovement = false)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xBC4FCC", Offset = "0xBC4FCC", VA = "0xBC4FCC", Slot = "8")]
	public override void NotifyEndAnimationMontage()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xBC50B8", Offset = "0xBC50B8", VA = "0xBC50B8")]
	public void PlayReact(EZNBodyParts InBodyPart)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xBC528C", Offset = "0xBC528C", VA = "0xBC528C")]
	protected void CharacterDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xBC49B0", Offset = "0xBC49B0", VA = "0xBC49B0")]
	public ZNEnemyAnimInstance()
	{
	}
}
[Token(Token = "0x200009C")]
public class ZNGargoyleZombieAnimInstance : ZNEnemyAnimInstance
{
	[Token(Token = "0x6000316")]
	[Address(RVA = "0xBC52F0", Offset = "0xBC52F0", VA = "0xBC52F0", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xBC52F8", Offset = "0xBC52F8", VA = "0xBC52F8")]
	public ZNGargoyleZombieAnimInstance()
	{
	}
}
[Token(Token = "0x200009D")]
public class ZNPostalZombieAnimInstance : ZNEnemyAnimInstance
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The left hand IK position")]
	private Transform LeftHandIKPosition;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The right hand IK position")]
	private Transform RightHandIKPosition;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int ArmOverrideLayer;

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xBC5300", Offset = "0xBC5300", VA = "0xBC5300", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xBC537C", Offset = "0xBC537C", VA = "0xBC537C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xBC5384", Offset = "0xBC5384", VA = "0xBC5384")]
	protected void OnAnimatorIK(int layerIndex)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xBC54BC", Offset = "0xBC54BC", VA = "0xBC54BC")]
	public ZNPostalZombieAnimInstance()
	{
	}
}
[Token(Token = "0x200009E")]
public class ZNBasicZombieAIController : ZNEnemyAIControllerBase
{
	[Token(Token = "0x600031C")]
	[Address(RVA = "0xBC54C4", Offset = "0xBC54C4", VA = "0xBC54C4")]
	public ZNBasicZombieAIController()
	{
	}
}
[Token(Token = "0x200009F")]
public class ZNChunkyZombieAIController : ZNEnemyAIControllerBase
{
	[Token(Token = "0x600031D")]
	[Address(RVA = "0xBC5550", Offset = "0xBC5550", VA = "0xBC5550")]
	public ZNChunkyZombieAIController()
	{
	}
}
[Token(Token = "0x20000A0")]
public class ZNConstructionZombieAIController : ZNEnemyAIControllerBase
{
	[Token(Token = "0x600031E")]
	[Address(RVA = "0xBC5554", Offset = "0xBC5554", VA = "0xBC5554")]
	public ZNConstructionZombieAIController()
	{
	}
}
[Token(Token = "0x20000A1")]
public class ZNEnemyAIControllerBase : SAAIController
{
	[Token(Token = "0x20000A2")]
	[CompilerGenerated]
	private sealed class <RecalculateBehaviorOnInterval>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyAIControllerBase <>4__this;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600032A")]
			[Address(RVA = "0xBC5B34", Offset = "0xBC5B34", VA = "0xBC5B34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600032C")]
			[Address(RVA = "0xBC5B7C", Offset = "0xBC5B7C", VA = "0xBC5B7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xBC5698", Offset = "0xBC5698", VA = "0xBC5698")]
		[DebuggerHidden]
		public <RecalculateBehaviorOnInterval>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xBC5A84", Offset = "0xBC5A84", VA = "0xBC5A84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xBC5A88", Offset = "0xBC5A88", VA = "0xBC5A88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xBC5B3C", Offset = "0xBC5B3C", VA = "0xBC5B3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("How often we recalculate the behavior")]
	protected float RecalculateBehaviorInterval;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNEnemyBase EnemyPawn;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected List<ZNEnemyAbility> EnemyAbilities;

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xBC5558", Offset = "0xBC5558", VA = "0xBC5558", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xBC55EC", Offset = "0xBC55EC", VA = "0xBC55EC", Slot = "9")]
	public override void Possess(SACharacter InPawn)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xBC567C", Offset = "0xBC567C", VA = "0xBC567C", Slot = "10")]
	public override void UnPossess()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xBC5584", Offset = "0xBC5584", VA = "0xBC5584")]
	[IteratorStateMachine(typeof(<RecalculateBehaviorOnInterval>d__6))]
	protected IEnumerator RecalculateBehaviorOnInterval()
	{
		return null;
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xBC56C0", Offset = "0xBC56C0", VA = "0xBC56C0", Slot = "11")]
	protected virtual void RecalculateBehavior()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xBC58EC", Offset = "0xBC58EC", VA = "0xBC58EC", Slot = "12")]
	public virtual bool CanActivateAbilities()
	{
		return default(bool);
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xBC5990", Offset = "0xBC5990", VA = "0xBC5990")]
	public bool IsAnyAbilityActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xBC54C8", Offset = "0xBC54C8", VA = "0xBC54C8")]
	public ZNEnemyAIControllerBase()
	{
	}
}
[Token(Token = "0x20000A3")]
public class ZNGargoyleZombieAIController : ZNEnemyAIControllerBase
{
	[Token(Token = "0x600032D")]
	[Address(RVA = "0xBC5B84", Offset = "0xBC5B84", VA = "0xBC5B84")]
	public ZNGargoyleZombieAIController()
	{
	}
}
[Token(Token = "0x20000A4")]
public class ZNPostalZombieAIController : ZNEnemyAIControllerBase
{
	[Token(Token = "0x600032E")]
	[Address(RVA = "0xBC5B88", Offset = "0xBC5B88", VA = "0xBC5B88")]
	public ZNPostalZombieAIController()
	{
	}
}
[Token(Token = "0x20000A5")]
public class ZNEquipItem : MonoBehaviour
{
	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The key we use for identifying this equip item's type")]
	[SerializeField]
	protected string EquipItemTypeKey;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("When this item is equipped, it is rotated by this amount")]
	protected Quaternion RotationWhenEquipped;

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xBC5B8C", Offset = "0xBC5B8C", VA = "0xBC5B8C")]
	public string GetEquipItemTypeKey()
	{
		return null;
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xBC5B94", Offset = "0xBC5B94", VA = "0xBC5B94")]
	public Quaternion GetRotationWhenEquipped()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xBC5BA0", Offset = "0xBC5BA0", VA = "0xBC5BA0")]
	public ZNEquipItem()
	{
	}
}
[Token(Token = "0x20000A6")]
public class ZNTraceEquipItem : ZNEquipItem
{
	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The trace root for the equip item")]
	[SerializeField]
	protected Transform TraceRoot;

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xBC5BA8", Offset = "0xBC5BA8", VA = "0xBC5BA8")]
	public Transform GetTraceRoot()
	{
		return null;
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xBC5BB0", Offset = "0xBC5BB0", VA = "0xBC5BB0")]
	public ZNTraceEquipItem()
	{
	}
}
[Token(Token = "0x20000A7")]
public class ZNEnemyNavigation : MonoBehaviour
{
	[Token(Token = "0x20000A8")]
	[CompilerGenerated]
	private sealed class <CalculatePathOnInterval>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyNavigation <>4__this;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0xBC7D7C", Offset = "0xBC7D7C", VA = "0xBC7D7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000350")]
			[Address(RVA = "0xBC7DC4", Offset = "0xBC7DC4", VA = "0xBC7DC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xBC7054", Offset = "0xBC7054", VA = "0xBC7054")]
		[DebuggerHidden]
		public <CalculatePathOnInterval>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xBC7CB8", Offset = "0xBC7CB8", VA = "0xBC7CB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xBC7CBC", Offset = "0xBC7CBC", VA = "0xBC7CBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xBC7D84", Offset = "0xBC7D84", VA = "0xBC7D84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected NavMeshAgent Agent;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("How long (in seconds) between recalculations for navigation")]
	[SerializeField]
	protected float NavigationRecalculationTime;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Tooltip("If we should show the debug spheres")]
	protected bool bShowDebugSpheres;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Special prefab to use for the debug sphere")]
	[SerializeField]
	protected GameObject PF_DebugSphere;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNGameModeBase GameModeRef;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected NavMeshPath Path;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected GameObject DebugCube;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNEnemyAttackPosition CurrentEnemyAttackPosition;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected IZNNavigable MainNavTarget;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Vector3 DestinationPosition;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected bool bWithinStoppingDistance;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected int StoppingDistanceMovementStopperID;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected bool bValidPathToTarget;

	[Token(Token = "0x14000002")]
	public event Action<bool> OnIdle
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xBC6EF4", Offset = "0xBC6EF4", VA = "0xBC6EF4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xBC6FA4", Offset = "0xBC6FA4", VA = "0xBC6FA4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xBC5BB8", Offset = "0xBC5BB8", VA = "0xBC5BB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xBC60EC", Offset = "0xBC60EC", VA = "0xBC60EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xBC6338", Offset = "0xBC6338", VA = "0xBC6338")]
	private void Update()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xBC6AD0", Offset = "0xBC6AD0", VA = "0xBC6AD0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xBC62D0", Offset = "0xBC62D0", VA = "0xBC62D0")]
	[IteratorStateMachine(typeof(<CalculatePathOnInterval>d__21))]
	private IEnumerator CalculatePathOnInterval()
	{
		return null;
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xBC707C", Offset = "0xBC707C", VA = "0xBC707C", Slot = "4")]
	protected virtual void RecalculateMainNavTarget()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xBC747C", Offset = "0xBC747C", VA = "0xBC747C", Slot = "5")]
	protected virtual void CalculatePath()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xBC7670", Offset = "0xBC7670", VA = "0xBC7670", Slot = "6")]
	protected virtual void UpdateMainNavTarget(IZNNavigable NewNavTarget)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xBC6A68", Offset = "0xBC6A68", VA = "0xBC6A68")]
	protected void MarkWithinStoppingDistance()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xBC6AA0", Offset = "0xBC6AA0", VA = "0xBC6AA0")]
	protected void MarkOutsideStoppingDistance()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xBC7690", Offset = "0xBC7690", VA = "0xBC7690")]
	private void OwningEnemyDied()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xBC769C", Offset = "0xBC769C", VA = "0xBC769C")]
	protected void NavigableAddedToGameMode(IZNNavigable AddedNavigable)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xBC7834", Offset = "0xBC7834", VA = "0xBC7834")]
	protected void NavigableRemovedFromGameMode(IZNNavigable RemovedNavigable)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xBC79CC", Offset = "0xBC79CC", VA = "0xBC79CC")]
	protected void NavigationRecalculationRequested()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xBC79D8", Offset = "0xBC79D8", VA = "0xBC79D8")]
	public void SetEnemyAttackPosition(ZNEnemyAttackPosition InEnemyAttackPosition)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xBC79E0", Offset = "0xBC79E0", VA = "0xBC79E0")]
	public bool HasAttackPosition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xBC7A40", Offset = "0xBC7A40", VA = "0xBC7A40")]
	public ZNEnemyAttackPosition GetEnemyAttackPosition()
	{
		return null;
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xBC7A48", Offset = "0xBC7A48", VA = "0xBC7A48")]
	public IZNNavigable GetMainNavTarget()
	{
		return null;
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xBC7A50", Offset = "0xBC7A50", VA = "0xBC7A50")]
	public bool HasValidPathToTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xBC7A58", Offset = "0xBC7A58", VA = "0xBC7A58")]
	public bool HasPathToMainTargetPrimaryPosition()
	{
		return default(bool);
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xBC7BB4", Offset = "0xBC7BB4", VA = "0xBC7BB4")]
	public ZNEnemyNavigation()
	{
	}
}
[Token(Token = "0x20000AA")]
public class ZNAIDoorEnterDetection : MonoBehaviour
{
	[Token(Token = "0x6000354")]
	[Address(RVA = "0xBC7E3C", Offset = "0xBC7E3C", VA = "0xBC7E3C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xBC7EE4", Offset = "0xBC7EE4", VA = "0xBC7EE4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xBC7F88", Offset = "0xBC7F88", VA = "0xBC7F88")]
	public ZNAIDoorEnterDetection()
	{
	}
}
[Token(Token = "0x20000AB")]
public class ZNAINeutralTombieIdle : StateMachineBehaviour
{
	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timeSinceEnteredNeutralIdle;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeBetweenUniqueIdles;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly int IdleFlairOne;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static readonly int IdleFlairTwo;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static readonly int IdleFlairThree;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected static readonly int IdleFlairFour;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int AnimToPlay;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xBC7F90", Offset = "0xBC7F90", VA = "0xBC7F90", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xBC7F98", Offset = "0xBC7F98", VA = "0xBC7F98", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xBC80F4", Offset = "0xBC80F4", VA = "0xBC80F4", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xBC8128", Offset = "0xBC8128", VA = "0xBC8128")]
	public ZNAINeutralTombieIdle()
	{
	}
}
[Token(Token = "0x20000AC")]
public class ZNAIProjectile : MonoBehaviour
{
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNEnemyBase EnemyBaseThrower;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNProjectileRotator Rotator;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much damage the projectile does")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	protected float HighFiringAngle;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected float LowFiringAngle;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected float Speed;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Transform ArrowModel;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool bEnableRandomTargetArea;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected float RandomRadius;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected bool bEnableRandomSpeed;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	protected float RandomSpeedMin;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected float RandomSpeedMax;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected float VisibleTime;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("")]
	protected Event ImpactSFX;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected float CurrentFiringAngle;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected bool bDeadly;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected float ElapsedTime;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected Vector2 Velocity;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected Vector3 LastPosition;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected bool bFlying;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected float FlightDuration;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected float DirectFireRange;

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xBC8238", Offset = "0xBC8238", VA = "0xBC8238", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xBC8288", Offset = "0xBC8288", VA = "0xBC8288", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xBC828C", Offset = "0xBC828C", VA = "0xBC828C", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xBC848C", Offset = "0xBC848C", VA = "0xBC848C")]
	public void Initialize(ZNEnemyBase InOwningEnemy, Vector3 _target, NavMeshAgent _targetNavMeshAgent, float distanceToTarget)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xBC87AC", Offset = "0xBC87AC", VA = "0xBC87AC")]
	public void OnHitObject(GameObject TargetGameObject)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xBC8AD8", Offset = "0xBC8AD8", VA = "0xBC8AD8")]
	public void SetEnemyBaseThrower(ZNEnemyBase _enemyBaseThrower)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xBC8AE0", Offset = "0xBC8AE0", VA = "0xBC8AE0")]
	public ZNProjectileRotator GetRotator()
	{
		return null;
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xBC8AE8", Offset = "0xBC8AE8", VA = "0xBC8AE8", Slot = "7")]
	protected virtual void DealDamage(IZNDamageable Damageable)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xBC8BC8", Offset = "0xBC8BC8", VA = "0xBC8BC8")]
	public ZNAIProjectile()
	{
	}
}
[Token(Token = "0x20000AD")]
public class ZNAIProjectileCollision : MonoBehaviour
{
	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNAIProjectile ProjectileParent;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Rigidbody RBody;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem GroundPoundPS;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool bParticleHasPlayed;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected float TimeSinceImpact;

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xBC8C10", Offset = "0xBC8C10", VA = "0xBC8C10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xBC8C8C", Offset = "0xBC8C8C", VA = "0xBC8C8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xBC8CC0", Offset = "0xBC8CC0", VA = "0xBC8CC0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xBC8DEC", Offset = "0xBC8DEC", VA = "0xBC8DEC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xBC8DF0", Offset = "0xBC8DF0", VA = "0xBC8DF0")]
	public ZNAIProjectileCollision()
	{
	}
}
[Token(Token = "0x20000AE")]
public class ZNAIProjectileExplosive : ZNAIProjectile
{
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected GameObject ExplosionPrefab;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected float Radius;

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xBC8DF8", Offset = "0xBC8DF8", VA = "0xBC8DF8", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xBC8DFC", Offset = "0xBC8DFC", VA = "0xBC8DFC", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xBC8E00", Offset = "0xBC8E00", VA = "0xBC8E00", Slot = "7")]
	protected override void DealDamage(IZNDamageable DamageableNull)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xBC8FA0", Offset = "0xBC8FA0", VA = "0xBC8FA0")]
	public ZNAIProjectileExplosive()
	{
	}
}
[Token(Token = "0x20000AF")]
public class ZNAIProjectileTool : ZNAIProjectile
{
	[Token(Token = "0x600036E")]
	[Address(RVA = "0xBC8FF0", Offset = "0xBC8FF0", VA = "0xBC8FF0", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xBC8FF4", Offset = "0xBC8FF4", VA = "0xBC8FF4", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xBC8FF8", Offset = "0xBC8FF8", VA = "0xBC8FF8", Slot = "7")]
	protected override void DealDamage(IZNDamageable Damageable)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xBC90DC", Offset = "0xBC90DC", VA = "0xBC90DC")]
	public ZNAIProjectileTool()
	{
	}
}
[Token(Token = "0x20000B0")]
public class ZNAITombieJumpState : StateMachineBehaviour
{
	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer Mesh;

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xBC9124", Offset = "0xBC9124", VA = "0xBC9124", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xBC91E4", Offset = "0xBC91E4", VA = "0xBC91E4", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xBC92E4", Offset = "0xBC92E4", VA = "0xBC92E4")]
	public ZNAITombieJumpState()
	{
	}
}
[Token(Token = "0x20000B1")]
public class ZNAITombieLandState : StateMachineBehaviour
{
	[Token(Token = "0x6000375")]
	[Address(RVA = "0xBC92EC", Offset = "0xBC92EC", VA = "0xBC92EC", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xBC936C", Offset = "0xBC936C", VA = "0xBC936C")]
	public ZNAITombieLandState()
	{
	}
}
[Token(Token = "0x20000B2")]
public class ZNAmmoManager : MonoBehaviour
{
	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected GameObject AmmoPrefab;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected GameObject BossAmmoPrefab;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected int PoolSize;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Queue<Transform> AmmoQueue;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Queue<Transform> BossAmmoQueue;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected GameObject[] AmmoArray;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected GameObject[] BossAmmoArray;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static ZNAmmoManager AmmoManagerSingleton;

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xBC9374", Offset = "0xBC9374", VA = "0xBC9374")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xBC9448", Offset = "0xBC9448", VA = "0xBC9448")]
	private void Start()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xBC9848", Offset = "0xBC9848", VA = "0xBC9848")]
	public static Transform SpawnAmmo(Vector3 Position, Quaternion Rotation, bool IsBoss)
	{
		return null;
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xBC9A10", Offset = "0xBC9A10", VA = "0xBC9A10")]
	public ZNAmmoManager()
	{
	}
}
[Token(Token = "0x20000B3")]
public class ZNDestroyParticleSystem : MonoBehaviour
{
	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xBC9AB8", Offset = "0xBC9AB8", VA = "0xBC9AB8")]
	private void Start()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xBC9B08", Offset = "0xBC9B08", VA = "0xBC9B08")]
	private void Update()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xBC9BBC", Offset = "0xBC9BBC", VA = "0xBC9BBC")]
	public ZNDestroyParticleSystem()
	{
	}
}
[Token(Token = "0x20000B4")]
public class ZNForceEnemyAsset : MonoBehaviour
{
	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The asset that gets forced onto the enemy")]
	[SerializeField]
	private ZNEnemyAsset ForcedAsset;

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xBC9BC4", Offset = "0xBC9BC4", VA = "0xBC9BC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xBC9C80", Offset = "0xBC9C80", VA = "0xBC9C80")]
	public ZNForceEnemyAsset()
	{
	}
}
[Token(Token = "0x20000B5")]
public class ZNProjectileChooseToolMesh : MonoBehaviour
{
	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Mesh> ToolMeshes;

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xBC9C88", Offset = "0xBC9C88", VA = "0xBC9C88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xBC9D38", Offset = "0xBC9D38", VA = "0xBC9D38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xBC9D3C", Offset = "0xBC9D3C", VA = "0xBC9D3C")]
	public ZNProjectileChooseToolMesh()
	{
	}
}
[Token(Token = "0x20000B6")]
public class ZNProjectileRotator : MonoBehaviour
{
	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float RotationSpeed;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected bool isRotating;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float x;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float y;

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xBC9D44", Offset = "0xBC9D44", VA = "0xBC9D44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xBC9E24", Offset = "0xBC9E24", VA = "0xBC9E24")]
	public void OnRelease()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xBC9E7C", Offset = "0xBC9E7C", VA = "0xBC9E7C")]
	public void SetIsRotating(bool _isRotating)
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xBC9E88", Offset = "0xBC9E88", VA = "0xBC9E88")]
	public ZNProjectileRotator()
	{
	}
}
[Token(Token = "0x20000B7")]
public class ZNRayCheckStartPoint : MonoBehaviour
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected bool IsApex;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	protected bool IsHand;

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xBC9E98", Offset = "0xBC9E98", VA = "0xBC9E98")]
	public bool GetIsApex()
	{
		return default(bool);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xBC9EA0", Offset = "0xBC9EA0", VA = "0xBC9EA0")]
	public bool GetIsHand()
	{
		return default(bool);
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xBC9EA8", Offset = "0xBC9EA8", VA = "0xBC9EA8")]
	public ZNRayCheckStartPoint()
	{
	}
}
[Token(Token = "0x20000B8")]
public class ZNBadgeAssetBase : SAAddressableScriptableObject
{
	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The badge key, used for looking up which badge is which")]
	[SerializeField]
	protected string BadgeKey;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The name of the badge")]
	[SerializeField]
	protected LocalizedString BadgeName;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The description of the badge")]
	[SerializeField]
	protected LocalizedString BadgeDescription;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The badge icon, used to help identify the badge")]
	[SerializeField]
	protected Sprite BadgeIcon;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("If this badge is locked by default")]
	[SerializeField]
	protected bool bLockedByDefault;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The unlock condition that must be completed to unlock the badge (if it is a locked badge)")]
	[SerializeField]
	protected SAUnlockConditionAsset UnlockConditionAsset;

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xBC9EB0", Offset = "0xBC9EB0", VA = "0xBC9EB0")]
	public string GetBadgeKey()
	{
		return null;
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xBC9EB8", Offset = "0xBC9EB8", VA = "0xBC9EB8")]
	public Sprite GetBadgeIcon()
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xBC9EC0", Offset = "0xBC9EC0", VA = "0xBC9EC0")]
	public LocalizedString GetBadgeName()
	{
		return null;
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xBC9EC8", Offset = "0xBC9EC8", VA = "0xBC9EC8")]
	public LocalizedString GetBadgeDescription()
	{
		return null;
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xBC9ED0", Offset = "0xBC9ED0", VA = "0xBC9ED0")]
	public bool IsLockedByDefault()
	{
		return default(bool);
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xBC9ED8", Offset = "0xBC9ED8", VA = "0xBC9ED8")]
	public SAUnlockConditionAsset GetUnlockConditionAsset()
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xBC9EE0", Offset = "0xBC9EE0", VA = "0xBC9EE0")]
	public bool HasBeenUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xBC9F7C", Offset = "0xBC9F7C", VA = "0xBC9F7C")]
	public ZNBadgeAssetBase()
	{
	}
}
[Token(Token = "0x20000B9")]
[CreateAssetMenu(fileName = "ZNBadgeCollectionAsset", menuName = "Scriptable Objects/Badges/ZNBadgeCollectionAsset")]
public class ZNBadgeCollectionAsset : ScriptableObject
{
	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("A list of badges")]
	protected List<ZNBadgeAssetBase> BadgeCollection;

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xBC9F84", Offset = "0xBC9F84", VA = "0xBC9F84")]
	public List<ZNBadgeAssetBase> GetBadgeCollection()
	{
		return null;
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xBC9F8C", Offset = "0xBC9F8C", VA = "0xBC9F8C")]
	public int GetNumUnlockedBadges()
	{
		return default(int);
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xBCA108", Offset = "0xBCA108", VA = "0xBCA108")]
	public ZNBadgeCollectionAsset()
	{
	}
}
[Token(Token = "0x20000BA")]
[CreateAssetMenu(fileName = "ZNModBadgeAsset", menuName = "Scriptable Objects/Badges/ZNModBadgeAsset")]
public class ZNModBadgeAsset : ZNBadgeAssetBase
{
	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The mod asset given with this badge")]
	protected SAModAsset ModAsset;

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xBCA110", Offset = "0xBCA110", VA = "0xBCA110")]
	public SAModAsset GetModAsset()
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xBCA118", Offset = "0xBCA118", VA = "0xBCA118")]
	public ZNModBadgeAsset()
	{
	}
}
[Token(Token = "0x20000BB")]
[CreateAssetMenu(fileName = "ZNWeaponBadgeAsset", menuName = "Scriptable Objects/Badges/ZNWeaponBadgeAsset")]
public class ZNWeaponBadgeAsset : ZNBadgeAssetBase
{
	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The weapon asset given with this badge")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xBCA120", Offset = "0xBCA120", VA = "0xBCA120")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xBCA128", Offset = "0xBCA128", VA = "0xBCA128")]
	public ZNWeaponBadgeAsset()
	{
	}
}
[Token(Token = "0x20000BC")]
public class ZNBasicZombie : ZNEnemyBase
{
	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNBasicZombieAsset AssociatedBasicZombieAsset;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xBCA130", Offset = "0xBCA130", VA = "0xBCA130", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xBCA2A8", Offset = "0xBCA2A8", VA = "0xBCA2A8", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xBCA300", Offset = "0xBCA300", VA = "0xBCA300", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xBCA7A4", Offset = "0xBCA7A4", VA = "0xBCA7A4")]
	public ZNBasicZombie()
	{
	}
}
[Token(Token = "0x20000BD")]
[CreateAssetMenu(fileName = "ZNBasicZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNBasicZombieAsset")]
public class ZNBasicZombieAsset : ZNEnemyAsset
{
	[Token(Token = "0x600039D")]
	[Address(RVA = "0xBCB308", Offset = "0xBCB308", VA = "0xBCB308")]
	public ZNBasicZombieAsset()
	{
	}
}
[Token(Token = "0x20000BE")]
public class ZNChunkyZombie : ZNEnemyBase
{
	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNChunkyZombieAsset AssociatedChunkyZombieAsset;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xBCB69C", Offset = "0xBCB69C", VA = "0xBCB69C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xBCB6A0", Offset = "0xBCB6A0", VA = "0xBCB6A0", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xBCB6CC", Offset = "0xBCB6CC", VA = "0xBCB6CC", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xBCB830", Offset = "0xBCB830", VA = "0xBCB830", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xBCBC80", Offset = "0xBCBC80", VA = "0xBCBC80")]
	public ZNChunkyZombie()
	{
	}
}
[Token(Token = "0x20000BF")]
[CreateAssetMenu(fileName = "ZNChunkyZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNChunkyZombieAsset")]
public class ZNChunkyZombieAsset : ZNEnemyAsset
{
	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xBCBC84", Offset = "0xBCBC84", VA = "0xBCBC84")]
	public ZNChunkyZombieAsset()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ZNConstructionZombie : ZNBasicZombie
{
	[Token(Token = "0x20000C1")]
	[CompilerGenerated]
	private sealed class <ChangeToolboxRigidbodyAfterDelay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNConstructionZombie <>4__this;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0xBCC05C", Offset = "0xBCC05C", VA = "0xBCC05C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0xBCC0A4", Offset = "0xBCC0A4", VA = "0xBCC0A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xBCBEE0", Offset = "0xBCBEE0", VA = "0xBCBEE0")]
		[DebuggerHidden]
		public <ChangeToolboxRigidbodyAfterDelay>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xBCBF0C", Offset = "0xBCBF0C", VA = "0xBCBF0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xBCBF10", Offset = "0xBCBF10", VA = "0xBCBF10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xBCC064", Offset = "0xBCC064", VA = "0xBCC064", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	protected ZNConstructionZombieAsset AssociatedConstructionZombieAsset;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Tooltip("The toolbox that this construction zombie is holding")]
	[SerializeField]
	protected ZNDestroyableItemBase DestroyableToolbox;

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xBCBC88", Offset = "0xBCBC88", VA = "0xBCBC88", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xBCBC8C", Offset = "0xBCBC8C", VA = "0xBCBC8C", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xBCBCB8", Offset = "0xBCBCB8", VA = "0xBCBCB8", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xBCBE78", Offset = "0xBCBE78", VA = "0xBCBE78")]
	[IteratorStateMachine(typeof(<ChangeToolboxRigidbodyAfterDelay>d__5))]
	protected IEnumerator ChangeToolboxRigidbodyAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xBC126C", Offset = "0xBC126C", VA = "0xBC126C")]
	public bool HasToolbox()
	{
		return default(bool);
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xBCBF08", Offset = "0xBCBF08", VA = "0xBCBF08")]
	public ZNConstructionZombie()
	{
	}
}
[Token(Token = "0x20000C2")]
[CreateAssetMenu(fileName = "ZNConstructionZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNConstructionZombieAsset")]
public class ZNConstructionZombieAsset : ZNBasicZombieAsset
{
	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Postal")]
	[Tooltip("How much health the toolbox has before it is destroyed.")]
	protected int ToolboxHealth;

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xBCC0AC", Offset = "0xBCC0AC", VA = "0xBCC0AC")]
	public int GetToolboxHealth()
	{
		return default(int);
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xBCC0B4", Offset = "0xBCC0B4", VA = "0xBCC0B4")]
	public ZNConstructionZombieAsset()
	{
	}
}
[Token(Token = "0x20000C3")]
[CreateAssetMenu(fileName = "ZNEnemyAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNEnemyAsset")]
public class ZNEnemyAsset : ScriptableObject
{
	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The enemy's name")]
	protected LocalizedString EnemyName;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The tracked enemy stat key")]
	protected string TrackedEnemyStatKey;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The enemy damage additive")]
	[SerializeField]
	protected string EnemyDamageAdditive;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The prefab that will get spawned")]
	[SerializeField]
	protected GameObject EnemyPrefab;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The enemy spawn priority. Enemies in the prioritized category will always spawn first, and deferred will always spawn last.")]
	protected EZNEnemySpawnPriorities EnemySpawnPriority;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("The highest value that can be subtracted from Enemies' scale at spawn--value subtracted will be a random number from 0 to this number")]
	[Range(0f, 0.5f)]
	[SerializeField]
	protected float MaxCanSubtractFromScale;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("When staggered, how long before this enemy can be staggered again")]
	protected float StaggerCooldownTime;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Tooltip("If this enemy is a boss")]
	protected bool bBoss;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[SerializeField]
	[Tooltip("If this enemy is a super variant")]
	protected bool bSuperVariant;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The amount of points this enemy awards when it gets killed")]
	protected int ScoreForDefeating;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The different enemy skin assets that can spawn")]
	public List<ZNEnemySkinAsset> EnemySkinAssets;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The enemy stats per difficulty")]
	[SerializeField]
	protected SerializableDictionary<EZNDifficulties, FZNEnemyBaseStats> EnemyDifficultyStats;

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xBCB30C", Offset = "0xBCB30C", VA = "0xBCB30C")]
	public ZNEnemyAsset()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xBCC0C0", Offset = "0xBCC0C0", VA = "0xBCC0C0")]
	public LocalizedString GetEnemyName()
	{
		return null;
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xBCC0C8", Offset = "0xBCC0C8", VA = "0xBCC0C8")]
	public string GetTrackedEnemyStatKey()
	{
		return null;
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xBCC0D0", Offset = "0xBCC0D0", VA = "0xBCC0D0")]
	public string GetEnemyDamageAdditive()
	{
		return null;
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xBCC0D8", Offset = "0xBCC0D8", VA = "0xBCC0D8")]
	public GameObject GetEnemyPrefab()
	{
		return null;
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xBCC0E0", Offset = "0xBCC0E0", VA = "0xBCC0E0")]
	public EZNEnemySpawnPriorities GetEnemySpawnPriority()
	{
		return default(EZNEnemySpawnPriorities);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xBCC0E8", Offset = "0xBCC0E8", VA = "0xBCC0E8")]
	public float GetMaxCanSubtractFromScale()
	{
		return default(float);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xBCC0F0", Offset = "0xBCC0F0", VA = "0xBCC0F0")]
	public float GetStaggerCooldownTime()
	{
		return default(float);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xBCC0F8", Offset = "0xBCC0F8", VA = "0xBCC0F8")]
	public bool IsBoss()
	{
		return default(bool);
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xBCC100", Offset = "0xBCC100", VA = "0xBCC100")]
	public bool IsSuperVariant()
	{
		return default(bool);
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xBCC108", Offset = "0xBCC108", VA = "0xBCC108")]
	public int GetScoreForDefeating()
	{
		return default(int);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xBCC110", Offset = "0xBCC110", VA = "0xBCC110")]
	public ZNEnemySkinAsset GetRandomEnemySkinAsset()
	{
		return null;
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xBCC19C", Offset = "0xBCC19C", VA = "0xBCC19C")]
	public int GetBaseHealth(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xBCC23C", Offset = "0xBCC23C", VA = "0xBCC23C")]
	public int GetObtainedExperience(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xBCC2DC", Offset = "0xBCC2DC", VA = "0xBCC2DC")]
	public int GetStaggerRegen(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xBCC37C", Offset = "0xBCC37C", VA = "0xBCC37C")]
	public float GetBaseSpeed(EZNDifficulties InDifficulty)
	{
		return default(float);
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xBCC41C", Offset = "0xBCC41C", VA = "0xBCC41C")]
	public float GetIndoorSpeed(EZNDifficulties InDifficulty)
	{
		return default(float);
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xBCC4BC", Offset = "0xBCC4BC", VA = "0xBCC4BC")]
	public SerializableDictionary<EZNBodyParts, float> GetBodyPartDamageMultiplier(EZNDifficulties InDifficulty)
	{
		return null;
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xBCC59C", Offset = "0xBCC59C", VA = "0xBCC59C")]
	public float GetDamageMultiplierForBodyPart(EZNBodyParts InBodyPart, EZNDifficulties InDifficulty)
	{
		return default(float);
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xBCC678", Offset = "0xBCC678", VA = "0xBCC678")]
	public bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xBCC684", Offset = "0xBCC684", VA = "0xBCC684")]
	public SerializableDictionary<EZNBodyParts, float> GetBodyPartStaggerMultiplier(EZNDifficulties InDifficulty)
	{
		return null;
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xBCC764", Offset = "0xBCC764", VA = "0xBCC764")]
	public float GetStaggerMultiplierForBodyPart(EZNBodyParts InBodyPart, EZNDifficulties InDifficulty)
	{
		return default(float);
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xBCC840", Offset = "0xBCC840", VA = "0xBCC840")]
	public float GetStaggerDurationForStaggerType(EZNStaggerTypes InStaggerType, EZNDifficulties InDifficulty)
	{
		return default(float);
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xBCC94C", Offset = "0xBCC94C", VA = "0xBCC94C")]
	public SerializableDictionary<EZNStaggerTypes, int> GetStaggerThresholds(EZNDifficulties InDifficulty)
	{
		return null;
	}
}
[Token(Token = "0x20000C4")]
[RequireComponent(typeof(ZNStaggerComponent))]
public class ZNEnemyBase : ZNCharacterBase
{
	[Token(Token = "0x20000C6")]
	[CompilerGenerated]
	private sealed class <CleanupAfterDeath>d__113 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyBase <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000451")]
			[Address(RVA = "0xBD1A60", Offset = "0xBD1A60", VA = "0xBD1A60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000453")]
			[Address(RVA = "0xBD1AA8", Offset = "0xBD1AA8", VA = "0xBD1AA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xBCFA40", Offset = "0xBCFA40", VA = "0xBCFA40")]
		[DebuggerHidden]
		public <CleanupAfterDeath>d__113(int <>1__state)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xBD1970", Offset = "0xBD1970", VA = "0xBD1970", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xBD1974", Offset = "0xBD1974", VA = "0xBD1974", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xBD1A68", Offset = "0xBD1A68", VA = "0xBD1A68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C7")]
	[CompilerGenerated]
	private sealed class <RegenerateStagger>d__114 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEnemyBase <>4__this;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000457")]
			[Address(RVA = "0xBD1C1C", Offset = "0xBD1C1C", VA = "0xBD1C1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000459")]
			[Address(RVA = "0xBD1C64", Offset = "0xBD1C64", VA = "0xBD1C64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xBCFA68", Offset = "0xBCFA68", VA = "0xBCFA68")]
		[DebuggerHidden]
		public <RegenerateStagger>d__114(int <>1__state)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xBD1AB0", Offset = "0xBD1AB0", VA = "0xBD1AB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xBD1AB4", Offset = "0xBD1AB4", VA = "0xBD1AB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xBD1C24", Offset = "0xBD1C24", VA = "0xBD1C24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <EndStaggeredAfterDelay>d__116 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InStaggerDuration;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNEnemyBase <>4__this;

		[Token(Token = "0x17000030")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045D")]
			[Address(RVA = "0xBD1D64", Offset = "0xBD1D64", VA = "0xBD1D64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045F")]
			[Address(RVA = "0xBD1DAC", Offset = "0xBD1DAC", VA = "0xBD1DAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xBCFB08", Offset = "0xBCFB08", VA = "0xBCFB08")]
		[DebuggerHidden]
		public <EndStaggeredAfterDelay>d__116(int <>1__state)
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xBD1C6C", Offset = "0xBD1C6C", VA = "0xBD1C6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xBD1C70", Offset = "0xBD1C70", VA = "0xBD1C70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xBD1D6C", Offset = "0xBD1D6C", VA = "0xBD1D6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected ZNEnemyAsset AssociatedEnemyAsset;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected List<int> OrderedHealthDropThresholdsAsIntegers;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNEnemyNavigation EnemyNavigation;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected ZNEnemyAnimInstance EnemyAnimInstance;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected ZNStaggerComponent StaggerComponent;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected NavMeshAgent Agent;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected List<Collider> AllColliders;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public FOnEnemyStaggeredStarted OnEnemyStaggeredStartedDel;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public FOnEquipItemEquipped OnEquipItemEquippedDel;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public FOnEquipItemUnequipped OnEquipItemUnequippedDel;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[Tooltip("The zombie's skinned mesh renderer that will get updated based on skin")]
	[Header("Enemy Base")]
	[SerializeField]
	protected SkinnedMeshRenderer ZombieSkinnedMeshRenderer;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Tooltip("The object that we enable when the enemy is a super variant")]
	[SerializeField]
	protected GameObject SuperVariantSignifier;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[Tooltip("The default mods that this enemy spawns with")]
	[SerializeField]
	protected List<SAModAsset> DefaultModAssets;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[Tooltip("Extra modifier to drop chance, on top of the other factors. Used to increase or decrease likelyhood of this type of zombie spawning the coins")]
	[SerializeField]
	protected float CoinDropAdditionalWeighting;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[Tooltip("The health drop thresholds. If set, the enemy will drop a health pack when this percentage of health is reached. Should not be set for most enemies.")]
	[SerializeField]
	protected List<double> HealthDropThresholds;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[Tooltip("SFX to play passively when the enemy is alive")]
	[SerializeField]
	protected Event PassiveSFX;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[Tooltip("SFX to play when the enemy is damaged")]
	[SerializeField]
	protected Event DamagedSFX;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[Tooltip("SFX to play when the enemy is defeated")]
	[SerializeField]
	protected Event DeathSFX;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	[Tooltip("Delay after death, for destroy")]
	protected float DeathDestroyDelay;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[Tooltip("The transform for any equipped items")]
	[Header("Transforms")]
	[SerializeField]
	protected Transform EquipItemTransform;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	[Tooltip("The transform for any equipped items in the left hand")]
	protected Transform LeftEquipItemTransform;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[Tooltip("The transform for throwing items")]
	[SerializeField]
	protected Transform ThrowPointTransform;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	[Tooltip("The mouth transform")]
	protected Transform MouthTransform;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[Tooltip("The buff VFX transform")]
	[SerializeField]
	protected Transform BuffVFXTransform;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	protected bool bSuperVariant;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x221")]
	protected bool bBoss;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	protected float BaseSpeed;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	protected float IndoorSpeed;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	protected Dictionary<EZNStaggerTypes, CurrentAndMaxValue> CurrentStaggerThresholds;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	protected Dictionary<ZNCharacterBase, int> DamageFromCharactersDictionary;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	protected Dictionary<string, GameObject> ActiveBuffVFXDictionary;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	protected Dictionary<string, GameObject> ActiveDebuffVFXDictionary;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	protected int NextHealthThresholdIndex;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	protected bool bSpawning;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	protected int StaggerStopMovementID;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	protected EZNStaggerTypes MidStaggerType;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	protected List<ZNEnemyAbility> EnemyAbilities;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	protected float DistanceToPlayer;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	protected bool bHasThrown;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26D")]
	protected bool bIsInDoorway;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	protected List<int> MovementStopperIDs;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected ZNEquipItem CurrentRightEquippedItem;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	protected ZNEquipItem CurrentLeftEquippedItem;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	protected List<ZNEquipItem> AllEquipItems;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected float TimeSinceInflictingDamage;

	[Token(Token = "0x14000003")]
	public event Action OnTookHit
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xBCE118", Offset = "0xBCE118", VA = "0xBCE118")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xBCE1B8", Offset = "0xBCE1B8", VA = "0xBCE1B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action OnTookHitUpperMask
	{
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xBCE258", Offset = "0xBCE258", VA = "0xBCE258")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xBCE2F8", Offset = "0xBCE2F8", VA = "0xBCE2F8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action OnTookHitLeftLegMask
	{
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xBCE398", Offset = "0xBCE398", VA = "0xBCE398")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xBCE438", Offset = "0xBCE438", VA = "0xBCE438")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action OnTookHitRightLegMask
	{
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xBCE4D8", Offset = "0xBCE4D8", VA = "0xBCE4D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xBCE578", Offset = "0xBCE578", VA = "0xBCE578")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action OnTookHitRightLeg
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xBCE618", Offset = "0xBCE618", VA = "0xBCE618")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xBCE6B8", Offset = "0xBCE6B8", VA = "0xBCE6B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action OnTookHitLeftLeg
	{
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xBCE758", Offset = "0xBCE758", VA = "0xBCE758")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xBCE7F8", Offset = "0xBCE7F8", VA = "0xBCE7F8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action OnTookHitRightArm
	{
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xBCE898", Offset = "0xBCE898", VA = "0xBCE898")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xBCE938", Offset = "0xBCE938", VA = "0xBCE938")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action OnTookHitLeftArm
	{
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xBCE9D8", Offset = "0xBCE9D8", VA = "0xBCE9D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xBCEA78", Offset = "0xBCEA78", VA = "0xBCEA78")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action OnTookHitHead
	{
		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xBCEB18", Offset = "0xBCEB18", VA = "0xBCEB18")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xBCEBB8", Offset = "0xBCEBB8", VA = "0xBCEBB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event Action OnTookHitNonSpecifiedPart
	{
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xBCEC58", Offset = "0xBCEC58", VA = "0xBCEC58")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xBCECF8", Offset = "0xBCECF8", VA = "0xBCECF8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action OnTookHitNonSpecifiedPartStagger
	{
		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xBCED98", Offset = "0xBCED98", VA = "0xBCED98")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xBCEE38", Offset = "0xBCEE38", VA = "0xBCEE38")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action OnDied
	{
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xBC5FAC", Offset = "0xBC5FAC", VA = "0xBC5FAC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xBC6DB4", Offset = "0xBC6DB4", VA = "0xBC6DB4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event Action OnDiedCrate
	{
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xBC604C", Offset = "0xBC604C", VA = "0xBC604C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xBC6E54", Offset = "0xBC6E54", VA = "0xBC6E54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event Action OnLostLegs
	{
		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xBCEED8", Offset = "0xBCEED8", VA = "0xBCEED8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xBCEF78", Offset = "0xBCEF78", VA = "0xBCEF78")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event Action OnPushbackLeft
	{
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xBCF018", Offset = "0xBCF018", VA = "0xBCF018")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xBCF0B8", Offset = "0xBCF0B8", VA = "0xBCF0B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event Action OnPushbackRight
	{
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xBCF158", Offset = "0xBCF158", VA = "0xBCF158")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0xBCF1F8", Offset = "0xBCF1F8", VA = "0xBCF1F8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public event Action OnFalldownLeft
	{
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0xBCF298", Offset = "0xBCF298", VA = "0xBCF298")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xBCF338", Offset = "0xBCF338", VA = "0xBCF338")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event Action OnFalldownRight
	{
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xBCF3D8", Offset = "0xBCF3D8", VA = "0xBCF3D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xBCF478", Offset = "0xBCF478", VA = "0xBCF478")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xBCCA2C", Offset = "0xBCCA2C", VA = "0xBCCA2C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xBCA134", Offset = "0xBCA134", VA = "0xBCA134", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xBCA2D4", Offset = "0xBCA2D4", VA = "0xBCA2D4", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xBCD61C", Offset = "0xBCD61C", VA = "0xBCD61C", Slot = "25")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xBCA464", Offset = "0xBCA464", VA = "0xBCA464", Slot = "45")]
	public virtual void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xBCD1C8", Offset = "0xBCD1C8", VA = "0xBCD1C8")]
	protected void GiveDefaultMods()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xBCD358", Offset = "0xBCD358", VA = "0xBCD358")]
	protected void InitializeHealthThresholds()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xBCF518", Offset = "0xBCF518", VA = "0xBCF518", Slot = "30")]
	protected override void FalseVolumeStateChanged()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xBCF568", Offset = "0xBCF568", VA = "0xBCF568", Slot = "31")]
	protected override void CheckInvalidLocationState()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xBCF56C", Offset = "0xBCF56C", VA = "0xBCF56C")]
	protected void DealDamage()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xBCF570", Offset = "0xBCF570", VA = "0xBCF570", Slot = "36")]
	public override void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xBCF898", Offset = "0xBCF898", VA = "0xBCF898")]
	protected void ReactToDamage(EZNBodyParts InBodyPart)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xBCB8F0", Offset = "0xBCB8F0", VA = "0xBCB8F0", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xBCF9D8", Offset = "0xBCF9D8", VA = "0xBCF9D8")]
	[IteratorStateMachine(typeof(<CleanupAfterDeath>d__113))]
	protected IEnumerator CleanupAfterDeath()
	{
		return null;
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xBCD160", Offset = "0xBCD160", VA = "0xBCD160")]
	[IteratorStateMachine(typeof(<RegenerateStagger>d__114))]
	protected IEnumerator RegenerateStagger()
	{
		return null;
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xBC46C8", Offset = "0xBC46C8", VA = "0xBC46C8")]
	public void StartStaggeredIdleTimer(EZNStaggerTypes InStaggerType)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xBCFA90", Offset = "0xBCFA90", VA = "0xBCFA90")]
	[IteratorStateMachine(typeof(<EndStaggeredAfterDelay>d__116))]
	protected IEnumerator EndStaggeredAfterDelay(float InStaggerDuration)
	{
		return null;
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xBCDE80", Offset = "0xBCDE80", VA = "0xBCDE80")]
	protected void UpdateSkin(ZNEnemySkinAsset InEnemySkinAsset)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xBCDB7C", Offset = "0xBCDB7C", VA = "0xBCDB7C")]
	protected void ReevaluateSpeed()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xBCFB30", Offset = "0xBCFB30", VA = "0xBCFB30")]
	protected void ReevaluateAllBuffVFX()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xBCFC48", Offset = "0xBCFC48", VA = "0xBCFC48")]
	protected void ReevaluateBuffVFXForProperty(string InProperty, bool bBuff = true)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xBCFF40", Offset = "0xBCFF40", VA = "0xBCFF40")]
	protected void TurnOffAllBuffVFX()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xBC4F6C", Offset = "0xBC4F6C", VA = "0xBC4F6C")]
	public void AddStopMovementID(int InID)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xBC5058", Offset = "0xBC5058", VA = "0xBC5058")]
	public void RemoveStopMovementID(int InID)
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xBD0340", Offset = "0xBD0340", VA = "0xBD0340")]
	private void ReevaluateMovement()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xBD0428", Offset = "0xBD0428", VA = "0xBD0428")]
	private void StartMovement()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xBD03A0", Offset = "0xBD03A0", VA = "0xBD03A0")]
	private void StopMovement()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xBD04B0", Offset = "0xBD04B0", VA = "0xBD04B0")]
	public ZNEquipItem AddEquipItem(GameObject InPF_EquipItem)
	{
		return null;
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xBC14AC", Offset = "0xBC14AC", VA = "0xBC14AC")]
	public ZNEquipItem AddEquipItem(ZNEquipItem InEquipItem, ZNHands InHand = ZNHands.Right)
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xBD05C8", Offset = "0xBD05C8", VA = "0xBD05C8")]
	public void RemoveEquipItem(ZNEquipItem InEquipItem)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xBD0620", Offset = "0xBD0620", VA = "0xBD0620")]
	public void EquipEquipItem(string InEquipItemKey, ZNHands InHand = ZNHands.Right)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xBC1630", Offset = "0xBC1630", VA = "0xBC1630")]
	public void EquipEquipItem(ZNEquipItem InEquipItem, ZNHands InHand = ZNHands.Right)
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xBC1764", Offset = "0xBC1764", VA = "0xBC1764")]
	public void UnequipEquipItem(ZNHands InHand = ZNHands.Right)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xBD0754", Offset = "0xBD0754", VA = "0xBD0754", Slot = "34")]
	protected override void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xBD0BA4", Offset = "0xBD0BA4", VA = "0xBD0BA4", Slot = "35")]
	protected override void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xBD0D30", Offset = "0xBD0D30", VA = "0xBD0D30")]
	protected void StaggeredStarted(IZNDamageable StaggeredCharacter, EZNStaggerTypes InStaggerType)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xBD0EB0", Offset = "0xBD0EB0", VA = "0xBD0EB0")]
	protected void StaggeredEnded(IZNDamageable StaggeredCharacter)
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xBD0ED0", Offset = "0xBD0ED0", VA = "0xBD0ED0")]
	private void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xBD102C", Offset = "0xBD102C", VA = "0xBD102C", Slot = "39")]
	public override bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xBD10BC", Offset = "0xBD10BC", VA = "0xBD10BC", Slot = "40")]
	public override float GetDamageMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xBD1188", Offset = "0xBD1188", VA = "0xBD1188", Slot = "41")]
	public override float GetStaggerMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xBD1254", Offset = "0xBD1254", VA = "0xBD1254", Slot = "42")]
	public override int GetMaxReceivableDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xBD12D4", Offset = "0xBD12D4", VA = "0xBD12D4")]
	public ZNEnemyNavigation GetEnemyNavigation()
	{
		return null;
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xBD12DC", Offset = "0xBD12DC", VA = "0xBD12DC")]
	public ZNStaggerComponent GetStaggerComponent()
	{
		return null;
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xBD12E4", Offset = "0xBD12E4", VA = "0xBD12E4")]
	public List<Collider> GetAllColliders()
	{
		return null;
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xBD12EC", Offset = "0xBD12EC", VA = "0xBD12EC")]
	public bool IsSpawning()
	{
		return default(bool);
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xBD12F4", Offset = "0xBD12F4", VA = "0xBD12F4")]
	public void SetSpawning(bool bInSpawning)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xBC4C18", Offset = "0xBC4C18", VA = "0xBC4C18")]
	public bool IsStaggered()
	{
		return default(bool);
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xBC4C9C", Offset = "0xBC4C9C", VA = "0xBC4C9C")]
	public EZNStaggerTypes GetMidStaggerType()
	{
		return default(EZNStaggerTypes);
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xBD1300", Offset = "0xBD1300", VA = "0xBD1300")]
	public List<ZNEnemyAbility> GetEnemyAbilities()
	{
		return null;
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xBD1308", Offset = "0xBD1308", VA = "0xBD1308")]
	public bool GetHasThrown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xBD1310", Offset = "0xBD1310", VA = "0xBD1310")]
	public void SetHasThrown(bool HasThrown)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xBD131C", Offset = "0xBD131C", VA = "0xBD131C")]
	public ZNEnemyAsset GetAssociatedEnemyAsset()
	{
		return null;
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xBD1324", Offset = "0xBD1324", VA = "0xBD1324")]
	public float GetDistanceToPlayer()
	{
		return default(float);
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xBC3AE0", Offset = "0xBC3AE0", VA = "0xBC3AE0")]
	public IZNNavigable GetMainNavTarget()
	{
		return null;
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xBD1414", Offset = "0xBD1414", VA = "0xBD1414")]
	public bool IsBoss()
	{
		return default(bool);
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xBD141C", Offset = "0xBD141C", VA = "0xBD141C")]
	public bool IsSuperVariant()
	{
		return default(bool);
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xBD1424", Offset = "0xBD1424", VA = "0xBD1424")]
	public bool IsInDoorway()
	{
		return default(bool);
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xBD142C", Offset = "0xBD142C", VA = "0xBD142C")]
	public void SetIsInDoorway(bool _IsInDoorway)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xBD1438", Offset = "0xBD1438", VA = "0xBD1438")]
	public ZNEquipItem GetCurrentEquipItem(ZNHands InHand = ZNHands.Right)
	{
		return null;
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xBC1488", Offset = "0xBC1488", VA = "0xBC1488")]
	public Transform GetEquipItemTransform(ZNHands InHand = ZNHands.Right)
	{
		return null;
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xBC3A60", Offset = "0xBC3A60", VA = "0xBC3A60")]
	public Transform GetThrowPointTransform()
	{
		return null;
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xBD1460", Offset = "0xBD1460", VA = "0xBD1460")]
	public Transform GetMouthTransform()
	{
		return null;
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xBCFEC0", Offset = "0xBCFEC0", VA = "0xBCFEC0")]
	public Transform GetBuffVFXTransform()
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xBC4D18", Offset = "0xBC4D18", VA = "0xBC4D18")]
	public float GetVelocity()
	{
		return default(float);
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xBD14E0", Offset = "0xBD14E0", VA = "0xBD14E0")]
	public float GetCurrentSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xBC69E0", Offset = "0xBC69E0", VA = "0xBC69E0")]
	public bool IsStopped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xBD14FC", Offset = "0xBD14FC", VA = "0xBD14FC", Slot = "46")]
	public virtual bool CanActivateAbilities()
	{
		return default(bool);
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xBC3F94", Offset = "0xBC3F94", VA = "0xBC3F94")]
	public bool HasAnyEquipItemEquipped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xBD16C8", Offset = "0xBD16C8", VA = "0xBD16C8")]
	public bool HasEquipItemEquippedInHand(ZNHands InHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xBC402C", Offset = "0xBC402C", VA = "0xBC402C")]
	public bool HasSpecificEquipItemEquipped(string InEquipItemTypeKey, ZNHands InHand = ZNHands.Right)
	{
		return default(bool);
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xBD174C", Offset = "0xBD174C", VA = "0xBD174C")]
	public float GetTimeSinceInflictingDamage()
	{
		return default(float);
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xBD1754", Offset = "0xBD1754", VA = "0xBD1754")]
	public bool HasValidPathToTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xBD17DC", Offset = "0xBD17DC", VA = "0xBD17DC")]
	public bool HasPathToMainTargetPrimaryPosition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xBCA7A8", Offset = "0xBCA7A8", VA = "0xBCA7A8")]
	public ZNEnemyBase()
	{
	}
}
[Token(Token = "0x20000C9")]
[CreateAssetMenu(fileName = "ZNEnemySkinAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNEnemySkinAsset")]
public class ZNEnemySkinAsset : ScriptableObject
{
	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The mesh for the skin")]
	protected Mesh SkinMesh;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The material for the skin")]
	protected Material SkinMaterial;

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xBD1DB4", Offset = "0xBD1DB4", VA = "0xBD1DB4")]
	public ZNEnemySkinAsset()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xBD1DBC", Offset = "0xBD1DBC", VA = "0xBD1DBC")]
	public Mesh GetSkinMesh()
	{
		return null;
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xBD1DC4", Offset = "0xBD1DC4", VA = "0xBD1DC4")]
	public Material GetSkinMaterial()
	{
		return null;
	}
}
[Token(Token = "0x20000CA")]
public class ZNGargoyleZombie : ZNEnemyBase
{
	[Token(Token = "0x20000CB")]
	[CompilerGenerated]
	private sealed class <PlayDieEffectsAfterDelay>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGargoyleZombie <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600046E")]
			[Address(RVA = "0xBD25BC", Offset = "0xBD25BC", VA = "0xBD25BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000470")]
			[Address(RVA = "0xBD2604", Offset = "0xBD2604", VA = "0xBD2604", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xBD2334", Offset = "0xBD2334", VA = "0xBD2334")]
		[DebuggerHidden]
		public <PlayDieEffectsAfterDelay>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xBD238C", Offset = "0xBD238C", VA = "0xBD238C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xBD2390", Offset = "0xBD2390", VA = "0xBD2390", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xBD25C4", Offset = "0xBD25C4", VA = "0xBD25C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNGargoyleZombieAsset AssociatedGargoyleZombieAsset;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Tooltip("The SFX to play when the Gargoyle's wings flap")]
	[SerializeField]
	protected Event WingFlapSFX;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Tooltip("The crumble VFX to play when dying")]
	[SerializeField]
	protected GameObject PF_CrumbleVFX;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[Tooltip("The crumble SFX to play when dying")]
	[SerializeField]
	protected Event CrumbleSFX;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[SerializeField]
	[Tooltip("The bob curve")]
	protected AnimationCurve BobCurve;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[SerializeField]
	[Tooltip("The flying root transform")]
	protected Transform FlyingRootTransform;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	protected float CurrentCurveTime;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	protected float MaxCurveTime;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	protected float DefaultMeshAdditionalY;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xBD1DCC", Offset = "0xBD1DCC", VA = "0xBD1DCC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xBD1E9C", Offset = "0xBD1E9C", VA = "0xBD1E9C", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xBD2140", Offset = "0xBD2140", VA = "0xBD2140", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xBD22A4", Offset = "0xBD22A4", VA = "0xBD22A4", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xBD22CC", Offset = "0xBD22CC", VA = "0xBD22CC")]
	[IteratorStateMachine(typeof(<PlayDieEffectsAfterDelay>d__13))]
	protected IEnumerator PlayDieEffectsAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xBD235C", Offset = "0xBD235C", VA = "0xBD235C")]
	protected void AN_WingFlap()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xBD1F74", Offset = "0xBD1F74", VA = "0xBD1F74")]
	public bool CanBob()
	{
		return default(bool);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xBD2388", Offset = "0xBD2388", VA = "0xBD2388")]
	public ZNGargoyleZombie()
	{
	}
}
[Token(Token = "0x20000CC")]
[CreateAssetMenu(fileName = "ZNGargoyleZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNGargoyleZombieAsset")]
public class ZNGargoyleZombieAsset : ZNEnemyAsset
{
	[Token(Token = "0x6000471")]
	[Address(RVA = "0xBD260C", Offset = "0xBD260C", VA = "0xBD260C")]
	public ZNGargoyleZombieAsset()
	{
	}
}
[Token(Token = "0x20000CD")]
public class ZNPostalZombie : ZNEnemyBase
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNPostalZombieAsset AssociatedPostalZombieAsset;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Header("Postal")]
	[Tooltip("The postal box that is held")]
	[SerializeField]
	protected ZNDestroyablePostalBox PostalBox;

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xBD2610", Offset = "0xBD2610", VA = "0xBD2610", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xBD27C8", Offset = "0xBD27C8", VA = "0xBD27C8", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xBD2870", Offset = "0xBD2870", VA = "0xBD2870")]
	public bool HasPostalBox()
	{
		return default(bool);
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xBD28D0", Offset = "0xBD28D0", VA = "0xBD28D0")]
	public ZNDestroyablePostalBox GetPostalBox()
	{
		return null;
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xBD28D8", Offset = "0xBD28D8", VA = "0xBD28D8")]
	public ZNPostalZombie()
	{
	}
}
[Token(Token = "0x20000CE")]
[CreateAssetMenu(fileName = "ZNPostalZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNPostalZombieAsset")]
public class ZNPostalZombieAsset : ZNEnemyAsset
{
	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Postal")]
	[Tooltip("How much health the postal box has before it is destroyed.")]
	protected int PostalBoxHealth;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Tooltip("How much damage the postal box does to nearby targets when destroyed. (NOTE: It will always kill the zombie holding it.)")]
	[SerializeField]
	protected int PostalBoxDestroyedDamage;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("How much range the postal box has when it is destroyed and does damage.")]
	[SerializeField]
	protected float PostalBoxDamageRadius;

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xBD28DC", Offset = "0xBD28DC", VA = "0xBD28DC")]
	public int GetPostalBoxHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xBD28E4", Offset = "0xBD28E4", VA = "0xBD28E4")]
	public int GetPostalBoxDestroyedDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xBD28EC", Offset = "0xBD28EC", VA = "0xBD28EC")]
	public float GetPostalBoxDamageRadius()
	{
		return default(float);
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xBD28F4", Offset = "0xBD28F4", VA = "0xBD28F4")]
	public ZNPostalZombieAsset()
	{
	}
}
[Token(Token = "0x20000CF")]
public class ZNRegeneratingTargetDummy : ZNTargetDummy
{
	[Token(Token = "0x20000D0")]
	[CompilerGenerated]
	private sealed class <ReviveAfterDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNRegeneratingTargetDummy <>4__this;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000485")]
			[Address(RVA = "0xBD2D1C", Offset = "0xBD2D1C", VA = "0xBD2D1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000487")]
			[Address(RVA = "0xBD2D64", Offset = "0xBD2D64", VA = "0xBD2D64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xBD2BAC", Offset = "0xBD2BAC", VA = "0xBD2BAC")]
		[DebuggerHidden]
		public <ReviveAfterDelay>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xBD2C0C", Offset = "0xBD2C0C", VA = "0xBD2C0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xBD2C10", Offset = "0xBD2C10", VA = "0xBD2C10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xBD2D24", Offset = "0xBD2D24", VA = "0xBD2D24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D1")]
	[CompilerGenerated]
	private sealed class <RegenerateHealthIfNoDamageTaken>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNRegeneratingTargetDummy <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600048B")]
			[Address(RVA = "0xBD2DCC", Offset = "0xBD2DCC", VA = "0xBD2DCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600048D")]
			[Address(RVA = "0xBD2E14", Offset = "0xBD2E14", VA = "0xBD2E14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xBD2BD4", Offset = "0xBD2BD4", VA = "0xBD2BD4")]
		[DebuggerHidden]
		public <RegenerateHealthIfNoDamageTaken>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xBD2D6C", Offset = "0xBD2D6C", VA = "0xBD2D6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xBD2D70", Offset = "0xBD2D70", VA = "0xBD2D70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xBD2DD4", Offset = "0xBD2DD4", VA = "0xBD2DD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[SerializeField]
	[Tooltip("The amount of seconds to wait to regenerate health after reaching 0 health")]
	[Header("Regenerating Target Dummy")]
	protected float ReviveYieldSeconds;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	[SerializeField]
	[Tooltip("Regenerate health after this amount of seconds pass without taking damage")]
	protected float NoDamageTakenYieldSeconds;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	protected int MaxHealth;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	protected WaitForSeconds ReviveYield;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	protected WaitForSeconds NoDamageTakenYield;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	protected Coroutine RegenerateIfNoDamageTakenCoroutine;

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xBD290C", Offset = "0xBD290C", VA = "0xBD290C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xBD29B4", Offset = "0xBD29B4", VA = "0xBD29B4", Slot = "36")]
	public override void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xBD2A60", Offset = "0xBD2A60", VA = "0xBD2A60", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xBD2B20", Offset = "0xBD2B20", VA = "0xBD2B20")]
	private void RegenerateHealth()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xBD2AB8", Offset = "0xBD2AB8", VA = "0xBD2AB8")]
	[IteratorStateMachine(typeof(<ReviveAfterDelay>d__10))]
	private IEnumerator ReviveAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xBD29F8", Offset = "0xBD29F8", VA = "0xBD29F8")]
	[IteratorStateMachine(typeof(<RegenerateHealthIfNoDamageTaken>d__11))]
	private IEnumerator RegenerateHealthIfNoDamageTaken()
	{
		return null;
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xBD2BFC", Offset = "0xBD2BFC", VA = "0xBD2BFC")]
	public ZNRegeneratingTargetDummy()
	{
	}
}
[Token(Token = "0x20000D2")]
public class ZNShopkeeper : ZNBasicZombie
{
	[Token(Token = "0x600048E")]
	[Address(RVA = "0xBD2E1C", Offset = "0xBD2E1C", VA = "0xBD2E1C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xBD2E38", Offset = "0xBD2E38", VA = "0xBD2E38", Slot = "36")]
	public override void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xBD2ECC", Offset = "0xBD2ECC", VA = "0xBD2ECC")]
	public ZNShopkeeper()
	{
	}
}
[Token(Token = "0x20000D3")]
public class ZNTargetDummy : ZNEnemyBase
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNTargetDummyAsset AssociatedTargetDummyAsset;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xBD2ED0", Offset = "0xBD2ED0", VA = "0xBD2ED0", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xBD2C08", Offset = "0xBD2C08", VA = "0xBD2C08")]
	public ZNTargetDummy()
	{
	}
}
[Token(Token = "0x20000D4")]
[CreateAssetMenu(fileName = "ZNTargetDummyAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNTargetDummyAsset")]
public class ZNTargetDummyAsset : ZNEnemyAsset
{
	[Token(Token = "0x6000493")]
	[Address(RVA = "0xBD3034", Offset = "0xBD3034", VA = "0xBD3034")]
	public ZNTargetDummyAsset()
	{
	}
}
[Token(Token = "0x20000D5")]
public class ZNTombieZombie : ZNEnemyBase
{
	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNTombieZombieAsset AssociatedTombieZombieAsset;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Tooltip("The peashooter (likely an equip item prefab) that we turn on/off when other items are equipped")]
	[Header("Tombie")]
	[SerializeField]
	protected GameObject PeashooterObject;

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xBD3038", Offset = "0xBD3038", VA = "0xBD3038", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xBD3188", Offset = "0xBD3188", VA = "0xBD3188", Slot = "25")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xBD32D8", Offset = "0xBD32D8", VA = "0xBD32D8", Slot = "45")]
	public override void AssignEnemyAsset(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xBD343C", Offset = "0xBD343C", VA = "0xBD343C")]
	private void EquipItemEquipped(ZNEquipItem EquippedEquipItem, ZNHands EquippingHand)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xBD3474", Offset = "0xBD3474", VA = "0xBD3474")]
	private void EquipItemUnequipped(ZNEquipItem UnequippedEquipItem, ZNHands UnequippingHand)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xBD34AC", Offset = "0xBD34AC", VA = "0xBD34AC")]
	public ZNTombieZombie()
	{
	}
}
[Token(Token = "0x20000D6")]
[CreateAssetMenu(fileName = "ZNTombieZombieAsset", menuName = "Scriptable Objects/Characters/Enemies/ZNTombieZombieAsset")]
public class ZNTombieZombieAsset : ZNEnemyAsset
{
	[Token(Token = "0x600049A")]
	[Address(RVA = "0xBD34B0", Offset = "0xBD34B0", VA = "0xBD34B0")]
	public ZNTombieZombieAsset()
	{
	}
}
[Token(Token = "0x20000D7")]
public class ZNBodyInventoryManager : ZNInventoryManagerBase
{
	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("Left inventory return point 1")]
	protected ZNPlayerInventoryReturnPoint LeftInventoryReturnPoint1;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Left inventory return point 2")]
	[SerializeField]
	protected ZNPlayerInventoryReturnPoint LeftInventoryReturnPoint2;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("Left inventory return point 3")]
	[SerializeField]
	protected ZNPlayerInventoryReturnPoint LeftInventoryReturnPoint3;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("Right inventory return point 1")]
	protected ZNPlayerInventoryReturnPoint RightInventoryReturnPoint1;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("Right inventory return point 2")]
	protected ZNPlayerInventoryReturnPoint RightInventoryReturnPoint2;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("Right inventory return point 3")]
	protected ZNPlayerInventoryReturnPoint RightInventoryReturnPoint3;

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xBD34B4", Offset = "0xBD34B4", VA = "0xBD34B4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xBD3510", Offset = "0xBD3510", VA = "0xBD3510")]
	protected void InitializeReturnPointsDictionary()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xBD35E0", Offset = "0xBD35E0", VA = "0xBD35E0")]
	public ZNBodyInventoryManager()
	{
	}
}
[Token(Token = "0x20000D8")]
public class ZNInventoryManagerBase : MonoBehaviour
{
	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected List<int> OrderedRightHandReturnPointIndexPriorityList;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected List<int> OrderedLeftHandReturnPointIndexPriorityList;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FOnItemAddedToInventory OnItemAddedToInventoryDel;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnItemRemovedFromInventory OnItemRemovedFromInventoryDel;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnInventoryWeaponSlotsChanged OnInventoryWeaponSlotsChangedDel;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The SFX for changing the item's location")]
	[SerializeField]
	protected Event ItemLocationSwapSFX;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Middle item socket")]
	[SerializeField]
	protected Transform MiddleItemSocket;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected Dictionary<int, ZNGrabObjectBase> ItemsDictionary;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Dictionary<int, ZNPlayerInventoryReturnPoint> ReturnPointsDictionary;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected GameObject MiddleItemSocketObject;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected int MaxNumWeapons;

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xBD34E4", Offset = "0xBD34E4", VA = "0xBD34E4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xBD3BDC", Offset = "0xBD3BDC", VA = "0xBD3BDC", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xBD3BB0", Offset = "0xBD3BB0", VA = "0xBD3BB0")]
	protected void InitializeDefaultItemsDictionary()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xBD3BE0", Offset = "0xBD3BE0", VA = "0xBD3BE0")]
	protected void AddWeaponSlot()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xBD3C88", Offset = "0xBD3C88", VA = "0xBD3C88")]
	public void AssignOwningCharacter(ZNMainCharacter InOwningCharacter)
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xBD3C90", Offset = "0xBD3C90", VA = "0xBD3C90")]
	public ZNWeaponBase GiveWeapon(ZNWeaponAsset InWeaponAsset)
	{
		return null;
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xBD3E4C", Offset = "0xBD3E4C", VA = "0xBD3E4C", Slot = "6")]
	public virtual ZNWeaponBase GiveWeapon(ZNWeaponBase InWeaponBase)
	{
		return null;
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xBD3FD8", Offset = "0xBD3FD8", VA = "0xBD3FD8")]
	public void RemoveWeapon(ZNWeaponBase InWeaponBase)
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xBD41A8", Offset = "0xBD41A8", VA = "0xBD41A8")]
	public void RemoveItem(int InItemIndex)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xBD4348", Offset = "0xBD4348", VA = "0xBD4348")]
	public void GiveMiddleItemSocketObject(GameObject InPrefabObject)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xBD4458", Offset = "0xBD4458", VA = "0xBD4458")]
	public void ChangeItemReturnPoint(ZNGrabObjectBase ChangingSocketObject, ZNPlayerInventoryReturnPoint PreviousObjectReturnPoint, ZNPlayerInventoryReturnPoint NewObjectReturnPoint)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xBD445C", Offset = "0xBD445C", VA = "0xBD445C")]
	public void SetNumAdditionalInventorySlots(int InNumAdditionalInventorySlots)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xBD44A4", Offset = "0xBD44A4", VA = "0xBD44A4")]
	public ZNMainCharacter GetOwningCharacter()
	{
		return null;
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xBD44AC", Offset = "0xBD44AC", VA = "0xBD44AC")]
	public int GetMaxNumWeapons()
	{
		return default(int);
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xBD44B4", Offset = "0xBD44B4", VA = "0xBD44B4")]
	public List<ZNGrabObjectBase> GetInventoryItems()
	{
		return null;
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xBD470C", Offset = "0xBD470C", VA = "0xBD470C")]
	public List<ZNWeaponBase> GetWeapons()
	{
		return null;
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xBD49B0", Offset = "0xBD49B0", VA = "0xBD49B0")]
	public bool HasAnyWeapons()
	{
		return default(bool);
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xBD49C8", Offset = "0xBD49C8", VA = "0xBD49C8")]
	public int GetNumberOfWeapons()
	{
		return default(int);
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xBD4A14", Offset = "0xBD4A14", VA = "0xBD4A14")]
	public int GetNumberOfUniqueWeapons()
	{
		return default(int);
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xBD4C74", Offset = "0xBD4C74", VA = "0xBD4C74")]
	public ZNWeaponBase GetFirstWeaponOfAsset(ZNWeaponAsset InWeaponAsset)
	{
		return null;
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xBD4E44", Offset = "0xBD4E44", VA = "0xBD4E44")]
	public void GetWeaponsOfAsset(ZNWeaponAsset InWeaponAsset, ref List<ZNWeaponBase> OutWeapons)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xBD507C", Offset = "0xBD507C", VA = "0xBD507C")]
	public bool HasWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xBD50F8", Offset = "0xBD50F8", VA = "0xBD50F8")]
	public int GetNumWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
		return default(int);
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xBD519C", Offset = "0xBD519C", VA = "0xBD519C")]
	public ZNGrabObjectBase GetItemAtIndex(int InItemIndex)
	{
		return null;
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xBD5230", Offset = "0xBD5230", VA = "0xBD5230", Slot = "7")]
	public virtual ZNPlayerInventoryReturnPoint GetInventoryReturnPointForIndex(int InItemIndex)
	{
		return null;
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xBD52C4", Offset = "0xBD52C4", VA = "0xBD52C4", Slot = "8")]
	public virtual bool GetFirstOpenPlayerInventoryReturnPoint(out ZNPlayerInventoryReturnPoint OutFirstPlayerInventoryReturnPoint, out int OutIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xBD3E18", Offset = "0xBD3E18", VA = "0xBD3E18")]
	public bool HasOpenInventoryReturnPoint()
	{
		return default(bool);
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xBD55AC", Offset = "0xBD55AC", VA = "0xBD55AC")]
	public List<int> GetOrderedReturnPointIndexPriorityList(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xBD55D0", Offset = "0xBD55D0", VA = "0xBD55D0")]
	public GameObject GetMiddleItemSocketObject()
	{
		return null;
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xBD35E4", Offset = "0xBD35E4", VA = "0xBD35E4")]
	public ZNInventoryManagerBase()
	{
	}
}
[Token(Token = "0x20000D9")]
public class ZNUIWheelInventoryManager : ZNInventoryManagerBase
{
	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FOnHipReturnPointUpdated OnHipReturnPointUpdatedDel;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The prefab for the inactive player inventory return points")]
	[SerializeField]
	protected GameObject PF_PlayerInventoryReturnPoint;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Tooltip("Left item hip return point")]
	protected ZNPlayerInventoryReturnPoint LeftHipReturnPoint;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("Right item hip return point")]
	protected ZNPlayerInventoryReturnPoint RightHipReturnPoint;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("The prompt that displays when we need to show UI wheel controls")]
	protected ZNMessagePromptAsset UIWheelControlsMessagePromptAsset;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected bool bDisplayedUIWheelControls;

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xBD55D8", Offset = "0xBD55D8", VA = "0xBD55D8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xBD5608", Offset = "0xBD5608", VA = "0xBD5608")]
	protected void CreateInactiveReturnPoints()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xBD57A8", Offset = "0xBD57A8", VA = "0xBD57A8", Slot = "6")]
	public override ZNWeaponBase GiveWeapon(ZNWeaponBase InWeaponBase)
	{
		return null;
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xBD5D88", Offset = "0xBD5D88", VA = "0xBD5D88")]
	public void TrySwapToWeapon(ZNHands InHand, int InItemIndex)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xBD5CA4", Offset = "0xBD5CA4", VA = "0xBD5CA4")]
	protected void UpdateHipReturnPoint(ZNPlayerInventoryReturnPoint InHipReturnPoint, ZNGrabObjectBase NewOccupyingObject, int InItemIndex)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xBD6168", Offset = "0xBD6168", VA = "0xBD6168")]
	public bool HasOpenRightOrLeftHipReturnPoint()
	{
		return default(bool);
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xBD5964", Offset = "0xBD5964", VA = "0xBD5964")]
	public ZNPlayerInventoryReturnPoint GetFirstOpenRightOrLeftHipReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xBD6230", Offset = "0xBD6230", VA = "0xBD6230")]
	public ZNPlayerInventoryReturnPoint GetHipReturnPointForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xBD5AF0", Offset = "0xBD5AF0", VA = "0xBD5AF0")]
	public int GetItemIndexForGrabObject(ZNGrabObjectBase InGrabObject)
	{
		return default(int);
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xBD5FE8", Offset = "0xBD5FE8", VA = "0xBD5FE8")]
	protected bool CanObjectBeSwappedTo(ZNGrabObjectBase NewOccupyingObject, ZNGrabObjectBase PreviousOccupyingObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xBD6258", Offset = "0xBD6258", VA = "0xBD6258")]
	public ZNUIWheelInventoryManager()
	{
	}
}
[Token(Token = "0x20000DA")]
public class ZNBodyPartComponent : MonoBehaviour, IZNDamageable
{
	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int TeamNumber;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The body part for this component")]
	protected EZNBodyParts BodyPart;

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xBD625C", Offset = "0xBD625C", VA = "0xBD625C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xBD62AC", Offset = "0xBD62AC", VA = "0xBD62AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xBD6328", Offset = "0xBD6328", VA = "0xBD6328", Slot = "4")]
	public void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xBD6334", Offset = "0xBD6334", VA = "0xBD6334", Slot = "5")]
	public GameObject GetDamageableOwner()
	{
		return null;
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xBD633C", Offset = "0xBD633C", VA = "0xBD633C", Slot = "6")]
	public IZNDamageable GetRealDamageable()
	{
		return null;
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xBD63AC", Offset = "0xBD63AC", VA = "0xBD63AC", Slot = "8")]
	public bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xBD63B4", Offset = "0xBD63B4", VA = "0xBD63B4")]
	public float GetCriticalHitMultiplier()
	{
		return default(float);
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xBD63BC", Offset = "0xBD63BC", VA = "0xBD63BC", Slot = "12")]
	public void AssignTeamNumber(int InTeamNumber)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xBD63C4", Offset = "0xBD63C4", VA = "0xBD63C4", Slot = "13")]
	public int GetTeamNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xBD63CC", Offset = "0xBD63CC", VA = "0xBD63CC", Slot = "14")]
	public void NotifyDamageableAdded()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xBD63D0", Offset = "0xBD63D0", VA = "0xBD63D0", Slot = "15")]
	public void NotifyDamageableRemoved()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xBD63D4", Offset = "0xBD63D4", VA = "0xBD63D4")]
	public ZNCharacterBase GetOwningCharacter()
	{
		return null;
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xBD63DC", Offset = "0xBD63DC", VA = "0xBD63DC")]
	public EZNBodyParts GetBodyPart()
	{
		return default(EZNBodyParts);
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xBD63E4", Offset = "0xBD63E4", VA = "0xBD63E4")]
	public ZNBodyPartComponent()
	{
	}
}
[Token(Token = "0x20000DB")]
[RequireComponent(typeof(ZNHealthComponent))]
public class ZNCharacterBase : SACharacter, IZNDamageable, IZNNavigable
{
	[Token(Token = "0x20000DC")]
	[CompilerGenerated]
	private sealed class <RepeatIntervalChecks>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCharacterBase <>4__this;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600050A")]
			[Address(RVA = "0xBD6D00", Offset = "0xBD6D00", VA = "0xBD6D00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600050C")]
			[Address(RVA = "0xBD6D48", Offset = "0xBD6D48", VA = "0xBD6D48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xBD68DC", Offset = "0xBD68DC", VA = "0xBD68DC")]
		[DebuggerHidden]
		public <RepeatIntervalChecks>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xBD6C38", Offset = "0xBD6C38", VA = "0xBD6C38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xBD6C3C", Offset = "0xBD6C3C", VA = "0xBD6C3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xBD6D08", Offset = "0xBD6D08", VA = "0xBD6D08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("This is a transform to use to handle unspecified damage")]
	[SerializeField]
	protected Transform CharacterUnspecifiedDamageTransform;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNHealthComponent HealthComponent;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected Collider CharacterCollider;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public OnCharacterDied OnCharacterDiedDel;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public OnCharacterHiddenStateChanged OnCharacterHiddenStateChangedDel;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public OnCharacterTookDamage OnCharacterTookDamageDel;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FOnFalseVolumeStateChanged OnFalseVolumeStateChangedDel;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public FOnInvalidLocationStateChanged OnInvalidLocationStateChangedDel;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public OnHealthUpdated OnHealthUpdatedDel;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("How often in seconds that we check the false volume state")]
	protected float FalseVolumeStateCheckFrequency;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Tooltip("How often in seconds that we check things")]
	[SerializeField]
	protected float IntervalCheckFrequency;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("Navigation parameters for this character")]
	[SerializeField]
	protected FZNNavigationParameters NavigationParameters;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The head transform")]
	protected Transform HeadTransform;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ZNGameModeBase GameModeRef;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected bool bHidden;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	protected bool bAlive;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	protected bool bInFalseVolume;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
	protected bool bInInvalidLocation;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected int TeamNumber;

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xBCCDB8", Offset = "0xBCCDB8", VA = "0xBCCDB8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xBCD12C", Offset = "0xBCD12C", VA = "0xBCD12C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xBCD878", Offset = "0xBCD878", VA = "0xBCD878", Slot = "25")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xBD6814", Offset = "0xBD6814", VA = "0xBD6814", Slot = "26")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xBCD618", Offset = "0xBCD618", VA = "0xBCD618", Slot = "27")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xBCF92C", Offset = "0xBCF92C", VA = "0xBCF92C", Slot = "28")]
	public virtual void Die()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xBD6818", Offset = "0xBD6818", VA = "0xBD6818")]
	public void ForceDie()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xBD64FC", Offset = "0xBD64FC", VA = "0xBD64FC")]
	protected void ReevaluateHealth()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xBD669C", Offset = "0xBD669C", VA = "0xBD669C")]
	[IteratorStateMachine(typeof(<RepeatIntervalChecks>d__29))]
	private IEnumerator RepeatIntervalChecks()
	{
		return null;
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xBD6904", Offset = "0xBD6904", VA = "0xBD6904", Slot = "29")]
	protected virtual void HandleIntervalChecks()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xBD6928", Offset = "0xBD6928", VA = "0xBD6928")]
	protected void CheckFalseVolumeState()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xBCF548", Offset = "0xBCF548", VA = "0xBCF548", Slot = "30")]
	protected virtual void FalseVolumeStateChanged()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xBD6A98", Offset = "0xBD6A98", VA = "0xBD6A98", Slot = "31")]
	protected virtual void CheckInvalidLocationState()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xBD6A9C", Offset = "0xBD6A9C", VA = "0xBD6A9C", Slot = "32")]
	protected virtual void InvalidLocationStateChanged()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xBC2D68", Offset = "0xBC2D68", VA = "0xBC2D68")]
	public void ChangeHiddenState(bool bNewHiddenState)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xBD6ABC", Offset = "0xBD6ABC", VA = "0xBD6ABC", Slot = "33")]
	public virtual void MarkContributionToEnemyDefeated(ZNEnemyBase DefeatedEnemy, int InDamageInflicted)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xBD0878", Offset = "0xBD0878", VA = "0xBD0878", Slot = "34")]
	protected virtual void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xBD6AC0", Offset = "0xBD6AC0", VA = "0xBD6AC0")]
	private void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xBD6ADC", Offset = "0xBD6ADC", VA = "0xBD6ADC")]
	protected void HealthDepleted(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xBD0C94", Offset = "0xBD0C94", VA = "0xBD0C94", Slot = "35")]
	protected virtual void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xBCF7B8", Offset = "0xBCF7B8", VA = "0xBCF7B8", Slot = "36")]
	public virtual void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xBD6AEC", Offset = "0xBD6AEC", VA = "0xBD6AEC", Slot = "37")]
	public virtual GameObject GetDamageableOwner()
	{
		return null;
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xBD6AF4", Offset = "0xBD6AF4", VA = "0xBD6AF4", Slot = "38")]
	public virtual IZNDamageable GetRealDamageable()
	{
		return null;
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xBD6AF8", Offset = "0xBD6AF8", VA = "0xBD6AF8", Slot = "39")]
	public virtual bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xBD6B00", Offset = "0xBD6B00", VA = "0xBD6B00", Slot = "40")]
	public virtual float GetDamageMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xBD6B08", Offset = "0xBD6B08", VA = "0xBD6B08", Slot = "41")]
	public virtual float GetStaggerMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xBD6B10", Offset = "0xBD6B10", VA = "0xBD6B10", Slot = "42")]
	public virtual int GetMaxReceivableDamage()
	{
		return default(int);
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xBD6B18", Offset = "0xBD6B18", VA = "0xBD6B18", Slot = "14")]
	public void AssignTeamNumber(int InTeamNumber)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xBD6B20", Offset = "0xBD6B20", VA = "0xBD6B20", Slot = "15")]
	public int GetTeamNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xBD63EC", Offset = "0xBD63EC", VA = "0xBD63EC", Slot = "16")]
	public void NotifyDamageableAdded()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xBD6704", Offset = "0xBD6704", VA = "0xBD6704", Slot = "17")]
	public void NotifyDamageableRemoved()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xBD6B28", Offset = "0xBD6B28", VA = "0xBD6B28", Slot = "18")]
	public GameObject GetNavigableOwner()
	{
		return null;
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xBD6B30", Offset = "0xBD6B30", VA = "0xBD6B30", Slot = "43")]
	public virtual Vector3 GetDestinationPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xBD6B50", Offset = "0xBD6B50", VA = "0xBD6B50", Slot = "44")]
	public virtual Vector3 GetPrimaryPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xBD6B70", Offset = "0xBD6B70", VA = "0xBD6B70")]
	private float GetNavigableWeight()
	{
		return default(float);
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xBD6B78", Offset = "0xBD6B78", VA = "0xBD6B78")]
	private float GetStoppingDistance()
	{
		return default(float);
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xBD6474", Offset = "0xBD6474", VA = "0xBD6474", Slot = "23")]
	public void NotifyNavigableAdded()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xBD678C", Offset = "0xBD678C", VA = "0xBD678C", Slot = "24")]
	public void NotifyNavigableRemoved()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xBD6B80", Offset = "0xBD6B80", VA = "0xBD6B80")]
	public Collider GetCharacterCollider()
	{
		return null;
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xBD6B88", Offset = "0xBD6B88", VA = "0xBD6B88")]
	public Transform GetCharacterUnspecifiedDamageTransform()
	{
		return null;
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xBD6B90", Offset = "0xBD6B90", VA = "0xBD6B90")]
	public ZNHealthComponent GetHealthComponent()
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xBCF950", Offset = "0xBCF950", VA = "0xBCF950")]
	public Vector3 GetCharacterUnspecifiedDamageTransformLocation()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xBD6B98", Offset = "0xBD6B98", VA = "0xBD6B98")]
	public bool IsHidden()
	{
		return default(bool);
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xBD6BA0", Offset = "0xBD6BA0", VA = "0xBD6BA0")]
	public bool IsAlive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xBC23F0", Offset = "0xBC23F0", VA = "0xBC23F0")]
	public int GetMaxHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xBD6BA8", Offset = "0xBD6BA8", VA = "0xBD6BA8")]
	public int GetCurrentHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xBD6C28", Offset = "0xBD6C28", VA = "0xBD6C28")]
	public bool IsInFalseVolume()
	{
		return default(bool);
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xBD6C30", Offset = "0xBD6C30", VA = "0xBD6C30")]
	public bool IsInInvalidLocation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xBC40E8", Offset = "0xBC40E8", VA = "0xBC40E8")]
	public Transform GetHeadTransform()
	{
		return null;
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xBD1860", Offset = "0xBD1860", VA = "0xBD1860")]
	public ZNCharacterBase()
	{
	}
}
[Token(Token = "0x20000DD")]
public class ZNDummyCharacter : ZNCharacterBase
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("When this dummy is hit, it loads this scene if possible.")]
	[SerializeField]
	protected string SceneToLoadOnTakeDamage;

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xBD6D50", Offset = "0xBD6D50", VA = "0xBD6D50", Slot = "36")]
	public override void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xBD6DC0", Offset = "0xBD6DC0", VA = "0xBD6DC0")]
	public ZNDummyCharacter()
	{
	}
}
[Token(Token = "0x20000DE")]
public class ZNEnemyAttackPosition : MonoBehaviour
{
	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected IZNDamageable OwningDamageable;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNEnemyBase OccupyingCharacter;

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xBD6E0C", Offset = "0xBD6E0C", VA = "0xBD6E0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xBD6E5C", Offset = "0xBD6E5C", VA = "0xBD6E5C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xBD6F7C", Offset = "0xBD6F7C", VA = "0xBD6F7C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xBD70D4", Offset = "0xBD70D4", VA = "0xBD70D4")]
	public bool IsOccupied()
	{
		return default(bool);
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xBD7134", Offset = "0xBD7134", VA = "0xBD7134")]
	public IZNDamageable GetOwningDamageable()
	{
		return null;
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xBD713C", Offset = "0xBD713C", VA = "0xBD713C")]
	public ZNCharacterBase GetOccupyingCharacter()
	{
		return null;
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xBD7144", Offset = "0xBD7144", VA = "0xBD7144")]
	public ZNEnemyAttackPosition()
	{
	}
}
[Token(Token = "0x20000DF")]
public class ZNHealthComponent : MonoBehaviour
{
	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnHealthDepleted OnHealthDepletedDel;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OnHealthUpdated OnHealthUpdatedDel;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If this overrides health with the below value")]
	[SerializeField]
	protected bool bOverrideHealth;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("How much health this component has")]
	[SerializeField]
	protected int OverrideHealth;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected IZNDamageable Damageable;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool bOutOfHealth;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected int OriginalMaxHealth;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int MaxHealth;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int CurrentHealth;

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xBD714C", Offset = "0xBD714C", VA = "0xBD714C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xBD71BC", Offset = "0xBD71BC", VA = "0xBD71BC", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xBCDB74", Offset = "0xBCDB74", VA = "0xBCDB74")]
	public void InitializeHealth(int InMaxHealth)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xBD6828", Offset = "0xBD6828", VA = "0xBD6828")]
	public void UpdateMaxHealth(int InMaxHealth, bool bUpdateOriginalMaxHealth = false)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xBD71C4", Offset = "0xBD71C4", VA = "0xBD71C4", Slot = "6")]
	public virtual void TakeDamage(int InDamage, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xBD72E4", Offset = "0xBD72E4", VA = "0xBD72E4", Slot = "7")]
	public virtual void RecoverHealth(int InHealth)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xBD71C0", Offset = "0xBD71C0", VA = "0xBD71C0")]
	public void SetHealth(int InHealth)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xBD72F0", Offset = "0xBD72F0", VA = "0xBD72F0", Slot = "8")]
	protected virtual void HealthDepleted()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xBD725C", Offset = "0xBD725C", VA = "0xBD725C")]
	protected void UpdateHealth(int InLostHealth)
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xBD7314", Offset = "0xBD7314", VA = "0xBD7314")]
	public int GetOriginalMaxHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xBD731C", Offset = "0xBD731C", VA = "0xBD731C")]
	public int GetMaxHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xBD7324", Offset = "0xBD7324", VA = "0xBD7324")]
	public int GetCurrentHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xBD732C", Offset = "0xBD732C", VA = "0xBD732C")]
	public bool IsOutOfHealth()
	{
		return default(bool);
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xBD7334", Offset = "0xBD7334", VA = "0xBD7334")]
	public float GetHealthPercentage()
	{
		return default(float);
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xBD7348", Offset = "0xBD7348", VA = "0xBD7348")]
	public ZNHealthComponent()
	{
	}
}
[Token(Token = "0x20000E0")]
public class ZNMainCharacter : ZNCharacterBase
{
	[Token(Token = "0x20000E1")]
	[CompilerGenerated]
	private sealed class <RemoveReviveModAssetsAfterDelay>d__116 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainCharacter <>4__this;

		[Token(Token = "0x1700003A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000595")]
			[Address(RVA = "0xBE741C", Offset = "0xBE741C", VA = "0xBE741C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0xBE7464", Offset = "0xBE7464", VA = "0xBE7464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xBE2FDC", Offset = "0xBE2FDC", VA = "0xBE2FDC")]
		[DebuggerHidden]
		public <RemoveReviveModAssetsAfterDelay>d__116(int <>1__state)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xBE72BC", Offset = "0xBE72BC", VA = "0xBE72BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xBE72C0", Offset = "0xBE72C0", VA = "0xBE72C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xBE7424", Offset = "0xBE7424", VA = "0xBE7424", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E2")]
	[CompilerGenerated]
	private sealed class <DelayBeforeRemovePreventInvalidLocationCheck>d__168 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainCharacter <>4__this;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0xBE7528", Offset = "0xBE7528", VA = "0xBE7528", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xBE7570", Offset = "0xBE7570", VA = "0xBE7570", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xBE6AB8", Offset = "0xBE6AB8", VA = "0xBE6AB8")]
		[DebuggerHidden]
		public <DelayBeforeRemovePreventInvalidLocationCheck>d__168(int <>1__state)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xBE746C", Offset = "0xBE746C", VA = "0xBE746C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xBE7470", Offset = "0xBE7470", VA = "0xBE7470", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xBE7530", Offset = "0xBE7530", VA = "0xBE7530", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected ZNActivityManagerComponent ActivityManagerComponent;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected ZNInventoryManagerBase InventoryManager;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNUIWheelInventoryManager UIWheelInventoryManager;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected ZNShopWeaponUpgrader ShopWeaponUpgrader;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected ZNScoreManager ScoreManager;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected ZNGameUserSettings GameUserSettings;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected ZNVREditorPlayerController VREditorPlayerController;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Tooltip("The left player hand/OVR Grabber")]
	[SerializeField]
	protected ZNPlayerHand LeftPlayerHand;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Tooltip("The right player hand/OVR grabber")]
	[SerializeField]
	protected ZNPlayerHand RightPlayerHand;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public FOnCharacterGrabbedObject OnCharacterGrabbedObjectDel;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public FOnCharacterDroppedObject OnCharacterDroppedObjectDel;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public FOnCharacterRecievedWeapon OnCharacterRecievedWeapon;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public FOnCharacterRemovedWeapon OnCharacterRemovedWeapon;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public FOnCharacterNoirCoinsUpdated OnCharacterNoirCoinsUpdated;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public FOnCharacterExtraLivesUpdated OnCharacterExtraLivesUpdated;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public FOnPlayerCharacterStartedVRMovement OnPlayerCharacterStartedVRMovementDel;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public FOnPlayerCharacterStartedVRMovement OnPlayerCharacterEndedVRMovementDel;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Tooltip("The spot to put the left hand object")]
	[SerializeField]
	protected GameObject LeftHandObjectSocket;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[Tooltip("The spot to put the right hand object")]
	[SerializeField]
	protected GameObject RightHandObjectSocket;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	[Tooltip("The left hand root")]
	protected GameObject LeftHandRoot;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	[Tooltip("The right hand root")]
	protected GameObject RightHandRoot;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[Tooltip("The UI wheel inventory return points root")]
	[SerializeField]
	protected GameObject UIWheelInventoryReturnPointsRoot;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[Tooltip("The body inventory return points root")]
	[SerializeField]
	protected GameObject BodyInventoryReturnPointsRoot;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	[Tooltip("The UI prefab that spawns to create the player UI")]
	protected GameObject PF_UIManagerWidget;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[Tooltip("The UI prefab that spawns to create the end game results widget")]
	[SerializeField]
	protected GameObject PF_EndGameResultsWidget;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[Tooltip("The message that shows when using one handed mode")]
	[SerializeField]
	protected ZNMessagePromptAsset OneHandedModeMessage;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[Tooltip("The message that shows when in the false volume")]
	[SerializeField]
	protected ZNMessagePromptAsset InFalseVolumeMessage;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[Tooltip("The message that shows when in an invalid location")]
	[SerializeField]
	protected ZNMessagePromptAsset InInvalidLocationMessage;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[Tooltip("SFX to play when confirming a normal hit")]
	[SerializeField]
	protected Event HitConfirmSFX;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Tooltip("SFX to play when confirming a critical hit")]
	[SerializeField]
	protected Event HitCriticalSFX;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[Tooltip("SFX to play when an enemy gets staggered")]
	[SerializeField]
	protected Event HitStaggerSFX;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[Tooltip("SFX to play when the player takes damage")]
	[SerializeField]
	protected Event TakeDamageSFX;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	[Tooltip("The positions around the player that enemies target")]
	protected List<ZNEnemyAttackPosition> EnemyAttackPositions;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	[Tooltip("The per second damage taken by the player while outside of the room")]
	protected int FalseVolumeDamage;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	[Tooltip("How many false volume check failures we should allow until the player takes damage")]
	[SerializeField]
	protected int FalseVolumeCheckFailuresBeforeDamage;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[Tooltip("How many invalid location check failures we should allow until the player takes damage")]
	[SerializeField]
	protected int InvalidLocationDamage;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	[SerializeField]
	[Tooltip("How many invalid location check failures we should allow until the player takes damage")]
	protected int InvalidLocationCheckFailuresBeforeDamage;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[Tooltip("How long we prevent doing the invalid location checks for")]
	[SerializeField]
	protected float PreventInvalidLocationCheckTime;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	[SerializeField]
	[Tooltip("How much health the player recovers to when revived/using an extra life")]
	[Header("Extra Lives")]
	protected int ReviveHealthAmount;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[Tooltip("How maximum number of extra lives by default")]
	[SerializeField]
	protected int MaxNumExtraLivesBase;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[Tooltip("The mods that the player gets when revived")]
	[SerializeField]
	protected List<SAModAsset> ReviveModAssets;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[Tooltip("How long (in seconds) that the player's mods last for when revived")]
	[SerializeField]
	protected float ReviveModsDuration;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	[Tooltip("How much additive to give per multiplier for experience. For example, if this is 0.1 and you are at multipler 3, the value is 0.3 which is 1.3x experience gained.")]
	[Header("Score")]
	protected double ExperienceAdditivePerMultiplier;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[Tooltip("The transform that moves when we move the joystick in VR mode.")]
	[SerializeField]
	[Header("VR Mode")]
	protected Transform VRModeJoystickMoveTransform;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[Tooltip("The transform that moves when we move the joystick for the camera in VR mode.")]
	[SerializeField]
	protected Transform VRModeJoystickCameraTransform;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[Tooltip("The base speed for how fast the player moves while in VR mode")]
	[SerializeField]
	protected float BaseVRModeSpeed;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	[Tooltip("How long we can run for without getting exhausted")]
	[SerializeField]
	protected float BaseMaxRunTime;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[SerializeField]
	[Tooltip("The multiplier we apply to speed when we're exhausted")]
	protected float ExhaustedSpeedMultiplier;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	[Tooltip("How much the camera shifts in degrees in VR mode when manually shifting it")]
	[SerializeField]
	protected float VRModeCameraShiftDegrees;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	protected Vector3 CurrentMoveDirection;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	protected bool bRightInventoryUIWheelOpen;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23D")]
	protected bool bLeftInventoryUIWheelOpen;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	protected ZNUIManager UIManager;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	protected EZNInventoryModes InventoryMode;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	protected ZNGrabObjectBase RightHandObject;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	protected ZNGrabObjectBase LeftHandObject;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	protected OVRGrabbable RightHandGrabbable;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	protected OVRGrabbable LeftHandGrabbable;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	protected bool bDisabledHand;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	protected ZNHands DisabledHand;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected ZNGunWeapon LastUsedAmmoWeapon;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	protected Dictionary<ZNWeaponAsset, FZNTrackedWeaponInfo> TrackedWeaponInfoDict;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	protected Dictionary<ZNEnemyAsset, FZNTrackedEnemyInfo> TrackedEnemyInfoDict;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected int NumNoirCoins;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	protected int NumExtraLives;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected int MaxNumExtraLives;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	protected int NumFalseVolumeCheckFailures;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	protected int NumInvalidLocationCheckFailures;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	protected bool bPreventInvalidLocationCheck;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	protected float CurrentVRModeSpeed;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	protected float CurrentRunTimeRemaining;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	protected float MaxRunTime;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	protected bool bMovingInVRMode;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B5")]
	protected bool bExhausted;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	protected Vector2 EditorMovementVector;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	protected float ActivePlayTime;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
	protected int DamageInflicted;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	protected int DamageTaken;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	protected int NumKills;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	protected int NumOutsideRoomKills;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
	protected int NumCriticalHits;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	protected int NumStaggers;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	protected int NumCoinsSpent;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	protected int NumCoinsFromObjectives;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
	protected int NumObjectivesFullyCompleted;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	protected int GainedExperience;

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xBE0AD8", Offset = "0xBE0AD8", VA = "0xBE0AD8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xBE0EC4", Offset = "0xBE0EC4", VA = "0xBE0EC4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xBE1444", Offset = "0xBE1444", VA = "0xBE1444", Slot = "27")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xBE1478", Offset = "0xBE1478", VA = "0xBE1478")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xBE1660", Offset = "0xBE1660", VA = "0xBE1660", Slot = "25")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xBE0BD0", Offset = "0xBE0BD0", VA = "0xBE0BD0")]
	protected void InitializeInventoryManagement()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xBE11E8", Offset = "0xBE11E8", VA = "0xBE11E8")]
	protected void InitializeVRSpeedValues()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xBE19D4", Offset = "0xBE19D4", VA = "0xBE19D4")]
	public void PressTrigger(ZNHands InHand)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xBE1C04", Offset = "0xBE1C04", VA = "0xBE1C04")]
	public void ReleaseTrigger(ZNHands InHand)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xBE1E40", Offset = "0xBE1E40", VA = "0xBE1E40")]
	public void PressButtonOne(ZNHands InHand)
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xBE1F00", Offset = "0xBE1F00", VA = "0xBE1F00")]
	public void ReleaseButtonOne(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xBE1FC0", Offset = "0xBE1FC0", VA = "0xBE1FC0")]
	public void PressButtonTwo(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xBE2080", Offset = "0xBE2080", VA = "0xBE2080")]
	public void ReleaseButtonTwo(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xBE2140", Offset = "0xBE2140", VA = "0xBE2140")]
	public void PushThumbstick(ZNHands InHand, Vector2 MovementVector)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xBE2354", Offset = "0xBE2354", VA = "0xBE2354")]
	protected void UpdateUIWheelCursor(Vector2 InMovementVector, ZNHands InHand)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xBE24BC", Offset = "0xBE24BC", VA = "0xBE24BC")]
	public void PressThumbstickUp(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xBE2584", Offset = "0xBE2584", VA = "0xBE2584")]
	public void ReleaseThumbstickUp(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xBE264C", Offset = "0xBE264C", VA = "0xBE264C")]
	public void PressThumbstickDown(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xBE2714", Offset = "0xBE2714", VA = "0xBE2714")]
	public void ReleaseThumbstickDown(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xBE27DC", Offset = "0xBE27DC", VA = "0xBE27DC")]
	public void PressThumbstickRight(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xBE2988", Offset = "0xBE2988", VA = "0xBE2988")]
	public void ReleaseThumbstickRight(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xBE2A50", Offset = "0xBE2A50", VA = "0xBE2A50")]
	public void PressThumbstickLeft(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xBE2B74", Offset = "0xBE2B74", VA = "0xBE2B74")]
	public void ReleaseThumbstickLeft(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xBE2C3C", Offset = "0xBE2C3C", VA = "0xBE2C3C")]
	public void PressThumbstickClick(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xBE2CFC", Offset = "0xBE2CFC", VA = "0xBE2CFC")]
	public void ReleaseThumbstickClick(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xBE1AFC", Offset = "0xBE1AFC", VA = "0xBE1AFC")]
	protected void OpenInventoryUIWheel(ZNHands InHand)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xBE1CE4", Offset = "0xBE1CE4", VA = "0xBE1CE4")]
	protected void CloseInventoryUIWheel(ZNHands InHand, bool bTrySwapToWeapon = true)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xBE2DBC", Offset = "0xBE2DBC", VA = "0xBE2DBC", Slot = "28")]
	public override void Die()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xBE2E44", Offset = "0xBE2E44", VA = "0xBE2E44")]
	public void ReviveMainCharacter()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xBE2F74", Offset = "0xBE2F74", VA = "0xBE2F74")]
	[IteratorStateMachine(typeof(<RemoveReviveModAssetsAfterDelay>d__116))]
	protected IEnumerator RemoveReviveModAssetsAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xBE3004", Offset = "0xBE3004", VA = "0xBE3004")]
	public void GiveWeapon(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xBE31E0", Offset = "0xBE31E0", VA = "0xBE31E0")]
	public void GiveWeapon(ZNWeaponBase InWeaponBase)
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xBE315C", Offset = "0xBE315C", VA = "0xBE315C")]
	protected void TryUpdateLastUsedAmmoWeapon(ZNGunWeapon InGunWeapon)
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xBE333C", Offset = "0xBE333C", VA = "0xBE333C")]
	public void RemoveWeapon(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xBE33D8", Offset = "0xBE33D8", VA = "0xBE33D8")]
	public void RemoveWeapon(ZNWeaponBase InWeaponBase)
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xBE342C", Offset = "0xBE342C", VA = "0xBE342C")]
	public void NotifyShopAdded(ZNShopManager InShopManager)
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xBE1778", Offset = "0xBE1778", VA = "0xBE1778")]
	public void NotifyShopRemoved()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xBE11F8", Offset = "0xBE11F8", VA = "0xBE11F8")]
	protected void ReevaluateVRModeSpeed()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xBE1100", Offset = "0xBE1100", VA = "0xBE1100")]
	protected void ReevaluateMaxNumExtraLives()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xBE36FC", Offset = "0xBE36FC", VA = "0xBE36FC")]
	public void ReevaluateHandStatus()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xBE3A14", Offset = "0xBE3A14", VA = "0xBE3A14")]
	public void ReevaluateInventorySlots()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xBE3B2C", Offset = "0xBE3B2C", VA = "0xBE3B2C")]
	public void SetEditorMovementVector(Vector2 InEditorMovementVector)
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xBE3B38", Offset = "0xBE3B38", VA = "0xBE3B38")]
	public void TryGrabObject(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xBE3BE4", Offset = "0xBE3BE4", VA = "0xBE3BE4")]
	public void TryDropObject(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xBE3E88", Offset = "0xBE3E88", VA = "0xBE3E88")]
	public void ProxyGrab(IZNGrabbable InObject, ZNHands InHand)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xBE3FDC", Offset = "0xBE3FDC", VA = "0xBE3FDC")]
	public void DoGrabObject(ZNGrabObjectBase InObject, ZNHands InHand)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xBE4270", Offset = "0xBE4270", VA = "0xBE4270")]
	public void ForceGrabObject(ZNGrabObjectBase InGrabObject, ZNHands InHand)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xBE3BEC", Offset = "0xBE3BEC", VA = "0xBE3BEC")]
	public void DoDropObject(ZNHands InHand, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xBE4274", Offset = "0xBE4274", VA = "0xBE4274")]
	public void ForceDropObject(ZNGrabObjectBase InGrabObject, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xBE4338", Offset = "0xBE4338", VA = "0xBE4338")]
	public void ForceDropObject(ZNHands InHand, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xBE4340", Offset = "0xBE4340", VA = "0xBE4340")]
	public void GrabOVRGrabbable(ZNHands InHand, OVRGrabbable InGrabbable)
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xBE4360", Offset = "0xBE4360", VA = "0xBE4360")]
	public void DropOVRGrabbable(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xBE4380", Offset = "0xBE4380", VA = "0xBE4380", Slot = "29")]
	protected override void HandleIntervalChecks()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xBE4A80", Offset = "0xBE4A80", VA = "0xBE4A80", Slot = "31")]
	protected override void CheckInvalidLocationState()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xBE43A4", Offset = "0xBE43A4", VA = "0xBE43A4")]
	protected void TryTakeOutsideRoomDamage()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xBE4708", Offset = "0xBE4708", VA = "0xBE4708")]
	protected void TryTakeInvalidLocationDamage()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xBE5018", Offset = "0xBE5018", VA = "0xBE5018")]
	public void UpdateTrackedWeaponInfo(ZNWeaponAsset InWeaponAsset, FZNTrackedWeaponInfo InTrackedWeaponInfo)
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xBE5184", Offset = "0xBE5184", VA = "0xBE5184")]
	public void UpdateTrackedWeaponInfoForActivation(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xBE52B4", Offset = "0xBE52B4", VA = "0xBE52B4")]
	public void UpdateTrackedWeaponInfoForSuccessfulActivation(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xBE53E4", Offset = "0xBE53E4", VA = "0xBE53E4")]
	public void UpdateTrackedWeaponInfoForReload(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xBE5514", Offset = "0xBE5514", VA = "0xBE5514")]
	public void UpdateAndSaveStats(bool bInSucceeded)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xBE0FF8", Offset = "0xBE0FF8", VA = "0xBE0FF8")]
	public void CreateUIManagerWidget()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xBE5D00", Offset = "0xBE5D00", VA = "0xBE5D00")]
	public void CreateEndGameResultsWidget(int InWavesCleared, bool bSuccess, bool bBeatHighScore)
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xBE5E28", Offset = "0xBE5E28", VA = "0xBE5E28", Slot = "33")]
	public override void MarkContributionToEnemyDefeated(ZNEnemyBase DefeatedEnemy, int InDamageInflicted)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xBE623C", Offset = "0xBE623C", VA = "0xBE623C")]
	public void NotifyObjectiveCompleted(EZNObjectiveTiers InCompletedTier, int InNumCoinsToGive)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xBE62A0", Offset = "0xBE62A0", VA = "0xBE62A0")]
	public void GiveNoirCoins(int Amount)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xBE62E8", Offset = "0xBE62E8", VA = "0xBE62E8")]
	public bool ConsumeNoirCoin(int Amount)
	{
		return default(bool);
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xBE62C8", Offset = "0xBE62C8", VA = "0xBE62C8")]
	public void SetNumNoirCoins(int NewValue)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xBE6328", Offset = "0xBE6328", VA = "0xBE6328")]
	public void GiveExtraLives(int Amount)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xBE2DF8", Offset = "0xBE2DF8", VA = "0xBE2DF8")]
	public bool ConsumeExtraLives(int Amount)
	{
		return default(bool);
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xBE635C", Offset = "0xBE635C", VA = "0xBE635C")]
	public void SetNumExtraLives(int NewNumExtraLives)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xBE36C0", Offset = "0xBE36C0", VA = "0xBE36C0")]
	public void SetMaxNumExtraLives(int NewMaxNumExtraLives)
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xBE14E4", Offset = "0xBE14E4", VA = "0xBE14E4")]
	protected void TryMoveVRCharacter()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xBE2900", Offset = "0xBE2900", VA = "0xBE2900")]
	protected void MoveVRCamera(bool bMoveRight)
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xBE6388", Offset = "0xBE6388", VA = "0xBE6388", Slot = "35")]
	protected override void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xBE6540", Offset = "0xBE6540", VA = "0xBE6540", Slot = "34")]
	protected override void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xBE67A0", Offset = "0xBE67A0", VA = "0xBE67A0")]
	protected void ActiveObjectDestroyed(GameObject DestroyedGameObject)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xBE6880", Offset = "0xBE6880", VA = "0xBE6880")]
	protected void ShopItemPurchased(ZNShopItemComponent PurchasedShopItem)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xBE6908", Offset = "0xBE6908", VA = "0xBE6908")]
	protected void ShopUpgradeStarted(ZNGrabObjectBase UpgradedItem, int UpgradeCost)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xBE6918", Offset = "0xBE6918", VA = "0xBE6918")]
	protected void ItemSoldToShop(ZNGrabObjectBase SoldItem)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xBE6A1C", Offset = "0xBE6A1C", VA = "0xBE6A1C")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xBE6A50", Offset = "0xBE6A50", VA = "0xBE6A50")]
	[IteratorStateMachine(typeof(<DelayBeforeRemovePreventInvalidLocationCheck>d__168))]
	protected IEnumerator DelayBeforeRemovePreventInvalidLocationCheck()
	{
		return null;
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xBE6AE0", Offset = "0xBE6AE0", VA = "0xBE6AE0", Slot = "36")]
	public override void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xBE6B3C", Offset = "0xBE6B3C", VA = "0xBE6B3C", Slot = "43")]
	public override Vector3 GetDestinationPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xBE6DB4", Offset = "0xBE6DB4", VA = "0xBE6DB4", Slot = "44")]
	public override Vector3 GetPrimaryPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xBE6E98", Offset = "0xBE6E98", VA = "0xBE6E98")]
	public ZNActivityManagerComponent GetActivityManagerComponent()
	{
		return null;
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xBE6EA0", Offset = "0xBE6EA0", VA = "0xBE6EA0")]
	public ZNInventoryManagerBase GetInventoryManager()
	{
		return null;
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xBE22A4", Offset = "0xBE22A4", VA = "0xBE22A4")]
	public ZNHands GetVRMovementHand()
	{
		return default(ZNHands);
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xBE2418", Offset = "0xBE2418", VA = "0xBE2418")]
	public ZNHands GetVRCameraHand()
	{
		return default(ZNHands);
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xBE4248", Offset = "0xBE4248", VA = "0xBE4248")]
	public ZNPlayerHand GetPlayerHandForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xBE1AD4", Offset = "0xBE1AD4", VA = "0xBE1AD4")]
	public ZNGrabObjectBase GetObjectForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xBE6EA8", Offset = "0xBE6EA8", VA = "0xBE6EA8")]
	public OVRGrabbable GetGrabbableForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xBE22AC", Offset = "0xBE22AC", VA = "0xBE22AC")]
	public bool CanUpdateUIWheelCursor(ZNGrabObjectBase ActiveObject, ZNHands InHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xBE6ED0", Offset = "0xBE6ED0", VA = "0xBE6ED0")]
	public bool HasAnythingInHand(ZNHands InHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xBE3BBC", Offset = "0xBE3BBC", VA = "0xBE3BBC")]
	public GameObject GetObjectSocketForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xBE2420", Offset = "0xBE2420", VA = "0xBE2420")]
	public ZNInventoryUIWheelWidget GetInventoryUIWheelWidgetForHand(ZNHands InHand)
	{
		return null;
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xBE421C", Offset = "0xBE421C", VA = "0xBE421C")]
	public bool IsInventoryUIWheelOpenForHand(ZNHands InHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xBE6F98", Offset = "0xBE6F98", VA = "0xBE6F98")]
	public ZNGunWeapon GetFirstActiveAmmoWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xBE7050", Offset = "0xBE7050", VA = "0xBE7050")]
	public ZNGunWeapon GetLastUsedAmmoWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xBE7058", Offset = "0xBE7058", VA = "0xBE7058")]
	public ZNUIManager GetUIManager()
	{
		return null;
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xBE70CC", Offset = "0xBE70CC", VA = "0xBE70CC")]
	public List<ZNEnemyAttackPosition> GetEnemyAttackPositions()
	{
		return null;
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xBE70D4", Offset = "0xBE70D4", VA = "0xBE70D4")]
	public Dictionary<ZNWeaponAsset, FZNTrackedWeaponInfo> GetTrackedWeaponInfoDict()
	{
		return null;
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xBE70DC", Offset = "0xBE70DC", VA = "0xBE70DC")]
	public int GetNumNoirCoins()
	{
		return default(int);
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xBE70E4", Offset = "0xBE70E4", VA = "0xBE70E4")]
	public int GetNumExtraLives()
	{
		return default(int);
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xBE70EC", Offset = "0xBE70EC", VA = "0xBE70EC")]
	public int GetMaxNumExtraLives()
	{
		return default(int);
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xBE70F4", Offset = "0xBE70F4", VA = "0xBE70F4")]
	public bool HasMaxNumExtraLives()
	{
		return default(bool);
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xBE7108", Offset = "0xBE7108", VA = "0xBE7108")]
	public float GetRunTimePercentage()
	{
		return default(float);
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xBE1AB0", Offset = "0xBE1AB0", VA = "0xBE1AB0")]
	public bool IsHandEnabled(ZNHands InHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xBE7118", Offset = "0xBE7118", VA = "0xBE7118")]
	public ZNMainCharacter()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ZNStaggerComponent : MonoBehaviour
{
	[Token(Token = "0x20000E4")]
	[CompilerGenerated]
	private sealed class <DelayUntilEndStaggerCooldown>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNStaggerComponent <>4__this;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005B0")]
			[Address(RVA = "0xBE80FC", Offset = "0xBE80FC", VA = "0xBE80FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B2")]
			[Address(RVA = "0xBE8144", Offset = "0xBE8144", VA = "0xBE8144", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xBE7E54", Offset = "0xBE7E54", VA = "0xBE7E54")]
		[DebuggerHidden]
		public <DelayUntilEndStaggerCooldown>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xBE8040", Offset = "0xBE8040", VA = "0xBE8040", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xBE8044", Offset = "0xBE8044", VA = "0xBE8044", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xBE8104", Offset = "0xBE8104", VA = "0xBE8104", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnStaggerDepleted OnStaggerDepletedDel;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OnStaggerUpdated OnStaggerUpdatedDel;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OnStaggeredStarted OnStaggeredStartedDel;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OnStaggeredEnded OnStaggeredEndedDel;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float StaggerCooldownTime;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected IZNDamageable Damageable;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Dictionary<EZNStaggerTypes, CurrentAndMaxValue> CurrentStaggerThresholds;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool bStaggered;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected EZNStaggerTypes MidStaggerType;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool bStaggerOnCooldown;

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xBE7578", Offset = "0xBE7578", VA = "0xBE7578", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xBE75C8", Offset = "0xBE75C8", VA = "0xBE75C8")]
	public void InitializeStagger(SerializableDictionary<EZNStaggerTypes, int> InStaggerThresholds, float InStaggerCooldownTime)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xBE7A74", Offset = "0xBE7A74", VA = "0xBE7A74", Slot = "5")]
	public virtual void TakeStagger(int InStagger, EZNBodyParts InBodyPart, ref FZNTakeDamageResults RefTakeDamageResults)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xBE7AEC", Offset = "0xBE7AEC", VA = "0xBE7AEC", Slot = "6")]
	public virtual void RecoverStagger(int InStagger, EZNStaggerTypes InStaggerType, out bool bStaggerDepleted)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xBE7AF4", Offset = "0xBE7AF4", VA = "0xBE7AF4", Slot = "7")]
	public virtual void RecoverStaggerForAllTypes(int InStagger)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xBE7C58", Offset = "0xBE7C58", VA = "0xBE7C58", Slot = "8")]
	public virtual void StaggerDepleted(EZNStaggerTypes InStaggerType)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xBE7918", Offset = "0xBE7918", VA = "0xBE7918")]
	protected void UpdateStagger(int InLostStagger, EZNStaggerTypes InStaggerType, out bool bStaggerDepleted)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xBE7CD0", Offset = "0xBE7CD0", VA = "0xBE7CD0")]
	public void StartStaggered(EZNStaggerTypes InStaggerType)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xBE7D08", Offset = "0xBE7D08", VA = "0xBE7D08")]
	public void EndStaggered()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xBE7DEC", Offset = "0xBE7DEC", VA = "0xBE7DEC")]
	[IteratorStateMachine(typeof(<DelayUntilEndStaggerCooldown>d__19))]
	protected IEnumerator DelayUntilEndStaggerCooldown()
	{
		return null;
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xBE7E7C", Offset = "0xBE7E7C", VA = "0xBE7E7C")]
	public int GetMaxStagger(EZNStaggerTypes InStaggerType)
	{
		return default(int);
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xBE7F14", Offset = "0xBE7F14", VA = "0xBE7F14")]
	public int GetCurrentStagger(EZNStaggerTypes InStaggerType)
	{
		return default(int);
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xBE7FAC", Offset = "0xBE7FAC", VA = "0xBE7FAC")]
	public bool IsStaggered()
	{
		return default(bool);
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xBE7FB4", Offset = "0xBE7FB4", VA = "0xBE7FB4")]
	public EZNStaggerTypes GetMidStaggerType()
	{
		return default(EZNStaggerTypes);
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xBE7FBC", Offset = "0xBE7FBC", VA = "0xBE7FBC")]
	public ZNStaggerComponent()
	{
	}
}
[Token(Token = "0x20000E5")]
[CreateAssetMenu(fileName = "ZNBarricadeSpaceOpenConditionAsset", menuName = "Scriptable Objects/Conditions/Bonus Cards/ZNBarricadeSpaceOpenConditionAsset")]
public class ZNBarricadeSpaceOpenConditionAsset : SAConditionAsset
{
	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xBE814C", Offset = "0xBE814C", VA = "0xBE814C", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xBE8484", Offset = "0xBE8484", VA = "0xBE8484")]
	public ZNBarricadeSpaceOpenConditionAsset()
	{
	}
}
[Token(Token = "0x20000E6")]
[CreateAssetMenu(fileName = "ZNHasMaxNumExtraLivesConditionAsset", menuName = "Scriptable Objects/Conditions/ZNHasMaxNumExtraLivesConditionAsset")]
public class ZNHasMaxNumExtraLivesConditionAsset : SAConditionAsset
{
	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If checked, inverts this to check if the player does NOT have max num extra lives")]
	[SerializeField]
	protected bool bInvertToIfDoesNotHaveMaxNumExtraLives;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Tooltip("If checked, if even one character fails the conditions, this doesn't meet the conditions. Otherwise, each character must meet the conditions.")]
	[SerializeField]
	protected bool bFailConditionsIfOneCharacterFails;

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xBE848C", Offset = "0xBE848C", VA = "0xBE848C", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xBE85FC", Offset = "0xBE85FC", VA = "0xBE85FC")]
	public ZNHasMaxNumExtraLivesConditionAsset()
	{
	}
}
[Token(Token = "0x20000E7")]
[CreateAssetMenu(fileName = "ZNHasNotHitTargetRecentlyConditionAsset", menuName = "Scriptable Objects/Conditions/ZNHasNotHitTargetRecentlyConditionAsset")]
public class ZNHasNotHitTargetRecentlyConditionAsset : SAConditionAsset
{
	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("How long (in seconds) the owner has to go without inflicting damage to an enemy before this is valid")]
	[SerializeField]
	protected float TimeWithoutInflictingDamageThreshold;

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xBE860C", Offset = "0xBE860C", VA = "0xBE860C", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xBE8700", Offset = "0xBE8700", VA = "0xBE8700")]
	public ZNHasNotHitTargetRecentlyConditionAsset()
	{
	}
}
[Token(Token = "0x20000E8")]
[CreateAssetMenu(fileName = "ZNHasNumCoinsConditionAsset", menuName = "Scriptable Objects/Conditions/ZNHasNumCoinsConditionAsset")]
public class ZNHasNumCoinsConditionAsset : SAConditionAsset
{
	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If checked, need the number of coins or higher to be true. If NOT checked, need the number of coins or lower to be true.")]
	[SerializeField]
	protected bool bMinimumCheck;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Tooltip("The number of coins required")]
	protected int NumCoinsRequired;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If checked, if even one character fails the conditions, this doesn't meet the conditions. Otherwise, each character must meet the conditions.")]
	[SerializeField]
	protected bool bFailConditionsIfOneCharacterFails;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xBE8710", Offset = "0xBE8710", VA = "0xBE8710", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xBE887C", Offset = "0xBE887C", VA = "0xBE887C")]
	public ZNHasNumCoinsConditionAsset()
	{
	}
}
[Token(Token = "0x20000E9")]
[CreateAssetMenu(fileName = "ZNHasUnderHealthThresholdConditionAsset", menuName = "Scriptable Objects/Conditions/ZNHasUnderHealthThresholdConditionAsset")]
public class ZNHasUnderHealthThresholdConditionAsset : SAConditionAsset
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The health percentage value.")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float HealthPercentage;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("If the health must be higher than the percentage value to be true. If false, must be lower than the percentage value.")]
	[SerializeField]
	protected bool bHigherThanPercentage;

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xBE8898", Offset = "0xBE8898", VA = "0xBE8898", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xBE89D8", Offset = "0xBE89D8", VA = "0xBE89D8")]
	public ZNHasUnderHealthThresholdConditionAsset()
	{
	}
}
[Token(Token = "0x20000EA")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByCaseFileCompletedAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByCaseFileCompletedAsset")]
public class ZNUnlockConditionByCaseFileCompletedAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The case file key string")]
	[SerializeField]
	protected string CaseFileKey;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The comparison type for difficulty checking. If set to None, we just need any difficulty to be completed. (NOTE: Lower & Higher are the same as the Lower/Higher Equals checks.)")]
	[SerializeField]
	protected ESAComparisonTypes DifficultyComparisonType;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The difficulty for comparison checking")]
	[SerializeField]
	protected EZNDifficulties Difficulty;

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xBE89E8", Offset = "0xBE89E8", VA = "0xBE89E8", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xBE8A28", Offset = "0xBE8A28", VA = "0xBE8A28", Slot = "8")]
	public virtual int GetSavedIntegerValue()
	{
		return default(int);
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xBE8AD8", Offset = "0xBE8AD8", VA = "0xBE8AD8", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xBE8AE4", Offset = "0xBE8AE4", VA = "0xBE8AE4", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xBE8AEC", Offset = "0xBE8AEC", VA = "0xBE8AEC")]
	public ZNUnlockConditionByCaseFileCompletedAsset()
	{
	}
}
[Token(Token = "0x20000EB")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByCombinedWeaponsStatAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByCombinedWeaponsStatAsset")]
public class ZNUnlockConditionByCombinedWeaponsStatAsset : SAUnlockConditionByIntegerStatAsset
{
	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The weapon assets associated with the stat key")]
	[SerializeField]
	protected List<ZNWeaponAsset> WeaponAssets;

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xBE8AFC", Offset = "0xBE8AFC", VA = "0xBE8AFC", Slot = "8")]
	public override int GetSavedIntegerValue()
	{
		return default(int);
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xBE8C38", Offset = "0xBE8C38", VA = "0xBE8C38")]
	public ZNUnlockConditionByCombinedWeaponsStatAsset()
	{
	}
}
[Token(Token = "0x20000EC")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByEnemyStatAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByEnemyStatAsset")]
public class ZNUnlockConditionByEnemyStatAsset : SAUnlockConditionByIntegerStatAsset
{
	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The enemy assets associated with the stat key")]
	[SerializeField]
	protected List<ZNEnemyAsset> EnemyAssets;

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xBE8C40", Offset = "0xBE8C40", VA = "0xBE8C40", Slot = "8")]
	public override int GetSavedIntegerValue()
	{
		return default(int);
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xBE8D20", Offset = "0xBE8D20", VA = "0xBE8D20")]
	public ZNUnlockConditionByEnemyStatAsset()
	{
	}
}
[Token(Token = "0x20000ED")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByPlayerLevelAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByPlayerLevelAsset")]
public class ZNUnlockConditionByPlayerLevelAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The weapon asset associated with the stat key")]
	protected int RequiredPlayerLevel;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xBE8D28", Offset = "0xBE8D28", VA = "0xBE8D28", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xBE8D58", Offset = "0xBE8D58", VA = "0xBE8D58")]
	public int GetPlayerLevel()
	{
		return default(int);
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xBE8D7C", Offset = "0xBE8D7C", VA = "0xBE8D7C", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xBE8DA0", Offset = "0xBE8DA0", VA = "0xBE8DA0", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xBE8DA8", Offset = "0xBE8DA8", VA = "0xBE8DA8")]
	public ZNUnlockConditionByPlayerLevelAsset()
	{
	}
}
[Token(Token = "0x20000EE")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByWavesClearedForCaseFileAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByWavesClearedForCaseFileAsset")]
public class ZNUnlockConditionByWavesClearedForCaseFileAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The case file key string")]
	protected string CaseFileKey;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The comparison type for difficulty checking. If set to None, we just need any difficulty to be completed. (NOTE: Lower & Higher are the same as the Lower/Higher Equals checks.)")]
	protected ESAComparisonTypes DifficultyComparisonType;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Tooltip("The difficulty for comparison checking")]
	protected EZNDifficulties Difficulty;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The number of waves cleared required to be cleared")]
	protected int NumWavesClearedRequired;

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xBE8DB8", Offset = "0xBE8DB8", VA = "0xBE8DB8", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xBE8DFC", Offset = "0xBE8DFC", VA = "0xBE8DFC", Slot = "8")]
	public virtual int GetSavedIntegerValue()
	{
		return default(int);
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xBE8E9C", Offset = "0xBE8E9C", VA = "0xBE8E9C", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xBE8EA8", Offset = "0xBE8EA8", VA = "0xBE8EA8", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xBE8EB0", Offset = "0xBE8EB0", VA = "0xBE8EB0")]
	public ZNUnlockConditionByWavesClearedForCaseFileAsset()
	{
	}
}
[Token(Token = "0x20000EF")]
[CreateAssetMenu(fileName = "ZNUnlockConditionByWeaponStatAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockConditionByWeaponStatAsset")]
public class ZNUnlockConditionByWeaponStatAsset : SAUnlockConditionByIntegerStatAsset
{
	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The weapon asset associated with the stat key")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xBE8EC0", Offset = "0xBE8EC0", VA = "0xBE8EC0", Slot = "8")]
	public override int GetSavedIntegerValue()
	{
		return default(int);
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xBE8FB8", Offset = "0xBE8FB8", VA = "0xBE8FB8")]
	public ZNUnlockConditionByWeaponStatAsset()
	{
	}
}
[Token(Token = "0x20000F0")]
[CreateAssetMenu(fileName = "ZNUnlockedBadgesConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockedBadgesConditionAsset")]
public class ZNUnlockedBadgesConditionAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The number of unlocked badges required")]
	protected int NumUnlockedBadgesRequired;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Tooltip("If a custom badge list is used instead of the default collection of badges")]
	protected bool bCustomBadgeList;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The custom badges to check for unlocked when the custom badge list bool is checked")]
	[SerializeField]
	protected List<ZNBadgeAssetBase> CustomBadgeList;

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xBE8FC0", Offset = "0xBE8FC0", VA = "0xBE8FC0", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xBE9004", Offset = "0xBE9004", VA = "0xBE9004", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xBE9274", Offset = "0xBE9274", VA = "0xBE9274", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xBE927C", Offset = "0xBE927C", VA = "0xBE927C")]
	public ZNUnlockedBadgesConditionAsset()
	{
	}
}
[Token(Token = "0x20000F1")]
[CreateAssetMenu(fileName = "ZNUnlockedLorePagesConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockedLorePagesConditionAsset")]
public class ZNUnlockedLorePagesConditionAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The lore page collection asset")]
	[SerializeField]
	protected ZNLorePageCollectionAsset LorePageCollectionAsset;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The number of unlocked lore pages required")]
	[SerializeField]
	protected int NumUnlockedLorePagesRequired;

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xBE928C", Offset = "0xBE928C", VA = "0xBE928C", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xBE92D0", Offset = "0xBE92D0", VA = "0xBE92D0", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xBE9358", Offset = "0xBE9358", VA = "0xBE9358", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xBE9360", Offset = "0xBE9360", VA = "0xBE9360")]
	public ZNUnlockedLorePagesConditionAsset()
	{
	}
}
[Token(Token = "0x20000F2")]
[CreateAssetMenu(fileName = "ZNUnlockedWeaponSkinsConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/ZNUnlockedWeaponSkinsConditionAsset")]
public class ZNUnlockedWeaponSkinsConditionAsset : SAUnlockConditionAsset
{
	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The weapon skins asset list that we go through to see if any skins are unlocked")]
	[SerializeField]
	protected List<ZNWeaponSkinsAsset> WeaponSkinsAssetList;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If we only look for specific skins to be unlocked")]
	[SerializeField]
	protected bool bOnlyCheckSpecificSkins;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The specific skin asset list that we use when the above boolean is true. Only matching skin assets count towards the unlocked weapon skins required.")]
	[SerializeField]
	protected List<ZNSkinAsset> SpecificSkinAssetList;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The number of weapon skins unlocked that we need")]
	protected int NumUnlockedWeaponSkinsRequired;

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xBE9370", Offset = "0xBE9370", VA = "0xBE9370", Slot = "4")]
	public override bool MeetsConditions([Optional] GameObject ReferenceObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xBE9390", Offset = "0xBE9390", VA = "0xBE9390")]
	public int GetNumUnlockedWeaponSkins()
	{
		return default(int);
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xBE9808", Offset = "0xBE9808", VA = "0xBE9808", Slot = "5")]
	public override int GetCurrentIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xBE980C", Offset = "0xBE980C", VA = "0xBE980C", Slot = "6")]
	public override int GetMaxIntegerProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xBE9814", Offset = "0xBE9814", VA = "0xBE9814")]
	public ZNUnlockedWeaponSkinsConditionAsset()
	{
	}
}
[Token(Token = "0x20000F3")]
public class ZNMainPlayerController : ZNControllerBase
{
	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainMenuGameMode MainMenuGameMode;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNGameplayGameMode GameplayGameMode;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNGameUserSettings GameUserSettings;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("How much time (in seconds) is required to try to auto complete the room setup")]
	[SerializeField]
	protected float RequiredTimeToTryAutoCompleteRoomSetup;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The default Wwise state")]
	[SerializeField]
	[Header("Wwise States")]
	protected State DefaultState;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("The Wwise state for when the player is in the false volume")]
	protected State InFalseVolumeState;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The Wwise state for when the player has paused the game")]
	[SerializeField]
	protected State InPauseState;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Tooltip("The RTPC for the player's health")]
	protected RTPC PlayerHealthRTPC;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected EZNInventoryModes InventoryMode;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected float TopLeftHeldTime;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected float TopRightHeldTime;

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xBE9828", Offset = "0xBE9828", VA = "0xBE9828", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xBE9BEC", Offset = "0xBE9BEC", VA = "0xBE9BEC", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xBE9C20", Offset = "0xBE9C20", VA = "0xBE9C20", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xBE9ECC", Offset = "0xBE9ECC", VA = "0xBE9ECC", Slot = "11")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xBE9EDC", Offset = "0xBE9EDC", VA = "0xBE9EDC", Slot = "9")]
	public override void Possess(SACharacter InPawn)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xBE9FB8", Offset = "0xBE9FB8", VA = "0xBE9FB8")]
	protected void PossessDelegates(ZNMainCharacter PossessingMainCharacter)
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xBEA140", Offset = "0xBEA140", VA = "0xBEA140", Slot = "10")]
	public override void UnPossess()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xBEA1C0", Offset = "0xBEA1C0", VA = "0xBEA1C0")]
	protected void UnpossessDelegates(ZNMainCharacter UnpossessingMainCharacter)
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xBEA348", Offset = "0xBEA348", VA = "0xBEA348", Slot = "12")]
	protected virtual void HandleInputs()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xBEAD6C", Offset = "0xBEAD6C", VA = "0xBEAD6C")]
	public void TryPerformTopHoldAction()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xBE38EC", Offset = "0xBE38EC", VA = "0xBE38EC")]
	public void RequestMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xBEAF50", Offset = "0xBEAF50", VA = "0xBEAF50")]
	public void RequestTutorialVideo(VideoClip InTutorialVideoClip, bool bLooping = false)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xBE4EF0", Offset = "0xBE4EF0", VA = "0xBE4EF0")]
	public void ClearMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xBEB080", Offset = "0xBEB080", VA = "0xBEB080")]
	public void StopTutorialVideo()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xBEB170", Offset = "0xBEB170", VA = "0xBEB170")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xBEB174", Offset = "0xBEB174", VA = "0xBEB174")]
	private void InputFocusAquired()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xBEB26C", Offset = "0xBEB26C", VA = "0xBEB26C")]
	protected void FalseVolumeStateChanged(bool bNewInFalseVolume)
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xBEB344", Offset = "0xBEB344", VA = "0xBEB344")]
	private void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xBEB36C", Offset = "0xBEB36C", VA = "0xBEB36C")]
	protected void Paused()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xBEB370", Offset = "0xBEB370", VA = "0xBEB370")]
	protected void UnPaused()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xBEB270", Offset = "0xBEB270", VA = "0xBEB270")]
	protected void UpdateWwiseState()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xBEB374", Offset = "0xBEB374", VA = "0xBEB374")]
	public ZNMainCharacter GetZNMainCharacter()
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xBEB37C", Offset = "0xBEB37C", VA = "0xBEB37C")]
	public ZNMainPlayerController()
	{
	}
}
[Token(Token = "0x20000F4")]
public class ZNControllerBase : SAController
{
	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xBE9B04", Offset = "0xBE9B04", VA = "0xBE9B04", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xBE9C18", Offset = "0xBE9C18", VA = "0xBE9C18", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xBE9EC4", Offset = "0xBE9EC4", VA = "0xBE9EC4", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xBE9ED8", Offset = "0xBE9ED8", VA = "0xBE9ED8", Slot = "11")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xBEB38C", Offset = "0xBEB38C", VA = "0xBEB38C")]
	public ZNControllerBase()
	{
	}
}
[Token(Token = "0x20000F5")]
public class ZNVREditorPlayerController : MonoBehaviour
{
	[Token(Token = "0x20000F6")]
	[CompilerGenerated]
	private sealed class <ReloadSpecialOneFrameDelay>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNVREditorPlayerController <>4__this;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IZNGrabbable GrabbableToGrab;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600060D")]
			[Address(RVA = "0xBEC784", Offset = "0xBEC784", VA = "0xBEC784", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060F")]
			[Address(RVA = "0xBEC7CC", Offset = "0xBEC7CC", VA = "0xBEC7CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xBEC63C", Offset = "0xBEC63C", VA = "0xBEC63C")]
		[DebuggerHidden]
		public <ReloadSpecialOneFrameDelay>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xBEC6D4", Offset = "0xBEC6D4", VA = "0xBEC6D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xBEC6D8", Offset = "0xBEC6D8", VA = "0xBEC6D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xBEC78C", Offset = "0xBEC78C", VA = "0xBEC78C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNGameplayGameMode GameplayGameMode;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The main camera's transform")]
	[SerializeField]
	protected Transform MainCameraTransform;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The VR pick up widget")]
	protected ZNVRPickUpWidget VRPickUpWidget;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The mouse look struct")]
	[SerializeField]
	protected MouseLook m_MouseLook;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("How far the player moves per second")]
	protected float MoveSpeed;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The original right hand object")]
	protected GameObject OriginalRightControllerAnchor;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The original left hand object")]
	[SerializeField]
	protected GameObject OriginalLeftControllerAnchor;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The transform that the right hand will move to")]
	[SerializeField]
	protected Transform NewRightHandTransform;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The transform that the left hand will move to")]
	protected Transform NewLeftHandTransform;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The mods we give to the player when the player activates the VR editor mode")]
	protected List<SAModAsset> InEditorMods;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The layer mask for picking up objects")]
	[SerializeField]
	protected LayerMask PickUpLayerMask;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool bVREditorPlayMode;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2 m_Input;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_MoveDir;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ZNGrabObjectBase HighlightedGrabObject;

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xBEB394", Offset = "0xBEB394", VA = "0xBEB394")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xBEB398", Offset = "0xBEB398", VA = "0xBEB398")]
	protected void Start()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xBEB450", Offset = "0xBEB450", VA = "0xBEB450")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xBEB454", Offset = "0xBEB454", VA = "0xBEB454")]
	protected void Update()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xBEB8C8", Offset = "0xBEB8C8", VA = "0xBEB8C8")]
	protected void SetupVREditorPlayMode()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xBEBB94", Offset = "0xBEBB94", VA = "0xBEBB94", Slot = "4")]
	protected virtual void HandleInputs()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xBEB4CC", Offset = "0xBEB4CC", VA = "0xBEB4CC")]
	protected void UpdateVRPickUpWidget()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xBEC29C", Offset = "0xBEC29C", VA = "0xBEC29C")]
	protected void TryPickUp()
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xBEC3EC", Offset = "0xBEC3EC", VA = "0xBEC3EC")]
	protected void TogglePause()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xBEC54C", Offset = "0xBEC54C", VA = "0xBEC54C")]
	protected void PressItemButton(ZNHands InHand, int InItemIndex)
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xBEC228", Offset = "0xBEC228", VA = "0xBEC228")]
	[IteratorStateMachine(typeof(<ReloadSpecialOneFrameDelay>d__26))]
	protected IEnumerator ReloadSpecialOneFrameDelay(IZNGrabbable GrabbableToGrab)
	{
		return null;
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xBEC470", Offset = "0xBEC470", VA = "0xBEC470")]
	protected void PressArrowKey(ESADirections InDirection)
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xBEBAC8", Offset = "0xBEBAC8", VA = "0xBEBAC8")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xBEC664", Offset = "0xBEC664", VA = "0xBEC664")]
	public bool IsVREditorPlayMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xBEC66C", Offset = "0xBEC66C", VA = "0xBEC66C")]
	public ZNVREditorPlayerController()
	{
	}
}
[Token(Token = "0x20000F7")]
public class ZNFakeWallScale : MonoBehaviour
{
	[Token(Token = "0x20000F8")]
	[CompilerGenerated]
	private sealed class <SetScaleAfterDelay>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNFakeWallScale <>4__this;

		[Token(Token = "0x17000042")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000616")]
			[Address(RVA = "0xBEC99C", Offset = "0xBEC99C", VA = "0xBEC99C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000618")]
			[Address(RVA = "0xBEC9E4", Offset = "0xBEC9E4", VA = "0xBEC9E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xBEC85C", Offset = "0xBEC85C", VA = "0xBEC85C")]
		[DebuggerHidden]
		public <SetScaleAfterDelay>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xBEC8A4", Offset = "0xBEC8A4", VA = "0xBEC8A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xBEC8A8", Offset = "0xBEC8A8", VA = "0xBEC8A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xBEC9A4", Offset = "0xBEC9A4", VA = "0xBEC9A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The scale of the object after a short delay")]
	[SerializeField]
	protected Vector3 ScaleAfterDelay;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("If this component should delete itself after the scale changes")]
	[SerializeField]
	protected bool bDeleteComponentAfterScaleChange;

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xBEC7D4", Offset = "0xBEC7D4", VA = "0xBEC7D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xBEC7F4", Offset = "0xBEC7F4", VA = "0xBEC7F4")]
	[IteratorStateMachine(typeof(<SetScaleAfterDelay>d__3))]
	protected IEnumerator SetScaleAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xBEC884", Offset = "0xBEC884", VA = "0xBEC884")]
	public ZNFakeWallScale()
	{
	}
}
[Token(Token = "0x20000F9")]
public class ZNGameDebugManager : MonoBehaviour
{
	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The owning main character")]
	[SerializeField]
	protected ZNMainCharacter OwningMainCharacter;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The mod to give when the debug invincible setting is on")]
	protected SAModAsset DebugInvincibleMod;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The mod to give when the 90% shop discount setting is on")]
	[SerializeField]
	protected SAModAsset DebugNinetyPercentShopDiscountMod;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The mod to give when the show damage numbers mod is on")]
	[SerializeField]
	protected SAModAsset DebugShowDamageNumbersMod;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The mod to give when show enemy health mod is on")]
	[SerializeField]
	protected SAModAsset DebugShowEnemyHealthMod;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected SAModManagerComponent OwningModManagerComponent;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected SAGameMode GameModeRef;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xBEC9EC", Offset = "0xBEC9EC", VA = "0xBEC9EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xBECF14", Offset = "0xBECF14", VA = "0xBECF14")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xBECB30", Offset = "0xBECB30", VA = "0xBECB30")]
	private void SetupAndBindDebugSettings()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xBECF3C", Offset = "0xBECF3C", VA = "0xBECF3C")]
	private void UnbindDebugSettings()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xBED2F8", Offset = "0xBED2F8", VA = "0xBED2F8")]
	public void GiveWeapon(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xBED38C", Offset = "0xBED38C", VA = "0xBED38C")]
	public void SpawnEnemy(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xBED4A0", Offset = "0xBED4A0", VA = "0xBED4A0")]
	protected void HandleSettingChanged(SAModAsset CorrespondingModAsset, bool bNewValue)
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xBED22C", Offset = "0xBED22C", VA = "0xBED22C")]
	private void DebugInvincibleSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xBED23C", Offset = "0xBED23C", VA = "0xBED23C")]
	private void DebugNinetyPercentShopDiscountSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xBED24C", Offset = "0xBED24C", VA = "0xBED24C")]
	private void DebugHideUISettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xBED55C", Offset = "0xBED55C", VA = "0xBED55C")]
	private void DebugShowDamageNumbersSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xBED250", Offset = "0xBED250", VA = "0xBED250")]
	private void DebugShowEnemyHealthSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xBED260", Offset = "0xBED260", VA = "0xBED260")]
	private void DebugShowNavMeshSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xBED56C", Offset = "0xBED56C", VA = "0xBED56C")]
	public ZNGameDebugManager()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FA")]
public class ZNDialogue
{
	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string _name;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea(3, 10)]
	public string[] _sentences;

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xBED574", Offset = "0xBED574", VA = "0xBED574")]
	public ZNDialogue()
	{
	}
}
[Token(Token = "0x20000FB")]
public class ZNDialogueExternalTest : MonoBehaviour
{
	[Token(Token = "0x6000628")]
	[Address(RVA = "0xBED57C", Offset = "0xBED57C", VA = "0xBED57C")]
	public void trigDial()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xBED580", Offset = "0xBED580", VA = "0xBED580")]
	public ZNDialogueExternalTest()
	{
	}
}
[Token(Token = "0x20000FC")]
public class ZNDialogueManager : MonoBehaviour
{
	[Token(Token = "0x20000FD")]
	private enum _EmotionalEnum
	{
		[Token(Token = "0x4000381")]
		Angry,
		[Token(Token = "0x4000382")]
		Goodbye,
		[Token(Token = "0x4000383")]
		Happy,
		[Token(Token = "0x4000384")]
		Hello,
		[Token(Token = "0x4000385")]
		Normal
	}

	[Token(Token = "0x20000FE")]
	[CompilerGenerated]
	private sealed class <TypeSentence>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNDialogueManager <>4__this;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string sentence;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private char[] <>7__wrap1;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x17000044")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000635")]
			[Address(RVA = "0xBEDD94", Offset = "0xBEDD94", VA = "0xBEDD94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000045")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000637")]
			[Address(RVA = "0xBEDDDC", Offset = "0xBEDDDC", VA = "0xBEDDDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xBEDAF8", Offset = "0xBEDAF8", VA = "0xBEDAF8")]
		[DebuggerHidden]
		public <TypeSentence>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xBEDB34", Offset = "0xBEDB34", VA = "0xBEDB34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xBEDB38", Offset = "0xBEDB38", VA = "0xBEDB38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xBEDD9C", Offset = "0xBEDD9C", VA = "0xBEDD9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Event _Tombie_MoodSwitcher;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator _anim;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI _nameText;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI _dialogueText;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Button _advButton;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float _speed;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Queue<string> _sentences;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int _currentCharNumber;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int _isSkip;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string _currentSentence;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private _EmotionalEnum _MOOD_STATE;

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xBED588", Offset = "0xBED588", VA = "0xBED588")]
	private void Start()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xBED7C4", Offset = "0xBED7C4", VA = "0xBED7C4")]
	public void StartDialogue(ZNDialogue dialogue)
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xBED614", Offset = "0xBED614", VA = "0xBED614")]
	public void CheckEmotion()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xBED8DC", Offset = "0xBED8DC", VA = "0xBED8DC")]
	public void DisplayNextSentence()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xBEDA84", Offset = "0xBEDA84", VA = "0xBEDA84")]
	[IteratorStateMachine(typeof(<TypeSentence>d__16))]
	private IEnumerator TypeSentence(string sentence)
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xBED9C0", Offset = "0xBED9C0", VA = "0xBED9C0")]
	private void FinishSentence(string sentence)
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xBEDA24", Offset = "0xBEDA24", VA = "0xBEDA24")]
	private void EndDialogue()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xBEDB20", Offset = "0xBEDB20", VA = "0xBEDB20")]
	public ZNDialogueManager()
	{
	}
}
[Token(Token = "0x20000FF")]
public class ZNDialogueTrigger : MonoBehaviour
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ZNDialogue dialogue;

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xBEDDE4", Offset = "0xBEDDE4", VA = "0xBEDDE4")]
	public void StartDialogue()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xBEDE5C", Offset = "0xBEDE5C", VA = "0xBEDE5C")]
	public void DisplayNextSentence()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xBEDECC", Offset = "0xBEDECC", VA = "0xBEDECC")]
	private void Update()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xBEDF0C", Offset = "0xBEDF0C", VA = "0xBEDF0C")]
	public ZNDialogueTrigger()
	{
	}
}
[Token(Token = "0x2000100")]
public class ZNCeilingFan : MonoBehaviour
{
	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("Ceiling fan hum SFX")]
	protected Event CeilingFanHumSFX;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("Ceiling fan spin SFX")]
	protected Event CeilingFanSpinSFX;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected List<Collider> BoxColliders;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool bFanCollision;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xBEDF14", Offset = "0xBEDF14", VA = "0xBEDF14")]
	private void Start()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xBEE26C", Offset = "0xBEE26C", VA = "0xBEE26C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xBEE1DC", Offset = "0xBEE1DC", VA = "0xBEE1DC")]
	protected void ReevaluateCollisionLayers()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xBEE378", Offset = "0xBEE378", VA = "0xBEE378")]
	protected void ChangeCollisionLayers(int InLayer)
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xBEE47C", Offset = "0xBEE47C", VA = "0xBEE47C")]
	private void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xBEE480", Offset = "0xBEE480", VA = "0xBEE480")]
	public ZNCeilingFan()
	{
	}
}
[Token(Token = "0x2000101")]
public class ZNRoomFurniture : MonoBehaviour
{
	[Token(Token = "0x6000642")]
	[Address(RVA = "0xBEE4FC", Offset = "0xBEE4FC", VA = "0xBEE4FC")]
	public ZNRoomFurniture()
	{
	}
}
[Token(Token = "0x2000102")]
public class ZNPauseManager : MonoBehaviour
{
	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The options selector")]
	[SerializeField]
	protected ZNGrabObjectBase OptionsSelector;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The pause VFX")]
	[SerializeField]
	protected GameObject PauseVFX;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected SAGameMode GameModeRef;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected GameObject SpawnedVFX;

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xBEE504", Offset = "0xBEE504", VA = "0xBEE504")]
	private void Start()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xBEE720", Offset = "0xBEE720", VA = "0xBEE720")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xBEE824", Offset = "0xBEE824", VA = "0xBEE824")]
	protected void UnPaused()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xBEE94C", Offset = "0xBEE94C", VA = "0xBEE94C")]
	public ZNPauseManager()
	{
	}
}
[Token(Token = "0x2000103")]
[CreateAssetMenu(fileName = "ZNReferenceAsset", menuName = "Scriptable Objects/Game/Reference/ZNReferenceAsset")]
public class ZNReferenceAsset : SAReferenceAsset
{
	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Prefabs")]
	[Tooltip("The widget for the shop item info that goes above weapons")]
	[SerializeField]
	protected GameObject PF_ShopItemInfoWidget;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The grab object marker notifier component that goes on all grab objects")]
	[SerializeField]
	protected GameObject PF_GrabObjectMarkerNotifierComponent;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The enemy info widget that spawns with all enemies")]
	[SerializeField]
	protected GameObject PF_EnemyInfoWidget;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Damage")]
	[Tooltip("The difficulty damage multiplier")]
	[SerializeField]
	protected SerializableDictionary<EZNDifficulties, double> DifficultyDamageMultiplier;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Leveling")]
	[Tooltip("The enemy info widget that spawns with all enemies")]
	[SerializeField]
	protected ZNLevelingAlgorithmAsset LevelingAlgorithmAsset;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Badges")]
	[Tooltip("This is the list of badges that can be equipped")]
	[SerializeField]
	protected ZNBadgeCollectionAsset BadgeCollection;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Tooltip("This is the list of badges that can be equipped when in development mode")]
	protected ZNBadgeCollectionAsset DevelopmentBadgeCollection;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("VFX")]
	[Tooltip("The enemy death VFX initialization info ")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo EnemyDeathVFXInitializationInfo;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("The prefab for the speed buff VFX")]
	[SerializeField]
	protected GameObject PF_SpeedBuffVFX;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Tooltip("The prefab for the speed debuff VFX")]
	[SerializeField]
	protected GameObject PF_SpeedDebuffVFX;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Tooltip("The prefab for the damage buff VFX")]
	[SerializeField]
	protected GameObject PF_DamageBuffVFX;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Tooltip("The prefab for the damage debuff VFX")]
	[SerializeField]
	protected GameObject PF_DamageDebuffVFX;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Tooltip("The prefab for the defense buff VFX")]
	[SerializeField]
	protected GameObject PF_DefenseBuffVFX;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	[Tooltip("The prefab for the defense debuff VFX")]
	protected GameObject PF_DefenseDebuffVFX;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	[Header("SFX")]
	[Tooltip("RPTC for UI volume")]
	protected RTPC UIVolumeRTPC;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Tooltip("RPTC for enemy volume")]
	[SerializeField]
	protected RTPC EnemyVolumeRTPC;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Tooltip("RPTC for weapon volume")]
	[SerializeField]
	protected RTPC WeaponVolumeRTPC;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Tooltip("The default SFX to play when grabbing objects")]
	[SerializeField]
	protected Event DefaultGrabSFX;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Tooltip("The default SFX to play when dropping objects")]
	[SerializeField]
	protected Event DefaultDropSFX;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Tooltip("The SFX to play when energy is depleted")]
	[SerializeField]
	protected Event EnergyDepletedSFX;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	[Tooltip("The SFX to play when an error occurs")]
	protected Event ErrorSFX;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Tooltip("RPTC for when an object is grabbed")]
	[SerializeField]
	protected RTPC ObjectGrabbedRTPC;

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xBEE954", Offset = "0xBEE954", VA = "0xBEE954")]
	public GameObject GetPF_ShopItemInfoWidget()
	{
		return null;
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xBEE95C", Offset = "0xBEE95C", VA = "0xBEE95C")]
	public GameObject GetPF_GrabObjectMarkerNotifierComponent()
	{
		return null;
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xBEE964", Offset = "0xBEE964", VA = "0xBEE964")]
	public GameObject GetPF_EnemyInfoWidget()
	{
		return null;
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xBEE96C", Offset = "0xBEE96C", VA = "0xBEE96C")]
	public double GetDamageMultiplierForDifficulty(EZNDifficulties InDifficulty)
	{
		return default(double);
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xBEEA00", Offset = "0xBEEA00", VA = "0xBEEA00")]
	public ZNLevelingAlgorithmAsset GetLevelingAlgorithmAsset()
	{
		return null;
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xBEEA08", Offset = "0xBEEA08", VA = "0xBEEA08")]
	public List<ZNBadgeAssetBase> GetEquippableBadges()
	{
		return null;
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xBE91BC", Offset = "0xBE91BC", VA = "0xBE91BC")]
	public ZNBadgeCollectionAsset GetBadgeCollectionAsset()
	{
		return null;
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xBEEB08", Offset = "0xBEEB08", VA = "0xBEEB08")]
	public FSAPooledObjectInitializationInfo GetEnemyDeathVFXInitializationInfo()
	{
		return null;
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xBEEB10", Offset = "0xBEEB10", VA = "0xBEEB10")]
	public GameObject GetVFXPrefabForProperty(string InProperty)
	{
		return null;
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xBEEC70", Offset = "0xBEEC70", VA = "0xBEEC70")]
	public RTPC GetUIVolumeRTPC()
	{
		return null;
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xBEEC78", Offset = "0xBEEC78", VA = "0xBEEC78")]
	public RTPC GetEnemyVolumeRTPC()
	{
		return null;
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xBEEC80", Offset = "0xBEEC80", VA = "0xBEEC80")]
	public RTPC GetWeaponVolumeRTPC()
	{
		return null;
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xBEEC88", Offset = "0xBEEC88", VA = "0xBEEC88")]
	public Event GetDefaultGrabSFX()
	{
		return null;
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xBEEC90", Offset = "0xBEEC90", VA = "0xBEEC90")]
	public Event GetDefaultDropSFX()
	{
		return null;
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xBEEC98", Offset = "0xBEEC98", VA = "0xBEEC98")]
	public Event GetEnergyDepletedSFX()
	{
		return null;
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xBEECA0", Offset = "0xBEECA0", VA = "0xBEECA0")]
	public Event GetErrorSFX()
	{
		return null;
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xBEECA8", Offset = "0xBEECA8", VA = "0xBEECA8")]
	public RTPC GetObjectGrabbedRTPC()
	{
		return null;
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xBEECB0", Offset = "0xBEECB0", VA = "0xBEECB0")]
	public ZNReferenceAsset()
	{
	}
}
[Token(Token = "0x2000104")]
public class ZNReferenceManager : SAReferenceManager
{
	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNReferenceAsset ReferenceAssetAsZNReferenceAsset;

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xBEECB8", Offset = "0xBEECB8", VA = "0xBEECB8", Slot = "4")]
	public override bool InitializeInstance(SAReferenceAsset InReferenceAsset, bool bForceInitialize = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xBEEDA0", Offset = "0xBEEDA0", VA = "0xBEEDA0")]
	public static ZNReferenceManager GetZNReferenceManager()
	{
		return null;
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xBE91A4", Offset = "0xBE91A4", VA = "0xBE91A4")]
	public static ZNReferenceAsset GetZNReferenceAsset()
	{
		return null;
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xBEEE34", Offset = "0xBEEE34", VA = "0xBEEE34")]
	public ZNReferenceAsset GetReferenceAssetAsZNReferenceAsset()
	{
		return null;
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xBEEE3C", Offset = "0xBEEE3C", VA = "0xBEEE3C")]
	public ZNReferenceManager()
	{
	}
}
[Token(Token = "0x2000105")]
public class ZNGameInstance : SAGameInstance
{
	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FOnBadgeAssetEquipped OnBadgeAssetEquippedDel;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static FOnBadgeAssetUnequipped OnBadgeAssetUnequippedDel;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnDifficultyChanged OnDifficultyChangedDel;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static Dictionary<int, ZNBadgeAssetBase> EquippedBadges;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected static ZNCaseFileAsset SelectedCaseFileAsset;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected EZNDifficulties SelectedDifficulty;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Dictionary<ZNWeaponAsset, int> WeaponTutorialsShownCounter;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected static Dictionary<string, string> EquippedWeaponSkins;

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xBEEE44", Offset = "0xBEEE44", VA = "0xBEEE44", Slot = "4")]
	public override bool InitializeInstance(bool bForceInitialize = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xBEEE74", Offset = "0xBEEE74", VA = "0xBEEE74")]
	protected void LoadSavedBadges()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xBEF2A4", Offset = "0xBEF2A4", VA = "0xBEF2A4")]
	protected void LoadEquippedWeaponSkins()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xBEF584", Offset = "0xBEF584", VA = "0xBEF584")]
	public static bool EquipBadge(int InBadgeIndex, ZNBadgeAssetBase InBadgeAsset, bool bSave = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xBEF874", Offset = "0xBEF874", VA = "0xBEF874")]
	public static bool UnequipBadge(ZNBadgeAssetBase InBadgeAsset, bool bSave = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xBEFB14", Offset = "0xBEFB14", VA = "0xBEFB14")]
	public static void UnequipAllBadges()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xBEFE90", Offset = "0xBEFE90", VA = "0xBEFE90")]
	public static void SetSelectedCaseFileAsset(ZNCaseFileAsset InCaseFileAsset)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xBEFEEC", Offset = "0xBEFEEC", VA = "0xBEFEEC")]
	public void IncrementWeaponTutorialsShownCounter(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xBF0018", Offset = "0xBF0018", VA = "0xBF0018")]
	public void SetSelectedDifficulty(EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xBF0038", Offset = "0xBF0038", VA = "0xBF0038")]
	public static void SetSelectedDifficultyStatic(EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xBEF740", Offset = "0xBEF740", VA = "0xBEF740")]
	public static bool EquipWeaponSkin(string InWeaponKey, string InSkinKey, bool bSave = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xBF014C", Offset = "0xBF014C", VA = "0xBF014C")]
	public static bool UnequipWeaponSkin(string InWeaponKey, string InSkinKey, bool bSave = true)
	{
		return default(bool);
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xBF02C4", Offset = "0xBF02C4", VA = "0xBF02C4")]
	public void ClearEquippedBadges()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xBF033C", Offset = "0xBF033C", VA = "0xBF033C")]
	public void ClearEquippedWeaponSkins()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xBF00B8", Offset = "0xBF00B8", VA = "0xBF00B8")]
	public static ZNGameInstance GetZNGameInstance()
	{
		return null;
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xBF03B4", Offset = "0xBF03B4", VA = "0xBF03B4")]
	public static ZNBadgeAssetBase GetBadgeAtIndex(int InIndex)
	{
		return null;
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xBF0488", Offset = "0xBF0488", VA = "0xBF0488")]
	public static List<ZNBadgeAssetBase> GetEquippedBadgesAsList()
	{
		return null;
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xBF0708", Offset = "0xBF0708", VA = "0xBF0708")]
	public static int GetFirstEmptyBadgeIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xBF07A4", Offset = "0xBF07A4", VA = "0xBF07A4")]
	public static bool IsBadgeEquipped(ZNBadgeAssetBase InBadgeAsset)
	{
		return default(bool);
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xBF099C", Offset = "0xBF099C", VA = "0xBF099C")]
	public static ZNCaseFileAsset GetSelectedCaseFileAsset()
	{
		return null;
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xBF09F4", Offset = "0xBF09F4", VA = "0xBF09F4")]
	public EZNDifficulties GetSelectedDifficulty()
	{
		return default(EZNDifficulties);
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xBE61DC", Offset = "0xBE61DC", VA = "0xBE61DC")]
	public static EZNDifficulties GetSelectedDifficultyStatic()
	{
		return default(EZNDifficulties);
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xBF09FC", Offset = "0xBF09FC", VA = "0xBF09FC")]
	public int GetWeaponTutorialsShownCounter(ZNWeaponAsset InWeaponAsset)
	{
		return default(int);
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xBF0AD4", Offset = "0xBF0AD4", VA = "0xBF0AD4", Slot = "5")]
	public override string GetOculusAppID()
	{
		return null;
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xBF0B14", Offset = "0xBF0B14", VA = "0xBF0B14")]
	public static string GetEquippedWeaponSkin(string InWeaponKey)
	{
		return null;
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xBF0BFC", Offset = "0xBF0BFC", VA = "0xBF0BFC")]
	public static bool IsWeaponSkinAssetEquipped(string InWeaponKey, string InSkinKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xBF0CEC", Offset = "0xBF0CEC", VA = "0xBF0CEC")]
	public ZNGameInstance()
	{
	}
}
[Token(Token = "0x2000106")]
public class ZNGameModeBase : SAGameMode
{
	[Token(Token = "0x2000107")]
	[CompilerGenerated]
	private sealed class <GiveDefaultModsAfterOneFrame>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGameModeBase <>4__this;

		[Token(Token = "0x17000046")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0xBF1E38", Offset = "0xBF1E38", VA = "0xBF1E38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0xBF1E80", Offset = "0xBF1E80", VA = "0xBF1E80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xBF18FC", Offset = "0xBF18FC", VA = "0xBF18FC")]
		[DebuggerHidden]
		public <GiveDefaultModsAfterOneFrame>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xBF1D98", Offset = "0xBF1D98", VA = "0xBF1D98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xBF1D9C", Offset = "0xBF1D9C", VA = "0xBF1D9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xBF1E40", Offset = "0xBF1E40", VA = "0xBF1E40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FOnNavigableAddedToGameMode OnNavigableAddedToGameModeDel;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FOnNavigableRemovedFromGameMode OnNavigableRemovedFromGameModeDel;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public FOnNavigationRecalculationRequested OnNavigationRecalculationRequestedDel;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("Event to play music")]
	[SerializeField]
	protected Event PlayMusicEvent;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("Event to stop music")]
	[SerializeField]
	protected Event StopMusicEvent;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("Event to stop all sounds")]
	[SerializeField]
	protected Event StopAllSoundsEvent;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("Event to stop all sounds")]
	[SerializeField]
	protected RTPC PausedRTPC;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("A list of weapons that the player gets")]
	[SerializeField]
	protected List<ZNWeaponAsset> DefaultWeapons;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Tooltip("A list of mod assets that the player gets at all times")]
	protected List<SAModAsset> DefaultModAssets;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The object that spawns in the middle item socket")]
	[SerializeField]
	protected GameObject PF_StartingMiddleItemSocketObject;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected List<ZNMainCharacter> PlayerCharacters;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected List<IZNDamageable> Damageables;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected List<IZNNavigable> NavigableTargets;

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xBF0E48", Offset = "0xBF0E48", VA = "0xBF0E48", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xBF0F74", Offset = "0xBF0F74", VA = "0xBF0F74", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xBF14B0", Offset = "0xBF14B0", VA = "0xBF14B0", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xBF1518", Offset = "0xBF1518", VA = "0xBF1518", Slot = "14")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xBF151C", Offset = "0xBF151C", VA = "0xBF151C", Slot = "8")]
	protected override void ReapplyWwiseAudioSettings()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xBF1038", Offset = "0xBF1038", VA = "0xBF1038")]
	protected void DestroyPassthroughLayers()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xBF16D4", Offset = "0xBF16D4", VA = "0xBF16D4")]
	public void AddDamageable(IZNDamageable InDamageable)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xBF172C", Offset = "0xBF172C", VA = "0xBF172C")]
	public void RemoveDamageable(IZNDamageable InDamageable)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xBF1784", Offset = "0xBF1784", VA = "0xBF1784")]
	public void AddNavigableTarget(IZNNavigable InNavigable)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xBF1808", Offset = "0xBF1808", VA = "0xBF1808")]
	public void RemoveNavigableTarget(IZNNavigable InNavigable)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xBF1888", Offset = "0xBF1888", VA = "0xBF1888")]
	public void RequestNavigationRecalculation()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xBF18A4", Offset = "0xBF18A4", VA = "0xBF18A4", Slot = "10")]
	protected override void Paused()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xBF18D0", Offset = "0xBF18D0", VA = "0xBF18D0", Slot = "11")]
	protected override void UnPaused()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xBF1198", Offset = "0xBF1198", VA = "0xBF1198")]
	protected void GiveDefaultWeapons()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xBF1448", Offset = "0xBF1448", VA = "0xBF1448")]
	[IteratorStateMachine(typeof(<GiveDefaultModsAfterOneFrame>d__27))]
	protected IEnumerator GiveDefaultModsAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xBF1924", Offset = "0xBF1924", VA = "0xBF1924")]
	protected void GiveDefaultMods()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xBF1BA4", Offset = "0xBF1BA4", VA = "0xBF1BA4")]
	public static ZNGameModeBase GetZNGameModeBase()
	{
		return null;
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xBF1C84", Offset = "0xBF1C84", VA = "0xBF1C84")]
	public List<IZNDamageable> GetDamageableTargets()
	{
		return null;
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xBF1C8C", Offset = "0xBF1C8C", VA = "0xBF1C8C")]
	public List<IZNNavigable> GetNavigableTargets()
	{
		return null;
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xBE4D28", Offset = "0xBE4D28", VA = "0xBE4D28")]
	public List<ZNEnemyBase> GetEnemies()
	{
		return null;
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xBF1C94", Offset = "0xBF1C94", VA = "0xBF1C94")]
	public ZNGameModeBase()
	{
	}
}
[Token(Token = "0x2000108")]
public class ZNGameplayGameMode : ZNGameModeBase
{
	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <CalculateRoomSpace>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGameplayGameMode <>4__this;

		[Token(Token = "0x17000048")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0xBF5544", Offset = "0xBF5544", VA = "0xBF5544", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xBF558C", Offset = "0xBF558C", VA = "0xBF558C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xBF2CA8", Offset = "0xBF2CA8", VA = "0xBF2CA8")]
		[DebuggerHidden]
		public <CalculateRoomSpace>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xBF5434", Offset = "0xBF5434", VA = "0xBF5434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xBF5438", Offset = "0xBF5438", VA = "0xBF5438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xBF554C", Offset = "0xBF554C", VA = "0xBF554C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010B")]
	[CompilerGenerated]
	private sealed class <RebuildNavMeshAfterDelay>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGameplayGameMode <>4__this;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006CF")]
			[Address(RVA = "0xBF56AC", Offset = "0xBF56AC", VA = "0xBF56AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D1")]
			[Address(RVA = "0xBF56F4", Offset = "0xBF56F4", VA = "0xBF56F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xBF4288", Offset = "0xBF4288", VA = "0xBF4288")]
		[DebuggerHidden]
		public <RebuildNavMeshAfterDelay>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xBF5608", Offset = "0xBF5608", VA = "0xBF5608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xBF560C", Offset = "0xBF560C", VA = "0xBF560C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xBF56B4", Offset = "0xBF56B4", VA = "0xBF56B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010C")]
	[CompilerGenerated]
	private sealed class <ContinueEndSetupAfterOneFrame>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGameplayGameMode <>4__this;

		[Token(Token = "0x1700004C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006D5")]
			[Address(RVA = "0xBF57AC", Offset = "0xBF57AC", VA = "0xBF57AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D7")]
			[Address(RVA = "0xBF57F4", Offset = "0xBF57F4", VA = "0xBF57F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xBF43B4", Offset = "0xBF43B4", VA = "0xBF43B4")]
		[DebuggerHidden]
		public <ContinueEndSetupAfterOneFrame>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xBF56FC", Offset = "0xBF56FC", VA = "0xBF56FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xBF5700", Offset = "0xBF5700", VA = "0xBF5700", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xBF57B4", Offset = "0xBF57B4", VA = "0xBF57B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010D")]
	[CompilerGenerated]
	private sealed class <LoadMainMenuAfterDelay>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DelayTime;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNGameplayGameMode <>4__this;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006DB")]
			[Address(RVA = "0xBF58AC", Offset = "0xBF58AC", VA = "0xBF58AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006DD")]
			[Address(RVA = "0xBF58F4", Offset = "0xBF58F4", VA = "0xBF58F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xBF49EC", Offset = "0xBF49EC", VA = "0xBF49EC")]
		[DebuggerHidden]
		public <LoadMainMenuAfterDelay>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xBF57FC", Offset = "0xBF57FC", VA = "0xBF57FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xBF5800", Offset = "0xBF5800", VA = "0xBF5800", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xBF58B4", Offset = "0xBF58B4", VA = "0xBF58B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected NavMeshSurface MainNavMesh;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected ZNSetupManager SetupManager;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public FOnDamageEvent OnDamageEventDel;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public FOnSimultaneousDamageEvent OnSimultaneousDamageEventDel;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public FOnRoomSizeDetermined OnRoomSizeDetermined;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public FOnGamePhaseChanged OnGamePhaseChangedDel;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("Game")]
	[Tooltip("The case file asset to use if we didn't have one on the game instance")]
	[SerializeField]
	protected ZNCaseFileAsset DefaultCaseFileAsset;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Tooltip("The prefab for the level that we make in VR mode")]
	protected GameObject PF_VirtualRealityLevel;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Tooltip("A list of weapons that the player gets for the setup phase")]
	[SerializeField]
	protected List<ZNWeaponAsset> SetupWeapons;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[Tooltip("A list of mod assets that the player gets for the setup phase")]
	protected List<SAModAsset> SetupModAssets;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[Header("Pause")]
	[Tooltip("The pause system location")]
	[SerializeField]
	protected Transform PauseSystemLocation;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Tooltip("The prefab to spawn in front of the player when they pause")]
	[SerializeField]
	protected GameObject PF_PauseSystem;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	[Tooltip("How far in front of the player to spawn the pause system")]
	protected float PauseSystemSpawnForwardDistance;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[Tooltip("How far vertically to spawn the pause system, from the player's midpoint")]
	[SerializeField]
	protected float PauseSystemSpawnVerticalDistance;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Header("Music")]
	[SerializeField]
	[Tooltip("Music for the setup phase")]
	protected State SetupPhaseMusicState;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Tooltip("The music that plays during a regular wave")]
	[SerializeField]
	protected State NormalWavePhaseMusicState;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	[Header("Room Size & PiP")]
	[Tooltip("The room size varied info for different room sizes. The key value is the room size.")]
	protected SerializableDictionary<EZNRoomSizes, FZNRoomSizeVariedInfo> RoomSizeToVariedInfo;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Tooltip("Material for Test Sphere Inside Room")]
	[SerializeField]
	private Material InsideMat;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[Tooltip("Material for Test Sphere Inside Room AND inside the boundary")]
	[SerializeField]
	private Material InsideBoundaryMat;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[Tooltip("Material for Test Sphere Outside Room")]
	[SerializeField]
	protected Material OutsideMat;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Tooltip("Test Sphere Visual Prefab")]
	[SerializeField]
	protected GameObject SphereVisualPrefab;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[Tooltip("How long in seconds we delay before we look for the walls to calculate the room space. Important to be 4s+ right now due to hacky math for room building on built version.")]
	[SerializeField]
	protected float DelayBeforeLookForWallsTime;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	[Tooltip("Spawn Point in Polygon Test Spheres")]
	[SerializeField]
	protected bool bDoTestPointsSpawn;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[Header("Debug")]
	[SerializeField]
	[Tooltip("Prefab for enemy spawners used for the debug command")]
	protected GameObject PF_DebugEnemySpawner;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	protected ZNCaseFileAsset CaseFileAsset;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	protected ZNGamePhases GamePhase;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	protected EZNRoomSizes RoomSize;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	protected GameObject PauseSystem;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	protected List<FZNDamageInfo> SimultaneousDamageInfos;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	protected bool bDamageInflictedThisFrame;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	protected List<Vector3> WallPoints;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	protected List<Vector3> BoundaryPoints;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	protected bool bBoundaryConfigured;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	protected List<GameObject> TestPointSpheres;

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xBF1E88", Offset = "0xBF1E88", VA = "0xBF1E88", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xBF230C", Offset = "0xBF230C", VA = "0xBF230C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xBF26AC", Offset = "0xBF26AC", VA = "0xBF26AC", Slot = "14")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xBF2B14", Offset = "0xBF2B14", VA = "0xBF2B14", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xBF2154", Offset = "0xBF2154", VA = "0xBF2154")]
	protected void InitializeTestPointSpheres()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xBF2644", Offset = "0xBF2644", VA = "0xBF2644")]
	[IteratorStateMachine(typeof(<CalculateRoomSpace>d__5))]
	protected IEnumerator CalculateRoomSpace()
	{
		return null;
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xBF2CD0", Offset = "0xBF2CD0", VA = "0xBF2CD0", Slot = "15")]
	protected virtual FZNRoomSizeVariedInfo DetermineRoomSize()
	{
		return default(FZNRoomSizeVariedInfo);
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xBF2408", Offset = "0xBF2408", VA = "0xBF2408")]
	protected void CreateLevel()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xBF3088", Offset = "0xBF3088", VA = "0xBF3088", Slot = "16")]
	protected virtual void BeginSetup()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xBF3BF4", Offset = "0xBF3BF4", VA = "0xBF3BF4", Slot = "17")]
	protected virtual void EndSetup()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xBF3C48", Offset = "0xBF3C48", VA = "0xBF3C48")]
	[IteratorStateMachine(typeof(<RebuildNavMeshAfterDelay>d__44))]
	protected IEnumerator RebuildNavMeshAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xBF42B0", Offset = "0xBF42B0", VA = "0xBF42B0")]
	public void RebuildNavMesh()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xBF434C", Offset = "0xBF434C", VA = "0xBF434C", Slot = "18")]
	[IteratorStateMachine(typeof(<ContinueEndSetupAfterOneFrame>d__46))]
	protected virtual IEnumerator ContinueEndSetupAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xBF30C8", Offset = "0xBF30C8", VA = "0xBF30C8")]
	protected void InitializeActivities()
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xBF3324", Offset = "0xBF3324", VA = "0xBF3324")]
	protected void InitializeWaveAltercations()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xBF361C", Offset = "0xBF361C", VA = "0xBF361C")]
	protected void GiveSetupWeapons()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xBF38CC", Offset = "0xBF38CC", VA = "0xBF38CC")]
	protected void GiveSetupMods()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xBF3CB0", Offset = "0xBF3CB0", VA = "0xBF3CB0")]
	protected void RemoveSetupWeapons()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xBF3F60", Offset = "0xBF3F60", VA = "0xBF3F60")]
	protected void RemoveSetupMods()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xBF43DC", Offset = "0xBF43DC", VA = "0xBF43DC", Slot = "9")]
	protected override void InternalPause(bool bNewPaused)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xBF46A0", Offset = "0xBF46A0", VA = "0xBF46A0")]
	public void RegisterDamageInfo(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xBF26BC", Offset = "0xBF26BC", VA = "0xBF26BC")]
	protected void HandleSimultaneousDamage()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xBF47E8", Offset = "0xBF47E8", VA = "0xBF47E8", Slot = "19")]
	protected virtual void ChangePhase(ZNGamePhases NewGamePhase)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xBF4924", Offset = "0xBF4924", VA = "0xBF4924", Slot = "20")]
	public virtual void QuitAndReturnToMainMenu()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xBF4974", Offset = "0xBF4974", VA = "0xBF4974")]
	[IteratorStateMachine(typeof(<LoadMainMenuAfterDelay>d__58))]
	protected IEnumerator LoadMainMenuAfterDelay(float DelayTime)
	{
		return null;
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xBF4928", Offset = "0xBF4928", VA = "0xBF4928")]
	protected void LoadMainMenu()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xBF4A14", Offset = "0xBF4A14", VA = "0xBF4A14")]
	private void DetermineBoundaryPoints()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xBF4D44", Offset = "0xBF4D44", VA = "0xBF4D44")]
	private void DetermineWallPoints()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xBF4F60", Offset = "0xBF4F60", VA = "0xBF4F60")]
	private void PaintPiPTestPoints()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xBF51E4", Offset = "0xBF51E4", VA = "0xBF51E4")]
	public bool IsPointInRoom(Vector3 CheckPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xBE6780", Offset = "0xBE6780", VA = "0xBE6780")]
	public bool IsPointInFalseVolume(Vector3 CheckPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xBF51F0", Offset = "0xBF51F0", VA = "0xBF51F0")]
	public bool IsPointInBoundary(Vector3 CheckPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xBF51FC", Offset = "0xBF51FC", VA = "0xBF51FC")]
	public bool IsBoundaryConfigured()
	{
		return default(bool);
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xBF307C", Offset = "0xBF307C", VA = "0xBF307C")]
	public float GetRoomArea()
	{
		return default(float);
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xBF5204", Offset = "0xBF5204", VA = "0xBF5204")]
	protected void SetupEnded()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xBF5214", Offset = "0xBF5214", VA = "0xBF5214")]
	protected void HeadsetFocusLost()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xBE9B0C", Offset = "0xBE9B0C", VA = "0xBE9B0C")]
	public static ZNGameplayGameMode GetZNGameplayGameMode()
	{
		return null;
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xBF5240", Offset = "0xBF5240", VA = "0xBF5240")]
	public NavMeshSurface GetMainNavMesh()
	{
		return null;
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xBF5248", Offset = "0xBF5248", VA = "0xBF5248")]
	public ZNSetupManager GetSetupManager()
	{
		return null;
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xBF5250", Offset = "0xBF5250", VA = "0xBF5250")]
	public List<ZNMainCharacter> GetPlayerCharacters()
	{
		return null;
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xBF5258", Offset = "0xBF5258", VA = "0xBF5258")]
	public ZNMainCharacter GetFirstPlayerCharacter()
	{
		return null;
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xBF52E4", Offset = "0xBF52E4", VA = "0xBF52E4")]
	public ZNCaseFileAsset GetCaseFileAsset()
	{
		return null;
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xBF52EC", Offset = "0xBF52EC", VA = "0xBF52EC")]
	public ZNGamePhases GetGamePhase()
	{
		return default(ZNGamePhases);
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xBF52F4", Offset = "0xBF52F4", VA = "0xBF52F4")]
	public EZNRoomSizes GetRoomSize()
	{
		return default(EZNRoomSizes);
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xBF20E4", Offset = "0xBF20E4", VA = "0xBF20E4")]
	public bool DoTestPointsSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xBF52FC", Offset = "0xBF52FC", VA = "0xBF52FC")]
	public ZNGameplayGameMode()
	{
	}
}
[Token(Token = "0x200010E")]
public class ZNMainGameMode : ZNGameplayGameMode
{
	[Token(Token = "0x200010F")]
	[CompilerGenerated]
	private sealed class <ContinueEndSetupAfterOneFrame>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x17000050")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000704")]
			[Address(RVA = "0xBFA63C", Offset = "0xBFA63C", VA = "0xBFA63C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000706")]
			[Address(RVA = "0xBFA684", Offset = "0xBFA684", VA = "0xBFA684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xBFA3A4", Offset = "0xBFA3A4", VA = "0xBFA3A4")]
		[DebuggerHidden]
		public <ContinueEndSetupAfterOneFrame>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xBFA3CC", Offset = "0xBFA3CC", VA = "0xBFA3CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xBFA3D0", Offset = "0xBFA3D0", VA = "0xBFA3D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xBFA644", Offset = "0xBFA644", VA = "0xBFA644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000110")]
	[CompilerGenerated]
	private sealed class <ProgressToNextWaveAfterDelay>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeInSeconds;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x17000052")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600070A")]
			[Address(RVA = "0xBFA774", Offset = "0xBFA774", VA = "0xBFA774", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600070C")]
			[Address(RVA = "0xBFA7BC", Offset = "0xBFA7BC", VA = "0xBFA7BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xBFA68C", Offset = "0xBFA68C", VA = "0xBFA68C")]
		[DebuggerHidden]
		public <ProgressToNextWaveAfterDelay>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xBFA6B4", Offset = "0xBFA6B4", VA = "0xBFA6B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xBFA6B8", Offset = "0xBFA6B8", VA = "0xBFA6B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xBFA77C", Offset = "0xBFA77C", VA = "0xBFA77C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000111")]
	[CompilerGenerated]
	private sealed class <DelayBeforeEndPauseCooldown>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000710")]
			[Address(RVA = "0xBFA8A8", Offset = "0xBFA8A8", VA = "0xBFA8A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000712")]
			[Address(RVA = "0xBFA8F0", Offset = "0xBFA8F0", VA = "0xBFA8F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xBFA7C4", Offset = "0xBFA7C4", VA = "0xBFA7C4")]
		[DebuggerHidden]
		public <DelayBeforeEndPauseCooldown>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xBFA7EC", Offset = "0xBFA7EC", VA = "0xBFA7EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xBFA7F0", Offset = "0xBFA7F0", VA = "0xBFA7F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xBFA8B0", Offset = "0xBFA8B0", VA = "0xBFA8B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000112")]
	[CompilerGenerated]
	private sealed class <DelayThenRemoveConsecutivePauses>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000716")]
			[Address(RVA = "0xBFAA80", Offset = "0xBFAA80", VA = "0xBFAA80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000718")]
			[Address(RVA = "0xBFAAC8", Offset = "0xBFAAC8", VA = "0xBFAAC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xBFA8F8", Offset = "0xBFA8F8", VA = "0xBFA8F8")]
		[DebuggerHidden]
		public <DelayThenRemoveConsecutivePauses>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xBFA920", Offset = "0xBFA920", VA = "0xBFA920", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xBFA924", Offset = "0xBFA924", VA = "0xBFA924", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xBFAA88", Offset = "0xBFAA88", VA = "0xBFAA88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000113")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameToEndGame>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bInSuccess;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0xBFABA0", Offset = "0xBFABA0", VA = "0xBFABA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071E")]
			[Address(RVA = "0xBFABE8", Offset = "0xBFABE8", VA = "0xBFABE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xBFAAD0", Offset = "0xBFAAD0", VA = "0xBFAAD0")]
		[DebuggerHidden]
		public <WaitOneFrameToEndGame>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xBFAAF8", Offset = "0xBFAAF8", VA = "0xBFAAF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xBFAAFC", Offset = "0xBFAAFC", VA = "0xBFAAFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xBFABA8", Offset = "0xBFABA8", VA = "0xBFABA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000114")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameToChangePhase>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainGameMode <>4__this;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNGamePhases InGamePhase;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0xBFACC8", Offset = "0xBFACC8", VA = "0xBFACC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000724")]
			[Address(RVA = "0xBFAD10", Offset = "0xBFAD10", VA = "0xBFAD10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xBFABF0", Offset = "0xBFABF0", VA = "0xBFABF0")]
		[DebuggerHidden]
		public <WaitOneFrameToChangePhase>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xBFAC18", Offset = "0xBFAC18", VA = "0xBFAC18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xBFAC1C", Offset = "0xBFAC1C", VA = "0xBFAC1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xBFACD0", Offset = "0xBFACD0", VA = "0xBFACD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	protected ZNIntermissionManager IntermissionManager;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public FOnGameEnded OnGameEndedDel;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[Header("Main Game Mode")]
	[Tooltip("The objectives that we can have occur")]
	[SerializeField]
	protected ZNObjectiveCollectionAsset ObjectiveCollectionAsset;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	[Tooltip("A list of weapons that the player starts with once the wave phase starts")]
	protected List<ZNWeaponAsset> StartingWeapons;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	[Tooltip("A list of mod assets that the player starts with")]
	protected List<SAModAsset> StartingModAssets;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[Tooltip("Amount of Noir Coins the player should start with")]
	[SerializeField]
	protected int StartingNoirCoins;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	[Tooltip("A list of mod assets that the player gets when the game has ended")]
	protected List<SAModAsset> EndModAssets;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[Tooltip("The distance we have to be from where we paused to be able to unpause")]
	[SerializeField]
	protected float UnPauseDistance;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[Tooltip("The message prompt we display to users if we try to unpause but are too far away from the original pause location")]
	[SerializeField]
	protected ZNMessagePromptAsset UnPauseDistanceTooFarAwayPrompt;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[Tooltip("The time in seconds before being able to pause again")]
	[SerializeField]
	protected float PauseCooldown;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[Tooltip("The message prompt we display to users if pause is on cooldown right now")]
	[SerializeField]
	protected ZNMessagePromptAsset PauseOnCooldownMessagePrompt;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[SerializeField]
	[Tooltip("The time in seconds before we remove the pause points reduction counter")]
	protected float ConsecutivePausePointReductionCooldown;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	[Tooltip("The number of consecutive pauses until we start reducing points")]
	[SerializeField]
	protected int NumConsecutivePausesToReducePoints;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[Tooltip("The number of consecutive pauses before we display a warning message")]
	[SerializeField]
	protected int NumConsecutivePausesToDisplayMessage;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	[Tooltip("The message prompt we display to users if we start pausing a lot")]
	[SerializeField]
	protected ZNMessagePromptAsset ConsecutivePausePointLossMessagePrompt;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	[Tooltip("The time in seconds that the intermission lasts")]
	[SerializeField]
	protected float IntermissionTime;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	[SerializeField]
	[Tooltip("The time in seconds that it takes to go back to the main menu after the game ends")]
	protected float EndGameToMainMenuTime;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[Tooltip("How much health is recovered when we reach the intermission")]
	[SerializeField]
	protected int HealthRecoveredDuringIntermission;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Tooltip("The tutorial video clip to show during the setup phase")]
	[SerializeField]
	protected VideoClip SetupPhaseTutorialVideoClip;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[Tooltip("If this is tutorial mode")]
	[SerializeField]
	protected bool bTutorialMode;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[Tooltip("Music for the boss wave phase")]
	[SerializeField]
	[Header("Music")]
	protected State BossWavePhaseMusicState;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[Tooltip("Music for the final boss wave phase")]
	[SerializeField]
	protected State FinalBossWavePhaseMusicState;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[Tooltip("Music for the intermission phase")]
	[SerializeField]
	protected State IntermissionPhaseMusicState;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	[Tooltip("Music for when you succeed")]
	protected State SuccessEndGamePhaseMusicState;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	[Tooltip("Music for when you fail")]
	protected State FailureEndGamePhaseMusicState;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected bool bGameEnded;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
	protected bool bSucceeded;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
	protected bool bPauseOnCooldown;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	protected Vector3 PauseLocation;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	protected int NumConsecutivePauses;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	protected Coroutine PausePointReductionCooldownCoroutine;

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xBF58FC", Offset = "0xBF58FC", VA = "0xBF58FC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xBF5CD0", Offset = "0xBF5CD0", VA = "0xBF5CD0", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xBF5DFC", Offset = "0xBF5DFC", VA = "0xBF5DFC", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xBF6188", Offset = "0xBF6188", VA = "0xBF6188", Slot = "14")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xBF6198", Offset = "0xBF6198", VA = "0xBF6198", Slot = "15")]
	protected override FZNRoomSizeVariedInfo DetermineRoomSize()
	{
		return default(FZNRoomSizeVariedInfo);
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xBF6234", Offset = "0xBF6234", VA = "0xBF6234", Slot = "18")]
	[IteratorStateMachine(typeof(<ContinueEndSetupAfterOneFrame>d__37))]
	protected override IEnumerator ContinueEndSetupAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xBF629C", Offset = "0xBF629C", VA = "0xBF629C")]
	protected void GiveStartingWeapons()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xBF6768", Offset = "0xBF6768", VA = "0xBF6768")]
	protected void GiveStartingMods()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xBF6C20", Offset = "0xBF6C20", VA = "0xBF6C20")]
	protected void GiveStartingNoirCoins()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xBF6DBC", Offset = "0xBF6DBC", VA = "0xBF6DBC")]
	protected void GiveEndMods()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xBF70E4", Offset = "0xBF70E4", VA = "0xBF70E4")]
	[IteratorStateMachine(typeof(<ProgressToNextWaveAfterDelay>d__42))]
	protected IEnumerator ProgressToNextWaveAfterDelay(float TimeInSeconds)
	{
		return null;
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xBF715C", Offset = "0xBF715C", VA = "0xBF715C", Slot = "19")]
	protected override void ChangePhase(ZNGamePhases NewGamePhase)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xBF758C", Offset = "0xBF758C", VA = "0xBF758C")]
	protected void EndGame(bool bSuccess)
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xBF7C00", Offset = "0xBF7C00", VA = "0xBF7C00")]
	protected void UpdateAndSaveStats(bool bInSucceeded)
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xBF7CF8", Offset = "0xBF7CF8", VA = "0xBF7CF8")]
	protected void SubmitGameResultsAnalytics()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xBF7AD0", Offset = "0xBF7AD0", VA = "0xBF7AD0")]
	protected void CreateEndGameResultsWidget(bool bSuccess, bool bBeatHighScore)
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xBF8748", Offset = "0xBF8748", VA = "0xBF8748", Slot = "20")]
	public override void QuitAndReturnToMainMenu()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xBF87D4", Offset = "0xBF87D4", VA = "0xBF87D4", Slot = "10")]
	protected override void Paused()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xBF8A24", Offset = "0xBF8A24", VA = "0xBF8A24", Slot = "11")]
	protected override void UnPaused()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xBF8B4C", Offset = "0xBF8B4C", VA = "0xBF8B4C", Slot = "12")]
	protected override void ChangePauseFailed(string FailureReason)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xBF8AE4", Offset = "0xBF8AE4", VA = "0xBF8AE4")]
	[IteratorStateMachine(typeof(<DelayBeforeEndPauseCooldown>d__52))]
	protected IEnumerator DelayBeforeEndPauseCooldown()
	{
		return null;
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xBF89BC", Offset = "0xBF89BC", VA = "0xBF89BC")]
	[IteratorStateMachine(typeof(<DelayThenRemoveConsecutivePauses>d__53))]
	protected IEnumerator DelayThenRemoveConsecutivePauses()
	{
		return null;
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xBF8D70", Offset = "0xBF8D70", VA = "0xBF8D70")]
	protected void WaveEnded(int WaveNumber)
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xBF8DC4", Offset = "0xBF8DC4", VA = "0xBF8DC4")]
	[IteratorStateMachine(typeof(<WaitOneFrameToEndGame>d__55))]
	protected IEnumerator WaitOneFrameToEndGame(bool bInSuccess)
	{
		return null;
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xBF8E40", Offset = "0xBF8E40", VA = "0xBF8E40")]
	[IteratorStateMachine(typeof(<WaitOneFrameToChangePhase>d__56))]
	protected IEnumerator WaitOneFrameToChangePhase(ZNGamePhases InGamePhase)
	{
		return null;
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xBF8EB8", Offset = "0xBF8EB8", VA = "0xBF8EB8")]
	protected void IntermissionEnded()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xBF8F48", Offset = "0xBF8F48", VA = "0xBF8F48")]
	protected void MainCharacterDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xBE82E4", Offset = "0xBE82E4", VA = "0xBE82E4")]
	public static ZNMainGameMode GetZNMainGameMode()
	{
		return null;
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xBF8FD4", Offset = "0xBF8FD4", VA = "0xBF8FD4", Slot = "13")]
	public override bool CanChangePauseState(bool bNewPaused, out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xBF92EC", Offset = "0xBF92EC", VA = "0xBF92EC")]
	public ZNWaveManager GetWaveManager()
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xBF92F4", Offset = "0xBF92F4", VA = "0xBF92F4")]
	public ZNIntermissionManager GetIntermissionManager()
	{
		return null;
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xBF92FC", Offset = "0xBF92FC", VA = "0xBF92FC")]
	public bool HasGameEnded()
	{
		return default(bool);
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xBE83C4", Offset = "0xBE83C4", VA = "0xBE83C4")]
	public List<ZNEnemySpawner> GetEnemySpawners()
	{
		return null;
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xBF9304", Offset = "0xBF9304", VA = "0xBF9304")]
	public bool IsTutorialMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xBF930C", Offset = "0xBF930C", VA = "0xBF930C")]
	public ZNMainGameMode()
	{
	}
}
[Token(Token = "0x2000115")]
public class ZNMainMenuGameMode : ZNGameModeBase
{
	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Tooltip("This is the scene to load when we do something that will greatly change the game. Sets us back to the start scene for re-initialization if needed.")]
	[SerializeField]
	protected string StartSceneToLoad;

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xBFAD18", Offset = "0xBFAD18", VA = "0xBFAD18", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xBFAE54", Offset = "0xBFAE54", VA = "0xBFAE54", Slot = "14")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xBFAE5C", Offset = "0xBFAE5C", VA = "0xBFAE5C", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xBFAF64", Offset = "0xBFAF64", VA = "0xBFAF64")]
	public void VirtualRealityModeChanged(EZNVirtualRealityModes NewVirtualRealityMode)
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xBFAF74", Offset = "0xBFAF74", VA = "0xBFAF74")]
	public static ZNMainMenuGameMode GetZNMainMenuGameMode()
	{
		return null;
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xBFB054", Offset = "0xBFB054", VA = "0xBFB054")]
	public ZNMainMenuGameMode()
	{
	}
}
[Token(Token = "0x2000116")]
public class ZNShootingRangeGameMode : ZNGameplayGameMode
{
	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[Header("Shooting Range Game Mode")]
	[Tooltip("The asset to use when spawning Target Dummies")]
	[SerializeField]
	protected ZNEnemyAsset TargetDummyAsset;

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xBFB0A4", Offset = "0xBFB0A4", VA = "0xBFB0A4", Slot = "19")]
	protected override void ChangePhase(ZNGamePhases NewGamePhase)
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xBFB1E8", Offset = "0xBFB1E8", VA = "0xBFB1E8")]
	public void SpawnTargets()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xBFB340", Offset = "0xBFB340", VA = "0xBFB340")]
	public static ZNShootingRangeGameMode GetZNShootingRangeGameMode()
	{
		return null;
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xBFB420", Offset = "0xBFB420", VA = "0xBFB420")]
	public ZNShootingRangeGameMode()
	{
	}
}
[Token(Token = "0x2000117")]
public class ZNStartSceneGameMode : SAGameMode
{
	[Token(Token = "0x2000118")]
	[CompilerGenerated]
	private sealed class <DelayToLoadMainMenuScene>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNStartSceneGameMode <>4__this;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0xBFB5CC", Offset = "0xBFB5CC", VA = "0xBFB5CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000737")]
			[Address(RVA = "0xBFB614", Offset = "0xBFB614", VA = "0xBFB614", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xBFB4B0", Offset = "0xBFB4B0", VA = "0xBFB4B0")]
		[DebuggerHidden]
		public <DelayToLoadMainMenuScene>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xBFB4E0", Offset = "0xBFB4E0", VA = "0xBFB4E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xBFB4E4", Offset = "0xBFB4E4", VA = "0xBFB4E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xBFB5D4", Offset = "0xBFB5D4", VA = "0xBFB5D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The scene to load in mixed reality mode")]
	[SerializeField]
	protected string MixedRealitySceneToLoad;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The scene to load in virtual reality mode")]
	[SerializeField]
	protected string VirtualRealitySceneToLoad;

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xBFB428", Offset = "0xBFB428", VA = "0xBFB428")]
	protected new void Start()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xBFB448", Offset = "0xBFB448", VA = "0xBFB448")]
	[IteratorStateMachine(typeof(<DelayToLoadMainMenuScene>d__1))]
	protected IEnumerator DelayToLoadMainMenuScene()
	{
		return null;
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xBFB4D8", Offset = "0xBFB4D8", VA = "0xBFB4D8")]
	public ZNStartSceneGameMode()
	{
	}
}
[Token(Token = "0x2000119")]
public class ConstrainedOVRGrabbable : ZNOVRGrabbable
{
	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	[Tooltip("Debug option to test with the grabbed state set to true")]
	[SerializeField]
	protected bool bDebugStartWithGrabbedAsTrue;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform _handle;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 OriginalPosition;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Quaternion OriginalRotation;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Rigidbody _handleRB;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool _grabbed;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
	private bool bPositionLocked;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
	private bool bMovingTowardsTarget;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform TargetTransformOrienter;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool bMovingTowardsTargetTransform;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Transform TargetLocalTransform;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector3 TargetLocalPosition;

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xBFB61C", Offset = "0xBFB61C", VA = "0xBFB61C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xBFB738", Offset = "0xBFB738", VA = "0xBFB738")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xBFB8FC", Offset = "0xBFB8FC", VA = "0xBFB8FC")]
	public void ForceMoveTowardsTarget(Transform InTargetTransformOrienter, Transform InTargetLocalTransform)
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xBFB914", Offset = "0xBFB914", VA = "0xBFB914")]
	public void ForceMoveTowardsTarget(Transform InTargetTransformOrienter, Vector3 InTargetLocalPosition)
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xBFB934", Offset = "0xBFB934", VA = "0xBFB934", Slot = "4")]
	public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xBFBAB8", Offset = "0xBFBAB8", VA = "0xBFBAB8", Slot = "5")]
	public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xBFBC70", Offset = "0xBFBC70", VA = "0xBFBC70")]
	public void LockPosition()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xBFBC7C", Offset = "0xBFBC7C", VA = "0xBFBC7C")]
	public void UnlockPosition()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xBFBC84", Offset = "0xBFBC84", VA = "0xBFBC84", Slot = "8")]
	public override bool CanBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xBFBCA4", Offset = "0xBFBCA4", VA = "0xBFBCA4")]
	public ConstrainedOVRGrabbable()
	{
	}
}
[Token(Token = "0x200011A")]
public class ZNObjectReturnPoint : MonoBehaviour
{
	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNObjectReturnPoint <>4__this;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0xBFC2DC", Offset = "0xBFC2DC", VA = "0xBFC2DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000757")]
			[Address(RVA = "0xBFC324", Offset = "0xBFC324", VA = "0xBFC324", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xBFC150", Offset = "0xBFC150", VA = "0xBFC150")]
		[DebuggerHidden]
		public <DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xBFC238", Offset = "0xBFC238", VA = "0xBFC238", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xBFC23C", Offset = "0xBFC23C", VA = "0xBFC23C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xBFC2E4", Offset = "0xBFC2E4", VA = "0xBFC2E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The notifier marker component, responsible for managing the notifier marker.")]
	[SerializeField]
	protected ZNNotifierMarkerComponent NotifierMarkerComponent;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnObjectReturnPointOccupiedStateChanged OnObjectReturnPointOccupiedStateChangedDel;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The return point type. Main is for most return points, temporary is for return points that can be dropped at but don't overwrite the main point.")]
	[SerializeField]
	protected EZNReturnPointTypes ReturnPointType;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("If this is set, this return point and objects under it are destroyed.")]
	[SerializeField]
	protected bool bDevelopmentOnly;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[Tooltip("If this return point allows receiving objects. Objects placed manually in the hierarchy or through other special means will still be able to set this as their parent point.")]
	[SerializeField]
	protected bool bAllowReceivingObjects;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	[SerializeField]
	[Tooltip("If this return point allows changing the occupied object. If false, if the object is set in here, it can't change to another spot; it must also be set specially, like in Start().")]
	protected bool bAllowChangingOccupiedObject;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected SAGameMode GameModeRef;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNGrabObjectBase OccupyingObject;

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xBFBD1C", Offset = "0xBFBD1C", VA = "0xBFBD1C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xBFBDE0", Offset = "0xBFBDE0", VA = "0xBFBDE0", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xBFBEBC", Offset = "0xBFBEBC", VA = "0xBFBEBC", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xBFBEC0", Offset = "0xBFBEC0", VA = "0xBFBEC0")]
	public void UpdateOccupyingObject(ZNGrabObjectBase InOccupyingObject)
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xBFBF84", Offset = "0xBFBF84", VA = "0xBFBF84", Slot = "7")]
	protected virtual void OccupyingObjectUpdated(ZNGrabObjectBase InOccupyingObject)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xBFBF88", Offset = "0xBFBF88", VA = "0xBFBF88")]
	public void ClearOccupyingObject()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xBFBDE8", Offset = "0xBFBDE8", VA = "0xBFBDE8")]
	public void UpdateNotifierMarkerWidgetVisibleBySource(bool bDelayOneFrame = false)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xBFC028", Offset = "0xBFC028", VA = "0xBFC028")]
	[IteratorStateMachine(typeof(<DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__15))]
	private IEnumerator DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource()
	{
		return null;
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xBFC178", Offset = "0xBFC178", VA = "0xBFC178")]
	public EZNReturnPointTypes GetReturnPointType()
	{
		return default(EZNReturnPointTypes);
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xBFC180", Offset = "0xBFC180", VA = "0xBFC180")]
	public bool IsOccupied()
	{
		return default(bool);
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xBFC1E0", Offset = "0xBFC1E0", VA = "0xBFC1E0")]
	public ZNGrabObjectBase GetOccupyingObject()
	{
		return null;
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xBFC1E8", Offset = "0xBFC1E8", VA = "0xBFC1E8", Slot = "8")]
	public virtual bool CanReceiveObjects(FZNReturnPointSwapParameters InReturnPointSwapParameters)
	{
		return default(bool);
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xBFC210", Offset = "0xBFC210", VA = "0xBFC210")]
	public bool DoesAllowChangingOccupyingObject()
	{
		return default(bool);
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xBFC218", Offset = "0xBFC218", VA = "0xBFC218", Slot = "9")]
	public virtual bool AllowObjectToBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xBFC220", Offset = "0xBFC220", VA = "0xBFC220", Slot = "10")]
	public virtual bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xBFC228", Offset = "0xBFC228", VA = "0xBFC228")]
	public ZNObjectReturnPoint()
	{
	}
}
[Token(Token = "0x200011C")]
public class ZNPlayerInventoryReturnPoint : ZNObjectReturnPoint
{
	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The owning inventory manager of this return point")]
	[SerializeField]
	protected ZNInventoryManagerBase OwningInventoryManager;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected EZNInventoryModes InventoryMode;

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xBFC32C", Offset = "0xBFC32C", VA = "0xBFC32C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xBFC4E0", Offset = "0xBFC4E0", VA = "0xBFC4E0", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xBFC674", Offset = "0xBFC674", VA = "0xBFC674")]
	protected void Paused()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xBFC67C", Offset = "0xBFC67C", VA = "0xBFC67C")]
	protected void UnPaused()
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xBFC684", Offset = "0xBFC684", VA = "0xBFC684")]
	public ZNInventoryManagerBase GetInventoryManager()
	{
		return null;
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xBFC68C", Offset = "0xBFC68C", VA = "0xBFC68C", Slot = "8")]
	public override bool CanReceiveObjects(FZNReturnPointSwapParameters InReturnPointSwapParameters)
	{
		return default(bool);
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xBFC748", Offset = "0xBFC748", VA = "0xBFC748", Slot = "10")]
	public override bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xBFC7DC", Offset = "0xBFC7DC", VA = "0xBFC7DC")]
	public ZNPlayerInventoryReturnPoint()
	{
	}
}
[Token(Token = "0x200011D")]
public class ZNShopSellItemReturnPoint : ZNObjectReturnPoint
{
	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The shop manager")]
	[SerializeField]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xBFC7EC", Offset = "0xBFC7EC", VA = "0xBFC7EC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xBFC80C", Offset = "0xBFC80C", VA = "0xBFC80C", Slot = "7")]
	protected override void OccupyingObjectUpdated(ZNGrabObjectBase InOccupyingObject)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xBFC90C", Offset = "0xBFC90C", VA = "0xBFC90C", Slot = "8")]
	public override bool CanReceiveObjects(FZNReturnPointSwapParameters InReturnPointSwapParameters)
	{
		return default(bool);
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xBFCA24", Offset = "0xBFCA24", VA = "0xBFCA24", Slot = "9")]
	public override bool AllowObjectToBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xBFCAB4", Offset = "0xBFCAB4", VA = "0xBFCAB4", Slot = "10")]
	public override bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xBFCACC", Offset = "0xBFCACC", VA = "0xBFCACC")]
	public ZNShopSellItemReturnPoint()
	{
	}
}
[Token(Token = "0x200011E")]
public class ZNShopWeaponUpgraderReturnPoint : ZNObjectReturnPoint
{
	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The shop weapon upgrader")]
	protected ZNShopWeaponUpgrader ShopWeaponUpgrader;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool bUpgrading;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xBFCADC", Offset = "0xBFCADC", VA = "0xBFCADC", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xBFCC88", Offset = "0xBFCC88", VA = "0xBFCC88", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xBFCE1C", Offset = "0xBFCE1C", VA = "0xBFCE1C")]
	protected void ShopUpgradeStarted(ZNGrabObjectBase UpgradedItem, int UpgradeCost)
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xBFCE28", Offset = "0xBFCE28", VA = "0xBFCE28")]
	protected void ShopUpgradeCompleted(ZNGrabObjectBase UpgradedItem)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xBFCE30", Offset = "0xBFCE30", VA = "0xBFCE30", Slot = "8")]
	public override bool CanReceiveObjects(FZNReturnPointSwapParameters InReturnPointSwapParameters)
	{
		return default(bool);
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xBFCF08", Offset = "0xBFCF08", VA = "0xBFCF08", Slot = "9")]
	public override bool AllowObjectToBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xBFCF18", Offset = "0xBFCF18", VA = "0xBFCF18", Slot = "10")]
	public override bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xBFCF30", Offset = "0xBFCF30", VA = "0xBFCF30")]
	public ZNShopWeaponUpgraderReturnPoint()
	{
	}
}
[Token(Token = "0x200011F")]
public class RotateObjectByPositionOVRGrabbable : ZNOVRGrabbable
{
	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	[SerializeField]
	[Tooltip("Debug option to test with the grabbed state set to true")]
	protected bool bDebugStartWithGrabbedAsTrue;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	[Tooltip("The additional angle offset.")]
	private float AdditionalAngleOffset;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The object's orientation confirmer, AKA what checks the right vector.")]
	[SerializeField]
	private Transform ObjectOrientationConfimer;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Tooltip("The center of the rotation area. Currently should be the center for the YZ axes, as X is irrelevant.")]
	private Transform RotationCenter;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("The center of the rotation area, adjusted to account for the forward transform.")]
	[SerializeField]
	private Transform RotationCenterForwardTransform;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Tooltip("The object to rotate.")]
	[SerializeField]
	private Transform ObjectToRotate;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	[Tooltip("The parent object that we return the held part to when we let go.")]
	private Transform _handle;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool _grabbed;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool bPositionLocked;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
	private bool bForceMoveToQueued;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 QueuedMoveToPosition;

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xBFCF40", Offset = "0xBFCF40", VA = "0xBFCF40", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xBFCF64", Offset = "0xBFCF64", VA = "0xBFCF64")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xBFD29C", Offset = "0xBFD29C", VA = "0xBFD29C")]
	public static float AngleOffAroundAxis(Vector3 v, Vector3 forward, Vector3 axis, bool clockwise = false)
	{
		return default(float);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xBFD37C", Offset = "0xBFD37C", VA = "0xBFD37C")]
	public void ForceMoveTo(Vector3 InPosition)
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xBFD390", Offset = "0xBFD390", VA = "0xBFD390", Slot = "4")]
	public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xBFD3AC", Offset = "0xBFD3AC", VA = "0xBFD3AC", Slot = "5")]
	public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xBFD434", Offset = "0xBFD434", VA = "0xBFD434")]
	public void LockPosition()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xBFD440", Offset = "0xBFD440", VA = "0xBFD440")]
	public void UnlockPosition()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xBFD448", Offset = "0xBFD448", VA = "0xBFD448", Slot = "8")]
	public override bool CanBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xBFD468", Offset = "0xBFD468", VA = "0xBFD468")]
	public RotateObjectByPositionOVRGrabbable()
	{
	}
}
[Token(Token = "0x2000120")]
public class RotatingOVRGrabbable : ZNOVRGrabbable
{
	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	[SerializeField]
	[Tooltip("Debug option to test with the grabbed state set to true")]
	protected bool bDebugStartWithGrabbedAsTrue;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The center of the rotation area. Currently should be the center for the YZ axes, as X is irrelevant.")]
	[SerializeField]
	private Transform RotationCenter;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 RotationCenterWithoutX;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Transform _handle;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 OriginalPosition;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Quaternion OriginalRotation;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Rigidbody _handleRB;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool _grabbed;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	private bool bPositionLocked;

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xBFD4D0", Offset = "0xBFD4D0", VA = "0xBFD4D0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xBFD5F0", Offset = "0xBFD5F0", VA = "0xBFD5F0")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xBFD9D8", Offset = "0xBFD9D8", VA = "0xBFD9D8", Slot = "4")]
	public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xBFD9F4", Offset = "0xBFD9F4", VA = "0xBFD9F4", Slot = "5")]
	public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xBFDA7C", Offset = "0xBFDA7C", VA = "0xBFDA7C")]
	public void LockPosition()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xBFDA88", Offset = "0xBFDA88", VA = "0xBFDA88")]
	public void UnlockPosition()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xBFDA90", Offset = "0xBFDA90", VA = "0xBFDA90", Slot = "8")]
	public override bool CanBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xBFDAB0", Offset = "0xBFDAB0", VA = "0xBFDAB0")]
	public RotatingOVRGrabbable()
	{
	}
}
[Token(Token = "0x2000121")]
public class ZNBadgeSelector : ZNUISelector
{
	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[Tooltip("The badges combo name text, displays special names when a combination of badges are used")]
	[Header("Badge Selector")]
	[SerializeField]
	protected SAText BadgesComboNameText;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[Tooltip("The transform for the badges vertical list")]
	[SerializeField]
	protected Transform BadgesVerticalList;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	[Tooltip("The button for unequipping all badges")]
	protected SAButtonWidget UnequipAllBadgesButton;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[SerializeField]
	[Tooltip("The badges page number text, for displaying what page we're on")]
	protected SAText BadgesPageNumberText;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[SerializeField]
	[Tooltip("The description panel for when the badge is locked")]
	protected GameObject BadgeLockedDescriptionPanel;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[SerializeField]
	[Tooltip("The description panel for when the badge is unlocked")]
	protected GameObject BadgeUnlockedDescriptionPanel;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[SerializeField]
	[Tooltip("The selected badge name text")]
	protected SAText BadgeNameText;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[SerializeField]
	[Tooltip("The selected badge description text")]
	protected SAText BadgeDescriptionText;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[SerializeField]
	[Tooltip("The badge unlock progress bar")]
	protected Image BadgeUnlockProgressBar;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[Tooltip("The description text for the badge unlock progress")]
	[SerializeField]
	protected SAText BadgeUnlockProgressDescriptionText;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[SerializeField]
	[Tooltip("The counter text for the badge unlock progress")]
	protected SAText BadgeUnlockProgressCounterText;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	[SerializeField]
	[Tooltip("The string we use for displaying the badge unlock progress")]
	protected LocalizedString BadgeUnlockProgressCounterTextString;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	[Tooltip("The widgets for the current badges")]
	[SerializeField]
	protected List<ZNCurrentBadgeWidget> CurrentBadgeWidgets;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	protected List<ZNBadgeAssetBase> EquippableBadges;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	[SerializeField]
	[Tooltip("The prefab used to create the badge options")]
	protected GameObject PF_BadgeOptionWidget;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	[Tooltip("The number of badge options displayed per page")]
	[SerializeField]
	protected int NumBadgeOptionsPerPage;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	protected List<ZNBadgeOptionWidget> BadgeOptionWidgets;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	protected int NumTotalBadgePages;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
	protected int CurrentBadgePage;

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xBFDAC0", Offset = "0xBFDAC0", VA = "0xBFDAC0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xBFDD30", Offset = "0xBFDD30", VA = "0xBFDD30", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xBFE270", Offset = "0xBFE270", VA = "0xBFE270", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xBFE6D0", Offset = "0xBFE6D0", VA = "0xBFE6D0", Slot = "26")]
	public override void PressThumbstickLeft()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xBFE7A0", Offset = "0xBFE7A0", VA = "0xBFE7A0", Slot = "24")]
	public override void PressThumbstickRight()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xBFE008", Offset = "0xBFE008", VA = "0xBFE008")]
	public void InitializeBadgeSelector()
	{
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xBFE7A8", Offset = "0xBFE7A8", VA = "0xBFE7A8")]
	public void UpdateCurrentBadgeWidgets()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xBFE880", Offset = "0xBFE880", VA = "0xBFE880")]
	public void CreateBadgesPage(int InPageIndex)
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xBFEE24", Offset = "0xBFEE24", VA = "0xBFEE24")]
	protected void CreateBadge(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xBFEBC0", Offset = "0xBFEBC0", VA = "0xBFEBC0")]
	protected void ClearBadgesPage()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xBFF0D0", Offset = "0xBFF0D0", VA = "0xBFF0D0")]
	public void ShowBadgeInBadgeDescriptionPane(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xBFF4FC", Offset = "0xBFF4FC", VA = "0xBFF4FC")]
	public void ClearBadgeDescriptionPane()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xBFF64C", Offset = "0xBFF64C", VA = "0xBFF64C")]
	public void UnequipAllBadges()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xBFE6D8", Offset = "0xBFE6D8", VA = "0xBFE6D8")]
	protected void TurnPage(int InPagesTurned)
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xBFF7A4", Offset = "0xBFF7A4", VA = "0xBFF7A4")]
	protected void LeftButtonClicked()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xBFF7AC", Offset = "0xBFF7AC", VA = "0xBFF7AC")]
	protected void RightButtonClicked()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xBFF7B4", Offset = "0xBFF7B4", VA = "0xBFF7B4")]
	protected void BadgeAssetEquipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xBFF7B8", Offset = "0xBFF7B8", VA = "0xBFF7B8")]
	protected void BadgeAssetUnequipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xBFF7BC", Offset = "0xBFF7BC", VA = "0xBFF7BC")]
	protected void BadgeOptionWidgetConfirmed(SASelectableWidgetBase ConfirmedSelectableWidget)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xBFF888", Offset = "0xBFF888", VA = "0xBFF888")]
	protected void BadgeOptionWidgetHighlighted(SASelectableWidgetBase HighlightedSelectableWidget)
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xBFF958", Offset = "0xBFF958", VA = "0xBFF958")]
	private void UnequipAllBadgesButtonHighlighted(SASelectableWidgetBase HighlightedSelectableWidget)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xBFF95C", Offset = "0xBFF95C", VA = "0xBFF95C")]
	public ZNBadgeSelector()
	{
	}
}
[Token(Token = "0x2000122")]
public class ZNBonusCard : ZNGrabObjectBase
{
	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Tooltip("The text for the name of the card")]
	[SerializeField]
	protected SAText CardNameText;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[Tooltip("The text for the description of the card")]
	[SerializeField]
	protected SAText CardDescriptionText;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	[Tooltip("The mesh filter for the card")]
	protected MeshFilter CardMeshFilter;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	[Tooltip("The SFX that plays when taking the card")]
	protected Event CardTakenSFX;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[Tooltip("The canvas object for taking the bonus card")]
	[SerializeField]
	protected GameObject TakeBonusCardCanvas;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	[Tooltip("The text for taking a card")]
	protected ZNText TakeCardButtonText;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	protected ZNBonusCardAsset AssociatedBonusCardAsset;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected ZNIntermissionManager IntermissionManager;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xBFFA7C", Offset = "0xBFFA7C", VA = "0xBFFA7C", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xBFFB58", Offset = "0xBFFB58", VA = "0xBFFB58")]
	public void InitializeBonusCard(ZNBonusCardAsset InBonusCardAsset)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xBFFD1C", Offset = "0xBFFD1C", VA = "0xBFFD1C", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xC00088", Offset = "0xC00088", VA = "0xC00088", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xC00494", Offset = "0xC00494", VA = "0xC00494", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xC00664", Offset = "0xC00664", VA = "0xC00664", Slot = "40")]
	public override bool CanBeGrabbed(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xC00794", Offset = "0xC00794", VA = "0xC00794", Slot = "48")]
	public virtual bool CanTakeBonusCard()
	{
		return default(bool);
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xC0084C", Offset = "0xC0084C", VA = "0xC0084C")]
	public ZNBonusCard()
	{
	}
}
[Token(Token = "0x2000123")]
[CreateAssetMenu(fileName = "ZNBonusCardAsset", menuName = "Scriptable Objects/Bonus Cards/ZNBonusCardAsset")]
public class ZNBonusCardAsset : ScriptableObject
{
	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The bonus card name")]
	[SerializeField]
	protected LocalizedString BonusCardName;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The bonus card description")]
	[SerializeField]
	protected LocalizedString BonusCardDescription;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The bonus card mesh")]
	protected Mesh BonusCardMesh;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The mod we get when taking this card")]
	protected SAModAsset BonusCardModAsset;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The condition that must be met to spawn this card. If unset, can always spawn.")]
	[SerializeField]
	protected SAConditionAsset SpawnConditionAsset;

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xC00894", Offset = "0xC00894", VA = "0xC00894")]
	public bool CanSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xC00924", Offset = "0xC00924", VA = "0xC00924")]
	public LocalizedString GetBonusCardName()
	{
		return null;
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xC0092C", Offset = "0xC0092C", VA = "0xC0092C")]
	public LocalizedString GetBonusCardDescription()
	{
		return null;
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xC00934", Offset = "0xC00934", VA = "0xC00934")]
	public Mesh GetBonusCardMesh()
	{
		return null;
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xC0093C", Offset = "0xC0093C", VA = "0xC0093C")]
	public SAModAsset GetBonusCardModAsset()
	{
		return null;
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xC00944", Offset = "0xC00944", VA = "0xC00944")]
	public ZNBonusCardAsset()
	{
	}
}
[Token(Token = "0x2000124")]
[CreateAssetMenu(fileName = "ZNBonusCardSelectionAsset", menuName = "Scriptable Objects/Bonus Cards/ZNBonusCardSelectionAsset")]
public class ZNBonusCardSelectionAsset : ScriptableObject
{
	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The bonus cards that can appear")]
	[SerializeField]
	protected List<ZNBonusCardAsset> BonusCardAssets;

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xC0094C", Offset = "0xC0094C", VA = "0xC0094C")]
	public List<ZNBonusCardAsset> GetBonusCardAssets()
	{
		return null;
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xC00954", Offset = "0xC00954", VA = "0xC00954")]
	public List<ZNBonusCardAsset> GetListOfRandomUniqueBonusCardAssets(int InRequestedAmount)
	{
		return null;
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xC00BA8", Offset = "0xC00BA8", VA = "0xC00BA8")]
	public ZNBonusCardSelectionAsset()
	{
	}
}
[Token(Token = "0x2000125")]
[CreateAssetMenu(fileName = "ZNCaseFileAsset", menuName = "Scriptable Objects/Case Files/ZNCaseFileAsset")]
public class ZNCaseFileAsset : ScriptableObject
{
	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The name of the case")]
	protected LocalizedString CaseName;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The case number as a string")]
	[SerializeField]
	protected string CaseNumberString;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The description of the case")]
	protected LocalizedString CaseDescription;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The altercation description for the case")]
	protected LocalizedString CaseAltercation;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The material used for the case file image")]
	protected Material CaseFileImageMaterial;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The string we use for retrieving saved case file information")]
	protected string TrackedCaseFileKey;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The scene name to load for the case")]
	[SerializeField]
	protected string CaseSceneName;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The wave algorithm asset for this case")]
	[SerializeField]
	protected ZNWaveAlgorithmAsset WaveAlgorithmAsset;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The shop item selection asset for this case")]
	[SerializeField]
	protected ZNShopItemSelectionAsset ShopItemSelectionAsset;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The shop item selection asset for this case (when in development/editor)")]
	protected ZNShopItemSelectionAsset DevelopmentShopItemSelectionAsset;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The bonus card selection asset for this case")]
	protected ZNBonusCardSelectionAsset BonusCardSelectionAsset;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Tooltip("The various activity collections for this case file")]
	protected List<SAActivityCollectionAsset> ActivityCollectionAssets;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The various wave altercation assets for this case file")]
	[SerializeField]
	protected List<ZNWaveAltercationAsset> WaveAltercationAssets;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The various mod assets we give to enemies when they spawn for this case file")]
	[SerializeField]
	protected List<SAModAsset> EnemyModAssets;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Tooltip("If we allow auto completing the setup phase in this case file")]
	protected bool bAllowAutoCompleteSetupPhase;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Tooltip("The number of waves between Objective Waves")]
	[SerializeField]
	protected int ObjectiveWaveInterval;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The leaderboard key for writing high scores for this case file")]
	protected string LeaderboardKey;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("If this case file is locked by default")]
	protected bool bLockedByDefault;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The unlock condition that must be completed to unlock the case file (if it is locked by default)")]
	[SerializeField]
	protected SAUnlockConditionAsset UnlockConditionAsset;

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xC00BB0", Offset = "0xC00BB0", VA = "0xC00BB0")]
	public LocalizedString GetCaseName()
	{
		return null;
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xC00BB8", Offset = "0xC00BB8", VA = "0xC00BB8")]
	public string GetCaseNumberString()
	{
		return null;
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xC00BC0", Offset = "0xC00BC0", VA = "0xC00BC0")]
	public LocalizedString GetCaseDescription()
	{
		return null;
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xC00BC8", Offset = "0xC00BC8", VA = "0xC00BC8")]
	public LocalizedString GetCaseAltercation()
	{
		return null;
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xC00BD0", Offset = "0xC00BD0", VA = "0xC00BD0")]
	public Material GetCaseFileImageMaterial()
	{
		return null;
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xC00BD8", Offset = "0xC00BD8", VA = "0xC00BD8")]
	public string GetTrackedCaseFileKey()
	{
		return null;
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xC00BE0", Offset = "0xC00BE0", VA = "0xC00BE0")]
	public string GetCaseSceneName()
	{
		return null;
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xC00BE8", Offset = "0xC00BE8", VA = "0xC00BE8")]
	public ZNWaveAlgorithmAsset GetWaveAlgorithmAsset()
	{
		return null;
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xC00BF0", Offset = "0xC00BF0", VA = "0xC00BF0")]
	public ZNShopItemSelectionAsset GetShopItemSelectionAsset()
	{
		return null;
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xC00C1C", Offset = "0xC00C1C", VA = "0xC00C1C")]
	public ZNBonusCardSelectionAsset GetBonusCardSelectionAsset()
	{
		return null;
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xC00C24", Offset = "0xC00C24", VA = "0xC00C24")]
	public List<SAActivityCollectionAsset> GetActivityCollectionAssets()
	{
		return null;
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xC00C2C", Offset = "0xC00C2C", VA = "0xC00C2C")]
	public List<ZNWaveAltercationAsset> GetWaveAltercationAssets()
	{
		return null;
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xC00C34", Offset = "0xC00C34", VA = "0xC00C34")]
	public List<SAModAsset> GetEnemyModAssets()
	{
		return null;
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xC00C3C", Offset = "0xC00C3C", VA = "0xC00C3C")]
	public List<SAActivityAsset> GetAllActivityAssetsFromCollections()
	{
		return null;
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xC00D30", Offset = "0xC00D30", VA = "0xC00D30")]
	public bool DoesAllowAutoCompleteSetupPhase()
	{
		return default(bool);
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xC00D38", Offset = "0xC00D38", VA = "0xC00D38")]
	public int GetWaveObjectiveInterval()
	{
		return default(int);
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xC00D40", Offset = "0xC00D40", VA = "0xC00D40")]
	public string GetLeaderboardKey(EZNDifficulties InDifficulty)
	{
		return null;
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xC00DCC", Offset = "0xC00DCC", VA = "0xC00DCC")]
	public bool IsLockedByDefault()
	{
		return default(bool);
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xC00DD4", Offset = "0xC00DD4", VA = "0xC00DD4")]
	public SAUnlockConditionAsset GetUnlockConditionAsset()
	{
		return null;
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xC00DDC", Offset = "0xC00DDC", VA = "0xC00DDC")]
	public bool HasBeenUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xC00E78", Offset = "0xC00E78", VA = "0xC00E78")]
	public ZNCaseFileAsset()
	{
	}
}
[Token(Token = "0x2000126")]
public class ZNCaseFileSelector : ZNGrabObjectBase
{
	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Header("UI")]
	[Tooltip("The canvas game object that we hide/unhide when dropping/grabbing this object")]
	[SerializeField]
	protected GameObject ControlsCanvasGameObject;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	[Tooltip("The difficulty UI canvas that we hide/unhide when dropping/grabbing this object")]
	protected GameObject DifficultyCanvasGameObject;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[Tooltip("The arrows UI canvas that we hide/unhide when dropping/grabbing this object")]
	[SerializeField]
	protected GameObject ArrowsCanvasGameObject;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[Header("Case File")]
	[Tooltip("The list of case file assets")]
	[SerializeField]
	protected List<ZNCaseFileAsset> CaseFileAssets;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	[Tooltip("The list of case file assets when in a development build")]
	protected List<ZNCaseFileAsset> DevelopmentCaseFileAssets;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[Tooltip("The prefab object for the single case file")]
	[SerializeField]
	protected GameObject PF_SingleCaseFile;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	[Tooltip("The prefab objects for the single case file")]
	protected List<GameObject> SingleCaseFilePrefabs;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[Tooltip("How much distance is between each case file")]
	[SerializeField]
	protected float DistanceBetweenCaseFiles;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[Tooltip("The transform we use to place the case files.")]
	[SerializeField]
	protected Transform CaseFilesTransform;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Tooltip("The object we put in the world to show where the case file will go, but we turn it off on play.")]
	[SerializeField]
	protected GameObject WorldVisibilityCaseFile;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Header("SFX")]
	[Tooltip("The SFX for confirming a case file")]
	[SerializeField]
	protected Event CaseFileConfirmedSFX;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[SerializeField]
	[Tooltip("The SFX for changing case files")]
	protected Event CaseFileChangedSFX;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[SerializeField]
	[Tooltip("The SFX for changing difficulties")]
	protected Event DifficultyChangedSFX;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	protected List<ZNSingleCaseFile> SingleCaseFiles;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	protected int CurrentFileIndex;

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xC00E90", Offset = "0xC00E90", VA = "0xC00E90", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xC00E94", Offset = "0xC00E94", VA = "0xC00E94", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xC0149C", Offset = "0xC0149C", VA = "0xC0149C", Slot = "16")]
	public override void PressButtonOne()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xC0163C", Offset = "0xC0163C", VA = "0xC0163C", Slot = "26")]
	public override void PressThumbstickLeft()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xC0165C", Offset = "0xC0165C", VA = "0xC0165C", Slot = "24")]
	public override void PressThumbstickRight()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xC0167C", Offset = "0xC0167C", VA = "0xC0167C", Slot = "20")]
	public override void PressThumbstickUp()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xC01694", Offset = "0xC01694", VA = "0xC01694", Slot = "22")]
	public override void PressThumbstickDown()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xC016AC", Offset = "0xC016AC", VA = "0xC016AC", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xC01110", Offset = "0xC01110", VA = "0xC01110")]
	protected void CreateSingleCaseFiles()
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xC0166C", Offset = "0xC0166C", VA = "0xC0166C")]
	protected void TurnRight()
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xC0164C", Offset = "0xC0164C", VA = "0xC0164C")]
	protected void TurnLeft()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xC013F0", Offset = "0xC013F0", VA = "0xC013F0")]
	protected void TurnToFile(int InFileIndex, bool bPlaySFX = true)
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xC01BA8", Offset = "0xC01BA8", VA = "0xC01BA8")]
	protected void PositionCaseFiles()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xC016A0", Offset = "0xC016A0", VA = "0xC016A0")]
	protected void TurnDifficultyRight()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xC01688", Offset = "0xC01688", VA = "0xC01688")]
	protected void TurnDifficultyLeft()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xC01D68", Offset = "0xC01D68", VA = "0xC01D68")]
	protected void TurnDifficulty(int InDifficultyIncrease, bool bPlaySFX = true)
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xC01E40", Offset = "0xC01E40", VA = "0xC01E40")]
	protected void UpdateDifficultyInUI(EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xC02000", Offset = "0xC02000", VA = "0xC02000", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xC017C8", Offset = "0xC017C8", VA = "0xC017C8")]
	public List<ZNCaseFileAsset> GetCaseFileAssets()
	{
		return null;
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xC0211C", Offset = "0xC0211C", VA = "0xC0211C")]
	public ZNCaseFileSelector()
	{
	}
}
[Token(Token = "0x2000127")]
[CreateAssetMenu(fileName = "ZNLorePageAsset", menuName = "Scriptable Objects/Lore/ZNLorePageAsset")]
public class ZNLorePageAsset : ScriptableObject
{
	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The lore page title")]
	[SerializeField]
	protected LocalizedString LorePageTitle;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The lore page description")]
	[SerializeField]
	protected LocalizedString LorePageDescription;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If this lore page is locked by default")]
	[SerializeField]
	protected bool bLockedByDefault;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The condition required to unlock this lore page")]
	[SerializeField]
	protected SAUnlockConditionAsset UnlockConditionAsset;

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xC021C0", Offset = "0xC021C0", VA = "0xC021C0")]
	public LocalizedString GetLorePageTitle()
	{
		return null;
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xC021C8", Offset = "0xC021C8", VA = "0xC021C8")]
	public LocalizedString GetLorePageDescription()
	{
		return null;
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xC021D0", Offset = "0xC021D0", VA = "0xC021D0")]
	public bool IsLockedByDefault()
	{
		return default(bool);
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xC021D8", Offset = "0xC021D8", VA = "0xC021D8")]
	public SAUnlockConditionAsset GetUnlockConditionAsset()
	{
		return null;
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xC021E0", Offset = "0xC021E0", VA = "0xC021E0")]
	public bool HasBeenUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xC0227C", Offset = "0xC0227C", VA = "0xC0227C")]
	public ZNLorePageAsset()
	{
	}
}
[Token(Token = "0x2000128")]
[CreateAssetMenu(fileName = "ZNLorePageCollectionAsset", menuName = "Scriptable Objects/Lore/ZNLorePageCollectionAsset")]
public class ZNLorePageCollectionAsset : ScriptableObject
{
	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The lore page assets")]
	[SerializeField]
	protected List<ZNLorePageAsset> LorePageAssets;

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xC0228C", Offset = "0xC0228C", VA = "0xC0228C")]
	public List<ZNLorePageAsset> GetLorePageAssets()
	{
		return null;
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xC02294", Offset = "0xC02294", VA = "0xC02294")]
	public int GetNumUnlockedLorePages()
	{
		return default(int);
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xC02410", Offset = "0xC02410", VA = "0xC02410")]
	public ZNLorePageCollectionAsset()
	{
	}
}
[Token(Token = "0x2000129")]
public class ZNLoreSelector : ZNUISelector
{
	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xC02418", Offset = "0xC02418", VA = "0xC02418", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xC02438", Offset = "0xC02438", VA = "0xC02438")]
	public ZNLoreSelector()
	{
	}
}
[Token(Token = "0x200012A")]
public class ZNOptionsSelector : ZNUISelector
{
	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[Tooltip("The main menu screen that we go to during gameplay")]
	[SerializeField]
	protected SALayeredScreen MainMenuScreenInGameplay;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	[Tooltip("The main menu screen that we go to during the intermission")]
	protected SALayeredScreen MainMenuScreenInIntermission;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected ZNSettingsManager SettingsManager;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNGameUserSettings GameUserSettings;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	protected bool bSettingsHaveChanged;

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xC0243C", Offset = "0xC0243C", VA = "0xC0243C", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xC024D8", Offset = "0xC024D8", VA = "0xC024D8", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xC025A8", Offset = "0xC025A8", VA = "0xC025A8", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xC02678", Offset = "0xC02678", VA = "0xC02678", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xC028D8", Offset = "0xC028D8", VA = "0xC028D8")]
	public void DebugGiveWeapon(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xC02970", Offset = "0xC02970", VA = "0xC02970")]
	public void DebugSpawnEnemy(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xC02A08", Offset = "0xC02A08", VA = "0xC02A08")]
	public void PressMainMenuButton()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xC02AA4", Offset = "0xC02AA4", VA = "0xC02AA4")]
	public void ResumeGame()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xC02B28", Offset = "0xC02B28", VA = "0xC02B28")]
	public void ReturnToMainMenu()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xC02BB4", Offset = "0xC02BB4", VA = "0xC02BB4")]
	protected void SettingsChanged()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xC02BC0", Offset = "0xC02BC0", VA = "0xC02BC0")]
	public ZNOptionsSelector()
	{
	}
}
[Token(Token = "0x200012B")]
public class ZNSingleCaseFile : MonoBehaviour
{
	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNCaseFileAsset AssociatedCaseFileAsset;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNGameInstance GameInstance;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Case File UI")]
	[Tooltip("The case file canvas")]
	[SerializeField]
	protected Canvas CaseFileCanvas;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Case number text")]
	[SerializeField]
	protected SAText CaseNumberText;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("Case name text")]
	protected SAText CaseNameText;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Waves counter text")]
	[SerializeField]
	protected SAText WavesCounterText;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The text that says endless")]
	[SerializeField]
	protected SAText WavesEndlessText;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The high score value text")]
	[SerializeField]
	protected SAText HighScoreValueText;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The waves cleared text")]
	protected SAText WavesClearedText;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The waves cleared value text")]
	[SerializeField]
	protected SAText WavesClearedValueText;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Case description text")]
	[SerializeField]
	protected SAText CaseDescriptionText;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Case altercation text")]
	[SerializeField]
	protected SAText CaseAltercationText;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The skinned mesh renderer for the case file image")]
	[SerializeField]
	protected SkinnedMeshRenderer CaseFileImageMeshRenderer;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The material index for the case file image")]
	[SerializeField]
	protected int CaseFileImageMaterialIndex;

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xC02BC4", Offset = "0xC02BC4", VA = "0xC02BC4")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xC02CBC", Offset = "0xC02CBC", VA = "0xC02CBC")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xC017F4", Offset = "0xC017F4", VA = "0xC017F4")]
	public void InitializeSingleCaseFile(ZNCaseFileAsset InCaseFileAsset)
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xC02D84", Offset = "0xC02D84", VA = "0xC02D84")]
	protected void UpdateHighScore(EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xC02F38", Offset = "0xC02F38", VA = "0xC02F38")]
	private void DifficultyChanged(EZNDifficulties NewDifficulty)
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xC02F3C", Offset = "0xC02F3C", VA = "0xC02F3C")]
	public ZNCaseFileAsset GetAssociatedCaseFileAsset()
	{
		return null;
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xC02F44", Offset = "0xC02F44", VA = "0xC02F44")]
	public ZNSingleCaseFile()
	{
	}
}
[Token(Token = "0x200012C")]
public class ZNStatsInfoSelector : ZNUISelector
{
	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xC02F54", Offset = "0xC02F54", VA = "0xC02F54", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xC02F74", Offset = "0xC02F74", VA = "0xC02F74")]
	public void DeleteAllSaveData()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xC030B4", Offset = "0xC030B4", VA = "0xC030B4")]
	public ZNStatsInfoSelector()
	{
	}
}
[Token(Token = "0x200012D")]
public class ZNUISelector : ZNGrabObjectBase
{
	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Tooltip("The canvas game object that we hide/unhide when dropping/grabbing this object")]
	[Header("UI")]
	[SerializeField]
	protected GameObject CanvasGameObject;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[Tooltip("The first layered screen to display when this object starts")]
	[SerializeField]
	protected SALayeredScreen InitialLayeredScreen;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[Header("SFX")]
	[Tooltip("The SFX to play when going back")]
	[SerializeField]
	protected Event GoBackSFX;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	protected SASelectableWidgetBase CurrentSelectable;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected List<SALayeredScreen> LayeredScreens;

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xBFDED0", Offset = "0xBFDED0", VA = "0xBFDED0", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xC030B8", Offset = "0xC030B8", VA = "0xC030B8", Slot = "20")]
	public override void PressThumbstickUp()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xC031C8", Offset = "0xC031C8", VA = "0xC031C8", Slot = "22")]
	public override void PressThumbstickDown()
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xC031D0", Offset = "0xC031D0", VA = "0xC031D0", Slot = "24")]
	public override void PressThumbstickRight()
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xC031D8", Offset = "0xC031D8", VA = "0xC031D8", Slot = "26")]
	public override void PressThumbstickLeft()
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xC030C0", Offset = "0xC030C0", VA = "0xC030C0")]
	protected void PressThumbstickDirection(ESADirections InDirection)
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xC031E0", Offset = "0xC031E0", VA = "0xC031E0", Slot = "16")]
	public override void PressButtonOne()
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xC03268", Offset = "0xC03268", VA = "0xC03268", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xC0272C", Offset = "0xC0272C", VA = "0xC0272C", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xBFF69C", Offset = "0xBFF69C", VA = "0xBFF69C")]
	protected void HighlightSelectable(SASelectableWidgetBase NewSelectable)
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xC02A9C", Offset = "0xC02A9C", VA = "0xC02A9C")]
	public void GoToScreen(SALayeredScreen NewLayeredScreen)
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xC03594", Offset = "0xC03594", VA = "0xC03594")]
	public void GoToScreenButDontHideTopScreen(SALayeredScreen NewLayeredScreen)
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xC0343C", Offset = "0xC0343C", VA = "0xC0343C")]
	protected void InternalGoToScreen(SALayeredScreen NewLayeredScreen, bool bHideTopScreen = true)
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xC0326C", Offset = "0xC0326C", VA = "0xC0326C")]
	public void GoBack()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xC0359C", Offset = "0xC0359C", VA = "0xC0359C", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xC033C4", Offset = "0xC033C4", VA = "0xC033C4")]
	public SALayeredScreen GetTopLayeredScreen()
	{
		return null;
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xBFF9E4", Offset = "0xBFF9E4", VA = "0xBFF9E4")]
	public ZNUISelector()
	{
	}
}
[Token(Token = "0x200012E")]
public class ZNVRModeSelector : ZNGrabObjectBase
{
	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	[Tooltip("The canvas game object that we hide/unhide when dropping/grabbing this object")]
	[Header("UI")]
	protected GameObject CanvasGameObject;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	[Tooltip("The text where we switch between VR and MR mode")]
	protected SAText SwitchText;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	[Tooltip("The text string for when we want to switch to VR mode")]
	protected LocalizedString SwitchToVRModeString;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	[Tooltip("The text string for when we want to switch to MR mode")]
	protected LocalizedString SwitchToMRModeString;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected bool bStartedToSwitchModes;

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xC03684", Offset = "0xC03684", VA = "0xC03684", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xC03798", Offset = "0xC03798", VA = "0xC03798", Slot = "16")]
	public override void PressButtonOne()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xC03824", Offset = "0xC03824", VA = "0xC03824", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xC038C8", Offset = "0xC038C8", VA = "0xC038C8", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xC0396C", Offset = "0xC0396C", VA = "0xC0396C")]
	public ZNVRModeSelector()
	{
	}
}
[Token(Token = "0x200012F")]
public class ZNCaptureAppSelector : ZNGrabObjectBase
{
	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	[Tooltip("The name of the scene to transition to when selecting the capture app selector without the Scene Preview API")]
	[Header("Capture App")]
	protected string FallbackSceneName;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[Tooltip("The canvas game object that we hide/unhide when dropping/grabbing this object")]
	[SerializeField]
	protected GameObject CanvasGameObject;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private ulong CaptureFlowId;

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xC03990", Offset = "0xC03990", VA = "0xC03990", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xC03A20", Offset = "0xC03A20", VA = "0xC03A20", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xC03A24", Offset = "0xC03A24", VA = "0xC03A24", Slot = "16")]
	public override void PressButtonOne()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xC03A98", Offset = "0xC03A98", VA = "0xC03A98", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xC03B3C", Offset = "0xC03B3C", VA = "0xC03B3C", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xC03BE0", Offset = "0xC03BE0", VA = "0xC03BE0")]
	public ZNCaptureAppSelector()
	{
	}
}
[Token(Token = "0x2000130")]
public class ZNGrabObjectBase : MonoBehaviour, IZNGrabbable
{
	[Token(Token = "0x2000131")]
	[CompilerGenerated]
	private sealed class <PostStartCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGrabObjectBase <>4__this;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600085E")]
			[Address(RVA = "0xC05FD0", Offset = "0xC05FD0", VA = "0xC05FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000860")]
			[Address(RVA = "0xC06018", Offset = "0xC06018", VA = "0xC06018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xC03EB0", Offset = "0xC03EB0", VA = "0xC03EB0")]
		[DebuggerHidden]
		public <PostStartCoroutine>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xC05F28", Offset = "0xC05F28", VA = "0xC05F28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xC05F2C", Offset = "0xC05F2C", VA = "0xC05F2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xC05FD8", Offset = "0xC05FD8", VA = "0xC05FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <DelayOneFrameThenUpdateGrabObjectNotifierMarkerWidgetVisibleBySource>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNGrabObjectBase <>4__this;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000864")]
			[Address(RVA = "0xC060D8", Offset = "0xC060D8", VA = "0xC060D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000866")]
			[Address(RVA = "0xC06120", Offset = "0xC06120", VA = "0xC06120", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xC057C4", Offset = "0xC057C4", VA = "0xC057C4")]
		[DebuggerHidden]
		public <DelayOneFrameThenUpdateGrabObjectNotifierMarkerWidgetVisibleBySource>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xC06020", Offset = "0xC06020", VA = "0xC06020", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xC06024", Offset = "0xC06024", VA = "0xC06024", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xC060E0", Offset = "0xC060E0", VA = "0xC060E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Mesh")]
	[Tooltip("The mesh renderer")]
	[SerializeField]
	protected Renderer ObjectRenderer;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The object's visual transform - may be the same as the object renderer")]
	[SerializeField]
	protected Transform ObjectVisualTransform;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The animator controller that we use for the player hands when grabbing the object")]
	[SerializeField]
	[Header("Animation")]
	protected RuntimeAnimatorController GrabAnimatorController;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Shop")]
	protected ZNShopItemComponent ShopItemComponent;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Marker")]
	[Tooltip("If set, the grab object notifier marker component will go here")]
	protected Transform OverrideGrabObjectNotifierMarkerComponentTransform;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNNotifierMarkerComponent GrabObjectNotifierMarkerComponent;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Transform RootTransform;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Animator MainAnimator;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected SAPoolManager PoolManager;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected SAGameMode GameModeRef;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FOnEnabled OnEnabledDel;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FOnDisabled OnDisabledDel;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FOnDestroyed OnDestroyedDel;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public OnObjectGrabbed OnObjectGrabbedDel;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public OnObjectDropped OnObjectDroppedDel;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Grab")]
	[Tooltip("If we should directly attach this object to a hand when grabbed--basically, the object will move with the hand and be a child of the weapon socket.")]
	[SerializeField]
	protected bool bDirectlyAttachToHand;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[Tooltip("If the item mesh (visual transform) should use custom scaling when grabbed.")]
	[SerializeField]
	protected bool bUseCustomScalingWhenGrabbed;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Tooltip("The scale to use for the right hand when custom scaling is enabled. Also acts as the default scaling that is returned to when dropped.")]
	protected Vector3 RightHandScale;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The scale to use for the left hand when custom scaling is enabled")]
	[SerializeField]
	protected Vector3 LeftHandScale;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[Tooltip("If this object uses the joystick axis--this must be true if you want to use things like UI navigation on an object")]
	[SerializeField]
	protected bool bUsesJoystickAxis;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	[Tooltip("If this object can be two handed")]
	[SerializeField]
	protected bool bTwoHandedModeAllowed;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The grabbable that enables two handed mode")]
	[SerializeField]
	protected ZNOVRGrabbable TwoHandedModeGrabbable;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The offset info to use when this object is grabbed with the right hand")]
	[SerializeField]
	protected SAOffsetInfo RightHandGrabbedOffset;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	[Tooltip("The offset info to use when this object is grabbed with the left hand")]
	protected SAOffsetInfo LeftHandGrabbedOffset;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Tooltip("The offset info to use when this object is at a generic return point")]
	protected SAOffsetInfo DefaultReturnPointOffset;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[SerializeField]
	[Tooltip("The offset info to use when this object is at an inventory return point")]
	protected SAOffsetInfo InventoryReturnPointOffset;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[Tooltip("The offset info to use when this object is at a shop return point")]
	[SerializeField]
	protected SAOffsetInfo ShopReturnPointOffset;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[SerializeField]
	[Tooltip("The offset info to use when this object is at an upgrader return point")]
	protected SAOffsetInfo UpgraderReturnPointOffset;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	[Tooltip("The offset info to use when this object is at the shop's sell item return point")]
	protected SAOffsetInfo ShopSellItemReturnPointOffset;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[Tooltip("The property key for checking if this weapon can use the one-handed mode")]
	[SerializeField]
	protected string OneHandedPropertyKey;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[Tooltip("The override SFX to play when grabbing the object")]
	[SerializeField]
	protected Event GrabSFX;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[Tooltip("The override SFX to play when dropping/letting go of the object")]
	[SerializeField]
	protected Event DropSFX;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[Header("Return Point")]
	[Tooltip("If this object can have a return point assigned at the start")]
	[SerializeField]
	protected bool bAllowInitialReturnPointAssignment;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x209")]
	[Tooltip("If this object can change its return point during gameplay")]
	[SerializeField]
	protected bool bAllowChangingReturnPoint;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	protected ZNGrabObjectBase MasterGrabObject;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	protected ZNObjectReturnPoint MainObjectReturnPoint;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	protected ZNObjectReturnPoint TemporaryObjectReturnPoint;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	protected ZNMainCharacter GrabbingCharacter;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	protected ZNMainCharacter LastGrabbingCharacter;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	protected bool bGrabbed;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	protected ZNHands GrabbingHand;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	protected ZNPlayerHand GrabbingPlayerHand;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	protected bool bPressingTrigger;

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xBFDBCC", Offset = "0xBFDBCC", VA = "0xBFDBCC", Slot = "7")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xC01010", Offset = "0xC01010", VA = "0xC01010", Slot = "8")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xC03E48", Offset = "0xC03E48", VA = "0xC03E48")]
	[IteratorStateMachine(typeof(<PostStartCoroutine>d__2))]
	private IEnumerator PostStartCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xC03ED8", Offset = "0xC03ED8", VA = "0xC03ED8", Slot = "9")]
	protected virtual void PostStart()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xC03EDC", Offset = "0xC03EDC", VA = "0xC03EDC", Slot = "10")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xC04290", Offset = "0xC04290", VA = "0xC04290", Slot = "11")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xC042C8", Offset = "0xC042C8", VA = "0xC042C8", Slot = "12")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xBFE4D8", Offset = "0xBFE4D8", VA = "0xBFE4D8", Slot = "13")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xC03D00", Offset = "0xC03D00", VA = "0xC03D00")]
	protected void CreateGrabObjectMarkerNotifierComponent()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xC04300", Offset = "0xC04300", VA = "0xC04300", Slot = "14")]
	public virtual void PressTrigger()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xC0430C", Offset = "0xC0430C", VA = "0xC0430C", Slot = "15")]
	public virtual void ReleaseTrigger()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xC04314", Offset = "0xC04314", VA = "0xC04314", Slot = "16")]
	public virtual void PressButtonOne()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xC04318", Offset = "0xC04318", VA = "0xC04318", Slot = "17")]
	public virtual void ReleaseButtonOne()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xC0431C", Offset = "0xC0431C", VA = "0xC0431C", Slot = "18")]
	public virtual void PressButtonTwo()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xC0455C", Offset = "0xC0455C", VA = "0xC0455C", Slot = "19")]
	public virtual void ReleaseButtonTwo()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xC04560", Offset = "0xC04560", VA = "0xC04560", Slot = "20")]
	public virtual void PressThumbstickUp()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xC04564", Offset = "0xC04564", VA = "0xC04564")]
	public void PressThumbstick(ESADirections InDirection)
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xC045CC", Offset = "0xC045CC", VA = "0xC045CC")]
	public void ReleaseThumbstick(ESADirections InDirection)
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xC04634", Offset = "0xC04634", VA = "0xC04634", Slot = "21")]
	public virtual void ReleaseThumbstickUp()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xC04638", Offset = "0xC04638", VA = "0xC04638", Slot = "22")]
	public virtual void PressThumbstickDown()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xC0463C", Offset = "0xC0463C", VA = "0xC0463C", Slot = "23")]
	public virtual void ReleaseThumbstickDown()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xC04640", Offset = "0xC04640", VA = "0xC04640", Slot = "24")]
	public virtual void PressThumbstickRight()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xC04644", Offset = "0xC04644", VA = "0xC04644", Slot = "25")]
	public virtual void ReleaseThumbstickRight()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xC04648", Offset = "0xC04648", VA = "0xC04648", Slot = "26")]
	public virtual void PressThumbstickLeft()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xC0464C", Offset = "0xC0464C", VA = "0xC0464C", Slot = "27")]
	public virtual void ReleaseThumbstickLeft()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xC04650", Offset = "0xC04650", VA = "0xC04650", Slot = "28")]
	public virtual void PressThumbstickClick()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xC04654", Offset = "0xC04654", VA = "0xC04654", Slot = "29")]
	public virtual void ReleaseThumbstickClick()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xC04658", Offset = "0xC04658", VA = "0xC04658", Slot = "30")]
	public virtual void AssignOwner(ZNMainCharacter InOwningCharacter)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xC0012C", Offset = "0xC0012C", VA = "0xC0012C", Slot = "31")]
	public virtual void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xC04C14", Offset = "0xC04C14", VA = "0xC04C14")]
	public void ProxyDrop()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xC04C1C", Offset = "0xC04C1C", VA = "0xC04C1C", Slot = "32")]
	public virtual void AssignMasterGrabObject(ZNGrabObjectBase InGrabObject)
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xC04C90", Offset = "0xC04C90", VA = "0xC04C90")]
	public void AttachToHand(ZNPlayerHand InPlayerHand)
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xC048F0", Offset = "0xC048F0", VA = "0xC048F0")]
	public void ReturnToObjectReturnPoint()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xC03C54", Offset = "0xC03C54", VA = "0xC03C54")]
	protected void FindObjectReturnPointInParent()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xC05168", Offset = "0xC05168", VA = "0xC05168")]
	public void UpdateObjectReturnPoint(ZNObjectReturnPoint InObjectReturnPoint)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xC0519C", Offset = "0xC0519C", VA = "0xC0519C")]
	protected void UpdateMainObjectReturnPoint(ZNObjectReturnPoint InObjectReturnPoint)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xC05264", Offset = "0xC05264", VA = "0xC05264")]
	protected void UpdateTemporaryObjectReturnPoint(ZNObjectReturnPoint InObjectReturnPoint)
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xC0532C", Offset = "0xC0532C", VA = "0xC0532C")]
	public void ClearMainObjectReturnPoint()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xC053A8", Offset = "0xC053A8", VA = "0xC053A8")]
	public void ClearTemporaryObjectReturnPoint()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xC05424", Offset = "0xC05424", VA = "0xC05424", Slot = "33")]
	public virtual void PurchaseItem()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xC05674", Offset = "0xC05674", VA = "0xC05674", Slot = "34")]
	public virtual void UpdateGrabObjectNotifierMarkerWidgetVisibleBySource(bool bDelayOneFrame = false)
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xC0575C", Offset = "0xC0575C", VA = "0xC0575C")]
	[IteratorStateMachine(typeof(<DelayOneFrameThenUpdateGrabObjectNotifierMarkerWidgetVisibleBySource>d__85))]
	private IEnumerator DelayOneFrameThenUpdateGrabObjectNotifierMarkerWidgetVisibleBySource()
	{
		return null;
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xC057EC", Offset = "0xC057EC", VA = "0xC057EC", Slot = "35")]
	protected virtual void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xC00660", Offset = "0xC00660", VA = "0xC00660", Slot = "36")]
	protected virtual void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xC057F0", Offset = "0xC057F0", VA = "0xC057F0")]
	protected void ChangePlayerHandAnimatorBool(string InParameter, bool bInValue)
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xC0592C", Offset = "0xC0592C", VA = "0xC0592C", Slot = "37")]
	protected virtual void PlayGrabbedAnim()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xC059CC", Offset = "0xC059CC", VA = "0xC059CC", Slot = "38")]
	protected virtual void PlayDroppedAnim()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xBFFE04", Offset = "0xBFFE04", VA = "0xBFFE04", Slot = "39")]
	public virtual bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xC05B18", Offset = "0xC05B18", VA = "0xC05B18")]
	public void ProxyGrab()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xC00668", Offset = "0xC00668", VA = "0xC00668", Slot = "40")]
	public virtual bool CanBeGrabbed(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xC05B24", Offset = "0xC05B24", VA = "0xC05B24", Slot = "41")]
	public virtual bool CanBePickedUp()
	{
		return default(bool);
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xC05B2C", Offset = "0xC05B2C", VA = "0xC05B2C", Slot = "42")]
	public virtual GameObject GetGrabbableOwner()
	{
		return null;
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xC05BA8", Offset = "0xC05BA8", VA = "0xC05BA8", Slot = "43")]
	protected virtual void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xC05BAC", Offset = "0xC05BAC", VA = "0xC05BAC")]
	public Renderer GetObjectRenderer()
	{
		return null;
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xC05BB4", Offset = "0xC05BB4", VA = "0xC05BB4")]
	public Transform GetRootTransform()
	{
		return null;
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xC05BBC", Offset = "0xC05BBC", VA = "0xC05BBC")]
	public bool DoesUseJoystickAxis()
	{
		return default(bool);
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xC05BC4", Offset = "0xC05BC4", VA = "0xC05BC4")]
	public ZNGrabObjectBase GetMasterGrabObject()
	{
		return null;
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xC05BCC", Offset = "0xC05BCC", VA = "0xC05BCC")]
	public ZNGrabObjectBase GetTrueMasterGrabObject()
	{
		return null;
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xC0442C", Offset = "0xC0442C", VA = "0xC0442C")]
	public bool IsShopItem()
	{
		return default(bool);
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xC05C48", Offset = "0xC05C48", VA = "0xC05C48")]
	public ZNShopItemComponent GetShopItemComponent()
	{
		return null;
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xC04844", Offset = "0xC04844", VA = "0xC04844")]
	public ZNObjectReturnPoint GetCurrentObjectReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xC05C50", Offset = "0xC05C50", VA = "0xC05C50")]
	public ZNObjectReturnPoint GetMainObjectReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xC05C58", Offset = "0xC05C58", VA = "0xC05C58")]
	public ZNObjectReturnPoint GetTemporaryObjectReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xC05C60", Offset = "0xC05C60", VA = "0xC05C60")]
	public ZNCharacterBase GetGrabbingCharacter()
	{
		return null;
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xC0559C", Offset = "0xC0559C", VA = "0xC0559C")]
	public ZNMainCharacter GetOwningCharacter()
	{
		return null;
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xC05C68", Offset = "0xC05C68", VA = "0xC05C68")]
	public bool IsGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xC041FC", Offset = "0xC041FC", VA = "0xC041FC")]
	public bool IsTwoHandedGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xC05C70", Offset = "0xC05C70", VA = "0xC05C70")]
	public ZNHands GetGrabbingHand()
	{
		return default(ZNHands);
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xC04F84", Offset = "0xC04F84", VA = "0xC04F84")]
	public SAOffsetInfo GetGrabbedOffsetInfo(ZNHands InHand)
	{
		return default(SAOffsetInfo);
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xC04FB4", Offset = "0xC04FB4", VA = "0xC04FB4")]
	public SAOffsetInfo GetReturnPointOffset()
	{
		return default(SAOffsetInfo);
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xC05C78", Offset = "0xC05C78", VA = "0xC05C78", Slot = "44")]
	public virtual bool CanChangeObjectReturnPoint()
	{
		return default(bool);
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xC0448C", Offset = "0xC0448C", VA = "0xC0448C")]
	public bool CanPurchaseItem()
	{
		return default(bool);
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xC05D14", Offset = "0xC05D14", VA = "0xC05D14")]
	public bool HasEnoughCurrencyToPurchase()
	{
		return default(bool);
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xC05DDC", Offset = "0xC05DDC", VA = "0xC05DDC", Slot = "45")]
	public virtual bool CanDoOneHandedLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xC05EB4", Offset = "0xC05EB4", VA = "0xC05EB4", Slot = "46")]
	public virtual bool ShouldDisplayGrabObjectNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xC05A6C", Offset = "0xC05A6C", VA = "0xC05A6C")]
	protected Event GetGrabSFX()
	{
		return null;
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xC04B68", Offset = "0xC04B68", VA = "0xC04B68")]
	protected Event GetDropSFX()
	{
		return null;
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xC05F20", Offset = "0xC05F20", VA = "0xC05F20", Slot = "47")]
	protected virtual bool ShouldPlayDropSFX()
	{
		return default(bool);
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xC00870", Offset = "0xC00870", VA = "0xC00870")]
	public ZNGrabObjectBase()
	{
	}
}
[Token(Token = "0x2000133")]
public class ZNGrabResponderBase : MonoBehaviour
{
	[Token(Token = "0x6000867")]
	[Address(RVA = "0xC06128", Offset = "0xC06128", VA = "0xC06128", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xC0612C", Offset = "0xC0612C", VA = "0xC0612C", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xC06130", Offset = "0xC06130", VA = "0xC06130", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xC06134", Offset = "0xC06134", VA = "0xC06134")]
	public ZNGrabResponderBase()
	{
	}
}
[Token(Token = "0x2000134")]
public class ZNOVRGrabbable : OVRGrabbable
{
	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNOVRGrabbable <>4__this;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xC06800", Offset = "0xC06800", VA = "0xC06800", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600087C")]
			[Address(RVA = "0xC06848", Offset = "0xC06848", VA = "0xC06848", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xC06618", Offset = "0xC06618", VA = "0xC06618")]
		[DebuggerHidden]
		public <DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xC0674C", Offset = "0xC0674C", VA = "0xC0674C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xC06750", Offset = "0xC06750", VA = "0xC06750", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xC06808", Offset = "0xC06808", VA = "0xC06808", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Components")]
	[Tooltip("The grabbable's notifier marker component")]
	[SerializeField]
	protected ZNNotifierMarkerComponent NotifierMarkerComponent;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNWeaponBase OwningWeapon;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FOnOVRGrabbableGrabbed OnOVRGrabbableGrabbedDel;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FOnOVRGrabbableDropped OnOVRGrabbableDroppedDel;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Customizable Variables")]
	[Tooltip("The animator controller that we use for the player hands when grabbing the object")]
	[SerializeField]
	protected RuntimeAnimatorController GrabAnimatorController;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Tooltip("The grab root we use for the right player hand")]
	protected Transform RightPlayerHandGrabRoot;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The grab root we use for the left player hand")]
	[SerializeField]
	protected Transform LeftPlayerHandGrabRoot;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Tooltip("If we want to lock the player hand to a specific forward vector")]
	protected bool bLockPlayerHandToForward;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("The transform we use for determining the right hand's forward")]
	[SerializeField]
	protected Transform RightHandForwardOrientator;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The transform we use for determining the left hand's forward")]
	protected Transform LeftHandForwardOrientator;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The local euler offset for the right hand when we lock the player hand to the forward vector")]
	[SerializeField]
	protected Vector3 RightHandEulerOffset;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	[Tooltip("The local euler offset for the left hand when we lock the player hand to the forward vector")]
	protected Vector3 LeftHandEulerOffset;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool bGrabEnabled;

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xBFB6CC", Offset = "0xBFB6CC", VA = "0xBFB6CC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xC0613C", Offset = "0xC0613C", VA = "0xC0613C")]
	public void EnableGrabbing()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xC06154", Offset = "0xC06154", VA = "0xC06154")]
	public void DisableGrabbing()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xBFB950", Offset = "0xBFB950", VA = "0xBFB950", Slot = "4")]
	public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xBFBB10", Offset = "0xBFBB10", VA = "0xBFBB10", Slot = "5")]
	public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xC06484", Offset = "0xC06484", VA = "0xC06484", Slot = "7")]
	public virtual void UpdateNotifierMarkerWidgetVisibleBySource(bool bDelayOneFrame = false)
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xC065B0", Offset = "0xC065B0", VA = "0xC065B0")]
	[IteratorStateMachine(typeof(<DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource>d__19))]
	private IEnumerator DelayOneFrameThenUpdateNotifierMarkerWidgetVisibleBySource()
	{
		return null;
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xC06640", Offset = "0xC06640", VA = "0xC06640")]
	public void TryForceRelease()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xC066C8", Offset = "0xC066C8", VA = "0xC066C8", Slot = "8")]
	public virtual bool CanBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xC066D0", Offset = "0xC066D0", VA = "0xC066D0")]
	public ZNWeaponBase GetOwningWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xC066D8", Offset = "0xC066D8", VA = "0xC066D8", Slot = "9")]
	public virtual bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xBFBD0C", Offset = "0xBFBD0C", VA = "0xBFBD0C")]
	public ZNOVRGrabbable()
	{
	}
}
[Token(Token = "0x2000136")]
public class ZNOVRGrabber : OVRGrabber
{
	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Dictionary<IZNGrabbable, int> m_grabObjectCandidates;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected Dictionary<ZNObjectReturnPoint, int> HoveredObjectReturnCandidates;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	[Tooltip("The alternate grab checking transform")]
	protected Transform AltGrabCheckTransform;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected ZNHands Hand;

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xC06850", Offset = "0xC06850", VA = "0xC06850", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xC06888", Offset = "0xC06888", VA = "0xC06888", Slot = "7")]
	protected override void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xC069B0", Offset = "0xC069B0", VA = "0xC069B0", Slot = "8")]
	protected override void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0xC06B0C", Offset = "0xC06B0C", VA = "0xC06B0C", Slot = "9")]
	protected override void CheckForGrabOrRelease(float prevFlex)
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xC06BE4", Offset = "0xC06BE4", VA = "0xC06BE4", Slot = "10")]
	protected override void GrabBegin()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xC079C8", Offset = "0xC079C8", VA = "0xC079C8", Slot = "15")]
	protected virtual void EmptyGrabBegin()
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xC079CC", Offset = "0xC079CC", VA = "0xC079CC", Slot = "12")]
	protected override void GrabEnd()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xC07CD4", Offset = "0xC07CD4", VA = "0xC07CD4", Slot = "16")]
	protected virtual void EmptyGrabEnd()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xC07CD8", Offset = "0xC07CD8", VA = "0xC07CD8")]
	public ZNHands GetHand()
	{
		return default(ZNHands);
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xC07CE0", Offset = "0xC07CE0", VA = "0xC07CE0")]
	public ZNObjectReturnPoint GetClosestHoveredObjectReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xC080F8", Offset = "0xC080F8", VA = "0xC080F8")]
	public void GetLinearAndAngularVelocity(out Vector3 LinearVelocity, out Vector3 AngularVelocity)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xC07850", Offset = "0xC07850", VA = "0xC07850")]
	public List<IZNGrabbable> GetIZNGrabbablesInRange()
	{
		return null;
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xC07F40", Offset = "0xC07F40", VA = "0xC07F40")]
	public List<ZNObjectReturnPoint> GetObjectReturnPointsInRange()
	{
		return null;
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xC082F4", Offset = "0xC082F4", VA = "0xC082F4")]
	public ZNMainCharacter GetOwningMainCharacter()
	{
		return null;
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xC082FC", Offset = "0xC082FC", VA = "0xC082FC")]
	public OVRInput.Button GetTriggerForHand()
	{
		return default(OVRInput.Button);
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xC08320", Offset = "0xC08320", VA = "0xC08320")]
	public ZNOVRGrabber()
	{
	}
}
[Token(Token = "0x2000137")]
public class ZNPlayerHand : ZNOVRGrabber
{
	[Token(Token = "0x2000138")]
	[CompilerGenerated]
	private sealed class <TryUpdateNotifierMarkers>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPlayerHand <>4__this;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xC0A4B0", Offset = "0xC0A4B0", VA = "0xC0A4B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xC0A4F8", Offset = "0xC0A4F8", VA = "0xC0A4F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xC08FA4", Offset = "0xC08FA4", VA = "0xC08FA4")]
		[DebuggerHidden]
		public <TryUpdateNotifierMarkers>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xC0A018", Offset = "0xC0A018", VA = "0xC0A018", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xC0A01C", Offset = "0xC0A01C", VA = "0xC0A01C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xC0A4B8", Offset = "0xC0A4B8", VA = "0xC0A4B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	[Tooltip("The hand mesh root")]
	[Header("Components")]
	protected GameObject HandMeshRoot;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	[Tooltip("The hand mesh renderer")]
	protected Renderer HandMeshRenderer;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	[Tooltip("The ammo text")]
	protected TextMeshProUGUI AmmoText;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	[Tooltip("The animator controller component")]
	protected Animator AnimController;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Tooltip("The object socket we use when we don't want to have the object be a child of a transform")]
	protected Transform ZeroedObjectSocket;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[Tooltip("The object socket we use when we want the object to be a child of a transform")]
	protected Transform AttachedObjectSocket;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Tooltip("The root we use for returning the game object/mesh for OVR grabbable")]
	[SerializeField]
	protected Transform RootForGrabbable;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[Tooltip("The game object/mesh we use for putting the object on OVR grabbables")]
	[SerializeField]
	protected GameObject GameObjectForGrabbable;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Tooltip("The inventory UI wheel widget")]
	[SerializeField]
	protected ZNInventoryUIWheelWidget InventoryUIWheelWidget;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Tooltip("The default animator controller to use when the controller would be null")]
	[Header("Defaults")]
	[SerializeField]
	protected RuntimeAnimatorController DefaultAnimatorController;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected ZNGrabObjectBase CurrentGrabbedObject;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	protected List<ZNNotifierMarkerComponent> OverlappedMarkerComponents;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	protected bool bLockToForward;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	protected Transform LockedTransform;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	protected Vector3 AdditionalLockedTransformEulerOffset;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	protected bool bUpdatingCooldownVisuals;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	protected WaitForSeconds UpdateCooldownVisualsYield;

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xC083E0", Offset = "0xC083E0", VA = "0xC083E0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xC08418", Offset = "0xC08418", VA = "0xC08418", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xC08790", Offset = "0xC08790", VA = "0xC08790", Slot = "6")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xC08910", Offset = "0xC08910", VA = "0xC08910")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xC08BF4", Offset = "0xC08BF4", VA = "0xC08BF4")]
	protected void UpdateAmmoText(int InValue, bool bShowZero = true)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xC08CA8", Offset = "0xC08CA8", VA = "0xC08CA8")]
	protected void ClearAmmoText()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xC08D04", Offset = "0xC08D04", VA = "0xC08D04")]
	protected void UpdateAmmoBarVisuals(int NewAmmo, int MaxAmmo, bool bInvertedRatio = false)
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xC08EF4", Offset = "0xC08EF4", VA = "0xC08EF4")]
	protected void ClearAmmoBarVisuals()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xC08728", Offset = "0xC08728", VA = "0xC08728")]
	[IteratorStateMachine(typeof(<TryUpdateNotifierMarkers>d__25))]
	protected IEnumerator TryUpdateNotifierMarkers()
	{
		return null;
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xC04784", Offset = "0xC04784", VA = "0xC04784")]
	public void ChangeAnimatorController(RuntimeAnimatorController NewAnimatorController)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xC0588C", Offset = "0xC0588C", VA = "0xC0588C")]
	public void ChangeAnimatorBool(string InParameter, bool bInValue)
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xC06168", Offset = "0xC06168", VA = "0xC06168")]
	public void AttachHandMeshToGrabbable(ZNOVRGrabbable InOVRGrabbable, Transform InHandRoot, bool bInLockToForward = false, [Optional] Transform InLockedTransform, [Optional] Vector3 InAdditionalLockedTransformEulerOffset)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xC06308", Offset = "0xC06308", VA = "0xC06308")]
	public void ReleaseHandMeshFromGrabbable()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xC08FCC", Offset = "0xC08FCC", VA = "0xC08FCC", Slot = "15")]
	protected override void EmptyGrabBegin()
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xC0902C", Offset = "0xC0902C", VA = "0xC0902C", Slot = "16")]
	protected override void EmptyGrabEnd()
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xC062F0", Offset = "0xC062F0", VA = "0xC062F0")]
	public void CharacterGrabbedGrabbable(ZNOVRGrabbable GrabbedGrabbable, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0xC0908C", Offset = "0xC0908C", VA = "0xC0908C")]
	protected void CharacterGrabbedObject(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0xC0646C", Offset = "0xC0646C", VA = "0xC0646C")]
	public void CharacterDroppedGrabbable(ZNOVRGrabbable DroppedGrabbable, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0xC095C8", Offset = "0xC095C8", VA = "0xC095C8")]
	protected void CharacterDroppedObject(ZNGrabObjectBase DroppedObject, ZNHands DroppingHand)
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0xC09B5C", Offset = "0xC09B5C", VA = "0xC09B5C")]
	protected void AmmoUpdated(ZNGunWeapon UpdatedWeapon, int NewAmmo, int MaxAmmo)
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xC09BA0", Offset = "0xC09BA0", VA = "0xC09BA0")]
	protected void QuantityUpdated(ZNQuantityWeapon UpdatedWeapon, int NewQuantity, int MaxQuantity)
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xC09BE4", Offset = "0xC09BE4", VA = "0xC09BE4")]
	private void WeaponCooldownTimeUpdated(ZNCooldownWeapon UpdatedWeapon, float NewRemainingTime, float MaxRemainingTime)
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xC09D30", Offset = "0xC09D30", VA = "0xC09D30")]
	protected void EnergyUpdated(ZNWeaponBase UpdatedWeapon, float NewEnergy, float MaxEnergy)
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xC09D34", Offset = "0xC09D34", VA = "0xC09D34")]
	protected void HeadsetFocusAcquired()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xC09DD0", Offset = "0xC09DD0", VA = "0xC09DD0")]
	protected void HeadsetFocusLost()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xC09EBC", Offset = "0xC09EBC", VA = "0xC09EBC")]
	public bool IsHoldingObject()
	{
		return default(bool);
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xC09F1C", Offset = "0xC09F1C", VA = "0xC09F1C")]
	public ZNGrabObjectBase GetCurrentGrabbedObject()
	{
		return null;
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xC04F6C", Offset = "0xC04F6C", VA = "0xC04F6C")]
	public Transform GetObjectSocket(bool bAttached)
	{
		return null;
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xC09F24", Offset = "0xC09F24", VA = "0xC09F24")]
	public ZNInventoryUIWheelWidget GetInventoryUIWheelWidget()
	{
		return null;
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xC08E74", Offset = "0xC08E74", VA = "0xC08E74")]
	protected float GetPannerOffsetValueForAmmoBar(float AmmoPercentage)
	{
		return default(float);
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xC09F2C", Offset = "0xC09F2C", VA = "0xC09F2C")]
	public ZNPlayerHand()
	{
	}
}
[Token(Token = "0x2000139")]
public interface IZNDamageable
{
	[Token(Token = "0x60008B2")]
	void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults);

	[Token(Token = "0x60008B3")]
	GameObject GetDamageableOwner();

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xC0A500", Offset = "0xC0A500", VA = "0xC0A500", Slot = "2")]
	IZNDamageable GetRealDamageable()
	{
		return null;
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xC0A504", Offset = "0xC0A504", VA = "0xC0A504", Slot = "3")]
	bool CanTakeDamage()
	{
		return default(bool);
	}

	[Token(Token = "0x60008B6")]
	bool IsCriticalHit(EZNBodyParts InBodyPart);

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xC0A50C", Offset = "0xC0A50C", VA = "0xC0A50C", Slot = "5")]
	float GetDamageMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xC0A514", Offset = "0xC0A514", VA = "0xC0A514", Slot = "6")]
	float GetStaggerMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xC0A51C", Offset = "0xC0A51C", VA = "0xC0A51C", Slot = "7")]
	int GetMaxReceivableDamage()
	{
		return default(int);
	}

	[Token(Token = "0x60008BA")]
	void AssignTeamNumber(int InTeamNumber);

	[Token(Token = "0x60008BB")]
	int GetTeamNumber();

	[Token(Token = "0x60008BC")]
	void NotifyDamageableAdded();

	[Token(Token = "0x60008BD")]
	void NotifyDamageableRemoved();
}
[Token(Token = "0x200013A")]
public interface IZNGrabbable
{
	[Token(Token = "0x60008BE")]
	bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand);

	[Token(Token = "0x60008BF")]
	bool CanBeGrabbed(out string OutFailureReason);

	[Token(Token = "0x60008C0")]
	GameObject GetGrabbableOwner();
}
[Token(Token = "0x200013B")]
public interface IZNNavigable
{
	[Token(Token = "0x60008C1")]
	GameObject GetNavigableOwner();

	[Token(Token = "0x60008C2")]
	Vector3 GetDestinationPosition(GameObject InNavigatingObject);

	[Token(Token = "0x60008C3")]
	Vector3 GetPrimaryPosition(GameObject InNavigatingObject);

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xC0A524", Offset = "0xC0A524", VA = "0xC0A524", Slot = "3")]
	float GetNavigableWeight()
	{
		return default(float);
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0xC0A52C", Offset = "0xC0A52C", VA = "0xC0A52C", Slot = "4")]
	float GetStoppingDistance()
	{
		return default(float);
	}

	[Token(Token = "0x60008C6")]
	void NotifyNavigableAdded();

	[Token(Token = "0x60008C7")]
	void NotifyNavigableRemoved();
}
[Token(Token = "0x200013C")]
[CreateAssetMenu(fileName = "ZNLevelingAlgorithmAsset", menuName = "Scriptable Objects/Leveling/ZNLevelingAlgorithmAsset")]
public class ZNLevelingAlgorithmAsset : ScriptableObject
{
	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The experience required to level up at each level.")]
	[SerializeField]
	protected int BaseExperienceToLevelUp;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The rate that required experience goes up by each level.")]
	protected double ExperienceMultiplierRate;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The experience required to level up at each level.")]
	[SerializeField]
	protected List<int> ExperienceRequiredToLevelUp;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The level we are checking the total experience required")]
	[SerializeField]
	protected int CheckLevel;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Tooltip("The total experience required to level up at the check level.")]
	protected int TotalExperienceRequiredForCheckLevel;

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xC0A534", Offset = "0xC0A534", VA = "0xC0A534")]
	public ZNLevelingAlgorithmAsset()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xC0A654", Offset = "0xC0A654", VA = "0xC0A654")]
	public int GetTotalExperienceRequiredForLevel(int InLevel)
	{
		return default(int);
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xC0A714", Offset = "0xC0A714", VA = "0xC0A714")]
	public int GetExperienceRequiredForLevel(int InLevel)
	{
		return default(int);
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xC0A7B0", Offset = "0xC0A7B0", VA = "0xC0A7B0")]
	public int GetLevelForExperience(int InExperience)
	{
		return default(int);
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xC0A850", Offset = "0xC0A850", VA = "0xC0A850")]
	public int GetExperienceAtLevelForExperience(int InExperience)
	{
		return default(int);
	}
}
[Token(Token = "0x200013D")]
public class ZNNotifierMarkerComponent : MonoBehaviour
{
	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <DelayOneFrameThenUpdateWidgetDisplay>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNNotifierMarkerComponent <>4__this;

		[Token(Token = "0x17000068")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xC0AF70", Offset = "0xC0AF70", VA = "0xC0AF70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xC0AFB8", Offset = "0xC0AFB8", VA = "0xC0AFB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xC0AB50", Offset = "0xC0AB50", VA = "0xC0AB50")]
		[DebuggerHidden]
		public <DelayOneFrameThenUpdateWidgetDisplay>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xC0AEC4", Offset = "0xC0AEC4", VA = "0xC0AEC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xC0AEC8", Offset = "0xC0AEC8", VA = "0xC0AEC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xC0AF78", Offset = "0xC0AF78", VA = "0xC0AF78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNNotifierMarkerWidget NotifierMarkerWidget;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Forces the scale to world 1, 1, 1 on start")]
	[SerializeField]
	public bool bForceScaleToWorld1;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	[Tooltip("Require a hand to be in range of this object to show")]
	protected bool bRequireHandInRange;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	[Tooltip("Require one hand to be holding an object for this to show")]
	protected bool bRequireHoldingObject;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	[SerializeField]
	[Tooltip("Require one hand to not be holding anything for this to show")]
	protected bool bRequireEmptyHand;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("A list of connected notifier marker components that will also get updated and share the VisibleBySource value whenever this one does")]
	protected List<ZNNotifierMarkerComponent> ConnectedNotifierMarkerComponents;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected List<ZNPlayerHand> OverlappedPlayerHands;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool bVisibleBySource;

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xC0A94C", Offset = "0xC0A94C", VA = "0xC0A94C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xC0A99C", Offset = "0xC0A99C", VA = "0xC0A99C", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xBFC090", Offset = "0xBFC090", VA = "0xBFC090")]
	public void SetVisibleBySource(bool bNewVisibleBySource, bool bConnectedUpdate = false)
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xC0A408", Offset = "0xC0A408", VA = "0xC0A408")]
	public void AddPlayerHandOverlap(ZNPlayerHand InPlayerHand)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xC0A3A4", Offset = "0xC0A3A4", VA = "0xC0A3A4")]
	public void RemovePlayerHandOverlap(ZNPlayerHand InPlayerHand)
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xC0AA10", Offset = "0xC0AA10", VA = "0xC0AA10")]
	public void UpdateWidgetDisplay(bool bDelayOneFrame = false)
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xC0AAE8", Offset = "0xC0AAE8", VA = "0xC0AAE8")]
	[IteratorStateMachine(typeof(<DelayOneFrameThenUpdateWidgetDisplay>d__14))]
	protected IEnumerator DelayOneFrameThenUpdateWidgetDisplay()
	{
		return null;
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xC0AB78", Offset = "0xC0AB78", VA = "0xC0AB78", Slot = "6")]
	public virtual bool ShouldDisplayWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xC0AC08", Offset = "0xC0AC08", VA = "0xC0AC08")]
	public bool IsOverlappedHandHoldingObject(bool bCheckIfObjectCanChangeReturnPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xC0AD4C", Offset = "0xC0AD4C", VA = "0xC0AD4C")]
	public bool IsOverlappedHandEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xC0AE40", Offset = "0xC0AE40", VA = "0xC0AE40")]
	public ZNNotifierMarkerComponent()
	{
	}
}
[Token(Token = "0x200013F")]
public class ZNOVRSwapper : MonoBehaviour
{
	[Token(Token = "0x2000140")]
	[CompilerGenerated]
	private sealed class <DelayedSwap>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNOVRSwapper <>4__this;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008E6")]
			[Address(RVA = "0xC0B1CC", Offset = "0xC0B1CC", VA = "0xC0B1CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008E8")]
			[Address(RVA = "0xC0B214", Offset = "0xC0B214", VA = "0xC0B214", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xC0B048", Offset = "0xC0B048", VA = "0xC0B048")]
		[DebuggerHidden]
		public <DelayedSwap>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xC0B128", Offset = "0xC0B128", VA = "0xC0B128", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xC0B12C", Offset = "0xC0B12C", VA = "0xC0B12C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xC0B1D4", Offset = "0xC0B1D4", VA = "0xC0B1D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000142")]
	[CompilerGenerated]
	private sealed class <DelayedUpdateTransformAndDestroy>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DelayTime;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNOVRSwapper <>4__this;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject NewGameObject;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xC0B7C0", Offset = "0xC0B7C0", VA = "0xC0B7C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xC0B808", Offset = "0xC0B808", VA = "0xC0B808", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xC0B0F8", Offset = "0xC0B0F8", VA = "0xC0B0F8")]
		[DebuggerHidden]
		public <DelayedUpdateTransformAndDestroy>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xC0B2C8", Offset = "0xC0B2C8", VA = "0xC0B2C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xC0B2CC", Offset = "0xC0B2CC", VA = "0xC0B2CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xC0B7C8", Offset = "0xC0B7C8", VA = "0xC0B7C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The wall prefab")]
	protected GameObject PF_Wall;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The floor prefab")]
	protected GameObject PF_Floor;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The ceiling prefab")]
	[SerializeField]
	protected GameObject PF_Ceiling;

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xC0AFC0", Offset = "0xC0AFC0", VA = "0xC0AFC0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0xC0AFE0", Offset = "0xC0AFE0", VA = "0xC0AFE0")]
	[IteratorStateMachine(typeof(<DelayedSwap>d__4))]
	private IEnumerator DelayedSwap()
	{
		return null;
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xC0B070", Offset = "0xC0B070", VA = "0xC0B070")]
	private void Swap()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xC0B074", Offset = "0xC0B074", VA = "0xC0B074")]
	[IteratorStateMachine(typeof(<DelayedUpdateTransformAndDestroy>d__6))]
	private IEnumerator DelayedUpdateTransformAndDestroy(float DelayTime, GameObject NewGameObject)
	{
		return null;
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0xC0B120", Offset = "0xC0B120", VA = "0xC0B120")]
	public ZNOVRSwapper()
	{
	}
}
[Token(Token = "0x2000143")]
public class ZNOVRWall : MonoBehaviour
{
	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xC0B810", Offset = "0xC0B810", VA = "0xC0B810")]
	public ZNOVRWall()
	{
	}
}
[Token(Token = "0x2000144")]
public class ZNVRModeMaterialSwapper : MonoBehaviour
{
	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected MeshRenderer MaterialMeshRenderer;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SkinnedMeshRenderer MaterialSkinnedMeshRenderer;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNNoirFilterMesh NoirFilterMesh;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The material to use in virtual reality mode")]
	protected Material VirtualRealityMaterial;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The material to use in mixed reality mode")]
	[SerializeField]
	protected Material MixedRealityMaterial;

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xC0B818", Offset = "0xC0B818", VA = "0xC0B818")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xC0B8B8", Offset = "0xC0B8B8", VA = "0xC0B8B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xC0BB4C", Offset = "0xC0BB4C", VA = "0xC0BB4C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xC0B9F8", Offset = "0xC0B9F8", VA = "0xC0B9F8")]
	protected void VirtualRealityModeChanged(EZNVirtualRealityModes NewVirtualRealityMode)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xC0BC48", Offset = "0xC0BC48", VA = "0xC0BC48")]
	public ZNVRModeMaterialSwapper()
	{
	}
}
[Token(Token = "0x2000145")]
[CreateAssetMenu(fileName = "ZNCreateBarricadeInstantModAsset", menuName = "Scriptable Objects/Mods/ZNCreateBarricadeInstantModAsset")]
public class ZNCreateBarricadeInstantModAsset : SAInstantModAsset
{
	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xC0BC50", Offset = "0xC0BC50", VA = "0xC0BC50")]
	public ZNCreateBarricadeInstantModAsset()
	{
	}
}
[Token(Token = "0x2000146")]
[CreateAssetMenu(fileName = "ZNDropHealthPackModAsset", menuName = "Scriptable Objects/Mods/ZNDropHealthPackModAsset")]
public class ZNDropHealthPackModAsset : SAModAsset
{
	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("After how many kills do we drop the health pack")]
	[SerializeField]
	protected int DropAfterKillsInterval;

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xC0BD44", Offset = "0xC0BD44", VA = "0xC0BD44")]
	public ZNDropHealthPackModAsset()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xC0BE40", Offset = "0xC0BE40", VA = "0xC0BE40")]
	public int GetDropAfterKillsInterval()
	{
		return default(int);
	}
}
[Token(Token = "0x2000147")]
[CreateAssetMenu(fileName = "ZNElectricityZoneModAsset", menuName = "Scriptable Objects/Mods/ZNElectricityZoneModAsset")]
public class ZNElectricityZoneModAsset : SAModAsset
{
	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The prefab for the electricity zone")]
	[SerializeField]
	protected GameObject PF_ElectricityZone;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much damage the electricity zone does")]
	[SerializeField]
	protected int Damage;

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xC0BE48", Offset = "0xC0BE48", VA = "0xC0BE48")]
	public ZNElectricityZoneModAsset()
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xC0BF44", Offset = "0xC0BF44", VA = "0xC0BF44")]
	public GameObject GetPF_ElectricityZone()
	{
		return null;
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xC0BF4C", Offset = "0xC0BF4C", VA = "0xC0BF4C")]
	public int GetDamage()
	{
		return default(int);
	}
}
[Token(Token = "0x2000148")]
[CreateAssetMenu(fileName = "ZNExplodeEnemyOnDeathFromWeaponModAsset", menuName = "Scriptable Objects/Mods/ZNExplodeEnemyOnDeathFromWeaponModAsset")]
public class ZNExplodeEnemyOnDeathFromWeaponModAsset : SAModAsset
{
	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The weapon asset that must get the killing blow to cause the explosion")]
	[SerializeField]
	protected ZNWeaponAsset RequiredWeaponAsset;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much damage the explosion does when super far")]
	[SerializeField]
	protected int MinDamage;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Tooltip("How much damage the explosion does when super close")]
	protected int MaxDamage;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("How much range the explosion has")]
	[SerializeField]
	protected float DamageRadius;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("VFX")]
	[Tooltip("The initialization info for the VFX that plays when this explodes")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo ExplodeVFXInitializationInfo;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("SFX")]
	[Tooltip("The SFX that plays when this explodes")]
	protected Event ExplodeSFX;

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xC0BF54", Offset = "0xC0BF54", VA = "0xC0BF54")]
	public ZNExplodeEnemyOnDeathFromWeaponModAsset()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xC0C05C", Offset = "0xC0C05C", VA = "0xC0C05C")]
	public ZNWeaponAsset GetRequiredWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xC0C064", Offset = "0xC0C064", VA = "0xC0C064")]
	public int GetMinDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xC0C06C", Offset = "0xC0C06C", VA = "0xC0C06C")]
	public int GetMaxDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xC0C074", Offset = "0xC0C074", VA = "0xC0C074")]
	public float GetDamageRadius()
	{
		return default(float);
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xC0C07C", Offset = "0xC0C07C", VA = "0xC0C07C")]
	public FSAPooledObjectInitializationInfo GetExplodeVFXInitializationInfo()
	{
		return null;
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xC0C084", Offset = "0xC0C084", VA = "0xC0C084")]
	public Event GetExplodeSFX()
	{
		return null;
	}
}
[Token(Token = "0x2000149")]
[CreateAssetMenu(fileName = "ZNExplodeOnDeathModAsset", menuName = "Scriptable Objects/Mods/ZNExplodeOnDeathModAsset")]
public class ZNExplodeOnDeathModAsset : SAModAsset
{
	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("How much damage the explosion does when super far")]
	[SerializeField]
	protected int MinDamage;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Tooltip("How much damage the explosion does when super close")]
	protected int MaxDamage;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much range the explosion has")]
	[SerializeField]
	protected float DamageRadius;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("VFX")]
	[SerializeField]
	[Tooltip("The initialization info for the VFX that plays when this explodes")]
	protected FSAPooledObjectInitializationInfo ExplodeVFXInitializationInfo;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("SFX")]
	[Tooltip("The SFX that plays when this explodes")]
	[SerializeField]
	protected Event ExplodeSFX;

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xC0C08C", Offset = "0xC0C08C", VA = "0xC0C08C")]
	public ZNExplodeOnDeathModAsset()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xC0C194", Offset = "0xC0C194", VA = "0xC0C194")]
	public int GetMinDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xC0C19C", Offset = "0xC0C19C", VA = "0xC0C19C")]
	public int GetMaxDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xC0C1A4", Offset = "0xC0C1A4", VA = "0xC0C1A4")]
	public float GetDamageRadius()
	{
		return default(float);
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xC0C1AC", Offset = "0xC0C1AC", VA = "0xC0C1AC")]
	public FSAPooledObjectInitializationInfo GetExplodeVFXInitializationInfo()
	{
		return null;
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xC0C1B4", Offset = "0xC0C1B4", VA = "0xC0C1B4")]
	public Event GetExplodeSFX()
	{
		return null;
	}
}
[Token(Token = "0x200014A")]
[CreateAssetMenu(fileName = "ZNGiveCoinsInstantModAsset", menuName = "Scriptable Objects/Mods/ZNGiveCoinsInstantModAsset")]
public class ZNGiveCoinsInstantModAsset : SAInstantModAsset
{
	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Gets the number of coins given to the player")]
	[SerializeField]
	protected int NumCoinsGiven;

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xC0C1BC", Offset = "0xC0C1BC", VA = "0xC0C1BC")]
	public ZNGiveCoinsInstantModAsset()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xC0C2B8", Offset = "0xC0C2B8", VA = "0xC0C2B8")]
	public int GetNumCoinsGiven()
	{
		return default(int);
	}
}
[Token(Token = "0x200014B")]
[CreateAssetMenu(fileName = "ZNGiveExtraLifeInstantModAsset", menuName = "Scriptable Objects/Mods/ZNGiveExtraLifeInstantModAsset")]
public class ZNGiveExtraLifeInstantModAsset : SAInstantModAsset
{
	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Gets the number of extra lives given to the player")]
	[SerializeField]
	protected int NumExtraLivesGiven;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xC0C2C0", Offset = "0xC0C2C0", VA = "0xC0C2C0")]
	public ZNGiveExtraLifeInstantModAsset()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xC0C3BC", Offset = "0xC0C3BC", VA = "0xC0C3BC")]
	public int GetNumExtraLivesGiven()
	{
		return default(int);
	}
}
[Token(Token = "0x200014C")]
[CreateAssetMenu(fileName = "ZNMaxExtraLiveseIncreaseModAsset", menuName = "Scriptable Objects/Mods/ZNMaxExtraLivesIncreaseModAsset")]
public class ZNMaxExtraLivesIncreaseModAsset : SAModAsset
{
	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The increase extra lives integer property")]
	[SerializeField]
	protected FSAIntegerProperty ExtraLivesIncreaseIntegerProperty;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If we should also add extra lives that we increased the max extra lives by")]
	[SerializeField]
	protected bool bAddIncreasedExtraLives;

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xC0C3C4", Offset = "0xC0C3C4", VA = "0xC0C3C4")]
	public ZNMaxExtraLivesIncreaseModAsset()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xC0C4C0", Offset = "0xC0C4C0", VA = "0xC0C4C0")]
	public FSAIntegerProperty GetIncreaseMaxExtraLivesIntegerProperty()
	{
		return null;
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xC0C4C8", Offset = "0xC0C4C8", VA = "0xC0C4C8")]
	public bool DoesAddIncreasedExtraLives()
	{
		return default(bool);
	}
}
[Token(Token = "0x200014D")]
[CreateAssetMenu(fileName = "ZNMaxHealthAdditiveModAsset", menuName = "Scriptable Objects/Mods/ZNMaxHealthAdditiveModAsset")]
public class ZNMaxHealthAdditiveModAsset : SAModAsset
{
	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The additive max health float property")]
	protected FSAFloatProperty MaxHealthAdditiveFloatProperty;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("If we should also recover health that we added the max health by")]
	protected bool bRecoverAddedHealth;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Tooltip("If set to true, multiplies the float property by the current wave number")]
	[SerializeField]
	protected bool bUseWaveMultiplier;

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xC0C4D0", Offset = "0xC0C4D0", VA = "0xC0C4D0")]
	public ZNMaxHealthAdditiveModAsset()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xC0C5CC", Offset = "0xC0C5CC", VA = "0xC0C5CC")]
	public FSAFloatProperty GetAdditiveMaxHealthFloatProperty()
	{
		return null;
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xC0C5D4", Offset = "0xC0C5D4", VA = "0xC0C5D4")]
	public bool DoesRecoverAddedHealth()
	{
		return default(bool);
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xC0C5DC", Offset = "0xC0C5DC", VA = "0xC0C5DC")]
	public bool DoesUseWaveMultiplier()
	{
		return default(bool);
	}
}
[Token(Token = "0x200014E")]
[CreateAssetMenu(fileName = "ZNMaxHealthIncreaseAfterWaveModAsset", menuName = "Scriptable Objects/Mods/ZNMaxHealthIncreaseAfterWaveModAsset")]
public class ZNMaxHealthIncreaseAfterWaveModAsset : SAModAsset
{
	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The increase max health integer property")]
	[SerializeField]
	protected FSAIntegerProperty MaxHealthIncreaseIntegerProperty;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("If we should also recover health that we increased the max health by")]
	protected bool bRecoverIncreasedHealth;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Tooltip("If we should also fully recover all health")]
	[SerializeField]
	protected bool bFullyRecoverHealth;

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xC0C5E4", Offset = "0xC0C5E4", VA = "0xC0C5E4")]
	public ZNMaxHealthIncreaseAfterWaveModAsset()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xC0C6E0", Offset = "0xC0C6E0", VA = "0xC0C6E0")]
	public FSAIntegerProperty GetIncreaseMaxHealthIntegerProperty()
	{
		return null;
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xC0C6E8", Offset = "0xC0C6E8", VA = "0xC0C6E8")]
	public bool DoesRecoverIncreasedHealth()
	{
		return default(bool);
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xC0C6F0", Offset = "0xC0C6F0", VA = "0xC0C6F0")]
	public bool DoesFullyRecoverHealth()
	{
		return default(bool);
	}
}
[Token(Token = "0x200014F")]
[CreateAssetMenu(fileName = "ZNMaxHealthIncreaseModAsset", menuName = "Scriptable Objects/Mods/ZNMaxHealthIncreaseModAsset")]
public class ZNMaxHealthIncreaseModAsset : SAModAsset
{
	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The increase max health integer property")]
	[SerializeField]
	protected FSAIntegerProperty MaxHealthIncreaseIntegerProperty;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If we should also recover health that we increased the max health by")]
	[SerializeField]
	protected bool bRecoverIncreasedHealth;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Tooltip("If we should also fully recover all health")]
	[SerializeField]
	protected bool bFullyRecoverHealth;

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xC0C6F8", Offset = "0xC0C6F8", VA = "0xC0C6F8")]
	public ZNMaxHealthIncreaseModAsset()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xC0C7F4", Offset = "0xC0C7F4", VA = "0xC0C7F4")]
	public FSAIntegerProperty GetIncreaseMaxHealthIntegerProperty()
	{
		return null;
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xC0C7FC", Offset = "0xC0C7FC", VA = "0xC0C7FC")]
	public bool DoesRecoverIncreasedHealth()
	{
		return default(bool);
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xC0C804", Offset = "0xC0C804", VA = "0xC0C804")]
	public bool DoesFullyRecoverHealth()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000150")]
[CreateAssetMenu(fileName = "ZNModAssetTest", menuName = "Scriptable Objects/Mods/ZNModAssetTest")]
public class ZNModAssetTest : SAModAsset
{
	[Token(Token = "0x600091F")]
	[Address(RVA = "0xC0C80C", Offset = "0xC0C80C", VA = "0xC0C80C")]
	public ZNModAssetTest()
	{
	}
}
[Token(Token = "0x2000151")]
[CreateAssetMenu(fileName = "ZNShowDamageModAsset", menuName = "Scriptable Objects/Mods/ZNShowDamageModAsset")]
public class ZNShowDamageModAsset : SAModAsset
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject PF_DisplayDamageText;

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xC0C814", Offset = "0xC0C814", VA = "0xC0C814")]
	public GameObject GetPF_DisplayDamageText()
	{
		return null;
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xC0C81C", Offset = "0xC0C81C", VA = "0xC0C81C")]
	public ZNShowDamageModAsset()
	{
	}
}
[Token(Token = "0x2000152")]
[CreateAssetMenu(fileName = "ZNWaveMultiplierPropertyModAsset", menuName = "Scriptable Objects/Mods/ZNWaveMultiplierPropertyModAsset")]
public class ZNWaveMultiplierPropertyModAsset : SAPropertyModAsset
{
	[Token(Token = "0x6000922")]
	[Address(RVA = "0xC0C824", Offset = "0xC0C824", VA = "0xC0C824")]
	public ZNWaveMultiplierPropertyModAsset()
	{
	}
}
[Token(Token = "0x2000153")]
public class ZNCreateBarricadeInstantModInstance : SAInstantModInstance
{
	[Token(Token = "0x6000923")]
	[Address(RVA = "0xC0C918", Offset = "0xC0C918", VA = "0xC0C918", Slot = "6")]
	protected override void DoInstantModEffects(SAInstantModAsset InInstantModAsset)
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xC0CC2C", Offset = "0xC0CC2C", VA = "0xC0CC2C")]
	public ZNCreateBarricadeInstantModInstance()
	{
	}
}
[Token(Token = "0x2000154")]
public class ZNDropHealthPackModInstance : SAModInstance
{
	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNEnemyDropSpawner EnemyDropSpawner;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int DropAfterKillsInterval;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int CurrentKills;

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xC0CC34", Offset = "0xC0CC34", VA = "0xC0CC34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xC0CD58", Offset = "0xC0CD58", VA = "0xC0CD58", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xC0CE6C", Offset = "0xC0CE6C", VA = "0xC0CE6C", Slot = "5")]
	public override void InitializeModInstance(SAModAsset InModAsset)
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xC0CF40", Offset = "0xC0CF40", VA = "0xC0CF40")]
	protected void SpawnHealthPickup(ZNEnemyBase InEnemy)
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xC0CFD8", Offset = "0xC0CFD8", VA = "0xC0CFD8")]
	protected void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xC0D108", Offset = "0xC0D108", VA = "0xC0D108")]
	public ZNDropHealthPackModInstance()
	{
	}
}
[Token(Token = "0x2000155")]
public class ZNElectricityZoneModInstance : SAModInstance
{
	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNElectricityZone ManagedElectricityZone;

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xC0D118", Offset = "0xC0D118", VA = "0xC0D118")]
	private void Start()
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xC0D39C", Offset = "0xC0D39C", VA = "0xC0D39C", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xC0D1E0", Offset = "0xC0D1E0", VA = "0xC0D1E0")]
	protected void CreateElectricityZone()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xC0D3B8", Offset = "0xC0D3B8", VA = "0xC0D3B8")]
	protected void RemoveElectricityZone()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xC0D444", Offset = "0xC0D444", VA = "0xC0D444")]
	public ZNElectricityZoneModInstance()
	{
	}
}
[Token(Token = "0x2000156")]
public class ZNExplodeEnemyOnDeathFromWeaponModInstance : SAModInstance
{
	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNExplodeEnemyOnDeathFromWeaponModAsset ExplodeEnemyOnDeathFromWeaponModAsset;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNGameplayGameMode GameplayGameMode;

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xC0D44C", Offset = "0xC0D44C", VA = "0xC0D44C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xC0D5E0", Offset = "0xC0D5E0", VA = "0xC0D5E0", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xC0D6EC", Offset = "0xC0D6EC", VA = "0xC0D6EC", Slot = "5")]
	public override void InitializeModInstance(SAModAsset InModAsset)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xC0D848", Offset = "0xC0D848", VA = "0xC0D848")]
	private void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xC0D9F0", Offset = "0xC0D9F0", VA = "0xC0D9F0")]
	protected void Explode(ZNEnemyBase DiedEnemy)
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xC0DD14", Offset = "0xC0DD14", VA = "0xC0DD14")]
	public ZNExplodeEnemyOnDeathFromWeaponModInstance()
	{
	}
}
[Token(Token = "0x2000157")]
public class ZNExplodeOnDeathModInstance : SAModInstance
{
	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNExplodeOnDeathModAsset ExplodeOnDeathModAsset;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xC0DD1C", Offset = "0xC0DD1C", VA = "0xC0DD1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0xC0DEB4", Offset = "0xC0DEB4", VA = "0xC0DEB4", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0xC0DFC0", Offset = "0xC0DFC0", VA = "0xC0DFC0", Slot = "5")]
	public override void InitializeModInstance(SAModAsset InModAsset)
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xC0E11C", Offset = "0xC0E11C", VA = "0xC0E11C")]
	private void CharacterDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xC0E120", Offset = "0xC0E120", VA = "0xC0E120")]
	protected void Explode()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xC0E438", Offset = "0xC0E438", VA = "0xC0E438")]
	public ZNExplodeOnDeathModInstance()
	{
	}
}
[Token(Token = "0x2000158")]
public class ZNGiveCoinsInstantModInstance : SAInstantModInstance
{
	[Token(Token = "0x600093C")]
	[Address(RVA = "0xC0E440", Offset = "0xC0E440", VA = "0xC0E440", Slot = "6")]
	protected override void DoInstantModEffects(SAInstantModAsset InInstantModAsset)
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xC0E5A4", Offset = "0xC0E5A4", VA = "0xC0E5A4")]
	public ZNGiveCoinsInstantModInstance()
	{
	}
}
[Token(Token = "0x2000159")]
public class ZNGiveExtraLifeInstantModInstance : SAInstantModInstance
{
	[Token(Token = "0x600093E")]
	[Address(RVA = "0xC0E5AC", Offset = "0xC0E5AC", VA = "0xC0E5AC", Slot = "6")]
	protected override void DoInstantModEffects(SAInstantModAsset InInstantModAsset)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xC0E710", Offset = "0xC0E710", VA = "0xC0E710")]
	public ZNGiveExtraLifeInstantModInstance()
	{
	}
}
[Token(Token = "0x200015A")]
public class ZNMaxExtraLivesIncreaseModInstance : SAModInstance
{
	[Token(Token = "0x6000940")]
	[Address(RVA = "0xC0E718", Offset = "0xC0E718", VA = "0xC0E718")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xC0E864", Offset = "0xC0E864", VA = "0xC0E864", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xC0E9A8", Offset = "0xC0E9A8", VA = "0xC0E9A8", Slot = "6")]
	protected virtual void DoAdditionalEffects(ZNMaxExtraLivesIncreaseModAsset InIncreaseMaxExtraLivesModAsset)
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xC0EAF8", Offset = "0xC0EAF8", VA = "0xC0EAF8")]
	public ZNMaxExtraLivesIncreaseModInstance()
	{
	}
}
[Token(Token = "0x200015B")]
public class ZNMaxHealthAdditiveModInstance : SAModInstance
{
	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static ZNWaveManager WaveManager;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int CurrentWaveNumber;

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xC0EB00", Offset = "0xC0EB00", VA = "0xC0EB00")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xC0ED70", Offset = "0xC0ED70", VA = "0xC0ED70", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xC0EF04", Offset = "0xC0EF04", VA = "0xC0EF04", Slot = "6")]
	protected virtual void DoAdditionalEffects(ZNMaxHealthAdditiveModAsset InAdditiveMaxHealthModAsset)
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xC0F12C", Offset = "0xC0F12C", VA = "0xC0F12C")]
	public ZNMaxHealthAdditiveModInstance()
	{
	}
}
[Token(Token = "0x200015C")]
public class ZNMaxHealthIncreaseAfterWaveModInstance : SAModInstance
{
	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNMaxHealthIncreaseAfterWaveModAsset IncreaseMaxHealthAfterWaveModAsset;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xC0F13C", Offset = "0xC0F13C", VA = "0xC0F13C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0xC0F2D4", Offset = "0xC0F2D4", VA = "0xC0F2D4", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xC0F3E0", Offset = "0xC0F3E0", VA = "0xC0F3E0")]
	protected void ApplyHealthIncrease()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0xC0F514", Offset = "0xC0F514", VA = "0xC0F514", Slot = "6")]
	protected virtual void DoAdditionalEffects(ZNMaxHealthIncreaseAfterWaveModAsset InIncreaseMaxHealthAfterWaveModAsset)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xC0F6B4", Offset = "0xC0F6B4", VA = "0xC0F6B4")]
	protected void WaveEnded(int WaveNumber)
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xC0F6B8", Offset = "0xC0F6B8", VA = "0xC0F6B8")]
	public ZNMaxHealthIncreaseAfterWaveModInstance()
	{
	}
}
[Token(Token = "0x200015D")]
public class ZNMaxHealthIncreaseModInstance : SAModInstance
{
	[Token(Token = "0x600094E")]
	[Address(RVA = "0xC0F6C0", Offset = "0xC0F6C0", VA = "0xC0F6C0")]
	protected void Start()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xC0F80C", Offset = "0xC0F80C", VA = "0xC0F80C", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xC0F950", Offset = "0xC0F950", VA = "0xC0F950", Slot = "6")]
	protected virtual void DoAdditionalEffects(ZNMaxHealthIncreaseModAsset InIncreaseMaxHealthModAsset)
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xC0FAF0", Offset = "0xC0FAF0", VA = "0xC0FAF0")]
	public ZNMaxHealthIncreaseModInstance()
	{
	}
}
[Token(Token = "0x200015E")]
public class ZNModInstanceTest : SAModInstance
{
	[Token(Token = "0x6000952")]
	[Address(RVA = "0xC0FAF8", Offset = "0xC0FAF8", VA = "0xC0FAF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0xC0FBAC", Offset = "0xC0FBAC", VA = "0xC0FBAC")]
	public ZNModInstanceTest()
	{
	}
}
[Token(Token = "0x200015F")]
public class ZNShowDamageModInstance : SAModInstance
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SACharacter OwningCharacter;

	[Token(Token = "0x6000954")]
	[Address(RVA = "0xC0FBB4", Offset = "0xC0FBB4", VA = "0xC0FBB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0xC0FCFC", Offset = "0xC0FCFC", VA = "0xC0FCFC", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xC0FE08", Offset = "0xC0FE08", VA = "0xC0FE08")]
	private void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xC10100", Offset = "0xC10100", VA = "0xC10100")]
	public ZNShowDamageModInstance()
	{
	}
}
[Token(Token = "0x2000160")]
public class ZNWaveMultiplierPropertyModInstance : SAPropertyModInstance
{
	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static ZNWaveManager WaveManager;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int CurrentWaveNumber;

	[Token(Token = "0x6000958")]
	[Address(RVA = "0xC11108", Offset = "0xC11108", VA = "0xC11108", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xC11230", Offset = "0xC11230", VA = "0xC11230", Slot = "7")]
	protected override void AddPropertyMod()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xC114E4", Offset = "0xC114E4", VA = "0xC114E4", Slot = "8")]
	protected override void RemovePropertyMod()
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xC11798", Offset = "0xC11798", VA = "0xC11798")]
	public ZNWaveMultiplierPropertyModInstance()
	{
	}
}
[Token(Token = "0x2000161")]
public class ZNModManagerComponent : SAModManagerComponent
{
	[Token(Token = "0x600095C")]
	[Address(RVA = "0xC117A8", Offset = "0xC117A8", VA = "0xC117A8")]
	public ZNModManagerComponent()
	{
	}
}
[Token(Token = "0x2000162")]
public class Wwise_Music_MGMT : MonoBehaviour
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private State Music_Selector;

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xC117B0", Offset = "0xC117B0", VA = "0xC117B0")]
	private void Start()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xC117CC", Offset = "0xC117CC", VA = "0xC117CC")]
	public Wwise_Music_MGMT()
	{
	}
}
[Token(Token = "0x2000163")]
public class ZNMusicMGMT : MonoBehaviour
{
	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Event Music_Selector;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RTPC _rtpc_Health;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Slider _healthSlider;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RTPC _rtpc_isPaused;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Slider _isPausedSlider;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RTPC _rtpc_MusicVol;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Slider _isMusicVolSlider;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RTPC _rtpc_SfxVol;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Slider _isSfxVolSlider;

	[Token(Token = "0x1700006E")]
	public static ZNMusicMGMT musicMGMTSingleton
	{
		[Token(Token = "0x600095F")]
		[Address(RVA = "0xC117D4", Offset = "0xC117D4", VA = "0xC117D4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000960")]
		[Address(RVA = "0xC1181C", Offset = "0xC1181C", VA = "0xC1181C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xC11868", Offset = "0xC11868", VA = "0xC11868")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xC119A8", Offset = "0xC119A8", VA = "0xC119A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xC11A30", Offset = "0xC11A30", VA = "0xC11A30")]
	public void SetMusicState(string musicTrack)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xC11AA0", Offset = "0xC11AA0", VA = "0xC11AA0")]
	public void StopMusic()
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xC11AD4", Offset = "0xC11AD4", VA = "0xC11AD4")]
	public void setLowHealth(float health)
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xC11B10", Offset = "0xC11B10", VA = "0xC11B10")]
	public void isPaused(float paused)
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xC11B4C", Offset = "0xC11B4C", VA = "0xC11B4C")]
	public void setMusicVol(float vol)
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0xC11B88", Offset = "0xC11B88", VA = "0xC11B88")]
	public void setSfxVol(float vol)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0xC11BC4", Offset = "0xC11BC4", VA = "0xC11BC4")]
	public void setPlayerPrefsAudio()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0xC11C60", Offset = "0xC11C60", VA = "0xC11C60")]
	public void getPlayerPrefsAudio()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0xC11D04", Offset = "0xC11D04", VA = "0xC11D04")]
	private void Update()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xC11D94", Offset = "0xC11D94", VA = "0xC11D94")]
	public ZNMusicMGMT()
	{
	}
}
[Token(Token = "0x2000164")]
public class ZNNoirFilterBase : MonoBehaviour
{
	[Token(Token = "0x600096D")]
	[Address(RVA = "0xC11D9C", Offset = "0xC11D9C", VA = "0xC11D9C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xC12068", Offset = "0xC12068", VA = "0xC12068", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xC1206C", Offset = "0xC1206C", VA = "0xC1206C", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0xC1212C", Offset = "0xC1212C", VA = "0xC1212C", Slot = "7")]
	protected virtual void InitializeNoirFilter()
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0xC12130", Offset = "0xC12130", VA = "0xC12130")]
	public void SyncNoirFilter()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0xC12164", Offset = "0xC12164", VA = "0xC12164", Slot = "8")]
	protected virtual void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xC12168", Offset = "0xC12168", VA = "0xC12168")]
	public ZNNoirFilterBase()
	{
	}
}
[Token(Token = "0x2000165")]
public class ZNNoirFilterLight : ZNNoirFilterBase
{
	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Light NoirLight;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Color OriginalColor;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Color NoirColor;

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xC12170", Offset = "0xC12170", VA = "0xC12170", Slot = "7")]
	protected override void InitializeNoirFilter()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xC12230", Offset = "0xC12230", VA = "0xC12230", Slot = "8")]
	protected override void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xC12300", Offset = "0xC12300", VA = "0xC12300")]
	public ZNNoirFilterLight()
	{
	}
}
[Token(Token = "0x2000166")]
public class ZNNoirFilterMesh : ZNNoirFilterBase
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected MeshRenderer NoirMeshRenderer;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SkinnedMeshRenderer NoirSkinnedMeshRenderer;

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xC12308", Offset = "0xC12308", VA = "0xC12308", Slot = "7")]
	protected override void InitializeNoirFilter()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xC12384", Offset = "0xC12384", VA = "0xC12384", Slot = "8")]
	protected override void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xC1253C", Offset = "0xC1253C", VA = "0xC1253C")]
	public ZNNoirFilterMesh()
	{
	}
}
[Token(Token = "0x2000167")]
public class ZNNoirFilterText : ZNNoirFilterBase
{
	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected TextMeshProUGUI NoirText;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Color OriginalColor;

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xC12544", Offset = "0xC12544", VA = "0xC12544", Slot = "7")]
	protected override void InitializeNoirFilter()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xC125FC", Offset = "0xC125FC", VA = "0xC125FC", Slot = "8")]
	protected override void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xC126B4", Offset = "0xC126B4", VA = "0xC126B4")]
	public ZNNoirFilterText()
	{
	}
}
[Token(Token = "0x2000168")]
public class ZNNoirFilterUI : ZNNoirFilterBase
{
	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image FilterableImage;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Material FilterableMaterial;

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xC126C4", Offset = "0xC126C4", VA = "0xC126C4", Slot = "7")]
	protected override void InitializeNoirFilter()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xC12778", Offset = "0xC12778", VA = "0xC12778", Slot = "8")]
	protected override void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xC1285C", Offset = "0xC1285C", VA = "0xC1285C")]
	public ZNNoirFilterUI()
	{
	}
}
[Token(Token = "0x2000169")]
public class ZNNoirFilterVFX : ZNNoirFilterBase
{
	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("These are all the particle systems that we need to put the noir filter on")]
	protected List<ParticleSystem> NoirParticleSystems;

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xC12864", Offset = "0xC12864", VA = "0xC12864", Slot = "8")]
	protected override void NoirFilterChanged(bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xC1295C", Offset = "0xC1295C", VA = "0xC1295C")]
	protected void UpdateParticleSystem(ParticleSystem InNoirParticleSystem, bool NewNoirFilterValue)
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xC12C10", Offset = "0xC12C10", VA = "0xC12C10")]
	public ZNNoirFilterVFX()
	{
	}
}
[Token(Token = "0x200016A")]
public class ZNScoreManager : MonoBehaviour
{
	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FOnScoreValueUpdated OnScoreValueUpdatedDel;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnScoreMultiplierUpdated OnScoreMultiplierUpdatedDel;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnCurrentKillsUpdated OnCurrentKillsUpdatedDel;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnMultiplierTierUpdated OnMultiplierTierUpdatedDel;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The stats for the score multiplier by tier--tier 0 is the default with no multiplier")]
	protected List<FZNTieredScoreMultiplierStats> TieredScoreMultiplierStats;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The amount the multiplier decreases by when the player takes damage")]
	[SerializeField]
	protected int DecreaseMultiplierValue;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("How much we multiply the score from enemies this wave to add to the player when we complete an objective for a wave")]
	[SerializeField]
	protected double ObjectiveClearMultiplier;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Range(0.01f, 1f)]
	[Tooltip("How much we multiply our current score by when we cheat, then reduce the score by this amount")]
	protected double CheatingPointReductionMultiplier;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int CurrentMultiplierTier;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected int CurrentMultiplierValue;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected int MaxMultiplierValue;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected int CurrentKillsAmount;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected int CurrentScore;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected int ScoreFromEnemiesThisWave;

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xC12C18", Offset = "0xC12C18", VA = "0xC12C18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xC12CA4", Offset = "0xC12CA4", VA = "0xC12CA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xC12E94", Offset = "0xC12E94", VA = "0xC12E94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xC13028", Offset = "0xC13028", VA = "0xC13028")]
	protected void SetMultiplierValue(int InNewValue)
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xC13060", Offset = "0xC13060", VA = "0xC13060")]
	protected void UpdateMultiplierTier(int InNewTier)
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xC130F0", Offset = "0xC130F0", VA = "0xC130F0")]
	protected void AddScore(int InScoreToAdd)
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xC1311C", Offset = "0xC1311C", VA = "0xC1311C")]
	protected void UpdateCurrentScore(int InNewScore)
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xC13140", Offset = "0xC13140", VA = "0xC13140")]
	protected void UpdateCurrentKills(int InNewKillsAmount)
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xC13160", Offset = "0xC13160", VA = "0xC13160")]
	protected void EnemyKilled(ZNEnemyBase InDamagedEnemy)
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xC13358", Offset = "0xC13358", VA = "0xC13358")]
	public void AddObjectiveCompleteScore(int InScore)
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xC13384", Offset = "0xC13384", VA = "0xC13384")]
	public void ReduceScoreForCheating()
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xC133DC", Offset = "0xC133DC", VA = "0xC133DC")]
	protected void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xC13654", Offset = "0xC13654", VA = "0xC13654")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xC13664", Offset = "0xC13664", VA = "0xC13664")]
	public int GetCurrentMultiplier()
	{
		return default(int);
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xC1366C", Offset = "0xC1366C", VA = "0xC1366C")]
	public int GetMaxMultiplierValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xC13674", Offset = "0xC13674", VA = "0xC13674")]
	public int GetCurrentScore()
	{
		return default(int);
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xC1367C", Offset = "0xC1367C", VA = "0xC1367C")]
	public int GetFinalObjectiveScoreForThisWave()
	{
		return default(int);
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xC136F8", Offset = "0xC136F8", VA = "0xC136F8")]
	public ZNScoreManager()
	{
	}
}
[Token(Token = "0x200016B")]
public class ZNBarricade : ZNObstacleBase, IZNDamageable
{
	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNHealthComponent HealthComponent;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The SFX we play when the barricade is placed")]
	[SerializeField]
	protected Event BarricadePlacedSFX;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The object to destroy when we reach the first health threshold")]
	[SerializeField]
	protected GameObject ObjectToDestroyAtThreshold1;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Once we hit this health or lower, destroy the object at threshold 1")]
	[SerializeField]
	protected int HealthThreshold1;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The VFX we play on the object destroyed at threshold 1")]
	protected GameObject ObjectDestroyedAtThreshold1VFX;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The SFX we play on the object destroyed at threshold 1")]
	[SerializeField]
	protected Event ObjectDestroyedAtThreshold1SFX;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The object to destroy when we reach the second health threshold")]
	[SerializeField]
	protected GameObject ObjectToDestroyAtThreshold2;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Once we hit this health or lower, destroy the object at threshold 2")]
	[SerializeField]
	protected int HealthThreshold2;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The VFX we play on the object destroyed at threshold 2")]
	protected GameObject ObjectDestroyedAtThreshold2VFX;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The SFX we play on the object destroyed at threshold 2")]
	[SerializeField]
	protected Event ObjectDestroyedAtThreshold2SFX;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The VFX we play when the whole object is destroyed")]
	[SerializeField]
	protected GameObject DestroyedVFX;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The SFX we play when the whole object is destroyed")]
	[SerializeField]
	protected Event DestroyedSFX;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNGameModeBase GameModeRef;

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xC13790", Offset = "0xC13790", VA = "0xC13790", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xC139E8", Offset = "0xC139E8", VA = "0xC139E8", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xC13A18", Offset = "0xC13A18", VA = "0xC13A18", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xC13C40", Offset = "0xC13C40", VA = "0xC13C40")]
	protected void UpdateThresholdVisuals(int NewHealth)
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xC13EC8", Offset = "0xC13EC8", VA = "0xC13EC8")]
	private void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xC13ED0", Offset = "0xC13ED0", VA = "0xC13ED0")]
	private void HealthDepleted(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xC1400C", Offset = "0xC1400C", VA = "0xC1400C", Slot = "19")]
	public virtual void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xC140B8", Offset = "0xC140B8", VA = "0xC140B8", Slot = "20")]
	public virtual GameObject GetDamageableOwner()
	{
		return null;
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0xC140C0", Offset = "0xC140C0", VA = "0xC140C0", Slot = "21")]
	public virtual IZNDamageable GetRealDamageable()
	{
		return null;
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xC140C4", Offset = "0xC140C4", VA = "0xC140C4", Slot = "22")]
	public virtual bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xC140CC", Offset = "0xC140CC", VA = "0xC140CC", Slot = "23")]
	public virtual float GetDamageMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xC140D4", Offset = "0xC140D4", VA = "0xC140D4", Slot = "24")]
	public virtual float GetStaggerMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xC140DC", Offset = "0xC140DC", VA = "0xC140DC", Slot = "25")]
	public virtual int GetMaxReceivableDamage()
	{
		return default(int);
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xC140E4", Offset = "0xC140E4", VA = "0xC140E4", Slot = "15")]
	public void AssignTeamNumber(int InTeamNumber)
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xC140E8", Offset = "0xC140E8", VA = "0xC140E8", Slot = "16")]
	public int GetTeamNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xC13960", Offset = "0xC13960", VA = "0xC13960", Slot = "17")]
	public void NotifyDamageableAdded()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xC13BB8", Offset = "0xC13BB8", VA = "0xC13BB8", Slot = "18")]
	public void NotifyDamageableRemoved()
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xC140F0", Offset = "0xC140F0", VA = "0xC140F0")]
	public ZNBarricade()
	{
	}
}
[Token(Token = "0x200016C")]
public class ZNObstacleBase : MonoBehaviour
{
	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xC1395C", Offset = "0xC1395C", VA = "0xC1395C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xC13A14", Offset = "0xC13A14", VA = "0xC13A14", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xC13BB4", Offset = "0xC13BB4", VA = "0xC13BB4", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0xC14108", Offset = "0xC14108", VA = "0xC14108")]
	public ZNObstacleBase()
	{
	}
}
[Token(Token = "0x200016D")]
public class ZNCoinPickup : ZNPickupBase
{
	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Coin")]
	[Tooltip("The amount of coins gotten from the coin")]
	[SerializeField]
	private int CoinAmount;

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0xC14110", Offset = "0xC14110", VA = "0xC14110", Slot = "7")]
	protected override void HandlePickedUp(ZNCharacterBase InPickingUpCharacter)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0xC141FC", Offset = "0xC141FC", VA = "0xC141FC")]
	public ZNCoinPickup()
	{
	}
}
[Token(Token = "0x200016E")]
public class ZNHealthPickup : ZNPickupBase
{
	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Health")]
	[Tooltip("The amount of Health gotten from the HealthPack")]
	[SerializeField]
	private int HealthAmount;

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0xC1423C", Offset = "0xC1423C", VA = "0xC1423C", Slot = "7")]
	protected override void HandlePickedUp(ZNCharacterBase InPickingUpCharacter)
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0xC14348", Offset = "0xC14348", VA = "0xC14348")]
	public ZNHealthPickup()
	{
	}
}
[Token(Token = "0x200016F")]
public class ZNPickupBase : MonoBehaviour
{
	[Token(Token = "0x2000170")]
	[CompilerGenerated]
	private sealed class <ToggleBlink>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPickupBase <>4__this;

		[Token(Token = "0x1700006F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xC14900", Offset = "0xC14900", VA = "0xC14900", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xC14948", Offset = "0xC14948", VA = "0xC14948", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xC14794", Offset = "0xC14794", VA = "0xC14794")]
		[DebuggerHidden]
		public <ToggleBlink>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xC147EC", Offset = "0xC147EC", VA = "0xC147EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xC147F0", Offset = "0xC147F0", VA = "0xC147F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xC14908", Offset = "0xC14908", VA = "0xC14908", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000171")]
	[CompilerGenerated]
	private sealed class <DestroyPickupAfterDelay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPickupBase <>4__this;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xC149F4", Offset = "0xC149F4", VA = "0xC149F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xC14A3C", Offset = "0xC14A3C", VA = "0xC14A3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xC147BC", Offset = "0xC147BC", VA = "0xC147BC")]
		[DebuggerHidden]
		public <DestroyPickupAfterDelay>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xC14950", Offset = "0xC14950", VA = "0xC14950", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xC14954", Offset = "0xC14954", VA = "0xC14954", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xC149FC", Offset = "0xC149FC", VA = "0xC149FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNNoirFilterMesh PickupNoirFilterMesh;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Animator PickupAnimator;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The pickup's life span")]
	[Header("Pickup")]
	private float LifeSpan;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("When the item starts to blink in and out to show it's about to go away")]
	[SerializeField]
	private float BlinkRemainingTimeStart;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("How often the item goes in and out of blinking")]
	[SerializeField]
	private float BlinkRate;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The SFX that plays when spawned")]
	[SerializeField]
	private Event SpawnSFX;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The SFX that plays when picked up")]
	[SerializeField]
	private Event PickedUpSFX;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float TimeSinceSpawn;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected bool bPickedUp;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	protected bool bBlinkThresholdReached;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	protected bool bBlinkVisible;

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0xC1436C", Offset = "0xC1436C", VA = "0xC1436C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0xC14430", Offset = "0xC14430", VA = "0xC14430", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0xC1445C", Offset = "0xC1445C", VA = "0xC1445C", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0xC1457C", Offset = "0xC1457C", VA = "0xC1457C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0xC141F8", Offset = "0xC141F8", VA = "0xC141F8", Slot = "7")]
	protected virtual void HandlePickedUp(ZNCharacterBase InPickingUpCharacter)
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xC144E8", Offset = "0xC144E8", VA = "0xC144E8")]
	private void StartBlinking()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xC1472C", Offset = "0xC1472C", VA = "0xC1472C")]
	[IteratorStateMachine(typeof(<ToggleBlink>d__17))]
	private IEnumerator ToggleBlink()
	{
		return null;
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xC146C4", Offset = "0xC146C4", VA = "0xC146C4")]
	[IteratorStateMachine(typeof(<DestroyPickupAfterDelay>d__18))]
	private IEnumerator DestroyPickupAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xC14510", Offset = "0xC14510", VA = "0xC14510")]
	private void DestroyPickup()
	{
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0xC147E4", Offset = "0xC147E4", VA = "0xC147E4")]
	public bool IsPickedUp()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0xC14220", Offset = "0xC14220", VA = "0xC14220")]
	public ZNPickupBase()
	{
	}
}
[Token(Token = "0x2000172")]
[RequireComponent(typeof(ZNHealthComponent))]
public class ZNDestroyableItemBase : MonoBehaviour, IZNDamageable
{
	[Token(Token = "0x2000173")]
	[CompilerGenerated]
	private sealed class <DestroyItemAfterOneFrame>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNDestroyableItemBase <>4__this;

		[Token(Token = "0x17000073")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xC156D4", Offset = "0xC156D4", VA = "0xC156D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xC1571C", Offset = "0xC1571C", VA = "0xC1571C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xC15070", Offset = "0xC15070", VA = "0xC15070")]
		[DebuggerHidden]
		public <DestroyItemAfterOneFrame>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xC15628", Offset = "0xC15628", VA = "0xC15628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xC1562C", Offset = "0xC1562C", VA = "0xC1562C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xC156DC", Offset = "0xC156DC", VA = "0xC156DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNGameModeBase GameModeRef;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int TeamNumber;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNHealthComponent HealthComponent;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The SFX to play when this is destroyed")]
	protected Event DestroyedSFX;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The destroyed VFX info")]
	protected FSAPooledObjectInitializationInfo DestroyedVFXInitializationInfo;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNCharacterBase ItemDestroyer;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool bDestroyed;

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xC14A44", Offset = "0xC14A44", VA = "0xC14A44", Slot = "16")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0xC14C64", Offset = "0xC14C64", VA = "0xC14C64", Slot = "17")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0xC14C68", Offset = "0xC14C68", VA = "0xC14C68", Slot = "18")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0xC14DDC", Offset = "0xC14DDC", VA = "0xC14DDC", Slot = "19")]
	public virtual void InitializeDestroyableItem(int InMaxHealth, [Optional] ZNCharacterBase InOwningCharacter)
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0xC15008", Offset = "0xC15008", VA = "0xC15008")]
	[IteratorStateMachine(typeof(<DestroyItemAfterOneFrame>d__12))]
	protected IEnumerator DestroyItemAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0xC15098", Offset = "0xC15098", VA = "0xC15098", Slot = "20")]
	public virtual void DestroyItem()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0xC15414", Offset = "0xC15414", VA = "0xC15414", Slot = "21")]
	protected virtual void ItemHealthDepleted(IZNDamageable InCharacter)
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0xC15434", Offset = "0xC15434", VA = "0xC15434", Slot = "22")]
	protected virtual void ItemHealthUpdated(IZNDamageable InCharacter, int InCurrentHealth, int InMaxHealth)
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0xC15438", Offset = "0xC15438", VA = "0xC15438", Slot = "23")]
	public virtual bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0xC15440", Offset = "0xC15440", VA = "0xC15440", Slot = "24")]
	public virtual void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0xC154F8", Offset = "0xC154F8", VA = "0xC154F8", Slot = "12")]
	public void AssignTeamNumber(int InTeamNumber)
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xC15500", Offset = "0xC15500", VA = "0xC15500", Slot = "13")]
	public int GetTeamNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0xC15508", Offset = "0xC15508", VA = "0xC15508", Slot = "14")]
	public void NotifyDamageableAdded()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0xC15590", Offset = "0xC15590", VA = "0xC15590", Slot = "15")]
	public void NotifyDamageableRemoved()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0xC15618", Offset = "0xC15618", VA = "0xC15618", Slot = "5")]
	public GameObject GetDamageableOwner()
	{
		return null;
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0xC15620", Offset = "0xC15620", VA = "0xC15620")]
	public ZNDestroyableItemBase()
	{
	}
}
[Token(Token = "0x2000174")]
public class ZNDestroyablePostalBox : ZNDestroyableItemBase
{
	[Token(Token = "0x2000175")]
	[CompilerGenerated]
	private sealed class <DisableGravityAfterDelay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDelayTime;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNDestroyablePostalBox <>4__this;

		[Token(Token = "0x17000075")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xC17F6C", Offset = "0xC17F6C", VA = "0xC17F6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xC17FB4", Offset = "0xC17FB4", VA = "0xC17FB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xC15B98", Offset = "0xC15B98", VA = "0xC15B98")]
		[DebuggerHidden]
		public <DisableGravityAfterDelay>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xC17EBC", Offset = "0xC17EBC", VA = "0xC17EBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xC17EC0", Offset = "0xC17EC0", VA = "0xC17EC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xC17F74", Offset = "0xC17F74", VA = "0xC17F74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000176")]
	[CompilerGenerated]
	private sealed class <DestroyBoxByItselfAfterDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDelayTime;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNDestroyablePostalBox <>4__this;

		[Token(Token = "0x17000077")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0xC1806C", Offset = "0xC1806C", VA = "0xC1806C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xC180B4", Offset = "0xC180B4", VA = "0xC180B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xC15C88", Offset = "0xC15C88", VA = "0xC15C88")]
		[DebuggerHidden]
		public <DestroyBoxByItselfAfterDelay>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xC17FBC", Offset = "0xC17FBC", VA = "0xC17FBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xC17FC0", Offset = "0xC17FC0", VA = "0xC17FC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xC18074", Offset = "0xC18074", VA = "0xC18074", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("If we should show debug gizmos to help with determining the explosion's size")]
	protected bool bShowGizmos;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[Tooltip("How long the item should last for after it's been detached")]
	protected float DetachedLifetime;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int DestroyedDamage;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected float DamageRadius;

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0xC15724", Offset = "0xC15724", VA = "0xC15724", Slot = "17")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xC1584C", Offset = "0xC1584C", VA = "0xC1584C", Slot = "18")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xC15958", Offset = "0xC15958", VA = "0xC15958")]
	public void InitializePostalBox(int InMaxHealth, int InDestroyedDamage, float InDamageRadius)
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xC1599C", Offset = "0xC1599C", VA = "0xC1599C")]
	public void DetachAndEnableGravity()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xC15AA8", Offset = "0xC15AA8", VA = "0xC15AA8")]
	[IteratorStateMachine(typeof(<DisableGravityAfterDelay>d__5))]
	protected IEnumerator DisableGravityAfterDelay(float InDelayTime)
	{
		return null;
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xC15BC0", Offset = "0xC15BC0", VA = "0xC15BC0")]
	protected void DisableGravity()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0xC15B20", Offset = "0xC15B20", VA = "0xC15B20")]
	[IteratorStateMachine(typeof(<DestroyBoxByItselfAfterDelay>d__7))]
	protected IEnumerator DestroyBoxByItselfAfterDelay(float InDelayTime)
	{
		return null;
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0xC15CB0", Offset = "0xC15CB0", VA = "0xC15CB0")]
	protected void DestroyBoxByItself()
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0xC15D1C", Offset = "0xC15D1C", VA = "0xC15D1C")]
	private void CharacterDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0xC15D20", Offset = "0xC15D20", VA = "0xC15D20", Slot = "20")]
	public override void DestroyItem()
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0xC17EA0", Offset = "0xC17EA0", VA = "0xC17EA0")]
	public ZNDestroyablePostalBox()
	{
	}
}
[Token(Token = "0x2000177")]
public class ZNDestroyableProtector : ZNDestroyableItemBase
{
	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xC180BC", Offset = "0xC180BC", VA = "0xC180BC", Slot = "17")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0xC1810C", Offset = "0xC1810C", VA = "0xC1810C", Slot = "18")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0xC18110", Offset = "0xC18110", VA = "0xC18110")]
	public ZNDestroyableProtector()
	{
	}
}
[Token(Token = "0x2000178")]
public class ZNGameUserSettings : SAGameUserSettings
{
	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnNoirFilterChanged OnNoirFilterChangedDel;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FOnShowDamageNumbersSettingChanged OnShowDamageNumbersSettingChangedDel;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FOnOneHandedModeChanged OnOneHandedModeSettingChangedDel;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FOnUIDistanceChanged OnUIDistanceChangedDel;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FOnDebugInvincibleSettingChanged OnDebugInvincibleSettingChangedDel;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FOnDebugNinetyPercentShopDiscountSettingChanged OnDebugNinetyPercentShopDiscountSettingChangedDel;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FOnDebugHideUISettingChanged OnDebugHideUISettingChangedDel;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FOnDebugShowEnemyHealthSettingChanged OnDebugShowEnemyHealthSettingChangedDel;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public FOnDebugShowEnemyStaggerSettingChanged OnDebugShowEnemyStaggerSettingChangedDel;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public FOnDebugShowEnemyInfoSettingChanged OnDebugShowEnemyInfoSettingChangedDel;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public FOnDebugShowNavMeshSettingChanged OnDebugShowNavMeshSettingChangedDel;

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0xC18118", Offset = "0xC18118", VA = "0xC18118", Slot = "5")]
	public override void InitializeSettingToFunctionDict()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0xC18504", Offset = "0xC18504", VA = "0xC18504", Slot = "6")]
	public override void InitializeDebugSettingToFunctionDict()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0xC18828", Offset = "0xC18828", VA = "0xC18828")]
	protected void ApplyNoirFilterSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0xC18864", Offset = "0xC18864", VA = "0xC18864")]
	protected void ApplyShowDamageNumbersSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0xC188A0", Offset = "0xC188A0", VA = "0xC188A0")]
	protected void ApplyOneHandedModeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0xC188DC", Offset = "0xC188DC", VA = "0xC188DC")]
	protected void ApplyUIDistanceSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0xC18910", Offset = "0xC18910", VA = "0xC18910")]
	protected void ApplyInventoryModeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0xC18918", Offset = "0xC18918", VA = "0xC18918")]
	protected void ApplyUIVolumeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0xC189E0", Offset = "0xC189E0", VA = "0xC189E0")]
	protected void ApplyEnemyVolumeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0xC18AA8", Offset = "0xC18AA8", VA = "0xC18AA8")]
	protected void ApplyWeaponVolumeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0xC18B70", Offset = "0xC18B70", VA = "0xC18B70")]
	protected void ApplyVirtualRealityModeSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0xC18C9C", Offset = "0xC18C9C", VA = "0xC18C9C")]
	protected void ApplyDebugInvincibleSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0xC18CD8", Offset = "0xC18CD8", VA = "0xC18CD8")]
	protected void ApplyDebugNinetyPercentShopDiscountSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0xC18D14", Offset = "0xC18D14", VA = "0xC18D14")]
	protected void ApplyDebugHideUISetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xC18D50", Offset = "0xC18D50", VA = "0xC18D50")]
	protected void ApplyDebugShowEnemyHealthSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xC18D8C", Offset = "0xC18D8C", VA = "0xC18D8C")]
	protected void ApplyDebugShowEnemyStaggerSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xC18DC8", Offset = "0xC18DC8", VA = "0xC18DC8")]
	protected void ApplyDebugShowEnemyInfoSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xC18E04", Offset = "0xC18E04", VA = "0xC18E04")]
	protected void ApplyDebugShowNavMeshSetting(string InSettingName)
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0xC11F30", Offset = "0xC11F30", VA = "0xC11F30")]
	public static ZNGameUserSettings GetZNGameUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0xC18E40", Offset = "0xC18E40", VA = "0xC18E40")]
	public ZNHands GetDominantHand()
	{
		return default(ZNHands);
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xC18EE4", Offset = "0xC18EE4", VA = "0xC18EE4")]
	public ESAPressTypes GetGrabMode()
	{
		return default(ESAPressTypes);
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xC11FC4", Offset = "0xC11FC4", VA = "0xC11FC4")]
	public bool GetNoirFilterValue()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xC18F88", Offset = "0xC18F88", VA = "0xC18F88")]
	public bool GetVideoTutorialsValue()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xC1902C", Offset = "0xC1902C", VA = "0xC1902C")]
	public bool GetAutoCompleteSetupValue()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xC190D0", Offset = "0xC190D0", VA = "0xC190D0")]
	public EZNInventoryModes GetInventoryMode()
	{
		return default(EZNInventoryModes);
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xC19174", Offset = "0xC19174", VA = "0xC19174")]
	public EZNWeaponTutorialSettings GetWeaponTutorialsValue()
	{
		return default(EZNWeaponTutorialSettings);
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xC19218", Offset = "0xC19218", VA = "0xC19218")]
	public EZNTooltipSettings GetTooltipsValue()
	{
		return default(EZNTooltipSettings);
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xC192BC", Offset = "0xC192BC", VA = "0xC192BC")]
	public ZNGameUserSettings()
	{
	}
}
[Token(Token = "0x2000179")]
public class ZNSaveGame : SASaveGameBase
{
	[Token(Token = "0x40005E8")]
	protected const string SAVEKEY_TrackedWeaponInfoDictionary = "TrackedWeaponInfoDictionary";

	[Token(Token = "0x40005E9")]
	protected const string SAVEKEY_TrackedEnemyInfoDictionary = "TrackedEnemyInfoDictionary";

	[Token(Token = "0x40005EA")]
	protected const string SAVEKEY_TrackedCaseFileInfoDictionary = "TrackedCaseFileInfoDictionary";

	[Token(Token = "0x40005EB")]
	protected const string SAVEKEY_EquippedBadgesDictionary = "EquippedBadgesDictionary";

	[Token(Token = "0x40005EC")]
	protected const string SAVEKEY_EquippedWeaponSkinsDictionary = "EquippedWeaponSkinsDictionary";

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SerializableDictionary<string, FZNTrackedWeaponInfo> TrackedWeaponInfoDictionary;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public SerializableDictionary<string, FZNTrackedEnemyInfo> TrackedEnemyInfoDictionary;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SerializableDictionary<string, FZNTrackedCaseFileInfo> TrackedCaseFileInfoDictionary;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SerializableDictionary<int, string> EquippedBadgesDictionary;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SerializableDictionary<string, string> EquippedWeaponSkinsDictionary;

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xC192C4", Offset = "0xC192C4", VA = "0xC192C4", Slot = "5")]
	protected override bool SaveData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xC19430", Offset = "0xC19430", VA = "0xC19430", Slot = "6")]
	protected override bool LoadData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xC1961C", Offset = "0xC1961C", VA = "0xC1961C")]
	public void UpdateTrackedWeaponInfo(string InWeaponKey, FZNTrackedWeaponInfo InTrackedWeaponInfo)
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xC196DC", Offset = "0xC196DC", VA = "0xC196DC")]
	public void UpdateTrackedEnemyInfo(string InEnemyKey, FZNTrackedEnemyInfo InTrackedEnemyInfo)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xC1979C", Offset = "0xC1979C", VA = "0xC1979C")]
	public void UpdateTrackedCaseFileInfoInfo(string InCaseFileKey, FZNTrackedCaseFileInfo InTrackedCaseFileInfo)
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xC1985C", Offset = "0xC1985C", VA = "0xC1985C")]
	public void UpdateEquippedBadgeAssets(int InIndex, ZNBadgeAssetBase InBadgeAssetBase)
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xC19984", Offset = "0xC19984", VA = "0xC19984")]
	public void UpdateEquippedWeaponSkins(string InWeaponKey, string InSkinKey)
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xC19A50", Offset = "0xC19A50", VA = "0xC19A50", Slot = "7")]
	protected override void CreateInitialSaveData()
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xC19B34", Offset = "0xC19B34", VA = "0xC19B34", Slot = "9")]
	protected override void MidDeleteAllData()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xC19BBC", Offset = "0xC19BBC", VA = "0xC19BBC")]
	public static ZNSaveGame GetZNSaveGame()
	{
		return null;
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xC19C7C", Offset = "0xC19C7C", VA = "0xC19C7C")]
	public FZNTrackedWeaponInfo GetTrackedWeaponInfo(string InWeaponKey)
	{
		return null;
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xC19D3C", Offset = "0xC19D3C", VA = "0xC19D3C")]
	public FZNTrackedEnemyInfo GetTrackedEnemyInfo(string InEnemyKey)
	{
		return null;
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xC19DFC", Offset = "0xC19DFC", VA = "0xC19DFC")]
	public FZNTrackedCaseFileInfo GetTrackedCaseFileInfo(string InCaseFileKey)
	{
		return null;
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xC19EBC", Offset = "0xC19EBC", VA = "0xC19EBC")]
	public string GetEquippedBadgeAddressName(int InIndex)
	{
		return null;
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xC19F7C", Offset = "0xC19F7C", VA = "0xC19F7C")]
	public SerializableDictionary<int, string> GetEquippedBadgesDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xC19F84", Offset = "0xC19F84", VA = "0xC19F84")]
	public string GetEquippedWeaponSkinForWeaponAsset(string InWeaponKey)
	{
		return null;
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xC1A02C", Offset = "0xC1A02C", VA = "0xC1A02C")]
	public SerializableDictionary<string, string> GetEquippedWeaponSkinsDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xC1A034", Offset = "0xC1A034", VA = "0xC1A034")]
	public int GetExperience()
	{
		return default(int);
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xC1A080", Offset = "0xC1A080", VA = "0xC1A080")]
	public int GetLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0xC1A158", Offset = "0xC1A158", VA = "0xC1A158")]
	public ZNSaveGame()
	{
	}
}
[Token(Token = "0x200017A")]
public class ZNSettingsManager : SASettingsManager
{
	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The mod to give when the show damage numbers setting is on")]
	protected SAModAsset ShowDamageNumbersMod;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The mod to give when the one handed mode setting is on")]
	protected SAModAsset OneHandedModeMod;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The mod to give when the debug invincible setting is on")]
	protected SAModAsset DebugInvincibleMod;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The mod to give when the 90% shop discount setting is on")]
	protected SAModAsset DebugNinetyPercentShopDiscountMod;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The mod to give when show enemy health setting is on")]
	[SerializeField]
	protected SAModAsset DebugShowEnemyHealthMod;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The mod to give when show enemy stagger setting is on")]
	[SerializeField]
	protected SAModAsset DebugShowEnemyStaggerMod;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The mod to give when show enemy info setting is on")]
	protected SAModAsset DebugShowEnemyInfoMod;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ZNMainCharacter OwningMainCharacter;

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0xC1A308", Offset = "0xC1A308", VA = "0xC1A308", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0xC1A418", Offset = "0xC1A418", VA = "0xC1A418", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0xC1A420", Offset = "0xC1A420", VA = "0xC1A420", Slot = "6")]
	protected override void SetupAndBindSettings()
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0xC1A614", Offset = "0xC1A614", VA = "0xC1A614", Slot = "7")]
	protected override void UnbindSettings()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xC1A774", Offset = "0xC1A774", VA = "0xC1A774", Slot = "8")]
	protected override void SetupAndBindDebugSettings()
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0xC1ADF4", Offset = "0xC1ADF4", VA = "0xC1ADF4", Slot = "9")]
	protected override void UnbindDebugSettings()
	{
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0xC1A5EC", Offset = "0xC1A5EC", VA = "0xC1A5EC")]
	private void ShowDamageNumbersSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xC1A600", Offset = "0xC1A600", VA = "0xC1A600")]
	private void OneHandedModeSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xC1ACF4", Offset = "0xC1ACF4", VA = "0xC1ACF4")]
	private void DebugInvincibleSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xC1AD08", Offset = "0xC1AD08", VA = "0xC1AD08")]
	private void DebugNinetyPercentShopDiscountSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xC1AD1C", Offset = "0xC1AD1C", VA = "0xC1AD1C")]
	private void DebugHideUISettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xC1AD20", Offset = "0xC1AD20", VA = "0xC1AD20")]
	private void DebugShowEnemyHealthSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xC1AD34", Offset = "0xC1AD34", VA = "0xC1AD34")]
	private void DebugShowEnemyStaggerSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0xC1AD48", Offset = "0xC1AD48", VA = "0xC1AD48")]
	private void DebugShowEnemyInfoSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0xC1AD5C", Offset = "0xC1AD5C", VA = "0xC1AD5C")]
	private void DebugShowNavMeshSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xC1B1FC", Offset = "0xC1B1FC", VA = "0xC1B1FC")]
	public void GiveWeapon(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xC1B294", Offset = "0xC1B294", VA = "0xC1B294")]
	public void SpawnEnemy(ZNEnemyAsset InEnemyAsset)
	{
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xC1B694", Offset = "0xC1B694", VA = "0xC1B694")]
	public ZNSettingsManager()
	{
	}
}
[Token(Token = "0x200017B")]
public class ZNFollowPhysics : MonoBehaviour
{
	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The transform to follow")]
	[SerializeField]
	protected Transform TargetTransform;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Rigidbody MovingRigidbody;

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xC1B69C", Offset = "0xC1B69C", VA = "0xC1B69C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xC1B6EC", Offset = "0xC1B6EC", VA = "0xC1B6EC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xC1B720", Offset = "0xC1B720", VA = "0xC1B720")]
	public ZNFollowPhysics()
	{
	}
}
[Token(Token = "0x200017C")]
public class ZNLockToForwardVector : MonoBehaviour
{
	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This is the object's transfrom that we want to align our forward vector to")]
	[SerializeField]
	protected Transform ObjectToAlignForwardVectorTo;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If we are updating the rotation in world space. If false, uses local space.")]
	[SerializeField]
	protected bool bWorldSpace;

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xC1B728", Offset = "0xC1B728", VA = "0xC1B728")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xC1B7A0", Offset = "0xC1B7A0", VA = "0xC1B7A0")]
	public ZNLockToForwardVector()
	{
	}
}
[Token(Token = "0x200017D")]
public class ZNLockToParentWorldUpForward : MonoBehaviour
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The parent transform we will lock to.")]
	protected Transform ParentTransform;

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xC1B7A8", Offset = "0xC1B7A8", VA = "0xC1B7A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xC1B8EC", Offset = "0xC1B8EC", VA = "0xC1B8EC")]
	public ZNLockToParentWorldUpForward()
	{
	}
}
[Token(Token = "0x200017E")]
public class ZNLockToWorldComponent : MonoBehaviour
{
	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("Locks world position on the X axis.")]
	[Header("Position")]
	private bool bLockXPosition;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	[Tooltip("Locks world position on the Y axis.")]
	private bool bLockYPosition;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	[Tooltip("Locks world position on the Z axis.")]
	private bool bLockZPosition;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[SerializeField]
	[Header("Rotation")]
	[Tooltip("Locks world rotation on the X axis.")]
	private bool bLockXRotation;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Tooltip("Locks world rotation on the Y axis.")]
	private bool bLockYRotation;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	[Tooltip("Locks world rotation on the Z axis.")]
	private bool bLockZRotation;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 PreviousPosition;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 PreviousRotation;

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xC1B8F4", Offset = "0xC1B8F4", VA = "0xC1B8F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xC1B968", Offset = "0xC1B968", VA = "0xC1B968")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xC1BABC", Offset = "0xC1BABC", VA = "0xC1BABC")]
	public ZNLockToWorldComponent()
	{
	}
}
[Token(Token = "0x200017F")]
public static class ZNDamageFunctionLibrary
{
	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xC16B40", Offset = "0xC16B40", VA = "0xC16B40")]
	public static FZNDamageInfo InflictDamage(ZNGameplayGameMode InGameplayGameMode, int InBaseDamage, int InBaseStagger, bool bEnergyAttack, Vector3 InDamageLocation, Vector3 InDamageNormal, ZNCharacterBase InDamageInstigator, ZNWeaponBase InDamagingWeapon, IZNDamageable InDamageVictim, bool bTrueDamage = false, bool bForceSpecificBodyPartDamage = false, EZNBodyParts ForcedSpecificBodyPartDamage = EZNBodyParts.Unspecified, bool bOverrideStaggerDamage = false, int StaggerOverrideDamage = 0)
	{
		return default(FZNDamageInfo);
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xC1BAD8", Offset = "0xC1BAD8", VA = "0xC1BAD8")]
	private static void HandleBodyPartPropertyDamage(ref double FloatCalculatedDamage, EZNBodyParts InHitBodyPart, SAPropertyManagerComponent InPropertyManagerComponent)
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xC1BC1C", Offset = "0xC1BC1C", VA = "0xC1BC1C")]
	public static List<IZNDamageable> GetDamageablesInRadius(float InRadius, Vector3 InOrigin, LayerMask InCheckLayerMask, [Optional] List<IZNDamageable> InIgnoredDamageables)
	{
		return null;
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xC160D8", Offset = "0xC160D8", VA = "0xC160D8")]
	public static List<FZNDamageInfo> InflictRadialDamage(ZNGameplayGameMode InGameplayGameMode, int InMinDamage, int InMaxDamage, float InDamageRadius, bool bInEnergyAttack, Vector3 InDamageOrigin, LayerMask InDamageLayerMask, LayerMask InBlockingLayerMask, ZNCharacterBase InDamageInstigator, ZNWeaponBase InDamagingWeapon, [Optional] List<IZNDamageable> IgnoredDamageables, bool bForceSpecificBodyPartDamage = false, EZNBodyParts ForcedSpecificBodyPartDamage = EZNBodyParts.Unspecified, bool bOverrideStaggerDamage = false, int StaggerOverrideDamage = 0)
	{
		return null;
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xC1BFD0", Offset = "0xC1BFD0", VA = "0xC1BFD0")]
	private static int CalculateAdjustedRadialDamage(int InMinDamage, int InMaxDamage, float InDamageDistance, float InMaxRadius)
	{
		return default(int);
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xC1C2A8", Offset = "0xC1C2A8", VA = "0xC1C2A8")]
	public static EZNStaggerTypes GetStaggerTypeFromBodyPart(EZNBodyParts InBodyPart)
	{
		return default(EZNStaggerTypes);
	}
}
[Token(Token = "0x2000181")]
public static class ZNFunctionLibrary
{
	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0xC1C518", Offset = "0xC1C518", VA = "0xC1C518")]
	public static void ResetTransform(GameObject InGameObject)
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0xC1C5D4", Offset = "0xC1C5D4", VA = "0xC1C5D4")]
	public static void ResetTransform(Transform InTransform)
	{
	}

	[Token(Token = "0x6000A4C")]
	public static GameObject FindNearestGameObjectOfType<T>(Vector3 ReferencePosition) where T : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0xC1C70C", Offset = "0xC1C70C", VA = "0xC1C70C")]
	public static Transform GetCenterEyeAnchorTransform()
	{
		return null;
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0xC1C98C", Offset = "0xC1C98C", VA = "0xC1C98C")]
	public static void SetLayer(GameObject InGameObject, int InLayer, bool bAlsoSetChildrenLayers = true)
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0xC1CAA4", Offset = "0xC1CAA4", VA = "0xC1CAA4")]
	public static ZNWeaponBase SpawnWeapon(ZNWeaponAsset InWeaponAsset)
	{
		return null;
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0xC1CBD8", Offset = "0xC1CBD8", VA = "0xC1CBD8")]
	public static ZNProjectileBase SpawnProjectile(GameObject PF_Projectile, ZNCharacterBase OwningCharacter, ZNWeaponBase OwningWeapon, int Damage, int Stagger, Vector3 InSpawnPosition, Quaternion InSpawnRotation, Vector3 InLinearVelocity, Vector3 InAngularVelocity)
	{
		return null;
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0xC1CDA4", Offset = "0xC1CDA4", VA = "0xC1CDA4")]
	public static void TryUpdateReturnPoint(ZNGrabObjectBase UpdatingGrabObject, ZNObjectReturnPoint NewObjectReturnPoint, FZNReturnPointSwapParameters InReturnPointSwapParameters)
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0xC1D03C", Offset = "0xC1D03C", VA = "0xC1D03C")]
	public static ZNVFX SpawnPooledVFX(GameObject InPF_VFX, Transform InSpawnTransform, ESAAttachTypes InAttachType)
	{
		return null;
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0xC15240", Offset = "0xC15240", VA = "0xC15240")]
	public static ZNVFX SpawnPooledVFX(GameObject InPF_VFX, Vector3 InPosition, Quaternion InRotation)
	{
		return null;
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0xC1D1C8", Offset = "0xC1D1C8", VA = "0xC1D1C8")]
	public static EZNObjectiveTiers GetNextObjectiveTierOrHighest(EZNObjectiveTiers InTier)
	{
		return default(EZNObjectiveTiers);
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0xC1D2BC", Offset = "0xC1D2BC", VA = "0xC1D2BC")]
	public static Vector3 LerpVector(Vector3 Value1, Vector3 Value2, float Alpha, bool bInverseLerp = false)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0xC1D384", Offset = "0xC1D384", VA = "0xC1D384")]
	public static Color LerpColor(Color Value1, Color Value2, float Alpha, bool bInverseLerp = false)
	{
		return default(Color);
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xC1D400", Offset = "0xC1D400", VA = "0xC1D400")]
	public static bool AlmostEqual(float Value1, float Value2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xC1D418", Offset = "0xC1D418", VA = "0xC1D418")]
	public static float Clamp0360(float EulerAngles)
	{
		return default(float);
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xC1D4F0", Offset = "0xC1D4F0", VA = "0xC1D4F0")]
	public static float AngleDirection(Vector3 fwd, Vector3 targetDir, Vector3 up)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xC1D550", Offset = "0xC1D550", VA = "0xC1D550")]
	public static bool IsWithinForwardAngleOfTarget(Transform SourceTransform, Transform TargetTransform, float DotProductMinimum = 0.85f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xC1D728", Offset = "0xC1D728", VA = "0xC1D728")]
	public static bool DoesRayHitTarget(Vector3 SourcePosition, Vector3 TargetPosition, Type ExpectedType, LayerMask RayLayerMask, float RaycastLength = 100f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xC1D858", Offset = "0xC1D858", VA = "0xC1D858")]
	public static float GetPolygonArea(List<Vector3> Polygon)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xC1D95C", Offset = "0xC1D95C", VA = "0xC1D95C")]
	private static bool PointLiesOnSegment(Vector3 p, Vector3 q, Vector3 r)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xC1D9B4", Offset = "0xC1D9B4", VA = "0xC1D9B4")]
	private static int FindOrientation(Vector3 p, Vector3 q, Vector3 r)
	{
		return default(int);
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xC1D9F4", Offset = "0xC1D9F4", VA = "0xC1D9F4")]
	private static bool DoLinesIntersect(Vector3 p1, Vector3 q1, Vector3 p2, Vector3 q2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xC1DBF4", Offset = "0xC1DBF4", VA = "0xC1DBF4")]
	public static bool IsPointInsidePolygon(Vector3[] Polygon, Vector3 CheckPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xC1DC94", Offset = "0xC1DC94", VA = "0xC1DC94")]
	public static bool IsPointInsidePolygon(List<Vector3> Polygon, Vector3 CheckPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xC1DE84", Offset = "0xC1DE84", VA = "0xC1DE84")]
	public static void ForceMoveGrabCubeTowardsTarget(ConstrainedOVRGrabbable InOVRGrabbable, Transform LocalTransformChecker, Vector3 InLocalPosition)
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xC1DF6C", Offset = "0xC1DF6C", VA = "0xC1DF6C")]
	public static void ForceMoveGrabCubeTowardsTarget(ConstrainedOVRGrabbable InOVRGrabbable, Transform InTargetTransformOrienter, Transform InTargetLocalTransform)
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xC1E050", Offset = "0xC1E050", VA = "0xC1E050")]
	public static void ForceMoveGrabCube(RotateObjectByPositionOVRGrabbable InOVRGrabbable, Vector3 InPosition, [Optional] Transform TransformDirectionObject)
	{
	}
}
[Token(Token = "0x2000182")]
public static class ZNGlobals
{
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EZNVirtualRealityModes VirtualRealityMode;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool bTakeDamageInFalseVolume;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	private static bool bTakeDamageInInvalidLocation;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
	private static bool bAllowQuickLanguageSwitchingAtMainMenu;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
	private static bool bAllowPauseCooldown;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool bAllowNoirFilter;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static FOnVirtualRealityModeChanged OnVirtualRealityModeChangedDel;

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xC18BE8", Offset = "0xC18BE8", VA = "0xC18BE8")]
	public static void SetVirtualRealityMode(EZNVirtualRealityModes InVirtualRealityMode)
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0xC1E19C", Offset = "0xC1E19C", VA = "0xC1E19C")]
	public static EZNVirtualRealityModes GetVirtualRealityMode()
	{
		return default(EZNVirtualRealityModes);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xC1E1F4", Offset = "0xC1E1F4", VA = "0xC1E1F4")]
	public static bool IsVirtualRealityMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0xC1E254", Offset = "0xC1E254", VA = "0xC1E254")]
	public static bool IsMixedRealityMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0xC1E2B4", Offset = "0xC1E2B4", VA = "0xC1E2B4")]
	public static bool DoesTakeDamageInFalseVolume()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xC1E30C", Offset = "0xC1E30C", VA = "0xC1E30C")]
	public static bool DoesTakeDamageInInvalidLocation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0xC1E364", Offset = "0xC1E364", VA = "0xC1E364")]
	public static bool DoesAllowQuickLanguageSwitchingAtMainMenu()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0xC1E3BC", Offset = "0xC1E3BC", VA = "0xC1E3BC")]
	public static bool DoesAllowPauseCooldown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0xC1E414", Offset = "0xC1E414", VA = "0xC1E414")]
	public static bool DoesAllowNoirFilter()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000183")]
[CreateAssetMenu(fileName = "ZNShopItemAlgorithmAsset", menuName = "Scriptable Objects/Shop/ZNShopItemAlgorithmAsset")]
public class ZNShopItemAlgorithmAsset : ScriptableObject
{
	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The shop item cost infos. This list should be ordered as it assumes the first item is the lowest noir percentile and the last is the highest. Percentiles should not be higher than 1.0")]
	protected List<FZNShopItemCostInfo> ShopItemCostInfos;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The additional shop item cost info. Percentiles should not be higher than 1.0")]
	protected FZNShopItemCostInfo AdditionalShopItemCostInfo;

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0xC1E4C0", Offset = "0xC1E4C0", VA = "0xC1E4C0")]
	public ZNShopItemAlgorithmAsset()
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0xC1E4C8", Offset = "0xC1E4C8", VA = "0xC1E4C8", Slot = "4")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0xC1E714", Offset = "0xC1E714", VA = "0xC1E714")]
	public FZNShopItemCostInfo GetShopItemCostInfo(int InIndex)
	{
		return null;
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0xC1E8F0", Offset = "0xC1E8F0", VA = "0xC1E8F0")]
	public int GetNumShopItemCostInfos()
	{
		return default(int);
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0xC1E938", Offset = "0xC1E938", VA = "0xC1E938")]
	public FZNShopItemCostInfo GetAdditionalShopItemCostInfo()
	{
		return null;
	}
}
[Token(Token = "0x2000184")]
public class ZNShopItemComponent : MonoBehaviour
{
	[Token(Token = "0x2000185")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameToUpdateShopDiscount>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopItemComponent <>4__this;

		[Token(Token = "0x17000079")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xC1F52C", Offset = "0xC1F52C", VA = "0xC1F52C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xC1F574", Offset = "0xC1F574", VA = "0xC1F574", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xC1F334", Offset = "0xC1F334", VA = "0xC1F334")]
		[DebuggerHidden]
		public <WaitOneFrameToUpdateShopDiscount>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xC1F48C", Offset = "0xC1F48C", VA = "0xC1F48C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xC1F490", Offset = "0xC1F490", VA = "0xC1F490", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xC1F534", Offset = "0xC1F534", VA = "0xC1F534", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNGrabObjectBase AssociatedGrabObject;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnShopItemPurchased OnShopItemPurchasedDel;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNShopItemInfoWidget ShopItemInfoWidget;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int CurrencyCost;

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0xC1E940", Offset = "0xC1E940", VA = "0xC1E940")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0xC1EA18", Offset = "0xC1EA18", VA = "0xC1EA18")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0xC1EC9C", Offset = "0xC1EC9C", VA = "0xC1EC9C")]
	public void InitializeShopItemComponent()
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0xC1F1BC", Offset = "0xC1F1BC", VA = "0xC1F1BC")]
	public void PurchaseItem()
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0xC1EFA0", Offset = "0xC1EFA0", VA = "0xC1EFA0")]
	protected void UpdateShopItemComponent()
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0xC1F2AC", Offset = "0xC1F2AC", VA = "0xC1F2AC")]
	protected void DebugNinetyPercentShopDiscountSettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0xC1F2CC", Offset = "0xC1F2CC", VA = "0xC1F2CC")]
	[IteratorStateMachine(typeof(<WaitOneFrameToUpdateShopDiscount>d__11))]
	protected IEnumerator WaitOneFrameToUpdateShopDiscount()
	{
		return null;
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0xC1F35C", Offset = "0xC1F35C", VA = "0xC1F35C")]
	protected void ObjectGrabbed(ZNGrabObjectBase GrabbedObject)
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0xC1F3E0", Offset = "0xC1F3E0", VA = "0xC1F3E0")]
	protected void ObjectDropped(ZNGrabObjectBase GrabbedObject, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0xC1F464", Offset = "0xC1F464", VA = "0xC1F464")]
	public ZNShopItemInfoWidget GetShopItemInfoWidget()
	{
		return null;
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0xC1F46C", Offset = "0xC1F46C", VA = "0xC1F46C")]
	public int GetCurrencyCost()
	{
		return default(int);
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0xC1F474", Offset = "0xC1F474", VA = "0xC1F474")]
	public ZNGrabObjectBase GetAssociatedGrabObject()
	{
		return null;
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0xC1F230", Offset = "0xC1F230", VA = "0xC1F230")]
	public ZNWeaponBase GetAssociatedWeaponBase()
	{
		return null;
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0xC1F47C", Offset = "0xC1F47C", VA = "0xC1F47C")]
	public ZNShopItemComponent()
	{
	}
}
[Token(Token = "0x2000186")]
[CreateAssetMenu(fileName = "ZNShopItemSelectionAsset", menuName = "Scriptable Objects/Shop/ZNShopItemSelectionAsset")]
public class ZNShopItemSelectionAsset : ScriptableObject
{
	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The small weapons that spawn and their weight of spawning")]
	protected SerializableDictionary<ZNWeaponAsset, int> SmallWeaponSpawnWeightDict;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The large ranged weapons that spawn and their weight of spawning")]
	protected SerializableDictionary<ZNWeaponAsset, int> LargeRangedWeaponSpawnWeightDict;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The large melee weapons that spawn and their weight of spawning")]
	protected SerializableDictionary<ZNWeaponAsset, int> LargeMeleeWeaponSpawnWeightDict;

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xC1F57C", Offset = "0xC1F57C", VA = "0xC1F57C")]
	public ZNShopItemSelectionAsset()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xC1F584", Offset = "0xC1F584", VA = "0xC1F584")]
	public Dictionary<ZNWeaponAsset, int> GetSmallWeaponSpawnWeightDict()
	{
		return null;
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0xC1F5CC", Offset = "0xC1F5CC", VA = "0xC1F5CC")]
	public Dictionary<ZNWeaponAsset, int> GetLargeRangedWeaponSpawnWeightDict()
	{
		return null;
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0xC1F614", Offset = "0xC1F614", VA = "0xC1F614")]
	public Dictionary<ZNWeaponAsset, int> GetLargeMeleeWeaponSpawnWeightDict()
	{
		return null;
	}
}
[Token(Token = "0x2000187")]
public class ZNShopItemSpawnPoint : ZNObjectReturnPoint
{
	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The shop manager")]
	[SerializeField]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The weapon size that this shop item spawn point holds")]
	[SerializeField]
	protected EZNWeaponSizes HeldWeaponSize;

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xC1F65C", Offset = "0xC1F65C", VA = "0xC1F65C")]
	public EZNWeaponSizes GetHeldWeaponSize()
	{
		return default(EZNWeaponSizes);
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xC1F664", Offset = "0xC1F664", VA = "0xC1F664", Slot = "9")]
	public override bool AllowObjectToBeGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xC1F704", Offset = "0xC1F704", VA = "0xC1F704", Slot = "10")]
	public override bool ShouldDisplayNotifierMarkerWidget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xC1F70C", Offset = "0xC1F70C", VA = "0xC1F70C")]
	public ZNShopItemSpawnPoint()
	{
	}
}
[Token(Token = "0x2000188")]
public class ZNShopkeeperManager : MonoBehaviour
{
	[Token(Token = "0x2000189")]
	[CompilerGenerated]
	private sealed class <EndShopkeeperDisplayedTakeDamageDialogueAfterDelay>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopkeeperManager <>4__this;

		[Token(Token = "0x1700007B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xC208DC", Offset = "0xC208DC", VA = "0xC208DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xC20924", Offset = "0xC20924", VA = "0xC20924", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xC202C0", Offset = "0xC202C0", VA = "0xC202C0")]
		[DebuggerHidden]
		public <EndShopkeeperDisplayedTakeDamageDialogueAfterDelay>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xC20820", Offset = "0xC20820", VA = "0xC20820", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xC20824", Offset = "0xC20824", VA = "0xC20824", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xC208E4", Offset = "0xC208E4", VA = "0xC208E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly int Response;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static readonly int ItemPurchased;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static readonly int UpgradeStarted;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected static readonly int EndIntermissionFailed;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static readonly int GreetingJump;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected static readonly int FarewellJump;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Animator AnimatorController;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The shopkeeper dialogue widget")]
	[SerializeField]
	[Header("Widgets")]
	protected ZNShopkeeperDialogueWidget ShopkeeperDialogueWidget;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("A list of lines to show when idling at the store")]
	[SerializeField]
	[Header("Dialogue")]
	protected List<LocalizedString> IdleLines;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("A list of lines to show when starting the intermission")]
	[SerializeField]
	protected List<LocalizedString> IntermissionStartedLines;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("A list of lines to show when ending the intermission")]
	protected List<LocalizedString> IntermissionEndedLines;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("A list of lines to show when purchasing an item")]
	[SerializeField]
	protected List<LocalizedString> ShopItemPurchasedLines;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("A list of lines to show when starting an upgrade")]
	[SerializeField]
	protected List<LocalizedString> ShopUpgradeStartedLines;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("A list of lines to show when damaging the shopkeeper")]
	[SerializeField]
	protected List<LocalizedString> ShopkeeperDamagedLines;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("A list of lines to show when the Camera is used on the shopkeeper")]
	[SerializeField]
	protected List<LocalizedString> ShopkeeperDamagedWithCameraLines;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("How long (in seconds) that the shopkeeper damaged lines goes on cooldown for")]
	[SerializeField]
	protected float ShopkeeperDamagedLinesCooldownTime;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("A list of lines to show when trying to end the intermission but there is a shop item in the player's hand")]
	[SerializeField]
	[Header("End Intermission Failed Lines")]
	protected List<LocalizedString> ShopItemInPlayersHandLines;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("A list of lines to show when trying to end the intermission but there is no weapon in the player's inventory")]
	[SerializeField]
	protected List<LocalizedString> NoWeaponInInventoryLines;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("A list of lines to show when trying to end the intermission but there is a weapon in the upgrader")]
	[SerializeField]
	protected List<LocalizedString> WeaponStillInUpgraderLines;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("A list of lines to show when trying to end the intermission too early")]
	[SerializeField]
	protected List<LocalizedString> TryingToEndIntermissionEarlyLines;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("A list of lines to show trying to end without taking a card")]
	[SerializeField]
	protected List<LocalizedString> CardNotTakenLines;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Header("SFX")]
	[Tooltip("The normal switch for the dialogue SFX")]
	protected AK.Wwise.Switch NormalSwitch;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("The hello switch for the dialogue SFX")]
	protected AK.Wwise.Switch HelloSwitch;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The goodbye switch for the dialogue SFX")]
	protected AK.Wwise.Switch GoodbyeSwitch;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("The happy switch for the dialogue SFX")]
	protected AK.Wwise.Switch HappySwitch;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The angry switch for the dialogue SFX")]
	[SerializeField]
	protected AK.Wwise.Switch AngrySwitch;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ZNShopkeeper Shopkeeper;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected ZNIntermissionManager IntermissionManager;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected ZNShopWeaponUpgrader ShopWeaponUpgrader;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected bool bShopkeeperDisplayedTakeDamageDialogue;

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xC1F714", Offset = "0xC1F714", VA = "0xC1F714")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xC1F764", Offset = "0xC1F764", VA = "0xC1F764")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0xC1FC44", Offset = "0xC1FC44", VA = "0xC1FC44")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0xC20098", Offset = "0xC20098", VA = "0xC20098")]
	protected void PlayDialogueLineFromList(List<LocalizedString> PossibleDialogueLines, AK.Wwise.Switch InDialogueSwitch)
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0xC2015C", Offset = "0xC2015C", VA = "0xC2015C")]
	private void CharacterTookDamage(ZNCharacterBase DamagedCharacter, int InDamage, int InStagger)
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xC20258", Offset = "0xC20258", VA = "0xC20258")]
	[IteratorStateMachine(typeof(<EndShopkeeperDisplayedTakeDamageDialogueAfterDelay>d__36))]
	private IEnumerator EndShopkeeperDisplayedTakeDamageDialogueAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0xC202E8", Offset = "0xC202E8", VA = "0xC202E8")]
	private void ShopItemPurchased(ZNShopItemComponent PurchasedShopItem)
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0xC20384", Offset = "0xC20384", VA = "0xC20384")]
	private void ShopUpgradeStarted(ZNGrabObjectBase UpgradedItem, int UpgradeCost)
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0xC20420", Offset = "0xC20420", VA = "0xC20420")]
	private void OnEndIntermissionFailed(string FailureReason)
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0xC205C4", Offset = "0xC205C4", VA = "0xC205C4")]
	private void OnIntermissionBegan()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xC20644", Offset = "0xC20644", VA = "0xC20644")]
	private void OnIntermissionEnded()
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xC206B4", Offset = "0xC206B4", VA = "0xC206B4")]
	public ZNShopkeeperManager()
	{
	}
}
[Token(Token = "0x200018A")]
public class ZNShopManager : MonoBehaviour
{
	[Token(Token = "0x200018B")]
	[CompilerGenerated]
	private sealed class <SpawnShopItemsEnumerator>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopManager <>4__this;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ZNWeaponAsset> <SmallWeapons>5__2;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<ZNWeaponAsset> <LargeRangedWeapons>5__3;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<ZNWeaponAsset> <LargeMeleeWeapons>5__4;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <i>5__5;

		[Token(Token = "0x1700007D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xC24E6C", Offset = "0xC24E6C", VA = "0xC24E6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0xC24EB4", Offset = "0xC24EB4", VA = "0xC24EB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC21884", Offset = "0xC21884", VA = "0xC21884")]
		[DebuggerHidden]
		public <SpawnShopItemsEnumerator>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xC24ACC", Offset = "0xC24ACC", VA = "0xC24ACC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xC24AD0", Offset = "0xC24AD0", VA = "0xC24AD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xC24E74", Offset = "0xC24E74", VA = "0xC24E74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018D")]
	[CompilerGenerated]
	private sealed class <SpawnBonusCards>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopManager <>4__this;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ZNBonusCardAsset> InBonusCards;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool bHideObject;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__2;

		[Token(Token = "0x1700007F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xC25260", Offset = "0xC25260", VA = "0xC25260", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xC252A8", Offset = "0xC252A8", VA = "0xC252A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xC23968", Offset = "0xC23968", VA = "0xC23968")]
		[DebuggerHidden]
		public <SpawnBonusCards>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC24F5C", Offset = "0xC24F5C", VA = "0xC24F5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC24F60", Offset = "0xC24F60", VA = "0xC24F60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xC25268", Offset = "0xC25268", VA = "0xC25268", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018E")]
	[CompilerGenerated]
	private sealed class <DelayAfterStartReappearing>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopManager <>4__this;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xC2535C", Offset = "0xC2535C", VA = "0xC2535C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xC253A4", Offset = "0xC253A4", VA = "0xC253A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC23FEC", Offset = "0xC23FEC", VA = "0xC23FEC")]
		[DebuggerHidden]
		public <DelayAfterStartReappearing>d__74(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC252B0", Offset = "0xC252B0", VA = "0xC252B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC252B4", Offset = "0xC252B4", VA = "0xC252B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xC25364", Offset = "0xC25364", VA = "0xC25364", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018F")]
	[CompilerGenerated]
	private sealed class <DelayAfterStartDisappearing>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopManager <>4__this;

		[Token(Token = "0x17000083")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0xC25450", Offset = "0xC25450", VA = "0xC25450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0xC25498", Offset = "0xC25498", VA = "0xC25498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xC24130", Offset = "0xC24130", VA = "0xC24130")]
		[DebuggerHidden]
		public <DelayAfterStartDisappearing>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC253AC", Offset = "0xC253AC", VA = "0xC253AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xC253B0", Offset = "0xC253B0", VA = "0xC253B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xC25458", Offset = "0xC25458", VA = "0xC25458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Vector3 OriginalSpawnLocation;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNBonusCardSelectionAsset BonusCardSelectionAsset;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The shop animator controller")]
	protected Animator ShopAnimatorController;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The sign animator controller")]
	[SerializeField]
	protected Animator SignAnimatorController;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FOnShopItemPurchased OnShopItemPurchasedDel;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FOnItemSoldToShop OnItemSoldToShopDel;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FOnBonusCardTaken OnBonusCardTakenDel;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The shop item algorithm asset that helps to determine what items to spawn based on the player's noir amount")]
	[SerializeField]
	protected ZNShopItemAlgorithmAsset ShopItemAlgorithmAsset;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The shopkeeper")]
	[SerializeField]
	protected ZNShopkeeper Shopkeeper;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("The button, attached to the shop, that lets the player end the intermission")]
	protected ZNWorldButton EndIntermissionButton;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The shop weapon upgrader")]
	[SerializeField]
	protected ZNShopWeaponUpgrader ShopWeaponUpgrader;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("The VFX that plays when shop items are spawned")]
	[SerializeField]
	protected GameObject PF_ShopItemSpawnVFX;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The widget that shows when you sell an item")]
	[SerializeField]
	protected GameObject PF_SoldWidget;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The spawn points for the small shop items")]
	[SerializeField]
	protected List<ZNShopItemSpawnPoint> SmallShopItemSpawnPoints;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The spawn points for the large shop items")]
	[SerializeField]
	protected List<ZNShopItemSpawnPoint> LargeShopItemSpawnPoints;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The spawn point for a small shop item")]
	[SerializeField]
	protected ZNShopItemSpawnPoint SmallShopItemSpawnPoint1;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The spawn point for a small shop item")]
	[SerializeField]
	protected ZNShopItemSpawnPoint SmallShopItemSpawnPoint2;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The spawn point for a large ranged shop item")]
	[SerializeField]
	protected ZNShopItemSpawnPoint LargeRangedShopItemSpawnPoint;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("The spawn point for a large melee shop item")]
	[SerializeField]
	protected ZNShopItemSpawnPoint LargeMeleeShopItemSpawnPoint;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Tooltip("The shop item cost widget for a small shop item")]
	protected ZNShopItemCostWidget SmallShopItemCostWidget1;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Tooltip("The shop item cost widget for a small shop item")]
	protected ZNShopItemCostWidget SmallShopItemCostWidget2;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Tooltip("The shop item cost widget for a large ranged item")]
	[SerializeField]
	protected ZNShopItemCostWidget LargeRangedShopItemCostWidget;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Tooltip("The shop item cost widget for a large melee shop item")]
	[SerializeField]
	protected ZNShopItemCostWidget LargeMeleeShopItemCostWidget;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Tooltip("The prefab for the bonus cards")]
	[SerializeField]
	protected GameObject PF_BonusCard;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Tooltip("The prefab for the object return point that we'll use to assign the bonus cards")]
	[SerializeField]
	protected GameObject PF_BonusCardObjectReturnPoint;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Tooltip("The root transform we use for spawning the bonus card return points")]
	[SerializeField]
	protected Transform BonusCardsRootTransform;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	[Tooltip("How many bonus cards we spawn before accounting for the number of players")]
	protected int DefaultNumBonusCards;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[Tooltip("How many additional bonus cards we spawn per each additional player")]
	[SerializeField]
	protected int NumAdditionalBonusCardsPerPlayer;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Tooltip("How much space should be between the bonus cards")]
	[SerializeField]
	protected float SpaceBetweenBonusCards;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[Tooltip("How far below the initial spawn location this goes")]
	[SerializeField]
	protected float DisappearDistance;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Tooltip("How long (in seconds) it takes to reach the disappear distance")]
	[SerializeField]
	protected float DisappearTime;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	[Tooltip("How long (in seconds) it takes to reach the disappear distance")]
	protected float PortalSpawnTime;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[Tooltip("The VFX initialization info for the portal")]
	protected FSAPooledObjectInitializationInfo PortalVFXInitializationInfo;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Tooltip("The SFX for when the shop spawns")]
	[SerializeField]
	protected Event ShopSpawnSFX;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[Tooltip("The SFX for purchasing a shop item")]
	[SerializeField]
	protected Event PurchaseShopItemSFX;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Tooltip("The SFX for selling a shop item")]
	[SerializeField]
	protected Event SellShopItemSFX;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	protected ZNShopItemSelectionAsset ShopItemSelectionAsset;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected List<ZNShopItemComponent> ActiveSpawnedItems;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	protected List<ZNObjectReturnPoint> BonusCardObjectReturnPoints;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	protected List<ZNBonusCard> ActiveSpawnedBonusCards;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	protected Dictionary<ZNMainCharacter, bool> CardsTakenDictionary;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	protected bool bDisappearing;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
	protected bool bReappearing;

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0xC2092C", Offset = "0xC2092C", VA = "0xC2092C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0xC20A8C", Offset = "0xC20A8C", VA = "0xC20A8C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0xC211DC", Offset = "0xC211DC", VA = "0xC211DC")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0xC20D5C", Offset = "0xC20D5C", VA = "0xC20D5C")]
	protected void CreateBonusCardReturnPoints()
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0xC20F84", Offset = "0xC20F84", VA = "0xC20F84")]
	protected void InitializeCardsTakenDictionary()
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0xC21474", Offset = "0xC21474", VA = "0xC21474")]
	public void StartShopItemSpawnVFX()
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0xC2159C", Offset = "0xC2159C", VA = "0xC2159C")]
	public void ForceSpawnLargeRangedShopItem(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0xC217FC", Offset = "0xC217FC", VA = "0xC217FC")]
	public void SpawnShopItems()
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0xC2181C", Offset = "0xC2181C", VA = "0xC2181C")]
	[IteratorStateMachine(typeof(<SpawnShopItemsEnumerator>d__53))]
	protected IEnumerator SpawnShopItemsEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0xC21660", Offset = "0xC21660", VA = "0xC21660")]
	protected void SpawnSingleShopItem(ZNWeaponAsset InWeaponAsset, ZNObjectReturnPoint InObjectReturnPoint, bool bHideObject = false)
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0xC218AC", Offset = "0xC218AC", VA = "0xC218AC")]
	protected ZNShopItemComponent AttachShopItemComponent(ZNWeaponBase InWeaponBase, ZNObjectReturnPoint InObjectReturnPoint, bool bHideObject = false)
	{
		return null;
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0xC21AD0", Offset = "0xC21AD0", VA = "0xC21AD0")]
	public void SellItemToShop(ZNWeaponBase InWeaponBase, ZNShopSellItemReturnPoint InShopSellItemReturnPoint)
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0xC21E04", Offset = "0xC21E04", VA = "0xC21E04")]
	protected List<ZNWeaponAsset> DetermineWeaponsToSpawn(Dictionary<ZNWeaponAsset, int> WeaponSpawnWeightDict, int NumWeaponsToSpawn)
	{
		return null;
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0xC222C8", Offset = "0xC222C8", VA = "0xC222C8")]
	public void CleanUpShopItems()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0xC225A0", Offset = "0xC225A0", VA = "0xC225A0")]
	protected List<FZNShopWeaponDeterminantInfo> GetShopWeaponDeterminantInfos(Dictionary<ZNWeaponAsset, int> WeaponSpawnWeightDict)
	{
		return null;
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0xC2296C", Offset = "0xC2296C", VA = "0xC2296C")]
	protected void AddPercentileShopWeaponDeterminantInfo(ref List<List<FZNShopWeaponDeterminantInfo>> PercentileShopWeaponDeterminantInfoLists, ref List<FZNShopWeaponDeterminantInfo> ShopItemDeterminantInfos, int CurrentNoirValue, FZNShopItemCostInfo ShopItemCostInfo)
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0xC22D00", Offset = "0xC22D00", VA = "0xC22D00")]
	protected FZNShopWeaponDeterminantInfo DetermineWeaponToSpawnForPercentile(List<FZNShopWeaponDeterminantInfo> PercentileShopWeaponDeterminantInfos)
	{
		return null;
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0xC22E28", Offset = "0xC22E28", VA = "0xC22E28")]
	protected List<EZNWeaponSizes> GetInvalidWeaponSizesToSpawn(List<FZNShopWeaponDeterminantInfo> CurrentWeaponsToSpawn, int NumSmallWeaponSpawnPoints, int NumLargeWeaponSpawnPoints)
	{
		return null;
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0xC2308C", Offset = "0xC2308C", VA = "0xC2308C")]
	protected void UpdateSubsequentPercentileShopWeaponDeterminantInfoLists(ref List<List<FZNShopWeaponDeterminantInfo>> PercentileShopWeaponDeterminantInfoLists, int InStartingListIndex, ZNWeaponAsset WeaponAssetToRemove, List<EZNWeaponSizes> WeaponSizesToRemove)
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0xC23270", Offset = "0xC23270", VA = "0xC23270")]
	public void NotifyCharacterHasTakenCard(ZNMainCharacter InMainCharacter, ZNBonusCard Card)
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0xC23608", Offset = "0xC23608", VA = "0xC23608")]
	public void ForceSpawnRandomBonusCards(List<ZNBonusCardAsset> InBonusCards)
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0xC2382C", Offset = "0xC2382C", VA = "0xC2382C")]
	public void SpawnRandomBonusCards()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xC238E8", Offset = "0xC238E8", VA = "0xC238E8")]
	[IteratorStateMachine(typeof(<SpawnBonusCards>d__67))]
	protected IEnumerator SpawnBonusCards(List<ZNBonusCardAsset> InBonusCards, bool bHideObject = false)
	{
		return null;
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0xC2360C", Offset = "0xC2360C", VA = "0xC2360C")]
	protected void SpawnBonusCardsInstantly(List<ZNBonusCardAsset> InBonusCards)
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0xC234DC", Offset = "0xC234DC", VA = "0xC234DC")]
	protected void CleanUpBonusCards()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0xC23990", Offset = "0xC23990", VA = "0xC23990")]
	public void CleanUpBonusCardsDictionary()
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xC23C18", Offset = "0xC23C18", VA = "0xC23C18")]
	public void ShowShopItemsAndBonusCards()
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xC23DC8", Offset = "0xC23DC8", VA = "0xC23DC8")]
	protected void SpawnPortal()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xC23E4C", Offset = "0xC23E4C", VA = "0xC23E4C")]
	public void StartReappearing()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xC23F84", Offset = "0xC23F84", VA = "0xC23F84")]
	[IteratorStateMachine(typeof(<DelayAfterStartReappearing>d__74))]
	protected IEnumerator DelayAfterStartReappearing()
	{
		return null;
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xC24014", Offset = "0xC24014", VA = "0xC24014")]
	public void EndReappearing()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0xC2401C", Offset = "0xC2401C", VA = "0xC2401C")]
	public void StartDisappearing()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0xC240C8", Offset = "0xC240C8", VA = "0xC240C8")]
	[IteratorStateMachine(typeof(<DelayAfterStartDisappearing>d__77))]
	protected IEnumerator DelayAfterStartDisappearing()
	{
		return null;
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0xC21160", Offset = "0xC21160", VA = "0xC21160")]
	public void EndDisappearing()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0xC24158", Offset = "0xC24158", VA = "0xC24158")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xC2420C", Offset = "0xC2420C", VA = "0xC2420C")]
	protected void ShopItemPurchased(ZNShopItemComponent PurchasedShopItem)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xC243F4", Offset = "0xC243F4", VA = "0xC243F4")]
	protected void ShopUpgradeStarted(ZNGrabObjectBase UpgradedItem, int UpgradeCost)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xC24584", Offset = "0xC24584", VA = "0xC24584")]
	protected void ShopUpgradeCompleted(ZNGrabObjectBase UpgradedItem)
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0xC24658", Offset = "0xC24658", VA = "0xC24658")]
	public ZNShopkeeper GetShopkeeper()
	{
		return null;
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xC24660", Offset = "0xC24660", VA = "0xC24660")]
	public ZNWorldButton GetEndIntermissionButton()
	{
		return null;
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xC24668", Offset = "0xC24668", VA = "0xC24668")]
	public ZNShopItemSpawnPoint GetFirstOpenShopItemSpawnPoint(EZNWeaponSizes InWeaponSize)
	{
		return null;
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0xC24790", Offset = "0xC24790", VA = "0xC24790")]
	public List<ZNShopItemComponent> GetActiveSpawnedItems()
	{
		return null;
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xC24798", Offset = "0xC24798", VA = "0xC24798")]
	public bool IsAnySpawnedShopItemGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xC248BC", Offset = "0xC248BC", VA = "0xC248BC")]
	public ZNShopWeaponUpgrader GetShopWeaponUpgrader()
	{
		return null;
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xC248C4", Offset = "0xC248C4", VA = "0xC248C4")]
	public bool HasCharacterTakenCard(ZNMainCharacter InMainCharacter)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xC23344", Offset = "0xC23344", VA = "0xC23344")]
	public bool HaveAllCharactersTakenCards()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xC24958", Offset = "0xC24958", VA = "0xC24958")]
	public bool IsReappearing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xC24960", Offset = "0xC24960", VA = "0xC24960")]
	public bool IsDisappearing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xC24968", Offset = "0xC24968", VA = "0xC24968")]
	public ZNShopManager()
	{
	}
}
[Token(Token = "0x2000190")]
public class ZNShopWeaponUpgrader : MonoBehaviour
{
	[Token(Token = "0x2000191")]
	[CompilerGenerated]
	private sealed class <WaitToEndUpgrade>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShopWeaponUpgrader <>4__this;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNWeaponBase UpgradingWeapon;

		[Token(Token = "0x17000085")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xC26320", Offset = "0xC26320", VA = "0xC26320", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xC26368", Offset = "0xC26368", VA = "0xC26368", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xC25D38", Offset = "0xC25D38", VA = "0xC25D38")]
		[DebuggerHidden]
		public <WaitToEndUpgrade>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xC26210", Offset = "0xC26210", VA = "0xC26210", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xC26214", Offset = "0xC26214", VA = "0xC26214", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xC26328", Offset = "0xC26328", VA = "0xC26328", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The upgrade object return point")]
	[SerializeField]
	protected ZNObjectReturnPoint UpgradeObjectReturnPoint;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The shop upgrade lever")]
	[SerializeField]
	protected ZNLever ShopUpgradeLever;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The shop upgrade lever grab cube")]
	[SerializeField]
	protected ConstrainedOVRGrabbable ShopUpgradeLeverGrabCube;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The shop weapon upgrade info widget")]
	[SerializeField]
	protected ZNShopWeaponUpgradeInfoWidget ShopWeaponUpgradeInfoWidget;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The root transform for orientation")]
	protected Transform RootTransform;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The target transform for returning the level after an upgrade")]
	protected Transform PostUpgradeReturnTargetTransform;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FOnItemPutInUpgrader OnItemPutInUpgrader;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FOnShopUpgradeStarted OnShopUpgradeStartedDel;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FOnShopUpgradeCompleted OnShopUpgradeCompletedDel;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The SFX to play when starting the weapon upgrade")]
	[Header("SFX")]
	protected Event StartUpgradeWeaponSFX;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The SFX to play when finishing upgrading a weapon")]
	protected Event FinishUpgradeWeaponSFX;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The SFX to play when you fail to start the weapon upgrade")]
	[SerializeField]
	protected Event StartUpgradeFailedSFX;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("VFX")]
	[SerializeField]
	[Tooltip("The VFX to play when upgrading a weapon")]
	protected GameObject PF_UpgradeWeaponVFX;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The transform to play the upgrade weapon VFX at")]
	[SerializeField]
	protected Transform UpgradeWeaponVFXTransform;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool bUpgrading;

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0xC254A0", Offset = "0xC254A0", VA = "0xC254A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0xC256C4", Offset = "0xC256C4", VA = "0xC256C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xC25888", Offset = "0xC25888", VA = "0xC25888")]
	public void UpgradeWeapon(ZNCharacterBase PressingCharacter)
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xC25CC4", Offset = "0xC25CC4", VA = "0xC25CC4")]
	[IteratorStateMachine(typeof(<WaitToEndUpgrade>d__18))]
	protected IEnumerator WaitToEndUpgrade(ZNWeaponBase UpgradingWeapon)
	{
		return null;
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xC25D60", Offset = "0xC25D60", VA = "0xC25D60")]
	protected void ObjectReturnPointOccupiedStateChanged(ZNObjectReturnPoint ChangedOccupiedReturnStateReturnPoint, ZNGrabObjectBase NewOccupyingObject)
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xC25E0C", Offset = "0xC25E0C", VA = "0xC25E0C")]
	protected void ShopUpgradeLeverCompleted(ZNLever CompletedLever)
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xC26174", Offset = "0xC26174", VA = "0xC26174")]
	public ZNObjectReturnPoint GetUpgradeObjectReturnPoint()
	{
		return null;
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xC25F0C", Offset = "0xC25F0C", VA = "0xC25F0C")]
	public bool CanUpgradeWeapon(ZNCharacterBase PressingButtonCharacter, out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xC2617C", Offset = "0xC2617C", VA = "0xC2617C")]
	public bool HasObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xC26208", Offset = "0xC26208", VA = "0xC26208")]
	public ZNShopWeaponUpgrader()
	{
	}
}
[Token(Token = "0x2000192")]
public class ZNTombieShopAnimBehaviorState : StateMachineBehaviour
{
	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0xC26370", Offset = "0xC26370", VA = "0xC26370", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0xC26374", Offset = "0xC26374", VA = "0xC26374", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0xC26378", Offset = "0xC26378", VA = "0xC26378", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0xC2637C", Offset = "0xC2637C", VA = "0xC2637C")]
	public ZNTombieShopAnimBehaviorState()
	{
	}
}
[Token(Token = "0x2000193")]
[CreateAssetMenu(fileName = "ZNApplyModToEnemiesWaveAltercationAsset", menuName = "Scriptable Objects/Spawner/Wave Altercations/ZNApplyModToEnemiesWaveAltercationAsset")]
public class ZNApplyModToEnemiesWaveAltercationAsset : ZNWaveAltercationAsset
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The mod asset to apply to the enemies")]
	[SerializeField]
	protected SAModAsset ModAssetToApply;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("If we should disable the mod on postal zombies")]
	[SerializeField]
	protected bool bDisableOnPostalZombies;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("The percentage of enemies affected per wave")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float PercentageEnemiesAffected;

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xC26384", Offset = "0xC26384", VA = "0xC26384")]
	public ZNApplyModToEnemiesWaveAltercationAsset()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xC2648C", Offset = "0xC2648C", VA = "0xC2648C")]
	public SAModAsset GetModAssetToApply()
	{
		return null;
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xC26494", Offset = "0xC26494", VA = "0xC26494")]
	public bool IsDisabledOnPostalZombies()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0xC2649C", Offset = "0xC2649C", VA = "0xC2649C")]
	public float GetPercentageEnemiesAffected()
	{
		return default(float);
	}
}
[Token(Token = "0x2000194")]
public class ZNApplyModToEnemiesWaveAltercationInstance : ZNWaveAltercationInstance
{
	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNApplyModToEnemiesWaveAltercationAsset ApplyModToEnemiesWaveAlteractionAsset;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected SAModAsset ModAssetToApply;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool bDisabledOnPostalZombies;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float PercentageEnemiesAffected;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int NumEnemiesInWave;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected int NumEnemiesSpawned;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected int NumEnemiesToAffect;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected int NumEnemiesAffected;

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0xC264A4", Offset = "0xC264A4", VA = "0xC264A4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0xC2677C", Offset = "0xC2677C", VA = "0xC2677C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0xC26A0C", Offset = "0xC26A0C", VA = "0xC26A0C", Slot = "6")]
	public override void InitializeWaveAltercationInstance(ZNWaveAltercationAsset InWaveAltercationAsset)
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0xC26AEC", Offset = "0xC26AEC", VA = "0xC26AEC", Slot = "7")]
	protected override void DoWaveEffects(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0xC26B8C", Offset = "0xC26B8C", VA = "0xC26B8C")]
	protected void ApplyModToEnemy(ZNEnemyBase InSpawnedEnemy)
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xC26C58", Offset = "0xC26C58", VA = "0xC26C58")]
	private void EnemySpawned(ZNEnemyBase SpawnedEnemy)
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xC26D58", Offset = "0xC26D58", VA = "0xC26D58")]
	public ZNApplyModToEnemiesWaveAltercationInstance()
	{
	}
}
[Token(Token = "0x2000195")]
[CreateAssetMenu(fileName = "ZNRandomAltercationAsset", menuName = "Scriptable Objects/Spawner/Wave Altercations/ZNRandomAltercationAsset")]
public class ZNRandomAltercationAsset : ZNWaveAltercationAsset
{
	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The random wave altercation assets that could be granted")]
	[SerializeField]
	protected List<ZNWaveAltercationAsset> RandomWaveAltercationAssets;

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xC26D78", Offset = "0xC26D78", VA = "0xC26D78")]
	public ZNRandomAltercationAsset()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xC26E6C", Offset = "0xC26E6C", VA = "0xC26E6C")]
	public List<ZNWaveAltercationAsset> GetRandomWaveAltercationAssets()
	{
		return null;
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xC26E74", Offset = "0xC26E74", VA = "0xC26E74")]
	public ZNWaveAltercationAsset GetRandomWaveAltercationAssetFromList()
	{
		return null;
	}
}
[Token(Token = "0x2000196")]
public class ZNRandomAltercationInstance : ZNWaveAltercationInstance
{
	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNRandomAltercationAsset RandomAltercationAsset;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNWaveAltercationInstance SpawnedWaveAltercationInstance;

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0xC26F70", Offset = "0xC26F70", VA = "0xC26F70", Slot = "6")]
	public override void InitializeWaveAltercationInstance(ZNWaveAltercationAsset InWaveAltercationAsset)
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0xC26FFC", Offset = "0xC26FFC", VA = "0xC26FFC", Slot = "7")]
	protected override void DoWaveEffects(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0xC27188", Offset = "0xC27188", VA = "0xC27188", Slot = "8")]
	protected override void WaveEnded(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0xC27218", Offset = "0xC27218", VA = "0xC27218")]
	public ZNRandomAltercationInstance()
	{
	}
}
[Token(Token = "0x2000197")]
public class ZNWaveAltercationAsset : ScriptableObject
{
	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The wave altercation instance class")]
	[SerializeField]
	protected SubclassOf<ZNWaveAltercationInstance> WaveAltercationInstanceClass;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("If we want to enable this on boss waves")]
	protected bool bEnableOnBossWaves;

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0xC27220", Offset = "0xC27220", VA = "0xC27220")]
	public SubclassOf<ZNWaveAltercationInstance> GetWaveAltercationInstanceClass()
	{
		return null;
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0xC27228", Offset = "0xC27228", VA = "0xC27228", Slot = "4")]
	public virtual Type GetWaveAltercationInstanceClassType()
	{
		return null;
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0xC27280", Offset = "0xC27280", VA = "0xC27280")]
	public bool IsEnabledOnBossWaves()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0xC26484", Offset = "0xC26484", VA = "0xC26484")]
	public ZNWaveAltercationAsset()
	{
	}
}
[Token(Token = "0x2000198")]
public class ZNWaveAltercationInstance : MonoBehaviour
{
	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNWaveAltercationAsset CorrespondingWaveAltercationAsset;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool bValidWaveForAltercation;

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0xC265B0", Offset = "0xC265B0", VA = "0xC265B0", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0xC26888", Offset = "0xC26888", VA = "0xC26888", Slot = "5")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0xC27288", Offset = "0xC27288", VA = "0xC27288", Slot = "6")]
	public virtual void InitializeWaveAltercationInstance(ZNWaveAltercationAsset InWaveAltercationAsset)
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0xC27174", Offset = "0xC27174", VA = "0xC27174")]
	public void ForceDoWaveEffects(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0xC26B88", Offset = "0xC26B88", VA = "0xC26B88", Slot = "7")]
	protected virtual void DoWaveEffects(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0xC27290", Offset = "0xC27290", VA = "0xC27290")]
	protected void WaveBegan(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0xC273A0", Offset = "0xC273A0", VA = "0xC273A0", Slot = "8")]
	protected virtual void WaveEnded(int WaveNumber)
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0xC273A4", Offset = "0xC273A4", VA = "0xC273A4")]
	public ZNWaveAltercationAsset GetCorrespondingWaveAltercationAsset()
	{
		return null;
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0xC26D70", Offset = "0xC26D70", VA = "0xC26D70")]
	public ZNWaveAltercationInstance()
	{
	}
}
[Token(Token = "0x2000199")]
[CreateAssetMenu(fileName = "ZNEndlessWaveAlgorithmAsset", menuName = "Scriptable Objects/Spawner/ZNEndlessWaveAlgorithmAsset")]
public class ZNEndlessWaveAlgorithmAsset : ZNWaveAlgorithmAsset
{
	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("DEPRECATED, The rate of enemies increasing per wave. This number is multipled by the base number of enemies for wave 2.")]
	[Header("Endless Wave")]
	protected float BaseZombieIncreaseRatePercentage;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("DEPRECATED, The rate of change for enemies with each subsequent wave. This number is multipled by the base zombie increase rate percentage for waves 3+.")]
	[SerializeField]
	protected float ZombieIncreaseChangeRatePercentage;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("After completing this many waves, the custom waves will repeat. For example, if this is 25 and we have a custom wave at wave 5, then wave 30 will be the special wave 5 again.")]
	[SerializeField]
	protected int CustomWaveRepeatAfterWaves;

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0xC273AC", Offset = "0xC273AC", VA = "0xC273AC", Slot = "4")]
	public override int GetTotalNumberOfWaves()
	{
		return default(int);
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0xC273B4", Offset = "0xC273B4", VA = "0xC273B4", Slot = "5")]
	public override bool IsCustomWave(int InWaveNumber)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0xC2741C", Offset = "0xC2741C", VA = "0xC2741C", Slot = "6")]
	public override ZNWaveAsset GetCustomWaveAsset(int InWaveNumber)
	{
		return null;
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0xC274C4", Offset = "0xC274C4", VA = "0xC274C4", Slot = "7")]
	public override int GetNumberOfEnemiesForWave(int InWaveNumber)
	{
		return default(int);
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0xC276A0", Offset = "0xC276A0", VA = "0xC276A0")]
	public ZNEndlessWaveAlgorithmAsset()
	{
	}
}
[Token(Token = "0x200019A")]
public class ZNEnemyDropSpawner : MonoBehaviour
{
	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The noir coin prefab")]
	protected GameObject PF_NoirCoin;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The Health Pickup Prefab")]
	protected GameObject PF_HealthPickup;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The distance from in front of the door where items will spawn when enemies die in the false volume")]
	protected float SpawnDistanceFromDoor;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnItemDropped OnItemDroppedDel;

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0xC276BC", Offset = "0xC276BC", VA = "0xC276BC")]
	public bool SpawnObjectFromEnemy(GameObject ObjectPrefab, ZNEnemyBase Enemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0xC27880", Offset = "0xC27880", VA = "0xC27880")]
	public bool SpawnItem(GameObject ObjectToSpawn, Vector3 SpawnLocation)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0xC279DC", Offset = "0xC279DC", VA = "0xC279DC")]
	public bool SpawnHealthPickup(ZNEnemyBase Enemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0xC27AB4", Offset = "0xC27AB4", VA = "0xC27AB4")]
	public bool SpawnNoirCoin(ZNEnemyBase Enemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0xC27B8C", Offset = "0xC27B8C", VA = "0xC27B8C")]
	public ZNEnemyDropSpawner()
	{
	}
}
[Token(Token = "0x200019B")]
public class ZNEnemySpawner : ZNBuildObject
{
	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The actual possible locations that the enemy will spawn at")]
	[SerializeField]
	protected List<Transform> SpawnerTransforms;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The surface type")]
	[SerializeField]
	protected EZNSurfaceTypes SurfaceType;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The prefab we use to make barricades")]
	[SerializeField]
	protected GameObject PF_Barricade;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The part in the hierarchy where we place barricades")]
	protected Transform BarricadeTransform;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Tooltip("The object we use to check spawner validity inside the room")]
	protected Transform SpawnerValidityChecker;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("A multiplier that we can apply to cutting out the wall to help ensure we don't have open edges when we cut the wall out.")]
	[SerializeField]
	protected float WallSizeMultiplier;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected int NumEnemiesSpawnedThisWave;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int MaxNumEnemiesThisWave;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected ZNBarricade ActiveBarricade;

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0xC27B9C", Offset = "0xC27B9C", VA = "0xC27B9C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0xC27BA4", Offset = "0xC27BA4", VA = "0xC27BA4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0xC27C70", Offset = "0xC27C70", VA = "0xC27C70", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0xC27D3C", Offset = "0xC27D3C", VA = "0xC27D3C")]
	public void ResetSpawner()
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0xC27D44", Offset = "0xC27D44", VA = "0xC27D44")]
	public void SetMaxNumEnemiesThisWave(int InValue)
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0xC1B3A4", Offset = "0xC1B3A4", VA = "0xC1B3A4")]
	public ZNEnemyBase SpawnEnemy(ZNEnemyAsset InEnemyAsset, bool bExtraEnemy = false, [Optional] Transform InSpawnTransform)
	{
		return null;
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0xC27ECC", Offset = "0xC27ECC", VA = "0xC27ECC")]
	public void TryCreateBarricade()
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xC2804C", Offset = "0xC2804C", VA = "0xC2804C")]
	public EZNSurfaceTypes GetSurfaceType()
	{
		return default(EZNSurfaceTypes);
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xC28054", Offset = "0xC28054", VA = "0xC28054")]
	public float GetWallSizeMultiplier()
	{
		return default(float);
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xC2805C", Offset = "0xC2805C", VA = "0xC2805C")]
	public bool HasSpawnedMaxNumEnemiesThisWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xC27E34", Offset = "0xC27E34", VA = "0xC27E34")]
	public Transform GetSpawnTransform()
	{
		return null;
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xC27D4C", Offset = "0xC27D4C", VA = "0xC27D4C")]
	public Transform GetDummySpawnTransform()
	{
		return null;
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xC2806C", Offset = "0xC2806C", VA = "0xC2806C")]
	public Transform GetBarricadeTransform()
	{
		return null;
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xC28074", Offset = "0xC28074", VA = "0xC28074")]
	public Transform GetSpawnerValidityChecker()
	{
		return null;
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xC27FEC", Offset = "0xC27FEC", VA = "0xC27FEC")]
	public bool HasActiveBarricade()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xC2807C", Offset = "0xC2807C", VA = "0xC2807C")]
	public ZNBarricade GetActiveBarricade()
	{
		return null;
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xC28084", Offset = "0xC28084", VA = "0xC28084")]
	public ZNEnemySpawner()
	{
	}
}
[Token(Token = "0x200019C")]
public class ZNIntermissionManager : MonoBehaviour
{
	[Token(Token = "0x200019D")]
	[CompilerGenerated]
	private sealed class <DelayThenStartShopItemSpawnVFX>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNIntermissionManager <>4__this;

		[Token(Token = "0x17000087")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xC2A344", Offset = "0xC2A344", VA = "0xC2A344", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xC2A38C", Offset = "0xC2A38C", VA = "0xC2A38C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xC2A1EC", Offset = "0xC2A1EC", VA = "0xC2A1EC")]
		[DebuggerHidden]
		public <DelayThenStartShopItemSpawnVFX>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xC2A258", Offset = "0xC2A258", VA = "0xC2A258", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xC2A25C", Offset = "0xC2A25C", VA = "0xC2A25C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xC2A34C", Offset = "0xC2A34C", VA = "0xC2A34C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019E")]
	[CompilerGenerated]
	private sealed class <DelayThenInitializeIntermissionInfo>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNIntermissionManager <>4__this;

		[Token(Token = "0x17000089")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xC2A480", Offset = "0xC2A480", VA = "0xC2A480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xC2A4C8", Offset = "0xC2A4C8", VA = "0xC2A4C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xC2A214", Offset = "0xC2A214", VA = "0xC2A214")]
		[DebuggerHidden]
		public <DelayThenInitializeIntermissionInfo>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xC2A394", Offset = "0xC2A394", VA = "0xC2A394", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xC2A398", Offset = "0xC2A398", VA = "0xC2A398", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xC2A488", Offset = "0xC2A488", VA = "0xC2A488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNWorldButton EndIntermissionButton;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnIntermissionBegan OnIntermissionBeganDel;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnIntermissionEnded OnIntermissionEndedDel;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FOnIntermissionFailed OnEndIntermissionFailedDel;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FOnIntermissionDisplayTimerUpdated OnIntermissionDisplayTimerUpdatedDel;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The mod assets given to the player during the intermission")]
	[SerializeField]
	protected List<SAModAsset> IntermissionModAssets;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The SFX for pressing the bell/when the shop leaves")]
	[SerializeField]
	protected Event BellPressedSFX;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The SFX for when you fail to end the intermission")]
	[SerializeField]
	protected Event EndIntermissionFailedSFX;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected bool bActiveIntermission;

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0xC2909C", Offset = "0xC2909C", VA = "0xC2909C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0xC290F8", Offset = "0xC290F8", VA = "0xC290F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0xC291FC", Offset = "0xC291FC", VA = "0xC291FC")]
	public void BeginIntermission()
	{
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0xC29734", Offset = "0xC29734", VA = "0xC29734")]
	public void TryEndIntermission()
	{
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0xC29AC8", Offset = "0xC29AC8", VA = "0xC29AC8")]
	protected void EndIntermission()
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0xC293C8", Offset = "0xC293C8", VA = "0xC293C8")]
	protected void GiveIntermissionMods()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0xC29BCC", Offset = "0xC29BCC", VA = "0xC29BCC")]
	protected void RemoveIntermissionMods()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0xC29F38", Offset = "0xC29F38", VA = "0xC29F38")]
	public void FindShopManager()
	{
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0xC292F4", Offset = "0xC292F4", VA = "0xC292F4")]
	protected void ResetIntermissionInfo()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0xC29388", Offset = "0xC29388", VA = "0xC29388")]
	protected void InitializeIntermissionInfo(int InEndingWaveNumber)
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0xC2A088", Offset = "0xC2A088", VA = "0xC2A088")]
	protected void PreSpawnShopItems()
	{
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0xC2A11C", Offset = "0xC2A11C", VA = "0xC2A11C")]
	[IteratorStateMachine(typeof(<DelayThenStartShopItemSpawnVFX>d__23))]
	protected IEnumerator DelayThenStartShopItemSpawnVFX()
	{
		return null;
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0xC2A184", Offset = "0xC2A184", VA = "0xC2A184")]
	[IteratorStateMachine(typeof(<DelayThenInitializeIntermissionInfo>d__24))]
	protected IEnumerator DelayThenInitializeIntermissionInfo()
	{
		return null;
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0xC2A23C", Offset = "0xC2A23C", VA = "0xC2A23C")]
	protected void EndIntermissionButtonPressed(ZNWorldButton PressedWorldButton, ZNCharacterBase PressingCharacter)
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0xC2A240", Offset = "0xC2A240", VA = "0xC2A240")]
	public bool IsActiveIntermission()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0xC2A248", Offset = "0xC2A248", VA = "0xC2A248")]
	public ZNShopManager GetShopManager()
	{
		return null;
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0xC297E4", Offset = "0xC297E4", VA = "0xC297E4")]
	public bool CanEndIntermission(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xC2A250", Offset = "0xC2A250", VA = "0xC2A250")]
	public ZNIntermissionManager()
	{
	}
}
[Token(Token = "0x200019F")]
public class ZNRoomBoxPiece : MonoBehaviour
{
	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The room box side. Front is for the room, back is for the outside.")]
	[SerializeField]
	protected EZNRoomBoxSides RoomBoxSide;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Tooltip("The surface type, whether it is a wall, floor, or ceiling.")]
	protected EZNSurfaceTypes SurfaceType;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The opposite room box piece. Should be one that shares the same parent and has a different room box side set.")]
	[SerializeField]
	protected ZNRoomBoxPiece OppositeRoomBoxPiece;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The base object to show in VR mode for the top of the piece")]
	[SerializeField]
	protected GameObject VRModeTopVisuals;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The base object to show in VR mode for the top of the piece")]
	protected GameObject VRModeBottomVisuals;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool bAssignedRoomBoxParametersAtRuntime;

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xC2A4D0", Offset = "0xC2A4D0", VA = "0xC2A4D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xC2A5EC", Offset = "0xC2A5EC", VA = "0xC2A5EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xC2A82C", Offset = "0xC2A82C", VA = "0xC2A82C")]
	public void AssignRoomBoxParameters(EZNRoomBoxSides InRoomBoxSide, ZNRoomBoxPiece InOppositeRoomBoxPiece, GameObject InVRModeTopVisuals, GameObject InVRModeBottomVisuals)
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xC2A5FC", Offset = "0xC2A5FC", VA = "0xC2A5FC")]
	protected void SetInitialVRModePiecesScale()
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xC2A844", Offset = "0xC2A844", VA = "0xC2A844")]
	public EZNRoomBoxSides GetRoomBoxSide()
	{
		return default(EZNRoomBoxSides);
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0xC2A84C", Offset = "0xC2A84C", VA = "0xC2A84C")]
	public EZNSurfaceTypes GetSurfaceType()
	{
		return default(EZNSurfaceTypes);
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0xC2A854", Offset = "0xC2A854", VA = "0xC2A854")]
	public ZNRoomBoxPiece GetOppositeRoomBoxPiece()
	{
		return null;
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0xC2A85C", Offset = "0xC2A85C", VA = "0xC2A85C")]
	public GameObject GetVRModeTopVisuals()
	{
		return null;
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0xC2A864", Offset = "0xC2A864", VA = "0xC2A864")]
	public GameObject GetVRModeBottomVisuals()
	{
		return null;
	}

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0xC2A86C", Offset = "0xC2A86C", VA = "0xC2A86C")]
	public ZNRoomBoxPiece()
	{
	}
}
[Token(Token = "0x20001A0")]
public class ZNRoomBoxPieceParent : MonoBehaviour
{
	[Token(Token = "0x20001A1")]
	[CompilerGenerated]
	private sealed class <RecalibrateRoomboxPiecesAfterDelay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNRoomBoxPieceParent <>4__this;

		[Token(Token = "0x1700008B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0xC2B310", Offset = "0xC2B310", VA = "0xC2B310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0xC2B358", Offset = "0xC2B358", VA = "0xC2B358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xC2AAA0", Offset = "0xC2AAA0", VA = "0xC2AAA0")]
		[DebuggerHidden]
		public <RecalibrateRoomboxPiecesAfterDelay>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xC2B26C", Offset = "0xC2B26C", VA = "0xC2B26C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xC2B270", Offset = "0xC2B270", VA = "0xC2B270", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xC2B318", Offset = "0xC2B318", VA = "0xC2B318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected List<ZNRoomBoxPiece> ChildRoomBoxPieces;

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0xC2A874", Offset = "0xC2A874", VA = "0xC2A874")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0xC2A91C", Offset = "0xC2A91C", VA = "0xC2A91C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0xC2A9A4", Offset = "0xC2A9A4", VA = "0xC2A9A4")]
	public void AddChildRoomBoxPiece(ZNRoomBoxPiece InChildRoomBoxPiece)
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0xC2AA48", Offset = "0xC2AA48", VA = "0xC2AA48")]
	public void RemoveChildRoomBoxPiece(ZNRoomBoxPiece InChildRoomBoxPiece)
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0xC2A93C", Offset = "0xC2A93C", VA = "0xC2A93C")]
	[IteratorStateMachine(typeof(<RecalibrateRoomboxPiecesAfterDelay>d__5))]
	protected IEnumerator RecalibrateRoomboxPiecesAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0xC2AAC8", Offset = "0xC2AAC8", VA = "0xC2AAC8")]
	protected void RecalibrateRoomboxPieces()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0xC2ACC0", Offset = "0xC2ACC0", VA = "0xC2ACC0")]
	public List<ZNRoomBoxPiece> GetChildRoomBoxPieces()
	{
		return null;
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0xC2ACC8", Offset = "0xC2ACC8", VA = "0xC2ACC8")]
	public bool HasBeenSplit()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xC2AD18", Offset = "0xC2AD18", VA = "0xC2AD18")]
	public float GetWidth()
	{
		return default(float);
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0xC2AEF0", Offset = "0xC2AEF0", VA = "0xC2AEF0")]
	public float GetHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0xC2B0C8", Offset = "0xC2B0C8", VA = "0xC2B0C8")]
	public EZNSurfaceTypes GetSurfaceType()
	{
		return default(EZNSurfaceTypes);
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xC2B264", Offset = "0xC2B264", VA = "0xC2B264")]
	public ZNRoomBoxPieceParent()
	{
	}
}
[Token(Token = "0x20001A2")]
public class ZNSetupManager : MonoBehaviour
{
	[Token(Token = "0x20001A3")]
	[CompilerGenerated]
	private sealed class <WaitForInitializationCompleteThenAutoCompleteSetup>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x1700008D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xC2F31C", Offset = "0xC2F31C", VA = "0xC2F31C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xC2F364", Offset = "0xC2F364", VA = "0xC2F364", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xC2C0F0", Offset = "0xC2C0F0", VA = "0xC2C0F0")]
		[DebuggerHidden]
		public <WaitForInitializationCompleteThenAutoCompleteSetup>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xC2F1E4", Offset = "0xC2F1E4", VA = "0xC2F1E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xC2F1E8", Offset = "0xC2F1E8", VA = "0xC2F1E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xC2F324", Offset = "0xC2F324", VA = "0xC2F324", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001A4")]
	[CompilerGenerated]
	private sealed class <DelayBeforeTryProgressSetupPhase>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x1700008F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xC2F4A0", Offset = "0xC2F4A0", VA = "0xC2F4A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0xC2F4E8", Offset = "0xC2F4E8", VA = "0xC2F4E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xC2C910", Offset = "0xC2C910", VA = "0xC2C910")]
		[DebuggerHidden]
		public <DelayBeforeTryProgressSetupPhase>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xC2F36C", Offset = "0xC2F36C", VA = "0xC2F36C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xC2F370", Offset = "0xC2F370", VA = "0xC2F370", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xC2F4A8", Offset = "0xC2F4A8", VA = "0xC2F4A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001A5")]
	[CompilerGenerated]
	private sealed class <TryAutoCompleteRoomSetupOnDelay>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ZNSetupPhaseBuilderWeapon <SetupPhaseBuilderWeapon>5__2;

		[Token(Token = "0x17000091")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BB1")]
			[Address(RVA = "0xC2F81C", Offset = "0xC2F81C", VA = "0xC2F81C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0xC2F864", Offset = "0xC2F864", VA = "0xC2F864", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xC2CD54", Offset = "0xC2CD54", VA = "0xC2CD54")]
		[DebuggerHidden]
		public <TryAutoCompleteRoomSetupOnDelay>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xC2F4F0", Offset = "0xC2F4F0", VA = "0xC2F4F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xC2F4F4", Offset = "0xC2F4F4", VA = "0xC2F4F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xC2F824", Offset = "0xC2F824", VA = "0xC2F824", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001A6")]
	[CompilerGenerated]
	private sealed class <TryAutoPlaceDoors>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNSetupPhaseBuilderWeapon SetupPhaseBuilderWeapon;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__2;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <DefaultXPosition>5__3;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <NumChecksForRoomBoxPieceParent>5__4;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <j>5__5;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xC2FCE8", Offset = "0xC2FCE8", VA = "0xC2FCE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xC2FD30", Offset = "0xC2FD30", VA = "0xC2FD30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xC2CDF0", Offset = "0xC2CDF0", VA = "0xC2CDF0")]
		[DebuggerHidden]
		public <TryAutoPlaceDoors>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xC2F86C", Offset = "0xC2F86C", VA = "0xC2F86C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xC2F870", Offset = "0xC2F870", VA = "0xC2F870", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xC2FCF0", Offset = "0xC2FCF0", VA = "0xC2FCF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001A7")]
	[CompilerGenerated]
	private sealed class <TryAutoPlaceShops>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNSetupPhaseBuilderWeapon SetupPhaseBuilderWeapon;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Vector3> <CheckLocations>5__2;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <i>5__3;

		[Token(Token = "0x17000095")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xC304F0", Offset = "0xC304F0", VA = "0xC304F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0xC30538", Offset = "0xC30538", VA = "0xC30538", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xC2CE8C", Offset = "0xC2CE8C", VA = "0xC2CE8C")]
		[DebuggerHidden]
		public <TryAutoPlaceShops>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xC2FD38", Offset = "0xC2FD38", VA = "0xC2FD38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xC2FD3C", Offset = "0xC2FD3C", VA = "0xC2FD3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xC304F8", Offset = "0xC304F8", VA = "0xC304F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001A8")]
	[CompilerGenerated]
	private sealed class <WaitHalfSecondToInitialize>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupManager <>4__this;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <InitializeTries>5__2;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xC30620", Offset = "0xC30620", VA = "0xC30620", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0xC30668", Offset = "0xC30668", VA = "0xC30668", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xC2E8F4", Offset = "0xC2E8F4", VA = "0xC2E8F4")]
		[DebuggerHidden]
		public <WaitHalfSecondToInitialize>d__74(int <>1__state)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xC30540", Offset = "0xC30540", VA = "0xC30540", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xC30544", Offset = "0xC30544", VA = "0xC30544", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xC30628", Offset = "0xC30628", VA = "0xC30628", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnSetupBegan OnSetupBeganDel;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnSetupEnded OnSetupEndedDel;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FOnSetupPhaseChanged OnSetupPhaseChangedDel;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnNumSpawnersPlacedUpdated OnNumSpawnersPlacedUpdatedDel;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnNumShopsPlacedUpdated OnNumShopsPlacedUpdatedDel;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnSetupPhaseResetted OnSetupPhaseResettedDel;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The room light game object to spawn in MR mode")]
	[SerializeField]
	protected GameObject PF_RoomLight_MR;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The room light game object to spawn in VR mode")]
	[SerializeField]
	protected GameObject PF_RoomLight_VR;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Message prompt for the setup info with auto complete")]
	[SerializeField]
	protected ZNMessagePromptAsset MP_SetupInfoWithAutoComplete;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Message prompt for the setup info without auto complete")]
	[SerializeField]
	protected ZNMessagePromptAsset MP_SetupInfoWithoutAutoComplete;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Message prompt for running auto complete setup")]
	[SerializeField]
	protected ZNMessagePromptAsset MP_RunningAutoCompleteSetup;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Message prompt for when auto complete setup failed")]
	[SerializeField]
	protected ZNMessagePromptAsset MP_AutoCompleteSetupFailed;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("Message prompt for when the spawners are disconnected")]
	protected ZNMessagePromptAsset MP_SpawnersDisconnected;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The minimum room height. If lower than this, we get a message about needing to make larger walls.")]
	[SerializeField]
	protected float MinimumRoomHeight;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Tooltip("The message prompt we give when players have a room that isn't tall enough")]
	protected ZNMessagePromptAsset MP_RoomHeightTooSmall;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The minimum room area size. If the room size is smaller than this, we get a message about our room being too small.")]
	protected float MinimumRoomArea;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Tooltip("The minimum wall length. If the longest wall is shorter than this, we get a message about our room being too small.")]
	protected float MinimumWallLength;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("The message prompt we give when players have a room that is too small or can't fit doors")]
	protected ZNMessagePromptAsset MP_SmallRoom;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The message prompt we give when room setup fails (determined by not being able to cache a room height)")]
	protected ZNMessagePromptAsset MP_RoomSetupFailed;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The SFX to play when room setup fails")]
	[SerializeField]
	protected Event RoomSetupFailedSFX;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The SFX to play when the room is reset")]
	[SerializeField]
	protected Event RoomResettedSFX;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The auto complete setup builder")]
	[SerializeField]
	protected GameObject PF_AutoCompleteSetupBuilder;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("The weapon asset for the auto complete setup builder")]
	[SerializeField]
	protected ZNBuilderWeaponAsset WEP_AutoCompleteSetupBuilder;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Tooltip("How much space between auto complete checks for the door")]
	protected float DoorAutoCompleteChecksRange;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	[Tooltip("How much space between auto complete checks for the shop")]
	protected float ShopAutoCompleteChecksRange;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Tooltip("We check these locations first during the shop auto complete phase")]
	protected List<Vector3> ShopAutoCompleteInitialCheckLocations;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNRoomBoxPieceParent[] RoomBoxPieceParents;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected List<ZNRoomBoxPieceParent> RoomBoxPieceParentWalls;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected bool bActiveSetup;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	protected bool bDoingAutoRoomSetup;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	protected int CurrentSetupPhase;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected int MaxNumSpawners;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	protected int NumSpawnersPlaced;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<ZNEnemySpawner> PlacedSpawners;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	protected int NumShopsPlaced;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<ZNShopManager> PlacedShops;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected bool bRoomDataInitialized;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	protected float RoomHeight;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected float LongestWallLength;

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0xC2B360", Offset = "0xC2B360", VA = "0xC2B360")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0xC2B41C", Offset = "0xC2B41C", VA = "0xC2B41C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0xC2B540", Offset = "0xC2B540", VA = "0xC2B540")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0xC2B5E4", Offset = "0xC2B5E4", VA = "0xC2B5E4")]
	protected bool InitializeRoomData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0xC2B64C", Offset = "0xC2B64C", VA = "0xC2B64C")]
	protected void CacheRoomBoxPieceParents()
	{
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0xC2B978", Offset = "0xC2B978", VA = "0xC2B978")]
	protected void HandleFurniture()
	{
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0xC2BA84", Offset = "0xC2BA84", VA = "0xC2BA84")]
	protected void CacheRoomSizing()
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0xC2BC7C", Offset = "0xC2BC7C", VA = "0xC2BC7C")]
	protected void CheckRoomSizing()
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0xC2BD48", Offset = "0xC2BD48", VA = "0xC2BD48")]
	protected void CreateRoomLight()
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0xC2B4D8", Offset = "0xC2B4D8", VA = "0xC2B4D8")]
	[IteratorStateMachine(typeof(<WaitForInitializationCompleteThenAutoCompleteSetup>d__9))]
	protected IEnumerator WaitForInitializationCompleteThenAutoCompleteSetup()
	{
		return null;
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0xC2C118", Offset = "0xC2C118", VA = "0xC2C118")]
	public void BeginSetup()
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0xC2C22C", Offset = "0xC2C22C", VA = "0xC2C22C")]
	public void EndSetup()
	{
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0xC2C374", Offset = "0xC2C374", VA = "0xC2C374")]
	public void TryResetSetupPhase()
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0xC2C42C", Offset = "0xC2C42C", VA = "0xC2C42C")]
	protected void ResetSetupPhase()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0xC2C684", Offset = "0xC2C684", VA = "0xC2C684")]
	public void ChangeSetupPhase(int InSetupPhase)
	{
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0xC2C6B8", Offset = "0xC2C6B8", VA = "0xC2C6B8")]
	public void SetMaxNumSpawners(int InMaxNumSpawners)
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0xC2C78C", Offset = "0xC2C78C", VA = "0xC2C78C")]
	public void RegisterSpawnerAdded(ZNEnemySpawner NewEnemySpawner)
	{
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0xC2C83C", Offset = "0xC2C83C", VA = "0xC2C83C")]
	public void RegisterSpawnerRemoved(ZNEnemySpawner RemovingEnemySpawner)
	{
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0xC2C6C0", Offset = "0xC2C6C0", VA = "0xC2C6C0")]
	protected void HandleNumSpawnersPlacedUpdated()
	{
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0xC2C8A8", Offset = "0xC2C8A8", VA = "0xC2C8A8")]
	[IteratorStateMachine(typeof(<DelayBeforeTryProgressSetupPhase>d__60))]
	protected IEnumerator DelayBeforeTryProgressSetupPhase()
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0xC2BF84", Offset = "0xC2BF84", VA = "0xC2BF84")]
	protected void RequestMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0xC2B80C", Offset = "0xC2B80C", VA = "0xC2B80C")]
	protected void ClearMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0xC2C938", Offset = "0xC2C938", VA = "0xC2C938")]
	public void RegisterShopAdded(ZNShopManager NewShop)
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0xC2CB6C", Offset = "0xC2CB6C", VA = "0xC2CB6C")]
	public void RegisterShopRemoved(ZNShopManager RemovingShop)
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0xC2CB24", Offset = "0xC2CB24", VA = "0xC2CB24")]
	protected void HandleNumShopsPlacedUpdated()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0xC2CCCC", Offset = "0xC2CCCC", VA = "0xC2CCCC")]
	public void TryAutoCompleteRoomSetup()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xC2CCEC", Offset = "0xC2CCEC", VA = "0xC2CCEC")]
	[IteratorStateMachine(typeof(<TryAutoCompleteRoomSetupOnDelay>d__67))]
	protected IEnumerator TryAutoCompleteRoomSetupOnDelay()
	{
		return null;
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0xC2CD7C", Offset = "0xC2CD7C", VA = "0xC2CD7C")]
	[IteratorStateMachine(typeof(<TryAutoPlaceDoors>d__68))]
	protected IEnumerator TryAutoPlaceDoors(ZNSetupPhaseBuilderWeapon SetupPhaseBuilderWeapon)
	{
		return null;
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0xC2CE18", Offset = "0xC2CE18", VA = "0xC2CE18")]
	[IteratorStateMachine(typeof(<TryAutoPlaceShops>d__69))]
	protected IEnumerator TryAutoPlaceShops(ZNSetupPhaseBuilderWeapon SetupPhaseBuilderWeapon)
	{
		return null;
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0xC2C370", Offset = "0xC2C370", VA = "0xC2C370")]
	protected void UpdateRoom()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0xC2CEB4", Offset = "0xC2CEB4", VA = "0xC2CEB4")]
	protected void UpdateRoomForEditor()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0xC2E4D0", Offset = "0xC2E4D0", VA = "0xC2E4D0")]
	protected void UpdateSpawnersConnectedGameObjects(ZNEnemySpawner ModifyingRoomBoxPiece, GameObject ConnectedGameObjectToReplace, GameObject RightObjectReplacement, GameObject LeftObjectReplacement)
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0xC2E808", Offset = "0xC2E808", VA = "0xC2E808")]
	private void OVRManager_SpaceQueryComplete(ulong requestId, bool result)
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0xC2E88C", Offset = "0xC2E88C", VA = "0xC2E88C")]
	[IteratorStateMachine(typeof(<WaitHalfSecondToInitialize>d__74))]
	private IEnumerator WaitHalfSecondToInitialize()
	{
		return null;
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0xC2E91C", Offset = "0xC2E91C", VA = "0xC2E91C")]
	public int GetNumSpawnersPlaced()
	{
		return default(int);
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0xC2E924", Offset = "0xC2E924", VA = "0xC2E924")]
	public List<ZNEnemySpawner> GetPlacedSpawners()
	{
		return null;
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0xC2E92C", Offset = "0xC2E92C", VA = "0xC2E92C")]
	public int GetMaxNumSpawers()
	{
		return default(int);
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xC2E934", Offset = "0xC2E934", VA = "0xC2E934")]
	public int GetNumShopsPlaced()
	{
		return default(int);
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xC2E93C", Offset = "0xC2E93C", VA = "0xC2E93C")]
	public bool CanProgressSetupPhase(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xC2EEE4", Offset = "0xC2EEE4", VA = "0xC2EEE4")]
	public float GetRoomHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xC2C398", Offset = "0xC2C398", VA = "0xC2C398")]
	protected bool CanResetSetupPhase()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0xC2EEEC", Offset = "0xC2EEEC", VA = "0xC2EEEC")]
	protected ZNRoomBoxPieceParent GetClosestRoomBoxPieceParentWall(Vector3 InCheckPosition)
	{
		return null;
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0xC2F0B4", Offset = "0xC2F0B4", VA = "0xC2F0B4")]
	public ZNSetupManager()
	{
	}
}
[Token(Token = "0x20001A9")]
public class ZNShootingRangeSetupManager : ZNSetupManager
{
	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0xC30670", Offset = "0xC30670", VA = "0xC30670")]
	public void RegisterWeaponsTableAdded(ZNWeaponsTableManager NewWeaponsTable)
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xC30680", Offset = "0xC30680", VA = "0xC30680")]
	public void RegisterWeaponsTableRemoved(ZNWeaponsTableManager RemovingWeaponsTable)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0xC30690", Offset = "0xC30690", VA = "0xC30690")]
	public ZNShootingRangeSetupManager()
	{
	}
}
[Token(Token = "0x20001AA")]
[CreateAssetMenu(fileName = "ZNStandardWaveAlgorithmAsset", menuName = "Scriptable Objects/Spawner/ZNStandardWaveAlgorithmAsset")]
public class ZNStandardWaveAlgorithmAsset : ZNWaveAlgorithmAsset
{
	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Standard Wave")]
	[SerializeField]
	[Tooltip("The base number of enemies at the final wave")]
	protected int FinalNumberOfEnemies;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("The total number of waves")]
	[SerializeField]
	protected int TotalNumberOfWaves;

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0xC30694", Offset = "0xC30694", VA = "0xC30694", Slot = "4")]
	public override int GetTotalNumberOfWaves()
	{
		return default(int);
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xC3069C", Offset = "0xC3069C", VA = "0xC3069C", Slot = "7")]
	public override int GetNumberOfEnemiesForWave(int InWaveNumber)
	{
		return default(int);
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0xC30AC8", Offset = "0xC30AC8", VA = "0xC30AC8")]
	public ZNStandardWaveAlgorithmAsset()
	{
	}
}
[Token(Token = "0x20001AB")]
public class ZNTargetDummySpawnPoint : MonoBehaviour
{
	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0xC30AF0", Offset = "0xC30AF0", VA = "0xC30AF0")]
	public ZNTargetDummySpawnPoint()
	{
	}
}
[Token(Token = "0x20001AC")]
public class ZNWaveAlgorithmAsset : ScriptableObject
{
	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("A list of special wave infos. These waves will function differently from regular waves.")]
	[Header("Waves")]
	protected List<ZNSpecialWaveInfo> SpecialWaveInfos;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("A dictionary of enemy asset to enemy spawn info to help with spawning zombies.")]
	protected SerializableDictionary<ZNEnemyAsset, FZNEnemySpawnInfo> EnemySpawnInfoDictionary;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("A dictionary that uses custom waves at the given wave numbers.")]
	[SerializeField]
	protected SerializableDictionary<int, ZNWaveAsset> CustomWavesDictionary;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The base number of enemies at the first wave")]
	[SerializeField]
	protected int BaseNumberOfEnemies;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Tooltip("The base number of coins player recieves during a wave")]
	protected int BaseCoinsPerWave;

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0xC30AF8", Offset = "0xC30AF8", VA = "0xC30AF8", Slot = "4")]
	public virtual int GetTotalNumberOfWaves()
	{
		return default(int);
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0xC30B00", Offset = "0xC30B00", VA = "0xC30B00", Slot = "5")]
	public virtual bool IsCustomWave(int InWaveNumber)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0xC30B58", Offset = "0xC30B58", VA = "0xC30B58", Slot = "6")]
	public virtual ZNWaveAsset GetCustomWaveAsset(int InWaveNumber)
	{
		return null;
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0xC30BEC", Offset = "0xC30BEC", VA = "0xC30BEC")]
	public int GetNumberOfCoinsForWave(int InWaveNumber)
	{
		return default(int);
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0xC30C88", Offset = "0xC30C88", VA = "0xC30C88", Slot = "7")]
	public virtual int GetNumberOfEnemiesForWave(int InWaveNumber)
	{
		return default(int);
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0xC30D24", Offset = "0xC30D24", VA = "0xC30D24")]
	public Dictionary<ZNEnemyAsset, int> GetEnemyAssetsAndWeightsForWave(int InWaveNumber)
	{
		return null;
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0xC31254", Offset = "0xC31254", VA = "0xC31254")]
	public Dictionary<ZNEnemyAsset, int> GetEnemySpawnCountsForWave(int InWaveNumber)
	{
		return null;
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0xC31BA0", Offset = "0xC31BA0", VA = "0xC31BA0")]
	public SerializableDictionary<ZNEnemyAsset, FZNEnemySpawnInfo> GetEnemySpawnInfoDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xC31BA8", Offset = "0xC31BA8", VA = "0xC31BA8")]
	public bool IsBossWave(int InWaveNumber)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0xC31C48", Offset = "0xC31C48", VA = "0xC31C48")]
	public bool IsFinalBossWave(int InWaveNumber)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0xC30ADC", Offset = "0xC30ADC", VA = "0xC30ADC")]
	public ZNWaveAlgorithmAsset()
	{
	}
}
[Token(Token = "0x20001AD")]
[CreateAssetMenu(fileName = "ZNWaveAsset", menuName = "Scriptable Objects/Spawner/ZNWaveAsset")]
public class ZNWaveAsset : ScriptableObject
{
	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The enemies that spawn and how many will spawn. Make sure that the integer value is at least 1.")]
	protected SerializableDictionary<ZNEnemyAsset, int> EnemyCountDictionary;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The number of coins for this wave")]
	protected int CoinCount;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("If this wave is considered a boss wave.")]
	[SerializeField]
	protected bool bBossWave;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[Tooltip("If this wave is considered a final boss wave.")]
	[SerializeField]
	protected bool bFinalBossWave;

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0xC307D4", Offset = "0xC307D4", VA = "0xC307D4")]
	public int GetNumberOfEnemies()
	{
		return default(int);
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0xC31CE8", Offset = "0xC31CE8", VA = "0xC31CE8")]
	public int GetNumberOfCoins()
	{
		return default(int);
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0xC31848", Offset = "0xC31848", VA = "0xC31848")]
	public Dictionary<ZNEnemyAsset, int> GetEnemyCountDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0xC31CF0", Offset = "0xC31CF0", VA = "0xC31CF0")]
	public bool IsBossWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0xC31CF8", Offset = "0xC31CF8", VA = "0xC31CF8")]
	public bool IsFinalBossWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xC31D00", Offset = "0xC31D00", VA = "0xC31D00")]
	public ZNWaveAsset()
	{
	}
}
[Token(Token = "0x20001AE")]
public class ZNWaveManager : MonoBehaviour
{
	[Token(Token = "0x20001AF")]
	[CompilerGenerated]
	private sealed class <EndWaveAfterOneFrame>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNWaveManager <>4__this;

		[Token(Token = "0x17000099")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xC35B4C", Offset = "0xC35B4C", VA = "0xC35B4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xC35B94", Offset = "0xC35B94", VA = "0xC35B94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xC339F4", Offset = "0xC339F4", VA = "0xC339F4")]
		[DebuggerHidden]
		public <EndWaveAfterOneFrame>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xC35AAC", Offset = "0xC35AAC", VA = "0xC35AAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xC35AB0", Offset = "0xC35AB0", VA = "0xC35AB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xC35B54", Offset = "0xC35B54", VA = "0xC35B54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001B0")]
	[CompilerGenerated]
	private sealed class <SpawnEnemiesOnRepeat>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNWaveManager <>4__this;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0xC35CD0", Offset = "0xC35CD0", VA = "0xC35CD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xC35D18", Offset = "0xC35D18", VA = "0xC35D18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xC33AD0", Offset = "0xC33AD0", VA = "0xC33AD0")]
		[DebuggerHidden]
		public <SpawnEnemiesOnRepeat>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xC35B9C", Offset = "0xC35B9C", VA = "0xC35B9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xC35BA0", Offset = "0xC35BA0", VA = "0xC35BA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xC35CD8", Offset = "0xC35CD8", VA = "0xC35CD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnWaveBegan OnWaveBeganDel;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnWaveEnded OnWaveEndedDel;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FOnEnemySpawned OnEnemySpawnedDel;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("")]
	[SerializeField]
	protected float IncreasedWaitTimeForFirstKillAfterMaxEnemiesAtOnceReached;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Tooltip("How much time between enemy spawns")]
	protected Vector2 NextEnemySpawnTimeRange;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[Tooltip("Base Chance of coin being dropped, before any other modifiers")]
	protected float BaseCoinDropChance;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Controls how noir coins are dispered through wave progress")]
	[SerializeField]
	protected AnimationCurve CoinDropRampCurve;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNIntermissionManager IntermissionManager;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNCaseFileAsset SelectedCaseFile;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNWaveAlgorithmAsset CurrentWaveAlgorithmAsset;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<int, FZNWaveSpawnInfo> WaveSpawnInfos;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected List<ZNEnemySpawner> EnemySpawners;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Dictionary<ZNEnemyAsset, CurrentAndMaxValue> PrioritizedEnemyAssetWaveSpawnCountDictionary;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Dictionary<ZNEnemyAsset, CurrentAndMaxValue> NormalEnemyAssetWaveSpawnCountDictionary;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected Dictionary<ZNEnemyAsset, CurrentAndMaxValue> DeferredEnemyAssetWaveSpawnCountDictionary;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected List<ZNEnemyBase> ActiveEnemies;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected ZNObjectiveActivityInstance ActiveObjective;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected List<ZNObjectiveActivityAsset> ObjectiveAssets;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ZNEnemyDropSpawner DropSpawner;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool bActiveWave;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	protected bool bBossWave;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	protected bool bFinalBossWave;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected int WaveNumber;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected int WaveNumberAdjustedForObjectives;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected int MaxNumEnemiesToSpawn;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected int CurrentNumEnemiesSpawned;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected int CurrentNumEnemiesDefeated;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected int MaxNumEnemiesAtOnce;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	protected int TotalNumEnemies;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected int CurrentNumCoinsSpawned;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected int MaxNumNoirCoins;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected int TotalNumWaves;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	protected bool bEndless;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected int NumEnemiesAlive;

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xC31D14", Offset = "0xC31D14", VA = "0xC31D14")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xC330E8", Offset = "0xC330E8", VA = "0xC330E8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0xC32070", Offset = "0xC32070", VA = "0xC32070")]
	protected void InitializeWaveSpawnInfos()
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0xC330EC", Offset = "0xC330EC", VA = "0xC330EC")]
	public void AssignObjectiveAssets(List<ZNObjectiveActivityAsset> InObjectiveAssets)
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0xC31F18", Offset = "0xC31F18", VA = "0xC31F18")]
	public void FindAllEnemySpawners()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0xC330F4", Offset = "0xC330F4", VA = "0xC330F4")]
	public void SetMaxNumEnemiesAtOnce(int InMaxNumEnemiesAtOnce)
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0xC330FC", Offset = "0xC330FC", VA = "0xC330FC")]
	public void BeginWave()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0xC3397C", Offset = "0xC3397C", VA = "0xC3397C")]
	public void IncreaseWaveNumber()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0xC3398C", Offset = "0xC3398C", VA = "0xC3398C")]
	[IteratorStateMachine(typeof(<EndWaveAfterOneFrame>d__43))]
	protected IEnumerator EndWaveAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0xC33A1C", Offset = "0xC33A1C", VA = "0xC33A1C")]
	public void EndWave()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xC33578", Offset = "0xC33578", VA = "0xC33578")]
	protected void BeginWaveObjective()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xC33914", Offset = "0xC33914", VA = "0xC33914")]
	[IteratorStateMachine(typeof(<SpawnEnemiesOnRepeat>d__46))]
	protected IEnumerator SpawnEnemiesOnRepeat()
	{
		return null;
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xC33AF8", Offset = "0xC33AF8", VA = "0xC33AF8")]
	protected bool CanSpawnEnemy()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0xC33B00", Offset = "0xC33B00", VA = "0xC33B00")]
	protected ZNEnemyBase SpawnEnemyForWave()
	{
		return null;
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0xC348AC", Offset = "0xC348AC", VA = "0xC348AC")]
	public ZNEnemyBase SpawnExtraEnemy(ZNEnemyAsset InExtraEnemyAsset)
	{
		return null;
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0xC34514", Offset = "0xC34514", VA = "0xC34514")]
	protected ZNEnemyBase SpawnEnemy(ZNEnemyAsset InEnemyAsset, ZNEnemySpawner InEnemySpawner)
	{
		return null;
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0xC3432C", Offset = "0xC3432C", VA = "0xC3432C")]
	protected ZNEnemySpawner DetermineEnemySpawner(bool bExtraEnemy = false)
	{
		return null;
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0xC33C2C", Offset = "0xC33C2C", VA = "0xC33C2C")]
	protected ZNEnemyAsset DetermineEnemyAsset(out EZNEnemySpawnPriorities OutEnemySpawnPriority)
	{
		return null;
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0xC3339C", Offset = "0xC3339C", VA = "0xC3339C")]
	protected void ResetWaveInfo()
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0xC33428", Offset = "0xC33428", VA = "0xC33428")]
	protected void InitializeWaveInfo(int InWaveNumber)
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0xC34B90", Offset = "0xC34B90", VA = "0xC34B90")]
	protected void TryUpdateEnemyAssetWaveSpawnCounts(int InWaveNumber)
	{
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0xC34F10", Offset = "0xC34F10", VA = "0xC34F10")]
	protected void CharacterDied(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xC350D0", Offset = "0xC350D0", VA = "0xC350D0")]
	private void DropItem(ZNEnemyBase EnemyBase)
	{
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xC351A0", Offset = "0xC351A0", VA = "0xC351A0")]
	private bool TryDroppingNoirCoin(ZNEnemyBase Enemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xC35250", Offset = "0xC35250", VA = "0xC35250")]
	public void KillAllActiveEnemies()
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xC3533C", Offset = "0xC3533C", VA = "0xC3533C")]
	public void SetAllActiveEnemiesNavTarget([Optional] Transform Target, float AttractionRange = 0f)
	{
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xC357B4", Offset = "0xC357B4", VA = "0xC357B4")]
	public List<ZNEnemyBase> GetAllActiveEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xC357BC", Offset = "0xC357BC", VA = "0xC357BC")]
	public ZNEnemyDropSpawner GetEnemyDropSpawner()
	{
		return null;
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xC357C4", Offset = "0xC357C4", VA = "0xC357C4")]
	public int GetWaveNumber()
	{
		return default(int);
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xC357CC", Offset = "0xC357CC", VA = "0xC357CC")]
	public int GetWavesCleared(bool bSuccess)
	{
		return default(int);
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xC35864", Offset = "0xC35864", VA = "0xC35864")]
	public int GetTotalNumWaves()
	{
		return default(int);
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0xC3586C", Offset = "0xC3586C", VA = "0xC3586C")]
	public bool IsEndless()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xC35874", Offset = "0xC35874", VA = "0xC35874")]
	public int GetTotalEnemiesThisWave()
	{
		return default(int);
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xC34AE4", Offset = "0xC34AE4", VA = "0xC34AE4")]
	public int GetNumberOfEnemiesForWave(int InWaveNumber)
	{
		return default(int);
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xC34E3C", Offset = "0xC34E3C", VA = "0xC34E3C")]
	public Dictionary<ZNEnemyAsset, int> GetEnemySpawnCountForWave(int InWaveNumber)
	{
		return null;
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xC3587C", Offset = "0xC3587C", VA = "0xC3587C")]
	public bool IsActiveWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0xC35884", Offset = "0xC35884", VA = "0xC35884")]
	public bool IsBossWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0xC3588C", Offset = "0xC3588C", VA = "0xC3588C")]
	public bool IsFinalBossWave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0xC34470", Offset = "0xC34470", VA = "0xC34470")]
	public Dictionary<ZNEnemyAsset, CurrentAndMaxValue> GetEnemyAssetWaveSpawnCountDictionaryForPriority(EZNEnemySpawnPriorities InEnemySpawnPriority)
	{
		return null;
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0xC34950", Offset = "0xC34950", VA = "0xC34950")]
	public int GetNumEnemiesLeftForPriority(EZNEnemySpawnPriorities InEnemySpawnPriority)
	{
		return default(int);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xC33558", Offset = "0xC33558", VA = "0xC33558")]
	public bool IsValidWaveForObjectives()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xC35894", Offset = "0xC35894", VA = "0xC35894")]
	public ZNWaveManager()
	{
	}
}
[Token(Token = "0x20001B1")]
public class ZNWeaponsTableManager : MonoBehaviour
{
	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xC35D20", Offset = "0xC35D20", VA = "0xC35D20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xC35E2C", Offset = "0xC35E2C", VA = "0xC35E2C")]
	public ZNWeaponsTableManager()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ZNWorldButton : MonoBehaviour
{
	[Token(Token = "0x20001B3")]
	[CompilerGenerated]
	private sealed class <EndCooldownAfterDelay>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNWorldButton <>4__this;

		[Token(Token = "0x1700009D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xC36A44", Offset = "0xC36A44", VA = "0xC36A44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xC36A8C", Offset = "0xC36A8C", VA = "0xC36A8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xC367A0", Offset = "0xC367A0", VA = "0xC367A0")]
		[DebuggerHidden]
		public <EndCooldownAfterDelay>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xC36988", Offset = "0xC36988", VA = "0xC36988", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xC3698C", Offset = "0xC3698C", VA = "0xC3698C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xC36A4C", Offset = "0xC36A4C", VA = "0xC36A4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnWorldButtonPressed OnWorldButtonPressedDel;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("If this is a simple trigger type button that doesn't need rigidbodies and such")]
	protected bool bTriggerType;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If a trigger type, this is the animator that plays the pressed animation")]
	[SerializeField]
	protected Animator TriggerTypeAnimator;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("How long in seconds that the button goes on cooldown for after being pressed")]
	[SerializeField]
	protected float ButtonCooldownTime;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float Threshold;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float Deadzone;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected bool bEnabled;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	protected bool bOnCooldown;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool bIsPressed;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 StartPosition;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ConfigurableJoint Joint;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ZNMainCharacter MainCharacter;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool bIsRightHand;

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0xC35E34", Offset = "0xC35E34", VA = "0xC35E34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0xC35EA8", Offset = "0xC35EA8", VA = "0xC35EA8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0xC36088", Offset = "0xC36088", VA = "0xC36088")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0xC36218", Offset = "0xC36218", VA = "0xC36218")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xC364DC", Offset = "0xC364DC", VA = "0xC364DC")]
	public void TryPressWorldButton()
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0xC36588", Offset = "0xC36588", VA = "0xC36588")]
	protected void PressWorldButton()
	{
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xC36738", Offset = "0xC36738", VA = "0xC36738")]
	[IteratorStateMachine(typeof(<EndCooldownAfterDelay>d__19))]
	protected IEnumerator EndCooldownAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xC367C8", Offset = "0xC367C8", VA = "0xC367C8")]
	private void Released()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xC3683C", Offset = "0xC3683C", VA = "0xC3683C")]
	private float GetDepressedValue()
	{
		return default(float);
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xC36954", Offset = "0xC36954", VA = "0xC36954")]
	public void SetEnabled(bool bInEnabled)
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0xC36568", Offset = "0xC36568", VA = "0xC36568")]
	public bool CanPressWorldButton()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xC36960", Offset = "0xC36960", VA = "0xC36960")]
	public ZNWorldButton()
	{
	}
}
[Token(Token = "0x20001B4")]
public class ZNWorldButtonResponder : MonoBehaviour
{
	[Token(Token = "0x6000C28")]
	[Address(RVA = "0xC36A94", Offset = "0xC36A94", VA = "0xC36A94")]
	public ZNWorldButtonResponder()
	{
	}
}
[Token(Token = "0x20001B5")]
public class SAAddressableScriptableObject : ScriptableObject
{
	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("If this has been updated to show the default addressable name")]
	[HideInInspector]
	protected bool bUpdatedAddressableNameToDefault;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Press this checkbox to update the addressable name to the default value. Works like a button.")]
	[SerializeField]
	protected bool bUpdateAddressableToDefault;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The addressable name")]
	protected string AddressableName;

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xC36A9C", Offset = "0xC36A9C", VA = "0xC36A9C")]
	public SAAddressableScriptableObject()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xC36AA4", Offset = "0xC36AA4", VA = "0xC36AA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xC36AC0", Offset = "0xC36AC0", VA = "0xC36AC0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xC36ABC", Offset = "0xC36ABC", VA = "0xC36ABC")]
	protected void UpdateAddressableNameToDefault()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xC36AD0", Offset = "0xC36AD0", VA = "0xC36AD0")]
	public string GetAddressableName()
	{
		return null;
	}
}
[Token(Token = "0x20001B6")]
public class SASpinningObject : MonoBehaviour
{
	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How many degrees the object spins per second on each axis")]
	[SerializeField]
	protected Vector3 SpinDegreesPerSecond;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Vector3 CurrentAngles;

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xC36AD8", Offset = "0xC36AD8", VA = "0xC36AD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xC36BF8", Offset = "0xC36BF8", VA = "0xC36BF8")]
	public SASpinningObject()
	{
	}
}
[Token(Token = "0x20001B7")]
public class SASetTextToPlayerName : MonoBehaviour
{
	[Token(Token = "0x20001B8")]
	[CompilerGenerated]
	private sealed class <WaitToShowPlayerName>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SASetTextToPlayerName <>4__this;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xC36EE0", Offset = "0xC36EE0", VA = "0xC36EE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0xC36F28", Offset = "0xC36F28", VA = "0xC36F28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xC36D60", Offset = "0xC36D60", VA = "0xC36D60")]
		[DebuggerHidden]
		public <WaitToShowPlayerName>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xC36D90", Offset = "0xC36D90", VA = "0xC36D90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xC36D94", Offset = "0xC36D94", VA = "0xC36D94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xC36EE8", Offset = "0xC36EE8", VA = "0xC36EE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected TextMeshProUGUI PlayerNameTextTMP;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Text PlayerNameText;

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xC36C68", Offset = "0xC36C68", VA = "0xC36C68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xC36CF8", Offset = "0xC36CF8", VA = "0xC36CF8")]
	[IteratorStateMachine(typeof(<WaitToShowPlayerName>d__3))]
	protected IEnumerator WaitToShowPlayerName()
	{
		return null;
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0xC36D88", Offset = "0xC36D88", VA = "0xC36D88")]
	public SASetTextToPlayerName()
	{
	}
}
[Token(Token = "0x20001B9")]
public class SASetTextToVersionNumber : MonoBehaviour
{
	[Token(Token = "0x6000C39")]
	[Address(RVA = "0xC36F30", Offset = "0xC36F30", VA = "0xC36F30")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0xC370A0", Offset = "0xC370A0", VA = "0xC370A0")]
	public SASetTextToVersionNumber()
	{
	}
}
[Token(Token = "0x20001BA")]
public class SASmoothToCenterCamera : MonoBehaviour
{
	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How far away from the camera this object will be")]
	[SerializeField]
	public float CameraDistance;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The time in seconds in takes for this object to move to the center camera")]
	[SerializeField]
	public float SmoothTime;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("How much this object can rotate (in degrees) each second")]
	[SerializeField]
	public float MaxRotationPerSecond;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform CenterEye;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 Velocity;

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0xC370A8", Offset = "0xC370A8", VA = "0xC370A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0xC37180", Offset = "0xC37180", VA = "0xC37180")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0xC3741C", Offset = "0xC3741C", VA = "0xC3741C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0xC37184", Offset = "0xC37184", VA = "0xC37184")]
	protected void UpdateSmoothingToCenterCamera()
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0xC374C0", Offset = "0xC374C0", VA = "0xC374C0")]
	public void UpdateCameraDistance(float NewCameraDistance)
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0xC37160", Offset = "0xC37160", VA = "0xC37160")]
	public void UpdateCenterEye()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0xC374C8", Offset = "0xC374C8", VA = "0xC374C8")]
	private void SceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0xC374E8", Offset = "0xC374E8", VA = "0xC374E8")]
	public SASmoothToCenterCamera()
	{
	}
}
[Token(Token = "0x20001BB")]
public class SAQualityEnabler : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("If the quality level isn't at this level, we destroy the attached game object")]
	protected int RequiredQualityLevelToShow;

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0xC3755C", Offset = "0xC3755C", VA = "0xC3755C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0xC375E8", Offset = "0xC375E8", VA = "0xC375E8")]
	public SAQualityEnabler()
	{
	}
}
[Token(Token = "0x20001BC")]
public static class SAExtensions
{
	[Token(Token = "0x6000C45")]
	[Address(RVA = "0xC375F8", Offset = "0xC375F8", VA = "0xC375F8")]
	public static List<Transform> GetAllChildren(this Transform Parent, [Optional] List<Transform> TransformList)
	{
		return null;
	}

	[Token(Token = "0x6000C46")]
	public static bool IsValidIndex<T>(this List<T> List, int Index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C47")]
	public static bool IsValidIndex<T>(this IList<T> List, int Index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C48")]
	public static bool IsValidIndex<T>(this T[] Array, int Index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C49")]
	public static bool AddUnique<T>(this List<T> List, T Item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C4A")]
	public static T GetRandomItem<T>(this List<T> ThisList)
	{
		return (T)null;
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0xC37994", Offset = "0xC37994", VA = "0xC37994")]
	public static GameObject GetGameObjectSafely(this MonoBehaviour ThisMonoBehaviour)
	{
		return null;
	}

	[Token(Token = "0x6000C4C")]
	public static GameObject GetClosestObjectOfType<T>(this GameObject ThisGameObject)
	{
		return null;
	}

	[Token(Token = "0x6000C4D")]
	public static Dictionary<T, U> ToDictionary<T, U>(this SerializableDictionary<T, U> ThisSerializableDict)
	{
		return null;
	}

	[Token(Token = "0x6000C4E")]
	public static SerializableDictionary<T, U> ToSerializableDictionary<T, U>(this Dictionary<T, U> ThisDict)
	{
		return null;
	}

	[Token(Token = "0x6000C4F")]
	public static U Find<T, U>(this Dictionary<T, U> ThisDict, T InKey)
	{
		return (U)null;
	}

	[Token(Token = "0x6000C50")]
	public static int GetTotalIntValue<T>(this Dictionary<T, int> ThisDictionary)
	{
		return default(int);
	}

	[Token(Token = "0x6000C51")]
	public static T GetKeyFromRandomValueInWeightedDictionary<T>(this Dictionary<T, int> ThisDictionary, int RandomValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000C52")]
	public static void ConvertDictionaryToTwoLists<T, U>(this Dictionary<T, U> ThisDictionary, out List<T> OutKeysList, out List<U> OutValuesList)
	{
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0xC37A18", Offset = "0xC37A18", VA = "0xC37A18")]
	public static void SetGlobalScale(this Transform transform, Vector3 globalScale)
	{
	}

	[Token(Token = "0x6000C54")]
	public static T Find<T>(this List<T> ThisList, int InIndex)
	{
		return (T)null;
	}

	[Token(Token = "0x6000C55")]
	public static bool ContainsType<T>(this List<SubclassOf<T>> ThisSubclassOfList, Type CheckType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0xC37AE0", Offset = "0xC37AE0", VA = "0xC37AE0")]
	public static bool IsSubclassOfOrSame(this Type ThisType, Type OtherType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0xC37BD0", Offset = "0xC37BD0", VA = "0xC37BD0")]
	public static string ToTwoDigitString(this Locale ThisLocale)
	{
		return null;
	}
}
[Token(Token = "0x20001BD")]
public class SASaveGameBase : SAStringDictionaries
{
	[Token(Token = "0x400076E")]
	protected const string SAVEKEY_ActivityStatusDictionary = "ActivityStatusDictionary";

	[Token(Token = "0x400076F")]
	protected const string SAVEKEY_IntegerStatsDictionary = "IntegerStatsDictionary";

	[Token(Token = "0x4000770")]
	protected const string SAVEKEY_bHasSaved = "bHasSaved";

	[Token(Token = "0x4000771")]
	protected const string SAVEKEY_MajorVersionNumber = "MajorVersionNumber";

	[Token(Token = "0x4000772")]
	protected const string SAVEKEY_MinorVersionNumber = "MinorVersionNumber";

	[Token(Token = "0x4000773")]
	protected const string SAVEKEY_SubMinorVersionNumber = "SubMinorVersionNumber";

	[Token(Token = "0x4000774")]
	protected const string SAVEKEY_SettingsBoolDict = "SettingsBoolDict";

	[Token(Token = "0x4000775")]
	protected const string SAVEKEY_SettingsIntegerDict = "SettingsIntegerDict";

	[Token(Token = "0x4000776")]
	protected const string SAVEKEY_SettingsFloatDict = "SettingsFloatDict";

	[Token(Token = "0x4000777")]
	protected const string SAVEKEY_SettingsStringDict = "SettingsStringDict";

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly FSAVersionNumber VERSION_0_1_0;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected static readonly FSAVersionNumber VERSION_1_0_0;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected static SASaveGameBase Instance;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnSaveGameSaved OnSaveGameSavedDel;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FOnSaveGameLoaded OnSaveGameLoadedDel;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FOnSaveGameDeleted OnSaveGameDeletedDel;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SerializableDictionary<string, FSASavedActivityInfo> ActivityStatusDictionary;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SerializableDictionary<string, int> IntegerStatsDictionary;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool bHasSaved;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected FSAVersionNumber VersionNumber;

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0xC37CB4", Offset = "0xC37CB4", VA = "0xC37CB4", Slot = "4")]
	public virtual bool InitializeInstance(bool bForceInitialize = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0xC37F04", Offset = "0xC37F04", VA = "0xC37F04")]
	public bool TrySaveData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0xC37F50", Offset = "0xC37F50", VA = "0xC37F50", Slot = "5")]
	protected virtual bool SaveData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0xC37D94", Offset = "0xC37D94", VA = "0xC37D94")]
	public bool TryLoadData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0xC38358", Offset = "0xC38358", VA = "0xC38358", Slot = "6")]
	protected virtual bool LoadData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0xC386F8", Offset = "0xC386F8", VA = "0xC386F8", Slot = "7")]
	protected virtual void CreateInitialSaveData()
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0xC38704", Offset = "0xC38704", VA = "0xC38704", Slot = "8")]
	protected virtual void HandleNewVersion(FSAVersionNumber PreviousVersionNumber, FSAVersionNumber NewVersionNumber)
	{
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0xC38708", Offset = "0xC38708", VA = "0xC38708")]
	public void DeleteAllData()
	{
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0xC38754", Offset = "0xC38754", VA = "0xC38754", Slot = "9")]
	protected virtual void MidDeleteAllData()
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0xC38758", Offset = "0xC38758", VA = "0xC38758", Slot = "10")]
	protected virtual void PostDeleteAllData()
	{
	}

	[Token(Token = "0x6000C62")]
	protected List<T> LoadList<T>(string InSaveKey)
	{
		return null;
	}

	[Token(Token = "0x6000C63")]
	protected SerializableDictionary<T, U> LoadSerializedDictionary<T, U>(string InSaveKey)
	{
		return null;
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0xC3875C", Offset = "0xC3875C", VA = "0xC3875C")]
	public void UpdateSavedActivityInfo(string InActivitySaveKey, FSASavedActivityInfo InSavedActivityInfo)
	{
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0xC38828", Offset = "0xC38828", VA = "0xC38828")]
	public void UpdateIntegerStat(string InStatKey, int InValue)
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0xC388E8", Offset = "0xC388E8", VA = "0xC388E8")]
	public static SASaveGameBase GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0xC38940", Offset = "0xC38940", VA = "0xC38940")]
	public bool HasSaved()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xC38948", Offset = "0xC38948", VA = "0xC38948")]
	public FSASavedActivityInfo GetSavedActivityInfo(string InActivitySaveKey)
	{
		return default(FSASavedActivityInfo);
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xC389DC", Offset = "0xC389DC", VA = "0xC389DC")]
	public bool IsActivityComplete(string InActivitySaveKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xC38A74", Offset = "0xC38A74", VA = "0xC38A74")]
	public int GetIntegerStatValue(string InStatKey)
	{
		return default(int);
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xC38B08", Offset = "0xC38B08", VA = "0xC38B08")]
	public SASaveGameBase()
	{
	}
}
[Token(Token = "0x20001BE")]
public class SAStringDictionaries
{
	[Token(Token = "0x4000782")]
	protected const string SAVEKEY_BoolDict = "BoolDict";

	[Token(Token = "0x4000783")]
	protected const string SAVEKEY_IntegerDict = "IntegerDict";

	[Token(Token = "0x4000784")]
	protected const string SAVEKEY_FloatDict = "FloatDict";

	[Token(Token = "0x4000785")]
	protected const string SAVEKEY_StringDict = "StringDict";

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SerializableDictionary<string, bool> BoolDict;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SerializableDictionary<string, int> IntegerDict;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SerializableDictionary<string, float> FloatDict;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SerializableDictionary<string, string> StringDict;

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xC38DC0", Offset = "0xC38DC0", VA = "0xC38DC0")]
	public bool HasBoolValue(string InName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xC2BEF0", Offset = "0xC2BEF0", VA = "0xC2BEF0")]
	public bool GetBoolValue(string InName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0xC38298", Offset = "0xC38298", VA = "0xC38298")]
	public string GetBoolDictAsString()
	{
		return null;
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0xC38E18", Offset = "0xC38E18", VA = "0xC38E18")]
	public bool HasIntegerValue(string InName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0xC38E70", Offset = "0xC38E70", VA = "0xC38E70")]
	public int GetIntegerValue(string InName)
	{
		return default(int);
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0xC382A4", Offset = "0xC382A4", VA = "0xC382A4")]
	public string GetIntegerDictAsString()
	{
		return null;
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0xC38F04", Offset = "0xC38F04", VA = "0xC38F04")]
	public bool HasFloatValue(string InName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0xC38F5C", Offset = "0xC38F5C", VA = "0xC38F5C")]
	public float GetFloatValue(string InName)
	{
		return default(float);
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0xC382B0", Offset = "0xC382B0", VA = "0xC382B0")]
	public string GetFloatDictAsString()
	{
		return null;
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0xC38FF0", Offset = "0xC38FF0", VA = "0xC38FF0")]
	public bool HasStringValue(string InName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0xC39048", Offset = "0xC39048", VA = "0xC39048")]
	public string GetStringValue(string InName)
	{
		return null;
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0xC382BC", Offset = "0xC382BC", VA = "0xC382BC")]
	public string GetStringDictAsString()
	{
		return null;
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0xC38BC4", Offset = "0xC38BC4", VA = "0xC38BC4")]
	public SAStringDictionaries()
	{
	}
}
[Token(Token = "0x20001BF")]
public class AnimationClipOverrides : List<KeyValuePair<AnimationClip, AnimationClip>>
{
	[Token(Token = "0x170000A1")]
	public AnimationClip this[string name]
	{
		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xC3916C", Offset = "0xC3916C", VA = "0xC3916C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xC3925C", Offset = "0xC3925C", VA = "0xC3925C")]
		set
		{
		}
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0xC390F0", Offset = "0xC390F0", VA = "0xC390F0")]
	public AnimationClipOverrides(int capacity)
	{
	}
}
[Token(Token = "0x20001C2")]
public class PlayerPrefsX
{
	[Token(Token = "0x20001C3")]
	private enum ArrayType
	{
		[Token(Token = "0x4000791")]
		Float,
		[Token(Token = "0x4000792")]
		Int32,
		[Token(Token = "0x4000793")]
		Bool,
		[Token(Token = "0x4000794")]
		String,
		[Token(Token = "0x4000795")]
		Vector2,
		[Token(Token = "0x4000796")]
		Vector3,
		[Token(Token = "0x4000797")]
		Quaternion,
		[Token(Token = "0x4000798")]
		Color
	}

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int endianDiff1;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int endianDiff2;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int idx;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static byte[] byteBlock;

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0xC382C8", Offset = "0xC382C8", VA = "0xC382C8")]
	public static bool SetBool(string name, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0xC386DC", Offset = "0xC386DC", VA = "0xC386DC")]
	public static bool GetBool(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0xC39490", Offset = "0xC39490", VA = "0xC39490")]
	public static bool GetBool(string name, bool defaultValue)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0xC394B0", Offset = "0xC394B0", VA = "0xC394B0")]
	public static long GetLong(string key, long defaultValue)
	{
		return default(long);
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0xC3956C", Offset = "0xC3956C", VA = "0xC3956C")]
	public static long GetLong(string key)
	{
		return default(long);
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0xC3955C", Offset = "0xC3955C", VA = "0xC3955C")]
	private static void SplitLong(long input, out int lowBits, out int highBits)
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0xC39608", Offset = "0xC39608", VA = "0xC39608")]
	public static void SetLong(string key, long value)
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0xC396A0", Offset = "0xC396A0", VA = "0xC396A0")]
	public static bool SetVector2(string key, Vector2 vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0xC397D8", Offset = "0xC397D8", VA = "0xC397D8")]
	private static Vector2 GetVector2(string key)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0xC39950", Offset = "0xC39950", VA = "0xC39950")]
	public static Vector2 GetVector2(string key, Vector2 defaultValue)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0xC39994", Offset = "0xC39994", VA = "0xC39994")]
	public static bool SetVector3(string key, Vector3 vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0xC39A34", Offset = "0xC39A34", VA = "0xC39A34")]
	public static Vector3 GetVector3(string key)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0xC39AAC", Offset = "0xC39AAC", VA = "0xC39AAC")]
	public static Vector3 GetVector3(string key, Vector3 defaultValue)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0xC39B04", Offset = "0xC39B04", VA = "0xC39B04")]
	public static bool SetQuaternion(string key, Quaternion vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0xC39BB4", Offset = "0xC39BB4", VA = "0xC39BB4")]
	public static Quaternion GetQuaternion(string key)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0xC39C38", Offset = "0xC39C38", VA = "0xC39C38")]
	public static Quaternion GetQuaternion(string key, Quaternion defaultValue)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0xC39C9C", Offset = "0xC39C9C", VA = "0xC39C9C")]
	public static bool SetColor(string key, Color color)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0xC39D4C", Offset = "0xC39D4C", VA = "0xC39D4C")]
	public static Color GetColor(string key)
	{
		return default(Color);
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0xC39D88", Offset = "0xC39D88", VA = "0xC39D88")]
	public static Color GetColor(string key, Color defaultValue)
	{
		return default(Color);
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0xC39DEC", Offset = "0xC39DEC", VA = "0xC39DEC")]
	public static bool SetBoolArray(string key, bool[] boolArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0xC3A18C", Offset = "0xC3A18C", VA = "0xC3A18C")]
	public static bool[] GetBoolArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0xC3A428", Offset = "0xC3A428", VA = "0xC3A428")]
	public static bool[] GetBoolArray(string key, bool defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0xC3A4E8", Offset = "0xC3A4E8", VA = "0xC3A4E8")]
	public static bool SetStringArray(string key, string[] stringArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0xC3A7C8", Offset = "0xC3A7C8", VA = "0xC3A7C8")]
	public static string[] GetStringArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0xC3AAA8", Offset = "0xC3AAA8", VA = "0xC3AAA8")]
	public static string[] GetStringArray(string key, string defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0xC3AB90", Offset = "0xC3AB90", VA = "0xC3AB90")]
	public static bool SetIntArray(string key, int[] intArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0xC39728", Offset = "0xC39728", VA = "0xC39728")]
	public static bool SetFloatArray(string key, float[] floatArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0xC3AC40", Offset = "0xC3AC40", VA = "0xC3AC40")]
	public static bool SetVector2Array(string key, Vector2[] vector2Array)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0xC3ACF0", Offset = "0xC3ACF0", VA = "0xC3ACF0")]
	public static bool SetVector3Array(string key, Vector3[] vector3Array)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0xC3ADA0", Offset = "0xC3ADA0", VA = "0xC3ADA0")]
	public static bool SetQuaternionArray(string key, Quaternion[] quaternionArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0xC3AE50", Offset = "0xC3AE50", VA = "0xC3AE50")]
	public static bool SetColorArray(string key, Color[] colorArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CA0")]
	private static bool SetValue<T>(string key, T array, ArrayType arrayType, int vectorNumber, Action<T, byte[], int> convert) where T : IList
	{
		return default(bool);
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0xC3AF00", Offset = "0xC3AF00", VA = "0xC3AF00")]
	private static void ConvertFromInt(int[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0xC3AF2C", Offset = "0xC3AF2C", VA = "0xC3AF2C")]
	private static void ConvertFromFloat(float[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0xC3AFE8", Offset = "0xC3AFE8", VA = "0xC3AFE8")]
	private static void ConvertFromVector2(Vector2[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0xC3B04C", Offset = "0xC3B04C", VA = "0xC3B04C")]
	private static void ConvertFromVector3(Vector3[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0xC3B0E0", Offset = "0xC3B0E0", VA = "0xC3B0E0")]
	private static void ConvertFromQuaternion(Quaternion[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0xC3B180", Offset = "0xC3B180", VA = "0xC3B180")]
	private static void ConvertFromColor(Color[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0xC3B220", Offset = "0xC3B220", VA = "0xC3B220")]
	public static int[] GetIntArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0xC3B32C", Offset = "0xC3B32C", VA = "0xC3B32C")]
	public static int[] GetIntArray(string key, int defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0xC39844", Offset = "0xC39844", VA = "0xC39844")]
	public static float[] GetFloatArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0xC3B3E8", Offset = "0xC3B3E8", VA = "0xC3B3E8")]
	public static float[] GetFloatArray(string key, float defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0xC3B4A4", Offset = "0xC3B4A4", VA = "0xC3B4A4")]
	public static Vector2[] GetVector2Array(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0xC3B5B0", Offset = "0xC3B5B0", VA = "0xC3B5B0")]
	public static Vector2[] GetVector2Array(string key, Vector2 defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0xC3B674", Offset = "0xC3B674", VA = "0xC3B674")]
	public static Vector3[] GetVector3Array(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0xC3B780", Offset = "0xC3B780", VA = "0xC3B780")]
	public static Vector3[] GetVector3Array(string key, Vector3 defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0xC3B854", Offset = "0xC3B854", VA = "0xC3B854")]
	public static Quaternion[] GetQuaternionArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0xC3B960", Offset = "0xC3B960", VA = "0xC3B960")]
	public static Quaternion[] GetQuaternionArray(string key, Quaternion defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0xC3BA3C", Offset = "0xC3BA3C", VA = "0xC3BA3C")]
	public static Color[] GetColorArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0xC3BB48", Offset = "0xC3BB48", VA = "0xC3BB48")]
	public static Color[] GetColorArray(string key, Color defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000CB3")]
	private static void GetValue<T>(string key, T list, ArrayType arrayType, int vectorNumber, Action<T, byte[]> convert) where T : IList
	{
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0xC3BC24", Offset = "0xC3BC24", VA = "0xC3BC24")]
	private static void ConvertToInt(List<int> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0xC3BCD0", Offset = "0xC3BCD0", VA = "0xC3BCD0")]
	private static void ConvertToFloat(List<float> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0xC3BE04", Offset = "0xC3BE04", VA = "0xC3BE04")]
	private static void ConvertToVector2(List<Vector2> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0xC3BECC", Offset = "0xC3BECC", VA = "0xC3BECC")]
	private static void ConvertToVector3(List<Vector3> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0xC3BFAC", Offset = "0xC3BFAC", VA = "0xC3BFAC")]
	private static void ConvertToQuaternion(List<Quaternion> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0xC3C0A4", Offset = "0xC3C0A4", VA = "0xC3C0A4")]
	private static void ConvertToColor(List<Color> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0xC3C19C", Offset = "0xC3C19C", VA = "0xC3C19C")]
	public static void ShowArrayType(string key)
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0xC39F48", Offset = "0xC39F48", VA = "0xC39F48")]
	private static void Initialize()
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0xC3A098", Offset = "0xC3A098", VA = "0xC3A098")]
	private static bool SaveBytes(string key, byte[] bytes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0xC3AF5C", Offset = "0xC3AF5C", VA = "0xC3AF5C")]
	private static void ConvertFloatToBytes(float f, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0xC3BD78", Offset = "0xC3BD78", VA = "0xC3BD78")]
	private static float ConvertBytesToFloat(byte[] bytes)
	{
		return default(float);
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0xC3A00C", Offset = "0xC3A00C", VA = "0xC3A00C")]
	private static void ConvertInt32ToBytes(int i, byte[] bytes)
	{
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0xC3A39C", Offset = "0xC3A39C", VA = "0xC3A39C")]
	private static int ConvertBytesToInt32(byte[] bytes)
	{
		return default(int);
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0xC3C2E0", Offset = "0xC3C2E0", VA = "0xC3C2E0")]
	private static void ConvertTo4Bytes(byte[] bytes)
	{
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0xC3C460", Offset = "0xC3C460", VA = "0xC3C460")]
	private static void ConvertFrom4Bytes(byte[] bytes)
	{
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0xC3C5E0", Offset = "0xC3C5E0", VA = "0xC3C5E0")]
	public PlayerPrefsX()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C4")]
public class SAPool<T>
{
	[Token(Token = "0x20001C5")]
	protected class SAPoolObjectInfo
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T PoolObject;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Active;

		[Token(Token = "0x6000CCA")]
		public SAPoolObjectInfo(T InPoolObject, bool bNewActive)
		{
		}
	}

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected List<SAPoolObjectInfo> PoolObjectInfos;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected int CurrentPoolIndex;

	[Token(Token = "0x6000CC4")]
	public SAPool()
	{
	}

	[Token(Token = "0x6000CC5")]
	public void TakeFromPool(out T OutPooledObject, out int OutPoolIndex)
	{
	}

	[Token(Token = "0x6000CC6")]
	public void ReturnToPool(int InIndex)
	{
	}

	[Token(Token = "0x6000CC7")]
	public void AddPooledObject(T InPooledObject)
	{
	}

	[Token(Token = "0x6000CC8")]
	public void AddPooledObjects(List<T> InPooledObjects)
	{
	}

	[Token(Token = "0x6000CC9")]
	public int GetPoolSize()
	{
		return default(int);
	}
}
[Token(Token = "0x20001C6")]
public class SAText : TextMeshProUGUI
{
	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x795")]
	[SerializeField]
	[Tooltip("If this text has localization enabled.")]
	protected bool bLocalizationEnabled;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x798")]
	[SerializeField]
	[Tooltip("The localized text that we want to use here. Must have bLocalizationEnabled to function.")]
	protected LocalizedString LocalizedTextString;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A0")]
	[Tooltip("The font style to use when localized. Font assets are determined by font asset in reference asset as well as current locale.")]
	[SerializeField]
	protected ESAFontStyles LocalizedFontStyle;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A4")]
	[Tooltip("The number of initial string arguments this text starts with.")]
	[SerializeField]
	protected int NumInitialStringArguments;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A8")]
	[Tooltip("If checked, will replace text that is enclosed in brackets with text to show icons. This data is pulled from the reference asset's IconSetsAsset.")]
	[SerializeField]
	protected bool bUsesIconTextReplacement;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A9")]
	protected bool bInitialized;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B0")]
	protected List<object> StringArguments;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Dictionary<Locale, string> CachedLocaleToStringValues;

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0xC3C5E8", Offset = "0xC3C5E8", VA = "0xC3C5E8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0xC3C7DC", Offset = "0xC3C7DC", VA = "0xC3C7DC", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0xC3C898", Offset = "0xC3C898", VA = "0xC3C898", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0xC3C950", Offset = "0xC3C950", VA = "0xC3C950", Slot = "143")]
	protected virtual void InitializeText()
	{
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0xC3CAA8", Offset = "0xC3CAA8", VA = "0xC3CAA8")]
	public void SetLocalizedText(LocalizedString InLocalizedString, [Optional] List<object> InArguments)
	{
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0xC3CB64", Offset = "0xC3CB64", VA = "0xC3CB64")]
	public void SetUnlocalizedText(string UnlocString)
	{
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0xC3CB9C", Offset = "0xC3CB9C", VA = "0xC3CB9C")]
	public void RequestRelocalize()
	{
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0xC3C864", Offset = "0xC3C864", VA = "0xC3C864")]
	protected void UpdateText(string NewString)
	{
	}

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0xC3CBA8", Offset = "0xC3CBA8", VA = "0xC3CBA8", Slot = "144")]
	protected virtual string DetermineUpdatedString(string NewString)
	{
		return null;
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0xC3C984", Offset = "0xC3C984", VA = "0xC3C984")]
	public void InitializeNumStringArguments(int InNumStringArguments)
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0xC3CE54", Offset = "0xC3CE54", VA = "0xC3CE54")]
	public void UpdateStringArgument(int InIndex, object InArgumentValue, bool bInUpdateText = true)
	{
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0xC3C6E0", Offset = "0xC3C6E0", VA = "0xC3C6E0")]
	protected void UpdateFontAssetForLocale(Locale InLocale)
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0xC3D1C0", Offset = "0xC3D1C0", VA = "0xC3D1C0")]
	protected string GetTwoDigitString(Locale InLocale)
	{
		return null;
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0xC3D2D8", Offset = "0xC3D2D8", VA = "0xC3D2D8")]
	protected void SelectedLocaleChanged(Locale NewLocale)
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0xC3D360", Offset = "0xC3D360", VA = "0xC3D360")]
	protected void LocalizedStringAsyncCompleted(AsyncOperationHandle<string> NewString)
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0xC3D41C", Offset = "0xC3D41C", VA = "0xC3D41C")]
	public LocalizedString GetLocalizedTextString()
	{
		return null;
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0xC3C6C8", Offset = "0xC3C6C8", VA = "0xC3C6C8")]
	public bool CanBeLocalized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0xC3D424", Offset = "0xC3D424", VA = "0xC3D424")]
	public SAText()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C7")]
public class SubclassOf<T>
{
	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	[SerializeField]
	protected internal string selectedTypeName;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	protected internal string selectedTypeQualifiedName;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	protected internal string parentTypeQualifiedName;

	[Token(Token = "0x170000A2")]
	public Type SelectedType
	{
		[Token(Token = "0x6000CDE")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CDF")]
		set
		{
		}
	}

	[Token(Token = "0x170000A3")]
	public string SelectedTypeName
	{
		[Token(Token = "0x6000CE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A4")]
	public string SelectedTypeAssemblyQualifiedName
	{
		[Token(Token = "0x6000CE1")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A5")]
	public string ParentTypeAssemblyQualifiedName
	{
		[Token(Token = "0x6000CE2")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000CE3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000CE4")]
	public SubclassOf()
	{
	}

	[Token(Token = "0x6000CE5")]
	public SubclassOf(Type selectedType)
	{
	}

	[Token(Token = "0x6000CE6")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CE7")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20001C8")]
public class ZNDamageTriggerBox : MonoBehaviour
{
	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How much damage is done when entering the box")]
	[SerializeField]
	protected int DamageDoneOnEnter;

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0xC3D55C", Offset = "0xC3D55C", VA = "0xC3D55C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0xC3D6EC", Offset = "0xC3D6EC", VA = "0xC3D6EC")]
	public ZNDamageTriggerBox()
	{
	}
}
[Token(Token = "0x20001C9")]
public class ZNTutorialManager : MonoBehaviour
{
	[Token(Token = "0x20001CA")]
	[CompilerGenerated]
	private sealed class <WaitToGiveEnemiesInvincibility>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNTutorialManager <>4__this;

		[Token(Token = "0x170000A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0xC3E36C", Offset = "0xC3E36C", VA = "0xC3E36C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xC3E3B4", Offset = "0xC3E3B4", VA = "0xC3E3B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xC3E1B4", Offset = "0xC3E1B4", VA = "0xC3E1B4")]
		[DebuggerHidden]
		public <WaitToGiveEnemiesInvincibility>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xC3E200", Offset = "0xC3E200", VA = "0xC3E200", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xC3E204", Offset = "0xC3E204", VA = "0xC3E204", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xC3E374", Offset = "0xC3E374", VA = "0xC3E374", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Tutorials")]
	[Tooltip("The tutorial segments")]
	protected List<FZNTutorialSegment> TutorialSegments;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The step to give invincibility to enemies")]
	protected int GiveEnemiesInvincibilityStep;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("The step to disable the gun")]
	[SerializeField]
	protected int DisableGunStep;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The step to enable the gun again")]
	[SerializeField]
	protected int ReenableGunStep;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The step to remove invincibility from enemies")]
	[SerializeField]
	protected int RemoveEnemiesInvincibilityStep;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The step to spawn the shotgun")]
	protected int SpawnShotgunStep;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Tooltip("The step to spawn the bonus cards")]
	protected int SpawnBonusCardsStep;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("")]
	protected SAModAsset EnemyInvincibilityAsset;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("")]
	protected ZNWeaponAsset PeashooterWeaponAsset;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("")]
	protected ZNWeaponAsset ShotgunWeaponAsset;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("")]
	[SerializeField]
	protected List<ZNBonusCardAsset> BonusCardsToSpawn;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNMainPlayerController MainPlayerController;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected SAActivityManagerComponent ActivityManagerComponent;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected SAActivityInstance CurrentTutorialActivityInstance;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected int CurrentTutorialStep;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected ZNMessagePromptAsset CurrentMessagePromptAsset;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0xC3D6FC", Offset = "0xC3D6FC", VA = "0xC3D6FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xC3DAAC", Offset = "0xC3DAAC", VA = "0xC3DAAC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xC3D8CC", Offset = "0xC3D8CC", VA = "0xC3D8CC")]
	protected void StartNextTutorialSegment()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xC3DE58", Offset = "0xC3DE58", VA = "0xC3DE58")]
	protected void HandleCompletedActivity(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0xC3DBB0", Offset = "0xC3DBB0", VA = "0xC3DBB0")]
	protected void DoSpecialEffectsForStep(int InTutorialStep)
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0xC3DF14", Offset = "0xC3DF14", VA = "0xC3DF14")]
	[IteratorStateMachine(typeof(<WaitToGiveEnemiesInvincibility>d__23))]
	protected IEnumerator WaitToGiveEnemiesInvincibility()
	{
		return null;
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0xC3DF7C", Offset = "0xC3DF7C", VA = "0xC3DF7C")]
	protected void RemoveInvincibilityFromEnemies()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0xC3E074", Offset = "0xC3E074", VA = "0xC3E074")]
	protected void SpawnShotgunInShop()
	{
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0xC3E114", Offset = "0xC3E114", VA = "0xC3E114")]
	protected void SpawnBonusCardsInShop()
	{
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0xC3E1DC", Offset = "0xC3E1DC", VA = "0xC3E1DC")]
	private void ActivityCompleted(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000CF4")]
	[Address(RVA = "0xC3E1E0", Offset = "0xC3E1E0", VA = "0xC3E1E0")]
	public ZNTutorialManager()
	{
	}
}
[Token(Token = "0x20001CB")]
public class ZNTutorialManager_DEP : MonoBehaviour
{
	[Token(Token = "0x20001CC")]
	[CompilerGenerated]
	private sealed class <WaitToGiveEnemiesInvincibility>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNTutorialManager_DEP <>4__this;

		[Token(Token = "0x170000A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xC3EBC0", Offset = "0xC3EBC0", VA = "0xC3EBC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xC3EC08", Offset = "0xC3EC08", VA = "0xC3EC08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xC3EA20", Offset = "0xC3EA20", VA = "0xC3EA20")]
		[DebuggerHidden]
		public <WaitToGiveEnemiesInvincibility>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xC3EA54", Offset = "0xC3EA54", VA = "0xC3EA54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xC3EA58", Offset = "0xC3EA58", VA = "0xC3EA58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xC3EBC8", Offset = "0xC3EBC8", VA = "0xC3EBC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("")]
	[SerializeField]
	protected SAActivityAsset SetupCompletedAsset;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("")]
	[SerializeField]
	protected SAModAsset EnemyInvincibilityAsset;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("")]
	[SerializeField]
	protected SAActivityAsset ReloadCompletedAsset;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("")]
	[SerializeField]
	protected SAActivityAsset PeashooterUpgradedAsset;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("")]
	[SerializeField]
	protected ZNWeaponAsset ShotgunWeaponAsset;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("")]
	[SerializeField]
	protected SAActivityAsset ShotgunPurchasedAsset;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("")]
	protected List<ZNBonusCardAsset> BonusCardsToSpawn;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected SAActivityManagerComponent ActivityManagerComponent;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNShopManager ShopManager;

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0xC3E3BC", Offset = "0xC3E3BC", VA = "0xC3E3BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0xC3E4D8", Offset = "0xC3E4D8", VA = "0xC3E4D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0xC3E5DC", Offset = "0xC3E5DC", VA = "0xC3E5DC")]
	protected void HandleCompletedActivity(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0xC3E780", Offset = "0xC3E780", VA = "0xC3E780")]
	[IteratorStateMachine(typeof(<WaitToGiveEnemiesInvincibility>d__12))]
	protected IEnumerator WaitToGiveEnemiesInvincibility()
	{
		return null;
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0xC3E7E8", Offset = "0xC3E7E8", VA = "0xC3E7E8")]
	protected void RemoveInvincibilityFromEnemies()
	{
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0xC3E8E0", Offset = "0xC3E8E0", VA = "0xC3E8E0")]
	protected void SpawnShotgunInShop()
	{
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0xC3E980", Offset = "0xC3E980", VA = "0xC3E980")]
	protected void SpawnBonusCardsInShop()
	{
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0xC3EA48", Offset = "0xC3EA48", VA = "0xC3EA48")]
	private void ActivityCompleted(SAActivityInstance CompletedActivityInstance)
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0xC3EA4C", Offset = "0xC3EA4C", VA = "0xC3EA4C")]
	public ZNTutorialManager_DEP()
	{
	}
}
[Token(Token = "0x20001CD")]
public class ZNBadgeOptionWidget : SAButtonWidget
{
	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Badge")]
	[Tooltip("The badge name text")]
	[SerializeField]
	protected SAText BadgeNameText;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The sprite that shows when the badge is equipped")]
	[SerializeField]
	protected Sprite EquippedSprite;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The sprite that shows when the badge is unequipped")]
	[SerializeField]
	protected Sprite UnequippedSprite;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("The button for viewing the badge details")]
	protected Button ViewBadgeButton;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The button for equipping and unequipping the badge")]
	[SerializeField]
	protected Button EquipBadgeButton;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Tooltip("The image for displaying if this badge is locked or not")]
	protected Image LockedIconImage;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("The image for displaying this badge's icon")]
	[SerializeField]
	protected Image BadgeIconImage;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected ZNBadgeSelector BadgeSelector;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected ZNBadgeAssetBase AssociatedBadgeAsset;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected bool bLocked;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	protected bool bEquipped;

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0xC3EC10", Offset = "0xC3EC10", VA = "0xC3EC10", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0xC3EDB0", Offset = "0xC3EDB0", VA = "0xC3EDB0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0xC3EF44", Offset = "0xC3EF44", VA = "0xC3EF44")]
	public void InitializeBadgeOptionWidget(ZNBadgeAssetBase InBadgeAsset, ZNBadgeSelector BadgeSelectorRef)
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0xC3F1A0", Offset = "0xC3F1A0", VA = "0xC3F1A0")]
	public void SetEquipped(bool bInEquipped)
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0xC3F1F8", Offset = "0xC3F1F8", VA = "0xC3F1F8")]
	public void ViewBadge()
	{
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0xC3F280", Offset = "0xC3F280", VA = "0xC3F280")]
	public void EquipBadge()
	{
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0xC3F3E4", Offset = "0xC3F3E4", VA = "0xC3F3E4")]
	protected void BadgeAssetEquipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0xC3F470", Offset = "0xC3F470", VA = "0xC3F470")]
	protected void BadgeAssetUnequipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0xC3F4FC", Offset = "0xC3F4FC", VA = "0xC3F4FC")]
	public ZNBadgeAssetBase GetAssociatedBadgeAsset()
	{
		return null;
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0xC3F3D4", Offset = "0xC3F3D4", VA = "0xC3F3D4")]
	public bool CanEquipBadge()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0xC3F504", Offset = "0xC3F504", VA = "0xC3F504")]
	public ZNBadgeOptionWidget()
	{
	}
}
[Token(Token = "0x20001CE")]
public class ZNBadgeSelectionWidget : MonoBehaviour
{
	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The badges combo name text, displays special names when a combination of badges are used")]
	protected SAText BadgesComboNameText;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The text that shows how many badges are equipped right now")]
	[SerializeField]
	protected SAText NumEquippedBadgesValueText;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The transform for the badges vertical list")]
	protected Transform BadgesVerticalList;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The button for turning the badges page to the left")]
	[SerializeField]
	protected Button TurnBadgesPageLeftButton;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The button for turning the badges page to the right")]
	protected Button TurnBadgesPageRightButton;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The badges page number text, for displaying what page we're on")]
	protected SAText BadgesPageNumberText;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The selected badge name text")]
	protected SAText BadgeNameText;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The selected badge description text")]
	protected SAText BadgeDescriptionText;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The widgets for the current badges")]
	[SerializeField]
	protected List<ZNCurrentBadgeWidget> CurrentBadgeWidgets;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected List<ZNBadgeAssetBase> EquippableBadges;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The prefab used to create the badge options")]
	[SerializeField]
	protected GameObject PF_BadgeOptionWidget;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The number of badge options displayed per page")]
	[SerializeField]
	protected int NumBadgeOptionsPerPage;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected List<ZNBadgeOptionWidget> BadgeOptionWidgets;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected int NumTotalBadgePages;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected int CurrentBadgePage;

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0xC3F514", Offset = "0xC3F514", VA = "0xC3F514")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0xC3F588", Offset = "0xC3F588", VA = "0xC3F588")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0xC3F9D0", Offset = "0xC3F9D0", VA = "0xC3F9D0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0xC3F840", Offset = "0xC3F840", VA = "0xC3F840")]
	public void InitializeBadgeSelectionWidget()
	{
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0xC3FC84", Offset = "0xC3FC84", VA = "0xC3FC84")]
	public void UpdateCurrentBadgeWidgets()
	{
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0xC3FD5C", Offset = "0xC3FD5C", VA = "0xC3FD5C")]
	public void CreateBadgesPage(int InPageIndex)
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0xC3FFA4", Offset = "0xC3FFA4", VA = "0xC3FFA4")]
	protected void CreateBadge(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0xC3FEA4", Offset = "0xC3FEA4", VA = "0xC3FEA4")]
	protected void ClearBadgesPage()
	{
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0xC40128", Offset = "0xC40128", VA = "0xC40128")]
	public void ShowBadgeInBadgeDescriptionPane(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0xC40238", Offset = "0xC40238", VA = "0xC40238")]
	public void ClearBadgeDescriptionPane()
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0xC40360", Offset = "0xC40360", VA = "0xC40360")]
	protected void TurnPage(int InPagesTurned)
	{
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0xC4038C", Offset = "0xC4038C", VA = "0xC4038C")]
	protected void LeftButtonClicked()
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0xC40394", Offset = "0xC40394", VA = "0xC40394")]
	protected void RightButtonClicked()
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0xC4039C", Offset = "0xC4039C", VA = "0xC4039C")]
	protected void BadgeAssetEquipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0xC403A0", Offset = "0xC403A0", VA = "0xC403A0")]
	protected void BadgeAssetUnequipped(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0xC403A4", Offset = "0xC403A4", VA = "0xC403A4")]
	public ZNBadgeSelectionWidget()
	{
	}
}
[Token(Token = "0x20001CF")]
public class ZNCurrentBadgeWidget : MonoBehaviour
{
	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The badge name text")]
	[SerializeField]
	protected SAText BadgeNameText;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The button for unequipping the badge")]
	[SerializeField]
	protected Button UnequipBadgeButton;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNBadgeSelector BadgeSelector;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNBadgeAssetBase AssociatedBadgeAsset;

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0xC413BC", Offset = "0xC413BC", VA = "0xC413BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0xC41498", Offset = "0xC41498", VA = "0xC41498")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0xC41574", Offset = "0xC41574", VA = "0xC41574")]
	public void InitializeCurrentBadgeWidget(ZNBadgeSelector BadgeSelectorRef)
	{
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0xC4157C", Offset = "0xC4157C", VA = "0xC4157C")]
	public void UpdateAssociatedBadgeAsset(ZNBadgeAssetBase InBadgeAsset)
	{
	}

	[Token(Token = "0x6000D29")]
	[Address(RVA = "0xC41670", Offset = "0xC41670", VA = "0xC41670")]
	protected void UnequipBadge()
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0xC41718", Offset = "0xC41718", VA = "0xC41718")]
	public ZNCurrentBadgeWidget()
	{
	}
}
[Token(Token = "0x20001D0")]
public class ZNCreditsImageSectionWidget : ZNCreditsSectionBaseWidget
{
	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The section image")]
	[SerializeField]
	protected Image SectionImage;

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0xC41720", Offset = "0xC41720", VA = "0xC41720", Slot = "4")]
	public override void AssignSectionInfo(FZNCreditsSectionInfo InCreditsSectionInfo)
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0xC41818", Offset = "0xC41818", VA = "0xC41818")]
	public ZNCreditsImageSectionWidget()
	{
	}
}
[Token(Token = "0x20001D1")]
[CreateAssetMenu(fileName = "ZNCreditsInfoAsset", menuName = "Scriptable Objects/Credits/ZNCreditsInfoAsset")]
public class ZNCreditsInfoAsset : ScriptableObject
{
	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The credits section infos, ordered.")]
	protected List<FZNCreditsSectionInfo> CreditsSectionInfos;

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0xC41828", Offset = "0xC41828", VA = "0xC41828")]
	public List<FZNCreditsSectionInfo> GetCreditsSectionInfos()
	{
		return null;
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0xC41830", Offset = "0xC41830", VA = "0xC41830")]
	public ZNCreditsInfoAsset()
	{
	}
}
[Token(Token = "0x20001D2")]
public class ZNCreditsPageChangerButtonWidget : SASelectableWidgetBase
{
	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The layered screen for this page changer button widget")]
	[SerializeField]
	protected ZNCreditsPageLayeredScreen CreditsPageLayeredScreen;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The SFX that plays when changing pages")]
	[SerializeField]
	protected Event PageChangedSFX;

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0xC41838", Offset = "0xC41838", VA = "0xC41838", Slot = "13")]
	public override bool HasPressRightLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0xC41840", Offset = "0xC41840", VA = "0xC41840", Slot = "14")]
	public override void DoPressRightLogic()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0xC418FC", Offset = "0xC418FC", VA = "0xC418FC", Slot = "15")]
	public override bool HasPressLeftLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0xC41904", Offset = "0xC41904", VA = "0xC41904", Slot = "16")]
	public override void DoPressLeftLogic()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0xC419C0", Offset = "0xC419C0", VA = "0xC419C0")]
	public ZNCreditsPageChangerButtonWidget()
	{
	}
}
[Token(Token = "0x20001D3")]
public class ZNCreditsPageLayeredScreen : SALayeredScreen
{
	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The credits info asset")]
	[SerializeField]
	protected ZNCreditsInfoAsset CreditsInfoAsset;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The prefab for a credits page")]
	[SerializeField]
	protected GameObject PF_CreditsPage;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The prefab for a credits text section")]
	[SerializeField]
	protected GameObject PF_CreditsTextSection;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The prefab for a credits image section")]
	protected GameObject PF_CreditsImageSection;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The area to spawn pages")]
	protected Transform PagesAreaTransform;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The page counter text")]
	protected SAText PageCounterText;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The weight threshold we reach to create a new page")]
	protected int NewPageAtWeight;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected int CurrentPage;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected List<ZNCreditsPageWidget> CreditsPageWidgets;

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xC419C8", Offset = "0xC419C8", VA = "0xC419C8")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xC419E4", Offset = "0xC419E4", VA = "0xC419E4")]
	protected void CreatePages()
	{
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xC42078", Offset = "0xC42078", VA = "0xC42078")]
	protected ZNCreditsPageWidget CreateNewCreditsPage()
	{
		return null;
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xC42198", Offset = "0xC42198", VA = "0xC42198", Slot = "4")]
	public override void OpenScreen()
	{
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xC421A0", Offset = "0xC421A0", VA = "0xC421A0", Slot = "5")]
	public override void CloseScreen()
	{
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0xC418F4", Offset = "0xC418F4", VA = "0xC418F4")]
	public void TurnRight()
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0xC419B8", Offset = "0xC419B8", VA = "0xC419B8")]
	public void TurnLeft()
	{
	}

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0xC41E84", Offset = "0xC41E84", VA = "0xC41E84")]
	protected void TurnPage(int InPagesTurned)
	{
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0xC421A8", Offset = "0xC421A8", VA = "0xC421A8")]
	protected void LeftButtonClicked()
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0xC421B0", Offset = "0xC421B0", VA = "0xC421B0")]
	protected void RightButtonClicked()
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0xC421B8", Offset = "0xC421B8", VA = "0xC421B8")]
	public ZNCreditsPageLayeredScreen()
	{
	}
}
[Token(Token = "0x20001D4")]
public class ZNCreditsPageWidget : MonoBehaviour
{
	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0xC4223C", Offset = "0xC4223C", VA = "0xC4223C")]
	public ZNCreditsPageWidget()
	{
	}
}
[Token(Token = "0x20001D5")]
public class ZNCreditsSectionBaseWidget : MonoBehaviour
{
	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The section header text")]
	[SerializeField]
	protected SAText SectionHeaderText;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int SizingWeight;

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0xC42244", Offset = "0xC42244", VA = "0xC42244", Slot = "4")]
	public virtual void AssignSectionInfo(FZNCreditsSectionInfo InCreditsSectionInfo)
	{
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0xC42248", Offset = "0xC42248", VA = "0xC42248")]
	public int GetSizingWeight()
	{
		return default(int);
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0xC41820", Offset = "0xC41820", VA = "0xC41820")]
	public ZNCreditsSectionBaseWidget()
	{
	}
}
[Token(Token = "0x20001D6")]
public class ZNCreditsTextSectionWidget : ZNCreditsSectionBaseWidget
{
	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The section names text")]
	[SerializeField]
	protected SAText SectionNamesText;

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0xC42250", Offset = "0xC42250", VA = "0xC42250", Slot = "4")]
	public override void AssignSectionInfo(FZNCreditsSectionInfo InCreditsSectionInfo)
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xC423F4", Offset = "0xC423F4", VA = "0xC423F4")]
	public ZNCreditsTextSectionWidget()
	{
	}
}
[Token(Token = "0x20001D7")]
public class ZNIntermissionPhaseWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNIntermissionManager IntermissionManager;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Text for displaying the intermission timer")]
	[SerializeField]
	protected TextMeshProUGUI IntermissionTimerText;

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0xC423FC", Offset = "0xC423FC", VA = "0xC423FC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0xC42478", Offset = "0xC42478", VA = "0xC42478")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0xC4257C", Offset = "0xC4257C", VA = "0xC4257C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0xC42680", Offset = "0xC42680", VA = "0xC42680")]
	protected void IntermissionDisplayTimerUpdated(int NewIntermissionDisplayTime)
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0xC42724", Offset = "0xC42724", VA = "0xC42724")]
	public ZNIntermissionPhaseWidget()
	{
	}
}
[Token(Token = "0x20001D8")]
public class ZNInventoryUIWheelGroupWidget : MonoBehaviour
{
	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool bInitialized;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNUIWheelInventoryManager UIWheelInventoryManager;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNPlayerInventoryReturnPoint HipReturnPoint;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNHands CorrespondingHand;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected float DegreesPerWeaponWidget;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected float HalfDegreesPerWeaponWidget;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int NumWeaponWidgets;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The inventory UI wheel weapon widgets")]
	[SerializeField]
	protected List<ZNInventoryUIWheelWeaponWidget> InventoryUIWheelWeaponWidgets;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Debug field for displaying the angle rotation and selected index")]
	[SerializeField]
	protected SAText DebugAngleText;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("If we should show debug angle values")]
	[SerializeField]
	protected bool bShowDebugAngleValues;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected int ActiveWeaponWidgetIndex;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNInventoryUIWheelWeaponWidget CorrespondingHipWeaponWidget;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ZNInventoryUIWheelWeaponWidget OppositeHipWeaponWidget;

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0xC4272C", Offset = "0xC4272C", VA = "0xC4272C")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0xC42840", Offset = "0xC42840", VA = "0xC42840")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0xC42944", Offset = "0xC42944", VA = "0xC42944")]
	public void InitializeInventoryUIWheelGroupWidget(ZNMainCharacter InOwningCharacter, ZNHands InCorrespondingHand)
	{
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0xC43148", Offset = "0xC43148", VA = "0xC43148")]
	public void UpdateCursorAngle(float InAngle)
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0xC43280", Offset = "0xC43280", VA = "0xC43280")]
	protected int GetWeaponWidgetIndexByAngle(float InAngle)
	{
		return default(int);
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0xC42EA8", Offset = "0xC42EA8", VA = "0xC42EA8")]
	protected void UpdateWeaponWheelWidgets()
	{
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0xC43580", Offset = "0xC43580", VA = "0xC43580")]
	protected void HipReturnPointUpdated(ZNPlayerInventoryReturnPoint UpdatedReturnPoint, ZNGrabObjectBase NewOccupyingObject, int ItemIndex)
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0xC43584", Offset = "0xC43584", VA = "0xC43584")]
	public int GetSelectedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0xC4358C", Offset = "0xC4358C", VA = "0xC4358C")]
	public ZNWeaponBase GetSelectedWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0xC4361C", Offset = "0xC4361C", VA = "0xC4361C")]
	public ZNInventoryUIWheelGroupWidget()
	{
	}
}
[Token(Token = "0x20001D9")]
public class ZNInventoryUIWheelWeaponWidget : MonoBehaviour
{
	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNUIWheelInventoryManager UIWheelInventoryManager;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ZNHands CorrespondingHand;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected int WeaponWidgetIndex;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The weapon icon image")]
	protected Image WeaponIconImage;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The weapon wheel part image")]
	[SerializeField]
	protected Image WeaponWheelPartImage;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The weapon widget animator")]
	[SerializeField]
	protected Animator WeaponWidgetAnimator;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The neutral color")]
	[SerializeField]
	protected Color NeutralColor;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The corresponding hip color")]
	protected Color CorrespondingHipColor;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The opposite hip color")]
	[SerializeField]
	protected Color OppositeHipColor;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNWeaponBase AssociatedWeapon;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected bool bHovered;

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0xC4362C", Offset = "0xC4362C", VA = "0xC4362C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0xC436E0", Offset = "0xC436E0", VA = "0xC436E0")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0xC42BE8", Offset = "0xC42BE8", VA = "0xC42BE8")]
	public void InitializeInventoryUIWheelWeaponWidget(ZNMainCharacter InOwningCharacter, ZNHands InCorrespondingHand, int InWeaponWidgetIndex)
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0xC43874", Offset = "0xC43874", VA = "0xC43874")]
	public void UpdateWeapon(ZNWeaponBase InWeapon)
	{
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0xC43438", Offset = "0xC43438", VA = "0xC43438")]
	public void HoverWidget()
	{
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0xC433DC", Offset = "0xC433DC", VA = "0xC433DC")]
	public void UnhoverWidget()
	{
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0xC43498", Offset = "0xC43498", VA = "0xC43498")]
	public void SetWheelWeaponState(EZNWheelWeaponStates InWheelWeaponState)
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0xC43978", Offset = "0xC43978", VA = "0xC43978")]
	protected void ItemAddedToInventory(ZNGrabObjectBase AddedItem, int ItemIndex)
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0xC43A5C", Offset = "0xC43A5C", VA = "0xC43A5C")]
	protected void ItemRemovedFromInventory(ZNGrabObjectBase RemovedItem, int ItemIndex)
	{
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0xC43A74", Offset = "0xC43A74", VA = "0xC43A74")]
	public bool IsHovered()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0xC43A7C", Offset = "0xC43A7C", VA = "0xC43A7C")]
	public ZNWeaponBase GetAssociatedWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0xC43A84", Offset = "0xC43A84", VA = "0xC43A84")]
	public ZNInventoryUIWheelWeaponWidget()
	{
	}
}
[Token(Token = "0x20001DA")]
public class ZNInventoryUIWheelWidget : MonoBehaviour
{
	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The cursor extender--manages the cursor selection")]
	[SerializeField]
	protected Image CursorExtender;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The four segment group widget")]
	[SerializeField]
	protected ZNInventoryUIWheelGroupWidget FourSegmentGroupWidget;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The six segment group widget")]
	protected ZNInventoryUIWheelGroupWidget SixSegmentGroupWidget;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The inventory UI wheel canvas group")]
	[SerializeField]
	protected CanvasGroup InventoryUIWheelCanvasGroup;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The inventory UI wheel animator")]
	protected Animator InventoryUIWheelAnimator;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNHands CorrespondingHand;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNInventoryUIWheelGroupWidget InventoryUIWheelGroupWidget;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool bOpen;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected float CursorAngle;

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xC43AB4", Offset = "0xC43AB4", VA = "0xC43AB4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0xC43BE4", Offset = "0xC43BE4", VA = "0xC43BE4")]
	public void InitializeInventoryUIWheelWidget(ZNMainCharacter InOwningCharacter, ZNHands InCorrespondingHand)
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0xC43F58", Offset = "0xC43F58", VA = "0xC43F58")]
	public void OpenInventoryUIWheel()
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0xC43FBC", Offset = "0xC43FBC", VA = "0xC43FBC")]
	public void CloseInventoryUIWheel()
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0xC4401C", Offset = "0xC4401C", VA = "0xC4401C")]
	public void UpdateCursor(Vector2 InMovementVector)
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0xC43D2C", Offset = "0xC43D2C", VA = "0xC43D2C")]
	protected void ChangeSegmentGroupWidget(int InNumMaxWeaponSlots)
	{
	}

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0xC4413C", Offset = "0xC4413C", VA = "0xC4413C")]
	private void InventoryWeaponSlotsChanged(int NewMaxNumWeaponSlots)
	{
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0xC44140", Offset = "0xC44140", VA = "0xC44140")]
	public bool IsOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0xC44148", Offset = "0xC44148", VA = "0xC44148")]
	public int GetSelectedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0xC44164", Offset = "0xC44164", VA = "0xC44164")]
	public ZNWeaponBase GetSelectedWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0xC4417C", Offset = "0xC4417C", VA = "0xC4417C")]
	public ZNInventoryUIWheelWidget()
	{
	}
}
[Token(Token = "0x20001DB")]
public class ZNLorePageChangerButtonWidget : SASelectableWidgetBase
{
	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The lore page layered screen for this page changer button widget")]
	protected ZNLorePageLayeredScreen LorePageLayeredScreen;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The SFX that plays when changing pages")]
	[SerializeField]
	protected Event PageChangedSFX;

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0xC44184", Offset = "0xC44184", VA = "0xC44184", Slot = "13")]
	public override bool HasPressRightLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0xC4418C", Offset = "0xC4418C", VA = "0xC4418C", Slot = "14")]
	public override void DoPressRightLogic()
	{
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0xC44248", Offset = "0xC44248", VA = "0xC44248", Slot = "15")]
	public override bool HasPressLeftLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0xC44250", Offset = "0xC44250", VA = "0xC44250", Slot = "16")]
	public override void DoPressLeftLogic()
	{
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0xC4430C", Offset = "0xC4430C", VA = "0xC4430C")]
	public ZNLorePageChangerButtonWidget()
	{
	}
}
[Token(Token = "0x20001DC")]
public class ZNLorePageLayeredScreen : SALayeredScreen
{
	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The lore pages collection")]
	[SerializeField]
	protected ZNLorePageCollectionAsset LorePageCollection;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The lore page title text")]
	[SerializeField]
	protected SAText LorePageTitleText;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The lore page description text")]
	[SerializeField]
	protected SAText LorePageDescriptionText;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The page counter text")]
	[SerializeField]
	protected SAText PageCounterText;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The page counter text")]
	protected SAConditionProgressWidget ConditionProgressWidget;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The panel we show when we've unlocked the lore entry")]
	[SerializeField]
	protected GameObject UnlockedPanel;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The panel we show when the lore entry is locked")]
	protected GameObject LockedPanel;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int CurrentPage;

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0xC44314", Offset = "0xC44314", VA = "0xC44314")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0xC445B4", Offset = "0xC445B4", VA = "0xC445B4", Slot = "4")]
	public override void OpenScreen()
	{
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0xC445BC", Offset = "0xC445BC", VA = "0xC445BC", Slot = "5")]
	public override void CloseScreen()
	{
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0xC44240", Offset = "0xC44240", VA = "0xC44240")]
	public void TurnRight()
	{
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0xC44304", Offset = "0xC44304", VA = "0xC44304")]
	public void TurnLeft()
	{
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0xC4431C", Offset = "0xC4431C", VA = "0xC4431C")]
	protected void TurnPage(int InPagesTurned)
	{
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0xC445C4", Offset = "0xC445C4", VA = "0xC445C4")]
	protected void LeftButtonClicked()
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0xC445CC", Offset = "0xC445CC", VA = "0xC445CC")]
	protected void RightButtonClicked()
	{
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0xC445D4", Offset = "0xC445D4", VA = "0xC445D4")]
	public ZNLorePageLayeredScreen()
	{
	}
}
[Token(Token = "0x20001DD")]
public class ZNNotifierMarkerWidget : MonoBehaviour
{
	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The visible image object")]
	[SerializeField]
	public GameObject VisibleImageObject;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The tooltip object")]
	[SerializeField]
	public GameObject TooltipObject;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The circular fill image")]
	[SerializeField]
	public Image CircularFillImage;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Animator WidgetAnimator;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNGameUserSettings GameUserSettings;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Forces the scale to world 1, 1, 1 on start")]
	[SerializeField]
	public bool bForceScaleToWorld1;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[Tooltip("If this notifier marker widget is for a two handed object")]
	[SerializeField]
	public bool bTwoHandedNotifier;

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0xC445DC", Offset = "0xC445DC", VA = "0xC445DC")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0xC4468C", Offset = "0xC4468C", VA = "0xC4468C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0xC44700", Offset = "0xC44700", VA = "0xC44700")]
	public void ShowWidget()
	{
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0xC44828", Offset = "0xC44828", VA = "0xC44828")]
	public void HideWidget()
	{
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0xC448C8", Offset = "0xC448C8", VA = "0xC448C8")]
	public ZNNotifierMarkerWidget()
	{
	}
}
[Token(Token = "0x20001DE")]
public class ZNBloodDamageWidget : MonoBehaviour
{
	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The damage animator controller")]
	protected Animator DamageAnimController;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0xC448D0", Offset = "0xC448D0", VA = "0xC448D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0xC449F4", Offset = "0xC449F4", VA = "0xC449F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0xC44AF8", Offset = "0xC44AF8", VA = "0xC44AF8")]
	protected void DamageEvent(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0xC44B7C", Offset = "0xC44B7C", VA = "0xC44B7C")]
	public ZNBloodDamageWidget()
	{
	}
}
[Token(Token = "0x20001DF")]
[CreateAssetMenu(fileName = "ZNMessagePromptAsset", menuName = "Scriptable Objects/Message/ZNMessagePromptAsset")]
public class ZNMessagePromptAsset : ScriptableObject
{
	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The message's description")]
	protected LocalizedString Description;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("If the message prompt is only displayed for a limited amount of time. If false, it must be cleared manually.")]
	protected bool bLimitedDisplayTime;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Tooltip("How long (in seconds) to display the message prompt before starting to have it disappear. Only used if LimitedDisplayTime is true.")]
	protected float DisplayTime;

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0xC44B84", Offset = "0xC44B84", VA = "0xC44B84")]
	public ZNMessagePromptAsset()
	{
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0xC44B9C", Offset = "0xC44B9C", VA = "0xC44B9C")]
	public LocalizedString GetDescription()
	{
		return null;
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0xC44BA4", Offset = "0xC44BA4", VA = "0xC44BA4")]
	public bool IsLimitedDisplayTime()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0xC44BAC", Offset = "0xC44BAC", VA = "0xC44BAC")]
	public float GetDisplayTime()
	{
		return default(float);
	}
}
[Token(Token = "0x20001E0")]
public class ZNMessagePromptWidget : MonoBehaviour
{
	[Token(Token = "0x20001E1")]
	[CompilerGenerated]
	private sealed class <DestroyMessagePromptAfterDelay>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DelayTime;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNMessagePromptWidget <>4__this;

		[Token(Token = "0x170000AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0xC44F94", Offset = "0xC44F94", VA = "0xC44F94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xC44FDC", Offset = "0xC44FDC", VA = "0xC44FDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xC44D9C", Offset = "0xC44D9C", VA = "0xC44D9C")]
		[DebuggerHidden]
		public <DestroyMessagePromptAfterDelay>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xC44E00", Offset = "0xC44E00", VA = "0xC44E00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xC44E04", Offset = "0xC44E04", VA = "0xC44E04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xC44F9C", Offset = "0xC44F9C", VA = "0xC44F9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNMessagePromptAsset AssociatedMessagePromptAsset;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The animator controller for the widget")]
	protected Animator AnimController;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The description text for the tutorial")]
	[SerializeField]
	protected SAText DescriptionText;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FOnDestroyed OnDestroyedDel;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool bDestroyStarted;

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0xC44BB4", Offset = "0xC44BB4", VA = "0xC44BB4")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0xC44BEC", Offset = "0xC44BEC", VA = "0xC44BEC", Slot = "4")]
	public virtual void InitializeMessagePrompt(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0xC44D24", Offset = "0xC44D24", VA = "0xC44D24")]
	[IteratorStateMachine(typeof(<DestroyMessagePromptAfterDelay>d__3))]
	protected IEnumerator DestroyMessagePromptAfterDelay(float DelayTime)
	{
		return null;
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0xC44DC4", Offset = "0xC44DC4", VA = "0xC44DC4")]
	public void DestroyMessagePrompt()
	{
	}

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0xC44DE8", Offset = "0xC44DE8", VA = "0xC44DE8")]
	public ZNMessagePromptAsset GetAssociatedMessagePromptAsset()
	{
		return null;
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0xC44DF0", Offset = "0xC44DF0", VA = "0xC44DF0")]
	public bool HasDestroyStarted()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0xC44DF8", Offset = "0xC44DF8", VA = "0xC44DF8")]
	public ZNMessagePromptWidget()
	{
	}
}
[Token(Token = "0x20001E2")]
public class ZNNoirBar : MonoBehaviour
{
	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The main bar image, ideally on this component")]
	[SerializeField]
	protected Image MainBarImage;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The background bar image, should be on a child component")]
	[SerializeField]
	protected Image BackgroundBarImage;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The time lerp curve for the bar. This should end at 1.0 to be used correctly. The length of this is also the time it takes to reach the new value.")]
	protected AnimationCurve TimeLerpCurve;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The value that causes an overlap when reached")]
	protected float OverlapValue;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The list of bar nodes")]
	[SerializeField]
	protected List<SASpriteSwapImage> BarNodes;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected float FunctionalValue;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected float VisualValue;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float OriginalVisualValue;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected bool bUpdatingVisuals;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float BarChangeTime;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected float CurrentBarChangeTime;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected float BarChangeAmount;

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0xC44FE4", Offset = "0xC44FE4", VA = "0xC44FE4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0xC45110", Offset = "0xC45110", VA = "0xC45110", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0xC45230", Offset = "0xC45230", VA = "0xC45230")]
	public void SetBarValue(float InValue)
	{
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0xC45288", Offset = "0xC45288", VA = "0xC45288")]
	protected void SetFunctionalValue(float InValue)
	{
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0xC45180", Offset = "0xC45180", VA = "0xC45180")]
	protected void SetVisualValue(float InValue)
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0xC45340", Offset = "0xC45340", VA = "0xC45340")]
	protected void UpdateBarNodes(int NumActiveImages)
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0xC4543C", Offset = "0xC4543C", VA = "0xC4543C")]
	public ZNNoirBar()
	{
	}
}
[Token(Token = "0x20001E3")]
[CreateAssetMenu(fileName = "ZNTutorialPromptAsset", menuName = "Scriptable Objects/Message/ZNTutorialPromptAsset")]
public class ZNTutorialPromptAsset : ZNMessagePromptAsset
{
	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The tutorial's header")]
	[SerializeField]
	protected LocalizedString Header;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The tutorial images to display")]
	[SerializeField]
	protected List<Sprite> TutorialImages;

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0xC45460", Offset = "0xC45460", VA = "0xC45460")]
	public ZNTutorialPromptAsset()
	{
	}

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0xC45478", Offset = "0xC45478", VA = "0xC45478")]
	public LocalizedString GetHeader()
	{
		return null;
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0xC45480", Offset = "0xC45480", VA = "0xC45480")]
	public List<Sprite> GetTutorialImages()
	{
		return null;
	}
}
[Token(Token = "0x20001E4")]
public class ZNTutorialPromptWidget : ZNMessagePromptWidget
{
	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The header text for the tutorial")]
	[SerializeField]
	protected SAText HeaderText;

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0xC45488", Offset = "0xC45488", VA = "0xC45488", Slot = "4")]
	public override void InitializeMessagePrompt(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0xC45570", Offset = "0xC45570", VA = "0xC45570")]
	public ZNTutorialPromptAsset GetTutorialPromptAsset()
	{
		return null;
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0xC455EC", Offset = "0xC455EC", VA = "0xC455EC")]
	public ZNTutorialPromptWidget()
	{
	}
}
[Token(Token = "0x20001E5")]
public class ZNVRPickUpWidget : MonoBehaviour
{
	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The image used for picking things up")]
	[SerializeField]
	protected Image PickUpImage;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool bShowPickUp;

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xC455F4", Offset = "0xC455F4", VA = "0xC455F4")]
	public void SetShowPickUp(bool bNewShowPickUp)
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0xC456B8", Offset = "0xC456B8", VA = "0xC456B8")]
	public ZNVRPickUpWidget()
	{
	}
}
[Token(Token = "0x20001E6")]
public class ZNWaveNumberIntroWidget : MonoBehaviour
{
	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The wave number intro animator controller")]
	protected Animator WaveNumberIntroController;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The current wave number text")]
	protected SAText WaveNumberText;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The text that displays 'of' the max wave number")]
	[SerializeField]
	protected SAText OfMaxWaveNumberText;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0xC456C0", Offset = "0xC456C0", VA = "0xC456C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0xC458C0", Offset = "0xC458C0", VA = "0xC458C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0xC459D4", Offset = "0xC459D4", VA = "0xC459D4")]
	protected void WaveBegan(int WaveNumber)
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0xC45AC8", Offset = "0xC45AC8", VA = "0xC45AC8")]
	public ZNWaveNumberIntroWidget()
	{
	}
}
[Token(Token = "0x20001E7")]
[CreateAssetMenu(fileName = "ZNWeaponTutorialPromptAsset", menuName = "Scriptable Objects/Message/ZNWeaponTutorialPromptAsset")]
public class ZNWeaponTutorialPromptAsset : ZNTutorialPromptAsset
{
	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The tutorial's weapon asset")]
	[SerializeField]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0xC45AD0", Offset = "0xC45AD0", VA = "0xC45AD0")]
	public ZNWeaponTutorialPromptAsset()
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0xC45AE8", Offset = "0xC45AE8", VA = "0xC45AE8")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}
}
[Token(Token = "0x20001E8")]
public class ZNWeaponTutorialPromptWidget : ZNTutorialPromptWidget
{
	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The weapon icon image")]
	[SerializeField]
	protected Image WeaponIconImage;

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0xC45AF0", Offset = "0xC45AF0", VA = "0xC45AF0", Slot = "4")]
	public override void InitializeMessagePrompt(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0xC45C00", Offset = "0xC45C00", VA = "0xC45C00")]
	public ZNWeaponTutorialPromptWidget()
	{
	}
}
[Token(Token = "0x20001E9")]
public class ZNEndGameResultsWidget : MonoBehaviour
{
	[Token(Token = "0x20001EB")]
	[CompilerGenerated]
	private sealed class <DelayThenRetrieveRanking>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNEndGameResultsWidget <>4__this;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xC46D64", Offset = "0xC46D64", VA = "0xC46D64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xC46DAC", Offset = "0xC46DAC", VA = "0xC46DAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xC46598", Offset = "0xC46598", VA = "0xC46598")]
		[DebuggerHidden]
		public <DelayThenRetrieveRanking>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xC46B00", Offset = "0xC46B00", VA = "0xC46B00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xC46B04", Offset = "0xC46B04", VA = "0xC46B04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xC46D6C", Offset = "0xC46D6C", VA = "0xC46D6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The waves cleared text")]
	[SerializeField]
	protected SAText WavesClearedText;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The text for displaying success or failure")]
	[SerializeField]
	protected SAText SuccessFailureText;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The text for displaying the player's final score value")]
	protected SAText ScoreValueText;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The weapon results vertical layout group")]
	protected Transform WeaponResultsVerticalLayoutGroup;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The animator to show the ranking")]
	[SerializeField]
	protected Animator RankingAnimator;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The text for displaying the player's ranking on the leaderboard")]
	[SerializeField]
	protected SAText RankingNumberText;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The box that shows if you beat your high score")]
	protected GameObject NewHighScoreBox;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The weapon results widget")]
	[SerializeField]
	protected GameObject PF_WeaponResultsWidget;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The waves cleared string")]
	[SerializeField]
	protected LocalizedString WavesClearedString;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The success string")]
	[SerializeField]
	protected LocalizedString SuccessString;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The failure string")]
	protected LocalizedString FailureString;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Tooltip("The maximum number of weapons to display in the results")]
	protected int MaxNumWeaponsToDisplay;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected List<ZNWeaponResultsWidget> WeaponResultsWidgets;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected ulong PlayerLeaderboardEntryListRequestId;

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0xC45C08", Offset = "0xC45C08", VA = "0xC45C08")]
	public void InitializeEndGameResultsWidget(int InWavesCleared, bool bSuccess, bool bBeatHighScore, Dictionary<ZNWeaponAsset, FZNTrackedWeaponInfo> TrackedWeaponInfoDict)
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0xC46530", Offset = "0xC46530", VA = "0xC46530")]
	[IteratorStateMachine(typeof(<DelayThenRetrieveRanking>d__15))]
	protected IEnumerator DelayThenRetrieveRanking()
	{
		return null;
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0xC465C0", Offset = "0xC465C0", VA = "0xC465C0")]
	protected void ShowRanking(int InRank)
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0xC4663C", Offset = "0xC4663C", VA = "0xC4663C")]
	private void OculusGetPlayerLeaderboardEntryCallback(Message<LeaderboardEntryList> msg)
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0xC469DC", Offset = "0xC469DC", VA = "0xC469DC")]
	public ZNEndGameResultsWidget()
	{
	}
}
[Token(Token = "0x20001EC")]
public class ZNWeaponResultsWidget : MonoBehaviour
{
	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The weapon icon image")]
	[SerializeField]
	protected Image WeaponIconImage;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The weapon name text")]
	protected SAText WeaponNameText;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The text for displaying how much damage was done by the weapon")]
	[SerializeField]
	protected SAText WeaponDamageText;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The text for displaying how many critical hits was done by the weapon")]
	protected SAText WeaponCriticalHitsText;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The text for displaying how many killing blows was done by the weapon")]
	protected SAText WeaponKillingBlowsText;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int WeaponDamage;

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0xC46328", Offset = "0xC46328", VA = "0xC46328")]
	public void InitializeWeaponResultsWidget(ZNWeaponAsset InWeaponAsset, int InDamage, int InCriticalHits, int InKillingBlows)
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0xC46DB4", Offset = "0xC46DB4", VA = "0xC46DB4")]
	public int GetWeaponDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0xC46DBC", Offset = "0xC46DBC", VA = "0xC46DBC")]
	public ZNWeaponResultsWidget()
	{
	}
}
[Token(Token = "0x20001ED")]
public class ZNSetupPhaseWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNSetupManager SetupManager;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The text field that gets updated when the number of spawners placed is updated")]
	protected SAText NumSpawnersPlacedText;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The text field that gets updated when number of shops placed is updated")]
	protected SAText NumShopsPlacedText;

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0xC46DC4", Offset = "0xC46DC4", VA = "0xC46DC4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0xC46E4C", Offset = "0xC46E4C", VA = "0xC46E4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0xC470A0", Offset = "0xC470A0", VA = "0xC470A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0xC472F4", Offset = "0xC472F4", VA = "0xC472F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0xC47398", Offset = "0xC47398", VA = "0xC47398")]
	protected void NumSpawnersPlacedUpdated(int NewNumSpawners, int MaxNumSpawners)
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0xC47490", Offset = "0xC47490", VA = "0xC47490")]
	protected void NumShopsPlacedUpdated(int NewNumShops, int MaxNumShops)
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0xC47588", Offset = "0xC47588", VA = "0xC47588")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0xC475AC", Offset = "0xC475AC", VA = "0xC475AC")]
	public ZNSetupPhaseWidget()
	{
	}
}
[Token(Token = "0x20001EE")]
public class ZNShopItemCostWidget : MonoBehaviour
{
	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The shop item cost text")]
	[SerializeField]
	protected SAText ShopItemCostText;

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0xC475B4", Offset = "0xC475B4", VA = "0xC475B4")]
	public void SetShopItemCost(int InShopItemCost)
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0xC47650", Offset = "0xC47650", VA = "0xC47650")]
	public ZNShopItemCostWidget()
	{
	}
}
[Token(Token = "0x20001EF")]
public class ZNShopItemInfoWidget : ZNShopItemWidgetBase
{
	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The distance above the parent transform that we hover the widget")]
	[SerializeField]
	protected Vector3 HoverDistance;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNShopItemComponent AssociatedShopItemComponent;

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0xC47658", Offset = "0xC47658", VA = "0xC47658")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0xC477A0", Offset = "0xC477A0", VA = "0xC477A0")]
	public void AssignShopItemComponent(ZNShopItemComponent InShopItemComponent)
	{
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0xC477A8", Offset = "0xC477A8", VA = "0xC477A8", Slot = "5")]
	public override void UpdateItemWidget()
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0xC47C84", Offset = "0xC47C84", VA = "0xC47C84")]
	public ZNShopItemInfoWidget()
	{
	}
}
[Token(Token = "0x20001F0")]
public class ZNShopItemWidgetBase : MonoBehaviour
{
	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The main panel")]
	[Header("Widget Base")]
	protected GameObject MainPanel;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The overlay panel")]
	[SerializeField]
	protected GameObject OverlayPanel;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The item name text")]
	protected SAText ItemNameText;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The item description text")]
	protected SAText ItemDescriptionText;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The noir cost text")]
	protected SAText NoirCostText;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The text that says which button to press to purchase")]
	protected ZNText PurchaseButtonText;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The star widgets for each tier")]
	protected List<ZNTierStarWidget> TierStarWidgets;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The weapon stat widgets")]
	[SerializeField]
	protected List<ZNWeaponStatWidget> WeaponStatWidgets;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The message text to be displayed on the overlay panel")]
	[SerializeField]
	protected SAText OverlayMessageText;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNGrabObjectBase AssociatedGrabObject;

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0xC47C94", Offset = "0xC47C94", VA = "0xC47C94")]
	public void ShowWidget()
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0xC47CB8", Offset = "0xC47CB8", VA = "0xC47CB8")]
	public void HideWidget()
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0xC47CDC", Offset = "0xC47CDC", VA = "0xC47CDC")]
	public void ShowOverlay()
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0xC47DA0", Offset = "0xC47DA0", VA = "0xC47DA0")]
	public void HideOverlay()
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0xC47E64", Offset = "0xC47E64", VA = "0xC47E64", Slot = "4")]
	public virtual void AssignGrabObject(ZNGrabObjectBase InItem)
	{
	}

	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0xC47E74", Offset = "0xC47E74", VA = "0xC47E74", Slot = "5")]
	public virtual void UpdateItemWidget()
	{
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0xC4795C", Offset = "0xC4795C", VA = "0xC4795C")]
	protected void SetTierStars(int InTier, bool bInShowUpgradeStar = false)
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0xC47AB8", Offset = "0xC47AB8", VA = "0xC47AB8")]
	protected void SetWeaponStatWidgets(ZNWeaponAsset InWeaponAsset, int InTier, bool bInShowUpgradeFields = false)
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0xC48104", Offset = "0xC48104", VA = "0xC48104")]
	public ZNGrabObjectBase GetAssociatedGrabObject()
	{
		return null;
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0xC4810C", Offset = "0xC4810C", VA = "0xC4810C")]
	public ZNWeaponBase GetAssociatedWeaponBase()
	{
		return null;
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0xC47C8C", Offset = "0xC47C8C", VA = "0xC47C8C")]
	public ZNShopItemWidgetBase()
	{
	}
}
[Token(Token = "0x20001F1")]
public class ZNShopkeeperDialogueWidget : MonoBehaviour
{
	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Animator ShopkeeperDialogueAnimatorController;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The dialogue text")]
	[SerializeField]
	protected SAText DialogueText;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much time in seconds we have between characters showing in the dialogue text")]
	[SerializeField]
	protected float TimeBetweenCharacters;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("How long in seconds we wait before hiding the dialogue widget after we finish displaying text")]
	[SerializeField]
	protected float TimeToHideDialogueText;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The SFX that plays when dialogue is being updated")]
	[SerializeField]
	protected Event DialogueSFX;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("How long in seconds we wait between playing the dialogue SFX")]
	[SerializeField]
	protected float TimeBetweenDialogueSFXs;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected string CurrentStringToDisplay;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool bProgressingDialogueText;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float ProgressingDialogueTextTime;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float CurrentProgressingDialogueTextTime;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected bool bPreparingToHideDialogueText;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected float CurrentPreparingToHideDialogueTextTime;

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0xC48188", Offset = "0xC48188", VA = "0xC48188")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0xC481D8", Offset = "0xC481D8", VA = "0xC481D8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0xC4839C", Offset = "0xC4839C", VA = "0xC4839C")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0xC48544", Offset = "0xC48544", VA = "0xC48544")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0xC485DC", Offset = "0xC485DC", VA = "0xC485DC")]
	public void PlayDialogueLine(LocalizedString InDialogueLine, AK.Wwise.Switch InDialogueSwitch)
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0xC483D0", Offset = "0xC483D0", VA = "0xC483D0")]
	protected void ProgressDialogueText()
	{
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0xC48758", Offset = "0xC48758", VA = "0xC48758")]
	protected void PlayDialogueSFX()
	{
	}

	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0xC48718", Offset = "0xC48718", VA = "0xC48718")]
	protected void FinishProgressingDialogueText()
	{
	}

	[Token(Token = "0x6000DDC")]
	[Address(RVA = "0xC48474", Offset = "0xC48474", VA = "0xC48474")]
	protected void ProgressPreparingToHideDialogueText()
	{
	}

	[Token(Token = "0x6000DDD")]
	[Address(RVA = "0xC48794", Offset = "0xC48794", VA = "0xC48794")]
	protected void SelectedLocaleChanged(Locale NewLocale)
	{
	}

	[Token(Token = "0x6000DDE")]
	[Address(RVA = "0xC487D8", Offset = "0xC487D8", VA = "0xC487D8")]
	public ZNShopkeeperDialogueWidget()
	{
	}
}
[Token(Token = "0x20001F2")]
public class ZNShopWeaponUpgradeInfoWidget : ZNShopItemWidgetBase
{
	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The shop weapon upgrader")]
	[SerializeField]
	protected ZNShopWeaponUpgrader ShopWeaponUpgrader;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The string text we show when we have no weapon inserted")]
	[SerializeField]
	protected LocalizedString NoWeaponInsertedString;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("The string text we show when we have the weapon fully upgraded")]
	protected LocalizedString WeaponFullyUpgradedString;

	[Token(Token = "0x6000DDF")]
	[Address(RVA = "0xC48840", Offset = "0xC48840", VA = "0xC48840")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000DE0")]
	[Address(RVA = "0xC48944", Offset = "0xC48944", VA = "0xC48944")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000DE1")]
	[Address(RVA = "0xC48A48", Offset = "0xC48A48", VA = "0xC48A48", Slot = "5")]
	public override void UpdateItemWidget()
	{
	}

	[Token(Token = "0x6000DE2")]
	[Address(RVA = "0xC48C88", Offset = "0xC48C88", VA = "0xC48C88")]
	protected void ShopUpgradeCompleted(ZNGrabObjectBase UpgradedItem)
	{
	}

	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0xC48C94", Offset = "0xC48C94", VA = "0xC48C94")]
	public ZNShopWeaponUpgradeInfoWidget()
	{
	}
}
[Token(Token = "0x20001F3")]
public class ZNAchievementInfoWidget : MonoBehaviour
{
	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The achievement's name text")]
	protected SAText AchievementNameText;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The achievement's description text")]
	protected SAText AchievementDescriptionText;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The image slot for the achievement's icon")]
	[SerializeField]
	protected Image AchievementIconImage;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The lock icon image for the achievement")]
	protected Image LockIconImage;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The achievement's condition progress widget")]
	[SerializeField]
	protected SAConditionProgressWidget ConditionProgressWidget;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected SAAchievementAsset CurrentAchievementAsset;

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0xC48C9C", Offset = "0xC48C9C", VA = "0xC48C9C")]
	public void AssignAchievementAsset(SAAchievementAsset InAchievementAsset)
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0xC49094", Offset = "0xC49094", VA = "0xC49094")]
	public void ClearAchievementInfoWidget()
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0xC4915C", Offset = "0xC4915C", VA = "0xC4915C")]
	public ZNAchievementInfoWidget()
	{
	}
}
[Token(Token = "0x20001F4")]
public class ZNAchievementsPageChangerButtonWidget : SASelectableWidgetBase
{
	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The achievements page layered screen for this page changer button widget")]
	protected ZNAchievementsPageLayeredScreen AchievementsPageLayeredScreen;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("The SFX that plays when changing pages")]
	protected Event PageChangedSFX;

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0xC49164", Offset = "0xC49164", VA = "0xC49164", Slot = "13")]
	public override bool HasPressRightLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0xC4916C", Offset = "0xC4916C", VA = "0xC4916C", Slot = "14")]
	public override void DoPressRightLogic()
	{
	}

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0xC49228", Offset = "0xC49228", VA = "0xC49228", Slot = "15")]
	public override bool HasPressLeftLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0xC49230", Offset = "0xC49230", VA = "0xC49230", Slot = "16")]
	public override void DoPressLeftLogic()
	{
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0xC492EC", Offset = "0xC492EC", VA = "0xC492EC")]
	public ZNAchievementsPageChangerButtonWidget()
	{
	}
}
[Token(Token = "0x20001F5")]
public class ZNAchievementsPageLayeredScreen : SALayeredScreen
{
	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected List<SAAchievementAsset> AchievementAssetList;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The achievement info widgets")]
	protected List<ZNAchievementInfoWidget> AchievementInfoWidgets;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The page counter text")]
	[SerializeField]
	protected SAText PageCounterText;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected SAAchievementCollectionAsset AchievementCollectionAsset;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int CurrentPage;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected int NumPages;

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0xC492F4", Offset = "0xC492F4", VA = "0xC492F4")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0xC49310", Offset = "0xC49310", VA = "0xC49310")]
	protected void InitializeAchievementsPageLayeredScreen()
	{
	}

	[Token(Token = "0x6000DEE")]
	[Address(RVA = "0xC4965C", Offset = "0xC4965C", VA = "0xC4965C", Slot = "4")]
	public override void OpenScreen()
	{
	}

	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0xC49664", Offset = "0xC49664", VA = "0xC49664", Slot = "5")]
	public override void CloseScreen()
	{
	}

	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0xC49220", Offset = "0xC49220", VA = "0xC49220")]
	public void TurnRight()
	{
	}

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0xC492E4", Offset = "0xC492E4", VA = "0xC492E4")]
	public void TurnLeft()
	{
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0xC49434", Offset = "0xC49434", VA = "0xC49434")]
	protected void TurnPage(int InPagesTurned)
	{
	}

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0xC4966C", Offset = "0xC4966C", VA = "0xC4966C")]
	protected void LeftButtonClicked()
	{
	}

	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0xC49674", Offset = "0xC49674", VA = "0xC49674")]
	protected void RightButtonClicked()
	{
	}

	[Token(Token = "0x6000DF5")]
	[Address(RVA = "0xC4967C", Offset = "0xC4967C", VA = "0xC4967C")]
	public ZNAchievementsPageLayeredScreen()
	{
	}
}
[Token(Token = "0x20001F6")]
public class ZNHoursStatDataWidget : ZNStatDataWidget
{
	[Token(Token = "0x6000DF6")]
	[Address(RVA = "0xC49700", Offset = "0xC49700", VA = "0xC49700", Slot = "6")]
	public override void ReevaluateStat()
	{
	}

	[Token(Token = "0x6000DF7")]
	[Address(RVA = "0xC497C4", Offset = "0xC497C4", VA = "0xC497C4", Slot = "7")]
	protected override int GetCurrentIntegerStatValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000DF8")]
	[Address(RVA = "0xC49960", Offset = "0xC49960", VA = "0xC49960")]
	public new void ChangeAssociatedWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0xC49970", Offset = "0xC49970", VA = "0xC49970")]
	public ZNHoursStatDataWidget()
	{
	}
}
[Token(Token = "0x20001F7")]
public class ZNLeaderboardEntryWidget : MonoBehaviour
{
	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("")]
	protected SAText PlayerNameText;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("")]
	protected SAText RankingText;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("")]
	[SerializeField]
	protected SAText ScoreText;

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0xC49980", Offset = "0xC49980", VA = "0xC49980")]
	public void AssignLeaderboardEntry(FZNLeaderboardEntry InLeaderboardEntry)
	{
	}

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0xC49A28", Offset = "0xC49A28", VA = "0xC49A28")]
	public ZNLeaderboardEntryWidget()
	{
	}
}
[Token(Token = "0x20001F8")]
public class ZNLeaderboardPageChangerButtonWidget : SASelectableWidgetBase
{
	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The leaderboard single screen widget for this page changer button widget")]
	[SerializeField]
	protected ZNLeaderboardSingleScreenWidget LeaderboardSingleScreenWidget;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The SFX that plays when changing pages")]
	[SerializeField]
	protected Event PageChangedSFX;

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0xC49A30", Offset = "0xC49A30", VA = "0xC49A30", Slot = "13")]
	public override bool HasPressRightLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0xC49A38", Offset = "0xC49A38", VA = "0xC49A38", Slot = "14")]
	public override void DoPressRightLogic()
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0xC49B14", Offset = "0xC49B14", VA = "0xC49B14", Slot = "15")]
	public override bool HasPressLeftLogic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0xC49B1C", Offset = "0xC49B1C", VA = "0xC49B1C", Slot = "16")]
	public override void DoPressLeftLogic()
	{
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0xC49BFC", Offset = "0xC49BFC", VA = "0xC49BFC")]
	public ZNLeaderboardPageChangerButtonWidget()
	{
	}
}
[Token(Token = "0x20001F9")]
public class ZNLeaderboardSingleScreenWidget : MonoBehaviour
{
	[Token(Token = "0x20001FA")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameThenDoDebugTest>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNLeaderboardSingleScreenWidget <>4__this;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xC4BA5C", Offset = "0xC4BA5C", VA = "0xC4BA5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0xC4BAA4", Offset = "0xC4BAA4", VA = "0xC4BAA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xC49F4C", Offset = "0xC49F4C", VA = "0xC49F4C")]
		[DebuggerHidden]
		public <WaitOneFrameThenDoDebugTest>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xC4B294", Offset = "0xC4B294", VA = "0xC4B294", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xC4B298", Offset = "0xC4B298", VA = "0xC4B298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xC4BA64", Offset = "0xC4BA64", VA = "0xC4BA64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FB")]
	[CompilerGenerated]
	private sealed class <StartTimeoutCheck>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNLeaderboardSingleScreenWidget <>4__this;

		[Token(Token = "0x170000B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xC4BB68", Offset = "0xC4BB68", VA = "0xC4BB68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xC4BBB0", Offset = "0xC4BBB0", VA = "0xC4BBB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xC4B170", Offset = "0xC4B170", VA = "0xC4B170")]
		[DebuggerHidden]
		public <StartTimeoutCheck>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xC4BAAC", Offset = "0xC4BAAC", VA = "0xC4BAAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xC4BAB0", Offset = "0xC4BAB0", VA = "0xC4BAB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xC4BB70", Offset = "0xC4BB70", VA = "0xC4BB70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The header text")]
	[SerializeField]
	protected SAText HeaderText;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The list of all leaderboard entries")]
	[SerializeField]
	protected List<ZNLeaderboardEntryWidget> LeaderboardEntries;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The player's leaderboard entry")]
	protected ZNLeaderboardEntryWidget PlayerLeaderboardEntry;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The page number text")]
	protected SAText PageNumberText;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The difficulty sprite swap images")]
	protected List<SASpriteSwapImage> DifficultySpriteSwapImages;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The world or friends sprite swap images")]
	protected List<SASpriteSwapImage> WorldOrFriendsSpriteSwapImages;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The text on the button for world or friends")]
	protected SAText WorldOrFriendsButtonText;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("String that says world")]
	protected LocalizedString WorldString;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("String that says friends")]
	protected LocalizedString FriendsString;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("How long until the leaderboard times out")]
	[SerializeField]
	protected float LeaderboardTimeoutTime;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The leaderboard entries panel")]
	[SerializeField]
	protected GameObject LeaderboardEntriesPanel;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The loading panel")]
	[SerializeField]
	protected GameObject LoadingPanel;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The leaderboard error panel")]
	[SerializeField]
	protected GameObject LeaderboardErrorPanel;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The leaderboard panel when there is no internet")]
	[SerializeField]
	protected GameObject NoInternetPanel;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected ZNCaseFileAsset SelectedCaseFileAsset;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected EZNDifficulties SelectedDifficulty;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected bool bLoading;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	protected bool bFriendsOnly;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected int PageIndex;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected int NumPages;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected int NumEntriesPerPage;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected int ScreenIndex;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected List<FZNLeaderboardEntry> SelectedLeaderboardEntries;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Coroutine TimeoutCoroutine;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ulong PlayerLeaderboardEntryListRequestId;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected ulong LeaderboardEntryListRequestId;

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0xC49C04", Offset = "0xC49C04", VA = "0xC49C04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0xC49CD4", Offset = "0xC49CD4", VA = "0xC49CD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0xC49EE4", Offset = "0xC49EE4", VA = "0xC49EE4")]
	[IteratorStateMachine(typeof(<WaitOneFrameThenDoDebugTest>d__2))]
	protected IEnumerator WaitOneFrameThenDoDebugTest()
	{
		return null;
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0xC49F74", Offset = "0xC49F74", VA = "0xC49F74")]
	protected void SetScreenIndex(int InScreenIndex)
	{
	}

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0xC49CF4", Offset = "0xC49CF4", VA = "0xC49CF4")]
	protected void SetDifficulty(EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0xC49DC0", Offset = "0xC49DC0", VA = "0xC49DC0")]
	protected void SetFriendsOnly(bool bInFriendsOnly)
	{
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0xC4A034", Offset = "0xC4A034", VA = "0xC4A034")]
	protected void SetPageIndex(int InPageIndex)
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0xC4A3A8", Offset = "0xC4A3A8", VA = "0xC4A3A8")]
	protected void UpdateSelectedLeaderboardEntries(List<FZNLeaderboardEntry> InSelectedLeaderboardEntries)
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0xC4A450", Offset = "0xC4A450", VA = "0xC4A450")]
	protected void UpdatePlayerLeaderboardEntry(FZNLeaderboardEntry InPlayerLeaderboardEntry)
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0xC4A504", Offset = "0xC4A504", VA = "0xC4A504")]
	public void LoadLeaderboard(ZNCaseFileAsset InCaseFileAsset)
	{
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0xC4A7CC", Offset = "0xC4A7CC", VA = "0xC4A7CC")]
	private void OculusGetLeaderboardEntriesCallback(Message<LeaderboardEntryList> msg)
	{
	}

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0xC4ACBC", Offset = "0xC4ACBC", VA = "0xC4ACBC")]
	private void OculusGetPlayerLeaderboardEntryCallback(Message<LeaderboardEntryList> msg)
	{
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0xC4B108", Offset = "0xC4B108", VA = "0xC4B108")]
	[IteratorStateMachine(typeof(<StartTimeoutCheck>d__38))]
	protected IEnumerator StartTimeoutCheck()
	{
		return null;
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0xC49AFC", Offset = "0xC49AFC", VA = "0xC49AFC")]
	public void GoToNextPage()
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0xC49BE0", Offset = "0xC49BE0", VA = "0xC49BE0")]
	public void GoToPreviousPage()
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0xC4B198", Offset = "0xC4B198", VA = "0xC4B198")]
	public void GoToNextDifficulty()
	{
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0xC4B1D0", Offset = "0xC4B1D0", VA = "0xC4B1D0")]
	public void GoToNextWorldOrFriendsSetting()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0xC4B1F8", Offset = "0xC4B1F8", VA = "0xC4B1F8")]
	public ZNCaseFileAsset GetSelectedCaseFile()
	{
		return null;
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0xC4B200", Offset = "0xC4B200", VA = "0xC4B200")]
	public ZNLeaderboardSingleScreenWidget()
	{
	}
}
[Token(Token = "0x20001FC")]
public class ZNLeaderboardsScreenWidget : MonoBehaviour
{
	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The screen where we show an individual leaderboard")]
	protected ZNLeaderboardSingleScreenWidget LeaderboardSingleScreenWidget;

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0xC4BBB8", Offset = "0xC4BBB8", VA = "0xC4BBB8")]
	public void SelectCaseFileAndLoadLeaderboard(ZNCaseFileAsset InCaseFileAsset)
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0xC4BBD0", Offset = "0xC4BBD0", VA = "0xC4BBD0")]
	public ZNLeaderboardsScreenWidget()
	{
	}
}
[Token(Token = "0x20001FD")]
public class ZNPlayerInfoWidget : MonoBehaviour
{
	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The text field for the player's level")]
	[SerializeField]
	protected SAText PlayerLevelText;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The player experience bar")]
	[SerializeField]
	protected Image PlayerExperienceBar;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The text field for the player's experience count")]
	protected SAText PlayerExperienceCounterText;

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0xC4BBD8", Offset = "0xC4BBD8", VA = "0xC4BBD8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0xC4BBDC", Offset = "0xC4BBDC", VA = "0xC4BBDC")]
	protected void InitializePlayerInfoWidget()
	{
	}

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0xC4BE44", Offset = "0xC4BE44", VA = "0xC4BE44")]
	public ZNPlayerInfoWidget()
	{
	}
}
[Token(Token = "0x20001FE")]
public class ZNStatDataWidget : SAStatDataWidget
{
	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The key we use for finding the stat data. When set, make sure to set StatKey to use the correct string value for the weapon stats.")]
	[SerializeField]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0xC49890", Offset = "0xC49890", VA = "0xC49890", Slot = "7")]
	protected override int GetCurrentIntegerStatValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0xC4BE4C", Offset = "0xC4BE4C", VA = "0xC4BE4C")]
	public void ChangeAssociatedWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000E27")]
	[Address(RVA = "0xC49978", Offset = "0xC49978", VA = "0xC49978")]
	public ZNStatDataWidget()
	{
	}
}
[Token(Token = "0x20001FF")]
public class ZNWeaponsScreenWidget : MonoBehaviour
{
	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The weapon stat info list widget")]
	[SerializeField]
	protected ZNWeaponStatInfoListWidget WeaponStatInfoListWidget;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The text that shows the current weapon name")]
	[SerializeField]
	protected SAText WeaponNameText;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The weapon's icon image")]
	[SerializeField]
	protected Image WeaponIconImage;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The stat data widget for killing blows")]
	[SerializeField]
	protected ZNStatDataWidget KillingBlowsStatDataWidget;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The stat data widget for damage")]
	[SerializeField]
	protected ZNStatDataWidget DamageStatDataWidget;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The stat data widget for staggers")]
	[SerializeField]
	protected ZNStatDataWidget StaggersStatDataWidget;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The stat data widget for activations")]
	[SerializeField]
	protected ZNStatDataWidget ActivationsStatDataWidget;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The stat data widget for hits")]
	protected ZNStatDataWidget HitsStatDataWidget;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The stat data widget for accuracy")]
	protected ZNStatDataWidget AccuracyStatDataWidget;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Tooltip("The stat data widget for reloads")]
	protected ZNStatDataWidget ReloadsStatDataWidget;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected int WeaponStatInfoIndex;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ZNWeaponAsset SelectedWeaponAsset;

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0xC4BE5C", Offset = "0xC4BE5C", VA = "0xC4BE5C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0xC4C2B8", Offset = "0xC4C2B8", VA = "0xC4C2B8")]
	public void GoToNextWeapon()
	{
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0xC4C2C4", Offset = "0xC4C2C4", VA = "0xC4C2C4")]
	public void GoToPreviousWeapon()
	{
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0xC4C124", Offset = "0xC4C124", VA = "0xC4C124")]
	public void GoToWeaponIndex(int InWeaponIndex)
	{
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0xC4C47C", Offset = "0xC4C47C", VA = "0xC4C47C")]
	protected void UpdateScreenForWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0xC4C604", Offset = "0xC4C604", VA = "0xC4C604")]
	public ZNWeaponAsset GetSelectedWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0xC4C60C", Offset = "0xC4C60C", VA = "0xC4C60C")]
	public ZNWeaponsScreenWidget()
	{
	}
}
[Token(Token = "0x2000200")]
public class ZNWeaponStatInfoListWidget : MonoBehaviour
{
	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected List<ZNWeaponStatInfoWidget> WeaponStatInfoWidgets;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The weapons grid")]
	[SerializeField]
	protected Transform WeaponsGrid;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The prefab for the weapon stat info widget")]
	protected GameObject PF_WeaponStatInfoWidget;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The weapon assets to display")]
	protected List<ZNWeaponAsset> WeaponAssetsToDisplay;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The development weapon assets to display")]
	protected List<ZNWeaponAsset> DevelopmentWeaponAssetsToDisplay;

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0xC4BEDC", Offset = "0xC4BEDC", VA = "0xC4BEDC")]
	public void InitializeStatInfoListWidget()
	{
	}

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0xC4C708", Offset = "0xC4C708", VA = "0xC4C708")]
	public List<ZNWeaponStatInfoWidget> GetWeaponStatInfoWidgets()
	{
		return null;
	}

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0xC4C2D0", Offset = "0xC4C2D0", VA = "0xC4C2D0")]
	public ZNWeaponStatInfoWidget GetWeaponStatInfoWidgetAtIndex(int InIndex)
	{
		return null;
	}

	[Token(Token = "0x6000E32")]
	[Address(RVA = "0xC4C614", Offset = "0xC4C614", VA = "0xC4C614")]
	public List<ZNWeaponAsset> GetWeaponAssetsToDisplay()
	{
		return null;
	}

	[Token(Token = "0x6000E33")]
	[Address(RVA = "0xC4C710", Offset = "0xC4C710", VA = "0xC4C710")]
	public ZNWeaponStatInfoListWidget()
	{
	}
}
[Token(Token = "0x2000201")]
public class ZNWeaponStatInfoWidget : MonoBehaviour
{
	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The weapon icon image")]
	[SerializeField]
	protected Image BackgroundImage;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The sprite to show when highlighted")]
	[SerializeField]
	protected Sprite HighlightedSprite;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The sprite to show when not highlighted")]
	protected Sprite UnhighlightedSprite;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The weapon icon image")]
	[SerializeField]
	protected Image WeaponIconImage;

	[Token(Token = "0x6000E34")]
	[Address(RVA = "0xC4C640", Offset = "0xC4C640", VA = "0xC4C640")]
	public void InitializeStatInfoWidget(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000E35")]
	[Address(RVA = "0xC4C3F4", Offset = "0xC4C3F4", VA = "0xC4C3F4")]
	public void HighlightWidget()
	{
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0xC4C36C", Offset = "0xC4C36C", VA = "0xC4C36C")]
	public void UnhighlightWidget()
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0xC4C78C", Offset = "0xC4C78C", VA = "0xC4C78C")]
	public ZNWeaponAsset GetAssociatedWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0xC4C794", Offset = "0xC4C794", VA = "0xC4C794")]
	public ZNWeaponStatInfoWidget()
	{
	}
}
[Token(Token = "0x2000202")]
public class ZNWaveCounterWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("Text for displaying the wave number")]
	protected TextMeshProUGUI WaveCounterText;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ZNWaveManager WaveManager;

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0xC4C79C", Offset = "0xC4C79C", VA = "0xC4C79C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0xC4C818", Offset = "0xC4C818", VA = "0xC4C818")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0xC4C91C", Offset = "0xC4C91C", VA = "0xC4C91C")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0xC4CA20", Offset = "0xC4CA20", VA = "0xC4CA20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0xC4CAA8", Offset = "0xC4CAA8", VA = "0xC4CAA8")]
	protected void WaveBegan(int InWaveNumber)
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0xC4CAF4", Offset = "0xC4CAF4", VA = "0xC4CAF4")]
	public ZNWaveCounterWidget()
	{
	}
}
[Token(Token = "0x2000203")]
public class ZNTierStarWidget : SASpriteSwapImage
{
	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("The color used when the upgrade status is false")]
	[SerializeField]
	protected Color NormalColor;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The color used when the upgrade status is true")]
	[SerializeField]
	protected Color UpgradeColor;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected bool bUpgradeStatus;

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0xC48040", Offset = "0xC48040", VA = "0xC48040")]
	public void SetUpgradeStatus(bool bInUpgradeStatus)
	{
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0xC4CAFC", Offset = "0xC4CAFC", VA = "0xC4CAFC")]
	public bool IsUpgradeStatus()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0xC4CB04", Offset = "0xC4CB04", VA = "0xC4CB04")]
	public ZNTierStarWidget()
	{
	}
}
[Token(Token = "0x2000204")]
[CreateAssetMenu(fileName = "ZNWeaponStatAsset", menuName = "Scriptable Objects/Weapons/ZNWeaponStatAsset")]
public class ZNWeaponStatAsset : ScriptableObject
{
	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The name of the weapon stat that is displayed")]
	protected LocalizedString WeaponStatName;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The key we use to find information about the weapon stat")]
	protected string WeaponStatKey;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The variable type of the weapon stat. Should be either integer or float in most cases. This determines if we show decimal values or not.")]
	[SerializeField]
	protected ESAVariableTypes StatVariableType;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The min value for handling the stat bar")]
	[SerializeField]
	protected float StatBarMinValue;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The max value for handling the stat bar")]
	protected float StatBarMaxValue;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("If true, flips the min and max values on the bar. Useful for stats like accuracy/spread that are better the smaller they are.")]
	[SerializeField]
	protected bool bInvertedStat;

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0xC4CB20", Offset = "0xC4CB20", VA = "0xC4CB20")]
	public ZNWeaponStatAsset()
	{
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0xC4CB38", Offset = "0xC4CB38", VA = "0xC4CB38")]
	public LocalizedString GetWeaponStatName()
	{
		return null;
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0xC4CB40", Offset = "0xC4CB40", VA = "0xC4CB40")]
	public string GetWeaponStatKey()
	{
		return null;
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0xC4CB48", Offset = "0xC4CB48", VA = "0xC4CB48")]
	public ESAVariableTypes GetStatVariableType()
	{
		return default(ESAVariableTypes);
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0xC4CB50", Offset = "0xC4CB50", VA = "0xC4CB50")]
	public float GetStatBarMinValue()
	{
		return default(float);
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0xC4CB58", Offset = "0xC4CB58", VA = "0xC4CB58")]
	public float GetStatBarMaxValue()
	{
		return default(float);
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0xC4CB60", Offset = "0xC4CB60", VA = "0xC4CB60")]
	public bool IsInvertedStat()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000205")]
public class ZNWeaponStatWidget : MonoBehaviour
{
	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The stat name text")]
	[SerializeField]
	protected SAText StatNameText;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The current stat value text")]
	[SerializeField]
	protected SAText CurrentStatValueText;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The upgrade stat value text")]
	[SerializeField]
	protected SAText UpgradeStatValueText;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The bar used to show the stat's current value")]
	[SerializeField]
	protected Image CurrentStatBar;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The bar used to show the upgrade stat value")]
	[SerializeField]
	protected Image UpgradeStatBar;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected int CurrentWeaponTier;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected ZNWeaponStatAsset AssociatedWeaponStatAsset;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool bShowUpgradeFields;

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0xC480A4", Offset = "0xC480A4", VA = "0xC480A4")]
	public void ShowWidget()
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0xC480E0", Offset = "0xC480E0", VA = "0xC480E0")]
	public void HideWidget()
	{
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0xC480C8", Offset = "0xC480C8", VA = "0xC480C8")]
	public void AssignWeaponInfo(ZNWeaponAsset InWeaponAsset, int InWeaponTier, ZNWeaponStatAsset InWeaponStatAsset, bool bInShowUpgradeFields)
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0xC4CB68", Offset = "0xC4CB68", VA = "0xC4CB68")]
	public void UpdateVisuals()
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0xC4CEAC", Offset = "0xC4CEAC", VA = "0xC4CEAC")]
	public void ClearVisuals()
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0xC4CFD4", Offset = "0xC4CFD4", VA = "0xC4CFD4")]
	public ZNWeaponStatWidget()
	{
	}
}
[Token(Token = "0x2000206")]
public class ZNWeaponEnergyWidget : MonoBehaviour
{
	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Text field for the energy value display")]
	[SerializeField]
	protected TextMeshProUGUI EnergyValueText;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ZNWeaponBase AssociatedWeapon;

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0xC4CFDC", Offset = "0xC4CFDC", VA = "0xC4CFDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E50")]
	[Address(RVA = "0xC4D02C", Offset = "0xC4D02C", VA = "0xC4D02C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0xC4D130", Offset = "0xC4D130", VA = "0xC4D130")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E52")]
	[Address(RVA = "0xC4D234", Offset = "0xC4D234", VA = "0xC4D234")]
	protected void EnergyUpdated(ZNWeaponBase InWeapon, float NewEnergy, float MaxEnergy)
	{
	}

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0xC4D2D4", Offset = "0xC4D2D4", VA = "0xC4D2D4")]
	public ZNWeaponEnergyWidget()
	{
	}
}
[Token(Token = "0x2000207")]
public class ZNWeaponMagWidget : MonoBehaviour
{
	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Text field for inserting magazine")]
	[SerializeField]
	protected TextMeshProUGUI InsertMagazineText;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The start color for the insert magazine text")]
	[SerializeField]
	protected Color InsertMagazineTextStartColor;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The end color for the insert magazin text")]
	[SerializeField]
	protected Color InsertMagazineTextEndColor;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Time in seconds it takes to change to the other color for the insert magazine text")]
	[SerializeField]
	protected float InsertMagazineTextColorLerpTime;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If we should show the Insert Magazine text when at 0 ammo instead of when the mag is ejected")]
	[SerializeField]
	protected bool bShowInsertMagazineWhenAtZeroAmmo;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZNGunWeapon AssociatedGunWeapon;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float CurrentInsertMagazineTextColorLerpTime;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected bool bIncreasingColorLerpTime;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	protected bool bShowInsertMagazineText;

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0xC4D2DC", Offset = "0xC4D2DC", VA = "0xC4D2DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0xC4D32C", Offset = "0xC4D32C", VA = "0xC4D32C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0xC4D6A8", Offset = "0xC4D6A8", VA = "0xC4D6A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0xC4D9EC", Offset = "0xC4D9EC", VA = "0xC4D9EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0xC4DAE8", Offset = "0xC4DAE8", VA = "0xC4DAE8")]
	protected void SetActiveMagazineInsertText(bool bInActive)
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0xC4DB30", Offset = "0xC4DB30", VA = "0xC4DB30")]
	protected void AmmoUpdated(ZNWeaponBase InWeapon, int NewAmmo, int MaxAmmo)
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0xC4DB58", Offset = "0xC4DB58", VA = "0xC4DB58")]
	protected void MagInserted(ZNMag InsertedMag)
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0xC4DB60", Offset = "0xC4DB60", VA = "0xC4DB60")]
	protected void MagEjected(ZNMag EjectedMag)
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0xC4DB68", Offset = "0xC4DB68", VA = "0xC4DB68")]
	protected void WeaponDropped(ZNGrabObjectBase DroppedObject, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0xC4DBA4", Offset = "0xC4DBA4", VA = "0xC4DBA4")]
	protected void WeaponGrabbed(ZNGrabObjectBase GrabbedObject)
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0xC4DBE0", Offset = "0xC4DBE0", VA = "0xC4DBE0")]
	public ZNWeaponMagWidget()
	{
	}
}
[Token(Token = "0x2000208")]
public class ZNWeaponSkinOptionWidget : SAButtonWidget
{
	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Weapon Skin Option")]
	[Tooltip("The text that shows the current skin name")]
	[SerializeField]
	protected SAText WeaponSkinNameText;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The skin asset for this skin type")]
	[SerializeField]
	protected ZNSkinAsset AssociatedSkinAsset;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The sprite that shows when the skin is equipped")]
	protected Sprite EquippedSprite;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The sprite that shows when the skin is unequipped")]
	[SerializeField]
	protected Sprite UnequippedSprite;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("The button for equipping and unequipping the skin")]
	[SerializeField]
	protected Button EquipSkinButton;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("The image for displaying if this skin is locked or not")]
	[SerializeField]
	protected Image LockedIconImage;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Tooltip("The image for displaying if this skin needs to be unlocked via DLC (aka the shop)")]
	protected Image ShopIconImage;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Tooltip("If this is a DLC option. If this is not unlocked, may try to open a store on certain platforms.")]
	[SerializeField]
	protected bool bDLCOption;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Tooltip("The DLC Id used when this is a DLC option")]
	[SerializeField]
	protected string DLCId;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected ZNWeaponSkinsAsset AssociatedWeaponSkinsAsset;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected bool bLocked;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
	protected bool bEquipped;

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0xC4DBFC", Offset = "0xC4DBFC", VA = "0xC4DBFC", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0xC4DCFC", Offset = "0xC4DCFC", VA = "0xC4DCFC")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0xC4DDF0", Offset = "0xC4DDF0", VA = "0xC4DDF0")]
	public void UpdateWeaponSkinOptionWidget(ZNWeaponAsset InWeaponAsset, ZNWeaponSkinsAsset InWeaponSkinAsset)
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0xC4E024", Offset = "0xC4E024", VA = "0xC4E024")]
	public void SetEquipped(bool bInEquipped)
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0xC4E0E4", Offset = "0xC4E0E4", VA = "0xC4E0E4")]
	public void SetLocked(bool bInLocked)
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0xC4E194", Offset = "0xC4E194", VA = "0xC4E194")]
	public bool TryEquipSkin()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0xC4E2FC", Offset = "0xC4E2FC", VA = "0xC4E2FC")]
	public void ChangeSkinEquippedStatus(bool bInEquip = true)
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0xC4E46C", Offset = "0xC4E46C", VA = "0xC4E46C")]
	private void DLCPurchasesUpdated()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0xC4E2EC", Offset = "0xC4E2EC", VA = "0xC4E2EC")]
	public bool CanEquipSkin()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0xC4E480", Offset = "0xC4E480", VA = "0xC4E480")]
	public ZNSkinAsset GetSkinAsset()
	{
		return null;
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0xC4E488", Offset = "0xC4E488", VA = "0xC4E488")]
	public bool IsSkinEquipped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0xC4E490", Offset = "0xC4E490", VA = "0xC4E490")]
	public ZNWeaponSkinOptionWidget()
	{
	}
}
[Token(Token = "0x2000209")]
public class ZNWeaponSkinsScreenWidget : MonoBehaviour
{
	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The weapon stat info list widget")]
	[SerializeField]
	protected ZNWeaponsScreenWidget WeaponsScreenWidget;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The text that shows the current weapon name")]
	protected SAText WeaponNameText;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The weapon's icon image")]
	protected Image WeaponIconImage;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("All of the Weapon Skin Option Widgets")]
	[SerializeField]
	protected List<ZNWeaponSkinOptionWidget> WeaponSkinOptionWidgetsList;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The Weapon Skin Option Widget for the none/no skin equipped option")]
	[SerializeField]
	protected ZNWeaponSkinOptionWidget WeaponSkinNoneOptionWidget;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The back button widget")]
	[SerializeField]
	protected SASelectableWidgetBase BackButtonWidget;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The condition progress widget, showing how far along we are to unlocking the weapon skin")]
	protected SAConditionProgressWidget ConditionProgressWidget;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The weapon skin assets and their matching weapon assets")]
	protected SerializableDictionary<ZNWeaponAsset, ZNWeaponSkinsAsset> WeaponAssetsAndSkinsDictionary;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected ZNWeaponSkinOptionWidget EquippedWeaponSkinOptionWidget;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNWeaponAsset CurrentWeaponAsset;

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0xC4E4A0", Offset = "0xC4E4A0", VA = "0xC4E4A0")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0xC4E78C", Offset = "0xC4E78C", VA = "0xC4E78C")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0xC4EB38", Offset = "0xC4EB38", VA = "0xC4EB38")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0xC4E840", Offset = "0xC4E840", VA = "0xC4E840")]
	protected void UpdateScreenForWeaponSkinAssets(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0xC4F090", Offset = "0xC4F090", VA = "0xC4F090")]
	public void SelectWeaponSkinOptionWidget(ZNWeaponSkinOptionWidget InWeaponSkinOptionWidget)
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0xC4EE24", Offset = "0xC4EE24", VA = "0xC4EE24")]
	protected void UpdateScreenForEmptySkinAssets()
	{
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0xC4F15C", Offset = "0xC4F15C", VA = "0xC4F15C")]
	protected void WeaponSkinOptionWidgetHighlighted(SASelectableWidgetBase HighlightedSelectableWidget)
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0xC4F400", Offset = "0xC4F400", VA = "0xC4F400")]
	protected void BackButtonWidgetHighlighted(SASelectableWidgetBase HighlightedSelectableWidget)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0xC4F404", Offset = "0xC4F404", VA = "0xC4F404")]
	protected void HideConditionProgressWidget()
	{
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0xC4F438", Offset = "0xC4F438", VA = "0xC4F438")]
	public ZNWeaponSkinsScreenWidget()
	{
	}
}
[Token(Token = "0x200020A")]
public class ZNBuildInfoOverlayWidget : MonoBehaviour
{
	[Token(Token = "0x6000E75")]
	[Address(RVA = "0xC4F4F8", Offset = "0xC4F4F8", VA = "0xC4F4F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0xC4F5C8", Offset = "0xC4F5C8", VA = "0xC4F5C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0xC4F698", Offset = "0xC4F698", VA = "0xC4F698")]
	protected void SetUIVisibility(bool bVisible)
	{
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0xC4F6C0", Offset = "0xC4F6C0", VA = "0xC4F6C0")]
	private void DebugHideUISettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0xC4F6CC", Offset = "0xC4F6CC", VA = "0xC4F6CC")]
	public ZNBuildInfoOverlayWidget()
	{
	}
}
[Token(Token = "0x200020B")]
public class ZNCharacterHealthWidget : MonoBehaviour
{
	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The health value text")]
	protected TextMeshProUGUI HealthValueText;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The health bar image")]
	[SerializeField]
	protected Image HealthBarImage;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0xC4F6D4", Offset = "0xC4F6D4", VA = "0xC4F6D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0xC4F9C0", Offset = "0xC4F9C0", VA = "0xC4F9C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0xC4F8A4", Offset = "0xC4F8A4", VA = "0xC4F8A4")]
	protected void HealthUpdated(IZNDamageable InCharacter, int InCurrentHealth, int InMaxHealth)
	{
	}

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0xC4FAF8", Offset = "0xC4FAF8", VA = "0xC4FAF8")]
	public ZNCharacterHealthWidget()
	{
	}
}
[Token(Token = "0x200020C")]
public class ZNDifficultyWidget : MonoBehaviour
{
	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The easy difficulty image")]
	[SerializeField]
	protected SASpriteSwapImage EasyDifficultyImage;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The normal difficulty image")]
	[SerializeField]
	protected SASpriteSwapImage NormalDifficultyImage;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The hard difficulty image")]
	[SerializeField]
	protected SASpriteSwapImage HardDifficultyImage;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The master difficulty image")]
	[SerializeField]
	protected SASpriteSwapImage MasterDifficultyImage;

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0xC4FB00", Offset = "0xC4FB00", VA = "0xC4FB00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0xC4FCD8", Offset = "0xC4FCD8", VA = "0xC4FCD8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0xC4FC0C", Offset = "0xC4FC0C", VA = "0xC4FC0C")]
	public void DifficultyChanged(EZNDifficulties NewDifficulty)
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0xC4FDCC", Offset = "0xC4FDCC", VA = "0xC4FDCC")]
	public ZNDifficultyWidget()
	{
	}
}
[Token(Token = "0x200020D")]
public class ZNDisplayDamageWidget : MonoBehaviour
{
	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI BillboardDamageText;

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0xC4FDD4", Offset = "0xC4FDD4", VA = "0xC4FDD4")]
	public void PlayDisplayAnimation(float InDamage)
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0xC4FEF0", Offset = "0xC4FEF0", VA = "0xC4FEF0")]
	public ZNDisplayDamageWidget()
	{
	}
}
[Token(Token = "0x200020E")]
public class ZNEnemyInfoWidget : MonoBehaviour
{
	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The character health panel")]
	[SerializeField]
	protected GameObject CharacterHealthPanel;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The character health widget")]
	[SerializeField]
	protected ZNCharacterHealthWidget CharacterHealthWidget;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The enemy stagger panel")]
	[SerializeField]
	protected GameObject EnemyStaggerPanel;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The enemy stagger panel widget")]
	[SerializeField]
	protected ZNEnemyStaggerPanelWidget EnemyStaggerPanelWidget;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The enemy stagger panel widget")]
	[SerializeField]
	protected SubclassOf<SAModInstance> ExplosionFireIconMod;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The enemy stagger panel widget")]
	[SerializeField]
	protected Image ExplosionFireIcon;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected SAModManagerComponent ModManagerComponent;

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0xC4FEF8", Offset = "0xC4FEF8", VA = "0xC4FEF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0xC500E8", Offset = "0xC500E8", VA = "0xC500E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0xC503E4", Offset = "0xC503E4", VA = "0xC503E4")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0xC500EC", Offset = "0xC500EC", VA = "0xC500EC")]
	protected void InitializeCharacterInfoWidget()
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0xC504E8", Offset = "0xC504E8", VA = "0xC504E8")]
	protected void ReevaluateStatusEffectIcons()
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0xC505E0", Offset = "0xC505E0", VA = "0xC505E0")]
	protected void CharacterHiddenStateChanged(IZNDamageable ChangedCharacter, bool bNewHidden)
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0xC5060C", Offset = "0xC5060C", VA = "0xC5060C")]
	protected void ModInstanceAdded(SAModManagerComponent UpdatedModManagerComponent, SAModInstance AddedModInstance)
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0xC50610", Offset = "0xC50610", VA = "0xC50610")]
	protected void ModInstanceRemoved(SAModManagerComponent UpdatedModManagerComponent, SAModInstance RemovedModInstance)
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0xC50614", Offset = "0xC50614", VA = "0xC50614")]
	public ZNCharacterHealthWidget GetCharacterHealthWidget()
	{
		return null;
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0xC5061C", Offset = "0xC5061C", VA = "0xC5061C")]
	public ZNEnemyStaggerPanelWidget GetEnemyStaggerPanelWidget()
	{
		return null;
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0xC50624", Offset = "0xC50624", VA = "0xC50624")]
	public ZNEnemyInfoWidget()
	{
	}
}
[Token(Token = "0x200020F")]
public class ZNEnemyStaggerPanelWidget : MonoBehaviour
{
	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0xC5062C", Offset = "0xC5062C", VA = "0xC5062C")]
	public ZNEnemyStaggerPanelWidget()
	{
	}
}
[Token(Token = "0x2000210")]
public class ZNEnemyStaggerWidget : MonoBehaviour
{
	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The stagger type that this widget tracks")]
	[SerializeField]
	protected EZNStaggerTypes StaggerType;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The health value text")]
	[SerializeField]
	protected TextMeshProUGUI StaggerValueText;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The health bar image")]
	[SerializeField]
	protected Image StaggerBarImage;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNEnemyBase OwningEnemy;

	[Token(Token = "0x6000E90")]
	[Address(RVA = "0xC50634", Offset = "0xC50634", VA = "0xC50634")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E91")]
	[Address(RVA = "0xC50934", Offset = "0xC50934", VA = "0xC50934")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0xC50808", Offset = "0xC50808", VA = "0xC50808")]
	protected void StaggerUpdated(IZNDamageable InCharacter, EZNStaggerTypes InStaggerType, int InCurrentStagger, int InMaxStagger)
	{
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0xC50A6C", Offset = "0xC50A6C", VA = "0xC50A6C")]
	public ZNEnemyStaggerWidget()
	{
	}
}
[Token(Token = "0x2000211")]
public class ZNExtraLivesWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The extra life nodes")]
	[SerializeField]
	protected List<SASpriteSwapImage> ExtraLifeNodes;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x6000E94")]
	[Address(RVA = "0xC50A74", Offset = "0xC50A74", VA = "0xC50A74", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0xC50B60", Offset = "0xC50B60", VA = "0xC50B60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0xC50CA8", Offset = "0xC50CA8", VA = "0xC50CA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E97")]
	[Address(RVA = "0xC50C84", Offset = "0xC50C84", VA = "0xC50C84")]
	public void ExtraLivesUpdated(int NewNumExtraLives, int NewMaxNumExtraLives)
	{
	}

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0xC50DAC", Offset = "0xC50DAC", VA = "0xC50DAC")]
	public ZNExtraLivesWidget()
	{
	}
}
[Token(Token = "0x2000212")]
public class ZNFPSDisplayWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected TextMeshProUGUI FPSValueText;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float DeltaTime;

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0xC50DB4", Offset = "0xC50DB4", VA = "0xC50DB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0xC50E44", Offset = "0xC50E44", VA = "0xC50E44")]
	public ZNFPSDisplayWidget()
	{
	}
}
[Token(Token = "0x2000213")]
public class ZNGenericTextFadeWidget : MonoBehaviour
{
	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How long it takes until this widget is destroyed")]
	[SerializeField]
	protected float DestroyTime;

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0xC50E4C", Offset = "0xC50E4C", VA = "0xC50E4C")]
	public void Display()
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0xC50F30", Offset = "0xC50F30", VA = "0xC50F30")]
	public ZNGenericTextFadeWidget()
	{
	}
}
[Token(Token = "0x2000214")]
public class ZNMainMenuWarningWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x2000215")]
	[CompilerGenerated]
	private sealed class <ShowWarningAfterDelay>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainMenuWarningWidget <>4__this;

		[Token(Token = "0x170000B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xC51268", Offset = "0xC51268", VA = "0xC51268", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xC512B0", Offset = "0xC512B0", VA = "0xC512B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xC510C0", Offset = "0xC510C0", VA = "0xC510C0")]
		[DebuggerHidden]
		public <ShowWarningAfterDelay>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xC51188", Offset = "0xC51188", VA = "0xC51188", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xC5118C", Offset = "0xC5118C", VA = "0xC5118C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xC51270", Offset = "0xC51270", VA = "0xC51270", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000216")]
	[CompilerGenerated]
	private sealed class <HideWarningAfterDelay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMainMenuWarningWidget <>4__this;

		[Token(Token = "0x170000B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xC51390", Offset = "0xC51390", VA = "0xC51390", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xC513D8", Offset = "0xC513D8", VA = "0xC513D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xC51150", Offset = "0xC51150", VA = "0xC51150")]
		[DebuggerHidden]
		public <HideWarningAfterDelay>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xC512B8", Offset = "0xC512B8", VA = "0xC512B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xC512BC", Offset = "0xC512BC", VA = "0xC512BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xC51398", Offset = "0xC51398", VA = "0xC51398", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Animator WarningWidgetAnimator;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("If this message is only displayed when in mixed reality mode")]
	protected bool bOnlyDisplayInMixedReality;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("How long (in seconds) the warning is displayed for")]
	[SerializeField]
	protected float WarningDisplayTime;

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0xC50F40", Offset = "0xC50F40", VA = "0xC50F40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0xC51058", Offset = "0xC51058", VA = "0xC51058")]
	[IteratorStateMachine(typeof(<ShowWarningAfterDelay>d__4))]
	protected IEnumerator ShowWarningAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0xC510E8", Offset = "0xC510E8", VA = "0xC510E8")]
	[IteratorStateMachine(typeof(<HideWarningAfterDelay>d__5))]
	protected IEnumerator HideWarningAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0xC51178", Offset = "0xC51178", VA = "0xC51178")]
	public ZNMainMenuWarningWidget()
	{
	}
}
[Token(Token = "0x2000217")]
public class ZNMessageDisplayWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected GameObject PF_MessagePromptWidget;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected GameObject PF_TutorialPromptWidget;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected GameObject PF_WeaponTutorialPromptWidget;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Transform MessagesVerticalLayoutGroup;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ZNMainGameMode MainGameMode;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected List<ZNMessagePromptWidget> ActiveMessagePromptWidgets;

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0xC513E0", Offset = "0xC513E0", VA = "0xC513E0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0xC51404", Offset = "0xC51404", VA = "0xC51404")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0xC51508", Offset = "0xC51508", VA = "0xC51508")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0xC5160C", Offset = "0xC5160C", VA = "0xC5160C")]
	public void ShowMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0xC51A4C", Offset = "0xC51A4C", VA = "0xC51A4C")]
	public void ClearMessage(ZNMessagePromptAsset InMessagePromptAsset)
	{
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0xC51844", Offset = "0xC51844", VA = "0xC51844")]
	protected bool IsMessagePromptAssetAlreadyActive(ZNMessagePromptAsset InMessagePromptAsset)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0xC51BDC", Offset = "0xC51BDC", VA = "0xC51BDC")]
	protected void MessagePromptDestroyed(GameObject DestroyedGameObject)
	{
	}

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0xC51D54", Offset = "0xC51D54", VA = "0xC51D54")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0xC51988", Offset = "0xC51988", VA = "0xC51988")]
	protected GameObject GetWidgetPrefab(ZNMessagePromptAsset InMessagePromptAsset)
	{
		return null;
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0xC51D78", Offset = "0xC51D78", VA = "0xC51D78")]
	public ZNMessageDisplayWidget()
	{
	}
}
[Token(Token = "0x2000218")]
public class ZNNoirCoinCounterWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The noir value text")]
	[SerializeField]
	protected TextMeshProUGUI NoirCoinValueText;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0xC51DF4", Offset = "0xC51DF4", VA = "0xC51DF4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0xC51EE0", Offset = "0xC51EE0", VA = "0xC51EE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0xC5202C", Offset = "0xC5202C", VA = "0xC5202C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0xC52130", Offset = "0xC52130", VA = "0xC52130")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0xC521B8", Offset = "0xC521B8", VA = "0xC521B8")]
	public void NoirValueUpdated(int NewNoirValue)
	{
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0xC5225C", Offset = "0xC5225C", VA = "0xC5225C")]
	public ZNNoirCoinCounterWidget()
	{
	}
}
[Token(Token = "0x2000219")]
public class ZNNoirGaugeWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNScoreManager ScoreManager;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The noir gauge animator")]
	[SerializeField]
	protected Animator NoirGaugeAnimator;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The noir bar")]
	[SerializeField]
	protected ZNNoirBar NoirBar;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Tooltip("The player health widget")]
	protected SABarWidget PlayerHealthWidget;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The noir value text")]
	[SerializeField]
	protected TextMeshProUGUI NoirValueText;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("The player's health value text")]
	[SerializeField]
	protected TextMeshProUGUI PlayerHealthValueText;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("At what percentage of health we should start the death notifier. NOTE: If you change this value, make sure to change it on the animator too!")]
	[SerializeField]
	protected float DeathNotifierHealthPercentageStart;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("How fast the animator should play when near death/at death")]
	[SerializeField]
	protected float AtDeathAnimatorSpeed;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected bool bDepletingNoir;

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0xC52264", Offset = "0xC52264", VA = "0xC52264", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0xC5251C", Offset = "0xC5251C", VA = "0xC5251C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0xC526E0", Offset = "0xC526E0", VA = "0xC526E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0xC52990", Offset = "0xC52990", VA = "0xC52990")]
	protected void ScoreValueUpdated(int NewScoreValue)
	{
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0xC52A48", Offset = "0xC52A48", VA = "0xC52A48")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0xC52A6C", Offset = "0xC52A6C", VA = "0xC52A6C")]
	protected void HealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth)
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0xC52C14", Offset = "0xC52C14", VA = "0xC52C14")]
	public ZNNoirGaugeWidget()
	{
	}
}
[Token(Token = "0x200021A")]
public class ZNObjectiveInfoWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Animator ObjectiveInfoWidgetAnimator;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The objective description text")]
	[SerializeField]
	protected SAText ObjectiveDescriptionText;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The objective progress text")]
	[SerializeField]
	protected SAText ObjectiveProgressText;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The player's health value text")]
	[SerializeField]
	protected SABarWidget ObjectiveProgressBar;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The objective results panel")]
	[SerializeField]
	protected GameObject ObjectiveResultsPanel;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The score value text")]
	[SerializeField]
	protected SAText ScoreValueText;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNActivityManagerComponent ActivityManagerComponent;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ZNMainCharacter OwningCharacter;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected ZNObjectiveActivityInstance CurrentObjectiveActivityInstance;

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0xC52C28", Offset = "0xC52C28", VA = "0xC52C28", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0xC530F8", Offset = "0xC530F8", VA = "0xC530F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0xC533DC", Offset = "0xC533DC", VA = "0xC533DC")]
	protected void DisplayObjectiveActivity(ZNObjectiveActivityInstance InObjectiveActivityInstance)
	{
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0xC536E0", Offset = "0xC536E0", VA = "0xC536E0")]
	protected void FinishObjectiveActivity(bool bSuccess, int InScore)
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0xC535A8", Offset = "0xC535A8", VA = "0xC535A8")]
	protected void UpdateObjectiveDisplay()
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0xC538B0", Offset = "0xC538B0", VA = "0xC538B0")]
	protected void ObjectiveActivityInstanceAdded(ZNObjectiveActivityInstance NewObjectiveActivityInstance)
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0xC538B4", Offset = "0xC538B4", VA = "0xC538B4")]
	protected void ObjectiveActivityInstanceFinished(ZNObjectiveActivityInstance RemovedObjectiveActivityInstance, bool bSuccess, int InScore)
	{
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0xC538C0", Offset = "0xC538C0", VA = "0xC538C0")]
	protected void ObjectiveActivityInstanceRemoved(ZNObjectiveActivityInstance RemovedObjectiveActivityInstance)
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0xC538C4", Offset = "0xC538C4", VA = "0xC538C4")]
	protected void ActivityProgressUpdated(SAActivityInstance UpdatedActivityInstance)
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0xC538C8", Offset = "0xC538C8", VA = "0xC538C8")]
	protected void ObjectiveTierChanged(EZNObjectiveTiers NewTier)
	{
	}

	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0xC538CC", Offset = "0xC538CC", VA = "0xC538CC")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0xC538F0", Offset = "0xC538F0", VA = "0xC538F0")]
	public ZNObjectiveInfoWidget()
	{
	}
}
[Token(Token = "0x200021B")]
public class ZNObjectNameWidget : MonoBehaviour
{
	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The main panel object")]
	[SerializeField]
	protected GameObject MainPanel;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNGrabObjectBase AssociatedGrabObject;

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0xC538F8", Offset = "0xC538F8", VA = "0xC538F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0xC53AB0", Offset = "0xC53AB0", VA = "0xC53AB0")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0xC53C44", Offset = "0xC53C44", VA = "0xC53C44")]
	protected void ObjectGrabbed(ZNGrabObjectBase GrabbedObject)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0xC53C5C", Offset = "0xC53C5C", VA = "0xC53C5C")]
	protected void ObjectDropped(ZNGrabObjectBase DroppedObject, bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0xC53C74", Offset = "0xC53C74", VA = "0xC53C74")]
	public ZNObjectNameWidget()
	{
	}
}
[Token(Token = "0x200021C")]
public class ZNOrientToCenterCamera : MonoBehaviour
{
	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("If this is a world space object. World space will not orient directly towards the camera.")]
	private bool bWorldSpace;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform CenterEye;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 OriginalLocalPosition;

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0xC53C7C", Offset = "0xC53C7C", VA = "0xC53C7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0xC53CBC", Offset = "0xC53CBC", VA = "0xC53CBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0xC53FA4", Offset = "0xC53FA4", VA = "0xC53FA4")]
	public ZNOrientToCenterCamera()
	{
	}
}
[Token(Token = "0x200021D")]
public class ZNQuickLanguageSwitcherWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The text for switch-to-Japanese")]
	[SerializeField]
	protected GameObject SwitchToJapaneseText;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The text for switch-to-English")]
	[SerializeField]
	protected GameObject SwitchToEnglishText;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The English locale")]
	[SerializeField]
	protected Locale EnglishLocale;

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0xC53FAC", Offset = "0xC53FAC", VA = "0xC53FAC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0xC541C8", Offset = "0xC541C8", VA = "0xC541C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0xC54124", Offset = "0xC54124", VA = "0xC54124")]
	private void SelectedLocaleChanged(Locale obj)
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0xC54260", Offset = "0xC54260", VA = "0xC54260")]
	public ZNQuickLanguageSwitcherWidget()
	{
	}
}
[Token(Token = "0x200021E")]
public class ZNScoreMultiplierWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x200021F")]
	[CompilerGenerated]
	private sealed class <WaitToUpdateMultiplierValueEnum>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNScoreMultiplierWidget <>4__this;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0xC54DE8", Offset = "0xC54DE8", VA = "0xC54DE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0xC54E30", Offset = "0xC54E30", VA = "0xC54E30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xC54770", Offset = "0xC54770", VA = "0xC54770")]
		[DebuggerHidden]
		public <WaitToUpdateMultiplierValueEnum>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xC54D5C", Offset = "0xC54D5C", VA = "0xC54D5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xC54D60", Offset = "0xC54D60", VA = "0xC54D60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xC54DF0", Offset = "0xC54DF0", VA = "0xC54DF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNScoreManager ScoreManager;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The bar widget that displays the kills needed for the next multiplier")]
	[SerializeField]
	protected ZNTickMarksBarWidget KillsUntilNextMultiplierBar;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The noir value text")]
	[SerializeField]
	protected TextMeshProUGUI MultiplierValueText;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool bFillingBar;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForSeconds WaitForFillBarYield;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool bWaitingToUpdateMultiplierValue;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int UpdatedMultiplierValue;

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0xC54268", Offset = "0xC54268", VA = "0xC54268", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0xC544B0", Offset = "0xC544B0", VA = "0xC544B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0xC544B4", Offset = "0xC544B4", VA = "0xC544B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0xC5454C", Offset = "0xC5454C", VA = "0xC5454C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0xC544E4", Offset = "0xC544E4", VA = "0xC544E4")]
	[IteratorStateMachine(typeof(<WaitToUpdateMultiplierValueEnum>d__11))]
	private IEnumerator WaitToUpdateMultiplierValueEnum()
	{
		return null;
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0xC54798", Offset = "0xC54798", VA = "0xC54798")]
	private void UpdateMultiplierValue()
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0xC54924", Offset = "0xC54924", VA = "0xC54924")]
	protected void ScoreMultiplierUpdated(int InNewScoreMultiplier)
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0xC54A2C", Offset = "0xC54A2C", VA = "0xC54A2C")]
	protected void CurrentKillsUpdated(int InNewKillsAmount)
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0xC54C0C", Offset = "0xC54C0C", VA = "0xC54C0C")]
	protected void MultiplierTierUpdated(int InNewTier, int InNewKillsForNextTier)
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0xC54CEC", Offset = "0xC54CEC", VA = "0xC54CEC")]
	public ZNScoreMultiplierWidget()
	{
	}
}
[Token(Token = "0x2000220")]
public class ZNSettingCarouselWidget : SASettingCarouselWidget
{
	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Tooltip("If this should be disabled for mixed reality mode")]
	[SerializeField]
	[Header("VR/MR")]
	protected bool bDisableForMRMode;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	[Tooltip("If this should be disabled for virtual reality mode")]
	[SerializeField]
	protected bool bDisableForVRMode;

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0xC54E38", Offset = "0xC54E38", VA = "0xC54E38", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0xC54EF0", Offset = "0xC54EF0", VA = "0xC54EF0")]
	public ZNSettingCarouselWidget()
	{
	}
}
[Token(Token = "0x2000221")]
public class ZNSpeedBarWidget : ZNUIPlayerWidget
{
	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected GameObject SpeedBarRoot;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Image SpeedBarImage;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected ZNMainCharacter MainCharacter;

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0xC54EF8", Offset = "0xC54EF8", VA = "0xC54EF8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0xC54F94", Offset = "0xC54F94", VA = "0xC54F94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0xC5500C", Offset = "0xC5500C", VA = "0xC5500C")]
	public void UpdateSpeedValueBar()
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0xC55068", Offset = "0xC55068", VA = "0xC55068")]
	public ZNSpeedBarWidget()
	{
	}
}
[Token(Token = "0x2000222")]
public class ZNText : SAText
{
	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B8")]
	[Tooltip("The grab object that owns this text")]
	[SerializeField]
	protected ZNGrabObjectBase OwningGrabObject;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C0")]
	[Tooltip("If this text has per hand text replacement, checks for brackets with \"Current Hand\" in them to replace that with the currently grabbed hand.Should have rich text and icon text replacement on too.")]
	[SerializeField]
	protected bool bUsesPerHandTextReplacement;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C4")]
	[Tooltip("The current hand that is grabbing the object that owns this text")]
	[SerializeField]
	protected ZNHands CurrentHand;

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0xC55070", Offset = "0xC55070", VA = "0xC55070", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0xC551A4", Offset = "0xC551A4", VA = "0xC551A4", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0xC552B4", Offset = "0xC552B4", VA = "0xC552B4", Slot = "144")]
	protected override string DetermineUpdatedString(string NewString)
	{
		return null;
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0xC5536C", Offset = "0xC5536C", VA = "0xC5536C")]
	public void ForceSetCurrentHand(ZNHands InHand)
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0xC55374", Offset = "0xC55374", VA = "0xC55374")]
	protected void ObjectGrabbed(ZNGrabObjectBase GrabbedObject)
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0xC55404", Offset = "0xC55404", VA = "0xC55404")]
	public ZNText()
	{
	}
}
[Token(Token = "0x2000223")]
public class ZNTickMarksBarWidget : MonoBehaviour
{
	[Token(Token = "0x2000224")]
	[CompilerGenerated]
	private sealed class <WaitToUpdateMaxBarsEnum>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNTickMarksBarWidget <>4__this;

		[Token(Token = "0x170000B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0xC55970", Offset = "0xC55970", VA = "0xC55970", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0xC559B8", Offset = "0xC559B8", VA = "0xC559B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xC558CC", Offset = "0xC558CC", VA = "0xC558CC")]
		[DebuggerHidden]
		public <WaitToUpdateMaxBarsEnum>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xC558F4", Offset = "0xC558F4", VA = "0xC558F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xC558F8", Offset = "0xC558F8", VA = "0xC558F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xC55978", Offset = "0xC55978", VA = "0xC55978", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000225")]
	[CompilerGenerated]
	private sealed class <FillBarVisualEnum>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image InBarImage;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNTickMarksBarWidget <>4__this;

		[Token(Token = "0x170000BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0xC55AE4", Offset = "0xC55AE4", VA = "0xC55AE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0xC55B2C", Offset = "0xC55B2C", VA = "0xC55B2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xC559C0", Offset = "0xC559C0", VA = "0xC559C0")]
		[DebuggerHidden]
		public <FillBarVisualEnum>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xC559E8", Offset = "0xC559E8", VA = "0xC559E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xC559EC", Offset = "0xC559EC", VA = "0xC559EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xC55AEC", Offset = "0xC55AEC", VA = "0xC55AEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("A list for all of the bar images")]
	[SerializeField]
	protected List<GameObject> BarObjectsList;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Range(0.1f, 1f)]
	[Tooltip("The amount to fill a portion of a tick mark bar--should be divisible by 1 (1 = full bar)")]
	protected float FillBarPortionAmount;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("The duration for filling a tick mark bar--should be divisible by the FillBarPortionAmount")]
	[Range(0.1f, 3f)]
	[SerializeField]
	protected float FillBarDurationSeconds;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int CurrentBarsFilled;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool bFillingBar;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int MaxBars;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool bWaitingToUpdateMaxBars;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool bUpdateMaxBarsWithFullBars;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WaitForSeconds FillBarPortionYield;

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0xC55464", Offset = "0xC55464", VA = "0xC55464")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0xC554DC", Offset = "0xC554DC", VA = "0xC554DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0xC54CA4", Offset = "0xC54CA4", VA = "0xC54CA4")]
	public void TryUpdateMaxBars(int InNewBarsAmount, bool bWithFullBars)
	{
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0xC55688", Offset = "0xC55688", VA = "0xC55688")]
	[IteratorStateMachine(typeof(<WaitToUpdateMaxBarsEnum>d__12))]
	private IEnumerator WaitToUpdateMaxBarsEnum()
	{
		return null;
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0xC556F0", Offset = "0xC556F0", VA = "0xC556F0")]
	private void UpdateMaxBarsVisual()
	{
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0xC54AC4", Offset = "0xC54AC4", VA = "0xC54AC4")]
	public void FillNextBar()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0xC55614", Offset = "0xC55614", VA = "0xC55614")]
	[IteratorStateMachine(typeof(<FillBarVisualEnum>d__15))]
	private IEnumerator FillBarVisualEnum(Image InBarImage)
	{
		return null;
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0xC547E8", Offset = "0xC547E8", VA = "0xC547E8")]
	public void EmptyAllBars()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0xC5583C", Offset = "0xC5583C", VA = "0xC5583C")]
	public bool IsFillingBar()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0xC55844", Offset = "0xC55844", VA = "0xC55844")]
	public ZNTickMarksBarWidget()
	{
	}
}
[Token(Token = "0x2000226")]
public class ZNTutorialVideoWidget : MonoBehaviour
{
	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The animator for the anims")]
	[SerializeField]
	protected Animator TutorialVideoAnimator;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The video player that plays the tutorial videos")]
	[SerializeField]
	protected VideoPlayer TutorialVideoPlayer;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If true, pauses the video when the game pauses")]
	[SerializeField]
	protected bool bPauseVideoWhenGamePauses;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected SAGameMode GameMode;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNMainGameMode MainGameMode;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected VideoClip CurrentVideoClip;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool bLooping;

	[Token(Token = "0x6000F0E")]
	[Address(RVA = "0xC55B34", Offset = "0xC55B34", VA = "0xC55B34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0xC55B90", Offset = "0xC55B90", VA = "0xC55B90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0xC55E44", Offset = "0xC55E44", VA = "0xC55E44")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0xC560F8", Offset = "0xC560F8", VA = "0xC560F8")]
	public void PlayVideo(VideoClip InTutorialVideoClip, bool bInLooping)
	{
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0xC56250", Offset = "0xC56250", VA = "0xC56250")]
	public void StopVideo()
	{
	}

	[Token(Token = "0x6000F13")]
	[Address(RVA = "0xC56300", Offset = "0xC56300", VA = "0xC56300")]
	private void LoopPointReached(VideoPlayer source)
	{
	}

	[Token(Token = "0x6000F14")]
	[Address(RVA = "0xC56310", Offset = "0xC56310", VA = "0xC56310")]
	private void GameEnded(bool bSuccess)
	{
	}

	[Token(Token = "0x6000F15")]
	[Address(RVA = "0xC56334", Offset = "0xC56334", VA = "0xC56334")]
	private void GamePaused()
	{
	}

	[Token(Token = "0x6000F16")]
	[Address(RVA = "0xC563CC", Offset = "0xC563CC", VA = "0xC563CC")]
	private void GameUnPaused()
	{
	}

	[Token(Token = "0x6000F17")]
	[Address(RVA = "0xC5636C", Offset = "0xC5636C", VA = "0xC5636C")]
	public bool IsTutorialVideoActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F18")]
	[Address(RVA = "0xC56404", Offset = "0xC56404", VA = "0xC56404")]
	public ZNTutorialVideoWidget()
	{
	}
}
[Token(Token = "0x2000227")]
public class ZNUIFingerButton : MonoBehaviour
{
	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Button UIButton;

	[Token(Token = "0x6000F19")]
	[Address(RVA = "0xC56414", Offset = "0xC56414", VA = "0xC56414")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F1A")]
	[Address(RVA = "0xC56464", Offset = "0xC56464", VA = "0xC56464")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F1B")]
	[Address(RVA = "0xC564F0", Offset = "0xC564F0", VA = "0xC564F0")]
	public ZNUIFingerButton()
	{
	}
}
[Token(Token = "0x2000228")]
public class ZNUIManager : MonoBehaviour
{
	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNGameplayGameMode GameplayGameMode;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SASmoothToCenterCamera SmoothToCenterCameraComponent;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Canvas responsible for the FPS display")]
	[SerializeField]
	protected Canvas FPSCounterCanvas;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Widget responsible for the setup phase")]
	[SerializeField]
	protected ZNSetupPhaseWidget SetupPhaseWidget;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("Widget responsible for the wave counter")]
	protected ZNWaveCounterWidget WaveCounterWidget;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Widget responsible for the noir gauge")]
	[SerializeField]
	protected ZNNoirGaugeWidget NoirGaugeWidget;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Widget responsible for the objective info")]
	[SerializeField]
	protected ZNObjectiveInfoWidget ObjectiveInfoWidget;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Widget responsible for the You Died Text")]
	[SerializeField]
	protected Canvas YouDiedWidget;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Widget responsible for the message display")]
	[SerializeField]
	protected ZNMessageDisplayWidget MessageDisplayWidget;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Widget responsible for tutorial videos")]
	[SerializeField]
	protected ZNTutorialVideoWidget TutorialVideoWidget;

	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0xC564F8", Offset = "0xC564F8", VA = "0xC564F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0xC56BF4", Offset = "0xC56BF4", VA = "0xC56BF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0xC56F38", Offset = "0xC56F38", VA = "0xC56F38")]
	protected void SetUIVisibility(bool bVisible)
	{
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0xC56B64", Offset = "0xC56B64", VA = "0xC56B64")]
	private void UIDistanceChanged(float NewDistance)
	{
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0xC56BE8", Offset = "0xC56BE8", VA = "0xC56BE8")]
	private void DebugHideUISettingChanged(bool bNewValue)
	{
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0xC56F60", Offset = "0xC56F60", VA = "0xC56F60")]
	protected void Paused()
	{
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0xC56F64", Offset = "0xC56F64", VA = "0xC56F64")]
	protected void UnPaused()
	{
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0xC56954", Offset = "0xC56954", VA = "0xC56954")]
	protected void GamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase)
	{
	}

	[Token(Token = "0x6000F24")]
	[Address(RVA = "0xC56F68", Offset = "0xC56F68", VA = "0xC56F68")]
	public ZNSetupPhaseWidget GetSetupPhaseWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0xC56F70", Offset = "0xC56F70", VA = "0xC56F70")]
	public ZNWaveCounterWidget GetWaveCounterWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0xC56F78", Offset = "0xC56F78", VA = "0xC56F78")]
	public ZNNoirGaugeWidget GetNoirGaugeWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0xC56F80", Offset = "0xC56F80", VA = "0xC56F80")]
	public ZNObjectiveInfoWidget GetObjectiveInfoWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0xC56F88", Offset = "0xC56F88", VA = "0xC56F88")]
	public Canvas GetYouDiedWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0xC56F90", Offset = "0xC56F90", VA = "0xC56F90")]
	public ZNMessageDisplayWidget GetMessageDisplayWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0xC56F98", Offset = "0xC56F98", VA = "0xC56F98")]
	public ZNTutorialVideoWidget GetTutorialVideoWidget()
	{
		return null;
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0xC56FA0", Offset = "0xC56FA0", VA = "0xC56FA0")]
	public ZNUIManager()
	{
	}
}
[Token(Token = "0x2000229")]
public class ZNUIPlayerWidget : MonoBehaviour
{
	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNUIManager UIManager;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Player Widget")]
	[Tooltip("The game modes that this player widget will show up in. If no game mode is found, this widget WILL be displayed.")]
	protected List<SubclassOf<SAGameMode>> ValidGameModes;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected SAGameMode GameModeRef;

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0xC56FA8", Offset = "0xC56FA8", VA = "0xC56FA8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0xC57144", Offset = "0xC57144", VA = "0xC57144")]
	public ZNUIManager GetUIManager()
	{
		return null;
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0xC5714C", Offset = "0xC5714C", VA = "0xC5714C")]
	public ZNUIPlayerWidget()
	{
	}
}
[Token(Token = "0x200022A")]
public class ZNLaserRifleBeamVFX : MonoBehaviour
{
	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The line renderers that change with size")]
	protected List<LineRenderer> SizeChangingLineRenderers;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("The particle systems that change with size")]
	protected List<ParticleSystem> SizeChangingParticleSystems;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The VFX that comes on at power level 01")]
	[SerializeField]
	protected GameObject PowerLevel01VFX;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The VFX that comes on at power level 02")]
	[SerializeField]
	protected GameObject PowerLevel02VFX;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The length that we use to reference how long the beam was by default in the VFX inspector.")]
	[SerializeField]
	protected float ReferenceLength;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected float CurrentBeamSize;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected List<Vector2> ParticleSystemLowerEndValues;

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0xC57154", Offset = "0xC57154", VA = "0xC57154")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0xC57200", Offset = "0xC57200", VA = "0xC57200")]
	protected void DetermineParticleSystemLowerEndValues(float InReferenceLength)
	{
	}

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0xC57378", Offset = "0xC57378", VA = "0xC57378")]
	public void UpdateBeamSize(float InBeamSize)
	{
	}

	[Token(Token = "0x6000F32")]
	[Address(RVA = "0xC5719C", Offset = "0xC5719C", VA = "0xC5719C")]
	public void ReevaluatePowerLevelVFX(int InPowerLevel)
	{
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0xC57580", Offset = "0xC57580", VA = "0xC57580")]
	public float GetCurrentBeamSize()
	{
		return default(float);
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0xC57588", Offset = "0xC57588", VA = "0xC57588")]
	public ZNLaserRifleBeamVFX()
	{
	}
}
[Token(Token = "0x200022B")]
public class ZNTeslaGunElectricityVFX : MonoBehaviour
{
	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool bInitialized;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	protected bool bUpdatedPosition;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The particle system responsible for the moving electricity")]
	[SerializeField]
	protected List<ParticleSystem> ElectricityParticleSystems;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool bOriginHasTransform;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Transform OriginTransform;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Vector3 OriginLocation;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Transform DestinationTransform;

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0xC5760C", Offset = "0xC5760C", VA = "0xC5760C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0xC57A90", Offset = "0xC57A90", VA = "0xC57A90")]
	public void InitializeTeslaGunElectricityVFX(Transform InOriginTransform, Transform InDestinationTransform)
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0xC57AA8", Offset = "0xC57AA8", VA = "0xC57AA8")]
	public void InitializeTeslaGunElectricityVFX(Vector3 InOriginLocation, Transform InDestinationTransform)
	{
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0xC5761C", Offset = "0xC5761C", VA = "0xC5761C")]
	protected void UpdateTeslaGunElectricityVFXVisuals()
	{
	}

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0xC57AC4", Offset = "0xC57AC4", VA = "0xC57AC4")]
	public ZNTeslaGunElectricityVFX()
	{
	}
}
[Token(Token = "0x200022C")]
public class ZNTeslaGunElectricityVFX_Old : MonoBehaviour
{
	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool bInitialized;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The particle system responsible for the moving electricity")]
	[SerializeField]
	protected ParticleSystem ElectricityParticleSystem;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool bOriginHasTransform;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Transform OriginTransform;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Vector3 OriginLocation;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Transform DestinationTransform;

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0xC57ACC", Offset = "0xC57ACC", VA = "0xC57ACC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0xC57E10", Offset = "0xC57E10", VA = "0xC57E10")]
	public void InitializeTeslaGunElectricityVFX(Transform InOriginTransform, Transform InDestinationTransform)
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0xC57E28", Offset = "0xC57E28", VA = "0xC57E28")]
	public void InitializeTeslaGunElectricityVFX(Vector3 InOriginLocation, Transform InDestinationTransform)
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0xC57ADC", Offset = "0xC57ADC", VA = "0xC57ADC")]
	protected void UpdateTeslaGunElectricityVFXVisuals()
	{
	}

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0xC57E44", Offset = "0xC57E44", VA = "0xC57E44")]
	public ZNTeslaGunElectricityVFX_Old()
	{
	}
}
[Token(Token = "0x200022D")]
public class ZNVFX : SAMonoBehaviour
{
	[Token(Token = "0x200022E")]
	[CompilerGenerated]
	private sealed class <DestroyAfterDelay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DelayTime;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNVFX <>4__this;

		[Token(Token = "0x170000BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xC58070", Offset = "0xC58070", VA = "0xC58070", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xC580B8", Offset = "0xC580B8", VA = "0xC580B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xC57F74", Offset = "0xC57F74", VA = "0xC57F74")]
		[DebuggerHidden]
		public <DestroyAfterDelay>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xC57FBC", Offset = "0xC57FBC", VA = "0xC57FBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xC57FC0", Offset = "0xC57FC0", VA = "0xC57FC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xC58078", Offset = "0xC58078", VA = "0xC58078", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The main particle system for this VFX")]
	protected ParticleSystem MainParticleSystem;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("If this VFX should destroy itself after the specified lifetime")]
	[SerializeField]
	protected bool bDestroyAfterLifetime;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[Tooltip("For non-looping VFX: After the VFX spawns, this is how long before this object gets deleted. This should be longer than the lifetime of all particle systems/VFX graphs.")]
	protected float VFXLifetime;

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0xC57E4C", Offset = "0xC57E4C", VA = "0xC57E4C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0xC57E54", Offset = "0xC57E54", VA = "0xC57E54")]
	public void PlayVFX()
	{
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0xC57EFC", Offset = "0xC57EFC", VA = "0xC57EFC")]
	[IteratorStateMachine(typeof(<DestroyAfterDelay>d__5))]
	protected IEnumerator DestroyAfterDelay(float DelayTime)
	{
		return null;
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0xC57F9C", Offset = "0xC57F9C", VA = "0xC57F9C")]
	public ParticleSystem GetMainParticleSystem()
	{
		return null;
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0xC57FA4", Offset = "0xC57FA4", VA = "0xC57FA4")]
	public ZNVFX()
	{
	}
}
[Token(Token = "0x200022F")]
public class ZNWeaponSkinShineVFX : ZNWeaponSkinVFXBase
{
	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The shine mesh particle system")]
	[Header("WeaponSkins")]
	protected ParticleSystem ShineShimmerParticleSystem;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("The shine star particle system")]
	protected ParticleSystem ShineStarParticleSystem;

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0xC580C0", Offset = "0xC580C0", VA = "0xC580C0", Slot = "4")]
	public override void InitializeWeaponSkinVFX(ZNWeaponBase InOwningWeapon)
	{
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0xC584A4", Offset = "0xC584A4", VA = "0xC584A4")]
	public ZNWeaponSkinShineVFX()
	{
	}
}
[Token(Token = "0x2000230")]
public class ZNWeaponSkinVFXBase : MonoBehaviour
{
	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNWeaponBase OwningWeapon;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Mesh OwningWeaponMesh;

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0xC582BC", Offset = "0xC582BC", VA = "0xC582BC", Slot = "4")]
	public virtual void InitializeWeaponSkinVFX(ZNWeaponBase InOwningWeapon)
	{
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0xC584AC", Offset = "0xC584AC", VA = "0xC584AC")]
	public ZNWeaponSkinVFXBase()
	{
	}
}
[Token(Token = "0x2000231")]
[CreateAssetMenu(fileName = "ZNBuilderWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNBuilderWeaponAsset")]
public class ZNBuilderWeaponAsset : ZNTraceWeaponAsset
{
	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("If this is an auto build weapon (where the player doesn't manually build with it)")]
	[SerializeField]
	protected bool bAutoBuild;

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0xC584B4", Offset = "0xC584B4", VA = "0xC584B4")]
	public bool IsAutoBuild()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0xC584BC", Offset = "0xC584BC", VA = "0xC584BC")]
	public ZNBuilderWeaponAsset()
	{
	}
}
[Token(Token = "0x2000232")]
[CreateAssetMenu(fileName = "ZNChargeWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNChargeWeaponAsset")]
public class ZNChargeWeaponAsset : ZNGunWeaponAsset
{
	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The charge weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredChargeWeaponStats> TieredChargeWeaponStats;

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0xC585C0", Offset = "0xC585C0", VA = "0xC585C0")]
	public ZNChargeWeaponAsset()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0xC588B0", Offset = "0xC588B0", VA = "0xC588B0", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0xC58C6C", Offset = "0xC58C6C", VA = "0xC58C6C")]
	public int GetMaxNumCharges(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0xC58D2C", Offset = "0xC58D2C", VA = "0xC58D2C")]
	public SerializableDictionary<int, double> GetChargeDamageMultiplierDict(int InTierIndex)
	{
		return null;
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0xC58E30", Offset = "0xC58E30", VA = "0xC58E30")]
	public Dictionary<int, double> GetChargeDamageMultiplierDictAsNormalDictionary(int InTierIndex)
	{
		return null;
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0xC5914C", Offset = "0xC5914C", VA = "0xC5914C")]
	public double GetDamageMultiplierForCharge(int InTierIndex, int InCharge)
	{
		return default(double);
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0xC591F8", Offset = "0xC591F8", VA = "0xC591F8", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000233")]
[CreateAssetMenu(fileName = "ZNCooldownWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNCooldownWeaponAsset")]
public class ZNCooldownWeaponAsset : ZNGunWeaponAsset
{
	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The cooldown weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredCooldownWeaponStats> TieredCooldownWeaponStats;

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0xC59388", Offset = "0xC59388", VA = "0xC59388")]
	public ZNCooldownWeaponAsset()
	{
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0xC5949C", Offset = "0xC5949C", VA = "0xC5949C")]
	public float GetCooldownDurationSeconds(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0xC5955C", Offset = "0xC5955C", VA = "0xC5955C")]
	public int GetMaxCharges(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0xC59620", Offset = "0xC59620", VA = "0xC59620", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000234")]
[CreateAssetMenu(fileName = "ZNCryoGunWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNCryoGunWeaponAsset")]
public class ZNCryoGunWeaponAsset : ZNProjectileWeaponAsset
{
	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Tooltip("The cryo gun weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredCryoGunWeaponStats> TieredCryoGunWeaponStats;

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0xC596C8", Offset = "0xC596C8", VA = "0xC596C8")]
	public ZNCryoGunWeaponAsset()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0xC5994C", Offset = "0xC5994C", VA = "0xC5994C")]
	public int GetCryoExplosionMaxDamage(int InTierIndex, int InPowerLevel)
	{
		return default(int);
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0xC59A50", Offset = "0xC59A50", VA = "0xC59A50")]
	public int GetCryoExplosionMinDamage(int InTierIndex, int InPowerLevel)
	{
		return default(int);
	}
}
[Token(Token = "0x2000235")]
[CreateAssetMenu(fileName = "ZNGrenadeWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNGrenadeWeaponAsset")]
public class ZNGrenadeWeaponAsset : ZNThrownWeaponAsset
{
	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The grenade weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredGrenadeWeaponStats> TieredGrenadeWeaponStats;

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0xC59B54", Offset = "0xC59B54", VA = "0xC59B54")]
	public ZNGrenadeWeaponAsset()
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0xC59CC0", Offset = "0xC59CC0", VA = "0xC59CC0", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0xC5A278", Offset = "0xC5A278", VA = "0xC5A278")]
	public FZNTieredGrenadeWeaponStats GetTieredGrenadeWeaponStatsForTier(int InTierIndex)
	{
		return default(FZNTieredGrenadeWeaponStats);
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0xC5A360", Offset = "0xC5A360", VA = "0xC5A360")]
	public float GetGrenadeRadius(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0xC5A438", Offset = "0xC5A438", VA = "0xC5A438")]
	public double GetFalloffDamageAtEdgeMultiplier(int InTierIndex)
	{
		return default(double);
	}

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0xC5A510", Offset = "0xC5A510", VA = "0xC5A510")]
	public float GetTimeToExplode(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0xC5A5E8", Offset = "0xC5A5E8", VA = "0xC5A5E8", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000236")]
[CreateAssetMenu(fileName = "ZNRangedWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNGunWeaponAsset")]
public class ZNGunWeaponAsset : ZNWeaponAsset
{
	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Tooltip("If this gun uses ammo and requires reloading. If false, essentially acts as infinite ammo.")]
	protected bool bUsesAmmo;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	[Tooltip("If the weapon uses ammo, the cost for activating the weapon")]
	protected int ActivateAmmoCost;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("The key name we look for when calculating max ammo to see if this weapon is affected by an ammo additive property")]
	[SerializeField]
	protected string AmmoAdditivePropertyKey;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The gun weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredGunWeaponStats> TieredGunWeaponStats;

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0xC5876C", Offset = "0xC5876C", VA = "0xC5876C")]
	public ZNGunWeaponAsset()
	{
	}

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0xC58978", Offset = "0xC58978", VA = "0xC58978", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0xC5AA10", Offset = "0xC5AA10", VA = "0xC5AA10")]
	public bool DoesUseAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0xC5AA18", Offset = "0xC5AA18", VA = "0xC5AA18")]
	public int GetActivateAmmoCost()
	{
		return default(int);
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0xC5AA20", Offset = "0xC5AA20", VA = "0xC5AA20")]
	public string GetAmmoAdditivePropertyKey()
	{
		return null;
	}

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0xC5AA28", Offset = "0xC5AA28", VA = "0xC5AA28")]
	public float GetHoldActivationIntervalTime(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0xC5AAE8", Offset = "0xC5AAE8", VA = "0xC5AAE8")]
	public float GetFireOnCooldownTime(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0xC5ABAC", Offset = "0xC5ABAC", VA = "0xC5ABAC")]
	public int GetMaxAmmo(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0xC592A4", Offset = "0xC592A4", VA = "0xC592A4", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000237")]
[CreateAssetMenu(fileName = "ZNMeleeWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNMeleeWeaponAsset")]
public class ZNMeleeWeaponAsset : ZNWeaponAsset
{
	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("How far the weapon has to be swung for it to become an attack")]
	[SerializeField]
	protected float SwingStartDistance;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	[Tooltip("How far the weapon has to be swung for it to become an attack if it's been angled enough")]
	protected float AngledSwingStartDistance;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("How much the weapon has to be rotated for it to become an attack (in Euler angles)")]
	[SerializeField]
	protected float SwingStartRotation;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Tooltip("How much time in seconds the player has to move the distance for the attack to start")]
	[SerializeField]
	protected float SwingStartDuration;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("How long the swing attack is active for")]
	[SerializeField]
	protected float SwingActiveDuration;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Tooltip("How long the swing attack is on cooldown for before being able to start another swing")]
	protected float SwingCooldown;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("How far the weapon has to be swung for the trail VFX to start showing--should be less than SwingStartDistance")]
	protected float SwingTrailVFXStartDistance;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[Tooltip("How much the weapon has to be rotated for the trail VFX to start showing (in Euler angles)--should be a high angle value")]
	[SerializeField]
	protected float SwingTrailVFXStartRotation;

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0xC5AC70", Offset = "0xC5AC70", VA = "0xC5AC70")]
	public float GetSwingStartDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0xC5AC78", Offset = "0xC5AC78", VA = "0xC5AC78")]
	public float GetAngledSwingStartDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0xC5AC80", Offset = "0xC5AC80", VA = "0xC5AC80")]
	public float GetSwingStartRotation()
	{
		return default(float);
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0xC5AC88", Offset = "0xC5AC88", VA = "0xC5AC88")]
	public float GetSwingStartDuration()
	{
		return default(float);
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0xC5AC90", Offset = "0xC5AC90", VA = "0xC5AC90")]
	public float GetSwingActiveDuration()
	{
		return default(float);
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0xC5AC98", Offset = "0xC5AC98", VA = "0xC5AC98")]
	public float GetSwingCooldown()
	{
		return default(float);
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0xC5ACA0", Offset = "0xC5ACA0", VA = "0xC5ACA0")]
	public float GetSwingTrailVFXStartDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0xC5ACA8", Offset = "0xC5ACA8", VA = "0xC5ACA8")]
	public float GetSwingTrailVFXStartRotation()
	{
		return default(float);
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0xC5ACB0", Offset = "0xC5ACB0", VA = "0xC5ACB0")]
	public ZNMeleeWeaponAsset()
	{
	}
}
[Token(Token = "0x2000238")]
[CreateAssetMenu(fileName = "ZNMultiTraceWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNMultiTraceWeaponAsset")]
public class ZNMultiTraceWeaponAsset : ZNTraceWeaponAsset
{
	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Tooltip("The multi trace weapon's stats for each tier. 0 is without any upgrades.")]
	protected List<FZNTieredMultiTraceWeaponStats> TieredMultiTraceWeaponStats;

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0xC5ACC8", Offset = "0xC5ACC8", VA = "0xC5ACC8")]
	public ZNMultiTraceWeaponAsset()
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0xC5ADCC", Offset = "0xC5ADCC", VA = "0xC5ADCC", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0xC5AE98", Offset = "0xC5AE98", VA = "0xC5AE98")]
	public int GetNumTraces(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0xC5AF58", Offset = "0xC5AF58", VA = "0xC5AF58")]
	public int GetEstimatedMultiTraceDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0xC5AF94", Offset = "0xC5AF94", VA = "0xC5AF94", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000239")]
[CreateAssetMenu(fileName = "ZNPersistentTraceWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNPersistentTraceWeaponAsset")]
public class ZNPersistentTraceWeaponAsset : ZNRangedWeaponAsset
{
	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Tooltip("The persistent trace weapon's stats for each damage power level. 0 is without any upgrades.")]
	protected List<FZNTieredPersistentTraceWeaponStats> TieredPersistentTraceWeaponStats;

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0xC5B178", Offset = "0xC5B178", VA = "0xC5B178")]
	public ZNPersistentTraceWeaponAsset()
	{
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0xC5B3A0", Offset = "0xC5B3A0", VA = "0xC5B3A0", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0xC5B4DC", Offset = "0xC5B4DC", VA = "0xC5B4DC")]
	public int GetPowerLevelTwoDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0xC5B59C", Offset = "0xC5B59C", VA = "0xC5B59C")]
	public int GetPowerLevelThreeDamage(int InTierIndex)
	{
		return default(int);
	}
}
[Token(Token = "0x200023A")]
[CreateAssetMenu(fileName = "ZNProjectileWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNProjectileWeaponAsset")]
public class ZNProjectileWeaponAsset : ZNRangedWeaponAsset
{
	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The projectile weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredProjectileWeaponStats> TieredProjectileWeaponStats;

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0xC5983C", Offset = "0xC5983C", VA = "0xC5983C")]
	public ZNProjectileWeaponAsset()
	{
	}

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0xC5B660", Offset = "0xC5B660", VA = "0xC5B660")]
	public float GetProjectileAOERadius(int InTierIndex)
	{
		return default(float);
	}
}
[Token(Token = "0x200023B")]
[CreateAssetMenu(fileName = "ZNQuantityWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNQuantityWeaponAsset")]
public class ZNQuantityWeaponAsset : ZNWeaponAsset
{
	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("The object/weapon that we spawn when grabbing this weapon")]
	[SerializeField]
	protected GameObject PF_SpawnObject;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("The weapon asset that we attach to the spawn object to initialize it")]
	[SerializeField]
	protected ZNWeaponAsset SO_WeaponAssetToAttach;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("The quantity weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredQuantityWeaponStats> TieredQuantityWeaponStats;

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0xC5B71C", Offset = "0xC5B71C", VA = "0xC5B71C")]
	public ZNQuantityWeaponAsset()
	{
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0xC5B830", Offset = "0xC5B830", VA = "0xC5B830", Slot = "4")]
	public override string GetTrackedWeaponStatKey()
	{
		return null;
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0xC5B8BC", Offset = "0xC5B8BC", VA = "0xC5B8BC", Slot = "5")]
	public override string GetDamageAdditivePropertyKey()
	{
		return null;
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0xC5B948", Offset = "0xC5B948", VA = "0xC5B948", Slot = "6")]
	public override string GetStaggerAdditivePropertyKey()
	{
		return null;
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0xC5B9D4", Offset = "0xC5B9D4", VA = "0xC5B9D4", Slot = "7")]
	public override int GetDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0xC5BB54", Offset = "0xC5BB54", VA = "0xC5BB54", Slot = "8")]
	public override int GetCriticalDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0xC5BCD4", Offset = "0xC5BCD4", VA = "0xC5BCD4", Slot = "9")]
	public override double GetEnergyDamageMultiplier(int InTierIndex)
	{
		return default(double);
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0xC5BE54", Offset = "0xC5BE54", VA = "0xC5BE54", Slot = "10")]
	public override float GetUseEnergyCost(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0xC5BFD0", Offset = "0xC5BFD0", VA = "0xC5BFD0", Slot = "11")]
	public override int GetCurrencyCost(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0xC5C150", Offset = "0xC5C150", VA = "0xC5C150")]
	public GameObject GetPF_SpawnObject()
	{
		return null;
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0xC5C158", Offset = "0xC5C158", VA = "0xC5C158")]
	public ZNWeaponAsset GetSO_WeaponAssetToAttach()
	{
		return null;
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0xC5C160", Offset = "0xC5C160", VA = "0xC5C160", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0xC5C2AC", Offset = "0xC5C2AC", VA = "0xC5C2AC")]
	public int GetMaxQuantity(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0xC5C36C", Offset = "0xC5C36C", VA = "0xC5C36C")]
	public float GetRegenerateObjectTime(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0xC5C434", Offset = "0xC5C434", VA = "0xC5C434", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x200023C")]
[CreateAssetMenu(fileName = "ZNRangedWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNRangedWeaponAsset")]
public class ZNRangedWeaponAsset : ZNGunWeaponAsset
{
	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The maximum spread (in degrees) that the fired shot will be offset by")]
	[SerializeField]
	protected List<FZNTieredRangedWeaponStats> TieredRangedWeaponStats;

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0xC5B28C", Offset = "0xC5B28C", VA = "0xC5B28C")]
	public ZNRangedWeaponAsset()
	{
	}

	[Token(Token = "0x6000F92")]
	[Address(RVA = "0xC5B3A4", Offset = "0xC5B3A4", VA = "0xC5B3A4", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F93")]
	[Address(RVA = "0xC5C56C", Offset = "0xC5C56C", VA = "0xC5C56C")]
	public float GetMaxSpread(int InTierIndex, bool bInTwoHanded)
	{
		return default(float);
	}

	[Token(Token = "0x6000F94")]
	[Address(RVA = "0xC5C638", Offset = "0xC5C638", VA = "0xC5C638")]
	public float GetOneHandedMaxSpread(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F95")]
	[Address(RVA = "0xC5C578", Offset = "0xC5C578", VA = "0xC5C578")]
	public float GetTwoHandedMaxSpread(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000F96")]
	[Address(RVA = "0xC5B098", Offset = "0xC5B098", VA = "0xC5B098", Slot = "14")]
	public override bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x200023D")]
[CreateAssetMenu(fileName = "ZNSingleTraceWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNSingleTraceWeaponAsset")]
public class ZNSingleTraceWeaponAsset : ZNTraceWeaponAsset
{
	[Token(Token = "0x6000F97")]
	[Address(RVA = "0xC5C6F4", Offset = "0xC5C6F4", VA = "0xC5C6F4")]
	public ZNSingleTraceWeaponAsset()
	{
	}
}
[Token(Token = "0x200023E")]
[CreateAssetMenu(fileName = "ZNMultiTraceWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNThrownWeaponAsset")]
public class ZNThrownWeaponAsset : ZNWeaponAsset
{
	[Token(Token = "0x6000F98")]
	[Address(RVA = "0xC59CBC", Offset = "0xC59CBC", VA = "0xC59CBC")]
	public ZNThrownWeaponAsset()
	{
	}
}
[Token(Token = "0x200023F")]
[CreateAssetMenu(fileName = "ZNTraceWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNTraceWeaponAsset")]
public class ZNTraceWeaponAsset : ZNRangedWeaponAsset
{
	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The trace weapon's stats for each tier. 0 is without any upgrades.")]
	[SerializeField]
	protected List<FZNTieredTraceWeaponStats> TieredTraceWeaponStats;

	[Token(Token = "0x6000F99")]
	[Address(RVA = "0xC584C0", Offset = "0xC584C0", VA = "0xC584C0")]
	public ZNTraceWeaponAsset()
	{
	}

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0xC5AE94", Offset = "0xC5AE94", VA = "0xC5AE94", Slot = "13")]
	protected override string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0xC5C6F8", Offset = "0xC5C6F8", VA = "0xC5C6F8")]
	public bool DoesUseLaserSight(int InTierIndex)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000240")]
[CreateAssetMenu(fileName = "ZNWeaponAsset", menuName = "Scriptable Objects/Weapons/ZNWeaponAsset")]
public class ZNWeaponAsset : ScriptableObject
{
	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The weapon's prefab that will get spawned")]
	[SerializeField]
	protected GameObject WeaponPrefab;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The weapon's name")]
	[SerializeField]
	protected LocalizedString WeaponName;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The weapon's description")]
	[SerializeField]
	protected LocalizedString WeaponDescription;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The key we use for tracking weapon stats")]
	[SerializeField]
	protected string TrackedWeaponStatKey;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("The weapon's icon")]
	protected Sprite WeaponIcon;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The weapon's size")]
	protected EZNWeaponSizes WeaponSize;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Tooltip("The weapon stat assets displayed on many screens")]
	protected List<ZNWeaponStatAsset> DisplayedWeaponStatAssets;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The key name we look for when calculating damage to see if this weapon is affected by a damage additive property")]
	[SerializeField]
	protected string DamageAdditivePropertyKey;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Tooltip("The key name we look for when calculating stagger to see if this weapon is affected by a stagger additive property")]
	protected string StaggerAdditivePropertyKey;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("If this weapon uses the energy system.")]
	[SerializeField]
	protected bool bUsesEnergy;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[Tooltip("If this weapon uses the stagger override.")]
	[SerializeField]
	protected bool bUseStaggerOverride;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	[SerializeField]
	[Tooltip("If this weapon allows critical hits.")]
	protected bool bAllowCriticals;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Tooltip("This weapon's category")]
	[SerializeField]
	protected EZNWeaponCategories WeaponCategory;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Tooltip("The weapon tutorial prompt asset to show when this weapon requests a tutorial prompt")]
	protected ZNWeaponTutorialPromptAsset WeaponTutorialPromptAsset;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The weapon tutorial video clip to show when this weapon requests a tutorial prompt")]
	[SerializeField]
	protected VideoClip WeaponTutorialVideoClip;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("The weapon's base stats for each tier. 0 is without any upgrades.")]
	protected List<FZNTieredWeaponBaseStats> TieredWeaponBaseStats;

	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0xC5A890", Offset = "0xC5A890", VA = "0xC5A890")]
	public ZNWeaponAsset()
	{
	}

	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0xC5C7C0", Offset = "0xC5C7C0", VA = "0xC5C7C0")]
	public GameObject GetWeaponPrefab()
	{
		return null;
	}

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0xC5C7C8", Offset = "0xC5C7C8", VA = "0xC5C7C8")]
	public LocalizedString GetWeaponName()
	{
		return null;
	}

	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0xC5C7D0", Offset = "0xC5C7D0", VA = "0xC5C7D0")]
	public LocalizedString GetWeaponDescription()
	{
		return null;
	}

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0xC5C7D8", Offset = "0xC5C7D8", VA = "0xC5C7D8", Slot = "4")]
	public virtual string GetTrackedWeaponStatKey()
	{
		return null;
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0xC5C7E0", Offset = "0xC5C7E0", VA = "0xC5C7E0")]
	public Sprite GetWeaponIcon()
	{
		return null;
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0xC5C7E8", Offset = "0xC5C7E8", VA = "0xC5C7E8")]
	public EZNWeaponSizes GetWeaponSize()
	{
		return default(EZNWeaponSizes);
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0xC5C7F0", Offset = "0xC5C7F0", VA = "0xC5C7F0")]
	public List<ZNWeaponStatAsset> GetDisplayedWeaponStatAssets()
	{
		return null;
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0xC5C7F8", Offset = "0xC5C7F8", VA = "0xC5C7F8", Slot = "5")]
	public virtual string GetDamageAdditivePropertyKey()
	{
		return null;
	}

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0xC5C800", Offset = "0xC5C800", VA = "0xC5C800", Slot = "6")]
	public virtual string GetStaggerAdditivePropertyKey()
	{
		return null;
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0xC5C808", Offset = "0xC5C808", VA = "0xC5C808")]
	public bool DoesUseStaggerOverride()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0xC5C810", Offset = "0xC5C810", VA = "0xC5C810")]
	public bool DoesUseEnergy()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0xC5C818", Offset = "0xC5C818", VA = "0xC5C818")]
	public bool DoesAllowCriticals()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0xC5C820", Offset = "0xC5C820", VA = "0xC5C820")]
	public EZNWeaponCategories GetWeaponCategory()
	{
		return default(EZNWeaponCategories);
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0xC5C828", Offset = "0xC5C828", VA = "0xC5C828")]
	public string GetDamageAdditiveKeyForWeaponCategory()
	{
		return null;
	}

	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0xC5C8B8", Offset = "0xC5C8B8", VA = "0xC5C8B8")]
	public ZNWeaponTutorialPromptAsset GetWeaponTutorialPromptAsset()
	{
		return null;
	}

	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0xC5C8C0", Offset = "0xC5C8C0", VA = "0xC5C8C0")]
	public VideoClip GetWeaponTutorialVideoClip()
	{
		return null;
	}

	[Token(Token = "0x6000FAD")]
	[Address(RVA = "0xC5BA78", Offset = "0xC5BA78", VA = "0xC5BA78", Slot = "7")]
	public virtual int GetDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0xC5BBF8", Offset = "0xC5BBF8", VA = "0xC5BBF8", Slot = "8")]
	public virtual int GetCriticalDamage(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0xC5C8C8", Offset = "0xC5C8C8", VA = "0xC5C8C8")]
	public int GetStagger(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0xC5BD78", Offset = "0xC5BD78", VA = "0xC5BD78", Slot = "9")]
	public virtual double GetEnergyDamageMultiplier(int InTierIndex)
	{
		return default(double);
	}

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0xC5BEF8", Offset = "0xC5BEF8", VA = "0xC5BEF8", Slot = "10")]
	public virtual float GetUseEnergyCost(int InTierIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0xC5C074", Offset = "0xC5C074", VA = "0xC5C074", Slot = "11")]
	public virtual int GetCurrencyCost(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0xC5C9C8", Offset = "0xC5C9C8", VA = "0xC5C9C8", Slot = "12")]
	public virtual int GetAccumulatedCurrencyCost(int InTierIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0xC59E74", Offset = "0xC59E74", VA = "0xC59E74", Slot = "13")]
	protected virtual string UpdateStatsStringWithValues(string InString, int InTier)
	{
		return null;
	}

	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0xC58B2C", Offset = "0xC58B2C", VA = "0xC58B2C")]
	protected string ConvertStringWithIntegerFunction(string InString, string InTag, int InTier, Func<int, int> InFunction)
	{
		return null;
	}

	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0xC59FF8", Offset = "0xC59FF8", VA = "0xC59FF8")]
	protected string ConvertStringWithFloatFunction(string InString, string InTag, int InTier, Func<int, float> InFunction)
	{
		return null;
	}

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0xC5A138", Offset = "0xC5A138", VA = "0xC5A138")]
	protected string ConvertStringWithDoubleFunction(string InString, string InTag, int InTier, Func<int, double> InFunction)
	{
		return null;
	}

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0xC5CDE4", Offset = "0xC5CDE4", VA = "0xC5CDE4")]
	protected int GetTier(int InIndex, int InCurrentTier)
	{
		return default(int);
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0xC5CA28", Offset = "0xC5CA28", VA = "0xC5CA28")]
	protected List<string> CreateReplacementStringsFromTag(string InTag)
	{
		return null;
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0xC5A704", Offset = "0xC5A704", VA = "0xC5A704", Slot = "14")]
	public virtual bool GetStatValue(string InStatKey, int InTier, out float OutValue)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000241")]
public class ZNBuildObject : SAMonoBehaviour
{
	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This is the mesh we use for determining the size of the build object.")]
	[SerializeField]
	protected MeshRenderer PrimaryMesh;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Vector3 BuildHitPoint;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected GameObject ConnectedGameObject;

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0xC5CE1C", Offset = "0xC5CE1C", VA = "0xC5CE1C")]
	public void SetBuildHitPoint(Vector3 InBuildHitPoint)
	{
	}

	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0xC5CE28", Offset = "0xC5CE28", VA = "0xC5CE28")]
	public void SetConnectedGameObject(GameObject InConnectedGameObject)
	{
	}

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0xC5CE30", Offset = "0xC5CE30", VA = "0xC5CE30")]
	public MeshRenderer GetPrimaryMesh()
	{
		return null;
	}

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0xC5CE38", Offset = "0xC5CE38", VA = "0xC5CE38")]
	public Vector3 GetBuildHitPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0xC5CE44", Offset = "0xC5CE44", VA = "0xC5CE44")]
	public GameObject GetConnectedGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0xC5CE4C", Offset = "0xC5CE4C", VA = "0xC5CE4C")]
	public ZNBuildObject()
	{
	}
}
[Token(Token = "0x2000242")]
public class ZNPreviewBuild : MonoBehaviour
{
	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnEnabled OnEnabledDel;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnDisabled OnDisabledDel;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("A list of all game objects that will change materials for valid/invalid build preview states")]
	protected List<GameObject> GameObjectsThatChangeMaterials;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("A list of all preview build collision checkers that check for trigger overlaps to determine if this build can be placed.")]
	[SerializeField]
	protected List<ZNPreviewBuildCollisionChecker> PreviewBuildCollisionCheckers;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected List<Material> MaterialsThatChange;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool bValidBuild;

	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0xC5CEAC", Offset = "0xC5CEAC", VA = "0xC5CEAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0xC5D218", Offset = "0xC5D218", VA = "0xC5D218")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0xC5D3D8", Offset = "0xC5D3D8", VA = "0xC5D3D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0xC5D410", Offset = "0xC5D410", VA = "0xC5D410")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0xC5CEB0", Offset = "0xC5CEB0", VA = "0xC5CEB0")]
	protected void AssignMaterialsThatChange()
	{
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0xC5D224", Offset = "0xC5D224", VA = "0xC5D224")]
	public void SetValidBuild(bool bNewValid, bool bForceReevalute = false)
	{
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0xC5D448", Offset = "0xC5D448", VA = "0xC5D448")]
	public bool IsValidBuild()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0xC5D450", Offset = "0xC5D450", VA = "0xC5D450")]
	public bool HasOverlap(List<EZNSurfaceTypes> IgnoredSurfaceTypes, List<Collider> IgnoredColliders)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0xC5DB90", Offset = "0xC5DB90", VA = "0xC5DB90")]
	public ZNPreviewBuild()
	{
	}
}
[Token(Token = "0x2000243")]
[RequireComponent(typeof(Rigidbody))]
public class ZNPreviewBuildCollisionChecker : MonoBehaviour
{
	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected ZNPreviewBuild OwningPreviewBuild;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNSetupManager SetupManager;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected List<Collider> OverlappedColliders;

	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0xC5DB98", Offset = "0xC5DB98", VA = "0xC5DB98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0xC5DBE8", Offset = "0xC5DBE8", VA = "0xC5DBE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0xC5DE84", Offset = "0xC5DE84", VA = "0xC5DE84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0xC5E0D8", Offset = "0xC5E0D8", VA = "0xC5E0D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0xC5E1E8", Offset = "0xC5E1E8", VA = "0xC5E1E8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0xC5E2B0", Offset = "0xC5E2B0", VA = "0xC5E2B0")]
	public void PreviewBuildEnabled(GameObject EnabledGameObject)
	{
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0xC5E2B4", Offset = "0xC5E2B4", VA = "0xC5E2B4")]
	public void PreviewBuildDisabled(GameObject DisabledGameObject)
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0xC5E324", Offset = "0xC5E324", VA = "0xC5E324")]
	private void SetupPhaseResetted()
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0xC5D6FC", Offset = "0xC5D6FC", VA = "0xC5D6FC")]
	public bool HasOverlap(List<EZNSurfaceTypes> IgnoredSurfaceTypes, List<Collider> IgnoredColliders)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0xC5E420", Offset = "0xC5E420", VA = "0xC5E420")]
	public ZNPreviewBuildCollisionChecker()
	{
	}
}
[Token(Token = "0x2000244")]
public class ZNMagInsertZone : ZNGrabResponderBase
{
	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected BoxCollider InsertZoneCollider;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected ZNRangedWeapon OwningWeapon;

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0xC5E49C", Offset = "0xC5E49C", VA = "0xC5E49C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0xC5E524", Offset = "0xC5E524", VA = "0xC5E524", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0xC5E52C", Offset = "0xC5E52C", VA = "0xC5E52C", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0xC5E534", Offset = "0xC5E534", VA = "0xC5E534")]
	private void OnTriggerEnter(Collider Other)
	{
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0xC5E5F8", Offset = "0xC5E5F8", VA = "0xC5E5F8")]
	public void TryInsertMag(ZNMag InMag, bool bInRequireGrabbed)
	{
	}

	[Token(Token = "0x6000FD9")]
	[Address(RVA = "0xC5E6FC", Offset = "0xC5E6FC", VA = "0xC5E6FC")]
	public ZNRangedWeapon GetOwningWeapon()
	{
		return null;
	}

	[Token(Token = "0x6000FDA")]
	[Address(RVA = "0xC5E704", Offset = "0xC5E704", VA = "0xC5E704")]
	public ZNMagInsertZone()
	{
	}
}
[Token(Token = "0x2000245")]
public class ZNLever : MonoBehaviour
{
	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnLeverCompleted OnLeverCompletedDel;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("If the first checkpoint to be hit must be checkpoint one")]
	protected bool bMustStartAtCheckpointOne;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The list of checkpoints to complete the lever")]
	[SerializeField]
	protected List<ZNLeverCheckpoint> LeverCheckpoints;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool bLeverActive;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected int CurrentCheckpoint;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int LastHitCheckpointNumber;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected List<ZNLeverCheckpoint> HitLeverCheckpoints;

	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0xC5E70C", Offset = "0xC5E70C", VA = "0xC5E70C")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0xC5E7F0", Offset = "0xC5E7F0", VA = "0xC5E7F0")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0xC5EB0C", Offset = "0xC5EB0C", VA = "0xC5EB0C")]
	public void EnableLever()
	{
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0xC5EB18", Offset = "0xC5EB18", VA = "0xC5EB18")]
	public void DisableLever()
	{
	}

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0xC5EB20", Offset = "0xC5EB20", VA = "0xC5EB20")]
	public void ResetLever()
	{
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0xC5EBFC", Offset = "0xC5EBFC", VA = "0xC5EBFC")]
	public void CompleteLever()
	{
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0xC5E8B8", Offset = "0xC5E8B8", VA = "0xC5E8B8")]
	protected void HandleLeverCheckpointHit(ZNLeverCheckpoint InLeverCheckpoint)
	{
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0xC5ED18", Offset = "0xC5ED18", VA = "0xC5ED18")]
	public List<ZNLeverCheckpoint> GetLeverCheckpoints()
	{
		return null;
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0xC5ED20", Offset = "0xC5ED20", VA = "0xC5ED20")]
	public int GetNumLeverCheckpoints()
	{
		return default(int);
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0xC5ED68", Offset = "0xC5ED68", VA = "0xC5ED68")]
	public int GetNumHitLeverCheckpoints()
	{
		return default(int);
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0xC5EDB0", Offset = "0xC5EDB0", VA = "0xC5EDB0")]
	public int GetCurrentCheckpointNumber()
	{
		return default(int);
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0xC5EDB8", Offset = "0xC5EDB8", VA = "0xC5EDB8")]
	public int GetLastHitCheckpointNumber()
	{
		return default(int);
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0xC5EC30", Offset = "0xC5EC30", VA = "0xC5EC30")]
	protected int GetNextCheckpointNumber(bool bIncreasing = true)
	{
		return default(int);
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0xC5EDC0", Offset = "0xC5EDC0", VA = "0xC5EDC0")]
	public ZNLever()
	{
	}
}
[Token(Token = "0x2000246")]
public class ZNLeverCheckpoint : MonoBehaviour
{
	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnLeverCheckpointHit OnLeverCheckpointHitDel;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The checkpoint number. Levers must hit checkpoints in the correct order to complete.")]
	[SerializeField]
	protected int CheckpointNumber;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Header("Vibration")]
	[Tooltip("The time in seconds that the vibration effect on the grabbing hand lasts when getting a lever checkpoint successfully")]
	protected float GrabbingHandVibrationTime;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The amplitude/intensity value to use for the vibration effect on the grabbing hand when getting a lever checkpoint successfully--one being the strongest vibration")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float GrabbingHandVibrationAmplitude;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool bCheckpointActive;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNLever AssociatedLever;

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0xC5EBF0", Offset = "0xC5EBF0", VA = "0xC5EBF0")]
	public void EnableCheckpoint()
	{
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0xC5EE44", Offset = "0xC5EE44", VA = "0xC5EE44")]
	public void DisableCheckpoint()
	{
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0xC5ECAC", Offset = "0xC5ECAC", VA = "0xC5ECAC")]
	public void HitCheckpoint(bool bValidHit)
	{
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0xC5EE4C", Offset = "0xC5EE4C", VA = "0xC5EE4C")]
	protected void VibrateGrabbingHandController(float InVibrationAmplitude, float InVibrationTime)
	{
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0xC5EFC4", Offset = "0xC5EFC4", VA = "0xC5EFC4")]
	public int GetCheckpointNumber()
	{
		return default(int);
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0xC5EFCC", Offset = "0xC5EFCC", VA = "0xC5EFCC")]
	public ZNLever GetAssociatedLever()
	{
		return null;
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0xC5EFD4", Offset = "0xC5EFD4", VA = "0xC5EFD4")]
	public void SetAssociatedLever(ZNLever InLever)
	{
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0xC5EFDC", Offset = "0xC5EFDC", VA = "0xC5EFDC")]
	public bool IsCheckpointActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0xC5EFE4", Offset = "0xC5EFE4", VA = "0xC5EFE4")]
	public ZNLeverCheckpoint()
	{
	}
}
[Token(Token = "0x2000247")]
public class ZNCollisionProjectile : ZNDamageProjectile
{
	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Header("SFX")]
	[Tooltip("SFX that plays when we collide with an enemy")]
	[SerializeField]
	private Event CollideWithEnemySFX;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Tooltip("SFX that plays when we collide with the environment")]
	[SerializeField]
	private Event CollideWithEnvironmentSFX;

	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0xC5F008", Offset = "0xC5F008", VA = "0xC5F008", Slot = "21")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0xC5F0C0", Offset = "0xC5F0C0", VA = "0xC5F0C0", Slot = "33")]
	protected virtual void TryInflictDamage(IZNDamageable InDamageable)
	{
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0xC5F238", Offset = "0xC5F238", VA = "0xC5F238", Slot = "34")]
	protected virtual void CollideWithEnvironment(Collision collision)
	{
	}

	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0xC5F27C", Offset = "0xC5F27C", VA = "0xC5F27C")]
	public ZNCollisionProjectile()
	{
	}
}
[Token(Token = "0x2000248")]
public class ZNCryoGunProjectile : ZNCollisionProjectile
{
	[Token(Token = "0x2000249")]
	[CompilerGenerated]
	private sealed class <WaitThenCryoExplode>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCryoGunProjectile <>4__this;

		[Token(Token = "0x170000BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xC5FCE8", Offset = "0xC5FCE8", VA = "0xC5FCE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xC5FD30", Offset = "0xC5FD30", VA = "0xC5FD30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xC5F634", Offset = "0xC5F634", VA = "0xC5F634")]
		[DebuggerHidden]
		public <WaitThenCryoExplode>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xC5FC34", Offset = "0xC5FC34", VA = "0xC5FC34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xC5FC38", Offset = "0xC5FC38", VA = "0xC5FC38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xC5FCF0", Offset = "0xC5FCF0", VA = "0xC5FCF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("CryoGunProjectile")]
	[Tooltip("How long after impact until this projectile explodes. This must be a lower number than the lifetime of the projectile after collision.")]
	[SerializeField]
	protected float TimeUntilExplosionAfterCollision;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	[Tooltip("How big the radius of the explosion is")]
	protected float CryoExplosionRadius;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Tooltip("How much the falloff damage at the edge of the radius is multiplied by")]
	[SerializeField]
	protected double FalloffDamageAtEdgeMultiplier;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Tooltip("The initialization info for the VFX that plays when this projectile explodes")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo CryoExplosionVFXInitializationInfo;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Tooltip("The SFX that plays when the projectile explodes.")]
	[SerializeField]
	protected Event CryoExplosionSFX;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Tooltip("The mod asset to give to enemies hit by the explosion.")]
	[SerializeField]
	protected SAModAsset CryoModAsset;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Tooltip("The mod asset to give to enemies hit by the explosion (when the bonus property is active).")]
	[SerializeField]
	protected SAModAsset CryoModAssetBonus;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[Tooltip("The unique tag for the cryo gun mod.")]
	protected string CryoModUniqueTag;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[Tooltip("How long the cryo mod asset lasts.")]
	protected float CryoModDuration;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	protected int CryoExplosionMaxDamage;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected int CryoExplosionMinDamage;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	protected bool bCryoExplosionQueued;

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0xC5F2BC", Offset = "0xC5F2BC", VA = "0xC5F2BC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0xC5F580", Offset = "0xC5F580", VA = "0xC5F580", Slot = "21")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0xC5F628", Offset = "0xC5F628", VA = "0xC5F628")]
	public void InitializeCryoGunProjectileInfo(int InCryoExplosionMaxDamage, int InCryoExplosionMinDamage)
	{
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0xC5F5C0", Offset = "0xC5F5C0", VA = "0xC5F5C0")]
	[IteratorStateMachine(typeof(<WaitThenCryoExplode>d__15))]
	protected IEnumerator WaitThenCryoExplode()
	{
		return null;
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0xC5F65C", Offset = "0xC5F65C", VA = "0xC5F65C")]
	protected void CryoExplode()
	{
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0xC5FBA4", Offset = "0xC5FBA4", VA = "0xC5FBA4")]
	public ZNCryoGunProjectile()
	{
	}
}
[Token(Token = "0x200024A")]
public class ZNDamageProjectile : ZNProjectileBase
{
	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected bool bInflictedDamage;

	[Token(Token = "0x6001002")]
	[Address(RVA = "0xC5FD38", Offset = "0xC5FD38", VA = "0xC5FD38", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001003")]
	[Address(RVA = "0xC5F0BC", Offset = "0xC5F0BC", VA = "0xC5F0BC", Slot = "21")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001004")]
	[Address(RVA = "0xC5FFC0", Offset = "0xC5FFC0", VA = "0xC5FFC0", Slot = "32")]
	public virtual bool CanInflictDamage()
	{
		return default(bool);
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0xC5FFD0", Offset = "0xC5FFD0", VA = "0xC5FFD0", Slot = "31")]
	public override bool DoesCollisionAffectProjectile(Collision InCollision)
	{
		return default(bool);
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0xC5F29C", Offset = "0xC5F29C", VA = "0xC5F29C")]
	public ZNDamageProjectile()
	{
	}
}
[Token(Token = "0x200024B")]
public class ZNGrenadeProjectile : ZNProjectileBase
{
	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected float GrenadeRadius;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected double FalloffDamageAtEdgeMultiplier;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected float TimeToExplode;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	protected int MinDamage;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	[Tooltip("The initialization info for the VFX that plays when this grenade explodes")]
	[Header("VFX")]
	protected FSAPooledObjectInitializationInfo ExplodeVFXInitializationInfo;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("SFX")]
	[SerializeField]
	[Tooltip("The SFX that plays when this projectile is thrown and should loop until the explode SFX is played")]
	protected Event DetonateTimerLoopSFX;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Tooltip("The RPTC call for the detonate timer loop. Goes from 1 to 0 based on how much time is left before the explosion.")]
	[SerializeField]
	protected RTPC DetonateTimerLoopRTPC;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Tooltip("The SFX that plays when this grenade explodes")]
	[SerializeField]
	protected Event ExplodeSFX;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected bool bExplosionOnCountdown;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	protected float CurrentTimeToExplode;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	protected bool bExploded;

	[Token(Token = "0x6001007")]
	[Address(RVA = "0xC60054", Offset = "0xC60054", VA = "0xC60054", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001008")]
	[Address(RVA = "0xC600F4", Offset = "0xC600F4", VA = "0xC600F4", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001009")]
	[Address(RVA = "0xC60178", Offset = "0xC60178", VA = "0xC60178", Slot = "32")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0xC60250", Offset = "0xC60250", VA = "0xC60250", Slot = "21")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0xC60254", Offset = "0xC60254", VA = "0xC60254", Slot = "22")]
	public override void InitializeProjectileInfo(FZNProjectileInfo InProjectileInfo)
	{
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0xC60564", Offset = "0xC60564", VA = "0xC60564")]
	public void InitializeGrenadeProjectileInfo(FZNTieredGrenadeWeaponStats InTieredGrenadeWeaponStats)
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0xC6010C", Offset = "0xC6010C", VA = "0xC6010C")]
	protected void BeginExplosionCountdown()
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0xC60228", Offset = "0xC60228", VA = "0xC60228")]
	protected void FinishExplosionCountdown()
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0xC60668", Offset = "0xC60668", VA = "0xC60668", Slot = "33")]
	protected virtual void Explode()
	{
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0xC609C8", Offset = "0xC609C8", VA = "0xC609C8", Slot = "23")]
	protected override void HandleHealthDepleted()
	{
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0xC60410", Offset = "0xC60410", VA = "0xC60410")]
	public ZNGrenadeWeaponAsset GetOwningGrenadeWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0xC60B80", Offset = "0xC60B80", VA = "0xC60B80")]
	public ZNGrenadeProjectile()
	{
	}
}
[Token(Token = "0x200024C")]
public class ZNPipeBombProjectile : ZNGrenadeProjectile, IZNNavigable
{
	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	[Tooltip("The navigation weight to influence zombies going towards it")]
	protected FZNNavigationParameters NavigationParameters;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[SerializeField]
	protected LayerMask CollideLayers;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Tooltip("The mod asset we give to speed up enemies when we have the special property on the using character")]
	[SerializeField]
	protected SAModAsset EnemySpeedUpModAsset;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected ZNWaveManager WaveManager;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected bool bHitGround;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
	protected bool bAppliedEnemySpeedUp;

	[Token(Token = "0x6001013")]
	[Address(RVA = "0xC60BB8", Offset = "0xC60BB8", VA = "0xC60BB8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0xC60C3C", Offset = "0xC60C3C", VA = "0xC60C3C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0xC60CE4", Offset = "0xC60CE4", VA = "0xC60CE4", Slot = "32")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0xC60E24", Offset = "0xC60E24", VA = "0xC60E24", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001017")]
	[Address(RVA = "0xC61128", Offset = "0xC61128", VA = "0xC61128", Slot = "21")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001018")]
	[Address(RVA = "0xC611A8", Offset = "0xC611A8", VA = "0xC611A8", Slot = "22")]
	public override void InitializeProjectileInfo(FZNProjectileInfo InProjectileInfo)
	{
	}

	[Token(Token = "0x6001019")]
	[Address(RVA = "0xC6144C", Offset = "0xC6144C", VA = "0xC6144C", Slot = "33")]
	protected override void Explode()
	{
	}

	[Token(Token = "0x600101A")]
	[Address(RVA = "0xC612FC", Offset = "0xC612FC", VA = "0xC612FC")]
	protected void ApplyEnemySpeedUp()
	{
	}

	[Token(Token = "0x600101B")]
	[Address(RVA = "0xC60ED4", Offset = "0xC60ED4", VA = "0xC60ED4")]
	protected void RemoveEnemySpeedUp()
	{
	}

	[Token(Token = "0x600101C")]
	[Address(RVA = "0xC614D4", Offset = "0xC614D4", VA = "0xC614D4", Slot = "34")]
	public GameObject GetNavigableOwner()
	{
		return null;
	}

	[Token(Token = "0x600101D")]
	[Address(RVA = "0xC614DC", Offset = "0xC614DC", VA = "0xC614DC", Slot = "35")]
	public Vector3 GetDestinationPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600101E")]
	[Address(RVA = "0xC614FC", Offset = "0xC614FC", VA = "0xC614FC", Slot = "36")]
	public Vector3 GetPrimaryPosition(GameObject InNavigatingObject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600101F")]
	[Address(RVA = "0xC6151C", Offset = "0xC6151C", VA = "0xC6151C", Slot = "37")]
	public float GetNavigableWeight()
	{
		return default(float);
	}

	[Token(Token = "0x6001020")]
	[Address(RVA = "0xC61524", Offset = "0xC61524", VA = "0xC61524", Slot = "38")]
	public float GetStoppingDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6001021")]
	[Address(RVA = "0xC60C5C", Offset = "0xC60C5C", VA = "0xC60C5C", Slot = "39")]
	public void NotifyNavigableAdded()
	{
	}

	[Token(Token = "0x6001022")]
	[Address(RVA = "0xC60E4C", Offset = "0xC60E4C", VA = "0xC60E4C", Slot = "40")]
	public void NotifyNavigableRemoved()
	{
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0xC6152C", Offset = "0xC6152C", VA = "0xC6152C")]
	public ZNPipeBombProjectile()
	{
	}
}
[Token(Token = "0x200024D")]
[RequireComponent(typeof(ZNHealthComponent))]
public class ZNProjectileBase : SAMonoBehaviour, IZNDamageable
{
	[Token(Token = "0x200024E")]
	[CompilerGenerated]
	private sealed class <DestroyProjectileAfterDelay>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNProjectileBase <>4__this;

		[Token(Token = "0x170000C0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001045")]
			[Address(RVA = "0xC61DC8", Offset = "0xC61DC8", VA = "0xC61DC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001047")]
			[Address(RVA = "0xC61E10", Offset = "0xC61E10", VA = "0xC61E10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xC61AA4", Offset = "0xC61AA4", VA = "0xC61AA4")]
		[DebuggerHidden]
		public <DestroyProjectileAfterDelay>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xC61D14", Offset = "0xC61D14", VA = "0xC61D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xC61D18", Offset = "0xC61D18", VA = "0xC61D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xC61DD0", Offset = "0xC61DD0", VA = "0xC61DD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Rigidbody ProjectileRigidbody;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected ZNHealthComponent HealthComponent;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected FZNProjectileInfo ProjectileInfo;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected ZNWeaponBase OwningWeapon;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Header("Projectile Base")]
	[Tooltip("If the projectile should stick to the first target it hits")]
	protected bool bStickToHitTarget;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("How long the projectile will last for before being cleaned up after landing")]
	[SerializeField]
	protected float ProjectileInactiveLifetime;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("If the projectile uses angular velocity")]
	protected bool bUsesAngularVelocity;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[SerializeField]
	[Tooltip("If the projectile doesn't collide with its owner")]
	protected bool bIgnoreOwnerCollision;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	[SerializeField]
	[Tooltip("If the projectile doesn't collide with enemies at all")]
	protected bool bIgnoreAllEnemyCollision;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	[Tooltip("If the projectile doesn't collide with enemies' character capsule collision (NOTE: If All Enemy collision is checked, this option is irrelevant.)")]
	[SerializeField]
	protected bool bIgnoreEnemyCharacterCapsuleCollision;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Tooltip("If we set the layer to DISCARDED when colliding")]
	[SerializeField]
	protected bool bDiscardOnCollision;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	[Tooltip("If this projectile takes damage (if false, will ignore damage by all sources)")]
	[SerializeField]
	protected bool bTakesDamage;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("VFX")]
	[Tooltip("The initialization info for the VFX that plays when this projectile is destroyed by damage")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo DestroyedByDamageVFXInitializationInfo;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Tooltip("The game object for the projectile's trail VFX--should be attached as a child object")]
	protected GameObject TrailVFXGameObject;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("The SFX that plays when this projectile is spawned")]
	[Header("SFX")]
	protected Event InitialProjectileSFX;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Tooltip("The SFX that plays when this projectile is destroyed by damage")]
	protected Event DestroyedByDamageSFX;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected ZNGameModeBase GameModeRef;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected SAPoolManager PoolManager;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected int TeamNumber;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected bool bDestroyed;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	private bool bNotifiedSuccessfulActivation;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected ZNCharacterBase ItemDestroyer;

	[Token(Token = "0x6001024")]
	[Address(RVA = "0xC5F35C", Offset = "0xC5F35C", VA = "0xC5F35C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0xC5FD3C", Offset = "0xC5FD3C", VA = "0xC5FD3C", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0xC5FDF4", Offset = "0xC5FDF4", VA = "0xC5FDF4", Slot = "21")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0xC6101C", Offset = "0xC6101C", VA = "0xC6101C", Slot = "8")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0xC60358", Offset = "0xC60358", VA = "0xC60358", Slot = "22")]
	public virtual void InitializeProjectileInfo(FZNProjectileInfo InProjectileInfo)
	{
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0xC619FC", Offset = "0xC619FC", VA = "0xC619FC")]
	public void InitializeRigidbody(Vector3 InLinearVelocity, Vector3 InAngularVelocity)
	{
	}

	[Token(Token = "0x600102A")]
	[Address(RVA = "0xC618E4", Offset = "0xC618E4", VA = "0xC618E4")]
	protected void IgnoreCollisionWithOwner()
	{
	}

	[Token(Token = "0x600102B")]
	[Address(RVA = "0xC615A4", Offset = "0xC615A4", VA = "0xC615A4")]
	protected void IgnoreCollisionWithAllEnemies(bool bOnlyCharacterColliders)
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0xC6187C", Offset = "0xC6187C", VA = "0xC6187C")]
	[IteratorStateMachine(typeof(<DestroyProjectileAfterDelay>d__33))]
	protected IEnumerator DestroyProjectileAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0xC5FB30", Offset = "0xC5FB30", VA = "0xC5FB30")]
	protected void DestroyProjectile()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0xC609EC", Offset = "0xC609EC", VA = "0xC609EC", Slot = "23")]
	protected virtual void HandleHealthDepleted()
	{
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0xC5FA9C", Offset = "0xC5FA9C", VA = "0xC5FA9C")]
	protected void NotifySuccessfulActivation()
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0xC61ACC", Offset = "0xC61ACC", VA = "0xC61ACC")]
	protected void HealthDepleted(IZNDamageable DiedCharacter)
	{
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0xC61AF0", Offset = "0xC61AF0", VA = "0xC61AF0", Slot = "24")]
	public virtual void TakeDamage(int InDamage, int InStagger, EZNBodyParts InBodyPart, ZNCharacterBase InDamageInstigator, out FZNTakeDamageResults OutTakeDamageResults)
	{
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0xC61BA8", Offset = "0xC61BA8", VA = "0xC61BA8", Slot = "25")]
	public virtual GameObject GetDamageableOwner()
	{
		return null;
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0xC61BB0", Offset = "0xC61BB0", VA = "0xC61BB0", Slot = "26")]
	public virtual IZNDamageable GetRealDamageable()
	{
		return null;
	}

	[Token(Token = "0x6001034")]
	[Address(RVA = "0xC61BB4", Offset = "0xC61BB4", VA = "0xC61BB4", Slot = "12")]
	public bool CanTakeDamage()
	{
		return default(bool);
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0xC61BBC", Offset = "0xC61BBC", VA = "0xC61BBC", Slot = "27")]
	public virtual bool IsCriticalHit(EZNBodyParts InBodyPart)
	{
		return default(bool);
	}

	[Token(Token = "0x6001036")]
	[Address(RVA = "0xC61BC4", Offset = "0xC61BC4", VA = "0xC61BC4", Slot = "28")]
	public virtual float GetDamageMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0xC61BCC", Offset = "0xC61BCC", VA = "0xC61BCC", Slot = "29")]
	public virtual float GetStaggerMultiplier(EZNBodyParts InBodyPart)
	{
		return default(float);
	}

	[Token(Token = "0x6001038")]
	[Address(RVA = "0xC61BD4", Offset = "0xC61BD4", VA = "0xC61BD4", Slot = "30")]
	public virtual int GetMaxReceivableDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6001039")]
	[Address(RVA = "0xC61BDC", Offset = "0xC61BDC", VA = "0xC61BDC", Slot = "17")]
	public void AssignTeamNumber(int InTeamNumber)
	{
	}

	[Token(Token = "0x600103A")]
	[Address(RVA = "0xC61BE4", Offset = "0xC61BE4", VA = "0xC61BE4", Slot = "18")]
	public int GetTeamNumber()
	{
		return default(int);
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0xC61BEC", Offset = "0xC61BEC", VA = "0xC61BEC", Slot = "19")]
	public void NotifyDamageableAdded()
	{
	}

	[Token(Token = "0x600103C")]
	[Address(RVA = "0xC61C74", Offset = "0xC61C74", VA = "0xC61C74", Slot = "20")]
	public void NotifyDamageableRemoved()
	{
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0xC61CFC", Offset = "0xC61CFC", VA = "0xC61CFC")]
	public ZNWeaponBase GetOwningWeapon()
	{
		return null;
	}

	[Token(Token = "0x600103E")]
	[Address(RVA = "0xC60B04", Offset = "0xC60B04", VA = "0xC60B04")]
	public ZNQuantityWeapon GetOwningQuantityWeapon()
	{
		return null;
	}

	[Token(Token = "0x600103F")]
	[Address(RVA = "0xC61D04", Offset = "0xC61D04", VA = "0xC61D04")]
	public ZNCharacterBase GetOwningCharacter()
	{
		return null;
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0xC61D0C", Offset = "0xC61D0C", VA = "0xC61D0C", Slot = "31")]
	public virtual bool DoesCollisionAffectProjectile(Collision InCollision)
	{
		return default(bool);
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0xC60034", Offset = "0xC60034", VA = "0xC60034")]
	public ZNProjectileBase()
	{
	}
}
[Token(Token = "0x200024F")]
public class ZNThrowingKnifeProjectile : ZNCollisionProjectile
{
	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	[Tooltip("The mod that we give to the enemy that we hit when we have the ThrowingKnifeSlowdown property")]
	[Header("Throwing Knife")]
	protected SAModAsset SlowdownMod;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Tooltip("The special string we give to the mod that lets us ensure we don't get duplicate instances of the same mod")]
	[SerializeField]
	protected string SlowdownModUniqueTag;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Tooltip("How long the slowdown mod lasts on the enemy")]
	[SerializeField]
	protected float SlowdownModDuration;

	[Token(Token = "0x6001048")]
	[Address(RVA = "0xC61E18", Offset = "0xC61E18", VA = "0xC61E18", Slot = "33")]
	protected override void TryInflictDamage(IZNDamageable InDamageable)
	{
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0xC6200C", Offset = "0xC6200C", VA = "0xC6200C")]
	public ZNThrowingKnifeProjectile()
	{
	}
}
[Token(Token = "0x2000250")]
public class ZNBroom : ZNMeleeWeapon
{
	[Token(Token = "0x2000251")]
	[CompilerGenerated]
	private sealed class <DisableHayAfterOneSec>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNBroom <>4__this;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001053")]
			[Address(RVA = "0xC62284", Offset = "0xC62284", VA = "0xC62284", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xC622CC", Offset = "0xC622CC", VA = "0xC622CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xC62180", Offset = "0xC62180", VA = "0xC62180")]
		[DebuggerHidden]
		public <DisableHayAfterOneSec>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xC62214", Offset = "0xC62214", VA = "0xC62214", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xC62218", Offset = "0xC62218", VA = "0xC62218", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xC6228C", Offset = "0xC6228C", VA = "0xC6228C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	[SerializeField]
	[Tooltip("The game object for the hay particles")]
	[Header("Broom")]
	private GameObject HayParticlesObject;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	private WaitForSeconds DisableHayYield;

	[Token(Token = "0x600104A")]
	[Address(RVA = "0xC6207C", Offset = "0xC6207C", VA = "0xC6207C", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600104B")]
	[Address(RVA = "0xC62084", Offset = "0xC62084", VA = "0xC62084", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0xC620B4", Offset = "0xC620B4", VA = "0xC620B4", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600104D")]
	[Address(RVA = "0xC620BC", Offset = "0xC620BC", VA = "0xC620BC", Slot = "52")]
	protected override void StartSwing()
	{
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0xC62118", Offset = "0xC62118", VA = "0xC62118")]
	[IteratorStateMachine(typeof(<DisableHayAfterOneSec>d__6))]
	private IEnumerator DisableHayAfterOneSec()
	{
		return null;
	}

	[Token(Token = "0x600104F")]
	[Address(RVA = "0xC621A8", Offset = "0xC621A8", VA = "0xC621A8")]
	public ZNBroom()
	{
	}
}
[Token(Token = "0x2000252")]
public class ZNCamera : ZNCooldownWeapon
{
	[Token(Token = "0x2000253")]
	[CompilerGenerated]
	private sealed class <FlashBuildUp>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCamera <>4__this;

		[Token(Token = "0x170000C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001062")]
			[Address(RVA = "0xC62A98", Offset = "0xC62A98", VA = "0xC62A98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0xC62AE0", Offset = "0xC62AE0", VA = "0xC62AE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xC628A0", Offset = "0xC628A0", VA = "0xC628A0")]
		[DebuggerHidden]
		public <FlashBuildUp>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xC62A38", Offset = "0xC62A38", VA = "0xC62A38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xC62A3C", Offset = "0xC62A3C", VA = "0xC62A3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xC62AA0", Offset = "0xC62AA0", VA = "0xC62AA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
	[Tooltip("The duration of the flash build up")]
	[Header("Camera")]
	[SerializeField]
	private float FlashBuildUpSeconds;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[Tooltip("The transform for where to do the radial damage")]
	[SerializeField]
	private Transform DamageOriginTransform;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	[SerializeField]
	[Tooltip("The radius for the radial damage")]
	private float DamageRadius;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	[Tooltip("The flash SFX")]
	[SerializeField]
	private Event FlashSFX;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	private WaitForSeconds FlashBuildUpYield;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	protected float DamageRadiusMultiplier;

	[Token(Token = "0x6001056")]
	[Address(RVA = "0xC622D4", Offset = "0xC622D4", VA = "0xC622D4", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001057")]
	[Address(RVA = "0xC622DC", Offset = "0xC622DC", VA = "0xC622DC", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0xC62358", Offset = "0xC62358", VA = "0xC62358", Slot = "9")]
	protected override void PostStart()
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0xC62540", Offset = "0xC62540", VA = "0xC62540", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0xC62548", Offset = "0xC62548", VA = "0xC62548", Slot = "53")]
	protected override void UseWeapon()
	{
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0xC625DC", Offset = "0xC625DC", VA = "0xC625DC")]
	private void FlashEnemiesInRange()
	{
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0xC62574", Offset = "0xC62574", VA = "0xC62574")]
	[IteratorStateMachine(typeof(<FlashBuildUp>d__12))]
	private IEnumerator FlashBuildUp()
	{
		return null;
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0xC628C8", Offset = "0xC628C8", VA = "0xC628C8", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0xC62A18", Offset = "0xC62A18", VA = "0xC62A18")]
	public ZNCamera()
	{
	}
}
[Token(Token = "0x2000254")]
public class ZNCryoGun : ZNProjectileWeapon
{
	[Token(Token = "0x2000255")]
	[CompilerGenerated]
	private sealed class <PressingTriggerEnum>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCryoGun <>4__this;

		[Token(Token = "0x170000C6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0xC63760", Offset = "0xC63760", VA = "0xC63760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0xC637A8", Offset = "0xC637A8", VA = "0xC637A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xC63004", Offset = "0xC63004", VA = "0xC63004")]
		[DebuggerHidden]
		public <PressingTriggerEnum>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xC636AC", Offset = "0xC636AC", VA = "0xC636AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xC636B0", Offset = "0xC636B0", VA = "0xC636B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xC63768", Offset = "0xC63768", VA = "0xC63768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A46")]
	protected const string FAILURE_TriggerBeingHeld = "TriggerBeingHeld";

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	protected ZNCryoGunWeaponAsset AssociatedCryoGunWeaponAsset;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[Header("Cryo Gun")]
	[Tooltip("How long it takes to charge up to power level 2")]
	[SerializeField]
	protected float PowerLevelTwoChargeTime;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
	[Tooltip("How long it takes to charge up to power level 3")]
	[SerializeField]
	protected float PowerLevelThreeChargeTime;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	[SerializeField]
	[Range(0.1f, 1f)]
	[Tooltip("The highest amplitude value for the controller vibration that can be reached when holding the trigger")]
	protected float MaxVibrationAmplitude;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
	[Tooltip("The amount to increase the vibration amplitude value by every quarter of a second that the trigger is held")]
	[SerializeField]
	[Range(0f, 1f)]
	protected float VibrationAmplitudeIncreaseAmount;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	[SerializeField]
	[Tooltip("The highest percentage that the enemy's speed can be reduced by--1.00 being 100%")]
	[Range(0f, 1f)]
	protected float MaxSlowDownReductionPercentage;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
	[Tooltip("The SFX to play when charging the gun.")]
	[SerializeField]
	protected Event ChargingSFX;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	[Tooltip("The parent object for the charging projectile VFX objects")]
	[SerializeField]
	protected GameObject ChargingProjectileVFX;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
	[Tooltip("The prefab for the projectile that will be fired from the weapon, when fired at power level 1")]
	[SerializeField]
	protected GameObject PF_PowerOneFireableProjectile;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
	[Tooltip("The prefab for the projectile that will be fired from the weapon, when fired at power level 2")]
	[SerializeField]
	protected GameObject PF_PowerTwoFireableProjectile;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
	[Tooltip("The prefab for the projectile that will be fired from the weapon, when fired at power level 3")]
	[SerializeField]
	protected GameObject PF_PowerThreeFireableProjectile;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	[Tooltip("The SFX that plays when shooting at level 1")]
	[SerializeField]
	protected Event FireLevelOneSFX;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
	[Tooltip("The SFX that plays when shooting at level 2")]
	[SerializeField]
	protected Event FireLevelTwoSFX;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
	[Tooltip("The SFX that plays when shooting at level 3")]
	[SerializeField]
	protected Event FireLevelThreeSFX;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
	[Tooltip("The fire VFX initialization info")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo PowerOneFireVFXInitializationInfo;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
	[SerializeField]
	[Tooltip("The fire VFX initialization info")]
	protected FSAPooledObjectInitializationInfo PowerTwoFireVFXInitializationInfo;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
	[Tooltip("The fire VFX initialization info")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo PowerThreeFireVFXInitializationInfo;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
	private bool bIsPressingTrigger;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
	private WaitForSeconds PressingTriggerYield;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
	private float PressingTriggerYieldSeconds;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x494")]
	private float TriggerPressSeconds;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
	private Event FireSFXToUse;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
	private float CurrentVibrationAmplitude;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
	protected FSAPooledObjectInitializationInfo FireVFXInitializationInfoToUse;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
	protected int CryoExplosionMaxDamageToUse;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B4")]
	protected int CryoExplosionMinDamageToUse;

	[Token(Token = "0x6001065")]
	[Address(RVA = "0xC62AE8", Offset = "0xC62AE8", VA = "0xC62AE8", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0xC62BD4", Offset = "0xC62BD4", VA = "0xC62BD4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0xC62CA8", Offset = "0xC62CA8", VA = "0xC62CA8", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001068")]
	[Address(RVA = "0xC62CF4", Offset = "0xC62CF4", VA = "0xC62CF4", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0xC62DA4", Offset = "0xC62DA4", VA = "0xC62DA4")]
	private void SetValuesBasedOnPowerUsed()
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0xC62F9C", Offset = "0xC62F9C", VA = "0xC62F9C")]
	[IteratorStateMachine(typeof(<PressingTriggerEnum>d__32))]
	private IEnumerator PressingTriggerEnum()
	{
		return null;
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0xC6302C", Offset = "0xC6302C", VA = "0xC6302C", Slot = "14")]
	public override void PressTrigger()
	{
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0xC6313C", Offset = "0xC6313C", VA = "0xC6313C", Slot = "15")]
	public override void ReleaseTrigger()
	{
	}

	[Token(Token = "0x600106D")]
	[Address(RVA = "0xC63220", Offset = "0xC63220", VA = "0xC63220", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x600106E")]
	[Address(RVA = "0xC632E8", Offset = "0xC632E8", VA = "0xC632E8", Slot = "63")]
	protected override ZNProjectileBase FireProjectile()
	{
		return null;
	}

	[Token(Token = "0x600106F")]
	[Address(RVA = "0xC633C8", Offset = "0xC633C8", VA = "0xC633C8", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x6001070")]
	[Address(RVA = "0xC63454", Offset = "0xC63454", VA = "0xC63454", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x6001071")]
	[Address(RVA = "0xC635C4", Offset = "0xC635C4", VA = "0xC635C4", Slot = "66")]
	protected virtual bool CanProgressOneHandedReload()
	{
		return default(bool);
	}

	[Token(Token = "0x6001072")]
	[Address(RVA = "0xC63604", Offset = "0xC63604", VA = "0xC63604", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001073")]
	[Address(RVA = "0xC63674", Offset = "0xC63674", VA = "0xC63674")]
	public float GetCurrentProjectileRadius()
	{
		return default(float);
	}

	[Token(Token = "0x6001074")]
	[Address(RVA = "0xC6367C", Offset = "0xC6367C", VA = "0xC6367C")]
	public ZNCryoGun()
	{
	}
}
[Token(Token = "0x2000256")]
public class ZNCryoGunMag : ZNMag
{
	[Token(Token = "0x2000257")]
	[CompilerGenerated]
	private sealed class <LowerIceLiquidEnum>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCryoGunMag <>4__this;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float InNewZScale;

		[Token(Token = "0x170000C8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0xC63DA8", Offset = "0xC63DA8", VA = "0xC63DA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0xC63DF0", Offset = "0xC63DF0", VA = "0xC63DF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xC63BD8", Offset = "0xC63BD8", VA = "0xC63BD8")]
		[DebuggerHidden]
		public <LowerIceLiquidEnum>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xC63C58", Offset = "0xC63C58", VA = "0xC63C58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xC63C5C", Offset = "0xC63C5C", VA = "0xC63C5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xC63DB0", Offset = "0xC63DB0", VA = "0xC63DB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[Header("Cryo Gun Mag")]
	[SerializeField]
	[Tooltip("The prefab of the ice liquid VFX that will lower when ammo is spent--should be a child object of the mag")]
	protected GameObject IceLiquidVFX;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	[Tooltip("The value to decrease from the ice liquid Z scale--this will be decreased continuously until it matches the ammo left, simulating an animation")]
	protected float LowerIceSectionAmount;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	[SerializeField]
	[Tooltip("The amount of seconds to wait to lower the next section of the ice liquid--the lower this value is, the smoother the 'animation' but the higher the performance")]
	protected float LowerIceYieldSeconds;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	protected float CurrentLiquidZScale;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	protected WaitForSeconds LowerIceLiquidYield;

	[Token(Token = "0x600107B")]
	[Address(RVA = "0xC637B0", Offset = "0xC637B0", VA = "0xC637B0", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0xC6382C", Offset = "0xC6382C", VA = "0xC6382C", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0xC6393C", Offset = "0xC6393C", VA = "0xC6393C", Slot = "48")]
	public override void Insert(ZNGunWeapon InInsertWeapon)
	{
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0xC63A54", Offset = "0xC63A54", VA = "0xC63A54", Slot = "49")]
	public override void Eject()
	{
	}

	[Token(Token = "0x600107F")]
	[Address(RVA = "0xC63B60", Offset = "0xC63B60", VA = "0xC63B60")]
	[IteratorStateMachine(typeof(<LowerIceLiquidEnum>d__9))]
	protected IEnumerator LowerIceLiquidEnum(float InNewZScale)
	{
		return null;
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0xC63C00", Offset = "0xC63C00", VA = "0xC63C00")]
	protected void AmmoUpdated(ZNGunWeapon InUpdatedWeapon, int InNewAmmo, int InMaxAmmo)
	{
	}

	[Token(Token = "0x6001081")]
	[Address(RVA = "0xC63C3C", Offset = "0xC63C3C", VA = "0xC63C3C")]
	public ZNCryoGunMag()
	{
	}
}
[Token(Token = "0x2000258")]
public class ZNLaserRifle : ZNPersistentTraceWeapon
{
	[Token(Token = "0x2000259")]
	[CompilerGenerated]
	private sealed class <UpdateFireSFXAfterOneFrame>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNLaserRifle <>4__this;

		[Token(Token = "0x170000CA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0xC64754", Offset = "0xC64754", VA = "0xC64754", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0xC6479C", Offset = "0xC6479C", VA = "0xC6479C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xC64628", Offset = "0xC64628", VA = "0xC64628")]
		[DebuggerHidden]
		public <UpdateFireSFXAfterOneFrame>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xC64658", Offset = "0xC64658", VA = "0xC64658", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xC6465C", Offset = "0xC6465C", VA = "0xC6465C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xC6475C", Offset = "0xC6475C", VA = "0xC6475C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A6D")]
	protected const string ANIM_PowerLevel01 = "PowerLevel01";

	[Token(Token = "0x4000A6E")]
	protected const string ANIM_PowerLevel02 = "PowerLevel02";

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
	[SerializeField]
	[Tooltip("The RTPC number to update when the laser changes charge/power level--0 being level one")]
	[Header("LaserRifle")]
	protected RTPC ChargeLevelRTPC;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
	[Tooltip("The SFX played when initially firing")]
	[SerializeField]
	protected Event InitialFireSFX;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
	[SerializeField]
	[Tooltip("The event for fire level 0")]
	protected Event FireLevel0SFX;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	[Tooltip("The event for fire level 1")]
	[SerializeField]
	protected Event FireLevel1SFX;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
	[Tooltip("The event for fire level 2")]
	[SerializeField]
	protected Event FireLevel2SFX;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
	[Tooltip("The event for when the beam levels up")]
	[SerializeField]
	protected Event BeamLevelUpSFX;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
	[SerializeField]
	[Tooltip("The event for when the beam levels down")]
	protected Event BeamLevelDownSFX;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
	[Tooltip("The event we play when running out of ammo")]
	[SerializeField]
	protected Event RanOutOfAmmoSFX;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
	[Tooltip("The event for stopping all beams")]
	[SerializeField]
	protected Event StopAllBeamsSFX;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
	[Tooltip("The event for when we end firing")]
	[SerializeField]
	protected Event EndFiringSFX;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
	[Tooltip("The RTPC number to update if the laser is hitting an enemy--0 being not hitting an enemy")]
	[SerializeField]
	protected RTPC IsHittingEnemyRTPC;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
	[Tooltip("The standard laser beam VFX that plays when the gun is fired")]
	[SerializeField]
	protected ZNLaserRifleBeamVFX LaserBeamVFX;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
	[Tooltip("The VFX that plays when the laser beam powers up")]
	[SerializeField]
	protected ParticleSystem LaserBeamPowerUpFlashVFX;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
	private bool bBatteryDepleted;

	[Token(Token = "0x6001088")]
	[Address(RVA = "0xC63DF8", Offset = "0xC63DF8", VA = "0xC63DF8", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001089")]
	[Address(RVA = "0xC63E40", Offset = "0xC63E40", VA = "0xC63E40", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600108A")]
	[Address(RVA = "0xC63ED0", Offset = "0xC63ED0", VA = "0xC63ED0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600108B")]
	[Address(RVA = "0xC640D4", Offset = "0xC640D4", VA = "0xC640D4", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x600108C")]
	[Address(RVA = "0xC64170", Offset = "0xC64170", VA = "0xC64170", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600108D")]
	[Address(RVA = "0xC64228", Offset = "0xC64228", VA = "0xC64228", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x600108E")]
	[Address(RVA = "0xC6435C", Offset = "0xC6435C", VA = "0xC6435C", Slot = "54")]
	protected override void StopFireHoldWeapon()
	{
	}

	[Token(Token = "0x600108F")]
	[Address(RVA = "0xC643A8", Offset = "0xC643A8", VA = "0xC643A8", Slot = "57")]
	public override void ReloadWeapon()
	{
	}

	[Token(Token = "0x6001090")]
	[Address(RVA = "0xC643C4", Offset = "0xC643C4", VA = "0xC643C4", Slot = "66")]
	protected override void ReevaluatePowerLevel()
	{
	}

	[Token(Token = "0x6001091")]
	[Address(RVA = "0xC6449C", Offset = "0xC6449C", VA = "0xC6449C")]
	protected void UpdateDamagePowerLevelForAnimator()
	{
	}

	[Token(Token = "0x6001092")]
	[Address(RVA = "0xC642E0", Offset = "0xC642E0", VA = "0xC642E0")]
	protected void UpdateFireSFX()
	{
	}

	[Token(Token = "0x6001093")]
	[Address(RVA = "0xC645C0", Offset = "0xC645C0", VA = "0xC645C0")]
	[IteratorStateMachine(typeof(<UpdateFireSFXAfterOneFrame>d__27))]
	protected IEnumerator UpdateFireSFXAfterOneFrame()
	{
		return null;
	}

	[Token(Token = "0x6001094")]
	[Address(RVA = "0xC64330", Offset = "0xC64330", VA = "0xC64330")]
	protected void TurnOnBeamVFX()
	{
	}

	[Token(Token = "0x6001095")]
	[Address(RVA = "0xC63E14", Offset = "0xC63E14", VA = "0xC63E14")]
	protected void TurnOffBeamVFX()
	{
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0xC63EFC", Offset = "0xC63EFC", VA = "0xC63EFC")]
	protected void UpdateBeamVFX()
	{
	}

	[Token(Token = "0x6001097")]
	[Address(RVA = "0xC64650", Offset = "0xC64650", VA = "0xC64650")]
	public ZNLaserRifle()
	{
	}
}
[Token(Token = "0x200025A")]
public class ZNMachineGun : ZNSingleTraceWeapon
{
	[Token(Token = "0x200025B")]
	[CompilerGenerated]
	private sealed class <ReenableGrabbingAfterDelay>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMachineGun <>4__this;

		[Token(Token = "0x170000CC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010B0")]
			[Address(RVA = "0xC656E0", Offset = "0xC656E0", VA = "0xC656E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xC65728", Offset = "0xC65728", VA = "0xC65728", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xC64DA4", Offset = "0xC64DA4", VA = "0xC64DA4")]
		[DebuggerHidden]
		public <ReenableGrabbingAfterDelay>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xC655E8", Offset = "0xC655E8", VA = "0xC655E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xC655EC", Offset = "0xC655EC", VA = "0xC655EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xC656E8", Offset = "0xC656E8", VA = "0xC656E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[Header("Machine Gun")]
	[Tooltip("Lever to activate after inserting the mag, used for reloading")]
	[SerializeField]
	protected ZNLever ReloadLever;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[Tooltip("The grab cube for the reload lever")]
	[SerializeField]
	protected ConstrainedOVRGrabbable ReloadLeverGrabCube;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[SerializeField]
	[Tooltip("The rigidbody for the reload lever")]
	protected Rigidbody ReloadLeverRigidbody;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	[SerializeField]
	[Tooltip("The target transform for reloading")]
	protected Transform ReloadTargetTransform1;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[SerializeField]
	[Tooltip("The target transform for reloading")]
	protected Transform ReloadTargetTransform2;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	protected bool bMidReload;

	[Token(Token = "0x600109E")]
	[Address(RVA = "0xC647A4", Offset = "0xC647A4", VA = "0xC647A4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0xC64A48", Offset = "0xC64A48", VA = "0xC64A48", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010A0")]
	[Address(RVA = "0xC64C58", Offset = "0xC64C58", VA = "0xC64C58", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0xC64D3C", Offset = "0xC64D3C", VA = "0xC64D3C")]
	[IteratorStateMachine(typeof(<ReenableGrabbingAfterDelay>d__9))]
	private IEnumerator ReenableGrabbingAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0xC64DCC", Offset = "0xC64DCC", VA = "0xC64DCC", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60010A3")]
	[Address(RVA = "0xC64EE8", Offset = "0xC64EE8", VA = "0xC64EE8", Slot = "55")]
	public override void EjectMag()
	{
	}

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0xC64FB4", Offset = "0xC64FB4", VA = "0xC64FB4", Slot = "56")]
	public override void InsertMag(ZNMag NewMagObject)
	{
	}

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0xC650F4", Offset = "0xC650F4", VA = "0xC650F4", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0xC65180", Offset = "0xC65180", VA = "0xC65180", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0xC6533C", Offset = "0xC6533C", VA = "0xC6533C")]
	protected bool CanProgressOneHandedReload()
	{
		return default(bool);
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0xC653F0", Offset = "0xC653F0", VA = "0xC653F0")]
	protected void LeverCompleted(ZNLever CompletedLever)
	{
	}

	[Token(Token = "0x60010A9")]
	[Address(RVA = "0xC654E4", Offset = "0xC654E4", VA = "0xC654E4")]
	protected void LeverCheckpointHit(ZNLeverCheckpoint HitLeverCheckpoint, bool bValidHit)
	{
	}

	[Token(Token = "0x60010AA")]
	[Address(RVA = "0xC654E8", Offset = "0xC654E8", VA = "0xC654E8", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0xC65564", Offset = "0xC65564", VA = "0xC65564", Slot = "59")]
	public override bool CanEjectMag(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010AC")]
	[Address(RVA = "0xC655E0", Offset = "0xC655E0", VA = "0xC655E0")]
	public ZNMachineGun()
	{
	}
}
[Token(Token = "0x200025C")]
public class ZNPeashooter : ZNSingleTraceWeapon
{
	[Token(Token = "0x200025D")]
	[CompilerGenerated]
	private sealed class <ReenableGrabbingAfterDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPeashooter <>4__this;

		[Token(Token = "0x170000CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0xC66A20", Offset = "0xC66A20", VA = "0xC66A20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0xC66A68", Offset = "0xC66A68", VA = "0xC66A68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xC65CFC", Offset = "0xC65CFC", VA = "0xC65CFC")]
		[DebuggerHidden]
		public <ReenableGrabbingAfterDelay>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xC66928", Offset = "0xC66928", VA = "0xC66928", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xC6692C", Offset = "0xC6692C", VA = "0xC6692C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xC66A28", Offset = "0xC66A28", VA = "0xC66A28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025E")]
	[CompilerGenerated]
	private sealed class <WaitToFinishAutoReload>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPeashooter <>4__this;

		[Token(Token = "0x170000D0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xC66B18", Offset = "0xC66B18", VA = "0xC66B18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0xC66B60", Offset = "0xC66B60", VA = "0xC66B60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xC662A8", Offset = "0xC662A8", VA = "0xC662A8")]
		[DebuggerHidden]
		public <WaitToFinishAutoReload>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xC66A70", Offset = "0xC66A70", VA = "0xC66A70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xC66A74", Offset = "0xC66A74", VA = "0xC66A74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xC66B20", Offset = "0xC66B20", VA = "0xC66B20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[Header("Peashooter")]
	[Tooltip("Lever to activate after inserting the mag, used for reloading")]
	[SerializeField]
	protected ZNLever ReloadLever;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[SerializeField]
	[Tooltip("The grab cube for the reload lever")]
	protected ConstrainedOVRGrabbable ReloadLeverGrabCube;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[SerializeField]
	[Tooltip("The target transform for reloading")]
	protected Transform ReloadTargetTransform1;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	[SerializeField]
	[Tooltip("The target transform for reloading")]
	protected Transform ReloadTargetTransform2;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[Tooltip("The SFX that plays when cocking the chamber back")]
	[SerializeField]
	protected Event ChamberBackSFX;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	protected bool bMidReload;

	[Token(Token = "0x60010B3")]
	[Address(RVA = "0xC65730", Offset = "0xC65730", VA = "0xC65730", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60010B4")]
	[Address(RVA = "0xC6599C", Offset = "0xC6599C", VA = "0xC6599C", Slot = "9")]
	protected override void PostStart()
	{
	}

	[Token(Token = "0x60010B5")]
	[Address(RVA = "0xC659D4", Offset = "0xC659D4", VA = "0xC659D4", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010B6")]
	[Address(RVA = "0xC65BE4", Offset = "0xC65BE4", VA = "0xC65BE4", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60010B7")]
	[Address(RVA = "0xC65C94", Offset = "0xC65C94", VA = "0xC65C94")]
	[IteratorStateMachine(typeof(<ReenableGrabbingAfterDelay>d__10))]
	private IEnumerator ReenableGrabbingAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60010B8")]
	[Address(RVA = "0xC65D24", Offset = "0xC65D24", VA = "0xC65D24", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60010B9")]
	[Address(RVA = "0xC65DE8", Offset = "0xC65DE8", VA = "0xC65DE8", Slot = "56")]
	public override void InsertMag(ZNMag NewMagObject)
	{
	}

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0xC65F44", Offset = "0xC65F44", VA = "0xC65F44", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x60010BB")]
	[Address(RVA = "0xC65FD0", Offset = "0xC65FD0", VA = "0xC65FD0", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0xC6618C", Offset = "0xC6618C", VA = "0xC6618C")]
	protected bool CanProgressOneHandedReload()
	{
		return default(bool);
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0xC66240", Offset = "0xC66240", VA = "0xC66240")]
	[IteratorStateMachine(typeof(<WaitToFinishAutoReload>d__16))]
	protected IEnumerator WaitToFinishAutoReload()
	{
		return null;
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0xC662D0", Offset = "0xC662D0", VA = "0xC662D0")]
	protected void FinishAutoReload()
	{
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0xC66368", Offset = "0xC66368", VA = "0xC66368")]
	protected void LeverCompleted(ZNLever CompletedLever)
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0xC6645C", Offset = "0xC6645C", VA = "0xC6645C")]
	protected void LeverCheckpointHit(ZNLeverCheckpoint HitLeverCheckpoint, bool bValidHit)
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0xC6660C", Offset = "0xC6660C", VA = "0xC6660C")]
	protected void ReloadLeverGrabCubeDropped(ZNOVRGrabbable DroppedOVRGrabbable)
	{
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0xC66724", Offset = "0xC66724", VA = "0xC66724", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0xC667A0", Offset = "0xC667A0", VA = "0xC667A0", Slot = "59")]
	public override bool CanEjectMag(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0xC6681C", Offset = "0xC6681C", VA = "0xC6681C", Slot = "64")]
	public override bool IsLaserSightAllowed(int InTier)
	{
		return default(bool);
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0xC66920", Offset = "0xC66920", VA = "0xC66920")]
	public ZNPeashooter()
	{
	}
}
[Token(Token = "0x200025F")]
public class ZNPipebomb : ZNGrenadeWeapon
{
	[Token(Token = "0x4000A95")]
	protected const string ANIM_Idle = "Idle";

	[Token(Token = "0x4000A96")]
	protected const string ANIM_Hop = "Hop";

	[Token(Token = "0x4000A97")]
	protected const string ANIM_Talk = "Talk";

	[Token(Token = "0x4000A98")]
	protected const string ANIM_Wink = "Wink";

	[Token(Token = "0x4000A99")]
	protected const string ANIM_Shiver = "Shiver";

	[Token(Token = "0x4000A9A")]
	protected const string ANIM_Thrown = "Thrown";

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0xC66B68", Offset = "0xC66B68", VA = "0xC66B68", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0xC66C34", Offset = "0xC66C34", VA = "0xC66C34", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0xC66B8C", Offset = "0xC66B8C", VA = "0xC66B8C")]
	protected void PlayRandomAnim()
	{
	}

	[Token(Token = "0x60010D5")]
	[Address(RVA = "0xC66C40", Offset = "0xC66C40", VA = "0xC66C40")]
	protected string GetRandomAnimString(int InStringIndex)
	{
		return null;
	}

	[Token(Token = "0x60010D6")]
	[Address(RVA = "0xC66CC4", Offset = "0xC66CC4", VA = "0xC66CC4")]
	public ZNPipebomb()
	{
	}
}
[Token(Token = "0x2000260")]
public class ZNSetupPhaseBuilderWeapon : ZNBuilderWeapon
{
	[Token(Token = "0x2000261")]
	[CompilerGenerated]
	private sealed class <EndDisabledAtStartAfterDelay>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNSetupPhaseBuilderWeapon <>4__this;

		[Token(Token = "0x170000D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xC67304", Offset = "0xC67304", VA = "0xC67304", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xC6734C", Offset = "0xC6734C", VA = "0xC6734C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xC67064", Offset = "0xC67064", VA = "0xC67064")]
		[DebuggerHidden]
		public <EndDisabledAtStartAfterDelay>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xC67210", Offset = "0xC67210", VA = "0xC67210", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xC67214", Offset = "0xC67214", VA = "0xC67214", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xC6730C", Offset = "0xC6730C", VA = "0xC6730C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
	[Tooltip("Builder object info for the Tombie Shop object")]
	[SerializeField]
	protected FZNBuilderObjectInfo SmallRoomBuilderObjectInfo;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
	[Tooltip("Builder object info for the Tombie Shop object")]
	[SerializeField]
	protected FZNBuilderObjectInfo MediumRoomBuilderObjectInfo;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	[Tooltip("Builder object info for the Tombie Shop object")]
	[SerializeField]
	protected FZNBuilderObjectInfo LargeRoomBuilderObjectInfo;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
	[Tooltip("Builder object info for the Tombie Shop object")]
	[SerializeField]
	protected FZNBuilderObjectInfo TombieShopBuilderObjectInfo;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
	[Tooltip("How long (in seconds) this weapon is disabled at the start")]
	[SerializeField]
	protected float DisabledAtStartTime;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
	protected ZNSetupManager SetupManager;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
	protected bool bDisabledAtStart;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x471")]
	protected bool bRoomSizeDetermined;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
	protected EZNRoomSizes RoomSize;

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0xC66CCC", Offset = "0xC66CCC", VA = "0xC66CCC", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0xC66F54", Offset = "0xC66F54", VA = "0xC66F54", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0xC66EEC", Offset = "0xC66EEC", VA = "0xC66EEC")]
	[IteratorStateMachine(typeof(<EndDisabledAtStartAfterDelay>d__2))]
	protected IEnumerator EndDisabledAtStartAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60010DA")]
	[Address(RVA = "0xC6708C", Offset = "0xC6708C", VA = "0xC6708C")]
	public void ForceOffDisabledAtStart()
	{
	}

	[Token(Token = "0x60010DB")]
	[Address(RVA = "0xC67094", Offset = "0xC67094", VA = "0xC67094")]
	protected void SetupPhaseChanged(int PreviousPhase, int NewPhase)
	{
	}

	[Token(Token = "0x60010DC")]
	[Address(RVA = "0xC67104", Offset = "0xC67104", VA = "0xC67104")]
	protected void RoomSizeDetermined(EZNRoomSizes InRoomSize)
	{
	}

	[Token(Token = "0x60010DD")]
	[Address(RVA = "0xC670BC", Offset = "0xC670BC", VA = "0xC670BC")]
	protected void ChangeActiveBuilderObjectInfoToDoorSpawner()
	{
	}

	[Token(Token = "0x60010DE")]
	[Address(RVA = "0xC67114", Offset = "0xC67114", VA = "0xC67114", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010DF")]
	[Address(RVA = "0xC67190", Offset = "0xC67190", VA = "0xC67190", Slot = "65")]
	public override bool CanShowLaserSight()
	{
		return default(bool);
	}

	[Token(Token = "0x60010E0")]
	[Address(RVA = "0xC671C4", Offset = "0xC671C4", VA = "0xC671C4", Slot = "67")]
	public override bool CanUpdatePreview()
	{
		return default(bool);
	}

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0xC671F8", Offset = "0xC671F8", VA = "0xC671F8")]
	public ZNSetupPhaseBuilderWeapon()
	{
	}
}
[Token(Token = "0x2000262")]
public class ZNShootingRangeBuilderWeapon : ZNBuilderWeapon
{
	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <EndDisabledAtStartAfterDelay>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShootingRangeBuilderWeapon <>4__this;

		[Token(Token = "0x170000D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xC678F8", Offset = "0xC678F8", VA = "0xC678F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xC67940", Offset = "0xC67940", VA = "0xC67940", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xC676B0", Offset = "0xC676B0", VA = "0xC676B0")]
		[DebuggerHidden]
		public <EndDisabledAtStartAfterDelay>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xC67804", Offset = "0xC67804", VA = "0xC67804", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xC67808", Offset = "0xC67808", VA = "0xC67808", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xC67900", Offset = "0xC67900", VA = "0xC67900", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
	[Tooltip("Builder object info for the Weapons Table object")]
	[SerializeField]
	protected FZNBuilderObjectInfo WeaponsTableBuilderObjectInfo;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
	[Tooltip("How long (in seconds) this weapon is disabled at the start")]
	[SerializeField]
	protected float DisabledAtStartTime;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	protected ZNShootingRangeGameMode ShootingRangeGameModeRef;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
	protected ZNSetupManager SetupManager;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
	protected bool bDisabledAtStart;

	[Token(Token = "0x60010E8")]
	[Address(RVA = "0xC67354", Offset = "0xC67354", VA = "0xC67354", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60010E9")]
	[Address(RVA = "0xC673D8", Offset = "0xC673D8", VA = "0xC673D8", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60010EA")]
	[Address(RVA = "0xC675A0", Offset = "0xC675A0", VA = "0xC675A0", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010EB")]
	[Address(RVA = "0xC67538", Offset = "0xC67538", VA = "0xC67538")]
	[IteratorStateMachine(typeof(<EndDisabledAtStartAfterDelay>d__3))]
	protected IEnumerator EndDisabledAtStartAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60010EC")]
	[Address(RVA = "0xC676D8", Offset = "0xC676D8", VA = "0xC676D8")]
	protected void SetupPhaseChanged(int PreviousPhase, int NewPhase)
	{
	}

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0xC67708", Offset = "0xC67708", VA = "0xC67708", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60010EE")]
	[Address(RVA = "0xC67784", Offset = "0xC67784", VA = "0xC67784", Slot = "65")]
	public override bool CanShowLaserSight()
	{
		return default(bool);
	}

	[Token(Token = "0x60010EF")]
	[Address(RVA = "0xC677B8", Offset = "0xC677B8", VA = "0xC677B8", Slot = "67")]
	public override bool CanUpdatePreview()
	{
		return default(bool);
	}

	[Token(Token = "0x60010F0")]
	[Address(RVA = "0xC677EC", Offset = "0xC677EC", VA = "0xC677EC")]
	public ZNShootingRangeBuilderWeapon()
	{
	}
}
[Token(Token = "0x2000264")]
public class ZNShotgun : ZNMultiTraceWeapon
{
	[Token(Token = "0x2000265")]
	[CompilerGenerated]
	private sealed class <ReenableGrabbingAfterDelay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNShotgun <>4__this;

		[Token(Token = "0x170000D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0xC68A74", Offset = "0xC68A74", VA = "0xC68A74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xC68ABC", Offset = "0xC68ABC", VA = "0xC68ABC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xC68038", Offset = "0xC68038", VA = "0xC68038")]
		[DebuggerHidden]
		public <ReenableGrabbingAfterDelay>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xC6897C", Offset = "0xC6897C", VA = "0xC6897C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xC68980", Offset = "0xC68980", VA = "0xC68980", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xC68A7C", Offset = "0xC68A7C", VA = "0xC68A7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[Header("Splatter Shot")]
	[Tooltip("Lever to prep the shot")]
	[SerializeField]
	protected ZNLever PrepLever;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[SerializeField]
	[Tooltip("The grab cube for the prep lever")]
	protected ConstrainedOVRGrabbable PrepLeverGrabCube;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[Tooltip("The target transform for prepping")]
	[SerializeField]
	protected Transform PrepTargetTransform1;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	[SerializeField]
	[Tooltip("The target transform for prepping")]
	protected Transform PrepTargetTransform2;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[SerializeField]
	[Tooltip("The emissive cooldown time, for after shooting the splatter shot")]
	protected float EmissiveCooldownTime;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
	[Tooltip("When using one-handed mode, how long you have for reloading bullets after the first bullet. Each bullet inserted resets the timer back to this amount.")]
	[SerializeField]
	protected float OneHandedReloadingTime;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	[SerializeField]
	[Tooltip("The SFX that plays when cocking the chamber back")]
	protected Event ChamberBackSFX;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	[SerializeField]
	[Tooltip("The SFX that plays when cocking the chamber forward")]
	protected Event ChamberFrontSFX;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
	protected bool bMidPrep;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x429")]
	protected bool bShotgunPrepped;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42A")]
	protected bool bEmissiveCooldown;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
	protected float CurrentEmissiveCooldownTime;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	protected bool bOneHandedReloading;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
	protected float CurrentOneHandedReloadingTime;

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0xC67948", Offset = "0xC67948", VA = "0xC67948", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0xC67BB4", Offset = "0xC67BB4", VA = "0xC67BB4", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0xC67D18", Offset = "0xC67D18", VA = "0xC67D18", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0xC67F28", Offset = "0xC67F28", VA = "0xC67F28", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x60010FB")]
	[Address(RVA = "0xC67FD0", Offset = "0xC67FD0", VA = "0xC67FD0")]
	[IteratorStateMachine(typeof(<ReenableGrabbingAfterDelay>d__18))]
	private IEnumerator ReenableGrabbingAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x60010FC")]
	[Address(RVA = "0xC68060", Offset = "0xC68060", VA = "0xC68060", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x60010FD")]
	[Address(RVA = "0xC68128", Offset = "0xC68128", VA = "0xC68128", Slot = "52")]
	protected override void TryFireWeapon(bool bGiveFailureFeedback = true)
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0xC681FC", Offset = "0xC681FC", VA = "0xC681FC", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0xC682A4", Offset = "0xC682A4", VA = "0xC682A4", Slot = "56")]
	public override void InsertMag(ZNMag NewMagObject)
	{
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0xC68408", Offset = "0xC68408", VA = "0xC68408", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x6001101")]
	[Address(RVA = "0xC68430", Offset = "0xC68430", VA = "0xC68430", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x6001102")]
	[Address(RVA = "0xC68654", Offset = "0xC68654", VA = "0xC68654")]
	protected bool CanProgressOneHandedReload()
	{
		return default(bool);
	}

	[Token(Token = "0x6001103")]
	[Address(RVA = "0xC67C40", Offset = "0xC67C40", VA = "0xC67C40")]
	protected void UpdateEmissiveCooldownVisuals()
	{
	}

	[Token(Token = "0x6001104")]
	[Address(RVA = "0xC686F8", Offset = "0xC686F8", VA = "0xC686F8")]
	protected void LeverCompleted(ZNLever CompletedLever)
	{
	}

	[Token(Token = "0x6001105")]
	[Address(RVA = "0xC687B8", Offset = "0xC687B8", VA = "0xC687B8")]
	protected void LeverCheckpointHit(ZNLeverCheckpoint HitLeverCheckpoint, bool bValidHit)
	{
	}

	[Token(Token = "0x6001106")]
	[Address(RVA = "0xC68884", Offset = "0xC68884", VA = "0xC68884", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001107")]
	[Address(RVA = "0xC68900", Offset = "0xC68900", VA = "0xC68900", Slot = "59")]
	public override bool CanEjectMag(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0xC6894C", Offset = "0xC6894C", VA = "0xC6894C", Slot = "61")]
	protected override bool CanMagBeInsertedOverOtherMag()
	{
		return default(bool);
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0xC68968", Offset = "0xC68968", VA = "0xC68968")]
	public ZNShotgun()
	{
	}
}
[Token(Token = "0x2000266")]
public class ZNTeslaGun : ZNChargeWeapon
{
	[Token(Token = "0x2000267")]
	[CompilerGenerated]
	private sealed class <ReenableGrabbingAfterDelay>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNTeslaGun <>4__this;

		[Token(Token = "0x170000D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0xC6AC68", Offset = "0xC6AC68", VA = "0xC6AC68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0xC6ACB0", Offset = "0xC6ACB0", VA = "0xC6ACB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xC6AB10", Offset = "0xC6AB10", VA = "0xC6AB10")]
		[DebuggerHidden]
		public <ReenableGrabbingAfterDelay>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xC6AB38", Offset = "0xC6AB38", VA = "0xC6AB38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xC6AB3C", Offset = "0xC6AB3C", VA = "0xC6AB3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xC6AC70", Offset = "0xC6AC70", VA = "0xC6AC70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	[Header("Brainstorm")]
	[Tooltip("Lever to charge the attack")]
	[SerializeField]
	protected ZNLever ChargeLever;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
	[SerializeField]
	[Tooltip("Left side grab cube for the charge lever")]
	protected RotateObjectByPositionOVRGrabbable ChargeLeverLeftGrabCube;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
	[SerializeField]
	[Tooltip("Right side grab cube for the charge lever")]
	protected RotateObjectByPositionOVRGrabbable ChargeLeverRightGrabCube;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	[SerializeField]
	[Tooltip("The charge indicator bone for the 0-6 scale")]
	protected Transform ChargeIndicatorBone;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	[Tooltip("The object we use to determine the trace start position")]
	[SerializeField]
	protected Transform TraceRoot;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[Tooltip("How long it takes the Brainstorm to wind down back to a no charge state after being fired")]
	[SerializeField]
	protected float WindDownTime;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
	[Tooltip("The max radius range for the tesla gun's sphere cast damage check")]
	[SerializeField]
	protected float MaxRadiusRange;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[Tooltip("The spread that we use when we miss all targets")]
	[SerializeField]
	protected float MissAllTargetsRandomSpread;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3FC")]
	[SerializeField]
	[Tooltip("The min range to use when we miss all targets")]
	protected float MissAllTargetsMinRange;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[Tooltip("The max range to use when we miss all targets")]
	[SerializeField]
	protected float MissAllTargetsMaxRange;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	[SerializeField]
	[Tooltip("The SFX for cranking in the correct direction")]
	protected Event CrankForwardSFX;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[Tooltip("The SFX for cranking in the wrong direction")]
	[SerializeField]
	protected Event CrankBackwardSFX;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	[Tooltip("The SFX for the charged value")]
	[SerializeField]
	protected Event ChargedSFX;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	[Tooltip("The RTPC for how many times the gun was cranked--handled before firing")]
	[SerializeField]
	protected RTPC TimesCrankedFiredRPTC;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
	[Tooltip("The RTPC for how many times the gun was cranked--handled on each passive moment")]
	[SerializeField]
	protected RTPC TimesCrankedPassiveRPTC;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	[Tooltip("The electricity VFX that plays when the gun is fired")]
	[SerializeField]
	protected GameObject PF_ElectricityVFX;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
	[Tooltip("The position for cranking")]
	[SerializeField]
	protected Vector3 CrankRigidbodyPosition1;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
	[SerializeField]
	[Tooltip("The position for cranking")]
	protected Vector3 CrankRigidbodyPosition2;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	[SerializeField]
	[Tooltip("The position for cranking")]
	protected Vector3 CrankRigidbodyPosition3;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
	[SerializeField]
	[Tooltip("The position for cranking")]
	protected Vector3 CrankRigidbodyPosition4;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
	[SerializeField]
	[Tooltip("The root position we use for the rigidbody positions to determine where to go from a local standpoint")]
	protected Transform CrankTransformDirection;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
	private bool bWindingDown;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
	private float CurrentWindDownTime;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
	private float PannerOffsetAtFire;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47C")]
	private float ChargeIndicatorRotationAtFire;

	[Token(Token = "0x6001110")]
	[Address(RVA = "0xC68AC4", Offset = "0xC68AC4", VA = "0xC68AC4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001111")]
	[Address(RVA = "0xC68D8C", Offset = "0xC68D8C", VA = "0xC68D8C", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0xC68DF8", Offset = "0xC68DF8", VA = "0xC68DF8", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0xC69034", Offset = "0xC69034", VA = "0xC69034", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0xC69104", Offset = "0xC69104", VA = "0xC69104")]
	[IteratorStateMachine(typeof(<ReenableGrabbingAfterDelay>d__29))]
	private IEnumerator ReenableGrabbingAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x6001115")]
	[Address(RVA = "0xC6916C", Offset = "0xC6916C", VA = "0xC6916C", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0xC69290", Offset = "0xC69290", VA = "0xC69290", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x6001117")]
	[Address(RVA = "0xC693E0", Offset = "0xC693E0", VA = "0xC693E0")]
	protected bool CanProgressOneHandedCrank()
	{
		return default(bool);
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0xC694B8", Offset = "0xC694B8", VA = "0xC694B8", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0xC69808", Offset = "0xC69808", VA = "0xC69808")]
	protected void TryDamageEnemies(bool bInEnergyAttack)
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0xC6A604", Offset = "0xC6A604", VA = "0xC6A604", Slot = "63")]
	protected override void UpdateChargeCosmetics()
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0xC6A53C", Offset = "0xC6A53C", VA = "0xC6A53C")]
	protected Vector3 CalculateRandomForwardPosition(Transform InRotatePointTransform)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0xC6A770", Offset = "0xC6A770", VA = "0xC6A770")]
	protected void LeverCompleted(ZNLever CompletedLever)
	{
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0xC6A7FC", Offset = "0xC6A7FC", VA = "0xC6A7FC")]
	protected void LeverCheckpointHit(ZNLeverCheckpoint HitLeverCheckpoint, bool bValidHit)
	{
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0xC6A858", Offset = "0xC6A858", VA = "0xC6A858", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0xC6A8DC", Offset = "0xC6A8DC", VA = "0xC6A8DC")]
	public int GetMaxNumBrainstormTargets()
	{
		return default(int);
	}

	[Token(Token = "0x6001120")]
	[Address(RVA = "0xC6A460", Offset = "0xC6A460", VA = "0xC6A460")]
	public int GetScaledDamage(int InNumCharges, int InNumTargetsHit, bool bIncreaseMultiTargetDamage)
	{
		return default(int);
	}

	[Token(Token = "0x6001121")]
	[Address(RVA = "0xC695C4", Offset = "0xC695C4", VA = "0xC695C4")]
	protected float GetPannerOffsetValueForCharge(int InNumCharges)
	{
		return default(float);
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0xC6A8E4", Offset = "0xC6A8E4", VA = "0xC6A8E4")]
	protected float GetWindDownPannerOffsetValue()
	{
		return default(float);
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0xC696D8", Offset = "0xC696D8", VA = "0xC696D8")]
	protected float GetChargeIndicatorRotationForCharge(int InNumCharges)
	{
		return default(float);
	}

	[Token(Token = "0x6001124")]
	[Address(RVA = "0xC6A928", Offset = "0xC6A928", VA = "0xC6A928")]
	protected float GetWindDownChargeIndicatorRotation()
	{
		return default(float);
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0xC6A978", Offset = "0xC6A978", VA = "0xC6A978")]
	public ZNTeslaGun()
	{
	}
}
[Token(Token = "0x2000268")]
public class ZNThrowingKnife : ZNThrownWeapon
{
	[Token(Token = "0x600112D")]
	[Address(RVA = "0xC6ACB8", Offset = "0xC6ACB8", VA = "0xC6ACB8")]
	public ZNThrowingKnife()
	{
	}
}
[Token(Token = "0x2000269")]
[CreateAssetMenu(fileName = "ZNSkinAsset", menuName = "Scriptable Objects/Weapons/ZNSkinAsset")]
public class ZNSkinAsset : ScriptableObject
{
	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The key string for this skin; use the format WeaponSkin_[SkinName] or [WeaponName]_[SkinName]")]
	[SerializeField]
	protected string SkinKey;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The skin's name")]
	[SerializeField]
	protected LocalizedString SkinName;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The optional VFX to spawn on the weapon when this skin is used")]
	[SerializeField]
	protected GameObject PF_OptionalWeaponSkinVFX;

	[Token(Token = "0x600112E")]
	[Address(RVA = "0xC6ACF0", Offset = "0xC6ACF0", VA = "0xC6ACF0")]
	public string GetSkinKey()
	{
		return null;
	}

	[Token(Token = "0x600112F")]
	[Address(RVA = "0xC6ACF8", Offset = "0xC6ACF8", VA = "0xC6ACF8")]
	public LocalizedString GetSkinName()
	{
		return null;
	}

	[Token(Token = "0x6001130")]
	[Address(RVA = "0xC6AD00", Offset = "0xC6AD00", VA = "0xC6AD00")]
	public GameObject GetPF_OptionalWeaponSkinVFX()
	{
		return null;
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0xC6AD08", Offset = "0xC6AD08", VA = "0xC6AD08")]
	public ZNSkinAsset()
	{
	}
}
[Token(Token = "0x200026A")]
public class ZNWeaponSkins : MonoBehaviour
{
	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("All of the weapon's mesh renderer objects that will be changed with the skin materials")]
	[SerializeField]
	[Header("WeaponSkins")]
	protected List<Renderer> WeaponMeshRenderersList;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The associated weapon skins asset")]
	[SerializeField]
	protected ZNWeaponSkinsAsset AssociatedWeaponSkinsAsset;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The associated weapon asset")]
	[SerializeField]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ZNSkinAsset EquippedSkinAsset;

	[Token(Token = "0x6001132")]
	[Address(RVA = "0xC6AD10", Offset = "0xC6AD10", VA = "0xC6AD10")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001133")]
	[Address(RVA = "0xC6AD18", Offset = "0xC6AD18", VA = "0xC6AD18")]
	public void InitializeWeaponSkin(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0xC6B0A8", Offset = "0xC6B0A8", VA = "0xC6B0A8")]
	public void ChangeWeaponSkin(ZNSkinAsset InSkinAsset)
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0xC6B47C", Offset = "0xC6B47C", VA = "0xC6B47C")]
	public ZNWeaponSkins()
	{
	}
}
[Token(Token = "0x200026B")]
[CreateAssetMenu(fileName = "ZNWeaponSkinsAsset", menuName = "Scriptable Objects/Weapons/ZNWeaponSkinsAsset")]
public class ZNWeaponSkinsAsset : ScriptableObject
{
	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The skin assets and their info to use for this weapon's skins")]
	protected SerializableDictionary<ZNSkinAsset, FZNWeaponSkinInfo> WeaponSkinsDictionary;

	[Token(Token = "0x6001136")]
	[Address(RVA = "0xC6B4F8", Offset = "0xC6B4F8", VA = "0xC6B4F8")]
	public bool HasBeenUnlocked(ZNSkinAsset InSkinAsset)
	{
		return default(bool);
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0xC6B628", Offset = "0xC6B628", VA = "0xC6B628")]
	public SerializableDictionary<ZNSkinAsset, FZNWeaponSkinInfo> GetWeaponSkinsDictionary()
	{
		return null;
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0xC6B630", Offset = "0xC6B630", VA = "0xC6B630")]
	public ZNWeaponSkinsAsset()
	{
	}
}
[Token(Token = "0x200026C")]
public class ZNAmmoPouch : ZNGrabObjectBase
{
	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	protected ZNMainCharacter PouchOwningCharacter;

	[Token(Token = "0x6001139")]
	[Address(RVA = "0xC6B6AC", Offset = "0xC6B6AC", VA = "0xC6B6AC", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600113A")]
	[Address(RVA = "0xC6B8E0", Offset = "0xC6B8E0", VA = "0xC6B8E0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600113B")]
	[Address(RVA = "0xC6B8E8", Offset = "0xC6B8E8", VA = "0xC6B8E8", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600113C")]
	[Address(RVA = "0xC6B9F4", Offset = "0xC6B9F4", VA = "0xC6B9F4")]
	protected void CharacterGrabbedObject(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand)
	{
	}

	[Token(Token = "0x600113D")]
	[Address(RVA = "0xC6BA08", Offset = "0xC6BA08", VA = "0xC6BA08", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x600113E")]
	[Address(RVA = "0xC6BCC4", Offset = "0xC6BCC4", VA = "0xC6BCC4", Slot = "40")]
	public override bool CanBeGrabbed(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x600113F")]
	[Address(RVA = "0xC6BD9C", Offset = "0xC6BD9C", VA = "0xC6BD9C", Slot = "41")]
	public override bool CanBePickedUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6001140")]
	[Address(RVA = "0xC6BDB4", Offset = "0xC6BDB4", VA = "0xC6BDB4")]
	public bool CanSpawnObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6001141")]
	[Address(RVA = "0xC6BB3C", Offset = "0xC6BB3C", VA = "0xC6BB3C")]
	public ZNGunWeapon GetBestAmmoWeapon()
	{
		return null;
	}

	[Token(Token = "0x6001142")]
	[Address(RVA = "0xC6BDBC", Offset = "0xC6BDBC", VA = "0xC6BDBC")]
	public ZNAmmoPouch()
	{
	}
}
[Token(Token = "0x200026D")]
public class ZNBuilderWeapon : ZNTraceWeapon
{
	[Token(Token = "0x200026E")]
	[CompilerGenerated]
	private sealed class <UpdateReadyAfterGrabbedAfterDelay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNBuilderWeapon <>4__this;

		[Token(Token = "0x170000DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0xC6DA90", Offset = "0xC6DA90", VA = "0xC6DA90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xC6DAD8", Offset = "0xC6DAD8", VA = "0xC6DAD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xC6CE40", Offset = "0xC6CE40", VA = "0xC6CE40")]
		[DebuggerHidden]
		public <UpdateReadyAfterGrabbedAfterDelay>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xC6D9D4", Offset = "0xC6D9D4", VA = "0xC6D9D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xC6D9D8", Offset = "0xC6D9D8", VA = "0xC6D9D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xC6DA98", Offset = "0xC6DA98", VA = "0xC6DA98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	protected ZNBuilderWeaponAsset AssociatedBuilderWeaponAsset;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	protected bool bAutoBuild;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F1")]
	protected bool bReadyAfterGrabbed;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[Header("Builder")]
	[Tooltip("Holds information for the main builder object info, but other builder object infos can be used instead in child classes.")]
	[SerializeField]
	protected FZNBuilderObjectInfo MainBuilderObjectInfo;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[SerializeField]
	[Tooltip("The SFX to play when building at an invalid location")]
	protected Event InvalidLocationSFX;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	protected FZNBuilderObjectInfo ActiveBuilderObjectInfo;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	protected bool bValidBuildLocation;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	protected Transform CurrentBuildTransform;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	protected Vector3 CurrentBuildHitPoint;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	protected GameObject CurrentHitObject;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
	protected ZNPreviewBuild PreviewBuildObject;

	[Token(Token = "0x6001143")]
	[Address(RVA = "0xC6BDC4", Offset = "0xC6BDC4", VA = "0xC6BDC4", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001144")]
	[Address(RVA = "0xC6BF88", Offset = "0xC6BF88", VA = "0xC6BF88", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001145")]
	[Address(RVA = "0xC6C028", Offset = "0xC6C028", VA = "0xC6C028", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0xC6C1DC", Offset = "0xC6C1DC", VA = "0xC6C1DC", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0xC6CA48", Offset = "0xC6CA48", VA = "0xC6CA48", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0xC6CB78", Offset = "0xC6CB78", VA = "0xC6CB78", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0xC6CCD8", Offset = "0xC6CCD8", VA = "0xC6CCD8", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0xC6CC70", Offset = "0xC6CC70", VA = "0xC6CC70")]
	[IteratorStateMachine(typeof(<UpdateReadyAfterGrabbedAfterDelay>d__18))]
	protected IEnumerator UpdateReadyAfterGrabbedAfterDelay()
	{
		return null;
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0xC6C21C", Offset = "0xC6C21C", VA = "0xC6C21C")]
	protected void UpdatePreviewBuilder(bool bInAutoBuild)
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0xC6CE68", Offset = "0xC6CE68", VA = "0xC6CE68", Slot = "66")]
	public virtual void ChangeActiveBuilderObjectInfo(FZNBuilderObjectInfo NewBuilderObjectInfo)
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0xC6CFE0", Offset = "0xC6CFE0", VA = "0xC6CFE0", Slot = "52")]
	protected override void TryFireWeapon(bool bGiveFailureFeedback = true)
	{
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0xC6D25C", Offset = "0xC6D25C", VA = "0xC6D25C", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0xC6D618", Offset = "0xC6D618", VA = "0xC6D618")]
	public ZNBuilderWeaponAsset GetAssociatedBuilderWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0xC6D620", Offset = "0xC6D620", VA = "0xC6D620")]
	public FZNBuilderObjectInfo GetActiveBuilderObjectInfo()
	{
		return null;
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0xC6D628", Offset = "0xC6D628", VA = "0xC6D628", Slot = "58")]
	public override bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0xC6D8FC", Offset = "0xC6D8FC", VA = "0xC6D8FC", Slot = "67")]
	public virtual bool CanUpdatePreview()
	{
		return default(bool);
	}

	[Token(Token = "0x6001153")]
	[Address(RVA = "0xC6D904", Offset = "0xC6D904", VA = "0xC6D904")]
	public ZNBuilderWeapon()
	{
	}
}
[Token(Token = "0x200026F")]
public class ZNChargeWeapon : ZNGunWeapon
{
	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
	private ZNChargeWeaponAsset AssociatedChargeWeaponAsset;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	protected int CurrentNumCharges;

	[Token(Token = "0x600115A")]
	[Address(RVA = "0xC6DAE0", Offset = "0xC6DAE0", VA = "0xC6DAE0", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600115B")]
	[Address(RVA = "0xC6DD20", Offset = "0xC6DD20", VA = "0xC6DD20", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600115C")]
	[Address(RVA = "0xC6DF24", Offset = "0xC6DF24", VA = "0xC6DF24")]
	public void AddCharge(int NumChargesToAdd = 1)
	{
	}

	[Token(Token = "0x600115D")]
	[Address(RVA = "0xC6DFF8", Offset = "0xC6DFF8", VA = "0xC6DFF8")]
	public void RemoveCharge(int NumChargesToRemove = 1)
	{
	}

	[Token(Token = "0x600115E")]
	[Address(RVA = "0xC6E004", Offset = "0xC6E004", VA = "0xC6E004")]
	public void RemoveAllCharges()
	{
	}

	[Token(Token = "0x600115F")]
	[Address(RVA = "0xC6DF30", Offset = "0xC6DF30", VA = "0xC6DF30")]
	public void SetCharge(int InChargeValue)
	{
	}

	[Token(Token = "0x6001160")]
	[Address(RVA = "0xC6E098", Offset = "0xC6E098", VA = "0xC6E098", Slot = "63")]
	protected virtual void UpdateChargeCosmetics()
	{
	}

	[Token(Token = "0x6001161")]
	[Address(RVA = "0xC6E09C", Offset = "0xC6E09C", VA = "0xC6E09C")]
	public int GetCurrentNumCharges()
	{
		return default(int);
	}

	[Token(Token = "0x6001162")]
	[Address(RVA = "0xC6E0A4", Offset = "0xC6E0A4", VA = "0xC6E0A4")]
	public bool HasMaxCharge()
	{
		return default(bool);
	}

	[Token(Token = "0x6001163")]
	[Address(RVA = "0xC6E0C0", Offset = "0xC6E0C0", VA = "0xC6E0C0")]
	public bool HasAnyCharge()
	{
		return default(bool);
	}

	[Token(Token = "0x6001164")]
	[Address(RVA = "0xC6E00C", Offset = "0xC6E00C", VA = "0xC6E00C")]
	public int GetMaxNumCharges()
	{
		return default(int);
	}

	[Token(Token = "0x6001165")]
	[Address(RVA = "0xC6E0D0", Offset = "0xC6E0D0", VA = "0xC6E0D0")]
	public double GetDamageMultiplierForCharge(int InCharge)
	{
		return default(double);
	}

	[Token(Token = "0x6001166")]
	[Address(RVA = "0xC6E170", Offset = "0xC6E170", VA = "0xC6E170")]
	public ZNChargeWeapon()
	{
	}
}
[Token(Token = "0x2000270")]
public class ZNCooldownWeapon : ZNWeaponBase
{
	[Token(Token = "0x2000271")]
	[CompilerGenerated]
	private sealed class <DisableVFXAfterDuration>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCooldownWeapon <>4__this;

		[Token(Token = "0x170000DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600117F")]
			[Address(RVA = "0xC6F308", Offset = "0xC6F308", VA = "0xC6F308", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001181")]
			[Address(RVA = "0xC6F350", Offset = "0xC6F350", VA = "0xC6F350", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xC6EE64", Offset = "0xC6EE64", VA = "0xC6EE64")]
		[DebuggerHidden]
		public <DisableVFXAfterDuration>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xC6F298", Offset = "0xC6F298", VA = "0xC6F298", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xC6F29C", Offset = "0xC6F29C", VA = "0xC6F29C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xC6F310", Offset = "0xC6F310", VA = "0xC6F310", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000272")]
	[CompilerGenerated]
	private sealed class <WeaponCooldown>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNCooldownWeapon <>4__this;

		[Token(Token = "0x170000DE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0xC6F464", Offset = "0xC6F464", VA = "0xC6F464", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0xC6F4AC", Offset = "0xC6F4AC", VA = "0xC6F4AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xC6EEE0", Offset = "0xC6EEE0", VA = "0xC6EEE0")]
		[DebuggerHidden]
		public <WeaponCooldown>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xC6F358", Offset = "0xC6F358", VA = "0xC6F358", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xC6F35C", Offset = "0xC6F35C", VA = "0xC6F35C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xC6F46C", Offset = "0xC6F46C", VA = "0xC6F46C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	protected ZNCooldownWeaponAsset AssociatedCooldownWeaponAsset;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public FOnWeaponCooldownStart OnWeaponCooldownStartDel;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public FOnWeaponCooldownTimeUpdated OnWeaponCooldownTimeUpdatedDel;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[Header("Cooldown Weapon")]
	[Tooltip("The time in seconds that the vibration effect lasts when using the weapon")]
	[SerializeField]
	protected float UsageVibrationTime;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[Header("VFX")]
	[Tooltip("The prefab for the weapon usage VFX")]
	[SerializeField]
	protected GameObject UseWeaponVFXPrefab;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[SerializeField]
	[Tooltip("The time in seconds that the vibration effect lasts when using the weapon")]
	protected float VFXDurationSeconds;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[Tooltip("SFX to play when using the weapon")]
	[Header("SFX")]
	[SerializeField]
	protected Event UseWeaponSFX;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[Tooltip("SFX to play when the weapon's cooldown starts")]
	[SerializeField]
	protected Event CooldownStartSFX;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	[Tooltip("SFX to play at the end of the weapon's cooldown")]
	[SerializeField]
	protected Event CooldownEndSFX;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	[SerializeField]
	[Tooltip("SFX to play when we try to use the weapon but it is out of charges/on cooldown")]
	protected Event NoChargesSFX;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	protected int MaxCharges;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	protected float MaxCooldownDurationSeconds;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private WaitForSeconds VFXDurationYield;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private WaitForSeconds CooldownDurationYield;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private float CurrentRemainingCooldownSeconds;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
	private bool bOnCooldown;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	protected int CurrentCharges;

	[Token(Token = "0x6001167")]
	[Address(RVA = "0xC6E248", Offset = "0xC6E248", VA = "0xC6E248", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001168")]
	[Address(RVA = "0xC6E33C", Offset = "0xC6E33C", VA = "0xC6E33C", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001169")]
	[Address(RVA = "0xC6E5A0", Offset = "0xC6E5A0", VA = "0xC6E5A0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600116A")]
	[Address(RVA = "0xC6E5EC", Offset = "0xC6E5EC", VA = "0xC6E5EC", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600116B")]
	[Address(RVA = "0xC6E7F0", Offset = "0xC6E7F0", VA = "0xC6E7F0", Slot = "14")]
	public override void PressTrigger()
	{
	}

	[Token(Token = "0x600116C")]
	[Address(RVA = "0xC6E938", Offset = "0xC6E938", VA = "0xC6E938", Slot = "15")]
	public override void ReleaseTrigger()
	{
	}

	[Token(Token = "0x600116D")]
	[Address(RVA = "0xC6EA04", Offset = "0xC6EA04", VA = "0xC6EA04", Slot = "52")]
	protected virtual void TryUseWeapon(bool bGiveFailureFeedback = true)
	{
	}

	[Token(Token = "0x600116E")]
	[Address(RVA = "0xC6EB04", Offset = "0xC6EB04", VA = "0xC6EB04", Slot = "53")]
	protected virtual void UseWeapon()
	{
	}

	[Token(Token = "0x600116F")]
	[Address(RVA = "0xC6ECF4", Offset = "0xC6ECF4", VA = "0xC6ECF4")]
	[IteratorStateMachine(typeof(<DisableVFXAfterDuration>d__25))]
	protected IEnumerator DisableVFXAfterDuration()
	{
		return null;
	}

	[Token(Token = "0x6001170")]
	[Address(RVA = "0xC6ECC8", Offset = "0xC6ECC8", VA = "0xC6ECC8")]
	protected void UseCharge()
	{
	}

	[Token(Token = "0x6001171")]
	[Address(RVA = "0xC6E57C", Offset = "0xC6E57C", VA = "0xC6E57C")]
	protected void SetCharges(int InCharges)
	{
	}

	[Token(Token = "0x6001172")]
	[Address(RVA = "0xC6EE8C", Offset = "0xC6EE8C", VA = "0xC6EE8C")]
	protected void ReduceWeaponCooldownTime(float InReducedTime)
	{
	}

	[Token(Token = "0x6001173")]
	[Address(RVA = "0xC6EE98", Offset = "0xC6EE98", VA = "0xC6EE98")]
	protected void SetWeaponCooldownTime(float InCooldownTime)
	{
	}

	[Token(Token = "0x6001174")]
	[Address(RVA = "0xC6ED5C", Offset = "0xC6ED5C", VA = "0xC6ED5C")]
	[IteratorStateMachine(typeof(<WeaponCooldown>d__30))]
	private IEnumerator WeaponCooldown()
	{
		return null;
	}

	[Token(Token = "0x6001175")]
	[Address(RVA = "0xC6EF08", Offset = "0xC6EF08", VA = "0xC6EF08", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x6001176")]
	[Address(RVA = "0xC6F0B4", Offset = "0xC6F0B4", VA = "0xC6F0B4", Slot = "54")]
	public virtual bool CanUseWeapon(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001177")]
	[Address(RVA = "0xC6F1E0", Offset = "0xC6F1E0", VA = "0xC6F1E0")]
	public bool IsOnCooldown()
	{
		return default(bool);
	}

	[Token(Token = "0x6001178")]
	[Address(RVA = "0xC6F1E8", Offset = "0xC6F1E8", VA = "0xC6F1E8")]
	public float GetMaxCooldownDurationSeconds()
	{
		return default(float);
	}

	[Token(Token = "0x6001179")]
	[Address(RVA = "0xC6F1F0", Offset = "0xC6F1F0", VA = "0xC6F1F0")]
	public float GetCurrentRemainingCooldownSeconds()
	{
		return default(float);
	}

	[Token(Token = "0x600117A")]
	[Address(RVA = "0xC6F1F8", Offset = "0xC6F1F8", VA = "0xC6F1F8")]
	public int GetCurrentCharges()
	{
		return default(int);
	}

	[Token(Token = "0x600117B")]
	[Address(RVA = "0xC6F200", Offset = "0xC6F200", VA = "0xC6F200")]
	public ZNCooldownWeapon()
	{
	}
}
[Token(Token = "0x2000273")]
public class ZNForceWeaponAssetComponent : MonoBehaviour
{
	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This weapon asset will be applied to a weapon on this game object when the object loads into the scene")]
	[SerializeField]
	private ZNWeaponAsset ForcedWeaponAsset;

	[Token(Token = "0x6001188")]
	[Address(RVA = "0xC6F4B4", Offset = "0xC6F4B4", VA = "0xC6F4B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0xC6F59C", Offset = "0xC6F59C", VA = "0xC6F59C")]
	public ZNForceWeaponAssetComponent()
	{
	}
}
[Token(Token = "0x2000274")]
public class ZNGrenadeWeapon : ZNThrownWeapon
{
	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private ZNGrenadeWeaponAsset AssociatedGrenadeWeaponAsset;

	[Token(Token = "0x600118A")]
	[Address(RVA = "0xC6F5A4", Offset = "0xC6F5A4", VA = "0xC6F5A4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0xC6F5AC", Offset = "0xC6F5AC", VA = "0xC6F5AC", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600118C")]
	[Address(RVA = "0xC6F5B4", Offset = "0xC6F5B4", VA = "0xC6F5B4", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600118D")]
	[Address(RVA = "0xC6F6BC", Offset = "0xC6F6BC", VA = "0xC6F6BC")]
	public ZNGrenadeWeaponAsset GetAssociatedGrenadeWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x600118E")]
	[Address(RVA = "0xC6F6C4", Offset = "0xC6F6C4", VA = "0xC6F6C4")]
	public ZNGrenadeWeapon()
	{
	}
}
[Token(Token = "0x2000275")]
public class ZNGunWeapon : ZNWeaponBase
{
	[Token(Token = "0x2000276")]
	[CompilerGenerated]
	private sealed class <EndFireOnCooldownAfterDelay>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDelayTime;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNGunWeapon <>4__this;

		[Token(Token = "0x170000E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0xC70E28", Offset = "0xC70E28", VA = "0xC70E28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0xC70E70", Offset = "0xC70E70", VA = "0xC70E70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xC70204", Offset = "0xC70204", VA = "0xC70204")]
		[DebuggerHidden]
		public <EndFireOnCooldownAfterDelay>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xC70D58", Offset = "0xC70D58", VA = "0xC70D58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xC70D5C", Offset = "0xC70D5C", VA = "0xC70D5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xC70E30", Offset = "0xC70E30", VA = "0xC70E30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000277")]
	[CompilerGenerated]
	private sealed class <EndVibrationAfterDelay>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDelayTime;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public OVRInput.Controller InVibrationController;

		[Token(Token = "0x170000E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0xC70F58", Offset = "0xC70F58", VA = "0xC70F58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xC70FA0", Offset = "0xC70FA0", VA = "0xC70FA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xC702B4", Offset = "0xC702B4", VA = "0xC702B4")]
		[DebuggerHidden]
		public <EndVibrationAfterDelay>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xC70E78", Offset = "0xC70E78", VA = "0xC70E78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xC70E7C", Offset = "0xC70E7C", VA = "0xC70E7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xC70F60", Offset = "0xC70F60", VA = "0xC70F60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private ZNGunWeaponAsset AssociatedGunWeaponAsset;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public FOnGunFired OnGunFiredDel;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public FOnAmmoUpdated OnAmmoUpdatedDel;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	public FOnGunReload OnGunReloadDel;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	public FOnMagInserted OnMagInsertedDel;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public FOnMagEjected OnMagEjectedDel;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[Header("Gun")]
	[Tooltip("If this weapon should be activated by pressing or holding.")]
	[SerializeField]
	protected EZNWeaponActivationTypes WeaponActivationType;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	[Tooltip("If this weapon should queue up input when player tries to fire, but weapon cooldown is less than FireInputBufferSize")]
	[SerializeField]
	protected bool bHasInputBuffer;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[Tooltip("Amount of time before weapon cooldown is finished, that is viewed as valid for buffering input")]
	[SerializeField]
	protected float FireInputBufferSize;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
	[SerializeField]
	[Tooltip("The time in seconds that the vibration effect lasts when firing")]
	[Header("Vibration")]
	protected float FireVibrationTime;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	[Range(0f, 1f)]
	[SerializeField]
	[Tooltip("The amplitude/intensity value to use for the vibration effect when firing--any value from zero to one, one being the strongest vibration")]
	protected float FireVibrationAmplitude;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	[Header("VFX")]
	[Tooltip("The fire VFX initialization info")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo FireVFXInitializationInfo;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	[Tooltip("The location to spawn the fire VFX")]
	[SerializeField]
	protected Transform FireVFXSpawnRoot;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	[Tooltip("How the VFX attaches to the spawn root. If parent, follows the transform. If world, spawns at the transform and stays there.")]
	[SerializeField]
	protected ESAAttachTypes FireVFXAttachType;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	[Header("Mag")]
	[SerializeField]
	[Tooltip("The mag's prefab that will be spawned and inserted into the gun")]
	protected GameObject PF_Mag;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	[Tooltip("Where the player has to put the mag to be inserted into the gun")]
	[SerializeField]
	protected ZNMagInsertZone MagInsertZone;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	[Tooltip("The object we use to determine where the mag will be in the gun")]
	[SerializeField]
	protected GameObject MagRoot;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[Tooltip("The distance the mag starts from the root itself when it is first inserted into the gun")]
	[SerializeField]
	protected Vector3 MagRootStartOffset;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
	[Tooltip("If we should automatically eject the magazine when out of ammo")]
	[SerializeField]
	protected bool bAutoEjectMagWhenOutOfAmmo;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31D")]
	[SerializeField]
	[Tooltip("If inserting a mag should instantly reload the weapon")]
	protected bool bReloadWhenInsertMag;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	[SerializeField]
	[Tooltip("The time in seconds it takes for the mag to get inserted into the gun")]
	protected float InsertMagTime;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	[Tooltip("The reload info for this weapon")]
	[SerializeField]
	protected FZNReloadInfo ReloadInfo;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	[Header("SFX")]
	[Tooltip("SFX to play when firing the weapon")]
	[SerializeField]
	protected Event FireSFX;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	[Tooltip("SFX to play when we can't fire for no ammo or an empty magazine")]
	[SerializeField]
	protected Event EmptyFireSFX;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	[Tooltip("SFX to play when ejecting the magazine")]
	[SerializeField]
	protected Event EjectMagSFX;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	[SerializeField]
	[Tooltip("SFX to play when inserting the magazine")]
	protected Event InsertMagSFX;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	[SerializeField]
	[Tooltip("SFX to play when reloading")]
	protected Event ReloadSFX;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	[SerializeField]
	[Tooltip("The ammo count RTPC to update when firing.")]
	protected RTPC AmmoCountRTPC;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
	[SerializeField]
	[Tooltip("The ammo count RTPC type. If set to Curve, uses the VeryLowAmmoThreshold for the curve ceiling (low and semi low are ignored).")]
	protected EZNGunWeaponRTPCTypes AmmoCountRTPCType;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
	[Tooltip("The number of bullets in the magazine when we start using the RTPC for the very low ammo modifier")]
	[SerializeField]
	protected int VeryLowAmmoThreshold;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
	[SerializeField]
	[Tooltip("The number of bullets in the magazine when we start using the RTPC for the low ammo modifier")]
	protected int LowAmmoThreshold;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
	[SerializeField]
	[Tooltip("The number of bullets in the magazine when we start using the RTPC for the semi low ammo modifier")]
	protected int SemiLowAmmoThreshold;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
	protected bool bUsesAmmo;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
	protected int MaxAmmo;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
	protected int ActivateAmmoCost;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
	protected float HoldActivationIntervalTime;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	protected bool bWeaponFireDisabled;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x381")]
	protected bool bInfiniteAmmo;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x382")]
	protected bool bFireOnCooldown;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x383")]
	protected bool bHasBufferedFire;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
	protected float LastFireTime;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
	protected bool bFiringHoldWeapon;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
	protected float CurrentHoldActivationIntervalTime;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
	protected int CurrentNumHoldActivations;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
	protected ZNMag MagObject;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
	protected bool bInsertingMag;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
	protected float InsertingMagTime;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
	protected Vector3 StartInsertMagLocation;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
	protected int CurrentAmmo;

	[Token(Token = "0x600118F")]
	[Address(RVA = "0xC6F6E0", Offset = "0xC6F6E0", VA = "0xC6F6E0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001190")]
	[Address(RVA = "0xC6DB04", Offset = "0xC6DB04", VA = "0xC6DB04", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001191")]
	[Address(RVA = "0xC6F834", Offset = "0xC6F834", VA = "0xC6F834", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001192")]
	[Address(RVA = "0xC6DDA4", Offset = "0xC6DDA4", VA = "0xC6DDA4", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001193")]
	[Address(RVA = "0xC6FBE0", Offset = "0xC6FBE0", VA = "0xC6FBE0", Slot = "14")]
	public override void PressTrigger()
	{
	}

	[Token(Token = "0x6001194")]
	[Address(RVA = "0xC6FCB0", Offset = "0xC6FCB0", VA = "0xC6FCB0", Slot = "15")]
	public override void ReleaseTrigger()
	{
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0xC6FED0", Offset = "0xC6FED0", VA = "0xC6FED0")]
	public void ProxyTryFireWeapon()
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0xC6D0D8", Offset = "0xC6D0D8", VA = "0xC6D0D8", Slot = "52")]
	protected virtual void TryFireWeapon(bool bGiveFailureFeedback = true)
	{
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0xC6FEE4", Offset = "0xC6FEE4", VA = "0xC6FEE4", Slot = "53")]
	protected virtual void FireWeapon()
	{
	}

	[Token(Token = "0x6001198")]
	[Address(RVA = "0xC6FE58", Offset = "0xC6FE58", VA = "0xC6FE58")]
	[IteratorStateMachine(typeof(<EndFireOnCooldownAfterDelay>d__58))]
	protected IEnumerator EndFireOnCooldownAfterDelay(float InDelayTime)
	{
		return null;
	}

	[Token(Token = "0x6001199")]
	[Address(RVA = "0xC7022C", Offset = "0xC7022C", VA = "0xC7022C", Slot = "54")]
	protected virtual void StopFireHoldWeapon()
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0xC6D4EC", Offset = "0xC6D4EC", VA = "0xC6D4EC")]
	protected void VibrateWeaponController(float InVibrationAmplitude, float InVibrationTime)
	{
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0xC7023C", Offset = "0xC7023C", VA = "0xC7023C")]
	[IteratorStateMachine(typeof(<EndVibrationAfterDelay>d__61))]
	protected IEnumerator EndVibrationAfterDelay(float InDelayTime, OVRInput.Controller InVibrationController)
	{
		return null;
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0xC6BBF8", Offset = "0xC6BBF8", VA = "0xC6BBF8")]
	public ZNMag CreateMag()
	{
		return null;
	}

	[Token(Token = "0x600119D")]
	[Address(RVA = "0xC702DC", Offset = "0xC702DC", VA = "0xC702DC", Slot = "55")]
	public virtual void EjectMag()
	{
	}

	[Token(Token = "0x600119E")]
	[Address(RVA = "0xC703B0", Offset = "0xC703B0", VA = "0xC703B0", Slot = "56")]
	public virtual void InsertMag(ZNMag NewMagObject)
	{
	}

	[Token(Token = "0x600119F")]
	[Address(RVA = "0xC7056C", Offset = "0xC7056C", VA = "0xC7056C", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0xC6F9EC", Offset = "0xC6F9EC", VA = "0xC6F9EC")]
	protected void UpdateMaxAmmo()
	{
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0xC6D4E0", Offset = "0xC6D4E0", VA = "0xC6D4E0")]
	protected void SpendAmmo(int InSpentAmmo)
	{
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0xC6F780", Offset = "0xC6F780", VA = "0xC6F780")]
	protected void SetAmmo(int InAmmo)
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0xC70774", Offset = "0xC70774", VA = "0xC70774", Slot = "57")]
	public virtual void ReloadWeapon()
	{
	}

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0xC706D0", Offset = "0xC706D0", VA = "0xC706D0")]
	protected float GetAmmoCountRPTCValue(int InAmmo)
	{
		return default(float);
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0xC70800", Offset = "0xC70800", VA = "0xC70800")]
	protected void UpdateTrackedWeaponInfoForReload()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0xC70928", Offset = "0xC70928", VA = "0xC70928", Slot = "43")]
	protected override void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0xC70A18", Offset = "0xC70A18", VA = "0xC70A18")]
	public ZNGunWeaponAsset GetAssociatedGunWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0xC70A20", Offset = "0xC70A20", VA = "0xC70A20")]
	public bool DoesUseAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0xC70A28", Offset = "0xC70A28", VA = "0xC70A28")]
	public bool IsFireOnCooldown()
	{
		return default(bool);
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0xC6FDCC", Offset = "0xC6FDCC", VA = "0xC6FDCC")]
	public float GetFireOnCooldownTime()
	{
		return default(float);
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0xC70A30", Offset = "0xC70A30", VA = "0xC70A30")]
	public bool HasMag()
	{
		return default(bool);
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0xC70A90", Offset = "0xC70A90", VA = "0xC70A90")]
	public ZNMagInsertZone GetMagInsertZone()
	{
		return null;
	}

	[Token(Token = "0x60011AD")]
	[Address(RVA = "0xC70A98", Offset = "0xC70A98", VA = "0xC70A98")]
	public bool HasMaxAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x60011AE")]
	[Address(RVA = "0xC701DC", Offset = "0xC701DC", VA = "0xC701DC")]
	public bool IsOutOfAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x60011AF")]
	[Address(RVA = "0xC70AAC", Offset = "0xC70AAC", VA = "0xC70AAC")]
	public bool HasInfiniteAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x60011B0")]
	[Address(RVA = "0xC6D774", Offset = "0xC6D774", VA = "0xC6D774", Slot = "58")]
	public virtual bool CanFire(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B1")]
	[Address(RVA = "0xC70AB4", Offset = "0xC70AB4", VA = "0xC70AB4", Slot = "59")]
	public virtual bool CanEjectMag(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B2")]
	[Address(RVA = "0xC70BDC", Offset = "0xC70BDC", VA = "0xC70BDC", Slot = "60")]
	public virtual bool CanMagBeInserted(ZNMag InMagObject, bool bInRequireGrabbed)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B3")]
	[Address(RVA = "0xC70D18", Offset = "0xC70D18", VA = "0xC70D18", Slot = "61")]
	protected virtual bool CanMagBeInsertedOverOtherMag()
	{
		return default(bool);
	}

	[Token(Token = "0x60011B4")]
	[Address(RVA = "0xC70D20", Offset = "0xC70D20", VA = "0xC70D20", Slot = "62")]
	public virtual bool CanReloadWeapon()
	{
		return default(bool);
	}

	[Token(Token = "0x60011B5")]
	[Address(RVA = "0xC70D34", Offset = "0xC70D34", VA = "0xC70D34")]
	public int GetCurrentAmmo()
	{
		return default(int);
	}

	[Token(Token = "0x60011B6")]
	[Address(RVA = "0xC70D3C", Offset = "0xC70D3C", VA = "0xC70D3C")]
	public int GetMaxAmmo()
	{
		return default(int);
	}

	[Token(Token = "0x60011B7")]
	[Address(RVA = "0xC70D44", Offset = "0xC70D44", VA = "0xC70D44")]
	public void DisableGun()
	{
	}

	[Token(Token = "0x60011B8")]
	[Address(RVA = "0xC70D50", Offset = "0xC70D50", VA = "0xC70D50")]
	public void EnableGun()
	{
	}

	[Token(Token = "0x60011B9")]
	[Address(RVA = "0xC6E1DC", Offset = "0xC6E1DC", VA = "0xC6E1DC")]
	public ZNGunWeapon()
	{
	}
}
[Token(Token = "0x2000278")]
public class ZNLaserSight : MonoBehaviour
{
	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The laser dot cube object for decals")]
	[SerializeField]
	protected GameObject LaserDotCube;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Transform TraceRootTransform;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected LayerMask LaserSightLayerMask;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float LaserSightRange;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected LineRenderer LaserSightLine;

	[Token(Token = "0x60011C6")]
	[Address(RVA = "0xC70FA8", Offset = "0xC70FA8", VA = "0xC70FA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011C7")]
	[Address(RVA = "0xC70FF8", Offset = "0xC70FF8", VA = "0xC70FF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60011C8")]
	[Address(RVA = "0xC70FFC", Offset = "0xC70FFC", VA = "0xC70FFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60011C9")]
	[Address(RVA = "0xC6BF78", Offset = "0xC6BF78", VA = "0xC6BF78")]
	public void InitializeLaserSight(Transform InTraceRootTransform, LayerMask InLayerMask, float InLaserSightRange)
	{
	}

	[Token(Token = "0x60011CA")]
	[Address(RVA = "0xC71000", Offset = "0xC71000", VA = "0xC71000")]
	protected void UpdateLaserSight()
	{
	}

	[Token(Token = "0x60011CB")]
	[Address(RVA = "0xC71388", Offset = "0xC71388", VA = "0xC71388")]
	public ZNLaserSight()
	{
	}
}
[Token(Token = "0x2000279")]
public class ZNMag : ZNGrabObjectBase
{
	[Token(Token = "0x200027A")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameToAddForce>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody MagRigidbody;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Force;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ZNMag <>4__this;

		[Token(Token = "0x170000E4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xC71D3C", Offset = "0xC71D3C", VA = "0xC71D3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0xC71D84", Offset = "0xC71D84", VA = "0xC71D84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xC71ACC", Offset = "0xC71ACC", VA = "0xC71ACC")]
		[DebuggerHidden]
		public <WaitOneFrameToAddForce>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xC71C78", Offset = "0xC71C78", VA = "0xC71C78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xC71C7C", Offset = "0xC71C7C", VA = "0xC71C7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xC71D44", Offset = "0xC71D44", VA = "0xC71D44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027B")]
	[CompilerGenerated]
	private sealed class <RemoveRigidbody>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMag <>4__this;

		[Token(Token = "0x170000E6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011E7")]
			[Address(RVA = "0xC71E8C", Offset = "0xC71E8C", VA = "0xC71E8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011E9")]
			[Address(RVA = "0xC71ED4", Offset = "0xC71ED4", VA = "0xC71ED4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xC71AF4", Offset = "0xC71AF4", VA = "0xC71AF4")]
		[DebuggerHidden]
		public <RemoveRigidbody>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xC71D8C", Offset = "0xC71D8C", VA = "0xC71D8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xC71D90", Offset = "0xC71D90", VA = "0xC71D90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xC71E94", Offset = "0xC71E94", VA = "0xC71E94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027C")]
	[CompilerGenerated]
	private sealed class <CleanupEjectedMag>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMag <>4__this;

		[Token(Token = "0x170000E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011ED")]
			[Address(RVA = "0xC71FCC", Offset = "0xC71FCC", VA = "0xC71FCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xC72014", Offset = "0xC72014", VA = "0xC72014", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xC71B1C", Offset = "0xC71B1C", VA = "0xC71B1C")]
		[DebuggerHidden]
		public <CleanupEjectedMag>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xC71EDC", Offset = "0xC71EDC", VA = "0xC71EDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xC71EE0", Offset = "0xC71EE0", VA = "0xC71EE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xC71FD4", Offset = "0xC71FD4", VA = "0xC71FD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Tooltip("The weapon class that we can insert this mag into")]
	[SerializeField]
	protected SubclassOf<ZNWeaponBase> InsertableWeaponClass;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[Tooltip("The force applied to the mag's eject properties")]
	[SerializeField]
	protected float MagEjectForce;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	[Tooltip("The time in seconds until the ejected mag is cleaned up and destroyed on the ground")]
	[SerializeField]
	protected float CleanupEjectedMagTime;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	protected ZNGunWeapon InsertedWeapon;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	protected bool bEjected;

	[Token(Token = "0x60011CC")]
	[Address(RVA = "0xC71398", Offset = "0xC71398", VA = "0xC71398", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60011CD")]
	[Address(RVA = "0xC713A0", Offset = "0xC713A0", VA = "0xC713A0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60011CE")]
	[Address(RVA = "0xC713A8", Offset = "0xC713A8", VA = "0xC713A8", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0xC713C4", Offset = "0xC713C4", VA = "0xC713C4")]
	public void OneHandedInsertMagIntoZone()
	{
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0xC7162C", Offset = "0xC7162C", VA = "0xC7162C")]
	public void TryForceInsertMagIntoWeapon(ZNGunWeapon InGunWeapon)
	{
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0xC716F0", Offset = "0xC716F0", VA = "0xC716F0", Slot = "48")]
	public virtual void Insert(ZNGunWeapon InInsertWeapon)
	{
	}

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0xC7178C", Offset = "0xC7178C", VA = "0xC7178C", Slot = "49")]
	public virtual void Eject()
	{
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0xC71960", Offset = "0xC71960", VA = "0xC71960")]
	[IteratorStateMachine(typeof(<WaitOneFrameToAddForce>d__12))]
	protected IEnumerator WaitOneFrameToAddForce(Rigidbody MagRigidbody, Vector3 Force)
	{
		return null;
	}

	[Token(Token = "0x60011D4")]
	[Address(RVA = "0xC719FC", Offset = "0xC719FC", VA = "0xC719FC")]
	[IteratorStateMachine(typeof(<RemoveRigidbody>d__13))]
	protected IEnumerator RemoveRigidbody()
	{
		return null;
	}

	[Token(Token = "0x60011D5")]
	[Address(RVA = "0xC71A64", Offset = "0xC71A64", VA = "0xC71A64")]
	[IteratorStateMachine(typeof(<CleanupEjectedMag>d__14))]
	protected IEnumerator CleanupEjectedMag()
	{
		return null;
	}

	[Token(Token = "0x60011D6")]
	[Address(RVA = "0xC71B44", Offset = "0xC71B44", VA = "0xC71B44", Slot = "40")]
	public override bool CanBeGrabbed(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0xC71C28", Offset = "0xC71C28", VA = "0xC71C28")]
	public SubclassOf<ZNWeaponBase> GetInsertableWeaponClass()
	{
		return null;
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0xC70CC0", Offset = "0xC70CC0", VA = "0xC70CC0")]
	public Type GetInsertableWeaponClassType()
	{
		return null;
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0xC71C30", Offset = "0xC71C30", VA = "0xC71C30", Slot = "44")]
	public override bool CanChangeObjectReturnPoint()
	{
		return default(bool);
	}

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0xC71C38", Offset = "0xC71C38", VA = "0xC71C38")]
	public ZNGunWeapon GetInsertedWeapon()
	{
		return null;
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0xC71C40", Offset = "0xC71C40", VA = "0xC71C40")]
	public bool CanBeInserted(bool bInRequireGrabbed)
	{
		return default(bool);
	}

	[Token(Token = "0x60011DC")]
	[Address(RVA = "0xC71C5C", Offset = "0xC71C5C", VA = "0xC71C5C")]
	public bool IsEjected()
	{
		return default(bool);
	}

	[Token(Token = "0x60011DD")]
	[Address(RVA = "0xC71C64", Offset = "0xC71C64", VA = "0xC71C64")]
	public ZNMag()
	{
	}
}
[Token(Token = "0x200027D")]
public class ZNMagSlideZone : MonoBehaviour
{
	[Token(Token = "0x60011F0")]
	[Address(RVA = "0xC7201C", Offset = "0xC7201C", VA = "0xC7201C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0xC72020", Offset = "0xC72020", VA = "0xC72020")]
	private void Update()
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0xC72024", Offset = "0xC72024", VA = "0xC72024")]
	public ZNMagSlideZone()
	{
	}
}
[Token(Token = "0x200027E")]
public class ZNMeleeHitbox : MonoBehaviour
{
	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOnMeleeTriggerEntered OnMeleeTriggerEnteredDel;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FOnMeleeTriggerExited OnMeleeTriggerExitedDel;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected List<IZNDamageable> DamageableOverlaps;

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0xC7202C", Offset = "0xC7202C", VA = "0xC7202C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0xC720A0", Offset = "0xC720A0", VA = "0xC720A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0xC720A4", Offset = "0xC720A4", VA = "0xC720A4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0xC721E4", Offset = "0xC721E4", VA = "0xC721E4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0xC722E0", Offset = "0xC722E0", VA = "0xC722E0")]
	public List<IZNDamageable> GetDamageableOverlaps()
	{
		return null;
	}

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0xC722E8", Offset = "0xC722E8", VA = "0xC722E8")]
	public ZNMeleeHitbox()
	{
	}
}
[Token(Token = "0x200027F")]
public class ZNMeleeWeapon : ZNWeaponBase
{
	[Token(Token = "0x2000280")]
	[CompilerGenerated]
	private sealed class <StartSwingActiveEnumerator>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMeleeWeapon <>4__this;

		[Token(Token = "0x170000EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600120C")]
			[Address(RVA = "0xC73884", Offset = "0xC73884", VA = "0xC73884", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600120E")]
			[Address(RVA = "0xC738CC", Offset = "0xC738CC", VA = "0xC738CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xC72D10", Offset = "0xC72D10", VA = "0xC72D10")]
		[DebuggerHidden]
		public <StartSwingActiveEnumerator>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xC73608", Offset = "0xC73608", VA = "0xC73608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xC7360C", Offset = "0xC7360C", VA = "0xC7360C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xC7388C", Offset = "0xC7388C", VA = "0xC7388C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000281")]
	[CompilerGenerated]
	private sealed class <StartSwingCooldownEnumerator>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNMeleeWeapon <>4__this;

		[Token(Token = "0x170000EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001212")]
			[Address(RVA = "0xC73990", Offset = "0xC73990", VA = "0xC73990", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001214")]
			[Address(RVA = "0xC739D8", Offset = "0xC739D8", VA = "0xC739D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xC72DA0", Offset = "0xC72DA0", VA = "0xC72DA0")]
		[DebuggerHidden]
		public <StartSwingCooldownEnumerator>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xC738D4", Offset = "0xC738D4", VA = "0xC738D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xC738D8", Offset = "0xC738D8", VA = "0xC738D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xC73998", Offset = "0xC73998", VA = "0xC73998", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[Header("Components")]
	[Tooltip("The melee hitbox")]
	[SerializeField]
	protected ZNMeleeHitbox MeleeHitbox;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Header("Melee")]
	[Tooltip("How long in seconds that a position history will be stored for")]
	[SerializeField]
	protected float PositionHistoryStorageTime;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	[Tooltip("The time in seconds that the vibration effect lasts when hitting a damageable")]
	[Header("Vibration")]
	[SerializeField]
	protected float DamageHitVibrationTime;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Tooltip("The amplitude/intensity value to use for the vibration effect when hitting a damageable--one being the strongest vibration")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float DamageHitVibrationAmplitude;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[SerializeField]
	[Tooltip("The prefab for the weapon trail VFX")]
	[Header("VFX")]
	protected GameObject SwingTrailVFX;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[Header("SFX")]
	[Tooltip("SFX to play when hitting with melee")]
	[SerializeField]
	protected Event MeleeHitSFX;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[SerializeField]
	[Tooltip("SFX to play when whooshing with the melee hit")]
	protected Event MeleeWhooshSFX;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	protected float SwingStartDistance;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	protected float AngledSwingStartDistance;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	protected float SwingStartRotation;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
	protected float SwingStartDuration;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	protected float SwingActiveDuration;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	protected float SwingCooldown;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	protected float SwingTrailVFXStartDistance;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
	protected float SwingTrailVFXStartRotation;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private List<SAPositionHistory> PositionHistories;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private bool bSwingActive;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F1")]
	private bool bEnergyAttack;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	protected List<IZNDamageable> CurrentSwingDamagedActors;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private bool bSwingOnCooldown;

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0xC722F0", Offset = "0xC722F0", VA = "0xC722F0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0xC722F4", Offset = "0xC722F4", VA = "0xC722F4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0xC7231C", Offset = "0xC7231C", VA = "0xC7231C", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0xC72800", Offset = "0xC72800", VA = "0xC72800", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0xC7235C", Offset = "0xC7235C", VA = "0xC7235C")]
	protected void UpdatePositionHistories()
	{
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0xC72894", Offset = "0xC72894", VA = "0xC72894")]
	protected void ClearPositionHistories()
	{
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0xC72574", Offset = "0xC72574", VA = "0xC72574")]
	protected void CheckForStartSwing()
	{
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0xC729F0", Offset = "0xC729F0", VA = "0xC729F0", Slot = "52")]
	protected virtual void StartSwing()
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0xC72CA8", Offset = "0xC72CA8", VA = "0xC72CA8")]
	[IteratorStateMachine(typeof(<StartSwingActiveEnumerator>d__28))]
	protected IEnumerator StartSwingActiveEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0xC72D38", Offset = "0xC72D38", VA = "0xC72D38")]
	[IteratorStateMachine(typeof(<StartSwingCooldownEnumerator>d__29))]
	protected IEnumerator StartSwingCooldownEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0xC72DC8", Offset = "0xC72DC8", VA = "0xC72DC8")]
	protected void OnMeleeTriggerEntered(IZNDamageable NewDamageable)
	{
	}

	[Token(Token = "0x6001204")]
	[Address(RVA = "0xC72DE4", Offset = "0xC72DE4", VA = "0xC72DE4", Slot = "53")]
	protected virtual void TryInflictDamage(IZNDamageable HitDamageable, bool bInEnergyAttack, bool bForceSpecificBodyPartDamage = false, EZNBodyParts ForcedSpecificBodyPartDamage = EZNBodyParts.Unspecified)
	{
	}

	[Token(Token = "0x6001205")]
	[Address(RVA = "0xC734E8", Offset = "0xC734E8", VA = "0xC734E8", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0xC732F0", Offset = "0xC732F0", VA = "0xC732F0")]
	protected void VibrateWeaponController(float InVibrationAmplitude, float InVibrationTime)
	{
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0xC728E4", Offset = "0xC728E4", VA = "0xC728E4")]
	public bool CanSwing(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001208")]
	[Address(RVA = "0xC73508", Offset = "0xC73508", VA = "0xC73508")]
	public ZNMeleeWeapon()
	{
	}
}
[Token(Token = "0x2000282")]
public class ZNMultiTraceWeapon : ZNTraceWeapon
{
	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	protected ZNMultiTraceWeaponAsset AssociatedMultiTraceWeaponAsset;

	[Token(Token = "0x6001215")]
	[Address(RVA = "0xC739E0", Offset = "0xC739E0", VA = "0xC739E0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0xC739E4", Offset = "0xC739E4", VA = "0xC739E4", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0xC739E8", Offset = "0xC739E8", VA = "0xC739E8", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0xC739EC", Offset = "0xC739EC", VA = "0xC739EC", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0xC73A70", Offset = "0xC73A70", VA = "0xC73A70", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0xC73B6C", Offset = "0xC73B6C", VA = "0xC73B6C")]
	public ZNMultiTraceWeaponAsset GetAssociatedMultiTraceWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0xC73B74", Offset = "0xC73B74", VA = "0xC73B74")]
	public ZNMultiTraceWeapon()
	{
	}
}
[Token(Token = "0x2000283")]
public class ZNPersistentTraceWeapon : ZNTraceWeapon
{
	[Token(Token = "0x2000285")]
	[CompilerGenerated]
	private sealed class <TryDecreaseDamage>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNPersistentTraceWeapon <>4__this;

		[Token(Token = "0x170000EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001231")]
			[Address(RVA = "0xC74970", Offset = "0xC74970", VA = "0xC74970", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001233")]
			[Address(RVA = "0xC749B8", Offset = "0xC749B8", VA = "0xC749B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xC743A8", Offset = "0xC743A8", VA = "0xC743A8")]
		[DebuggerHidden]
		public <TryDecreaseDamage>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xC7485C", Offset = "0xC7485C", VA = "0xC7485C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xC74860", Offset = "0xC74860", VA = "0xC74860", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xC74978", Offset = "0xC74978", VA = "0xC74978", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	protected ZNPersistentTraceWeaponAsset AssociatedPersistentTraceWeaponAsset;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[SerializeField]
	[Tooltip("If the damage should pierce through targets hit--uncheck if should only damage first target hit")]
	[Header("Persistent Trace Weapon Stats")]
	protected bool bPierceThroughTargets;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F1")]
	[SerializeField]
	[Tooltip("If the damage should decrease as it pierces enemies")]
	protected bool bDiminishDamageWhenPierced;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
	[SerializeField]
	[Range(0f, 1f)]
	[Tooltip("The percentage to diminish the damage by with each pierced enemy--1.0 being 100%")]
	protected float DiminishDamageWhenPiercedPercentage;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	[SerializeField]
	[Tooltip("How much to decrease damage per second by when not dealing damage to an enemy")]
	protected int DamageDecreaseAmount;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3FC")]
	[SerializeField]
	[Tooltip("How much damage needs to be done to up damage to next power level")]
	protected int DamageAmountForPowerLevelZero;

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	[Tooltip("How much damage needs to be done to up damage to next power level")]
	[SerializeField]
	protected int DamageAmountForPowerLevelOne;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
	[Tooltip("How much damage needs to be done to up damage to next power level")]
	[SerializeField]
	protected int DamageAmountForPowerLevelTwo;

	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	[Tooltip("How much damage needs to be done to up damage to next power level")]
	[SerializeField]
	protected int DamageAmountMax;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
	[Tooltip("How often we decrease the number of hits by 1 for power level recalculation")]
	[SerializeField]
	protected float NumHitsDecreaseRate;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[Tooltip("The number of hits that we lower by on each decrease")]
	[SerializeField]
	protected int NumHitsLoweredOnDecrease;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
	[Tooltip("How many hits are needed to be done to up damage to next power level")]
	[SerializeField]
	protected int NumHitsForPowerLevelZero;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	[SerializeField]
	[Tooltip("How many hits are needed to be done to up damage to next power level")]
	protected int NumHitsForPowerLevelOne;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
	[SerializeField]
	[Tooltip("How many hits are needed to be done to up damage to next power level")]
	protected int NumHitsForPowerLevelTwo;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	[Tooltip("How many hits are needed to be done to up damage to next power level")]
	[SerializeField]
	protected int NumHitsMax;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
	[Tooltip("If an increase in power level should make the controller vibration stronger")]
	[SerializeField]
	protected bool bIncreaseVibrationWithPowerLevel;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
	private float CurrentDamageDone;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
	private float CurrentNumHits;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	protected int CurrentDamagePowerLevel;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
	private bool bLandedHitRecently;

	[Token(Token = "0x600121C")]
	[Address(RVA = "0xC73B78", Offset = "0xC73B78", VA = "0xC73B78", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0xC73C08", Offset = "0xC73C08", VA = "0xC73C08", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0xC73C0C", Offset = "0xC73C0C", VA = "0xC73C0C", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0xC73C10", Offset = "0xC73C10", VA = "0xC73C10", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001220")]
	[Address(RVA = "0xC73C94", Offset = "0xC73C94", VA = "0xC73C94", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x6001221")]
	[Address(RVA = "0xC73D58", Offset = "0xC73D58", VA = "0xC73D58", Slot = "63")]
	protected override void CalculateTrace(bool bInEnergyAttack, out bool bHitDamageable)
	{
	}

	[Token(Token = "0x6001222")]
	[Address(RVA = "0xC73BA0", Offset = "0xC73BA0", VA = "0xC73BA0")]
	[IteratorStateMachine(typeof(<TryDecreaseDamage>d__26))]
	private IEnumerator TryDecreaseDamage()
	{
		return null;
	}

	[Token(Token = "0x6001223")]
	[Address(RVA = "0xC743D0", Offset = "0xC743D0", VA = "0xC743D0", Slot = "66")]
	protected virtual void ReevaluatePowerLevel()
	{
	}

	[Token(Token = "0x6001224")]
	[Address(RVA = "0xC73D38", Offset = "0xC73D38", VA = "0xC73D38")]
	protected void UpdateControllerVibration()
	{
	}

	[Token(Token = "0x6001225")]
	[Address(RVA = "0xC74430", Offset = "0xC74430", VA = "0xC74430", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x6001226")]
	[Address(RVA = "0xC744BC", Offset = "0xC744BC", VA = "0xC744BC", Slot = "35")]
	protected override void DoOneHandedLogic()
	{
	}

	[Token(Token = "0x6001227")]
	[Address(RVA = "0xC74638", Offset = "0xC74638", VA = "0xC74638")]
	protected bool CanProgressOneHandedReload()
	{
		return default(bool);
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0xC74674", Offset = "0xC74674", VA = "0xC74674", Slot = "50")]
	public override int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0xC74754", Offset = "0xC74754", VA = "0xC74754")]
	public int GetCurrentDamagePowerLevel()
	{
		return default(int);
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0xC7475C", Offset = "0xC7475C", VA = "0xC7475C")]
	public ZNPersistentTraceWeapon()
	{
	}
}
[Token(Token = "0x2000286")]
public class ZNProjectileWeapon : ZNRangedWeapon
{
	[Token(Token = "0x2000287")]
	[CompilerGenerated]
	private sealed class <AbilityEffectsDuration>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZNProjectileWeapon <>4__this;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNEnemyBase InAffectedEnemy;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<SAPropertyModInstance> InAppliedModsList;

		[Token(Token = "0x170000F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001245")]
			[Address(RVA = "0xC75668", Offset = "0xC75668", VA = "0xC75668", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0xC756B0", Offset = "0xC756B0", VA = "0xC756B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xC751C4", Offset = "0xC751C4", VA = "0xC751C4")]
		[DebuggerHidden]
		public <AbilityEffectsDuration>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xC755F4", Offset = "0xC755F4", VA = "0xC755F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xC755F8", Offset = "0xC755F8", VA = "0xC755F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xC75670", Offset = "0xC75670", VA = "0xC75670", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	protected ZNProjectileWeaponAsset AssociatedProjectileWeaponAsset;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	protected float ProjectileAOERadius;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
	protected GameObject PF_FireableProjectileToUse;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
	[Header("Projectile Weapon")]
	[Tooltip("The prefab for the projectile that will be fired from the weapon")]
	[SerializeField]
	protected GameObject PF_FireableProjectile;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	[Tooltip("Additional velocity that will be used for the projectile's speed")]
	[SerializeField]
	protected float ProjectileSpeed;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
	[Tooltip("How long the ability effects should last--if the weapon uses one")]
	[SerializeField]
	protected float AbilityDurationSeconds;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	[SerializeField]
	[Tooltip("The object we use to determine the start position from where the projectile will be fired")]
	protected GameObject ProjectileRoot;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	[SerializeField]
	[Tooltip("If this weapon's projectile overrides stagger")]
	private bool bOverrideStagger;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
	[Tooltip("The damage amount to use if overriding stagger")]
	[SerializeField]
	private int StaggerOverrideDamage;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	private WaitForSeconds AbilityDurationYield;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	protected List<ZNProjectileBase> ActiveSpawnedProjectiles;

	[Token(Token = "0x6001234")]
	[Address(RVA = "0xC749C0", Offset = "0xC749C0", VA = "0xC749C0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001235")]
	[Address(RVA = "0xC749C8", Offset = "0xC749C8", VA = "0xC749C8", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001236")]
	[Address(RVA = "0xC74AA0", Offset = "0xC74AA0", VA = "0xC74AA0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001237")]
	[Address(RVA = "0xC74AA8", Offset = "0xC74AA8", VA = "0xC74AA8", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001238")]
	[Address(RVA = "0xC74C00", Offset = "0xC74C00", VA = "0xC74C00", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x6001239")]
	[Address(RVA = "0xC74C24", Offset = "0xC74C24", VA = "0xC74C24", Slot = "63")]
	protected virtual ZNProjectileBase FireProjectile()
	{
		return null;
	}

	[Token(Token = "0x600123A")]
	[Address(RVA = "0xC74FB8", Offset = "0xC74FB8", VA = "0xC74FB8", Slot = "64")]
	public virtual void UseAbilityEffect(List<FZNDamageInfo> InDamageInfos)
	{
	}

	[Token(Token = "0x600123B")]
	[Address(RVA = "0xC74FBC", Offset = "0xC74FBC", VA = "0xC74FBC", Slot = "65")]
	protected virtual void RemoveAbilityEffects(ZNEnemyBase InAffectedEnemy, List<SAPropertyModInstance> InAppliedModsList)
	{
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0xC75148", Offset = "0xC75148", VA = "0xC75148")]
	[IteratorStateMachine(typeof(<AbilityEffectsDuration>d__19))]
	protected IEnumerator AbilityEffectsDuration(ZNEnemyBase InAffectedEnemy, List<SAPropertyModInstance> InAppliedModsList)
	{
		return null;
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0xC751EC", Offset = "0xC751EC", VA = "0xC751EC", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x600123E")]
	[Address(RVA = "0xC75288", Offset = "0xC75288", VA = "0xC75288", Slot = "36")]
	protected override void DoButtonTwoLogic()
	{
	}

	[Token(Token = "0x600123F")]
	[Address(RVA = "0xC75314", Offset = "0xC75314", VA = "0xC75314")]
	protected void ProjectileDestroyed(GameObject DestroyedGameObject)
	{
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0xC7548C", Offset = "0xC7548C", VA = "0xC7548C")]
	public ZNProjectileWeaponAsset GetAssociatedProjectileWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001241")]
	[Address(RVA = "0xC75494", Offset = "0xC75494", VA = "0xC75494")]
	public ZNProjectileWeapon()
	{
	}
}
[Token(Token = "0x2000288")]
public class ZNQuantityWeapon : ZNWeaponBase
{
	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private ZNQuantityWeaponAsset AssociatedQuantityWeaponAsset;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public FOnQuantityUpdated OnQuantityUpdatedDel;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Tooltip("The object that shows if we have any remaining quantity left or not")]
	[SerializeField]
	private GameObject QuantityVisual;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	protected GameObject PF_SpawnObject;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	protected ZNWeaponAsset SO_WeaponAssetToAttach;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	protected int MaxQuantity;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
	protected int CurrentQuantity;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	protected float RegenerateQuantityTime;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	protected float CurrentRegnerateQuantityTime;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	protected bool bAtMaxQuantity;

	[Token(Token = "0x6001248")]
	[Address(RVA = "0xC756B8", Offset = "0xC756B8", VA = "0xC756B8", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001249")]
	[Address(RVA = "0xC756BC", Offset = "0xC756BC", VA = "0xC756BC", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600124A")]
	[Address(RVA = "0xC756C0", Offset = "0xC756C0", VA = "0xC756C0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600124B")]
	[Address(RVA = "0xC75730", Offset = "0xC75730", VA = "0xC75730", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600124C")]
	[Address(RVA = "0xC75734", Offset = "0xC75734", VA = "0xC75734", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600124D")]
	[Address(RVA = "0xC75904", Offset = "0xC75904", VA = "0xC75904")]
	protected ZNGrabObjectBase CreateObject()
	{
		return null;
	}

	[Token(Token = "0x600124E")]
	[Address(RVA = "0xC75C8C", Offset = "0xC75C8C", VA = "0xC75C8C", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x600124F")]
	[Address(RVA = "0xC75D4C", Offset = "0xC75D4C", VA = "0xC75D4C")]
	protected void SpendQuantity(int InSpentQuantity)
	{
	}

	[Token(Token = "0x6001250")]
	[Address(RVA = "0xC75724", Offset = "0xC75724", VA = "0xC75724")]
	protected void RegenerateQuantity(int InRegeneratedQuantity)
	{
	}

	[Token(Token = "0x6001251")]
	[Address(RVA = "0xC75804", Offset = "0xC75804", VA = "0xC75804")]
	protected void SetQuantity(int InQuantity)
	{
	}

	[Token(Token = "0x6001252")]
	[Address(RVA = "0xC75D58", Offset = "0xC75D58", VA = "0xC75D58")]
	protected void SpawnedObjectDestroyed(GameObject DestroyedGameObject)
	{
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0xC75FA4", Offset = "0xC75FA4", VA = "0xC75FA4")]
	protected void SpawnedObjectProjectileCreated(ZNProjectileBase CreatedProjectile)
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0xC76030", Offset = "0xC76030", VA = "0xC76030", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0xC765E0", Offset = "0xC765E0", VA = "0xC765E0", Slot = "40")]
	public override bool CanBeGrabbed(out string OutFailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001256")]
	[Address(RVA = "0xC7664C", Offset = "0xC7664C", VA = "0xC7664C", Slot = "41")]
	public override bool CanBePickedUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6001257")]
	[Address(RVA = "0xC76204", Offset = "0xC76204", VA = "0xC76204")]
	public bool CanSpawnObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0xC76694", Offset = "0xC76694", VA = "0xC76694")]
	public int GetCurrentQuantity()
	{
		return default(int);
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0xC7669C", Offset = "0xC7669C", VA = "0xC7669C")]
	public int GetMaxQuantity()
	{
		return default(int);
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0xC76684", Offset = "0xC76684", VA = "0xC76684")]
	public bool HasAnyQuantity()
	{
		return default(bool);
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0xC766A4", Offset = "0xC766A4", VA = "0xC766A4")]
	public ZNWeaponAsset GetSO_WeaponAssetToAttach()
	{
		return null;
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0xC766AC", Offset = "0xC766AC", VA = "0xC766AC")]
	public ZNQuantityWeapon()
	{
	}
}
[Token(Token = "0x2000289")]
public class ZNRangedWeapon : ZNGunWeapon
{
	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
	protected ZNRangedWeaponAsset AssociatedRangedWeaponAsset;

	[Token(Token = "0x600125D")]
	[Address(RVA = "0xC749C4", Offset = "0xC749C4", VA = "0xC749C4", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0xC74A9C", Offset = "0xC74A9C", VA = "0xC74A9C", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0xC74AA4", Offset = "0xC74AA4", VA = "0xC74AA4", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0xC74B54", Offset = "0xC74B54", VA = "0xC74B54", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001261")]
	[Address(RVA = "0xC766CC", Offset = "0xC766CC", VA = "0xC766CC")]
	public ZNRangedWeaponAsset GetAssociatedRangedWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001262")]
	[Address(RVA = "0xC766D4", Offset = "0xC766D4", VA = "0xC766D4")]
	public float GetMaxSpread()
	{
		return default(float);
	}

	[Token(Token = "0x6001263")]
	[Address(RVA = "0xC75588", Offset = "0xC75588", VA = "0xC75588")]
	public ZNRangedWeapon()
	{
	}
}
[Token(Token = "0x200028A")]
public class ZNSingleTraceWeapon : ZNTraceWeapon
{
	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	protected ZNSingleTraceWeaponAsset AssociatedSingleTraceWeaponAsset;

	[Token(Token = "0x6001264")]
	[Address(RVA = "0xC76778", Offset = "0xC76778", VA = "0xC76778", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001265")]
	[Address(RVA = "0xC7677C", Offset = "0xC7677C", VA = "0xC7677C", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001266")]
	[Address(RVA = "0xC76780", Offset = "0xC76780", VA = "0xC76780", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0xC76784", Offset = "0xC76784", VA = "0xC76784", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0xC76808", Offset = "0xC76808", VA = "0xC76808", Slot = "53")]
	protected override void FireWeapon()
	{
	}

	[Token(Token = "0x6001269")]
	[Address(RVA = "0xC76860", Offset = "0xC76860", VA = "0xC76860")]
	public ZNSingleTraceWeaponAsset GetAssociatedSingleTraceWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0xC76868", Offset = "0xC76868", VA = "0xC76868")]
	public ZNSingleTraceWeapon()
	{
	}
}
[Token(Token = "0x200028B")]
public class ZNThrownWeapon : ZNWeaponBase
{
	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private ZNThrownWeaponAsset AssociatedThrownWeaponAsset;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public FOnProjectileCreated OnProjectileCreatedDel;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[Tooltip("The prefab for the projectile that we use when throwing the weapon")]
	[SerializeField]
	[Header("Thrown")]
	protected GameObject PF_ThrownProjectile;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[SerializeField]
	[Tooltip("The threshold for the magnitude to be considered a thrown weapon")]
	protected float ThrowMagnitudeThreshold;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	[SerializeField]
	[Tooltip("Additional velocity to use when throwing the weapon")]
	protected float AdditionalVelocityMultiplier;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private bool bCreatedProjectile;

	[Token(Token = "0x600126B")]
	[Address(RVA = "0xC6F5A8", Offset = "0xC6F5A8", VA = "0xC6F5A8", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0xC6F5B0", Offset = "0xC6F5B0", VA = "0xC6F5B0", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0xC6F638", Offset = "0xC6F638", VA = "0xC6F638", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0xC7686C", Offset = "0xC7686C", VA = "0xC7686C", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600126F")]
	[Address(RVA = "0xC7704C", Offset = "0xC7704C", VA = "0xC7704C")]
	public void DropInEditor(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0xC76E08", Offset = "0xC76E08", VA = "0xC76E08")]
	protected void CreateThrownProjectile(Vector3 InLinearVelocity, Vector3 InAngularVelocity)
	{
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0xC774E0", Offset = "0xC774E0", VA = "0xC774E0")]
	public ZNThrownWeaponAsset GetAssociatedThrownWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0xC76D18", Offset = "0xC76D18", VA = "0xC76D18")]
	public bool CanThrowWeapon(out string FailureReason)
	{
		return default(bool);
	}

	[Token(Token = "0x6001273")]
	[Address(RVA = "0xC774E8", Offset = "0xC774E8", VA = "0xC774E8", Slot = "47")]
	protected override bool ShouldPlayDropSFX()
	{
		return default(bool);
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0xC6ACD4", Offset = "0xC6ACD4", VA = "0xC6ACD4")]
	public ZNThrownWeapon()
	{
	}
}
[Token(Token = "0x200028C")]
public class ZNTraceWeapon : ZNRangedWeapon
{
	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	protected ZNTraceWeaponAsset AssociatedTraceWeaponAsset;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	[SerializeField]
	[Tooltip("The object we use to determine the trace start position")]
	[Header("Trace")]
	protected GameObject TraceRoot;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
	[Tooltip("The laser sight object")]
	[SerializeField]
	protected ZNLaserSight LaserSight;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
	[Tooltip("The initialization info for the VFX that plays when hitting an obstacle")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo ObstacleHitVFXInitializationInfo;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	[SerializeField]
	[Tooltip("How much range this weapon has")]
	protected float WeaponRange;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
	protected bool bUsesLaserSight;

	[Token(Token = "0x6001275")]
	[Address(RVA = "0xC6BE6C", Offset = "0xC6BE6C", VA = "0xC6BE6C", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001276")]
	[Address(RVA = "0xC6C024", Offset = "0xC6C024", VA = "0xC6C024", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001277")]
	[Address(RVA = "0xC6C218", Offset = "0xC6C218", VA = "0xC6C218", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0xC6CAD4", Offset = "0xC6CAD4", VA = "0xC6CAD4", Slot = "48")]
	public override void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0xC6CBA8", Offset = "0xC6CBA8", VA = "0xC6CBA8", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x600127A")]
	[Address(RVA = "0xC6CD8C", Offset = "0xC6CD8C", VA = "0xC6CD8C", Slot = "31")]
	public override void Drop(bool bReturnToPoint)
	{
	}

	[Token(Token = "0x600127B")]
	[Address(RVA = "0xC774F8", Offset = "0xC774F8", VA = "0xC774F8", Slot = "49")]
	public override void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x600127C")]
	[Address(RVA = "0xC74334", Offset = "0xC74334", VA = "0xC74334")]
	protected Vector3 CalculateSpreadForward(Transform InRotatePointTransform)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600127D")]
	[Address(RVA = "0xC77598", Offset = "0xC77598", VA = "0xC77598", Slot = "63")]
	protected virtual void CalculateTrace(bool bInEnergyAttack, out bool bHitDamageable)
	{
	}

	[Token(Token = "0x600127E")]
	[Address(RVA = "0xC77908", Offset = "0xC77908", VA = "0xC77908", Slot = "64")]
	public virtual bool IsLaserSightAllowed(int InTier)
	{
		return default(bool);
	}

	[Token(Token = "0x600127F")]
	[Address(RVA = "0xC779A4", Offset = "0xC779A4", VA = "0xC779A4")]
	public bool DoesUseLaserSight()
	{
		return default(bool);
	}

	[Token(Token = "0x6001280")]
	[Address(RVA = "0xC779AC", Offset = "0xC779AC", VA = "0xC779AC", Slot = "65")]
	public virtual bool CanShowLaserSight()
	{
		return default(bool);
	}

	[Token(Token = "0x6001281")]
	[Address(RVA = "0xC6D960", Offset = "0xC6D960", VA = "0xC6D960")]
	public ZNTraceWeapon()
	{
	}
}
[Token(Token = "0x200028D")]
public class ZNWeaponBase : ZNGrabObjectBase
{
	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public FOnTierChanged OnTierChangedDel;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public FOnEnergyUpdated OnEnergyUpdatedDel;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[Header("VFX")]
	[Tooltip("The initialization info for the VFX that plays when hitting an object")]
	[SerializeField]
	protected FSAPooledObjectInitializationInfo HitVFXInitializationInfo;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	protected ZNGameplayGameMode GameplayGameModeRef;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected ZNMainGameMode MainGameModeRef;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	protected ZNWeaponAsset AssociatedWeaponAsset;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	protected int CurrentTier;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	protected bool bUsesEnergy;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private FSAClampedFloatValue Energy;

	[Token(Token = "0x6001282")]
	[Address(RVA = "0xC6E24C", Offset = "0xC6E24C", VA = "0xC6E24C", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0xC6E46C", Offset = "0xC6E46C", VA = "0xC6E46C", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001284")]
	[Address(RVA = "0xC6E5A4", Offset = "0xC6E5A4", VA = "0xC6E5A4", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001285")]
	[Address(RVA = "0xC6C0CC", Offset = "0xC6C0CC", VA = "0xC6C0CC", Slot = "13")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0xC6E670", Offset = "0xC6E670", VA = "0xC6E670", Slot = "48")]
	public virtual void AssignWeaponAsset(ZNWeaponAsset InWeaponAsset)
	{
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0xC6E8C0", Offset = "0xC6E8C0", VA = "0xC6E8C0", Slot = "14")]
	public override void PressTrigger()
	{
	}

	[Token(Token = "0x6001288")]
	[Address(RVA = "0xC6EFCC", Offset = "0xC6EFCC", VA = "0xC6EFCC", Slot = "49")]
	public virtual void ChangeTier(int NewTier)
	{
	}

	[Token(Token = "0x6001289")]
	[Address(RVA = "0xC701A8", Offset = "0xC701A8", VA = "0xC701A8")]
	protected void SpendEnergy(float InSpentEnergy)
	{
	}

	[Token(Token = "0x600128A")]
	[Address(RVA = "0xC77B30", Offset = "0xC77B30", VA = "0xC77B30")]
	protected void RegenerateEnergy(float InRegeneratedEnergy)
	{
	}

	[Token(Token = "0x600128B")]
	[Address(RVA = "0xC77A3C", Offset = "0xC77A3C", VA = "0xC77A3C")]
	public void SetEnergy(float InEnergy)
	{
	}

	[Token(Token = "0x600128C")]
	[Address(RVA = "0xC77B64", Offset = "0xC77B64", VA = "0xC77B64")]
	protected void UpdatedTrackedWeaponInfoForDamage(FZNDamageInfo InDamageInfo)
	{
	}

	[Token(Token = "0x600128D")]
	[Address(RVA = "0xC6EDC4", Offset = "0xC6EDC4", VA = "0xC6EDC4")]
	protected void UpdateTrackedWeaponInfoForActivation()
	{
	}

	[Token(Token = "0x600128E")]
	[Address(RVA = "0xC737E4", Offset = "0xC737E4", VA = "0xC737E4")]
	protected void UpdateTrackedWeaponInfoForSuccessfulActivation()
	{
	}

	[Token(Token = "0x600128F")]
	[Address(RVA = "0xC77C94", Offset = "0xC77C94", VA = "0xC77C94")]
	public void NotifySuccessfulActivation()
	{
	}

	[Token(Token = "0x6001290")]
	[Address(RVA = "0xC77C98", Offset = "0xC77C98", VA = "0xC77C98")]
	protected void DamageEvent(FZNDamageInfo DamageInfo)
	{
	}

	[Token(Token = "0x6001291")]
	[Address(RVA = "0xC70A10", Offset = "0xC70A10", VA = "0xC70A10", Slot = "43")]
	protected override void PropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey)
	{
	}

	[Token(Token = "0x6001292")]
	[Address(RVA = "0xC762F0", Offset = "0xC762F0", VA = "0xC762F0", Slot = "39")]
	public override bool Grab(ZNMainCharacter InGrabbingCharacter, ZNHands InGrabbingHand)
	{
		return default(bool);
	}

	[Token(Token = "0x6001293")]
	[Address(RVA = "0xC7341C", Offset = "0xC7341C", VA = "0xC7341C")]
	public ZNWeaponBase GetTrueMasterWeaponBase()
	{
		return null;
	}

	[Token(Token = "0x6001294")]
	[Address(RVA = "0xC77D6C", Offset = "0xC77D6C", VA = "0xC77D6C")]
	public ZNWeaponAsset GetAssociatedWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0xC708A0", Offset = "0xC708A0", VA = "0xC708A0")]
	public ZNWeaponAsset GetTrueMasterWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0xC77D74", Offset = "0xC77D74", VA = "0xC77D74")]
	public int GetCurrentTier()
	{
		return default(int);
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0xC77D7C", Offset = "0xC77D7C", VA = "0xC77D7C")]
	public bool IsAtMaxTier()
	{
		return default(bool);
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0xC77D8C", Offset = "0xC77D8C", VA = "0xC77D8C")]
	public bool DoesUseEnergy()
	{
		return default(bool);
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0xC779B4", Offset = "0xC779B4", VA = "0xC779B4")]
	public FSAClampedFloatValue GetEnergy()
	{
		return null;
	}

	[Token(Token = "0x600129A")]
	[Address(RVA = "0xC700DC", Offset = "0xC700DC", VA = "0xC700DC")]
	public bool CanBeEnergyAttack()
	{
		return default(bool);
	}

	[Token(Token = "0x600129B")]
	[Address(RVA = "0xC77D94", Offset = "0xC77D94", VA = "0xC77D94", Slot = "50")]
	public virtual int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0xC77E24", Offset = "0xC77E24", VA = "0xC77E24")]
	public int GetCriticalDamage()
	{
		return default(int);
	}

	[Token(Token = "0x600129D")]
	[Address(RVA = "0xC77EB4", Offset = "0xC77EB4", VA = "0xC77EB4", Slot = "51")]
	public virtual int GetStagger()
	{
		return default(int);
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0xC77F40", Offset = "0xC77F40", VA = "0xC77F40")]
	public double GetEnergyDamageMultiplier()
	{
		return default(double);
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0xC70118", Offset = "0xC70118", VA = "0xC70118")]
	public float GetUseEnergyCost()
	{
		return default(float);
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0xC77FD0", Offset = "0xC77FD0", VA = "0xC77FD0")]
	public int GetCurrencyCost()
	{
		return default(int);
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0xC78060", Offset = "0xC78060", VA = "0xC78060")]
	public int GetUpgradeCost()
	{
		return default(int);
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0xC6F288", Offset = "0xC6F288", VA = "0xC6F288")]
	public ZNWeaponBase()
	{
	}
}
[Token(Token = "0x200028E")]
public static class ZNConsts
{
	[Token(Token = "0x4000BC4")]
	public const int LAYER_Default = 0;

	[Token(Token = "0x4000BC5")]
	public const int LAYER_UI = 5;

	[Token(Token = "0x4000BC6")]
	public const int LAYER_Invisible = 6;

	[Token(Token = "0x4000BC7")]
	public const int LAYER_Character = 7;

	[Token(Token = "0x4000BC8")]
	public const int LAYER_RoomBox = 8;

	[Token(Token = "0x4000BC9")]
	public const int LAYER_Furniture = 9;

	[Token(Token = "0x4000BCA")]
	public const int LAYER_Passthrough = 10;

	[Token(Token = "0x4000BCB")]
	public const int LAYER_Floor = 11;

	[Token(Token = "0x4000BCC")]
	public const int LAYER_Hand = 12;

	[Token(Token = "0x4000BCD")]
	public const int LAYER_Weapon = 13;

	[Token(Token = "0x4000BCE")]
	public const int LAYER_PlayerProjectile = 14;

	[Token(Token = "0x4000BCF")]
	public const int LAYER_Player = 15;

	[Token(Token = "0x4000BD0")]
	public const int LAYER_Damageable = 16;

	[Token(Token = "0x4000BD1")]
	public const int LAYER_GrabObject = 17;

	[Token(Token = "0x4000BD2")]
	public const int LAYER_GrabResponder = 18;

	[Token(Token = "0x4000BD3")]
	public const int LAYER_Discarded = 19;

	[Token(Token = "0x4000BD4")]
	public const int LAYER_Preview = 20;

	[Token(Token = "0x4000BD5")]
	public const int LAYER_BuildObject = 21;

	[Token(Token = "0x4000BD6")]
	public const int LAYER_Melee = 22;

	[Token(Token = "0x4000BD7")]
	public const int LAYER_Lever = 23;

	[Token(Token = "0x4000BD8")]
	public const int LAYER_LeverResponder = 24;

	[Token(Token = "0x4000BD9")]
	public const int LAYER_Finger = 25;

	[Token(Token = "0x4000BDA")]
	public const int LAYER_WorldUI = 26;

	[Token(Token = "0x4000BDB")]
	public const int LAYER_EnemyProjectile = 27;

	[Token(Token = "0x4000BDC")]
	public const int LAYER_VFXCollider = 28;

	[Token(Token = "0x4000BDD")]
	public const int LAYER_Uncollidable = 30;

	[Token(Token = "0x4000BDE")]
	public const int GrabLayerMask = 139264;

	[Token(Token = "0x4000BDF")]
	public const int ObjectReturnPointLayerMask = 64;

	[Token(Token = "0x4000BE0")]
	public const int TraceWeaponLayerMask = 136399616;

	[Token(Token = "0x4000BE1")]
	public const int TraceWeaponLayerMaskInclCharacter = 136399744;

	[Token(Token = "0x4000BE2")]
	public const int TeslaGunLayerMask = 2816;

	[Token(Token = "0x4000BE3")]
	public const int EnemyAttackLayerMask = 128;

	[Token(Token = "0x4000BE4")]
	public const int PreviewBuilderLayerMask = 2304;

	[Token(Token = "0x4000BE5")]
	public const int GrenadeProjectileDamageLayerMask = 136396928;

	[Token(Token = "0x4000BE6")]
	public const int GrenadeProjectileTraceLayerMask = 2816;

	[Token(Token = "0x4000BE7")]
	public const int CryoProjectileDamageLayerMask = 65536;

	[Token(Token = "0x4000BE8")]
	public const int ConstructionZombieToolThrowTraceLayerMask = 2130816;

	[Token(Token = "0x4000BE9")]
	public const int InvisibleLayerMask = 64;

	[Token(Token = "0x4000BEA")]
	public const int FloorTraceMask = 2048;

	[Token(Token = "0x4000BEB")]
	public const string SUCCESS = "SUCCESS";

	[Token(Token = "0x4000BEC")]
	public const string FAILURE_NullReference = "FAILURE_NullReference";

	[Token(Token = "0x4000BED")]
	public const string FAILURE_GamePaused = "FAILURE_GamePaused";

	[Token(Token = "0x4000BEE")]
	public const string FAILURE_FireCooldown = "FAILURE_FireCooldown";

	[Token(Token = "0x4000BEF")]
	public const string FAILURE_MissingMagazine = "FAILURE_MissingMagazine";

	[Token(Token = "0x4000BF0")]
	public const string FAILURE_NotEnoughAmmo = "FAILURE_NotEnoughAmmo";

	[Token(Token = "0x4000BF1")]
	public const string FAILURE_MidReload = "FAILURE_MidReload";

	[Token(Token = "0x4000BF2")]
	public const string FAILURE_NoCharge = "FAILURE_NoCharge";

	[Token(Token = "0x4000BF3")]
	public const string FAILURE_GunDisabled = "FAILURE_GunDisabled";

	[Token(Token = "0x4000BF4")]
	public const string FAILURE_InsertingMagazine = "FAILURE_InsertingMagazine";

	[Token(Token = "0x4000BF5")]
	public const string FAILURE_MaxAmmo = "FAILURE_MaxAmmo";

	[Token(Token = "0x4000BF6")]
	public const string FAILURE_DoesNotUseAmmo = "FAILURE_DoesNotUseAmmo";

	[Token(Token = "0x4000BF7")]
	public const string FAILURE_InfiniteAmmo = "FAILURE_InfiniteAmmo";

	[Token(Token = "0x4000BF8")]
	public const string FAILURE_SwingCooldown = "FAILURE_SwingCooldown";

	[Token(Token = "0x4000BF9")]
	public const string FAILURE_InvalidBuildLocation = "FAILURE_InvalidBuildLocation";

	[Token(Token = "0x4000BFA")]
	public const string FAILURE_BuilderNotReady = "FAILURE_BuilderNotReady";

	[Token(Token = "0x4000BFB")]
	public const string FAILURE_SetupPhaseBuilderDisabledAtStart = "FAILURE_SetupPhaseBuilderDisabledAtStart";

	[Token(Token = "0x4000BFC")]
	public const string FAILURE_ShopItem = "FAILURE_ShopItem";

	[Token(Token = "0x4000BFD")]
	public const string FAILURE_NotPrepped = "FAILURE_NotPrepped";

	[Token(Token = "0x4000BFE")]
	public const string FAILURE_MagInserted = "FAILURE_MagInserted";

	[Token(Token = "0x4000BFF")]
	public const string FAILURE_MagEjected = "FAILURE_MagEjected";

	[Token(Token = "0x4000C00")]
	public const string FAILURE_AlreadyGrabbed = "FAILURE_AlreadyGrabbed";

	[Token(Token = "0x4000C01")]
	public const string FAILURE_NotEnoughCurrency = "FAILURE_NotEnoughCurrency";

	[Token(Token = "0x4000C02")]
	public const string FAILURE_ReturnPointDoesNotAllowGrab = "FAILURE_ReturnPointDoesNotAllowGrab";

	[Token(Token = "0x4000C03")]
	public const string FAILURE_NoWeapon = "FAILURE_NoWeapon";

	[Token(Token = "0x4000C04")]
	public const string FAILURE_InvalidObject = "FAILURE_InvalidObject";

	[Token(Token = "0x4000C05")]
	public const string FAILURE_WeaponAtMaxTier = "FAILURE_WeaponAtMaxTier";

	[Token(Token = "0x4000C06")]
	public const string FAILURE_IntermissionNotActive = "FAILURE_IntermissionNotActive";

	[Token(Token = "0x4000C07")]
	public const string FAILURE_SpawnedShopItemIsGrabbed = "FAILURE_SpawnedShopItemIsGrabbed";

	[Token(Token = "0x4000C08")]
	public const string FAILURE_UpgraderHasObject = "FAILURE_UpgraderHasObject";

	[Token(Token = "0x4000C09")]
	public const string FAILURE_NoWeaponInInventory = "FAILURE_NoWeaponInInventory";

	[Token(Token = "0x4000C0A")]
	public const string FAILURE_CardNotTaken = "FAILURE_CardNotTaken";

	[Token(Token = "0x4000C0B")]
	public const string FAILURE_TryingToEndIntermissionEarly = "FAILURE_TryingToEndIntermissionEarly";

	[Token(Token = "0x4000C0C")]
	public const string FAILURE_NoAmmoWeapon = "FAILURE_NoAmmoWeapon";

	[Token(Token = "0x4000C0D")]
	public const string FAILURE_SpawnersDisconnected = "FAILURE_SpawnersDisconnected";

	[Token(Token = "0x4000C0E")]
	public const string FAILURE_GameEnded = "FAILURE_GameEnded";

	[Token(Token = "0x4000C0F")]
	public const string FAILURE_UnPauseTooFarAway = "FAILURE_UnPauseTooFarAway";

	[Token(Token = "0x4000C10")]
	public const string FAILURE_PauseOnCooldown = "FAILURE_PauseOnCooldown";

	[Token(Token = "0x4000C11")]
	public const string MaterialParam_BaseColor = "_BaseColor";

	[Token(Token = "0x4000C12")]
	public const string MaterialParam_EmissiveColor = "_Emissive_Color";

	[Token(Token = "0x4000C13")]
	public const string MaterialParam_Emission = "_Emission";

	[Token(Token = "0x4000C14")]
	public const string MaterialParam_PannerOffset = "_Panner_Offset";

	[Token(Token = "0x4000C15")]
	public const string MaterialParam_Saturation = "_Saturation";

	[Token(Token = "0x4000C16")]
	public const string MaterialParam_GrayscaleAmount = "_GrayscaleAmount";

	[Token(Token = "0x4000C17")]
	public const string MaterialParam_Tint = "_Tint";

	[Token(Token = "0x4000C18")]
	public const string MaterialParam_Tint_Intensity = "_Tint_Intensity";

	[Token(Token = "0x4000C19")]
	public const string CONVERTER_C = "C";

	[Token(Token = "0x4000C1A")]
	public const string CONVERTER_N = "N";

	[Token(Token = "0x4000C1B")]
	public const string CONVERTER_0 = "0";

	[Token(Token = "0x4000C1C")]
	public const string CONVERTER_1 = "1";

	[Token(Token = "0x4000C1D")]
	public const string CONVERTER_2 = "2";

	[Token(Token = "0x4000C1E")]
	public const string CONVERTER_3 = "3";

	[Token(Token = "0x4000C1F")]
	public const string CONVERTER_Period = ".";

	[Token(Token = "0x4000C20")]
	public const string CONVERTER_LeftBracket = "{";

	[Token(Token = "0x4000C21")]
	public const string CONVERTER_RightBracket = "}";

	[Token(Token = "0x4000C22")]
	public const string CONVERTER_Damage = "Damage";

	[Token(Token = "0x4000C23")]
	public const string CONVERTER_CriticalDamage = "CriticalDamage";

	[Token(Token = "0x4000C24")]
	public const string CONVERTER_Stagger = "Stagger";

	[Token(Token = "0x4000C25")]
	public const string CONVERTER_PushbackStagger = "PushbackStagger";

	[Token(Token = "0x4000C26")]
	public const string CONVERTER_FalldownStagger = "FalldownStagger";

	[Token(Token = "0x4000C27")]
	public const string CONVERTER_KnockoutStagger = "KnockoutStagger";

	[Token(Token = "0x4000C28")]
	public const string CONVERTER_EnergyDamageMultiplier = "EnergyDamageMultiplier";

	[Token(Token = "0x4000C29")]
	public const string CONVERTER_UseEnergyCost = "UseEnergyCost";

	[Token(Token = "0x4000C2A")]
	public const string CONVERTER_HoldActivationIntervalTime = "HoldActivationIntervalTime";

	[Token(Token = "0x4000C2B")]
	public const string CONVERTER_FireOnCooldownTime = "FireOnCooldownTime";

	[Token(Token = "0x4000C2C")]
	public const string CONVERTER_MaxAmmo = "MaxAmmo";

	[Token(Token = "0x4000C2D")]
	public const string CONVERTER_OneHandedMaxSpread = "OneHandedMaxSpread";

	[Token(Token = "0x4000C2E")]
	public const string CONVERTER_TwoHandedMaxSpread = "TwoHandedMaxSpread";

	[Token(Token = "0x4000C2F")]
	public const string CONVERTER_NumTraces = "NumTraces";

	[Token(Token = "0x4000C30")]
	public const string CONVERTER_MultiTraceDamage = "MultiTraceDamage";

	[Token(Token = "0x4000C31")]
	public const string CONVERTER_MaxNumCharges = "MaxNumCharges";

	[Token(Token = "0x4000C32")]
	public const string CONVERTER_GrenadeRadius = "GrenadeRadius";

	[Token(Token = "0x4000C33")]
	public const string CONVERTER_FalloffDamageAtEdgeMultiplier = "FalloffDamageAtEdgeMultiplier";

	[Token(Token = "0x4000C34")]
	public const string CONVERTER_TimeToExplode = "TimeToExplode";

	[Token(Token = "0x4000C35")]
	public const string CONVERTER_WeaponAssetToAttachStatsTag = "{WeaponAssetToAttachStats}";

	[Token(Token = "0x4000C36")]
	public const string CONVERTER_MaxQuantity = "MaxQuantity";

	[Token(Token = "0x4000C37")]
	public const string CONVERTER_RegenerateObjectTime = "RegenerateObjectTime";

	[Token(Token = "0x4000C38")]
	public const string CONVERTER_Cooldown = "Cooldown";

	[Token(Token = "0x4000C39")]
	public const string STRING_IconCurrentHand = "{Icon.CurrentHand";

	[Token(Token = "0x4000C3A")]
	public const string STRING_IconRightHand = "{Icon.RightHand";

	[Token(Token = "0x4000C3B")]
	public const string STRING_IconLeftHand = "{Icon.LeftHand";

	[Token(Token = "0x4000C3C")]
	public const float RTPC_LastShot = 0.01f;

	[Token(Token = "0x4000C3D")]
	public const float RTPC_VeryLowAmmo = 0.02f;

	[Token(Token = "0x4000C3E")]
	public const float RTPC_LowAmmo = 0.03f;

	[Token(Token = "0x4000C3F")]
	public const float RTPC_SemiLowAmmo = 0.04f;

	[Token(Token = "0x4000C40")]
	public const float RTPC_VeryLowAmmo_CurveCeiling = 0.1f;

	[Token(Token = "0x4000C41")]
	public const string ANIM_Fire = "Fire";

	[Token(Token = "0x4000C42")]
	public const string ANIM_TriggerPress = "TriggerPress";

	[Token(Token = "0x4000C43")]
	public const string ANIM_Appear = "Appear";

	[Token(Token = "0x4000C44")]
	public const string ANIM_Disappear = "Disappear";

	[Token(Token = "0x4000C45")]
	public const string ANIM_Visible = "Visible";

	[Token(Token = "0x4000C46")]
	public const string ANIM_Active = "Active";

	[Token(Token = "0x4000C47")]
	public const string ANIM_Hovered = "Hovered";

	[Token(Token = "0x4000C48")]
	public const string ANIM_Pressed = "Pressed";

	[Token(Token = "0x4000C49")]
	public const string ANIM_Upgrading = "Upgrading";

	[Token(Token = "0x4000C4A")]
	public const string ANIM_LargeWeapon = "LargeWeapon";

	[Token(Token = "0x4000C4B")]
	public const string ANIM_Grabbed = "Grabbed";

	[Token(Token = "0x4000C4C")]
	public const string ANIM_EmptyGrab = "EmptyGrab";

	[Token(Token = "0x4000C4D")]
	public const string ANIM_HealthPercentage = "HealthPercentage";

	[Token(Token = "0x4000C4E")]
	public const string ANIM_Focus = "Focus";

	[Token(Token = "0x4000C4F")]
	public const string ANIM_ShowResults = "ShowResults";

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int PARAM_MoveSpeed;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int PARAM_MoveSpeedMultiplier;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int PARAM_Spawning;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int PARAM_Staggered;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int PARAM_StaggerType;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly int PARAM_Alive;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly int PARAM_Die;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static readonly int PARAM_Revive;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly int PARAM_React;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static readonly int PARAM_React_UpperMask;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly int PARAM_React_ArmsMask;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static readonly int PARAM_React_LeftLegMask;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly int PARAM_React_RightLegMask;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static readonly int PARAM_React_Generic;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly int PARAM_React_Head;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static readonly int PARAM_React_Torso;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly int PARAM_React_RightArm;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static readonly int PARAM_React_RightLeg;

	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static readonly int PARAM_React_LeftArm;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public static readonly int PARAM_React_LeftLeg;

	[Token(Token = "0x4000C64")]
	public const string PROPERTY_PeashooterDamageAdditive = "PeashooterDamageAdditive";

	[Token(Token = "0x4000C65")]
	public const string PROPERTY_PeashooterStaggerAdditive = "PeashooterStaggerAdditive";

	[Token(Token = "0x4000C66")]
	public const string PROPERTY_TutorialsEnabled = "TutorialsEnabled";

	[Token(Token = "0x4000C67")]
	public const string PROPERTY_ShowEnemyHealth = "ShowEnemyHealth";

	[Token(Token = "0x4000C68")]
	public const string PROPERTY_ShowEnemyStagger = "ShowEnemyStagger";

	[Token(Token = "0x4000C69")]
	public const string PROPERTY_HeadDamageAdditive = "HeadDamageAdditive";

	[Token(Token = "0x4000C6A")]
	public const string PROPERTY_TorsoDamageAdditive = "TorsoDamageAdditive";

	[Token(Token = "0x4000C6B")]
	public const string PROPERTY_RightArmDamageAdditive = "RightArmDamageAdditive";

	[Token(Token = "0x4000C6C")]
	public const string PROPERTY_LeftArmDamageAdditive = "LeftArmDamageAdditive";

	[Token(Token = "0x4000C6D")]
	public const string PROPERTY_RightLegDamageAdditive = "RightLegDamageAdditive";

	[Token(Token = "0x4000C6E")]
	public const string PROPERTY_LeftLegDamageAdditive = "LeftLegDamageAdditive";

	[Token(Token = "0x4000C6F")]
	public const string PROPERTY_CurrencyCostAdditive = "CurrencyCostAdditive";

	[Token(Token = "0x4000C70")]
	public const string PROPERTY_Invincible = "Invincible";

	[Token(Token = "0x4000C71")]
	public const string PROPERTY_AllDamageAdditive = "AllDamageAdditive";

	[Token(Token = "0x4000C72")]
	public const string PROPERTY_AllDamageAdditiveVisual = "AllDamageAdditiveVisual";

	[Token(Token = "0x4000C73")]
	public const string PROPERTY_AllDamageReductive = "AllDamageReductive";

	[Token(Token = "0x4000C74")]
	public const string PROPERTY_AllDamageReductiveVisual = "AllDamageReductiveVisual";

	[Token(Token = "0x4000C75")]
	public const string PROPERTY_CriticalDamageAdditive = "CriticalDamageAdditive";

	[Token(Token = "0x4000C76")]
	public const string PROPERTY_AllStaggerAdditive = "AllStaggerAdditive";

	[Token(Token = "0x4000C77")]
	public const string PROPERTY_CriticalStaggerAdditive = "CriticalStaggerAdditive";

	[Token(Token = "0x4000C78")]
	public const string PROPERTY_PrecisionWeaponDamageAdditive = "PrecisionWeaponDamageAdditive";

	[Token(Token = "0x4000C79")]
	public const string PROPERTY_BurstWeaponDamageAdditive = "BurstWeaponDamageAdditive";

	[Token(Token = "0x4000C7A")]
	public const string PROPERTY_MeleeWeaponDamageAdditive = "MeleeWeaponDamageAdditive";

	[Token(Token = "0x4000C7B")]
	public const string PROPERTY_SpecialWeaponDamageAdditive = "SpecialWeaponDamageAdditive";

	[Token(Token = "0x4000C7C")]
	public const string PROPERTY_AllDefenseAdditive = "AllDefenseAdditive";

	[Token(Token = "0x4000C7D")]
	public const string PROPERTY_AllDefenseAdditiveVisual = "AllDefenseAdditiveVisual";

	[Token(Token = "0x4000C7E")]
	public const string PROPERTY_AllDefenseReductive = "AllDefenseReductive";

	[Token(Token = "0x4000C7F")]
	public const string PROPERTY_AllDefenseReductiveVisual = "AllDefenseReductiveVisual";

	[Token(Token = "0x4000C80")]
	public const string PROPERTY_BossEnemyDamageAdditive = "BossEnemyDamageAdditive";

	[Token(Token = "0x4000C81")]
	public const string PROPERTY_ReflectAdditive = "ReflectAdditive";

	[Token(Token = "0x4000C82")]
	public const string PROPERTY_LifeDrainAdditive = "LifeDrainAdditive";

	[Token(Token = "0x4000C83")]
	public const string PROPERTY_HealthIncrease = "HealthIncrease";

	[Token(Token = "0x4000C84")]
	public const string PROPERTY_HealthAdditive = "HealthAdditive";

	[Token(Token = "0x4000C85")]
	public const string PROPERTY_ExtraLivesIncrease = "ExtraLivesIncrease";

	[Token(Token = "0x4000C86")]
	public const string PROPERTY_SpeedAdditive = "SpeedAdditive";

	[Token(Token = "0x4000C87")]
	public const string PROPERTY_SpeedAdditiveVisual = "SpeedAdditiveVisual";

	[Token(Token = "0x4000C88")]
	public const string PROPERTY_SpeedReductive = "SpeedReductive";

	[Token(Token = "0x4000C89")]
	public const string PROPERTY_SpeedReductiveVisual = "SpeedReductiveVisual";

	[Token(Token = "0x4000C8A")]
	public const string PROPERTY_AllAmmoAdditive = "AllAmmoAdditive";

	[Token(Token = "0x4000C8B")]
	public const string PROPERTY_ExperienceAdditive = "ExperienceAdditive";

	[Token(Token = "0x4000C8C")]
	public const string PROPERTY_CameraRadiusAdditive = "CameraRadiusAdditive";

	[Token(Token = "0x4000C8D")]
	public const string PROPERTY_CameraCooldownAdditive = "CameraCooldownAdditive";

	[Token(Token = "0x4000C8E")]
	public const string PROPERTY_PeashooterLaserSight = "PeashooterLaserSight";

	[Token(Token = "0x4000C8F")]
	public const string PROPERTY_PipebombEnemySpeedUp = "PipebombEnemySpeedUp";

	[Token(Token = "0x4000C90")]
	public const string PROPERTY_TeslaGunIncreaseMultiTargetDamage = "TeslaGunIncreaseMultiTargetDamage";

	[Token(Token = "0x4000C91")]
	public const string PROPERTY_ThrowingKnifeSlowdown = "ThrowingKnifeSlowdown";

	[Token(Token = "0x4000C92")]
	public const string PROPERTY_CryoGunSlowdownBonus = "CryoGunSlowdownBonus";

	[Token(Token = "0x4000C93")]
	public const string PROPERTY_DisableSecondaryHand = "DisableSecondaryHand";

	[Token(Token = "0x4000C94")]
	public const string PROPERTY_AdditionalInventorySlots = "AdditionalInventorySlots";

	[Token(Token = "0x4000C95")]
	public const string PROPERTY_ExtraBarricade = "ExtraBarricade";

	[Token(Token = "0x4000C96")]
	public const string PROPERTY_HighScoresDisabled = "HighScoresDisabled";

	[Token(Token = "0x4000C97")]
	public const string STATKEY_DamageInflicted = "DamageInflicted";

	[Token(Token = "0x4000C98")]
	public const string STATKEY_DamageTaken = "DamageTaken";

	[Token(Token = "0x4000C99")]
	public const string STATKEY_CriticalHits = "CriticalHits";

	[Token(Token = "0x4000C9A")]
	public const string STATKEY_Kills = "Kills";

	[Token(Token = "0x4000C9B")]
	public const string STATKEY_OutsideRoomKills = "OutsideRoomKills";

	[Token(Token = "0x4000C9C")]
	public const string STATKEY_Staggers = "Staggers";

	[Token(Token = "0x4000C9D")]
	public const string STATKEY_Activations = "Activations";

	[Token(Token = "0x4000C9E")]
	public const string STATKEY_SuccessfulActivations = "SuccessfulActivations";

	[Token(Token = "0x4000C9F")]
	public const string STATKEY_Accuracy = "Accuracy";

	[Token(Token = "0x4000CA0")]
	public const string STATKEY_Hits = "Hits";

	[Token(Token = "0x4000CA1")]
	public const string STATKEY_Reloads = "Reloads";

	[Token(Token = "0x4000CA2")]
	public const string STATKEY_PlayTime = "PlayTime";

	[Token(Token = "0x4000CA3")]
	public const string STATKEY_CoinsSpent = "CoinsSpent";

	[Token(Token = "0x4000CA4")]
	public const string STATKEY_CoinsFromObjectives = "CoinsFromObjectives";

	[Token(Token = "0x4000CA5")]
	public const string STATKEY_ObjectivesFullyCompleted = "ObjectivesFullyCompleted";

	[Token(Token = "0x4000CA6")]
	public const string STATKEY_CasesStarted = "CasesStarted";

	[Token(Token = "0x4000CA7")]
	public const string STATKEY_CasesCompleted = "CasesCompleted";

	[Token(Token = "0x4000CA8")]
	public const string STATKEY_MaxCombo = "MaxCombo";

	[Token(Token = "0x4000CA9")]
	public const string STATKEY_Experience = "Experience";

	[Token(Token = "0x4000CAA")]
	public const int MaxLevel = 99;

	[Token(Token = "0x4000CAB")]
	public const int NumTiersPerWeapon = 4;

	[Token(Token = "0x4000CAC")]
	public const float DirectFireRange = 4f;

	[Token(Token = "0x4000CAD")]
	public const float MinHoldActivationIntervalTime = 0.01f;

	[Token(Token = "0x4000CAE")]
	public const int NumEquippableBadges = 5;

	[Token(Token = "0x4000CAF")]
	public const int NumDefaultWeaponSlots = 4;

	[Token(Token = "0x4000CB0")]
	public const int TEAM_Players = 1;

	[Token(Token = "0x4000CB1")]
	public const int TEAM_Zombies = 2;

	[Token(Token = "0x4000CB2")]
	public const int TEAM_Shopkeeper = 99;

	[Token(Token = "0x4000CB3")]
	public const double FriendlyDamageModifier = 0.25;

	[Token(Token = "0x4000CB4")]
	public const float BuilderWeaponGrabbedWaitTime = 0.1f;

	[Token(Token = "0x4000CB5")]
	public const int PHASE_Setup_Spawners = 0;

	[Token(Token = "0x4000CB6")]
	public const int PHASE_Setup_Shop = 1;

	[Token(Token = "0x4000CB7")]
	public const string SETTING_DominantHand = "DominantHand";

	[Token(Token = "0x4000CB8")]
	public const string SETTING_InventoryMode = "InventoryMode";

	[Token(Token = "0x4000CB9")]
	public const string SETTING_Furniture = "Furniture";

	[Token(Token = "0x4000CBA")]
	public const string SETTING_FanCollision = "FanCollision";

	[Token(Token = "0x4000CBB")]
	public const string SETTING_AutoCompleteSetup = "AutoCompleteSetup";

	[Token(Token = "0x4000CBC")]
	public const string SETTING_GrabMode = "GrabMode";

	[Token(Token = "0x4000CBD")]
	public const string SETTING_NoirFilter = "NoirFilter";

	[Token(Token = "0x4000CBE")]
	public const string SETTING_TunnelVision = "TunnelVision";

	[Token(Token = "0x4000CBF")]
	public const string SETTING_ShowDamageNumbers = "ShowDamageNumbers";

	[Token(Token = "0x4000CC0")]
	public const string SETTING_OneHandedMode = "OneHandedMode";

	[Token(Token = "0x4000CC1")]
	public const string SETTING_UIDistance = "UIDistance";

	[Token(Token = "0x4000CC2")]
	public const string SETTING_WeaponTutorials = "WeaponTutorials";

	[Token(Token = "0x4000CC3")]
	public const string SETTING_VideoTutorials = "VideoTutorials";

	[Token(Token = "0x4000CC4")]
	public const string SETTING_Tooltips = "Tooltips";

	[Token(Token = "0x4000CC5")]
	public const string SETTING_UIVolume = "UIVolume";

	[Token(Token = "0x4000CC6")]
	public const string SETTING_EnemyVolume = "EnemyVolume";

	[Token(Token = "0x4000CC7")]
	public const string SETTING_WeaponVolume = "WeaponVolume";

	[Token(Token = "0x4000CC8")]
	public const string SETTING_VirtualRealityMode = "VirtualRealityMode";

	[Token(Token = "0x4000CC9")]
	public const string SETTING_DEBUG_Invincible = "DEBUG_Invincible";

	[Token(Token = "0x4000CCA")]
	public const string SETTING_DEBUG_NinetyPercentShopDiscount = "DEBUG_NinetyPercentShopDiscount";

	[Token(Token = "0x4000CCB")]
	public const string SETTING_DEBUG_HideUI = "DEBUG_HideUI";

	[Token(Token = "0x4000CCC")]
	public const string SETTING_DEBUG_ShowEnemyHealth = "DEBUG_ShowEnemyHealth";

	[Token(Token = "0x4000CCD")]
	public const string SETTING_DEBUG_ShowEnemyStagger = "DEBUG_ShowEnemyStagger";

	[Token(Token = "0x4000CCE")]
	public const string SETTING_DEBUG_ShowEnemyInfo = "DEBUG_ShowEnemyInfo";

	[Token(Token = "0x4000CCF")]
	public const string SETTING_DEBUG_ShowRoomSpace = "DEBUG_ShowRoomSpace";

	[Token(Token = "0x4000CD0")]
	public const string SETTING_DEBUG_ShowNavMesh = "DEBUG_ShowNavMesh";

	[Token(Token = "0x4000CD1")]
	public const string SETTING_DEBUG_EquipAnyBadge = "DEBUG_EquipAnyBadge";

	[Token(Token = "0x4000CD2")]
	public const string SCENE_StartScene = "StartScene_P";

	[Token(Token = "0x4000CD3")]
	public const string SCENE_MainMenu_MR = "MainMenu_MR_P";

	[Token(Token = "0x4000CD4")]
	public const string SCENE_MainMenu_VR = "MainMenu_VR_P";

	[Token(Token = "0x4000CD5")]
	public const string LEADERBOARD_CaseFile0 = "CaseFile0";

	[Token(Token = "0x4000CD6")]
	public const string LEADERBOARD_CaseFile1 = "CaseFile1";

	[Token(Token = "0x4000CD7")]
	public const string LEADERBOARD_CaseFile2 = "CaseFile2";

	[Token(Token = "0x4000CD8")]
	public const string LEADERBOARD_CaseFile3 = "CaseFile3";

	[Token(Token = "0x4000CD9")]
	public const string LEADERBOARD_CaseFile4 = "CaseFile4";

	[Token(Token = "0x4000CDA")]
	public const string LEADERBOARD_CaseFile5 = "CaseFile5";

	[Token(Token = "0x4000CDB")]
	public const string LEADERBOARD_CaseFile6 = "CaseFile6";

	[Token(Token = "0x4000CDC")]
	public const string LEADERBOARD_CaseFile7 = "CaseFile7";

	[Token(Token = "0x4000CDD")]
	public const string LEADERBOARD_CaseFile8 = "CaseFile8";

	[Token(Token = "0x4000CDE")]
	public const string LEADERBOARD_CaseFile9 = "CaseFile9";

	[Token(Token = "0x4000CDF")]
	public const string LEADERBOARD_CaseFile10 = "CaseFile10";

	[Token(Token = "0x4000CE0")]
	public const string WEAPONSKIN_Default = "WeaponSkin_Default";
}
[Token(Token = "0x200028F")]
public delegate void FOnVirtualRealityModeChanged(EZNVirtualRealityModes NewVirtualRealityMode);
[Token(Token = "0x2000290")]
public delegate void FOnBadgeAssetEquipped(ZNBadgeAssetBase EquippedBadgeAsset);
[Token(Token = "0x2000291")]
public delegate void FOnBadgeAssetUnequipped(ZNBadgeAssetBase UnequippedBadgeAsset);
[Token(Token = "0x2000292")]
public delegate void OnCharacterDied(IZNDamageable DiedCharacter);
[Token(Token = "0x2000293")]
public delegate void OnCharacterHiddenStateChanged(IZNDamageable ChangedCharacter, bool bNewHidden);
[Token(Token = "0x2000294")]
public delegate void OnHealthDepleted(IZNDamageable DiedCharacter);
[Token(Token = "0x2000295")]
public delegate void OnHealthUpdated(IZNDamageable UpdatedCharacter, int NewHealth, int MaxHealth);
[Token(Token = "0x2000296")]
public delegate void OnStaggerDepleted(IZNDamageable StaggeredCharacter, EZNStaggerTypes InStaggerType);
[Token(Token = "0x2000297")]
public delegate void OnStaggerUpdated(IZNDamageable UpdatedCharacter, EZNStaggerTypes InStaggerType, int NewStagger, int MaxStagger);
[Token(Token = "0x2000298")]
public delegate void OnStaggeredStarted(IZNDamageable StaggeredCharacter, EZNStaggerTypes InStaggerType);
[Token(Token = "0x2000299")]
public delegate void OnStaggeredEnded(IZNDamageable StaggeredCharacter);
[Token(Token = "0x200029A")]
public delegate void OnCharacterTookDamage(ZNCharacterBase DamagedCharacter, int InDamage, int InStagger);
[Token(Token = "0x200029B")]
public delegate void FOnCharacterGrabbedObject(ZNGrabObjectBase GrabbedObject, ZNHands GrabbingHand);
[Token(Token = "0x200029C")]
public delegate void FOnCharacterDroppedObject(ZNGrabObjectBase DroppedObject, ZNHands DroppingHand);
[Token(Token = "0x200029D")]
public delegate void FOnCharacterRecievedWeapon(ZNWeaponBase GainedWeapon);
[Token(Token = "0x200029E")]
public delegate void FOnCharacterRemovedWeapon(ZNWeaponBase RemovedWeapon);
[Token(Token = "0x200029F")]
public delegate void FOnItemAddedToInventory(ZNGrabObjectBase AddedItem, int ItemIndex);
[Token(Token = "0x20002A0")]
public delegate void FOnItemRemovedFromInventory(ZNGrabObjectBase RemovedItem, int ItemIndex);
[Token(Token = "0x20002A1")]
public delegate void FOnHipReturnPointUpdated(ZNPlayerInventoryReturnPoint UpdatedReturnPoint, ZNGrabObjectBase NewOccupyingObject, int ItemIndex);
[Token(Token = "0x20002A2")]
public delegate void FOnCharacterNoirCoinsUpdated(int NoirCoinValue);
[Token(Token = "0x20002A3")]
public delegate void FOnCharacterExtraLivesUpdated(int NewNumExtraLives, int NewMaxNumExtraLives);
[Token(Token = "0x20002A4")]
public delegate void FOnPlayerCharacterStartedVRMovement();
[Token(Token = "0x20002A5")]
public delegate void FOnPlayerCharacterEndedVRMovement();
[Token(Token = "0x20002A6")]
public delegate void FOnEnemyStaggeredStarted(EZNStaggerTypes InStaggerType);
[Token(Token = "0x20002A7")]
public delegate void FOnEquipItemEquipped(ZNEquipItem EquippedEquipItem, ZNHands EquippingHand);
[Token(Token = "0x20002A8")]
public delegate void FOnEquipItemUnequipped(ZNEquipItem UnequippedEquipItem, ZNHands UnequippingHand);
[Token(Token = "0x20002A9")]
public delegate void FOnEnemySpawned(ZNEnemyBase SpawnedEnemy);
[Token(Token = "0x20002AA")]
public delegate void FOnAbilityStarted(ZNEnemyAbility StartedEnemyAbility);
[Token(Token = "0x20002AB")]
public delegate void FOnAbilityEnded(ZNEnemyAbility EndedEnemyAbility);
[Token(Token = "0x20002AC")]
public delegate void OnObjectGrabbed(ZNGrabObjectBase GrabbedObject);
[Token(Token = "0x20002AD")]
public delegate void OnObjectDropped(ZNGrabObjectBase DroppedObject, bool bReturnToPoint);
[Token(Token = "0x20002AE")]
public delegate void FOnObjectReturnPointOccupiedStateChanged(ZNObjectReturnPoint ChangedOccupiedReturnStateReturnPoint, ZNGrabObjectBase NewOccupyingObject);
[Token(Token = "0x20002AF")]
public delegate void FOnOVRGrabbableGrabbed(ZNOVRGrabbable GrabbedGrabbable);
[Token(Token = "0x20002B0")]
public delegate void FOnOVRGrabbableDropped(ZNOVRGrabbable DroppedGrabbable);
[Token(Token = "0x20002B1")]
public delegate void FOnAmmoUpdated(ZNGunWeapon UpdatedWeapon, int NewAmmo, int MaxAmmo);
[Token(Token = "0x20002B2")]
public delegate void FOnQuantityUpdated(ZNQuantityWeapon UpdatedWeapon, int NewQuantity, int MaxQuantity);
[Token(Token = "0x20002B3")]
public delegate void FOnWeaponCooldownTimeUpdated(ZNCooldownWeapon UpdatedWeapon, float NewRemainingTime, float MaxRemainingTime);
[Token(Token = "0x20002B4")]
public delegate void FOnWeaponCooldownStart(ZNCooldownWeapon UpdatedWeapon);
[Token(Token = "0x20002B5")]
public delegate void FOnEnergyUpdated(ZNWeaponBase UpdatedWeapon, float NewEnergy, float MaxEnergy);
[Token(Token = "0x20002B6")]
public delegate void FOnGunFired(ZNGunWeapon FiredWeapon);
[Token(Token = "0x20002B7")]
public delegate void FOnTierChanged(ZNWeaponBase UpdatedWeapon, int NewTier, int PreviousTier);
[Token(Token = "0x20002B8")]
public delegate void FOnMagInserted(ZNMag InsertedMag);
[Token(Token = "0x20002B9")]
public delegate void FOnMagEjected(ZNMag EjectedMag);
[Token(Token = "0x20002BA")]
public delegate void FOnGunReload(ZNGunWeapon ReloadedWeapon);
[Token(Token = "0x20002BB")]
public delegate void FOnMeleeTriggerEntered(IZNDamageable NewDamageable);
[Token(Token = "0x20002BC")]
public delegate void FOnMeleeTriggerExited(IZNDamageable RemovingDamageable);
[Token(Token = "0x20002BD")]
public delegate void FOnProjectileCreated(ZNProjectileBase CreatedProjectile);
[Token(Token = "0x20002BE")]
public delegate void FOnShopItemPurchased(ZNShopItemComponent PurchasedShopItem);
[Token(Token = "0x20002BF")]
public delegate void FOnItemSoldToShop(ZNGrabObjectBase SoldItem);
[Token(Token = "0x20002C0")]
public delegate void FOnItemPutInUpgrader(ZNGrabObjectBase HeldItem);
[Token(Token = "0x20002C1")]
public delegate void FOnShopUpgradeStarted(ZNGrabObjectBase UpgradedItem, int UpgradeCost);
[Token(Token = "0x20002C2")]
public delegate void FOnShopUpgradeCompleted(ZNGrabObjectBase UpgradedItem);
[Token(Token = "0x20002C3")]
public delegate void FOnBonusCardTaken(ZNBonusCard TakenCard);
[Token(Token = "0x20002C4")]
public delegate void FOnInventoryWeaponSlotsChanged(int NewMaxNumWeaponSlots);
[Token(Token = "0x20002C5")]
public delegate void FOnLeverCompleted(ZNLever CompletedLever);
[Token(Token = "0x20002C6")]
public delegate void FOnLeverCheckpointHit(ZNLeverCheckpoint HitLeverCheckpoint, bool bValidHit);
[Token(Token = "0x20002C7")]
public delegate void FOnDifficultyChanged(EZNDifficulties NewDifficulty);
[Token(Token = "0x20002C8")]
public delegate void FOnNoirValueUpdated(int NewNoirValue);
[Token(Token = "0x20002C9")]
public delegate void FOnNoirDepleted();
[Token(Token = "0x20002CA")]
public delegate void FOnScoreValueUpdated(int NewScoreValue);
[Token(Token = "0x20002CB")]
public delegate void FOnScoreMultiplierUpdated(int NewScoreMultiplier);
[Token(Token = "0x20002CC")]
public delegate void FOnCurrentKillsUpdated(int NewKillsAmount);
[Token(Token = "0x20002CD")]
public delegate void FOnMultiplierTierUpdated(int NewTier, int NewKillsForNextTier);
[Token(Token = "0x20002CE")]
public delegate void FOnNoirFilterChanged(bool NewNoirFilterValue);
[Token(Token = "0x20002CF")]
public delegate void FOnShowDamageNumbersSettingChanged(bool bNewValue);
[Token(Token = "0x20002D0")]
public delegate void FOnOneHandedModeChanged(bool bNewValue);
[Token(Token = "0x20002D1")]
public delegate void FOnUIDistanceChanged(float NewUIDistance);
[Token(Token = "0x20002D2")]
public delegate void FOnFalseVolumeStateChanged(bool bNewInFalseVolume);
[Token(Token = "0x20002D3")]
public delegate void FOnInvalidLocationStateChanged(bool bNewInInvalidLocation);
[Token(Token = "0x20002D4")]
public delegate void FOnItemDropped(GameObject DroppedObject);
[Token(Token = "0x20002D5")]
public delegate void FOnGamePhaseChanged(ZNGamePhases PreviousPhase, ZNGamePhases NewPhase);
[Token(Token = "0x20002D6")]
public delegate void FOnRoomSizeDetermined(EZNRoomSizes InRoomSize);
[Token(Token = "0x20002D7")]
public delegate void FOnSetupBegan();
[Token(Token = "0x20002D8")]
public delegate void FOnSetupEnded();
[Token(Token = "0x20002D9")]
public delegate void FOnSetupPhaseChanged(int PreviousPhase, int NewPhase);
[Token(Token = "0x20002DA")]
public delegate void FOnNumSpawnersPlacedUpdated(int NewNumSpawners, int MaxNumSpawners);
[Token(Token = "0x20002DB")]
public delegate void FOnNumShopsPlacedUpdated(int NewNumShops, int MaxNumShops);
[Token(Token = "0x20002DC")]
public delegate void FOnSetupPhaseResetted();
[Token(Token = "0x20002DD")]
public delegate void FOnIntermissionBegan();
[Token(Token = "0x20002DE")]
public delegate void FOnIntermissionEnded();
[Token(Token = "0x20002DF")]
public delegate void FOnIntermissionFailed(string FailureReason);
[Token(Token = "0x20002E0")]
public delegate void FOnIntermissionDisplayTimerUpdated(int NewIntermissionDisplayTime);
[Token(Token = "0x20002E1")]
public delegate void FOnWaveBegan(int WaveNumber);
[Token(Token = "0x20002E2")]
public delegate void FOnWaveEnded(int WaveNumber);
[Token(Token = "0x20002E3")]
public delegate void FOnGameEnded(bool bSuccess);
[Token(Token = "0x20002E4")]
public delegate void FOnObjectiveTierChanged(EZNObjectiveTiers NewTier);
[Token(Token = "0x20002E5")]
public delegate void FOnNavigableAddedToGameMode(IZNNavigable AddedNavigable);
[Token(Token = "0x20002E6")]
public delegate void FOnNavigableRemovedFromGameMode(IZNNavigable RemovedNavigable);
[Token(Token = "0x20002E7")]
public delegate void FOnNavigationRecalculationRequested();
[Token(Token = "0x20002E8")]
public delegate void FOnDamageEvent(FZNDamageInfo InDamageInfo);
[Token(Token = "0x20002E9")]
public delegate void FOnSimultaneousDamageEvent(ZNCharacterBase DamageInstigator, List<FZNDamageInfo> InDamageInfos);
[Token(Token = "0x20002EA")]
public delegate void FOnHeadsetFocusAcquired();
[Token(Token = "0x20002EB")]
public delegate void FOnHeadsetFocusLost();
[Token(Token = "0x20002EC")]
public delegate void FOnObjectiveActivityInstanceAdded(ZNObjectiveActivityInstance NewObjectiveActivityInstance);
[Token(Token = "0x20002ED")]
public delegate void FOnObjectiveActivityInstanceRemoved(ZNObjectiveActivityInstance RemovedObjectiveActivityInstance);
[Token(Token = "0x20002EE")]
public delegate void FOnObjectiveActivityInstanceFinished(ZNObjectiveActivityInstance RemovedObjectiveActivityInstance, bool bSuccess, int Score);
[Token(Token = "0x20002EF")]
public delegate void FOnWorldButtonPressed(ZNWorldButton PressedWorldButton, ZNCharacterBase PressingCharacter);
[Token(Token = "0x20002F0")]
public delegate void FOnDebugInvincibleSettingChanged(bool bNewValue);
[Token(Token = "0x20002F1")]
public delegate void FOnDebugNinetyPercentShopDiscountSettingChanged(bool bNewValue);
[Token(Token = "0x20002F2")]
public delegate void FOnDebugHideUISettingChanged(bool bNewValue);
[Token(Token = "0x20002F3")]
public delegate void FOnDebugShowEnemyHealthSettingChanged(bool bNewValue);
[Token(Token = "0x20002F4")]
public delegate void FOnDebugShowEnemyStaggerSettingChanged(bool bNewValue);
[Token(Token = "0x20002F5")]
public delegate void FOnDebugShowEnemyInfoSettingChanged(bool bNewValue);
[Token(Token = "0x20002F6")]
public delegate void FOnDebugShowNavMeshSettingChanged(bool bNewValue);
[Token(Token = "0x20002F7")]
public enum EZNVirtualRealityModes
{
	[Token(Token = "0x4000CE2")]
	VirtualReality,
	[Token(Token = "0x4000CE3")]
	MixedReality
}
[Token(Token = "0x20002F8")]
public enum EZNRoomSizes
{
	[Token(Token = "0x4000CE5")]
	Small,
	[Token(Token = "0x4000CE6")]
	Medium,
	[Token(Token = "0x4000CE7")]
	Large
}
[Token(Token = "0x20002F9")]
public enum EZNDifficulties
{
	[Token(Token = "0x4000CE9")]
	Easy,
	[Token(Token = "0x4000CEA")]
	Normal,
	[Token(Token = "0x4000CEB")]
	Hard,
	[Token(Token = "0x4000CEC")]
	Master
}
[Token(Token = "0x20002FA")]
public enum EZNObjectiveTiers
{
	[Token(Token = "0x4000CEE")]
	None,
	[Token(Token = "0x4000CEF")]
	Basic,
	[Token(Token = "0x4000CF0")]
	Skilled,
	[Token(Token = "0x4000CF1")]
	Advanced
}
[Token(Token = "0x20002FB")]
public enum EZNEnemySpawnPriorities
{
	[Token(Token = "0x4000CF3")]
	Prioritized,
	[Token(Token = "0x4000CF4")]
	Normal,
	[Token(Token = "0x4000CF5")]
	Deferred
}
[Token(Token = "0x20002FC")]
public enum EZNWeaponActivationTypes
{
	[Token(Token = "0x4000CF7")]
	Press,
	[Token(Token = "0x4000CF8")]
	Hold
}
[Token(Token = "0x20002FD")]
public enum ZNHands
{
	[Token(Token = "0x4000CFA")]
	Right,
	[Token(Token = "0x4000CFB")]
	Left
}
[Token(Token = "0x20002FE")]
public enum EZNDropItemTypes
{
	[Token(Token = "0x4000CFD")]
	None,
	[Token(Token = "0x4000CFE")]
	CommonCoin,
	[Token(Token = "0x4000CFF")]
	RareCoin,
	[Token(Token = "0x4000D00")]
	EpicCoin,
	[Token(Token = "0x4000D01")]
	MythicCoin,
	[Token(Token = "0x4000D02")]
	Plank
}
[Token(Token = "0x20002FF")]
public enum ZNItemSockets
{
	[Token(Token = "0x4000D04")]
	LeftItemSocket1 = 11,
	[Token(Token = "0x4000D05")]
	LeftItemSocket2 = 12,
	[Token(Token = "0x4000D06")]
	LeftItemSocket3 = 13,
	[Token(Token = "0x4000D07")]
	RightItemSocket1 = 21,
	[Token(Token = "0x4000D08")]
	RightItemSocket2 = 22,
	[Token(Token = "0x4000D09")]
	RightItemSocket3 = 23,
	[Token(Token = "0x4000D0A")]
	MiddleItemSocket = 31
}
[Token(Token = "0x2000300")]
public enum EZNInventoryModes
{
	[Token(Token = "0x4000D0C")]
	UIWheel,
	[Token(Token = "0x4000D0D")]
	Body
}
[Token(Token = "0x2000301")]
public enum EZNReturnPointTypes
{
	[Token(Token = "0x4000D0F")]
	Main,
	[Token(Token = "0x4000D10")]
	Temporary
}
[Token(Token = "0x2000302")]
public enum EZNWeaponCategories
{
	[Token(Token = "0x4000D12")]
	Precision = 0,
	[Token(Token = "0x4000D13")]
	Burst = 1,
	[Token(Token = "0x4000D14")]
	Melee = 2,
	[Token(Token = "0x4000D15")]
	Special = 5,
	[Token(Token = "0x4000D16")]
	None = 15
}
[Token(Token = "0x2000303")]
public enum ZNGamePhases
{
	[Token(Token = "0x4000D18")]
	None,
	[Token(Token = "0x4000D19")]
	Setup,
	[Token(Token = "0x4000D1A")]
	Wave,
	[Token(Token = "0x4000D1B")]
	Intermission
}
[Token(Token = "0x2000304")]
public enum EZNSurfaceTypes
{
	[Token(Token = "0x4000D1D")]
	Wall,
	[Token(Token = "0x4000D1E")]
	Floor,
	[Token(Token = "0x4000D1F")]
	Ceiling
}
[Token(Token = "0x2000305")]
public enum EZNBodyParts
{
	[Token(Token = "0x4000D21")]
	Unspecified,
	[Token(Token = "0x4000D22")]
	Torso,
	[Token(Token = "0x4000D23")]
	Head,
	[Token(Token = "0x4000D24")]
	RightArm,
	[Token(Token = "0x4000D25")]
	LeftArm,
	[Token(Token = "0x4000D26")]
	RightLeg,
	[Token(Token = "0x4000D27")]
	LeftLeg
}
[Token(Token = "0x2000306")]
public enum EZNStaggerTypes
{
	[Token(Token = "0x4000D29")]
	None,
	[Token(Token = "0x4000D2A")]
	Pushback,
	[Token(Token = "0x4000D2B")]
	Falldown,
	[Token(Token = "0x4000D2C")]
	Knockback
}
[Token(Token = "0x2000307")]
public enum EZNGunWeaponRTPCTypes
{
	[Token(Token = "0x4000D2E")]
	Custom,
	[Token(Token = "0x4000D2F")]
	Curve
}
[Token(Token = "0x2000308")]
public enum EZNRoomBoxSides
{
	[Token(Token = "0x4000D31")]
	Front,
	[Token(Token = "0x4000D32")]
	Back
}
[Token(Token = "0x2000309")]
public enum EZNWeaponSizes
{
	[Token(Token = "0x4000D34")]
	Small = 0,
	[Token(Token = "0x4000D35")]
	Large = 5
}
[Token(Token = "0x200030A")]
public enum EZNWeaponTutorialSettings
{
	[Token(Token = "0x4000D37")]
	Always = 0,
	[Token(Token = "0x4000D38")]
	FirstThreeTimes = 3,
	[Token(Token = "0x4000D39")]
	Off = 5
}
[Token(Token = "0x200030B")]
public enum EZNTooltipSettings
{
	[Token(Token = "0x4000D3B")]
	Always = 0,
	[Token(Token = "0x4000D3C")]
	AllButTwoHanded = 1,
	[Token(Token = "0x4000D3D")]
	Off = 5
}
[Token(Token = "0x200030C")]
public enum EZNWheelWeaponStates
{
	[Token(Token = "0x4000D3F")]
	Neutral,
	[Token(Token = "0x4000D40")]
	CorrespondingHip,
	[Token(Token = "0x4000D41")]
	OppositeHip
}
[Token(Token = "0x200030D")]
public enum EZNCreditsSectionTypes
{
	[Token(Token = "0x4000D43")]
	Names = 0,
	[Token(Token = "0x4000D44")]
	Image = 1,
	[Token(Token = "0x4000D45")]
	PageBreak = 9
}
[Token(Token = "0x200030E")]
public class ZNPassthroughSurfaceTest : MonoBehaviour
{
	[Token(Token = "0x6001444")]
	[Address(RVA = "0xC80844", Offset = "0xC80844", VA = "0xC80844")]
	private void Start()
	{
	}

	[Token(Token = "0x6001445")]
	[Address(RVA = "0xC808B8", Offset = "0xC808B8", VA = "0xC808B8")]
	public ZNPassthroughSurfaceTest()
	{
	}
}
[Token(Token = "0x200030F")]
public class ZNShiftPositionOnSpawn : MonoBehaviour
{
	[Token(Token = "0x2000310")]
	[CompilerGenerated]
	private sealed class <DelayThenShiftPosition>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float InDelayTime;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ZNShiftPositionOnSpawn <>4__this;

		[Token(Token = "0x170000F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600144E")]
			[Address(RVA = "0xC80BD4", Offset = "0xC80BD4", VA = "0xC80BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001450")]
			[Address(RVA = "0xC80C1C", Offset = "0xC80C1C", VA = "0xC80C1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xC8095C", Offset = "0xC8095C", VA = "0xC8095C")]
		[DebuggerHidden]
		public <DelayThenShiftPosition>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xC809A0", Offset = "0xC809A0", VA = "0xC809A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xC809A4", Offset = "0xC809A4", VA = "0xC809A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xC80BDC", Offset = "0xC80BDC", VA = "0xC80BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0xC808C0", Offset = "0xC808C0", VA = "0xC808C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0xC808E4", Offset = "0xC808E4", VA = "0xC808E4")]
	[IteratorStateMachine(typeof(<DelayThenShiftPosition>d__1))]
	protected IEnumerator DelayThenShiftPosition(float InDelayTime)
	{
		return null;
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0xC80984", Offset = "0xC80984", VA = "0xC80984")]
	public Vector3 FromFlippedZVector3f(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0xC8098C", Offset = "0xC8098C", VA = "0xC8098C")]
	public Quaternion FromFlippedZQuatf(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0xC80998", Offset = "0xC80998", VA = "0xC80998")]
	public ZNShiftPositionOnSpawn()
	{
	}
}
[Token(Token = "0x2000311")]
public struct TestStruct
{
	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool IsFree;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string Name;

	[Token(Token = "0x6001451")]
	[Address(RVA = "0xC80C24", Offset = "0xC80C24", VA = "0xC80C24")]
	public TestStruct(bool isFree, string name)
	{
	}
}
[Serializable]
[Token(Token = "0x2000312")]
public class CurrentAndMaxValue
{
	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("The current value")]
	[SerializeField]
	public int CurrentValue;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Tooltip("The min value")]
	[SerializeField]
	public int MinValue;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The max value")]
	[SerializeField]
	public int MaxValue;

	[Token(Token = "0x6001452")]
	[Address(RVA = "0xC80C34", Offset = "0xC80C34", VA = "0xC80C34")]
	public CurrentAndMaxValue(int InCurrentValue, int InMinValue, int InMaxValue)
	{
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0xC80CAC", Offset = "0xC80CAC", VA = "0xC80CAC")]
	public void Add(int InValue)
	{
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0xC80CD8", Offset = "0xC80CD8", VA = "0xC80CD8")]
	public CurrentAndMaxValue Subtract(int InValue)
	{
		return null;
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0xC80C88", Offset = "0xC80C88", VA = "0xC80C88")]
	public void Set(int InValue)
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0xC80DA0", Offset = "0xC80DA0", VA = "0xC80DA0")]
	public void SetToMax()
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0xC80DB4", Offset = "0xC80DB4", VA = "0xC80DB4")]
	public void SetToMin()
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0xC80DC8", Offset = "0xC80DC8", VA = "0xC80DC8")]
	public int GetDifference()
	{
		return default(int);
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0xC80DD8", Offset = "0xC80DD8", VA = "0xC80DD8")]
	public bool HasReachedMax()
	{
		return default(bool);
	}

	[Token(Token = "0x600145A")]
	[Address(RVA = "0xC80DEC", Offset = "0xC80DEC", VA = "0xC80DEC")]
	public bool HasDepleted()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000313")]
public struct FZNTieredWeaponBaseStats
{
	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The weapon's base damage")]
	[SerializeField]
	private int Damage;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[SerializeField]
	[Tooltip("When landing a critical hit, do this amount of damage instead")]
	private int CriticalDamage;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("If the weapon asset overrides stagger, uses this value instead of the damage for calculating stagger.")]
	[SerializeField]
	private int StaggerOverride;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[Tooltip("When inflicting damage with an energy attack, multiply the damage by this amount")]
	private double EnergyDamageMultiplier;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How much energy it costs to use/fire this weapon")]
	[SerializeField]
	private float UseEnergyCost;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The weapon's base currency cost")]
	[SerializeField]
	private int CurrencyCost;

	[Token(Token = "0x600145B")]
	[Address(RVA = "0xC80DFC", Offset = "0xC80DFC", VA = "0xC80DFC")]
	public FZNTieredWeaponBaseStats(int InDamage, int InCriticalDamage, int InStaggerOverride, double InEnergyDamageMultiplier, float InUseEnergyCost, int InCurrencyCost, string InStatsUpgradeText)
	{
	}

	[Token(Token = "0x600145C")]
	[Address(RVA = "0xC80E14", Offset = "0xC80E14", VA = "0xC80E14")]
	public int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0xC80E1C", Offset = "0xC80E1C", VA = "0xC80E1C")]
	public int GetCriticalDamage()
	{
		return default(int);
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0xC80E24", Offset = "0xC80E24", VA = "0xC80E24")]
	public int GetStaggerOverride()
	{
		return default(int);
	}

	[Token(Token = "0x600145F")]
	[Address(RVA = "0xC80E2C", Offset = "0xC80E2C", VA = "0xC80E2C")]
	public double GetEnergyDamageMultiplier()
	{
		return default(double);
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0xC80E34", Offset = "0xC80E34", VA = "0xC80E34")]
	public float GetUseEnergyCost()
	{
		return default(float);
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0xC80E3C", Offset = "0xC80E3C", VA = "0xC80E3C")]
	public int GetCurrencyCost()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000314")]
public struct FZNTieredGunWeaponStats
{
	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("How long in seconds between activations for gun weapons with the 'Hold' activation type.")]
	private float HoldActivationIntervalTime;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[SerializeField]
	[Tooltip("How long in seconds that the fire goes on cooldown for after firing")]
	private float FireOnCooldownTime;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[Tooltip("The weapon's max ammo")]
	private int MaxAmmo;

	[Token(Token = "0x6001462")]
	[Address(RVA = "0xC80E44", Offset = "0xC80E44", VA = "0xC80E44")]
	public FZNTieredGunWeaponStats(float InHoldActivationIntervalTime, float InFireOnCooldownTime, int InMaxAmmo)
	{
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0xC80E50", Offset = "0xC80E50", VA = "0xC80E50")]
	public float GetHoldActivationIntervalTime()
	{
		return default(float);
	}

	[Token(Token = "0x6001464")]
	[Address(RVA = "0xC80E58", Offset = "0xC80E58", VA = "0xC80E58")]
	public float GetFireOnCooldownTime()
	{
		return default(float);
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0xC80E60", Offset = "0xC80E60", VA = "0xC80E60")]
	public int GetMaxAmmo()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000315")]
public struct FZNTieredRangedWeaponStats
{
	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("The maximum spread (in degrees) that the fired shot will be offset by when one-handed")]
	private float OneHandedMaxSpread;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[SerializeField]
	[Tooltip("The maximum spread (in degrees) that the fired shot will be offset by when two-handed")]
	private float TwoHandedMaxSpread;

	[Token(Token = "0x6001466")]
	[Address(RVA = "0xC80E68", Offset = "0xC80E68", VA = "0xC80E68")]
	public FZNTieredRangedWeaponStats(float InOneHandedMaxSpread, float InTwoHandedMaxSpread)
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0xC80E70", Offset = "0xC80E70", VA = "0xC80E70")]
	public float GetOneHandedMaxSpread()
	{
		return default(float);
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0xC80E78", Offset = "0xC80E78", VA = "0xC80E78")]
	public float GetTwoHandedMaxSpread()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000316")]
public struct FZNTieredTraceWeaponStats
{
	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("If this weapon uses the laser sight")]
	[SerializeField]
	private bool bUsesLaserSight;

	[Token(Token = "0x6001469")]
	[Address(RVA = "0xC80E80", Offset = "0xC80E80", VA = "0xC80E80")]
	public FZNTieredTraceWeaponStats(bool bInUsesLaserSight)
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0xC80E8C", Offset = "0xC80E8C", VA = "0xC80E8C")]
	public bool DoesUseLaserSight()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000317")]
public struct FZNTieredMultiTraceWeaponStats
{
	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("The number of traces that this weapon does per fire")]
	private int NumTraces;

	[Token(Token = "0x600146B")]
	[Address(RVA = "0xC80E94", Offset = "0xC80E94", VA = "0xC80E94")]
	public FZNTieredMultiTraceWeaponStats(int InNumTraces)
	{
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0xC80E9C", Offset = "0xC80E9C", VA = "0xC80E9C")]
	public int GetNumTraces()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000318")]
public struct FZNTieredPersistentTraceWeaponStats
{
	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("How much damage this weapon does at power level 2")]
	private int PowerLevelTwoDamage;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("How much damage this weapon does at power level 3")]
	[SerializeField]
	private int PowerLevelThreeDamage;

	[Token(Token = "0x600146D")]
	[Address(RVA = "0xC80EA4", Offset = "0xC80EA4", VA = "0xC80EA4")]
	public FZNTieredPersistentTraceWeaponStats(int InPowerLevelTwoDamage, int InPowerLevelThreeDamage)
	{
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0xC80EAC", Offset = "0xC80EAC", VA = "0xC80EAC")]
	public int GetPowerLevelTwoDamage()
	{
		return default(int);
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0xC80EB4", Offset = "0xC80EB4", VA = "0xC80EB4")]
	public int GetPowerLevelThreeDamage()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000319")]
public struct FZNTieredChargeWeaponStats
{
	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The max number of charges that this charge weapon can take.")]
	[SerializeField]
	private int MaxNumCharges;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("The charge damage multiplier dictionary. AKA, how much the charge damage is multiplied at each charge level.")]
	[SerializeField]
	private SerializableDictionary<int, double> ChargeDamageMultiplierDict;

	[Token(Token = "0x6001470")]
	[Address(RVA = "0xC80EBC", Offset = "0xC80EBC", VA = "0xC80EBC")]
	public FZNTieredChargeWeaponStats(int InMaxNumCharges, SerializableDictionary<int, double> InChargeDamageMultiplierDict)
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0xC80EC8", Offset = "0xC80EC8", VA = "0xC80EC8")]
	public int GetMaxNumCharges()
	{
		return default(int);
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0xC80ED0", Offset = "0xC80ED0", VA = "0xC80ED0")]
	public SerializableDictionary<int, double> GetChargeDamageMultiplierDict()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200031A")]
public struct FZNTieredCooldownWeaponStats
{
	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The amount of seconds the cooldown will last.")]
	[SerializeField]
	private float CooldownDurationSeconds;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The number of times the weapon can be used before going into cooldown")]
	[SerializeField]
	private int MaxCharges;

	[Token(Token = "0x6001473")]
	[Address(RVA = "0xC80ED8", Offset = "0xC80ED8", VA = "0xC80ED8")]
	public FZNTieredCooldownWeaponStats(float InCooldownDurationSeconds, int InMaxCharges)
	{
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0xC80EE4", Offset = "0xC80EE4", VA = "0xC80EE4")]
	public float GetCooldownDurationSeconds()
	{
		return default(float);
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0xC80EEC", Offset = "0xC80EEC", VA = "0xC80EEC")]
	public int GetMaxCharges()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200031B")]
public struct FZNTieredProjectileWeaponStats
{
	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The radius of the projectile's AOE")]
	[SerializeField]
	private float ProjectileAOERadius;

	[Token(Token = "0x6001476")]
	[Address(RVA = "0xC80EF4", Offset = "0xC80EF4", VA = "0xC80EF4")]
	public FZNTieredProjectileWeaponStats(float InProjectileAOERadius)
	{
	}

	[Token(Token = "0x6001477")]
	[Address(RVA = "0xC80EFC", Offset = "0xC80EFC", VA = "0xC80EFC")]
	public float GetProjectileAOERadius()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x200031C")]
public struct FZNTieredCryoGunWeaponStats
{
	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The max damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMaxDamagePow1;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The min damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMinDamagePow1;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("The max damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMaxDamagePow2;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Tooltip("The min damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMinDamagePow2;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("The max damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMaxDamagePow3;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Tooltip("The min damage done by the cryo explosion")]
	[SerializeField]
	private int CryoExplosionMinDamagePow3;

	[Token(Token = "0x6001478")]
	[Address(RVA = "0xC80F04", Offset = "0xC80F04", VA = "0xC80F04")]
	public FZNTieredCryoGunWeaponStats(int InCryoExplosionMaxDamagePow1, int InCryoExplosionMinDamagePow1, int InCryoExplosionMaxDamagePow2, int InCryoExplosionMinDamagePow2, int InCryoExplosionMaxDamagePow3, int InCryoExplosionMinDamagePow3)
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0xC80F14", Offset = "0xC80F14", VA = "0xC80F14")]
	public int GetCryoExplosionMaxDamage(int InPowerLevel)
	{
		return default(int);
	}

	[Token(Token = "0x600147A")]
	[Address(RVA = "0xC80F40", Offset = "0xC80F40", VA = "0xC80F40")]
	public int GetCryoExplosionMinDamage(int InPowerLevel)
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200031D")]
public struct FZNTieredGrenadeWeaponStats
{
	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The radius of the grenade")]
	[SerializeField]
	private float GrenadeRadius;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("How much falloff damage is multiplied by at the edge of the radius")]
	[Range(0f, 1f)]
	[SerializeField]
	private double FalloffDamageAtEdgeMultiplier;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("How long in seconds it takes until the grenade explodes")]
	[SerializeField]
	private float TimeToExplode;

	[Token(Token = "0x600147B")]
	[Address(RVA = "0xC80F70", Offset = "0xC80F70", VA = "0xC80F70")]
	public FZNTieredGrenadeWeaponStats(float InGrenadeRadius, double InFalloffDamageAtEdgeMultiplier, float InTimeToExplode)
	{
	}

	[Token(Token = "0x600147C")]
	[Address(RVA = "0xC80F80", Offset = "0xC80F80", VA = "0xC80F80")]
	public float GetGrenadeRadius()
	{
		return default(float);
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0xC80F88", Offset = "0xC80F88", VA = "0xC80F88")]
	public double GetFalloffDamageAtEdgeMultiplier()
	{
		return default(double);
	}

	[Token(Token = "0x600147E")]
	[Address(RVA = "0xC80F90", Offset = "0xC80F90", VA = "0xC80F90")]
	public float GetTimeToExplode()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x200031E")]
public struct FZNTieredQuantityWeaponStats
{
	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The max quantity of objects")]
	[SerializeField]
	private int MaxQuantity;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The time in seconds it takes to regenerate one object")]
	[SerializeField]
	private float RegenerateObjectTime;

	[Token(Token = "0x600147F")]
	[Address(RVA = "0xC80F98", Offset = "0xC80F98", VA = "0xC80F98")]
	public FZNTieredQuantityWeaponStats(int InMaxQuantity, float InRegenerateObjectTime)
	{
	}

	[Token(Token = "0x6001480")]
	[Address(RVA = "0xC80FA4", Offset = "0xC80FA4", VA = "0xC80FA4")]
	public int GetMaxQuantity()
	{
		return default(int);
	}

	[Token(Token = "0x6001481")]
	[Address(RVA = "0xC80FAC", Offset = "0xC80FAC", VA = "0xC80FAC")]
	public float GetRegenerateObjectTime()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x200031F")]
public struct FZNEnemyBaseStats
{
	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The health of this enemy")]
	[SerializeField]
	private int BaseHealth;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("How much experience you get for defeating this enemy")]
	[SerializeField]
	private int ObtainedExperience;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[Tooltip("How much stagger is regenerated per second for each stagger type.")]
	private int StaggerRegen;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Tooltip("The speed that this enemy moves by default")]
	[SerializeField]
	private float BaseSpeed;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("The speed that this enemy moves when indoors")]
	[SerializeField]
	private float IndoorSpeed;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The damage multiplier for each body part. If a body part is not entered, it uses 1.0 as a base value. NOTE: Critical hits are determined by a value being above 1.0 here.")]
	[SerializeField]
	private SerializableDictionary<EZNBodyParts, float> BodyPartDamageMultiplier;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The stagger multiplier for each body part. If a body part is not entered, it uses 1.0 as a base value.")]
	[SerializeField]
	private SerializableDictionary<EZNBodyParts, float> BodyPartStaggerMultiplier;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The threshold (health) for each stagger type (AKA, how much stagger needs to be done to inflict the stagger). If a stagger type is not set, that stagger does not apply to this enemy.")]
	[SerializeField]
	private SerializableDictionary<EZNStaggerTypes, int> StaggerThresholds;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("How long each stagger type lasts for. If not set, stagger ends (almost) immediately on the idle animation.")]
	[SerializeField]
	private SerializableDictionary<EZNStaggerTypes, float> StaggerDurations;

	[Token(Token = "0x6001482")]
	[Address(RVA = "0xC80FB4", Offset = "0xC80FB4", VA = "0xC80FB4")]
	public FZNEnemyBaseStats(int InBaseHealth, int InObtainedExperience, int InStaggerRegen, float InBaseSpeed, float InIndoorSpeed, SerializableDictionary<EZNBodyParts, float> InBodyPartDamageMulltiplier, SerializableDictionary<EZNBodyParts, float> InBodyPartStaggerMultiplier, SerializableDictionary<EZNStaggerTypes, int> InStaggerThresholds, SerializableDictionary<EZNStaggerTypes, float> InStaggerDurations)
	{
	}

	[Token(Token = "0x6001483")]
	[Address(RVA = "0xC80FCC", Offset = "0xC80FCC", VA = "0xC80FCC")]
	public int GetBaseHealth()
	{
		return default(int);
	}

	[Token(Token = "0x6001484")]
	[Address(RVA = "0xC80FD4", Offset = "0xC80FD4", VA = "0xC80FD4")]
	public int GetObtainedExperience()
	{
		return default(int);
	}

	[Token(Token = "0x6001485")]
	[Address(RVA = "0xC80FDC", Offset = "0xC80FDC", VA = "0xC80FDC")]
	public int GetStaggerRegen()
	{
		return default(int);
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0xC80FE4", Offset = "0xC80FE4", VA = "0xC80FE4")]
	public float GetBaseSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0xC80FEC", Offset = "0xC80FEC", VA = "0xC80FEC")]
	public float GetIndoorSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0xC80FF4", Offset = "0xC80FF4", VA = "0xC80FF4")]
	public SerializableDictionary<EZNBodyParts, float> GetBodyPartDamageMultiplier()
	{
		return null;
	}

	[Token(Token = "0x6001489")]
	[Address(RVA = "0xC80FFC", Offset = "0xC80FFC", VA = "0xC80FFC")]
	public SerializableDictionary<EZNBodyParts, float> GetBodyPartStaggerMultiplier()
	{
		return null;
	}

	[Token(Token = "0x600148A")]
	[Address(RVA = "0xC81004", Offset = "0xC81004", VA = "0xC81004")]
	public SerializableDictionary<EZNStaggerTypes, int> GetStaggerThresholds()
	{
		return null;
	}

	[Token(Token = "0x600148B")]
	[Address(RVA = "0xC8100C", Offset = "0xC8100C", VA = "0xC8100C")]
	public SerializableDictionary<EZNStaggerTypes, float> GetStaggerDurations()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000320")]
public struct FZNNavigationParameters
{
	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("How much weight the navigable has against other navigables. This number is multiplied with distance to determine a true weight.")]
	private float NavigationWeight;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("How far from the object the navigating character should stop")]
	[SerializeField]
	private float StoppingDistance;

	[Token(Token = "0x600148C")]
	[Address(RVA = "0xC81014", Offset = "0xC81014", VA = "0xC81014")]
	public FZNNavigationParameters(float InNavigationWeight, float InStoppingDistance)
	{
	}

	[Token(Token = "0x600148D")]
	[Address(RVA = "0xC8101C", Offset = "0xC8101C", VA = "0xC8101C")]
	public float GetNavigationWeight()
	{
		return default(float);
	}

	[Token(Token = "0x600148E")]
	[Address(RVA = "0xC81024", Offset = "0xC81024", VA = "0xC81024")]
	public float GetStoppingDistance()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000321")]
public struct FZNProjectileInfo
{
	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The character that owns this projectile")]
	[SerializeField]
	private ZNCharacterBase OwningCharacter;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("If a weapon spawned this projectile, this is the owning weapon")]
	[SerializeField]
	private ZNWeaponBase OwningWeapon;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("The damage that this projectile inflicts")]
	[SerializeField]
	private int Damage;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Tooltip("The stagger that this projectile inflicts")]
	[SerializeField]
	private int Stagger;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("If this projectile is an energy attack")]
	[SerializeField]
	private bool bEnergyAttack;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("If this projectile overrides stagger")]
	[SerializeField]
	private bool bOverrideStagger;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Tooltip("The damage amount to use if overriding stagger")]
	private int StaggerOverrideDamage;

	[Token(Token = "0x600148F")]
	[Address(RVA = "0xC8102C", Offset = "0xC8102C", VA = "0xC8102C")]
	public FZNProjectileInfo(ZNCharacterBase InOwningCharacter, ZNWeaponBase InOwningWeapon, int InDamage, int InStagger, bool bInEnergyAttack, bool bInOverrideStagger, int InStaggerOverrideDamage)
	{
	}

	[Token(Token = "0x6001490")]
	[Address(RVA = "0xC8104C", Offset = "0xC8104C", VA = "0xC8104C")]
	public ZNCharacterBase GetOwningCharacter()
	{
		return null;
	}

	[Token(Token = "0x6001491")]
	[Address(RVA = "0xC81054", Offset = "0xC81054", VA = "0xC81054")]
	public ZNWeaponBase GetOwningWeapon()
	{
		return null;
	}

	[Token(Token = "0x6001492")]
	[Address(RVA = "0xC8105C", Offset = "0xC8105C", VA = "0xC8105C")]
	public int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0xC81064", Offset = "0xC81064", VA = "0xC81064")]
	public int GetStagger()
	{
		return default(int);
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0xC8106C", Offset = "0xC8106C", VA = "0xC8106C")]
	public bool IsEnergyAttack()
	{
		return default(bool);
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0xC81074", Offset = "0xC81074", VA = "0xC81074")]
	public bool DoesOverrideStagger()
	{
		return default(bool);
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0xC8107C", Offset = "0xC8107C", VA = "0xC8107C")]
	public int GetStaggerOverrideDamage()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000322")]
public class FZNReloadInfo
{
	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[Tooltip("The world position when this was tracked")]
	private bool bSetToMaxAmmo;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Tooltip("How much to reload when we don't fill to max ammo")]
	[SerializeField]
	private int ReloadAmount;

	[Token(Token = "0x6001497")]
	[Address(RVA = "0xC81084", Offset = "0xC81084", VA = "0xC81084")]
	public FZNReloadInfo()
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0xC81098", Offset = "0xC81098", VA = "0xC81098")]
	public bool DoesSetToMaxAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x6001499")]
	[Address(RVA = "0xC810A0", Offset = "0xC810A0", VA = "0xC810A0")]
	public int GetReloadAmount()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000323")]
public struct SAPositionHistory
{
	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The world position when this was tracked")]
	[SerializeField]
	private Vector3 Position;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Tooltip("The world rotation when this was tracked")]
	[SerializeField]
	private Quaternion Rotation;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The time (since the level has loaded) when this was tracked")]
	[SerializeField]
	private float Time;

	[Token(Token = "0x600149A")]
	[Address(RVA = "0xC810A8", Offset = "0xC810A8", VA = "0xC810A8")]
	public SAPositionHistory(Vector3 InPosition, Quaternion InRotation, float InTime)
	{
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0xC810BC", Offset = "0xC810BC", VA = "0xC810BC")]
	public Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0xC810C8", Offset = "0xC810C8", VA = "0xC810C8")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0xC810D4", Offset = "0xC810D4", VA = "0xC810D4")]
	public float GetTime()
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000324")]
public struct FZNReturnPointSwapParameters
{
	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("If this is a change done manually/physically by the player")]
	[SerializeField]
	private bool bManualChange;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	[Tooltip("If this was a shop purchase")]
	[SerializeField]
	private bool bShopPurchase;

	[Token(Token = "0x600149E")]
	[Address(RVA = "0xC810DC", Offset = "0xC810DC", VA = "0xC810DC")]
	public FZNReturnPointSwapParameters(bool bInManualChange, bool bInShopPurchase)
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0xC810F0", Offset = "0xC810F0", VA = "0xC810F0")]
	public bool IsManualChange()
	{
		return default(bool);
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0xC810F8", Offset = "0xC810F8", VA = "0xC810F8")]
	public bool IsShopPurchase()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000325")]
public struct FZNRoomSizeVariedInfo
{
	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[Tooltip("The min room area in meters squared. If the room is larger than this number, it may be selected as the room size.")]
	private float MinRoomArea;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The max number of enemies that can be in the room")]
	[SerializeField]
	private int MaxNumEnemies;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("The max number of enemy spawners that can be in the room")]
	[SerializeField]
	private int MaxNumSpawners;

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0xC81100", Offset = "0xC81100", VA = "0xC81100")]
	public float GetMinRoomArea()
	{
		return default(float);
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0xC81108", Offset = "0xC81108", VA = "0xC81108")]
	public int GetMaxNumEnemies()
	{
		return default(int);
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0xC81110", Offset = "0xC81110", VA = "0xC81110")]
	public int GetMaxNumSpawners()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000326")]
public struct ZNSpecialWaveInfo
{
	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The wave number for the special wave")]
	[SerializeField]
	private int WaveNumber;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[Tooltip("If set, adds a new enemy type to be spawned with a spawn weight. (Ensure that the int value is higher than 0 for it to spawn.)")]
	private SerializableDictionary<ZNEnemyAsset, int> NewEnemyAssetAndSpawnWeightDictionary;

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0xC81118", Offset = "0xC81118", VA = "0xC81118")]
	public ZNSpecialWaveInfo(int InWaveNumber)
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0xC8119C", Offset = "0xC8119C", VA = "0xC8119C")]
	public int GetWaveNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0xC811A4", Offset = "0xC811A4", VA = "0xC811A4")]
	public SerializableDictionary<ZNEnemyAsset, int> GetNewEnemyAssetAndSpawnWeightDictionary()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000327")]
public struct FZNEnemySpawnInfo
{
	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The weight that the enemy has to spawn")]
	[SerializeField]
	private int SpawnWeight;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The first wave where this zombie starts showing up")]
	[SerializeField]
	private int InitialWave;

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0xC811AC", Offset = "0xC811AC", VA = "0xC811AC")]
	public FZNEnemySpawnInfo(int InSpawnWeight, int InInitialWave)
	{
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0xC811B4", Offset = "0xC811B4", VA = "0xC811B4")]
	public int GetSpawnWeight()
	{
		return default(int);
	}

	[Token(Token = "0x60014A9")]
	[Address(RVA = "0xC811BC", Offset = "0xC811BC", VA = "0xC811BC")]
	public int GetInitialWave()
	{
		return default(int);
	}
}
[Token(Token = "0x2000328")]
public struct FZNWaveSpawnInfo
{
	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<ZNEnemyAsset, int> EnemySpawnCounts;

	[Token(Token = "0x60014AA")]
	[Address(RVA = "0xC811C4", Offset = "0xC811C4", VA = "0xC811C4")]
	public FZNWaveSpawnInfo(Dictionary<ZNEnemyAsset, int> InEnemySpawnCounts)
	{
	}

	[Token(Token = "0x60014AB")]
	[Address(RVA = "0xC811CC", Offset = "0xC811CC", VA = "0xC811CC")]
	public Dictionary<ZNEnemyAsset, int> GetEnemySpawnCounts()
	{
		return null;
	}

	[Token(Token = "0x60014AC")]
	[Address(RVA = "0xC811D4", Offset = "0xC811D4", VA = "0xC811D4")]
	public int GetNumEnemiesInWave()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000329")]
public struct FZNDamageInfo
{
	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The damage, adjusted to not go above the victim's max health")]
	[SerializeField]
	public int AdjustedDamage;

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The damage inflicted, can be damage that went above the max value")]
	[SerializeField]
	public int PureDamage;

	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("The stagger inflicted")]
	[SerializeField]
	public int Stagger;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Tooltip("The location where the damage took place")]
	[SerializeField]
	public Vector3 DamageLocation;

	[Token(Token = "0x4000D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("The normal where the damage hit took place")]
	public Vector3 DamageNormal;

	[Token(Token = "0x4000D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("The character who inflicted the damage")]
	public ZNCharacterBase DamageInstigator;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The weapon that damaged the victim")]
	[SerializeField]
	public ZNWeaponBase DamagingWeapon;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The damaged victim")]
	[SerializeField]
	public IZNDamageable DamageVictim;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The damaged body part")]
	[SerializeField]
	public EZNBodyParts DamagedBodyPart;

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If this damage was a critical hit")]
	[SerializeField]
	public bool bCriticalHit;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[Tooltip("If this damage was true damage")]
	[SerializeField]
	public bool bTrueDamage;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Results from when damage is taken")]
	[SerializeField]
	public FZNTakeDamageResults TakeDamageResults;

	[Token(Token = "0x60014AD")]
	[Address(RVA = "0xC81324", Offset = "0xC81324", VA = "0xC81324")]
	public FZNDamageInfo(int InAdjustedDamage, int InPureDamage, int InStagger, Vector3 InDamageLocation, Vector3 InDamageNormal, ZNCharacterBase InDamageInstigator, ZNWeaponBase InDamagingWeapon, IZNDamageable InDamageVictim)
	{
	}

	[Token(Token = "0x60014AE")]
	[Address(RVA = "0xC81354", Offset = "0xC81354", VA = "0xC81354")]
	public bool IsCharacterDamage()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200032A")]
public struct FZNTakeDamageResults
{
	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The damage, adjusted to not go above the victim's max health")]
	[SerializeField]
	public int AdjustedDamage;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The stagger inflicted, adjusted to not go above the max value")]
	[SerializeField]
	public int AdjustedStagger;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	[Tooltip("If this damage caused a stagger")]
	public bool bStaggerHit;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Tooltip("If this was a stagger hit, what type of stagger it caused")]
	[SerializeField]
	public EZNStaggerTypes StaggerHitType;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("If this damage killed the target")]
	[SerializeField]
	public bool bKillingBlow;

	[Token(Token = "0x60014AF")]
	[Address(RVA = "0xC813D0", Offset = "0xC813D0", VA = "0xC813D0")]
	public FZNTakeDamageResults(int InAdjustedDamage, int InAdjustedStagger)
	{
	}
}
[Serializable]
[Token(Token = "0x200032B")]
public class FZNTrackedWeaponInfo
{
	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public int DamageInflicted;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	public int NumCriticalHits;

	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int NumKills;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public int NumActivations;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public int NumSuccessfulActivations;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public int NumHits;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public int NumReloads;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public int NumStaggers;

	[Token(Token = "0x60014B0")]
	[Address(RVA = "0xC813E4", Offset = "0xC813E4", VA = "0xC813E4")]
	public FZNTrackedWeaponInfo()
	{
	}

	[Token(Token = "0x60014B1")]
	[Address(RVA = "0xC81404", Offset = "0xC81404", VA = "0xC81404")]
	public FZNTrackedWeaponInfo(int InDamageInflicted, int InNumCriticalHits, int InNumKills, int InNumActivations, int InNumSuccessfulActivations, int InNumHits, int InNumReloads, int InNumStaggers)
	{
	}

	[Token(Token = "0x60014B2")]
	[Address(RVA = "0xC8146C", Offset = "0xC8146C", VA = "0xC8146C")]
	public static FZNTrackedWeaponInfo operator +(FZNTrackedWeaponInfo LHS, FZNTrackedWeaponInfo RHS)
	{
		return null;
	}

	[Token(Token = "0x60014B3")]
	[Address(RVA = "0xC81550", Offset = "0xC81550", VA = "0xC81550")]
	public int GetDamageInflicted()
	{
		return default(int);
	}

	[Token(Token = "0x60014B4")]
	[Address(RVA = "0xC81558", Offset = "0xC81558", VA = "0xC81558")]
	public int GetNumCriticalHits()
	{
		return default(int);
	}

	[Token(Token = "0x60014B5")]
	[Address(RVA = "0xC81560", Offset = "0xC81560", VA = "0xC81560")]
	public int GetNumKills()
	{
		return default(int);
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0xC81568", Offset = "0xC81568", VA = "0xC81568")]
	public int GetNumActivations()
	{
		return default(int);
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0xC81570", Offset = "0xC81570", VA = "0xC81570")]
	public int GetNumSuccessfulActivations()
	{
		return default(int);
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0xC81578", Offset = "0xC81578", VA = "0xC81578")]
	public int GetAccuracyAsIntegerOutOf100()
	{
		return default(int);
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0xC81610", Offset = "0xC81610", VA = "0xC81610")]
	public int GetNumHits()
	{
		return default(int);
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0xC81618", Offset = "0xC81618", VA = "0xC81618")]
	public int GetNumReloads()
	{
		return default(int);
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0xC81620", Offset = "0xC81620", VA = "0xC81620")]
	public int GetNumStaggers()
	{
		return default(int);
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0xC81628", Offset = "0xC81628", VA = "0xC81628")]
	public int GetStatForStatKey(string InStatKey)
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200032C")]
public class FZNTrackedEnemyInfo
{
	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public int DamageInflicted;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	public int NumKills;

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0xC818E0", Offset = "0xC818E0", VA = "0xC818E0")]
	public FZNTrackedEnemyInfo()
	{
	}

	[Token(Token = "0x60014BE")]
	[Address(RVA = "0xC818FC", Offset = "0xC818FC", VA = "0xC818FC")]
	public FZNTrackedEnemyInfo(int InDamageInflicted, int InNumKills)
	{
	}

	[Token(Token = "0x60014BF")]
	[Address(RVA = "0xC81928", Offset = "0xC81928", VA = "0xC81928")]
	public static FZNTrackedEnemyInfo operator +(FZNTrackedEnemyInfo LHS, FZNTrackedEnemyInfo RHS)
	{
		return null;
	}

	[Token(Token = "0x60014C0")]
	[Address(RVA = "0xC819B0", Offset = "0xC819B0", VA = "0xC819B0")]
	public int GetDamageInflicted()
	{
		return default(int);
	}

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0xC819B8", Offset = "0xC819B8", VA = "0xC819B8")]
	public int GetNumKills()
	{
		return default(int);
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0xC819C0", Offset = "0xC819C0", VA = "0xC819C0")]
	public int GetStatForStatKey(string InStatKey)
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200032D")]
public class FZNTrackedCaseFileInfo
{
	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private FZNTrackedCaseFileDifficultyInfo EasyTrackedCaseFileDifficultyInfo;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private FZNTrackedCaseFileDifficultyInfo NormalTrackedCaseFileDifficultyInfo;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private FZNTrackedCaseFileDifficultyInfo HardTrackedCaseFileDifficultyInfo;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private FZNTrackedCaseFileDifficultyInfo MasterTrackedCaseFileDifficultyInfo;

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0xC81A5C", Offset = "0xC81A5C", VA = "0xC81A5C")]
	public FZNTrackedCaseFileInfo()
	{
	}

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0xC81B78", Offset = "0xC81B78", VA = "0xC81B78")]
	public FZNTrackedCaseFileInfo(FZNTrackedCaseFileDifficultyInfo InEasyTrackedCaseFileDifficultyInfo, FZNTrackedCaseFileDifficultyInfo InNormalTrackedCaseFileDifficultyInfo, FZNTrackedCaseFileDifficultyInfo InHardTrackedCaseFileDifficultyInfo, FZNTrackedCaseFileDifficultyInfo InMasterTrackedCaseFileDifficultyInfo)
	{
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0xC81BB8", Offset = "0xC81BB8", VA = "0xC81BB8")]
	public FZNTrackedCaseFileInfo(FZNTrackedCaseFileDifficultyInfo InTrackedCaseFileDifficultyInfo, EZNDifficulties InDifficulty)
	{
	}

	[Token(Token = "0x60014C6")]
	[Address(RVA = "0xC81D00", Offset = "0xC81D00", VA = "0xC81D00")]
	public static FZNTrackedCaseFileInfo operator +(FZNTrackedCaseFileInfo LHS, FZNTrackedCaseFileInfo RHS)
	{
		return null;
	}

	[Token(Token = "0x60014C7")]
	[Address(RVA = "0xC81E3C", Offset = "0xC81E3C", VA = "0xC81E3C")]
	public FZNTrackedCaseFileDifficultyInfo GetTrackedCaseFileDifficultyInfo(EZNDifficulties InDifficulty)
	{
		return null;
	}

	[Token(Token = "0x60014C8")]
	[Address(RVA = "0xC81FBC", Offset = "0xC81FBC", VA = "0xC81FBC")]
	public int GetHighScore(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60014C9")]
	[Address(RVA = "0xC81FD8", Offset = "0xC81FD8", VA = "0xC81FD8")]
	public int GetNumTimesCompleted(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60014CA")]
	[Address(RVA = "0xC81FF4", Offset = "0xC81FF4", VA = "0xC81FF4")]
	public bool HasBeenCompleted(EZNDifficulties InDifficulty)
	{
		return default(bool);
	}

	[Token(Token = "0x60014CB")]
	[Address(RVA = "0xC82028", Offset = "0xC82028", VA = "0xC82028")]
	public bool HasBeenCompletedOrLowerDifficultyHasBeenCompleted(EZNDifficulties InDifficulty)
	{
		return default(bool);
	}

	[Token(Token = "0x60014CC")]
	[Address(RVA = "0xC82118", Offset = "0xC82118", VA = "0xC82118")]
	public bool HasBeenCompletedOrHigherDifficultyHasBeenCompleted(EZNDifficulties InDifficulty)
	{
		return default(bool);
	}

	[Token(Token = "0x60014CD")]
	[Address(RVA = "0xC8220C", Offset = "0xC8220C", VA = "0xC8220C")]
	public bool HasAnyDifficultyBeenCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x60014CE")]
	[Address(RVA = "0xC82274", Offset = "0xC82274", VA = "0xC82274")]
	public int GetNumWavesCleared(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60014CF")]
	[Address(RVA = "0xC82290", Offset = "0xC82290", VA = "0xC82290")]
	public int GetNumWavesClearedForEqualOrLowerDifficulty(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60014D0")]
	[Address(RVA = "0xC82388", Offset = "0xC82388", VA = "0xC82388")]
	public int GetNumWavesClearedForEqualOrHigherDifficulty(EZNDifficulties InDifficulty)
	{
		return default(int);
	}

	[Token(Token = "0x60014D1")]
	[Address(RVA = "0xC8248C", Offset = "0xC8248C", VA = "0xC8248C")]
	public int GetBestNumWavesCleared()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200032E")]
public class FZNTrackedCaseFileDifficultyInfo
{
	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected int HighScore;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	protected int NumTimesCompleted;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected int NumWavesCleared;

	[Token(Token = "0x60014D2")]
	[Address(RVA = "0xC81F9C", Offset = "0xC81F9C", VA = "0xC81F9C")]
	public FZNTrackedCaseFileDifficultyInfo()
	{
	}

	[Token(Token = "0x60014D3")]
	[Address(RVA = "0xC81B3C", Offset = "0xC81B3C", VA = "0xC81B3C")]
	public FZNTrackedCaseFileDifficultyInfo(int InHighScore, int InNumTimesCompleted, int InNumWavesCleared)
	{
	}

	[Token(Token = "0x60014D4")]
	[Address(RVA = "0xC81EEC", Offset = "0xC81EEC", VA = "0xC81EEC")]
	public static FZNTrackedCaseFileDifficultyInfo operator +(FZNTrackedCaseFileDifficultyInfo LHS, FZNTrackedCaseFileDifficultyInfo RHS)
	{
		return null;
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0xC82590", Offset = "0xC82590", VA = "0xC82590")]
	public int GetHighScore()
	{
		return default(int);
	}

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0xC82598", Offset = "0xC82598", VA = "0xC82598")]
	public int GetNumTimesCompleted()
	{
		return default(int);
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0xC82018", Offset = "0xC82018", VA = "0xC82018")]
	public bool HasBeenCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0xC825A0", Offset = "0xC825A0", VA = "0xC825A0")]
	public int GetNumWavesCleared()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200032F")]
public class FZNBuilderObjectInfo
{
	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[Tooltip("The object that will be built")]
	protected GameObject PF_BuildObject;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The preview of the object that will be built - should not contain functionality")]
	[SerializeField]
	protected GameObject PF_PreviewBuildObject;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If this builder object can be built on walls")]
	[SerializeField]
	protected bool bAllowOnWall;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Tooltip("If allowed on walls, then if we should snap the build to the floor when on the wall.")]
	[SerializeField]
	protected bool bSnapWallBuildToFloor;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Tooltip("Only used if SnapWallBuildToFloor is true. When previewing a build, takes the normal and offsets this from the normal by this value, then performs the line trace down to determine the floor.")]
	protected float SnapWallNormalExtrudeOffset;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If this builder object can be built on the floor")]
	[SerializeField]
	protected bool bAllowOnFloor;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	[Tooltip("If this builder object can be built on the ceiling")]
	protected bool bAllowOnCeiling;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[Tooltip("If true, this MUST be inside the room and not in the false volume.")]
	[SerializeField]
	protected bool bRequireInsideRoom;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("If we overlap a room box piece, these surface types are ignored during the collision check")]
	[SerializeField]
	protected List<EZNSurfaceTypes> IgnoredSurfaceTypesDuringCollisionCheck;

	[Token(Token = "0x60014D9")]
	[Address(RVA = "0xC825A8", Offset = "0xC825A8", VA = "0xC825A8")]
	public FZNBuilderObjectInfo()
	{
	}

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0xC825E8", Offset = "0xC825E8", VA = "0xC825E8")]
	public FZNBuilderObjectInfo(GameObject InPF_BuildObject, GameObject InPF_PreviewBuildObject, bool bInAllowOnWall, bool bInSnapWallBuildToFloor, float InNormalExtrudeOffset, bool bInAllowOnFloor, bool bInAllowOnCeiling, bool bInRequireInsideRoom)
	{
	}

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0xC82678", Offset = "0xC82678", VA = "0xC82678")]
	public GameObject GetPF_BuildObject()
	{
		return null;
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0xC82680", Offset = "0xC82680", VA = "0xC82680")]
	public GameObject GetPF_PreviewBuildObject()
	{
		return null;
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0xC82688", Offset = "0xC82688", VA = "0xC82688")]
	public bool IsAllowOnWall()
	{
		return default(bool);
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0xC82690", Offset = "0xC82690", VA = "0xC82690")]
	public bool DoesSnapWallBuildToFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0xC82698", Offset = "0xC82698", VA = "0xC82698")]
	public float GetSnapWallNormalExtrudeOffset()
	{
		return default(float);
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0xC826A0", Offset = "0xC826A0", VA = "0xC826A0")]
	public bool DoesAllowOnFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0xC826A8", Offset = "0xC826A8", VA = "0xC826A8")]
	public bool DoesAllowOnCeiling()
	{
		return default(bool);
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0xC826B0", Offset = "0xC826B0", VA = "0xC826B0")]
	public bool DoesRequireInsideRoom()
	{
		return default(bool);
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0xC826B8", Offset = "0xC826B8", VA = "0xC826B8")]
	public List<EZNSurfaceTypes> GetIgnoredSurfaceTypesDuringCollisionCheck()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000330")]
public class FZNShopItemCostInfo
{
	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Tooltip("The currency percentile range")]
	[SerializeField]
	protected Vector2 CurrencyPercentileRange;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The fallback hard values range to use if the currency percentile range returned no results")]
	[SerializeField]
	protected Vector2Int FallbackHardValueRange;

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0xC826C0", Offset = "0xC826C0", VA = "0xC826C0")]
	public FZNShopItemCostInfo()
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0xC826E0", Offset = "0xC826E0", VA = "0xC826E0")]
	public FZNShopItemCostInfo(Vector2 InCurrencyPercentileRange, Vector2Int InFallbackHardValueRange)
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0xC82734", Offset = "0xC82734", VA = "0xC82734")]
	public Vector2 GetCurrencyPercentileRange()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0xC8273C", Offset = "0xC8273C", VA = "0xC8273C")]
	public Vector2Int GetFallbackHardValueRange()
	{
		return default(Vector2Int);
	}
}
[Token(Token = "0x2000331")]
public class FZNShopWeaponDeterminantInfo
{
	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected ZNWeaponAsset WeaponAsset;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int WeaponTier;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected int CurrencyCost;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int SpawnWeight;

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0xC82744", Offset = "0xC82744", VA = "0xC82744")]
	public FZNShopWeaponDeterminantInfo()
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0xC8274C", Offset = "0xC8274C", VA = "0xC8274C")]
	public FZNShopWeaponDeterminantInfo(ZNWeaponAsset InWeaponAsset, int InWeaponTier, int InCurrencyCost, int InSpawnWeight)
	{
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0xC82790", Offset = "0xC82790", VA = "0xC82790")]
	public ZNWeaponAsset GetWeaponAsset()
	{
		return null;
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0xC82798", Offset = "0xC82798", VA = "0xC82798")]
	public int GetWeaponTier()
	{
		return default(int);
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0xC827A0", Offset = "0xC827A0", VA = "0xC827A0")]
	public int GetCurrencyCost()
	{
		return default(int);
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0xC827A8", Offset = "0xC827A8", VA = "0xC827A8")]
	public int GetSpawnWeight()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000332")]
public struct FZNTieredScoreMultiplierStats
{
	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The maximum amount that the score will be multiplied by in this tier")]
	[SerializeField]
	private int MaxMultiplierValue;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Tooltip("The amount of kills needed to increase the multiplier value")]
	[SerializeField]
	private int KillsForNextMultiplier;

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0xC827B0", Offset = "0xC827B0", VA = "0xC827B0")]
	public FZNTieredScoreMultiplierStats(int InMaxMultiplierValue, int InKillsForNextMultiplier)
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0xC827B8", Offset = "0xC827B8", VA = "0xC827B8")]
	public int GetMaxMultiplierValue()
	{
		return default(int);
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0xC827C0", Offset = "0xC827C0", VA = "0xC827C0")]
	public int GetKillsForNextMultiplier()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x2000333")]
public struct FZNWeaponSkinInfo
{
	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Tooltip("The materials to use for this skin")]
	[SerializeField]
	public Material[] SkinMaterialsList;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Tooltip("If this skin is locked by default")]
	[SerializeField]
	public bool bLockedByDefault;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[Tooltip("The unlock condition assets that must be completed to unlock the skin (if it is locked by default)")]
	public SAUnlockConditionAsset UnlockConditionAsset;

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0xC827C8", Offset = "0xC827C8", VA = "0xC827C8")]
	public FZNWeaponSkinInfo(Material[] InSkinMaterialsList, bool bInLockedByDefault, SAUnlockConditionAsset InUnlockConditionAssetAsset)
	{
	}

	[Token(Token = "0x60014F2")]
	[Address(RVA = "0xC827DC", Offset = "0xC827DC", VA = "0xC827DC")]
	public Material[] GetSkinMaterialsList()
	{
		return null;
	}

	[Token(Token = "0x60014F3")]
	[Address(RVA = "0xC827E4", Offset = "0xC827E4", VA = "0xC827E4")]
	public bool IsLockedByDefault()
	{
		return default(bool);
	}

	[Token(Token = "0x60014F4")]
	[Address(RVA = "0xC827EC", Offset = "0xC827EC", VA = "0xC827EC")]
	public SAUnlockConditionAsset GetUnlockConditionAsset()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000334")]
public class FZNCreditsSectionInfo
{
	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected EZNCreditsSectionTypes CreditsSectionType;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected LocalizedString SectionHeader;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected List<string> Names;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Sprite ImageSprite;

	[Token(Token = "0x60014F5")]
	[Address(RVA = "0xC827F4", Offset = "0xC827F4", VA = "0xC827F4")]
	public FZNCreditsSectionInfo()
	{
	}

	[Token(Token = "0x60014F6")]
	[Address(RVA = "0xC827FC", Offset = "0xC827FC", VA = "0xC827FC")]
	public LocalizedString GetSectionHeader()
	{
		return null;
	}

	[Token(Token = "0x60014F7")]
	[Address(RVA = "0xC82804", Offset = "0xC82804", VA = "0xC82804")]
	public EZNCreditsSectionTypes GetCreditsSectionType()
	{
		return default(EZNCreditsSectionTypes);
	}

	[Token(Token = "0x60014F8")]
	[Address(RVA = "0xC8280C", Offset = "0xC8280C", VA = "0xC8280C")]
	public List<string> GetNames()
	{
		return null;
	}

	[Token(Token = "0x60014F9")]
	[Address(RVA = "0xC82814", Offset = "0xC82814", VA = "0xC82814")]
	public Sprite GetImageSprite()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000335")]
public class FZNTutorialSegment
{
	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected SAActivityAsset TutorialActivity;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected ZNMessagePromptAsset TutorialMessagePrompt;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected VideoClip TutorialClip;

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0xC8281C", Offset = "0xC8281C", VA = "0xC8281C")]
	public FZNTutorialSegment()
	{
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0xC82824", Offset = "0xC82824", VA = "0xC82824")]
	public SAActivityAsset GetTutorialActivity()
	{
		return null;
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0xC8282C", Offset = "0xC8282C", VA = "0xC8282C")]
	public ZNMessagePromptAsset GetTutorialMessagePrompt()
	{
		return null;
	}

	[Token(Token = "0x60014FD")]
	[Address(RVA = "0xC82834", Offset = "0xC82834", VA = "0xC82834")]
	public VideoClip GetTutorialClip()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000336")]
public class FZNLeaderboardEntry
{
	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected string UserName;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected int Rank;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected long Score;

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0xC8283C", Offset = "0xC8283C", VA = "0xC8283C")]
	public FZNLeaderboardEntry()
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0xC828A0", Offset = "0xC828A0", VA = "0xC828A0")]
	public FZNLeaderboardEntry(string InUserName, int InRank, long InScore)
	{
	}

	[Token(Token = "0x6001500")]
	[Address(RVA = "0xC828E0", Offset = "0xC828E0", VA = "0xC828E0")]
	public string GetUserName()
	{
		return null;
	}

	[Token(Token = "0x6001501")]
	[Address(RVA = "0xC828E8", Offset = "0xC828E8", VA = "0xC828E8")]
	public int GetRank()
	{
		return default(int);
	}

	[Token(Token = "0x6001502")]
	[Address(RVA = "0xC828F0", Offset = "0xC828F0", VA = "0xC828F0")]
	public long GetScore()
	{
		return default(long);
	}
}
[Token(Token = "0x2000337")]
public class ZNVignetteManager : MonoBehaviour
{
	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int PARAM_ApertureSize;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int PARAM_FeatheringEffect;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int PARAM_VignetteColor;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int PARAM_VignetteColorBlend;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The main character that owns this vignette")]
	[SerializeField]
	protected ZNMainCharacter OwningMainCharacter;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("")]
	protected MeshRenderer AffectedMesh;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[SerializeField]
	[Tooltip("")]
	protected float ApertureSize;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float FeatheringEffect;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("")]
	[SerializeField]
	protected Color VignetteColor;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("How long it takes to fade in the vignette")]
	[SerializeField]
	protected float TimeToFadeIn;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected bool bTunnelVisionEnabled;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	protected bool bMoving;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float LerpValue;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float CurrentFadeTime;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float PreviousFadeTime;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected MaterialPropertyBlock VignettePropertyBlock;

	[Token(Token = "0x6001503")]
	[Address(RVA = "0xC828F8", Offset = "0xC828F8", VA = "0xC828F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001504")]
	[Address(RVA = "0xC82E70", Offset = "0xC82E70", VA = "0xC82E70")]
	private void Update()
	{
	}

	[Token(Token = "0x6001505")]
	[Address(RVA = "0xC83044", Offset = "0xC83044", VA = "0xC83044")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001506")]
	[Address(RVA = "0xC82D88", Offset = "0xC82D88", VA = "0xC82D88")]
	protected void ReevaluateTunnelVision()
	{
	}

	[Token(Token = "0x6001507")]
	[Address(RVA = "0xC82F1C", Offset = "0xC82F1C", VA = "0xC82F1C")]
	protected void UpdateVignetteProperties(float InLerpValue)
	{
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0xC83258", Offset = "0xC83258", VA = "0xC83258")]
	public void SetMoving(bool bInMoving)
	{
	}

	[Token(Token = "0x6001509")]
	[Address(RVA = "0xC83264", Offset = "0xC83264", VA = "0xC83264")]
	private void PlayerCharacterStartedVRMovement()
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0xC83270", Offset = "0xC83270", VA = "0xC83270")]
	private void PlayerCharacterEndedVRMovement()
	{
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0xC83278", Offset = "0xC83278", VA = "0xC83278")]
	private void SettingsChanged()
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0xC8327C", Offset = "0xC8327C", VA = "0xC8327C")]
	public ZNVignetteManager()
	{
	}
}
namespace UnityStandardAssets.Characters.FirstPerson
{
	[Serializable]
	[Token(Token = "0x2000338")]
	public class MouseLook
	{
		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xC833A8", Offset = "0xC833A8", VA = "0xC833A8")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xC83474", Offset = "0xC83474", VA = "0xC83474")]
		public void Init2(Transform character)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xC83514", Offset = "0xC83514", VA = "0xC83514")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xC838E4", Offset = "0xC838E4", VA = "0xC838E4")]
		public void LookRotation2(Transform character)
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xC83BA4", Offset = "0xC83BA4", VA = "0xC83BA4")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xC838D4", Offset = "0xC838D4", VA = "0xC838D4")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xC83BD8", Offset = "0xC83BD8", VA = "0xC83BD8")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xC83870", Offset = "0xC83870", VA = "0xC83870")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xC83C50", Offset = "0xC83C50", VA = "0xC83C50")]
		public MouseLook()
		{
		}
	}
}
namespace SynodicArc
{
	[Token(Token = "0x2000339")]
	[CreateAssetMenu(fileName = "ZNObjectiveCollectionAsset", menuName = "Scriptable Objects/Activities/Objectives/ZNObjectiveCollectionAsset")]
	public class ZNObjectiveCollectionAsset : ScriptableObject
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("A list of activities")]
		protected List<ZNObjectiveActivityAsset> ObjectiveCollection;

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xC83C84", Offset = "0xC83C84", VA = "0xC83C84")]
		public List<ZNObjectiveActivityAsset> GetObjectiveCollection()
		{
			return null;
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xC83C8C", Offset = "0xC83C8C", VA = "0xC83C8C")]
		public ZNObjectiveCollectionAsset()
		{
		}
	}
	[Token(Token = "0x200033A")]
	[CreateAssetMenu(fileName = "SAActivityAsset", menuName = "Scriptable Objects/Activities/SAActivityAsset")]
	public class SAActivityAsset : ScriptableObject
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this activity can be saved")]
		[SerializeField]
		protected bool bSaveActivity;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The save key for the activity, used for saving/loading the activity's progress and completion.")]
		[SerializeField]
		protected string ActivitySaveKey;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The name of the activity")]
		[SerializeField]
		protected LocalizedString ActivityName;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The description for the activity")]
		[SerializeField]
		protected LocalizedString ActivityDescription;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The activity instance class")]
		[SerializeField]
		protected SubclassOf<SAActivityInstance> ActivityInstanceClass;

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xC83C94", Offset = "0xC83C94", VA = "0xC83C94", Slot = "4")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xC83C98", Offset = "0xC83C98", VA = "0xC83C98")]
		public bool DoesSaveActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xC83CA0", Offset = "0xC83CA0", VA = "0xC83CA0")]
		public string GetActivitySaveKey()
		{
			return null;
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xC83CA8", Offset = "0xC83CA8", VA = "0xC83CA8")]
		public LocalizedString GetActivityName()
		{
			return null;
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xC83CB0", Offset = "0xC83CB0", VA = "0xC83CB0")]
		public LocalizedString GetActivityDescription()
		{
			return null;
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xC83CB8", Offset = "0xC83CB8", VA = "0xC83CB8")]
		public SubclassOf<SAActivityInstance> GetActivityInstanceClass()
		{
			return null;
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xC83CC0", Offset = "0xC83CC0", VA = "0xC83CC0", Slot = "5")]
		public virtual Type GetActivityInstanceClassType()
		{
			return null;
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xC83D18", Offset = "0xC83D18", VA = "0xC83D18", Slot = "6")]
		public virtual int GetSavedActivityIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xC83D20", Offset = "0xC83D20", VA = "0xC83D20", Slot = "7")]
		public virtual int GetMaxActivityIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xC83D28", Offset = "0xC83D28", VA = "0xC83D28")]
		public SAActivityAsset()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[CreateAssetMenu(fileName = "SAActivityCollectionAsset", menuName = "Scriptable Objects/Activities/SAActivityCollectionAsset")]
	public class SAActivityCollectionAsset : ScriptableObject
	{
		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("A list of activities")]
		protected List<SAActivityAsset> ActivityCollection;

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xC83D30", Offset = "0xC83D30", VA = "0xC83D30")]
		public List<SAActivityAsset> GetActivityCollection()
		{
			return null;
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xC83D38", Offset = "0xC83D38", VA = "0xC83D38")]
		public SAActivityCollectionAsset()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public abstract class SAActivityInstance : MonoBehaviour
	{
		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SAGameMode GameModeRef;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SAActivityManagerComponent OwningActivityManagerComponent;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SAActivityAsset CorrespondingActivityAsset;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FOnActivityProgressUpdated OnActivityProgressUpdatedDel;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FOnActivityCompleted OnActivityCompletedDel;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool bCompleted;

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xC83D40", Offset = "0xC83D40", VA = "0xC83D40", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xC83EE4", Offset = "0xC83EE4", VA = "0xC83EE4", Slot = "5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xC83F70", Offset = "0xC83F70", VA = "0xC83F70", Slot = "6")]
		public virtual void InitializeActivityInstance(SAActivityAsset InActivityAsset)
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xC84074", Offset = "0xC84074", VA = "0xC84074", Slot = "7")]
		protected virtual void NotifyActivityProgressUpdated()
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xC84094", Offset = "0xC84094", VA = "0xC84094")]
		public void CompleteActivity()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xC83DB4", Offset = "0xC83DB4", VA = "0xC83DB4")]
		protected void LoadActivitySaveData()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xC84250", Offset = "0xC84250", VA = "0xC84250", Slot = "8")]
		protected virtual void AssignLoadedActivitySaveData(FSASavedActivityInfo InSavedActivityInfo)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xC84124", Offset = "0xC84124", VA = "0xC84124")]
		public void SaveActivitySaveData()
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xC84254", Offset = "0xC84254", VA = "0xC84254", Slot = "9")]
		protected virtual FSASavedActivityInfo CreateSavedActivityInfo()
		{
			return default(FSASavedActivityInfo);
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xC8428C", Offset = "0xC8428C", VA = "0xC8428C")]
		public SAActivityManagerComponent GetOwningActivityManagerComponent()
		{
			return null;
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xC84294", Offset = "0xC84294", VA = "0xC84294")]
		public SAActivityAsset GetCorrespondingActivityAsset()
		{
			return null;
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xC83FEC", Offset = "0xC83FEC", VA = "0xC83FEC")]
		public bool DoesSaveActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xC8429C", Offset = "0xC8429C", VA = "0xC8429C", Slot = "10")]
		public virtual int GetCurrentActivityIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xC842A4", Offset = "0xC842A4", VA = "0xC842A4")]
		public int GetMaxActivityIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xC84330", Offset = "0xC84330", VA = "0xC84330")]
		protected SAActivityInstance()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class SAActivityManagerComponent : MonoBehaviour
	{
		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOnActivityCompleted OnActivityCompletedDel;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<SAActivityInstance> ActivityInstances;

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xC84338", Offset = "0xC84338", VA = "0xC84338", Slot = "4")]
		public virtual SAActivityInstance CreateActivityInstance(SAActivityAsset InActivityAsset)
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xC846B8", Offset = "0xC846B8", VA = "0xC846B8", Slot = "5")]
		public virtual bool RemoveActivityInstance(SAActivityInstance InActivityInstance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xC84810", Offset = "0xC84810", VA = "0xC84810")]
		public void RemoveActivityInstance(SAActivityAsset InActivityAsset, bool bRemoveOnlyFirstActivity = true)
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xC84960", Offset = "0xC84960", VA = "0xC84960")]
		public void SaveAllActivitiesSaveData()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xC84A64", Offset = "0xC84A64", VA = "0xC84A64")]
		private void ActivityCompleted(SAActivityInstance CompletedActivityInstance)
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xC84A80", Offset = "0xC84A80", VA = "0xC84A80")]
		public SAActivityManagerComponent()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class SAAnimationMontageState : SAStateMachineBehaviourBase
	{
		[Token(Token = "0x600153A")]
		[Address(RVA = "0xC84AFC", Offset = "0xC84AFC", VA = "0xC84AFC", Slot = "18")]
		public override void OnStateExitGuaranteed(Animator animator)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xC84BBC", Offset = "0xC84BBC", VA = "0xC84BBC")]
		public SAAnimationMontageState()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class SAAnimInstance : MonoBehaviour
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The animator for this anim instance")]
		[SerializeField]
		protected Animator InstanceAnimator;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool bAnimationMontageActive;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		protected bool bCurrentAnimationMontageStopsMovement;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int CurrentAnimationMontageStopMovementID;

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xC84BEC", Offset = "0xC84BEC", VA = "0xC84BEC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xC84D38", Offset = "0xC84D38", VA = "0xC84D38", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xC84D3C", Offset = "0xC84D3C", VA = "0xC84D3C", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xC84D0C", Offset = "0xC84D0C", VA = "0xC84D0C")]
		private void AssignDefaultAnimatorOverrideController()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xC84D40", Offset = "0xC84D40", VA = "0xC84D40")]
		protected AnimatorOverrideController CreateAnimatorOverrideController()
		{
			return null;
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xC84ECC", Offset = "0xC84ECC", VA = "0xC84ECC", Slot = "7")]
		public virtual void PlayAnimationMontage(AnimationClip InAnimationClip, float InAnimationSpeed = 1f, bool bInAnimStopsMovement = false)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xC851F4", Offset = "0xC851F4", VA = "0xC851F4", Slot = "8")]
		public virtual void NotifyEndAnimationMontage()
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xC85060", Offset = "0xC85060", VA = "0xC85060")]
		public void UpdateAnimationClip(string InAnimationClipToOverrideName, AnimationClip InAnimationClip)
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xC85210", Offset = "0xC85210", VA = "0xC85210")]
		public void SetLayerWeight(string InLayerName, float InWeight)
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xC85258", Offset = "0xC85258", VA = "0xC85258")]
		public void SetInteger(string InParameterName, int InValue)
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xC85274", Offset = "0xC85274", VA = "0xC85274")]
		public void SetInteger(int InParameterID, int InValue)
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xC85290", Offset = "0xC85290", VA = "0xC85290")]
		public void SetFloat(string InParameterName, float InValue)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xC85188", Offset = "0xC85188", VA = "0xC85188")]
		public void SetFloat(int InParameterID, float InValue)
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xC852AC", Offset = "0xC852AC", VA = "0xC852AC")]
		public void SetBool(string InParameterName, bool bInValue)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xC852CC", Offset = "0xC852CC", VA = "0xC852CC")]
		public void SetBool(int InParameterID, bool bInValue)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xC852EC", Offset = "0xC852EC", VA = "0xC852EC")]
		public void SetTrigger(string InParameterName)
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xC85308", Offset = "0xC85308", VA = "0xC85308")]
		public void SetTrigger(int InParameterID)
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xC85324", Offset = "0xC85324", VA = "0xC85324")]
		public SAAnimInstance()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public abstract class SAStateMachineBehaviourBase : StateMachineBehaviour
	{
		[Token(Token = "0x2000341")]
		[CompilerGenerated]
		private sealed class <RepeatedlyCheckIfActive>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SAStateMachineBehaviourBase <>4__this;

			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Animator animator;

			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <bFrameCheck>5__2;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001558")]
				[Address(RVA = "0xC859C0", Offset = "0xC859C0", VA = "0xC859C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600155A")]
				[Address(RVA = "0xC85A08", Offset = "0xC85A08", VA = "0xC85A08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001555")]
			[Address(RVA = "0xC855E8", Offset = "0xC855E8", VA = "0xC855E8")]
			[DebuggerHidden]
			public <RepeatedlyCheckIfActive>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0xC85830", Offset = "0xC85830", VA = "0xC85830", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001557")]
			[Address(RVA = "0xC85834", Offset = "0xC85834", VA = "0xC85834", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001559")]
			[Address(RVA = "0xC859C8", Offset = "0xC859C8", VA = "0xC859C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SAAnimInstance AnimInstance;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, uses the check if active interval to see if the state is active. You can set this to false if you don't need to use OnStateExitGuaranteed to improve performance.")]
		[SerializeField]
		protected bool bCheckIfActiveForStateExitGuaranteed;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How frequently we check if the state is active. If 0 or lower, checks every frame. This can be set to a higher number to improve performancebut may affect the accuracy, as the state could be exited and re-entered.")]
		[SerializeField]
		protected float CheckIfActiveInterval;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int CachedShortNameHash;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int StateLayer;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Coroutine ActiveCheckCoroutine;

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xC85334", Offset = "0xC85334", VA = "0xC85334", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xC84BB8", Offset = "0xC84BB8", VA = "0xC84BB8", Slot = "18")]
		public virtual void OnStateExitGuaranteed(Animator animator)
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xC85574", Offset = "0xC85574", VA = "0xC85574")]
		[IteratorStateMachine(typeof(<RepeatedlyCheckIfActive>d__8))]
		private IEnumerator RepeatedlyCheckIfActive(Animator animator)
		{
			return null;
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xC85610", Offset = "0xC85610", VA = "0xC85610", Slot = "19")]
		protected virtual void TryGetAnimInstance(Animator animator)
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0xC854CC", Offset = "0xC854CC", VA = "0xC854CC")]
		protected void TryGetStateLayer(Animator animator, AnimatorStateInfo stateInfo)
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xC856D4", Offset = "0xC856D4", VA = "0xC856D4")]
		public int GetLayer(Animator animator, AnimatorStateInfo stateInfo)
		{
			return default(int);
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xC84BD4", Offset = "0xC84BD4", VA = "0xC84BD4")]
		protected SAStateMachineBehaviourBase()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class SACharacter : MonoBehaviour
	{
		[Token(Token = "0x2000343")]
		[CompilerGenerated]
		private sealed class <WaitToPossessCharacterWithAIController>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float InDelayToPossessTime;

			[Token(Token = "0x4000E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SACharacter <>4__this;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001567")]
				[Address(RVA = "0xC85E2C", Offset = "0xC85E2C", VA = "0xC85E2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001569")]
				[Address(RVA = "0xC85E74", Offset = "0xC85E74", VA = "0xC85E74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001564")]
			[Address(RVA = "0xC85D24", Offset = "0xC85D24", VA = "0xC85D24")]
			[DebuggerHidden]
			public <WaitToPossessCharacterWithAIController>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001565")]
			[Address(RVA = "0xC85D7C", Offset = "0xC85D7C", VA = "0xC85D7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001566")]
			[Address(RVA = "0xC85D80", Offset = "0xC85D80", VA = "0xC85D80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001568")]
			[Address(RVA = "0xC85E34", Offset = "0xC85E34", VA = "0xC85E34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SAModManagerComponent ModManagerComponent;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SAPropertyManagerComponent PropertyManagerComponent;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SAPoolManager PoolManager;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The default AI controller that takes over if no controller possesses it")]
		[SerializeField]
		protected SubclassOf<SAAIController> DefaultAIController;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How long (in seconds) we wait after the character spawns to see if we should possess the character with the AI controller")]
		[SerializeField]
		protected float TimeUntilAIControllerPossessesAfterSpawn;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected SAController PossessingController;

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xC85A10", Offset = "0xC85A10", VA = "0xC85A10", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xC85AC4", Offset = "0xC85AC4", VA = "0xC85AC4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xC85CAC", Offset = "0xC85CAC", VA = "0xC85CAC")]
		[IteratorStateMachine(typeof(<WaitToPossessCharacterWithAIController>d__2))]
		private IEnumerator WaitToPossessCharacterWithAIController(float InDelayToPossessTime)
		{
			return null;
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xC85BCC", Offset = "0xC85BCC", VA = "0xC85BCC")]
		private void PossessCharacterWithAIController()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xC85D4C", Offset = "0xC85D4C", VA = "0xC85D4C")]
		public void UpdateController(SAController InPossessingController)
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xC85D54", Offset = "0xC85D54", VA = "0xC85D54")]
		public SAModManagerComponent GetModManagerComponent()
		{
			return null;
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xC85D5C", Offset = "0xC85D5C", VA = "0xC85D5C")]
		public SAPropertyManagerComponent GetPropertyManagerComponent()
		{
			return null;
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xC85D64", Offset = "0xC85D64", VA = "0xC85D64")]
		public SAController GetController()
		{
			return null;
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xC85D6C", Offset = "0xC85D6C", VA = "0xC85D6C")]
		public SACharacter()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class SAConditionAsset : ScriptableObject
	{
		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The condition description")]
		protected LocalizedString ConditionDescription;

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xC85E7C", Offset = "0xC85E7C", VA = "0xC85E7C", Slot = "4")]
		public virtual bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xC85E84", Offset = "0xC85E84", VA = "0xC85E84", Slot = "5")]
		public virtual int GetCurrentIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xC85E8C", Offset = "0xC85E8C", VA = "0xC85E8C", Slot = "6")]
		public virtual int GetMaxIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xC85E94", Offset = "0xC85E94", VA = "0xC85E94", Slot = "7")]
		public virtual LocalizedString GetConditionDescription()
		{
			return null;
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xC85E9C", Offset = "0xC85E9C", VA = "0xC85E9C")]
		public SAConditionAsset()
		{
		}
	}
	[Token(Token = "0x2000345")]
	[CreateAssetMenu(fileName = "SAImpossibleUnlockConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAImpossibleUnlockConditionAsset")]
	public class SAImpossibleUnlockConditionAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x600156F")]
		[Address(RVA = "0xC85EA4", Offset = "0xC85EA4", VA = "0xC85EA4", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xC85EAC", Offset = "0xC85EAC", VA = "0xC85EAC")]
		public SAImpossibleUnlockConditionAsset()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class SAUnlockConditionAsset : SAConditionAsset
	{
		[Token(Token = "0x6001571")]
		[Address(RVA = "0xC85EBC", Offset = "0xC85EBC", VA = "0xC85EBC", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xC85EB4", Offset = "0xC85EB4", VA = "0xC85EB4")]
		public SAUnlockConditionAsset()
		{
		}
	}
	[Token(Token = "0x2000347")]
	[CreateAssetMenu(fileName = "SAUnlockConditionByActivityAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAUnlockConditionByActivityAsset")]
	public class SAUnlockConditionByActivityAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The activity asset that, if completed in the saved data, counts this unlock condition as unlocked")]
		protected SAActivityAsset ActivityAsset;

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xC85EC4", Offset = "0xC85EC4", VA = "0xC85EC4", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xC85FB4", Offset = "0xC85FB4", VA = "0xC85FB4", Slot = "5")]
		public override int GetCurrentIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xC86040", Offset = "0xC86040", VA = "0xC86040", Slot = "6")]
		public override int GetMaxIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xC860CC", Offset = "0xC860CC", VA = "0xC860CC", Slot = "7")]
		public override LocalizedString GetConditionDescription()
		{
			return null;
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xC86178", Offset = "0xC86178", VA = "0xC86178")]
		public SAUnlockConditionByActivityAsset()
		{
		}
	}
	[Token(Token = "0x2000348")]
	[CreateAssetMenu(fileName = "SAUnlockConditionByConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAUnlockConditionByConditionAsset")]
	public class SAUnlockConditionByConditionAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The condition asset that, if completed, counts this unlock condition as unlocked")]
		[SerializeField]
		protected SAConditionAsset ConditionAsset;

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xC86180", Offset = "0xC86180", VA = "0xC86180", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xC8623C", Offset = "0xC8623C", VA = "0xC8623C")]
		public SAUnlockConditionByConditionAsset()
		{
		}
	}
	[Token(Token = "0x2000349")]
	[CreateAssetMenu(fileName = "SAUnlockConditionByDLCAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAUnlockConditionByDLCAsset")]
	public class SAUnlockConditionByDLCAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The ID for the DLC that we use to check if it's been unlocked. Might be worth replacing this with an asset for multi-platform use?")]
		protected string DLCId;

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xC86244", Offset = "0xC86244", VA = "0xC86244", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xC86338", Offset = "0xC86338", VA = "0xC86338")]
		public SAUnlockConditionByDLCAsset()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[CreateAssetMenu(fileName = "SAUnlockConditionByIntegerStatAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAUnlockConditionByIntegerStatAsset")]
	public class SAUnlockConditionByIntegerStatAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The stat key string")]
		protected string StatKey;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The required integer value for this to be unlocked")]
		[SerializeField]
		protected int RequiredIntegerValue;

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xC86340", Offset = "0xC86340", VA = "0xC86340", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xC86368", Offset = "0xC86368", VA = "0xC86368", Slot = "8")]
		public virtual int GetSavedIntegerValue()
		{
			return default(int);
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xC8640C", Offset = "0xC8640C", VA = "0xC8640C", Slot = "5")]
		public override int GetCurrentIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xC86418", Offset = "0xC86418", VA = "0xC86418", Slot = "6")]
		public override int GetMaxIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xC86420", Offset = "0xC86420", VA = "0xC86420")]
		public SAUnlockConditionByIntegerStatAsset()
		{
		}
	}
	[Token(Token = "0x200034B")]
	[CreateAssetMenu(fileName = "SAUnlockConditionByMultiConditionAsset", menuName = "Scriptable Objects/Conditions/Unlock Conditions/SAUnlockConditionByMultiConditionAsset")]
	public class SAUnlockConditionByMultiConditionAsset : SAUnlockConditionAsset
	{
		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The condition assets that, if completed, counts this unlock condition")]
		protected List<SAConditionAsset> ConditionAssetList;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If we require all conditions to be met")]
		[SerializeField]
		protected bool bRequireAllConditions;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If not all conditions are required, this is the number of conditions that are required")]
		[SerializeField]
		protected int NumConditionsRequiredIfNotAllRequired;

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xC86428", Offset = "0xC86428", VA = "0xC86428", Slot = "4")]
		public override bool MeetsConditions([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xC8649C", Offset = "0xC8649C", VA = "0xC8649C")]
		public int GetNumMetConditions()
		{
			return default(int);
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xC865EC", Offset = "0xC865EC", VA = "0xC865EC", Slot = "5")]
		public override int GetCurrentIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xC865F0", Offset = "0xC865F0", VA = "0xC865F0", Slot = "6")]
		public override int GetMaxIntegerProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xC8664C", Offset = "0xC8664C", VA = "0xC8664C")]
		public SAUnlockConditionByMultiConditionAsset()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class SAAIController : SAController
	{
		[Token(Token = "0x6001586")]
		[Address(RVA = "0xC8665C", Offset = "0xC8665C", VA = "0xC8665C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xC86750", Offset = "0xC86750", VA = "0xC86750")]
		public SAAIController()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class SAController : SAMonoBehaviour
	{
		[Token(Token = "0x200034E")]
		[CompilerGenerated]
		private sealed class <EndVRVibrationAfterDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FSAVibrationInfo InVibrationInfo;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SAController <>4__this;

			[Token(Token = "0x170000F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001594")]
				[Address(RVA = "0xC86F58", Offset = "0xC86F58", VA = "0xC86F58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001596")]
				[Address(RVA = "0xC86FA0", Offset = "0xC86FA0", VA = "0xC86FA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001591")]
			[Address(RVA = "0xC86E04", Offset = "0xC86E04", VA = "0xC86E04")]
			[DebuggerHidden]
			public <EndVRVibrationAfterDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001592")]
			[Address(RVA = "0xC86E3C", Offset = "0xC86E3C", VA = "0xC86E3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001593")]
			[Address(RVA = "0xC86E40", Offset = "0xC86E40", VA = "0xC86E40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001595")]
			[Address(RVA = "0xC86F60", Offset = "0xC86F60", VA = "0xC86F60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected SACharacter ControlledPawn;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<FSAVibrationInfo> RightHandVibrationInfos;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected List<FSAVibrationInfo> LeftHandVibrationInfos;

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xC86660", Offset = "0xC86660", VA = "0xC86660", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xC86924", Offset = "0xC86924", VA = "0xC86924", Slot = "9")]
		public virtual void Possess(SACharacter InPawn)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xC869A4", Offset = "0xC869A4", VA = "0xC869A4", Slot = "10")]
		public virtual void UnPossess()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xC869C4", Offset = "0xC869C4", VA = "0xC869C4")]
		public void PlayVRVibration(bool bInRightHand, float InAmplitude, float InDuration, int InPriority = 0, bool bKillExistingHandVibrations = false)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xC86B9C", Offset = "0xC86B9C", VA = "0xC86B9C")]
		[IteratorStateMachine(typeof(<EndVRVibrationAfterDelay>d__7))]
		protected IEnumerator EndVRVibrationAfterDelay(FSAVibrationInfo InVibrationInfo)
		{
			return null;
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xC86C20", Offset = "0xC86C20", VA = "0xC86C20")]
		protected void ReevaluateVRVibration(bool bInRightHand)
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xC86E2C", Offset = "0xC86E2C", VA = "0xC86E2C")]
		public SACharacter GetPawn()
		{
			return null;
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xC86B84", Offset = "0xC86B84", VA = "0xC86B84")]
		public List<FSAVibrationInfo> GetVibrationInfosForHand(bool bInRightHand)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xC86754", Offset = "0xC86754", VA = "0xC86754")]
		public SAController()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public class SAGameInitializer : MonoBehaviour
	{
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GameObject GlobalGameObject;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The asset responsible for initializing the game's core classes")]
		protected SAGameIntializationAsset GameInitializationAsset;

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xC86FA8", Offset = "0xC86FA8", VA = "0xC86FA8")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xC86FB0", Offset = "0xC86FB0", VA = "0xC86FB0")]
		public void InitializeGame(bool bForceInitialize = false)
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xC877C8", Offset = "0xC877C8", VA = "0xC877C8")]
		public SAGameInitializer()
		{
		}
	}
	[Token(Token = "0x2000350")]
	[CreateAssetMenu(fileName = "SAGameIntializationAsset", menuName = "Scriptable Objects/Synodic/SAGameIntializationAsset")]
	public class SAGameIntializationAsset : ScriptableObject
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The reference manager class to use")]
		protected SubclassOf<SAReferenceManager> ReferenceManagerClass;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The reference asset to assign to the reference manager")]
		protected SAReferenceAsset ReferenceAsset;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("The game instance class to use")]
		protected SubclassOf<SAGameInstance> GameInstanceClass;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The save game class to use")]
		[SerializeField]
		protected SubclassOf<SASaveGameBase> SaveGameClass;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The game user settings class to use")]
		[SerializeField]
		protected SubclassOf<SAGameUserSettings> GameUserSettingsClass;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The achievement manager class to use")]
		[SerializeField]
		protected SubclassOf<SAAchievementManager> AchievementManagerClass;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The leaderboard manager class to use")]
		[SerializeField]
		protected SubclassOf<SALeaderboardManager> LeaderboardManagerClass;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The loading screen prefab. Should be of type SALoadingScreen.")]
		[SerializeField]
		protected GameObject PF_LoadingScreen;

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xC877D0", Offset = "0xC877D0", VA = "0xC877D0")]
		public SubclassOf<SAReferenceManager> GetReferenceManagerClass()
		{
			return null;
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xC877D8", Offset = "0xC877D8", VA = "0xC877D8")]
		public SAReferenceAsset GetReferenceAsset()
		{
			return null;
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xC877E0", Offset = "0xC877E0", VA = "0xC877E0")]
		public SubclassOf<SAGameInstance> GetGameInstanceClass()
		{
			return null;
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xC877E8", Offset = "0xC877E8", VA = "0xC877E8")]
		public SubclassOf<SASaveGameBase> GetSaveGameClass()
		{
			return null;
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xC877F0", Offset = "0xC877F0", VA = "0xC877F0")]
		public SubclassOf<SAGameUserSettings> GetGameUserSettingsClass()
		{
			return null;
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xC877F8", Offset = "0xC877F8", VA = "0xC877F8")]
		public SubclassOf<SAAchievementManager> GetAchievementManagerClass()
		{
			return null;
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xC87800", Offset = "0xC87800", VA = "0xC87800")]
		public SubclassOf<SALeaderboardManager> GetLeaderboardManagerClass()
		{
			return null;
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xC87808", Offset = "0xC87808", VA = "0xC87808")]
		public GameObject GetPF_LoadingScreen()
		{
			return null;
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xC87810", Offset = "0xC87810", VA = "0xC87810")]
		public SAGameIntializationAsset()
		{
		}
	}
	[Token(Token = "0x2000351")]
	[CreateAssetMenu(fileName = "SAAchievementAsset", menuName = "Scriptable Objects/Synodic/SAAchievementAsset")]
	public class SAAchievementAsset : ScriptableObject
	{
		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The achievement name")]
		[SerializeField]
		private LocalizedString AchievementName;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The description for unlocking the achievement")]
		private LocalizedString AchievementDescription;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("The achievement icon sprite")]
		private Sprite AchievementIconSprite;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("The condition asset for unlocking the achievement")]
		private SAConditionAsset ConditionAsset;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("If this achievement is hidden by default")]
		private bool bHidden;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("The Achievement ID for the Oculus Quest platform")]
		private string OculusQuestAchievementID;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The Achievement ID for the PS4 platform")]
		[SerializeField]
		private string PS4AchievementID;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Achievement ID for the PS5 platform")]
		[SerializeField]
		private string PS5AchievementID;

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xC87818", Offset = "0xC87818", VA = "0xC87818")]
		public LocalizedString GetAchievementName()
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xC87820", Offset = "0xC87820", VA = "0xC87820")]
		public LocalizedString GetAchievementDescription()
		{
			return null;
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xC87828", Offset = "0xC87828", VA = "0xC87828")]
		public Sprite GetAchievementIconSprite()
		{
			return null;
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xC87830", Offset = "0xC87830", VA = "0xC87830")]
		public SAConditionAsset GetCondition()
		{
			return null;
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xC87838", Offset = "0xC87838", VA = "0xC87838")]
		public bool IsHidden()
		{
			return default(bool);
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xC87840", Offset = "0xC87840", VA = "0xC87840")]
		public bool IsUnlocked([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xC878E0", Offset = "0xC878E0", VA = "0xC878E0")]
		public string GetAchievementIDForPlatform(ESAPlatforms InPlatform)
		{
			return null;
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xC87958", Offset = "0xC87958", VA = "0xC87958")]
		public SAAchievementAsset()
		{
		}
	}
	[Token(Token = "0x2000352")]
	[CreateAssetMenu(fileName = "SAAchievementCollectionAsset", menuName = "Scriptable Objects/Synodic/SAAchievementCollectionAsset")]
	public class SAAchievementCollectionAsset : ScriptableObject
	{
		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Achievement assets, taking an achievement key name to the individual achievement for each platform")]
		[SerializeField]
		protected SerializableDictionary<string, SAAchievementAsset> AchievementAssets;

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xC87960", Offset = "0xC87960", VA = "0xC87960")]
		public string GetAchievementID(string InKey)
		{
			return null;
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xC87A74", Offset = "0xC87A74", VA = "0xC87A74")]
		public SerializableDictionary<string, SAAchievementAsset> GetAchievementAssets()
		{
			return null;
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xC87A7C", Offset = "0xC87A7C", VA = "0xC87A7C")]
		public List<SAAchievementAsset> GetAchievementAssetsAsList()
		{
			return null;
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xC87E04", Offset = "0xC87E04", VA = "0xC87E04")]
		public SAAchievementCollectionAsset()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public class SAAchievementManager
	{
		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAAchievementManager Instance;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected SAAchievementCollectionAsset AchievementCollectionAsset;

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xC87E0C", Offset = "0xC87E0C", VA = "0xC87E0C", Slot = "4")]
		public virtual bool InitializeInstance(bool bForceInitialize = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xC87F74", Offset = "0xC87F74", VA = "0xC87F74")]
		public void CheckForUnlockedAchievements([Optional] GameObject ReferenceObject)
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xC882BC", Offset = "0xC882BC", VA = "0xC882BC")]
		public void UnlockAchievement(string InAchievementKey)
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xC8843C", Offset = "0xC8843C", VA = "0xC8843C")]
		private void AchievementWriteComplete(Message msg)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xC884E8", Offset = "0xC884E8", VA = "0xC884E8")]
		public static SAAchievementManager GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xC88530", Offset = "0xC88530", VA = "0xC88530")]
		public SAAchievementManager()
		{
		}
	}
	[Token(Token = "0x2000354")]
	public class SALeaderboardManager
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SALeaderboardManager Instance;

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xC88538", Offset = "0xC88538", VA = "0xC88538", Slot = "4")]
		public virtual bool InitializeInstance(bool bForceInitialize = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xC885EC", Offset = "0xC885EC", VA = "0xC885EC")]
		public void WriteEntry(string InLeaderboardKey, int InScore)
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xC88750", Offset = "0xC88750", VA = "0xC88750")]
		public string GetLeaderboardIDForPlatform(string InLeaderboardKey)
		{
			return null;
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xC888F0", Offset = "0xC888F0", VA = "0xC888F0")]
		private void LeaderboardWriteComplete(Message msg)
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xC8899C", Offset = "0xC8899C", VA = "0xC8899C")]
		public static SALeaderboardManager GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xC889E4", Offset = "0xC889E4", VA = "0xC889E4")]
		public SALeaderboardManager()
		{
		}
	}
	[Token(Token = "0x2000355")]
	[CreateAssetMenu(fileName = "SALeaderboardsAsset", menuName = "Scriptable Objects/Synodic/SALeaderboardsAsset")]
	public class SALeaderboardsAsset : ScriptableObject
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The leaderboard infos, taking a leaderboard key name to the individual leaderboard for each platform")]
		[SerializeField]
		protected SerializableDictionary<string, FSALeaderboardInfo> LeaderboardInfos;

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xC88838", Offset = "0xC88838", VA = "0xC88838")]
		public string GetLeaderboardID(string InKey)
		{
			return null;
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xC889EC", Offset = "0xC889EC", VA = "0xC889EC")]
		public SALeaderboardsAsset()
		{
		}
	}
	[Token(Token = "0x2000356")]
	public class SAGameInstance
	{
		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAGameInstance Instance;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected User LoggedInUser;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<string, bool> PurchasedDLCs;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FOnDLCPurchasesUpdated OnDLCPurchasesUpdatedDel;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SAController> Controllers;

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xC889F4", Offset = "0xC889F4", VA = "0xC889F4", Slot = "4")]
		public virtual bool InitializeInstance(bool bForceInitialize = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xC88D1C", Offset = "0xC88D1C", VA = "0xC88D1C")]
		private void GetLoggedInUserCallback(Message msg)
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xC88C70", Offset = "0xC88C70", VA = "0xC88C70")]
		private void InitializePurchasedDLCs()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xC867F8", Offset = "0xC867F8", VA = "0xC867F8")]
		public void RegisterController(SAController InController)
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xC88EA0", Offset = "0xC88EA0", VA = "0xC88EA0")]
		public void UnregisterController(SAController InController)
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xC88FD0", Offset = "0xC88FD0", VA = "0xC88FD0")]
		public void DestroyGameInstance()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xC89018", Offset = "0xC89018", VA = "0xC89018")]
		public void LaunchDLCPurchaseFlow(string InSKU)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xC890D4", Offset = "0xC890D4", VA = "0xC890D4")]
		private void GetViewerPurchasesCallback(Message<PurchaseList> msg)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xC89764", Offset = "0xC89764", VA = "0xC89764")]
		private void GetPurchaseFlowCallback(Message<Purchase> msg)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xC89650", Offset = "0xC89650", VA = "0xC89650")]
		private void AddPurchasedDLC(string InDLCId)
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xC899F8", Offset = "0xC899F8", VA = "0xC899F8")]
		private void ControllerDestroyed(GameObject DestroyedGameObject)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xC89AA4", Offset = "0xC89AA4", VA = "0xC89AA4")]
		public static SAGameInstance GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xC89AEC", Offset = "0xC89AEC", VA = "0xC89AEC")]
		public User GetLoggedInUser()
		{
			return null;
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xC89AF4", Offset = "0xC89AF4", VA = "0xC89AF4", Slot = "5")]
		public virtual string GetOculusAppID()
		{
			return null;
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xC89B34", Offset = "0xC89B34", VA = "0xC89B34")]
		public List<SAController> GetControllers()
		{
			return null;
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xC89B3C", Offset = "0xC89B3C", VA = "0xC89B3C")]
		public SAController GetFirstController()
		{
			return null;
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xC862A4", Offset = "0xC862A4", VA = "0xC862A4")]
		public bool HasPurchasedDLC(string DLCId)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xC89BB8", Offset = "0xC89BB8", VA = "0xC89BB8")]
		public SAGameInstance()
		{
		}
	}
	[Token(Token = "0x2000357")]
	[RequireComponent(typeof(SACombinedZoneManager))]
	[RequireComponent(typeof(SAPoolManager))]
	public class SAGameMode : MonoBehaviour
	{
		[Token(Token = "0x2000358")]
		[CompilerGenerated]
		private sealed class <EndSettingUpAfterDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SAGameMode <>4__this;

			[Token(Token = "0x170000FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015ED")]
				[Address(RVA = "0xC8AA7C", Offset = "0xC8AA7C", VA = "0xC8AA7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015EF")]
				[Address(RVA = "0xC8AAC4", Offset = "0xC8AAC4", VA = "0xC8AAC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015EA")]
			[Address(RVA = "0xC8A580", Offset = "0xC8A580", VA = "0xC8A580")]
			[DebuggerHidden]
			public <EndSettingUpAfterDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60015EB")]
			[Address(RVA = "0xC8A9D0", Offset = "0xC8A9D0", VA = "0xC8A9D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015EC")]
			[Address(RVA = "0xC8A9D4", Offset = "0xC8A9D4", VA = "0xC8A9D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015EE")]
			[Address(RVA = "0xC8AA84", Offset = "0xC8AA84", VA = "0xC8AA84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000359")]
		[CompilerGenerated]
		private sealed class <SpawnAndDeletePreloadedAssetsAfterDelay>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SAGameMode <>4__this;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<GameObject> <CurrentPreloadedAssets>5__2;

			[Token(Token = "0x170000FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015F3")]
				[Address(RVA = "0xC8AEB0", Offset = "0xC8AEB0", VA = "0xC8AEB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015F5")]
				[Address(RVA = "0xC8AEF8", Offset = "0xC8AEF8", VA = "0xC8AEF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015F0")]
			[Address(RVA = "0xC8A800", Offset = "0xC8A800", VA = "0xC8A800")]
			[DebuggerHidden]
			public <SpawnAndDeletePreloadedAssetsAfterDelay>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x60015F1")]
			[Address(RVA = "0xC8AACC", Offset = "0xC8AACC", VA = "0xC8AACC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015F2")]
			[Address(RVA = "0xC8AAD0", Offset = "0xC8AAD0", VA = "0xC8AAD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015F4")]
			[Address(RVA = "0xC8AEB8", Offset = "0xC8AEB8", VA = "0xC8AEB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAGameMode Instance;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOnPaused OnPausedDel;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FOnUnPaused OnUnPausedDel;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FOnNavMeshBuilt OnNavMeshBuiltDel;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FOnNavMeshVisibilityUpdated OnNavMeshVisibilityUpdatedDel;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FOnHeadsetFocusAcquired OnHeadsetFocusAcquiredDel;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FOnHeadsetFocusLost OnHeadsetFocusLostDel;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Tooltip("If this game mode allows pausing")]
		private bool bAllowPausing;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("If this game mode hides the loading screen on start. Should be true for most modes.")]
		[SerializeField]
		private bool bHideLoadingScreenOnStart;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Tooltip("Assets to preload when the game mode starts. Put assets here that cause slowdown on spawn to help improve performance.")]
		private List<GameObject> AssetsToPreload;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Tooltip("SFX that plays when pausing")]
		private Event PauseSFX;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("SFX that plays when unpausing")]
		[SerializeField]
		private Event UnPauseSFX;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool bPaused;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool bSettingUp;

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xC89C78", Offset = "0xC89C78", VA = "0xC89C78", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xC89D2C", Offset = "0xC89D2C", VA = "0xC89D2C")]
		private void SceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xC89F38", Offset = "0xC89F38", VA = "0xC89F38", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xC8A134", Offset = "0xC8A134", VA = "0xC8A134", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xC8A2A0", Offset = "0xC8A2A0", VA = "0xC8A2A0", Slot = "7")]
		public virtual bool InitializeInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xC8A3C0", Offset = "0xC8A3C0", VA = "0xC8A3C0", Slot = "8")]
		protected virtual void ReapplyWwiseAudioSettings()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xC8A0CC", Offset = "0xC8A0CC", VA = "0xC8A0CC")]
		[IteratorStateMachine(typeof(<EndSettingUpAfterDelay>d__7))]
		private IEnumerator EndSettingUpAfterDelay()
		{
			return null;
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xC8A5A8", Offset = "0xC8A5A8", VA = "0xC8A5A8")]
		public void Pause()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xC8A654", Offset = "0xC8A654", VA = "0xC8A654")]
		public void UnPause()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xC8A65C", Offset = "0xC8A65C", VA = "0xC8A65C")]
		public void TogglePause()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xC8A66C", Offset = "0xC8A66C", VA = "0xC8A66C")]
		public void ForcePause(bool bNewPaused)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xC8A5B0", Offset = "0xC8A5B0", VA = "0xC8A5B0")]
		private void TryPause(bool bNewPaused)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xC8A67C", Offset = "0xC8A67C", VA = "0xC8A67C", Slot = "9")]
		protected virtual void InternalPause(bool bNewPaused)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xC8A74C", Offset = "0xC8A74C", VA = "0xC8A74C", Slot = "10")]
		protected virtual void Paused()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xC8A750", Offset = "0xC8A750", VA = "0xC8A750", Slot = "11")]
		protected virtual void UnPaused()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xC8A754", Offset = "0xC8A754", VA = "0xC8A754", Slot = "12")]
		protected virtual void ChangePauseFailed(string FailureReason)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xC8A758", Offset = "0xC8A758", VA = "0xC8A758")]
		public void RequestNavMeshVisibilityUpdate(bool bNewVisiblity)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xC8A778", Offset = "0xC8A778", VA = "0xC8A778")]
		protected void PreloadAssets()
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xC8A798", Offset = "0xC8A798", VA = "0xC8A798")]
		[IteratorStateMachine(typeof(<SpawnAndDeletePreloadedAssetsAfterDelay>d__32))]
		protected IEnumerator SpawnAndDeletePreloadedAssetsAfterDelay()
		{
			return null;
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xC8A828", Offset = "0xC8A828", VA = "0xC8A828")]
		protected void HMDMounted()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xC8A82C", Offset = "0xC8A82C", VA = "0xC8A82C")]
		protected void HMDUnmounted()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xC8A830", Offset = "0xC8A830", VA = "0xC8A830")]
		protected void InputFocusAcquired()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xC8A84C", Offset = "0xC8A84C", VA = "0xC8A84C")]
		protected void InputFocusLost()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xC8A868", Offset = "0xC8A868", VA = "0xC8A868")]
		public static SAGameMode GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xC8A8B0", Offset = "0xC8A8B0", VA = "0xC8A8B0", Slot = "13")]
		public virtual bool CanChangePauseState(bool bNewPaused, out string FailureReason)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xC8A9B0", Offset = "0xC8A9B0", VA = "0xC8A9B0")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xC8A9B8", Offset = "0xC8A9B8", VA = "0xC8A9B8")]
		public SAGameMode()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class SACombinedZone : SAZone
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SACombinedZoneManager CombinedZoneManager;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Combined Zone")]
		[Tooltip("The combined zone key string. If another object has the same key, they will be compared against each other and only the one with highest priority will be applied.")]
		[SerializeField]
		protected string CombinedZoneKey;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The zone's priority. Higher priority zones with the same key will have their effect be applied instead of those will smaller priorities.")]
		[SerializeField]
		protected int Priority;

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xC8AF00", Offset = "0xC8AF00", VA = "0xC8AF00", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xC8AF54", Offset = "0xC8AF54", VA = "0xC8AF54", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xC8B3D4", Offset = "0xC8B3D4", VA = "0xC8B3D4", Slot = "9")]
		protected override void BeginOverlapMonoBehaviour(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xC8B784", Offset = "0xC8B784", VA = "0xC8B784", Slot = "10")]
		protected override void EndOverlapMonoBehaviour(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xC8BB2C", Offset = "0xC8BB2C", VA = "0xC8BB2C", Slot = "11")]
		public override void ApplyZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xC8BB34", Offset = "0xC8BB34", VA = "0xC8BB34", Slot = "12")]
		public override void RemoveZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xC8BB3C", Offset = "0xC8BB3C", VA = "0xC8BB3C", Slot = "13")]
		protected override void ReevaluateEnterExitZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xC8BB44", Offset = "0xC8BB44", VA = "0xC8BB44", Slot = "14")]
		protected override void ReevaluateIntervalZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xC8BB4C", Offset = "0xC8BB4C", VA = "0xC8BB4C")]
		public string GetCombinedZoneKey()
		{
			return null;
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xC8BB54", Offset = "0xC8BB54", VA = "0xC8BB54")]
		public int GetPriority()
		{
			return default(int);
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xC8BB5C", Offset = "0xC8BB5C", VA = "0xC8BB5C")]
		public SACombinedZone()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class SAIndependentZone : SAZone
	{
		[Token(Token = "0x6001601")]
		[Address(RVA = "0xC8BC2C", Offset = "0xC8BC2C", VA = "0xC8BC2C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xC8BC30", Offset = "0xC8BC30", VA = "0xC8BC30", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xC8BC34", Offset = "0xC8BC34", VA = "0xC8BC34", Slot = "11")]
		public override void ApplyZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xC8BC38", Offset = "0xC8BC38", VA = "0xC8BC38", Slot = "12")]
		public override void RemoveZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xC8BC3C", Offset = "0xC8BC3C", VA = "0xC8BC3C", Slot = "13")]
		protected override void ReevaluateEnterExitZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xC8BC40", Offset = "0xC8BC40", VA = "0xC8BC40", Slot = "14")]
		protected override void ReevaluateIntervalZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xC8BC44", Offset = "0xC8BC44", VA = "0xC8BC44")]
		public SAIndependentZone()
		{
		}
	}
	[Token(Token = "0x200035C")]
	[RequireComponent(typeof(Rigidbody))]
	public class SAZone : SAMonoBehaviour
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Zone")]
		[Tooltip("Objects that enter the zone that have this class or a subclass on the same component will trigger the zone.")]
		protected SubclassOf<MonoBehaviour> TriggerableClass;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How the zone affects objects, be it on enter and exit, on an interval while inside, etc.")]
		[SerializeField]
		protected ESAZoneTypes ZoneType;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected List<MonoBehaviour> AffectedMonoBehaviours;

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xC8AF50", Offset = "0xC8AF50", VA = "0xC8AF50", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xC8AFE0", Offset = "0xC8AFE0", VA = "0xC8AFE0", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xC8BC84", Offset = "0xC8BC84", VA = "0xC8BC84")]
		protected void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xC8BDE0", Offset = "0xC8BDE0", VA = "0xC8BDE0")]
		protected void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xC8B478", Offset = "0xC8B478", VA = "0xC8B478", Slot = "9")]
		protected virtual void BeginOverlapMonoBehaviour(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xC8B828", Offset = "0xC8B828", VA = "0xC8B828", Slot = "10")]
		protected virtual void EndOverlapMonoBehaviour(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xC8BB30", Offset = "0xC8BB30", VA = "0xC8BB30", Slot = "11")]
		public virtual void ApplyZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xC8BB38", Offset = "0xC8BB38", VA = "0xC8BB38", Slot = "12")]
		public virtual void RemoveZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xC8BF3C", Offset = "0xC8BF3C", VA = "0xC8BF3C")]
		public void ReevaluateZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xC8BB40", Offset = "0xC8BB40", VA = "0xC8BB40", Slot = "13")]
		protected virtual void ReevaluateEnterExitZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xC8BB48", Offset = "0xC8BB48", VA = "0xC8BB48", Slot = "14")]
		protected virtual void ReevaluateIntervalZoneEffects(MonoBehaviour InMonoBehaviour)
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xC8BF70", Offset = "0xC8BF70", VA = "0xC8BF70")]
		public ESAZoneTypes GetZoneType()
		{
			return default(ESAZoneTypes);
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xC8BBB0", Offset = "0xC8BBB0", VA = "0xC8BBB0")]
		public SAZone()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class SALoadingScreen : MonoBehaviour
	{
		[Token(Token = "0x200035E")]
		[CompilerGenerated]
		private sealed class <HideLoadingScreenAfterDelay>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float InDelayTime;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SALoadingScreen <>4__this;

			[Token(Token = "0x170000FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600162A")]
				[Address(RVA = "0xC8C76C", Offset = "0xC8C76C", VA = "0xC8C76C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600162C")]
				[Address(RVA = "0xC8C7B4", Offset = "0xC8C7B4", VA = "0xC8C7B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001627")]
			[Address(RVA = "0xC8C610", Offset = "0xC8C610", VA = "0xC8C610")]
			[DebuggerHidden]
			public <HideLoadingScreenAfterDelay>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001628")]
			[Address(RVA = "0xC8C6B8", Offset = "0xC8C6B8", VA = "0xC8C6B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001629")]
			[Address(RVA = "0xC8C6BC", Offset = "0xC8C6BC", VA = "0xC8C6BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600162B")]
			[Address(RVA = "0xC8C774", Offset = "0xC8C774", VA = "0xC8C774", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SALoadingScreen Instance;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The canvas group for animating the loading screen in and out.")]
		[SerializeField]
		protected CanvasGroup AnimCanvasGroup;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The loading canvas.")]
		[SerializeField]
		protected Canvas LoadingCanvas;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FOnLoadingScreenEnteringEnded OnLoadingScreenEnteringEndedDel;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FOnLoadingScreenExitingEnded OnLoadingScreenExitingEndedDel;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("How long (in seconds) to animate in/out if not specified")]
		protected float DefaultAnimTime;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool bVisible;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		protected bool bEntering;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		protected bool bExiting;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float CurrentAnimTime;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float AnimTime;

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xC8BF78", Offset = "0xC8BF78", VA = "0xC8BF78")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xC8C138", Offset = "0xC8C138", VA = "0xC8C138")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xC8C21C", Offset = "0xC8C21C", VA = "0xC8C21C")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xC8C374", Offset = "0xC8C374", VA = "0xC8C374")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xC8C418", Offset = "0xC8C418", VA = "0xC8C418", Slot = "4")]
		public virtual bool InitializeInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xC8C500", Offset = "0xC8C500", VA = "0xC8C500")]
		public void ShowLoadingScreen()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xC8C2E0", Offset = "0xC8C2E0", VA = "0xC8C2E0")]
		protected void EndEnterLoadingScreen()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xC89E60", Offset = "0xC89E60", VA = "0xC89E60")]
		public void HideLoadingScreen(float InDelayTime = 0f)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xC8C598", Offset = "0xC8C598", VA = "0xC8C598")]
		[IteratorStateMachine(typeof(<HideLoadingScreenAfterDelay>d__19))]
		private IEnumerator HideLoadingScreenAfterDelay(float InDelayTime)
		{
			return null;
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xC8C328", Offset = "0xC8C328", VA = "0xC8C328")]
		protected void EndExitLoadingScreen()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xC8C13C", Offset = "0xC8C13C", VA = "0xC8C13C")]
		protected void AssignCamera()
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xC8C638", Offset = "0xC8C638", VA = "0xC8C638")]
		private void SceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xC8C63C", Offset = "0xC8C63C", VA = "0xC8C63C")]
		public static SALoadingScreen GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xC8C684", Offset = "0xC8C684", VA = "0xC8C684")]
		public float GetAnimTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xC8C68C", Offset = "0xC8C68C", VA = "0xC8C68C")]
		public bool IsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xC8C694", Offset = "0xC8C694", VA = "0xC8C694")]
		public bool IsEntering()
		{
			return default(bool);
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xC8C69C", Offset = "0xC8C69C", VA = "0xC8C69C")]
		public bool IsExiting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xC8C6A4", Offset = "0xC8C6A4", VA = "0xC8C6A4")]
		public SALoadingScreen()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public class SACombinedZoneManager : SASingletonManagerBase
	{
		[Token(Token = "0x2000360")]
		[CompilerGenerated]
		private sealed class <ApplyIntervalZoneEffectsOnRepeat>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SACombinedZoneManager <>4__this;

			[Token(Token = "0x17000100")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600163C")]
				[Address(RVA = "0xC8D204", Offset = "0xC8D204", VA = "0xC8D204", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000101")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600163E")]
				[Address(RVA = "0xC8D24C", Offset = "0xC8D24C", VA = "0xC8D24C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001639")]
			[Address(RVA = "0xC8CD4C", Offset = "0xC8CD4C", VA = "0xC8CD4C")]
			[DebuggerHidden]
			public <ApplyIntervalZoneEffectsOnRepeat>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600163A")]
			[Address(RVA = "0xC8D148", Offset = "0xC8D148", VA = "0xC8D148", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600163B")]
			[Address(RVA = "0xC8D14C", Offset = "0xC8D14C", VA = "0xC8D14C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600163D")]
			[Address(RVA = "0xC8D20C", Offset = "0xC8D20C", VA = "0xC8D20C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SACombinedZoneManager Instance;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("How often (in seconds) we apply zone effects")]
		protected float ApplyIntervalZoneEffectsTime;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<MonoBehaviour, Dictionary<string, List<SACombinedZone>>> MonoBehaviourToCombinedZoneKeyDictionary;

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xC8C7BC", Offset = "0xC8C7BC", VA = "0xC8C7BC", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xC8C844", Offset = "0xC8C844", VA = "0xC8C844", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xC8C848", Offset = "0xC8C848", VA = "0xC8C848", Slot = "5")]
		public override bool InitializeInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xC8AFE4", Offset = "0xC8AFE4", VA = "0xC8AFE4")]
		public void NotifyCombinedZoneDestroyed(SACombinedZone InCombinedZone)
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xC8B4D0", Offset = "0xC8B4D0", VA = "0xC8B4D0")]
		public void NotifyMonoBehaviourBeginOverlap(MonoBehaviour InMonoBehaviour, SACombinedZone InCombinedZone)
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xC8B880", Offset = "0xC8B880", VA = "0xC8B880")]
		public void NotifyMonoBehaviourEndOverlap(MonoBehaviour InMonoBehaviour, SACombinedZone InCombinedZone)
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xC8CBD4", Offset = "0xC8CBD4", VA = "0xC8CBD4")]
		protected void ReevaluateCombinedZoneEffects(MonoBehaviour InMonoBehaviour, SACombinedZone AffectedCombinedZone, SACombinedZone PreviousHighestPriorityCombinedZone)
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xC8C7DC", Offset = "0xC8C7DC", VA = "0xC8C7DC")]
		[IteratorStateMachine(typeof(<ApplyIntervalZoneEffectsOnRepeat>d__10))]
		protected IEnumerator ApplyIntervalZoneEffectsOnRepeat()
		{
			return null;
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xC8CD74", Offset = "0xC8CD74", VA = "0xC8CD74")]
		protected void ApplyIntervalZoneEffects()
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xC8D074", Offset = "0xC8D074", VA = "0xC8D074")]
		public static SACombinedZoneManager GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xC8C970", Offset = "0xC8C970", VA = "0xC8C970")]
		public SACombinedZone GetHighestPriorityCombinedZone(MonoBehaviour InMonoBehaviour, string InCombinedZoneKey)
		{
			return null;
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xC8D0BC", Offset = "0xC8D0BC", VA = "0xC8D0BC")]
		public SACombinedZoneManager()
		{
		}
	}
	[Token(Token = "0x2000361")]
	public class SAPoolManager : SASingletonManagerBase
	{
		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAPoolManager Instance;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<GameObject, SAPool<SAPoolableComponent>> PoolDictionary;

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xC8D254", Offset = "0xC8D254", VA = "0xC8D254", Slot = "5")]
		public override bool InitializeInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xC8D374", Offset = "0xC8D374", VA = "0xC8D374")]
		public void CreatePool(GameObject GameObjectToPool, int NumObjectsInPool, ESAPoolCreationTypes PoolCreationType)
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xC8D830", Offset = "0xC8D830", VA = "0xC8D830")]
		public SAPoolableComponent TakeFromPool(GameObject GameObjectKey)
		{
			return null;
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xC8D9C8", Offset = "0xC8D9C8", VA = "0xC8D9C8")]
		public void ReturnToPool(SAPoolableComponent InPoolableComponent)
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xC8DAF4", Offset = "0xC8DAF4", VA = "0xC8DAF4")]
		public static SAPoolManager GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xC8DB3C", Offset = "0xC8DB3C", VA = "0xC8DB3C")]
		public SAPoolManager()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public abstract class SASingletonManagerBase : MonoBehaviour
	{
		[Token(Token = "0x6001645")]
		[Address(RVA = "0xC8DBB8", Offset = "0xC8DBB8", VA = "0xC8DBB8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xC8C968", Offset = "0xC8C968", VA = "0xC8C968", Slot = "5")]
		public virtual bool InitializeInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xC8D140", Offset = "0xC8D140", VA = "0xC8D140")]
		protected SASingletonManagerBase()
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class SAInstantModAsset : SAModAsset
	{
		[Token(Token = "0x6001648")]
		[Address(RVA = "0xC8DBC4", Offset = "0xC8DBC4", VA = "0xC8DBC4")]
		public SAInstantModAsset()
		{
		}
	}
	[Token(Token = "0x2000364")]
	public class SAInstantModInstance : SAModInstance
	{
		[Token(Token = "0x2000365")]
		[CompilerGenerated]
		private sealed class <DestroyAfterOneFrame>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SAInstantModInstance <>4__this;

			[Token(Token = "0x17000102")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001650")]
				[Address(RVA = "0xC8DFE0", Offset = "0xC8DFE0", VA = "0xC8DFE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000103")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001652")]
				[Address(RVA = "0xC8E028", Offset = "0xC8E028", VA = "0xC8E028", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600164D")]
			[Address(RVA = "0xC8DE98", Offset = "0xC8DE98", VA = "0xC8DE98")]
			[DebuggerHidden]
			public <DestroyAfterOneFrame>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600164E")]
			[Address(RVA = "0xC8DF18", Offset = "0xC8DF18", VA = "0xC8DF18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600164F")]
			[Address(RVA = "0xC8DF1C", Offset = "0xC8DF1C", VA = "0xC8DF1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001651")]
			[Address(RVA = "0xC8DFE8", Offset = "0xC8DFE8", VA = "0xC8DFE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xC8DCC0", Offset = "0xC8DCC0", VA = "0xC8DCC0", Slot = "5")]
		public override void InitializeModInstance(SAModAsset InModAsset)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xC8DE30", Offset = "0xC8DE30", VA = "0xC8DE30")]
		[IteratorStateMachine(typeof(<DestroyAfterOneFrame>d__1))]
		protected IEnumerator DestroyAfterOneFrame()
		{
			return null;
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xC8DEC0", Offset = "0xC8DEC0", VA = "0xC8DEC0", Slot = "6")]
		protected virtual void DoInstantModEffects(SAInstantModAsset InInstantModAsset)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xC8DEC4", Offset = "0xC8DEC4", VA = "0xC8DEC4")]
		public SAInstantModInstance()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class SAModAsset : ScriptableObject
	{
		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The mod instance class")]
		protected SubclassOf<SAModInstance> ModInstanceClass;

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xC8E030", Offset = "0xC8E030", VA = "0xC8E030")]
		public SubclassOf<SAModInstance> GetModInstanceClass()
		{
			return null;
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xC8E038", Offset = "0xC8E038", VA = "0xC8E038", Slot = "4")]
		public virtual Type GetModInstanceClassType()
		{
			return null;
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xC8DCB8", Offset = "0xC8DCB8", VA = "0xC8DCB8")]
		public SAModAsset()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class SAModInstance : MonoBehaviour
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SAModManagerComponent OwningModManagerComponent;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SAModAsset CorrespondingModAsset;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected string UniqueTag;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FOnModInstanceDestroyed OnModInstanceDestroyedDel;

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xC8E090", Offset = "0xC8E090", VA = "0xC8E090", Slot = "4")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xC8DDD4", Offset = "0xC8DDD4", VA = "0xC8DDD4", Slot = "5")]
		public virtual void InitializeModInstance(SAModAsset InModAsset)
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xC8E194", Offset = "0xC8E194", VA = "0xC8E194")]
		public void AssignUniqueTag(string InUniqueTag)
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xC8E19C", Offset = "0xC8E19C", VA = "0xC8E19C")]
		public SAModManagerComponent GetOwningModManagerComponent()
		{
			return null;
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xC8E1A4", Offset = "0xC8E1A4", VA = "0xC8E1A4")]
		public SACharacter GetOwningCharacter()
		{
			return null;
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xC8E224", Offset = "0xC8E224", VA = "0xC8E224")]
		public SAModAsset GetCorrespondingModAsset()
		{
			return null;
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xC8E22C", Offset = "0xC8E22C", VA = "0xC8E22C")]
		public bool IsUnique()
		{
			return default(bool);
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xC8E24C", Offset = "0xC8E24C", VA = "0xC8E24C")]
		public string GetUniqueTag()
		{
			return null;
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xC8DEC8", Offset = "0xC8DEC8", VA = "0xC8DEC8")]
		public SAModInstance()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class SAModManagerComponent : MonoBehaviour
	{
		[Token(Token = "0x2000369")]
		[CompilerGenerated]
		private sealed class <RemoveModInstanceAfterDelay>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float InRemoveAfterDelayTime;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SAModInstance InModInstance;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SAModManagerComponent <>4__this;

			[Token(Token = "0x17000104")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600166C")]
				[Address(RVA = "0xC8EC84", Offset = "0xC8EC84", VA = "0xC8EC84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000105")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600166E")]
				[Address(RVA = "0xC8ECCC", Offset = "0xC8ECCC", VA = "0xC8ECCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001669")]
			[Address(RVA = "0xC8E700", Offset = "0xC8E700", VA = "0xC8E700")]
			[DebuggerHidden]
			public <RemoveModInstanceAfterDelay>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600166A")]
			[Address(RVA = "0xC8EB68", Offset = "0xC8EB68", VA = "0xC8EB68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600166B")]
			[Address(RVA = "0xC8EB6C", Offset = "0xC8EB6C", VA = "0xC8EB6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600166D")]
			[Address(RVA = "0xC8EC8C", Offset = "0xC8EC8C", VA = "0xC8EC8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOnModInstanceAdded OnModInstanceAddedDel;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FOnModInstanceRemoved OnModInstanceRemovedDel;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SACharacter OwningCharacter;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<SAModInstance> ModInstances;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, SAModInstance> UniqueModInstances;

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xC8E254", Offset = "0xC8E254", VA = "0xC8E254")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xC8E2A4", Offset = "0xC8E2A4", VA = "0xC8E2A4")]
		public SAModInstance CreateModInstance(SAModAsset InModAsset, float InRemoveAfterDelayTime = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xC8E578", Offset = "0xC8E578", VA = "0xC8E578")]
		public SAModInstance CreateUniqueModInstance(SAModAsset InModAsset, string InUniqueTag, float InRemoveAfterDelayTime = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xC8E4F4", Offset = "0xC8E4F4", VA = "0xC8E4F4")]
		[IteratorStateMachine(typeof(<RemoveModInstanceAfterDelay>d__8))]
		private IEnumerator RemoveModInstanceAfterDelay(SAModInstance InModInstance, float InRemoveAfterDelayTime)
		{
			return null;
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xC8E130", Offset = "0xC8E130", VA = "0xC8E130")]
		public void RemoveModInstance(SAModInstance InModInstance)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xC8E824", Offset = "0xC8E824", VA = "0xC8E824")]
		public void RemoveModInstance(SAModAsset InModAsset, bool bRemoveOnlyFirstMod = true)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xC8E728", Offset = "0xC8E728", VA = "0xC8E728")]
		private void RemoveModInstanceInternal(SAModInstance InModInstance)
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xC8E960", Offset = "0xC8E960", VA = "0xC8E960")]
		public SACharacter GetOwningCharacter()
		{
			return null;
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xC8E968", Offset = "0xC8E968", VA = "0xC8E968")]
		public bool HasModOfClass(SubclassOf<SAModInstance> ModInstanceClass)
		{
			return default(bool);
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xC8EAA8", Offset = "0xC8EAA8", VA = "0xC8EAA8")]
		public SAModManagerComponent()
		{
		}
	}
	[Token(Token = "0x200036A")]
	[CreateAssetMenu(fileName = "SAMultiModAsset", menuName = "Scriptable Objects/Mods/SAMultiModAsset")]
	public class SAMultiModAsset : SAModAsset
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The mods that are given by this one mod")]
		protected List<SAModAsset> GivenModAssets;

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xC8ECD4", Offset = "0xC8ECD4", VA = "0xC8ECD4")]
		public SAMultiModAsset()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xC8EDC8", Offset = "0xC8EDC8", VA = "0xC8EDC8")]
		public List<SAModAsset> GetGivenModAssets()
		{
			return null;
		}
	}
	[Token(Token = "0x200036B")]
	public class SAMultiModInstance : SAModInstance
	{
		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<SAModInstance> ManagedModInstances;

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xC8EDD0", Offset = "0xC8EDD0", VA = "0xC8EDD0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xC8F1D8", Offset = "0xC8F1D8", VA = "0xC8F1D8", Slot = "4")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xC8F2AC", Offset = "0xC8F2AC", VA = "0xC8F2AC")]
		protected void ModInstanceDestroyed(SAModInstance DestroyedModInstance)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xC8F3D0", Offset = "0xC8F3D0", VA = "0xC8F3D0")]
		public SAMultiModInstance()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class SAPropertyManagerComponent : MonoBehaviour
	{
		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOnPropertyUpdated OnPropertyUpdatedDel;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SACharacter OwningCharacter;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, FSABoolPropertyContainer> BoolProperties;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Dictionary<string, FSAIntegerPropertyContainer> IntegerProperties;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, FSAFloatPropertyContainer> FloatProperties;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<string, FSAStringPropertyContainer> StringProperties;

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xC8F448", Offset = "0xC8F448", VA = "0xC8F448")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xC8F498", Offset = "0xC8F498", VA = "0xC8F498")]
		public void AddBoolProperty(string InKey, FSABoolProperty InBoolProperty)
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xC8F5C0", Offset = "0xC8F5C0", VA = "0xC8F5C0")]
		public void RemoveBoolProperty(string InKey, FSABoolProperty InBoolProperty)
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xC8F6DC", Offset = "0xC8F6DC", VA = "0xC8F6DC")]
		public void AddIntegerProperty(string InKey, FSAIntegerProperty InIntegerProperty)
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xC8F804", Offset = "0xC8F804", VA = "0xC8F804")]
		public void RemoveIntegerProperty(string InKey, FSAIntegerProperty InIntegerProperty)
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xC8F920", Offset = "0xC8F920", VA = "0xC8F920")]
		public void AddFloatProperty(string InKey, FSAFloatProperty InFloatProperty)
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xC8FA48", Offset = "0xC8FA48", VA = "0xC8FA48")]
		public void RemoveFloatProperty(string InKey, FSAFloatProperty InFloatProperty)
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xC8FB64", Offset = "0xC8FB64", VA = "0xC8FB64")]
		public void AddStringProperty(string InKey, FSAStringProperty InStringProperty)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xC8FC8C", Offset = "0xC8FC8C", VA = "0xC8FC8C")]
		public void RemoveStringProperty(string InKey, FSAStringProperty InStringProperty)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xC8FDA8", Offset = "0xC8FDA8", VA = "0xC8FDA8")]
		public SACharacter GetOwningCharacter()
		{
			return null;
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xC8FDB0", Offset = "0xC8FDB0", VA = "0xC8FDB0")]
		public bool GetBoolProperty(string InKey, out bool OutBoolValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xC8FE84", Offset = "0xC8FE84", VA = "0xC8FE84")]
		public bool GetIntegerProperty(string InKey, out int OutIntegerValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xC8FF58", Offset = "0xC8FF58", VA = "0xC8FF58")]
		public bool GetFloatProperty(string InKey, out float OutFloatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xC90034", Offset = "0xC90034", VA = "0xC90034")]
		public bool GetStringProperty(string InKey, out string OutStringValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xC9011C", Offset = "0xC9011C", VA = "0xC9011C")]
		public SAPropertyManagerComponent()
		{
		}
	}
	[Token(Token = "0x200036D")]
	[CreateAssetMenu(fileName = "SAPropertyModAsset", menuName = "Scriptable Objects/Mods/SAPropertyModAsset")]
	public class SAPropertyModAsset : SAModAsset
	{
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The key for the property")]
		protected string PropertyKey;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("The property variable type that is going to be affected")]
		protected ESAVariableTypes PropertyVariableType;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("The value when property type is bool")]
		protected FSABoolProperty BoolProperty;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("The value when property type is int")]
		protected FSAIntegerProperty IntegerProperty;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("The value when property type is float")]
		protected FSAFloatProperty FloatProperty;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The value when property type is string")]
		[SerializeField]
		protected FSAStringProperty StringProperty;

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xC90264", Offset = "0xC90264", VA = "0xC90264")]
		public SAPropertyModAsset()
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xC90454", Offset = "0xC90454", VA = "0xC90454")]
		public string GetPropertyKey()
		{
			return null;
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xC9045C", Offset = "0xC9045C", VA = "0xC9045C")]
		public ESAVariableTypes GetPropertyVariableType()
		{
			return default(ESAVariableTypes);
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xC90464", Offset = "0xC90464", VA = "0xC90464")]
		public FSABoolProperty GetBoolProperty()
		{
			return null;
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xC9046C", Offset = "0xC9046C", VA = "0xC9046C")]
		public FSAIntegerProperty GetIntegerProperty()
		{
			return null;
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xC90474", Offset = "0xC90474", VA = "0xC90474")]
		public FSAFloatProperty GetFloatProperty()
		{
			return null;
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xC9047C", Offset = "0xC9047C", VA = "0xC9047C")]
		public FSAStringProperty GetStringProperty()
		{
			return null;
		}
	}
	[Token(Token = "0x200036E")]
	public class SAPropertyModInstance : SAModInstance
	{
		[Token(Token = "0x600168B")]
		[Address(RVA = "0xC90484", Offset = "0xC90484", VA = "0xC90484", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xC90490", Offset = "0xC90490", VA = "0xC90490", Slot = "4")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xC904B0", Offset = "0xC904B0", VA = "0xC904B0", Slot = "7")]
		protected virtual void AddPropertyMod()
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xC90644", Offset = "0xC90644", VA = "0xC90644", Slot = "8")]
		protected virtual void RemovePropertyMod()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xC907D8", Offset = "0xC907D8", VA = "0xC907D8")]
		public SAPropertyModInstance()
		{
		}
	}
	[Token(Token = "0x200036F")]
	public class SAShowNavMesh : MonoBehaviour
	{
		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If we should always show the nav mesh in the game")]
		[SerializeField]
		protected bool bAlwaysShowNavMesh;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SAGameMode GameModeRef;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected MeshFilter NavMeshFilter;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool bShowNavMesh;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xC907DC", Offset = "0xC907DC", VA = "0xC907DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xC90864", Offset = "0xC90864", VA = "0xC90864")]
		private void Start()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xC90CA0", Offset = "0xC90CA0", VA = "0xC90CA0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xC90A24", Offset = "0xC90A24", VA = "0xC90A24")]
		private void ShowMesh(bool bVisible)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xC90E2C", Offset = "0xC90E2C", VA = "0xC90E2C")]
		protected void NavMeshBuilt()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xC90E4C", Offset = "0xC90E4C", VA = "0xC90E4C")]
		protected void NavMeshVisibilityUpdated(bool bNewVisibility)
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xC90A0C", Offset = "0xC90A0C", VA = "0xC90A0C")]
		public bool ShouldShowNavMesh()
		{
			return default(bool);
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xC90E6C", Offset = "0xC90E6C", VA = "0xC90E6C")]
		public SAShowNavMesh()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public class SAPoolableComponent : MonoBehaviour
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SAPoolManager PoolManager;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject PoolKey;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int PoolIndex;

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xC90E74", Offset = "0xC90E74", VA = "0xC90E74")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xC90EC4", Offset = "0xC90EC4", VA = "0xC90EC4")]
		protected void Start()
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xC90EC8", Offset = "0xC90EC8", VA = "0xC90EC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xC90ECC", Offset = "0xC90ECC", VA = "0xC90ECC")]
		public void AssignPoolKey(GameObject InKey)
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xC8D98C", Offset = "0xC8D98C", VA = "0xC8D98C")]
		public void TakeFromPool(int InPoolIndex)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xC8D75C", Offset = "0xC8D75C", VA = "0xC8D75C")]
		public void ReturnToPool()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xC90ED4", Offset = "0xC90ED4", VA = "0xC90ED4")]
		public GameObject GetPoolKey()
		{
			return null;
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xC90EDC", Offset = "0xC90EDC", VA = "0xC90EDC")]
		public int GetPoolIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xC90EE4", Offset = "0xC90EE4", VA = "0xC90EE4")]
		public SAPoolableComponent()
		{
		}
	}
	[Token(Token = "0x2000371")]
	public class SAReferenceAsset : ScriptableObject
	{
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the default settings asset to use when initializing default values")]
		[SerializeField]
		protected SADefaultSettingsAsset DefaultSettingsAsset;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This is the achievement collection asset to use for referencing achievement info")]
		[SerializeField]
		protected SAAchievementCollectionAsset AchievementCollectionAsset;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This is the leaderboards asset to use for referencing leaderboard info")]
		[SerializeField]
		protected SALeaderboardsAsset LeaderboardsAsset;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the fallback locale to use when we have an unsupported locale being used")]
		[SerializeField]
		protected Locale FallbackLocale;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("These are locale identifiers that are not yet unsupported, but may be set so that users who have that language set on their system do not see unfinished translations.")]
		protected List<LocaleIdentifier> UnsupportedLocaleIdentifiers;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The dictionary for locale string to font style 1")]
		[SerializeField]
		protected SerializableDictionary<string, TMP_FontAsset> FontStyleDictionary1;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The dictionary for locale string to font style 2")]
		[SerializeField]
		protected SerializableDictionary<string, TMP_FontAsset> FontStyleDictionary2;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The dictionary for locale string to font style 3")]
		[SerializeField]
		protected SerializableDictionary<string, TMP_FontAsset> FontStyleDictionary3;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The dictionary for locale string to font style 4")]
		[SerializeField]
		protected SerializableDictionary<string, TMP_FontAsset> FontStyleDictionary4;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Tooltip("The dictionary for locale string to font style 5")]
		protected SerializableDictionary<string, TMP_FontAsset> FontStyleDictionary5;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The asset that determines icon sets")]
		[SerializeField]
		protected SAIconSetsAsset IconSetsAsset;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("RPTC for master volume")]
		[SerializeField]
		protected RTPC MasterVolumeRTPC;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Tooltip("RPTC for SFX volume")]
		protected RTPC SFXVolumeRTPC;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Tooltip("RPTC for music volume")]
		protected RTPC MusicVolumeRTPC;

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xC90EF4", Offset = "0xC90EF4", VA = "0xC90EF4")]
		public SADefaultSettingsAsset GetDefaultSettingsAsset()
		{
			return null;
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xC90EFC", Offset = "0xC90EFC", VA = "0xC90EFC")]
		public SAAchievementCollectionAsset GetAchievementCollectionAsset()
		{
			return null;
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xC90F04", Offset = "0xC90F04", VA = "0xC90F04")]
		public SALeaderboardsAsset GetLeaderboardsAsset()
		{
			return null;
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xC90F0C", Offset = "0xC90F0C", VA = "0xC90F0C")]
		public Locale GetFallbackLocale()
		{
			return null;
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xC90F14", Offset = "0xC90F14", VA = "0xC90F14")]
		public List<LocaleIdentifier> GetUnsupportedLocaleIdentifiers()
		{
			return null;
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xC90F1C", Offset = "0xC90F1C", VA = "0xC90F1C", Slot = "4")]
		public virtual TMP_FontAsset GetFontAssetForFontStyleAndLocale(ESAFontStyles InFontStyle, string InLocaleString)
		{
			return null;
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xC91074", Offset = "0xC91074", VA = "0xC91074")]
		public SAIconSetsAsset GetIconSetsAsset()
		{
			return null;
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xC9107C", Offset = "0xC9107C", VA = "0xC9107C")]
		public RTPC GetMasterVolumeRTPC()
		{
			return null;
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xC91084", Offset = "0xC91084", VA = "0xC91084")]
		public RTPC GetSFXVolumeRTPC()
		{
			return null;
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xC9108C", Offset = "0xC9108C", VA = "0xC9108C")]
		public RTPC GetMusicVolumeRTPC()
		{
			return null;
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xC91094", Offset = "0xC91094", VA = "0xC91094")]
		public SAReferenceAsset()
		{
		}
	}
	[Token(Token = "0x2000372")]
	public class SAReferenceManager
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAReferenceManager Instance;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected SAReferenceAsset ReferenceAsset;

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xC9109C", Offset = "0xC9109C", VA = "0xC9109C", Slot = "4")]
		public virtual bool InitializeInstance(SAReferenceAsset InReferenceAsset, bool bForceInitialize = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xC911B4", Offset = "0xC911B4", VA = "0xC911B4")]
		public static SAReferenceManager GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xC87F24", Offset = "0xC87F24", VA = "0xC87F24")]
		public static SAReferenceAsset GetSAReferenceAsset()
		{
			return null;
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xC911FC", Offset = "0xC911FC", VA = "0xC911FC")]
		public SAReferenceAsset GetReferenceAsset()
		{
			return null;
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xC91204", Offset = "0xC91204", VA = "0xC91204")]
		public SAReferenceManager()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public static class SAConsts
	{
		[Token(Token = "0x4000EA7")]
		public const string SETTING_Language = "Language";

		[Token(Token = "0x4000EA8")]
		public const string SETTING_MasterVolume = "MasterVolume";

		[Token(Token = "0x4000EA9")]
		public const string SETTING_SFXVolume = "SFXVolume";

		[Token(Token = "0x4000EAA")]
		public const string SETTING_MusicVolume = "MusicVolume";

		[Token(Token = "0x4000EAB")]
		public const string SETTING_FixedFoveatedRendering = "FixedFoveatedRendering";

		[Token(Token = "0x4000EAC")]
		public const string ANIM_AnimationMontage = "AnimationMontage";

		[Token(Token = "0x4000EAD")]
		public const string ANIM_LAYER_HeadOverrideLayer = "HeadOverrideLayer";

		[Token(Token = "0x4000EAE")]
		public const string ANIM_LAYER_ArmOverrideLayer = "ArmOverrideLayer";

		[Token(Token = "0x4000EAF")]
		public const string ANIM_LAYER_RightLegOverrideLayer = "RightLegOverrideLayer";

		[Token(Token = "0x4000EB0")]
		public const string ANIM_LAYER_LeftLegOverrideLayer = "LeftLegOverrideLayer";

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int PARAM_AnimationMontage;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int PARAM_AnimationMontageSpeed;
	}
	[Token(Token = "0x2000374")]
	public delegate void FOnEnabled(GameObject EnabledGameObject);
	[Token(Token = "0x2000375")]
	public delegate void FOnDisabled(GameObject DisabledGameObject);
	[Token(Token = "0x2000376")]
	public delegate void FOnDestroyed(GameObject DestroyedGameObject);
	[Token(Token = "0x2000377")]
	public delegate void FOnPaused();
	[Token(Token = "0x2000378")]
	public delegate void FOnUnPaused();
	[Token(Token = "0x2000379")]
	public delegate void FOnSaveGameSaved();
	[Token(Token = "0x200037A")]
	public delegate void FOnSaveGameLoaded();
	[Token(Token = "0x200037B")]
	public delegate void FOnSaveGameDeleted();
	[Token(Token = "0x200037C")]
	public delegate void FOnSettingsChanged();
	[Token(Token = "0x200037D")]
	public delegate void FOnDLCPurchasesUpdated();
	[Token(Token = "0x200037E")]
	public delegate void FOnNavMeshBuilt();
	[Token(Token = "0x200037F")]
	public delegate void FOnNavMeshVisibilityUpdated(bool bNewVisibility);
	[Token(Token = "0x2000380")]
	public delegate void FOnActivityProgressUpdated(SAActivityInstance UpdatedActivityInstance);
	[Token(Token = "0x2000381")]
	public delegate void FOnActivityCompleted(SAActivityInstance CompletedActivityInstance);
	[Token(Token = "0x2000382")]
	public delegate void FOnModInstanceDestroyed(SAModInstance DestroyedModInstance);
	[Token(Token = "0x2000383")]
	public delegate void FOnPropertyUpdated(SAPropertyManagerComponent UpdatedPropertyManagerComponent, string UpdatedPropertyKey);
	[Token(Token = "0x2000384")]
	public delegate void FOnModInstanceAdded(SAModManagerComponent UpdatedModManagerComponent, SAModInstance AddedModInstance);
	[Token(Token = "0x2000385")]
	public delegate void FOnModInstanceRemoved(SAModManagerComponent UpdatedModManagerComponent, SAModInstance RemovedModInstance);
	[Token(Token = "0x2000386")]
	public delegate void FOnBoolSettingUpdated(string SettingName, bool NewBoolValue);
	[Token(Token = "0x2000387")]
	public delegate void FOnIntegerSettingUpdated(string SettingName, int NewIntegerValue);
	[Token(Token = "0x2000388")]
	public delegate void FOnFloatSettingUpdated(string SettingName, float NewFloatValue);
	[Token(Token = "0x2000389")]
	public delegate void FOnStringSettingUpdated(string SettingName, string NewStringValue);
	[Token(Token = "0x200038A")]
	public delegate void FOnLanguageSettingChanged(string NewLanguage);
	[Token(Token = "0x200038B")]
	public delegate void FOnSelectableWidgetConfirmed(SASelectableWidgetBase ConfirmedSelectableWidget);
	[Token(Token = "0x200038C")]
	public delegate void FOnSelectableWidgetHighlighted(SASelectableWidgetBase HighlightedSelectableWidget);
	[Token(Token = "0x200038D")]
	public delegate void FOnSelectableWidgetUnhighlighted(SASelectableWidgetBase UnhighlightedSelectableWidget);
	[Token(Token = "0x200038E")]
	public delegate void FOnCarouselIndexChanged(SACarouselWidget ChangedCarouselIndex, int PreviousIndex, int NewIndex);
	[Token(Token = "0x200038F")]
	public delegate void FOnLoadingScreenEnteringEnded();
	[Token(Token = "0x2000390")]
	public delegate void FOnLoadingScreenExitingEnded();
	[Token(Token = "0x2000391")]
	public enum ESAPressTypes
	{
		[Token(Token = "0x4000EB4")]
		Hold,
		[Token(Token = "0x4000EB5")]
		Toggle
	}
	[Token(Token = "0x2000392")]
	public enum ESAFontStyles
	{
		[Token(Token = "0x4000EB7")]
		None = 0,
		[Token(Token = "0x4000EB8")]
		FontStyle1 = 1,
		[Token(Token = "0x4000EB9")]
		FontStyle2 = 2,
		[Token(Token = "0x4000EBA")]
		FontStyle3 = 3,
		[Token(Token = "0x4000EBB")]
		FontStyle4 = 4,
		[Token(Token = "0x4000EBC")]
		FontStyle5 = 5,
		[Token(Token = "0x4000EBD")]
		Custom = 14
	}
	[Token(Token = "0x2000393")]
	public enum ESAVariableTypes
	{
		[Token(Token = "0x4000EBF")]
		Bool,
		[Token(Token = "0x4000EC0")]
		Integer,
		[Token(Token = "0x4000EC1")]
		Float,
		[Token(Token = "0x4000EC2")]
		String
	}
	[Token(Token = "0x2000394")]
	public enum ESADirections
	{
		[Token(Token = "0x4000EC4")]
		Up = 0,
		[Token(Token = "0x4000EC5")]
		Right = 10,
		[Token(Token = "0x4000EC6")]
		Down = 20,
		[Token(Token = "0x4000EC7")]
		Left = 30
	}
	[Token(Token = "0x2000395")]
	public enum ESAAttachTypes
	{
		[Token(Token = "0x4000EC9")]
		Parent,
		[Token(Token = "0x4000ECA")]
		World
	}
	[Token(Token = "0x2000396")]
	public enum ESAPoolCreationTypes
	{
		[Token(Token = "0x4000ECC")]
		AddObjectsUpToAmount = 0,
		[Token(Token = "0x4000ECD")]
		IncreaseObjectsByAmount = 3
	}
	[Token(Token = "0x2000397")]
	public enum ESAZoneTypes
	{
		[Token(Token = "0x4000ECF")]
		EnterExit,
		[Token(Token = "0x4000ED0")]
		Interval
	}
	[Token(Token = "0x2000398")]
	public enum ESAComparisonTypes
	{
		[Token(Token = "0x4000ED2")]
		None,
		[Token(Token = "0x4000ED3")]
		Equal,
		[Token(Token = "0x4000ED4")]
		Lower,
		[Token(Token = "0x4000ED5")]
		EqualOrLower,
		[Token(Token = "0x4000ED6")]
		Higher,
		[Token(Token = "0x4000ED7")]
		EqualOrHigher
	}
	[Token(Token = "0x2000399")]
	public enum ESAPlatforms
	{
		[Token(Token = "0x4000ED9")]
		Steam = 0,
		[Token(Token = "0x4000EDA")]
		Epic = 1,
		[Token(Token = "0x4000EDB")]
		PS4 = 10,
		[Token(Token = "0x4000EDC")]
		PS5 = 11,
		[Token(Token = "0x4000EDD")]
		XboxOne = 20,
		[Token(Token = "0x4000EDE")]
		XboxSeriesX = 21,
		[Token(Token = "0x4000EDF")]
		Switch = 30,
		[Token(Token = "0x4000EE0")]
		Android = 40,
		[Token(Token = "0x4000EE1")]
		iOS = 41,
		[Token(Token = "0x4000EE2")]
		OculusQuest = 50,
		[Token(Token = "0x4000EE3")]
		OculusQuest2 = 51
	}
	[Token(Token = "0x200039A")]
	public static class SAFunctionLibrary
	{
		[Token(Token = "0x200039B")]
		[CompilerGenerated]
		private sealed class <DelayThenLoadScene>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float InDelayTime;

			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string InSceneName;

			[Token(Token = "0x17000106")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001740")]
				[Address(RVA = "0xC942EC", Offset = "0xC942EC", VA = "0xC942EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000107")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001742")]
				[Address(RVA = "0xC94334", Offset = "0xC94334", VA = "0xC94334", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600173D")]
			[Address(RVA = "0xC931FC", Offset = "0xC931FC", VA = "0xC931FC")]
			[DebuggerHidden]
			public <DelayThenLoadScene>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600173E")]
			[Address(RVA = "0xC94214", Offset = "0xC94214", VA = "0xC94214", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600173F")]
			[Address(RVA = "0xC94218", Offset = "0xC94218", VA = "0xC94218", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001741")]
			[Address(RVA = "0xC942F4", Offset = "0xC942F4", VA = "0xC942F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int UniqueID;

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xC92D04", Offset = "0xC92D04", VA = "0xC92D04")]
		public static object InvokeFunction(object InvokingObject, string InFunctionName, object[] InParams)
		{
			return null;
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xC92DE8", Offset = "0xC92DE8", VA = "0xC92DE8")]
		public static SAController GetFirstPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xC92E34", Offset = "0xC92E34", VA = "0xC92E34")]
		public static SACharacter GetFirstCharacter()
		{
			return null;
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xC92EE4", Offset = "0xC92EE4", VA = "0xC92EE4")]
		public static void LoadSceneSafely(string InSceneName, SAGameMode CurrentGameMode)
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xC93184", Offset = "0xC93184", VA = "0xC93184")]
		[IteratorStateMachine(typeof(<DelayThenLoadScene>d__5))]
		private static IEnumerator DelayThenLoadScene(float InDelayTime, string InSceneName)
		{
			return null;
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0xC93080", Offset = "0xC93080", VA = "0xC93080")]
		public static void CleanUpSceneAndSave()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xC93224", Offset = "0xC93224", VA = "0xC93224")]
		public static bool IsConnectedToInternet()
		{
			return default(bool);
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xC93240", Offset = "0xC93240", VA = "0xC93240")]
		public static Color ConvertColorToGrayscale(Color InColor)
		{
			return default(Color);
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xC93278", Offset = "0xC93278", VA = "0xC93278")]
		public static Gradient ConvertGradientToGrayscale(Gradient InGradient)
		{
			return null;
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xC93340", Offset = "0xC93340", VA = "0xC93340")]
		public static ParticleSystem.MinMaxGradient ConvertMinMaxGradientToGrayscale(ParticleSystem.MinMaxGradient InMinMaxGradient)
		{
			return default(ParticleSystem.MinMaxGradient);
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xC934AC", Offset = "0xC934AC", VA = "0xC934AC")]
		public static SAPoolableComponent SpawnPooledObject(GameObject InGameObjectKey, Vector3 InPosition, Quaternion InRotation)
		{
			return null;
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xC936E0", Offset = "0xC936E0", VA = "0xC936E0")]
		public static SAPoolableComponent SpawnPooledObject(GameObject InGameObjectKey, Transform InTransform, ESAAttachTypes InAttachType)
		{
			return null;
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xC851A4", Offset = "0xC851A4", VA = "0xC851A4")]
		public static int GetNextUniqueID()
		{
			return default(int);
		}

		[Token(Token = "0x6001733")]
		public static void SpaceTransformsEvenlyOnX<T>(List<T> InObjects, float InSpaceBetweenTransforms)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xC939B4", Offset = "0xC939B4", VA = "0xC939B4")]
		public static void UpdateSpriteSwapImagesVisibility(List<SASpriteSwapImage> InSpriteSwapImages, int InNumActiveImages, int InMaxNumDisplayableImages = int.MaxValue)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xC93AE8", Offset = "0xC93AE8", VA = "0xC93AE8")]
		public static bool IsDevelopmentBuild()
		{
			return default(bool);
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xC87A6C", Offset = "0xC87A6C", VA = "0xC87A6C")]
		public static ESAPlatforms GetPlatform()
		{
			return default(ESAPlatforms);
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xC93B38", Offset = "0xC93B38", VA = "0xC93B38")]
		public static bool IsEditor()
		{
			return default(bool);
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xC93B40", Offset = "0xC93B40", VA = "0xC93B40")]
		public static FSAVersionNumber GetVersionNumber()
		{
			return default(FSAVersionNumber);
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xC93C80", Offset = "0xC93C80", VA = "0xC93C80")]
		public static SystemLanguage GetDefaultSystemLanguage()
		{
			return default(SystemLanguage);
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xC93C88", Offset = "0xC93C88", VA = "0xC93C88")]
		public static LocaleIdentifier GetDefaultLocaleIdentifier()
		{
			return default(LocaleIdentifier);
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xC93D44", Offset = "0xC93D44", VA = "0xC93D44")]
		public static string GetPlayerName()
		{
			return null;
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xC93DCC", Offset = "0xC93DCC", VA = "0xC93DCC")]
		public static void DrawWireSphere(Vector3 center, float radius, Color color, float duration, int quality = 3)
		{
		}
	}
	[Token(Token = "0x200039C")]
	[CreateAssetMenu(fileName = "SAIconSetsAsset", menuName = "Scriptable Objects/Synodic/SAIconSetsAsset")]
	public class SAIconSetsAsset : ScriptableObject
	{
		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Dictionary of platforms to each of their text to icon replacer list")]
		[SerializeField]
		protected SerializableDictionary<string, SATextToIconReplacerListAsset> PlatformNameToTextToIconReplacerLists;

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xC9433C", Offset = "0xC9433C", VA = "0xC9433C")]
		public string GetIconText(string InOriginalText)
		{
			return null;
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xC943F4", Offset = "0xC943F4", VA = "0xC943F4")]
		public SAIconSetsAsset()
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class SAMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOnEnabled OnEnabledDel;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FOnDisabled OnDisabledDel;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FOnDestroyed OnDestroyedDel;

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xC867F4", Offset = "0xC867F4", VA = "0xC867F4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xC8BC48", Offset = "0xC8BC48", VA = "0xC8BC48", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xC943FC", Offset = "0xC943FC", VA = "0xC943FC", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xC94434", Offset = "0xC94434", VA = "0xC94434", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xC8BC4C", Offset = "0xC8BC4C", VA = "0xC8BC4C", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xC9446C", Offset = "0xC9446C", VA = "0xC9446C")]
		public void DestroyGameObject()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xC86E34", Offset = "0xC86E34", VA = "0xC86E34")]
		public SAMonoBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200039E")]
	public struct SAOffsetInfo
	{
		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Offset translation")]
		[SerializeField]
		private Vector3 OffsetTranslation;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[Tooltip("Offset rotation")]
		[SerializeField]
		private Quaternion OffsetRotation;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Tooltip("If this uses the offset scale")]
		private bool bUseOffsetScale;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Offset scale")]
		[SerializeField]
		private Vector3 OffsetScale;

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xC945B4", Offset = "0xC945B4", VA = "0xC945B4")]
		public SAOffsetInfo(Vector3 InOffsetTranslation, Quaternion InOffsetRotation, bool bInUseOffsetScale, Vector3 InOffsetScale)
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xC945E0", Offset = "0xC945E0", VA = "0xC945E0")]
		public Vector3 GetOffsetTranslation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xC945EC", Offset = "0xC945EC", VA = "0xC945EC")]
		public Quaternion GetOffsetRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xC945F8", Offset = "0xC945F8", VA = "0xC945F8")]
		public bool UsesOffsetScale()
		{
			return default(bool);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xC94600", Offset = "0xC94600", VA = "0xC94600")]
		public Vector3 GetOffsetScale()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200039F")]
	public struct FSAVersionNumber
	{
		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[Tooltip("The major number (leftmost side)")]
		private int MajorNumber;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		[Tooltip("The minor number")]
		private int MinorNumber;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Tooltip("The sub minor number")]
		[SerializeField]
		private int SubMinorNumber;

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xC93C74", Offset = "0xC93C74", VA = "0xC93C74")]
		public FSAVersionNumber(int InMajorNumber, int InMinorNumber, int InSubMinorNumber)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xC9460C", Offset = "0xC9460C", VA = "0xC9460C")]
		public static bool operator >(FSAVersionNumber LHS, FSAVersionNumber RHS)
		{
			return default(bool);
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xC94640", Offset = "0xC94640", VA = "0xC94640")]
		public static bool operator <(FSAVersionNumber LHS, FSAVersionNumber RHS)
		{
			return default(bool);
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xC94674", Offset = "0xC94674", VA = "0xC94674")]
		public int GetMajorNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xC9467C", Offset = "0xC9467C", VA = "0xC9467C")]
		public int GetMinorNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xC94684", Offset = "0xC94684", VA = "0xC94684")]
		public int GetSubMinorNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xC9468C", Offset = "0xC9468C", VA = "0xC9468C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003A0")]
	public class SABaseProperty
	{
		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("How much priority this property has over other properties with the same name. If a higher value, overwrites the other values.")]
		[SerializeField]
		public int Priority;

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xBD8364", Offset = "0xBD8364", VA = "0xBD8364")]
		public SABaseProperty(SABaseProperty InBaseProperty)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xBD8398", Offset = "0xBD8398", VA = "0xBD8398")]
		public SABaseProperty(int InPriority)
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xBD83C0", Offset = "0xBD83C0", VA = "0xBD83C0")]
		public int GetPriority()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A1")]
	public class FSABoolProperty : SABaseProperty
	{
		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The bool value")]
		[SerializeField]
		public bool BoolValue;

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xBD83C8", Offset = "0xBD83C8", VA = "0xBD83C8")]
		public FSABoolProperty(FSABoolProperty InBoolProperty)
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xBD8404", Offset = "0xBD8404", VA = "0xBD8404")]
		public FSABoolProperty(int InPriority, bool InBoolValue)
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xBD8434", Offset = "0xBD8434", VA = "0xBD8434")]
		public bool GetBoolValue()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A2")]
	public class FSAIntegerProperty : SABaseProperty
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The integer value")]
		[SerializeField]
		public int IntegerValue;

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xBD843C", Offset = "0xBD843C", VA = "0xBD843C")]
		public FSAIntegerProperty(FSAIntegerProperty InIntegerProperty)
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xBD8470", Offset = "0xBD8470", VA = "0xBD8470")]
		public FSAIntegerProperty(int InPriority, int InIntegerValue)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xBD849C", Offset = "0xBD849C", VA = "0xBD849C")]
		public int GetIntegerValue()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A3")]
	public class FSAFloatProperty : SABaseProperty
	{
		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The float value")]
		[SerializeField]
		public float FloatValue;

		[Token(Token = "0x6001761")]
		[Address(RVA = "0xBD84A4", Offset = "0xBD84A4", VA = "0xBD84A4")]
		public FSAFloatProperty(FSAFloatProperty InFloatProperty)
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xBD84E0", Offset = "0xBD84E0", VA = "0xBD84E0")]
		public FSAFloatProperty(int InPriority, float InFloatValue)
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xBD8520", Offset = "0xBD8520", VA = "0xBD8520")]
		public float GetFloatValue()
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A4")]
	public class FSAStringProperty : SABaseProperty
	{
		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The string value")]
		public string StringValue;

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xBD8528", Offset = "0xBD8528", VA = "0xBD8528")]
		public FSAStringProperty(FSAStringProperty InStringProperty)
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xBD85A0", Offset = "0xBD85A0", VA = "0xBD85A0")]
		public FSAStringProperty(int InPriority, string InStringValue)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xBD860C", Offset = "0xBD860C", VA = "0xBD860C")]
		public string GetStringValue()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003A5")]
	public class SABasePropertyContainer
	{
		[Token(Token = "0x6001767")]
		[Address(RVA = "0xBD8614", Offset = "0xBD8614", VA = "0xBD8614")]
		public SABasePropertyContainer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A6")]
	public class FSABoolPropertyContainer : SABasePropertyContainer
	{
		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<FSABoolProperty> BoolProperties;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool BoolValue;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xBD861C", Offset = "0xBD861C", VA = "0xBD861C")]
		public FSABoolPropertyContainer()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xBD869C", Offset = "0xBD869C", VA = "0xBD869C")]
		public void AddBoolProperty(FSABoolProperty InBoolProperty)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xBD882C", Offset = "0xBD882C", VA = "0xBD882C")]
		public void RemoveBoolProperty(FSABoolProperty InBoolProperty)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xBD8740", Offset = "0xBD8740", VA = "0xBD8740")]
		protected void RecalculateBoolValue()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xBD888C", Offset = "0xBD888C", VA = "0xBD888C")]
		public bool GetBoolValue()
		{
			return default(bool);
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xBD8894", Offset = "0xBD8894", VA = "0xBD8894")]
		public bool HasProperties()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A7")]
	public class FSAIntegerPropertyContainer : SABasePropertyContainer
	{
		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<FSAIntegerProperty> IntegerProperties;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int IntegerValue;

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xBD88E4", Offset = "0xBD88E4", VA = "0xBD88E4")]
		public FSAIntegerPropertyContainer()
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xBD8964", Offset = "0xBD8964", VA = "0xBD8964")]
		public void AddIntegerProperty(FSAIntegerProperty InIntegerProperty)
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xBD8B34", Offset = "0xBD8B34", VA = "0xBD8B34")]
		public void RemoveIntegerProperty(FSAIntegerProperty InIntegerProperty)
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xBD8A08", Offset = "0xBD8A08", VA = "0xBD8A08")]
		protected void RecalculateIntegerValue()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xBD8B94", Offset = "0xBD8B94", VA = "0xBD8B94")]
		public int GetIntegerValue()
		{
			return default(int);
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xBD8B9C", Offset = "0xBD8B9C", VA = "0xBD8B9C")]
		public bool HasProperties()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A8")]
	public class FSAFloatPropertyContainer : SABasePropertyContainer
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<FSAFloatProperty> FloatProperties;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float FloatValue;

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xBD8BEC", Offset = "0xBD8BEC", VA = "0xBD8BEC")]
		public FSAFloatPropertyContainer()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xBD8C6C", Offset = "0xBD8C6C", VA = "0xBD8C6C")]
		public void AddFloatProperty(FSAFloatProperty InFloatProperty)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xBD8E44", Offset = "0xBD8E44", VA = "0xBD8E44")]
		public void RemoveFloatProperty(FSAFloatProperty InFloatProperty)
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xBD8D10", Offset = "0xBD8D10", VA = "0xBD8D10")]
		protected void RecalculateFloatValue()
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xBD8EA4", Offset = "0xBD8EA4", VA = "0xBD8EA4")]
		public float GetFloatValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xBD8EAC", Offset = "0xBD8EAC", VA = "0xBD8EAC")]
		public bool HasProperties()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003A9")]
	public class FSAStringPropertyContainer : SABasePropertyContainer
	{
		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<FSAStringProperty> StringProperties;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string StringValue;

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xBD8EFC", Offset = "0xBD8EFC", VA = "0xBD8EFC")]
		public FSAStringPropertyContainer()
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xBD8FA0", Offset = "0xBD8FA0", VA = "0xBD8FA0")]
		public void AddStringProperty(FSAStringProperty InStringProperty)
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xBD9138", Offset = "0xBD9138", VA = "0xBD9138")]
		public void RemoveStringProperty(FSAStringProperty InStringProperty)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xBD9044", Offset = "0xBD9044", VA = "0xBD9044")]
		protected void RecalculateStringValue()
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xBD9198", Offset = "0xBD9198", VA = "0xBD9198")]
		public string GetStringValue()
		{
			return null;
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xBD91A0", Offset = "0xBD91A0", VA = "0xBD91A0")]
		public bool HasProperties()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003AA")]
	public class FSACarouselOptionBase
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("If we should use the unlocalized text instead of the localized text")]
		[SerializeField]
		protected bool bUseUnlocalizedText;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The text that will show for this carousel option if using localization")]
		protected LocalizedString LocalizedOptionText;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The text that will show for this carousel option when not localizing this")]
		protected string UnlocalizedOptionText;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Platforms that this option is disabled on")]
		[SerializeField]
		protected List<ESAPlatforms> DisabledPlatforms;

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xBD91F0", Offset = "0xBD91F0", VA = "0xBD91F0")]
		public FSACarouselOptionBase()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xBD9210", Offset = "0xBD9210", VA = "0xBD9210")]
		public FSACarouselOptionBase(bool bInUseUnlocalizedText, LocalizedString InLocalizedOptionText, string InUnlocalizedOptionText, List<ESAPlatforms> InDisabledPlatforms)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xBD9254", Offset = "0xBD9254", VA = "0xBD9254")]
		public bool IsValidOption(ESAPlatforms InPlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xBD9258", Offset = "0xBD9258", VA = "0xBD9258")]
		public bool IsValidPlatform(ESAPlatforms InPlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xBD92BC", Offset = "0xBD92BC", VA = "0xBD92BC")]
		public bool DoesUseUnlocalizedText()
		{
			return default(bool);
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xBD92C4", Offset = "0xBD92C4", VA = "0xBD92C4")]
		public void SetLocalizedOptionText(LocalizedString InLocalizedOptionText)
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xBD92CC", Offset = "0xBD92CC", VA = "0xBD92CC")]
		public LocalizedString GetLocalizedOptionText()
		{
			return null;
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xBD92D4", Offset = "0xBD92D4", VA = "0xBD92D4")]
		public void SetUnlocalizedOptionText(string InUnlocalizedOptionText)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xBD92DC", Offset = "0xBD92DC", VA = "0xBD92DC")]
		public string GetUnlocalizedOptionText()
		{
			return null;
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xBD92E4", Offset = "0xBD92E4", VA = "0xBD92E4")]
		public List<ESAPlatforms> GetDisabledPlatforms()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003AB")]
	public class FSACarouselOptionBool : FSACarouselOptionBase
	{
		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The carousel's bool value")]
		[SerializeField]
		protected bool BoolValue;

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xBD92EC", Offset = "0xBD92EC", VA = "0xBD92EC")]
		public FSACarouselOptionBool()
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xBD930C", Offset = "0xBD930C", VA = "0xBD930C")]
		public FSACarouselOptionBool(bool bInUseUnlocalizedText, LocalizedString InLocalizedOptionText, string InUnlocalizedOptionText, List<ESAPlatforms> InDisabledPlatforms, bool InBoolValue)
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xBD9360", Offset = "0xBD9360", VA = "0xBD9360")]
		public void SetBoolValue(bool bInBoolValue)
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xBD936C", Offset = "0xBD936C", VA = "0xBD936C")]
		public bool GetBoolValue()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003AC")]
	public class FSACarouselOptionInteger : FSACarouselOptionBase
	{
		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The carousel's integer value")]
		[SerializeField]
		protected int IntegerValue;

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xBD9374", Offset = "0xBD9374", VA = "0xBD9374")]
		public FSACarouselOptionInteger()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xBD9394", Offset = "0xBD9394", VA = "0xBD9394")]
		public FSACarouselOptionInteger(bool bInUseUnlocalizedText, LocalizedString InLocalizedOptionText, string InUnlocalizedOptionText, List<ESAPlatforms> InDisabledPlatforms, int InIntegerValue)
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xBD93E8", Offset = "0xBD93E8", VA = "0xBD93E8")]
		public void SetIntegerValue(int bInIntegerValue)
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xBD93F0", Offset = "0xBD93F0", VA = "0xBD93F0")]
		public int GetIntegerValue()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003AD")]
	public class FSACarouselOptionFloat : FSACarouselOptionBase
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The carousel's float value")]
		[SerializeField]
		protected float FloatValue;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xBD93F8", Offset = "0xBD93F8", VA = "0xBD93F8")]
		public FSACarouselOptionFloat()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xBD9418", Offset = "0xBD9418", VA = "0xBD9418")]
		public FSACarouselOptionFloat(bool bInUseUnlocalizedText, LocalizedString InLocalizedOptionText, string InUnlocalizedOptionText, List<ESAPlatforms> InDisabledPlatforms, float InFloatValue)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xBD946C", Offset = "0xBD946C", VA = "0xBD946C")]
		public void SetFloatValue(float bInFloatValue)
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xBD9474", Offset = "0xBD9474", VA = "0xBD9474")]
		public float GetFloatValue()
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20003AE")]
	public class FSACarouselOptionString : FSACarouselOptionBase
	{
		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The carousel's string value")]
		[SerializeField]
		protected string StringValue;

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xBD947C", Offset = "0xBD947C", VA = "0xBD947C")]
		public FSACarouselOptionString()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xBD94D8", Offset = "0xBD94D8", VA = "0xBD94D8")]
		public FSACarouselOptionString(bool bInUseUnlocalizedText, LocalizedString InLocalizedOptionText, string InUnlocalizedOptionText, List<ESAPlatforms> InDisabledPlatforms, string InStringValue)
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xBD9568", Offset = "0xBD9568", VA = "0xBD9568")]
		public void SetStringValue(string bInStringValue)
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xBD9570", Offset = "0xBD9570", VA = "0xBD9570")]
		public string GetStringValue()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003AF")]
	public struct FSASavedActivityInfo
	{
		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("If the saved activity is complete")]
		[SerializeField]
		private bool bComplete;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[Tooltip("Saved integer progress 1")]
		[SerializeField]
		private int IntProg1;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Tooltip("Saved integer progress 2")]
		[SerializeField]
		private int IntProg2;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		[Tooltip("Saved integer progress 3")]
		private int IntProg3;

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xBD9578", Offset = "0xBD9578", VA = "0xBD9578")]
		public FSASavedActivityInfo(bool bInComplete, int InIntProg1, int InIntProg2, int InIntProg3)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xBD958C", Offset = "0xBD958C", VA = "0xBD958C")]
		public bool IsComplete()
		{
			return default(bool);
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xBD9594", Offset = "0xBD9594", VA = "0xBD9594")]
		public int GetIntProg1()
		{
			return default(int);
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xBD959C", Offset = "0xBD959C", VA = "0xBD959C")]
		public int GetIntProg2()
		{
			return default(int);
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xBD95A4", Offset = "0xBD95A4", VA = "0xBD95A4")]
		public int GetIntProg3()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003B0")]
	public class FSAPlatformSettingsValues
	{
		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Tooltip("Bool settings")]
		private SerializableDictionary<string, bool> BoolSettings;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Integer settings")]
		[SerializeField]
		private SerializableDictionary<string, int> IntegerSettings;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Float settings")]
		[SerializeField]
		private SerializableDictionary<string, float> FloatSettings;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("String settings")]
		[SerializeField]
		private SerializableDictionary<string, string> StringSettings;

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xBD95AC", Offset = "0xBD95AC", VA = "0xBD95AC")]
		public FSAPlatformSettingsValues()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xBD96F4", Offset = "0xBD96F4", VA = "0xBD96F4")]
		public FSAPlatformSettingsValues(FSAPlatformSettingsValues InPlatformSettingsValues)
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xBD9938", Offset = "0xBD9938", VA = "0xBD9938")]
		public void UpdateBoolSetting(string Key, bool Value)
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xBD9A04", Offset = "0xBD9A04", VA = "0xBD9A04")]
		public void UpdateIntegerSetting(string Key, int Value)
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xBD9AD0", Offset = "0xBD9AD0", VA = "0xBD9AD0")]
		public void UpdateFloatSetting(string Key, float Value)
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0xBD9B9C", Offset = "0xBD9B9C", VA = "0xBD9B9C")]
		public void UpdateStringSetting(string Key, string Value)
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0xBD9C68", Offset = "0xBD9C68", VA = "0xBD9C68")]
		public SerializableDictionary<string, bool> GetBoolSettingsAsSerializableDictionary()
		{
			return null;
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xBD9C70", Offset = "0xBD9C70", VA = "0xBD9C70")]
		public Dictionary<string, bool> GetBoolSettings()
		{
			return null;
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xBD9CB8", Offset = "0xBD9CB8", VA = "0xBD9CB8")]
		public SerializableDictionary<string, int> GetIntegerSettingsAsSerializableDictionary()
		{
			return null;
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xBD9CC0", Offset = "0xBD9CC0", VA = "0xBD9CC0")]
		public Dictionary<string, int> GetIntegerSettings()
		{
			return null;
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xBD9D08", Offset = "0xBD9D08", VA = "0xBD9D08")]
		public SerializableDictionary<string, float> GetFloatSettingsAsSerializableDictionary()
		{
			return null;
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xBD9D10", Offset = "0xBD9D10", VA = "0xBD9D10")]
		public Dictionary<string, float> GetFloatSettings()
		{
			return null;
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xBD9D58", Offset = "0xBD9D58", VA = "0xBD9D58")]
		public SerializableDictionary<string, string> GetStringSettingsAsSerializableDictionary()
		{
			return null;
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xBD9D60", Offset = "0xBD9D60", VA = "0xBD9D60")]
		public Dictionary<string, string> GetStringSettings()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003B1")]
	public class FSALeaderboardInfo
	{
		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The leaderboard ID for the Oculus Quest platform")]
		[SerializeField]
		private string OculusQuestLeaderboardID;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The leaderboard ID for the PS4 platform")]
		[SerializeField]
		private string PS4LeaderboardID;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The leaderboard ID for the PS5 platform")]
		[SerializeField]
		private string PS5LeaderboardID;

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xBD9DA8", Offset = "0xBD9DA8", VA = "0xBD9DA8")]
		public FSALeaderboardInfo()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xBD9DB0", Offset = "0xBD9DB0", VA = "0xBD9DB0")]
		public string GetLeaderboardIDForPlatform(ESAPlatforms InPlatform)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003B2")]
	public class FSAAchievementInfo
	{
		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Tooltip("The condition asset for unlocking the achievement")]
		private SAConditionAsset ConditionAsset;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("If this achievement is hidden by default")]
		private bool bHidden;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Achievement ID for the Oculus Quest platform")]
		[SerializeField]
		private string OculusQuestAchievementID;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Achievement ID for the PS4 platform")]
		[SerializeField]
		private string PS4AchievementID;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Achievement ID for the PS5 platform")]
		[SerializeField]
		private string PS5AchievementID;

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xBD9E28", Offset = "0xBD9E28", VA = "0xBD9E28")]
		public FSAAchievementInfo()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xBD9E30", Offset = "0xBD9E30", VA = "0xBD9E30")]
		public SAConditionAsset GetCondition()
		{
			return null;
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xBD9E38", Offset = "0xBD9E38", VA = "0xBD9E38")]
		public bool IsHidden()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xBD9E40", Offset = "0xBD9E40", VA = "0xBD9E40")]
		public bool IsUnlocked([Optional] GameObject ReferenceObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xBD9EE0", Offset = "0xBD9EE0", VA = "0xBD9EE0")]
		public string GetAchievementIDForPlatform(ESAPlatforms InPlatform)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003B3")]
	public class FSAPooledObjectInitializationInfo
	{
		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The game object prefab to spawn")]
		[SerializeField]
		protected GameObject PF_GameObject;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The number of pooled objects to spawn")]
		[SerializeField]
		protected int NumPooledObjects;

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xBD9F58", Offset = "0xBD9F58", VA = "0xBD9F58")]
		public FSAPooledObjectInitializationInfo()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xBD9F68", Offset = "0xBD9F68", VA = "0xBD9F68")]
		public FSAPooledObjectInitializationInfo(GameObject InPF_GameObject, int InNumPooledObjects)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xBD9FA0", Offset = "0xBD9FA0", VA = "0xBD9FA0")]
		public GameObject GetPF_GameObject()
		{
			return null;
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xBD9FA8", Offset = "0xBD9FA8", VA = "0xBD9FA8")]
		public int GetNumPooledObjects()
		{
			return default(int);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xBD9FB0", Offset = "0xBD9FB0", VA = "0xBD9FB0")]
		public bool IsValid()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20003B4")]
	public struct FSAVibrationInfo
	{
		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool bRightHand;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float Amplitude;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float Duration;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float ActivatedTime;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int Priority;

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xBDA02C", Offset = "0xBDA02C", VA = "0xBDA02C")]
		public FSAVibrationInfo(bool bInRightHand, float InAmplitude, float InDuration, float InActivatedTime, int InPriority)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xBDA044", Offset = "0xBDA044", VA = "0xBDA044")]
		public bool IsRightHand()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xBDA04C", Offset = "0xBDA04C", VA = "0xBDA04C")]
		public float GetAmplitude()
		{
			return default(float);
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xBDA054", Offset = "0xBDA054", VA = "0xBDA054")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xBDA05C", Offset = "0xBDA05C", VA = "0xBDA05C")]
		public float GetActivatedTime()
		{
			return default(float);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xBDA064", Offset = "0xBDA064", VA = "0xBDA064")]
		public int GetPriority()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003B5")]
	public class FSAClampedFloatValue
	{
		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The current value")]
		[SerializeField]
		protected float CurrentValue;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The min value")]
		[SerializeField]
		protected float MinValue;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The max value")]
		protected float MaxValue;

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xBDA06C", Offset = "0xBDA06C", VA = "0xBDA06C")]
		public FSAClampedFloatValue(float InCurrentValue, float InMinValue, float InMaxValue)
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xBDA0E4", Offset = "0xBDA0E4", VA = "0xBDA0E4")]
		public void Add(float InValue)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xBDA110", Offset = "0xBDA110", VA = "0xBDA110")]
		public void Subtract(float InValue)
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xBDA0C0", Offset = "0xBDA0C0", VA = "0xBDA0C0")]
		public void Set(float InValue)
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xBDA13C", Offset = "0xBDA13C", VA = "0xBDA13C")]
		public void SetToMax()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xBDA154", Offset = "0xBDA154", VA = "0xBDA154")]
		public void SetToMin()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xBDA16C", Offset = "0xBDA16C", VA = "0xBDA16C")]
		public float GetDifferenceFromMin()
		{
			return default(float);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xBDA178", Offset = "0xBDA178", VA = "0xBDA178")]
		public float GetDifferenceFromMax()
		{
			return default(float);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xBDA188", Offset = "0xBDA188", VA = "0xBDA188")]
		public bool HasReachedMax()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xBDA19C", Offset = "0xBDA19C", VA = "0xBDA19C")]
		public bool HasDepleted()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xBDA1AC", Offset = "0xBDA1AC", VA = "0xBDA1AC")]
		public bool IsAboveValue(float InValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xBDA1BC", Offset = "0xBDA1BC", VA = "0xBDA1BC")]
		public bool IsAtOrAboveValue(float InValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xBDA1CC", Offset = "0xBDA1CC", VA = "0xBDA1CC")]
		public bool IsBelowValue(float InValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xBDA1DC", Offset = "0xBDA1DC", VA = "0xBDA1DC")]
		public bool IsAtOrBelowValue(float InValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xBDA1EC", Offset = "0xBDA1EC", VA = "0xBDA1EC")]
		public float GetCurrentValue()
		{
			return default(float);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xBDA1F4", Offset = "0xBDA1F4", VA = "0xBDA1F4")]
		public float GetMinValue()
		{
			return default(float);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xBDA1FC", Offset = "0xBDA1FC", VA = "0xBDA1FC")]
		public float GetMaxValue()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003B6")]
	[CreateAssetMenu(fileName = "SATextToIconReplacerListAsset", menuName = "Scriptable Objects/Synodic/SATextToIconReplacerListAsset")]
	public class SATextToIconReplacerListAsset : ScriptableObject
	{
		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Text that gets replaced with text for an icon")]
		[SerializeField]
		protected SerializableDictionary<string, string> TextToIconReplacers;

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xBDA204", Offset = "0xBDA204", VA = "0xBDA204")]
		public string GetIconText(string InOriginalText)
		{
			return null;
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xBDA298", Offset = "0xBDA298", VA = "0xBDA298")]
		public SATextToIconReplacerListAsset()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	[CreateAssetMenu(fileName = "SADefaultSettingsAsset", menuName = "Scriptable Objects/Synodic/SADefaultSettingsAsset")]
	public class SADefaultSettingsAsset : ScriptableObject
	{
		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Shared default settings values")]
		[SerializeField]
		[Header("Shared")]
		protected FSAPlatformSettingsValues SharedDefaultSettingsValues;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Platform")]
		[Tooltip("Windows default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues WindowsDefaultSettingsValues;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Android default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues AndroidDefaultSettingsValues;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("iOS default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues iOSDefaultSettingsValues;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("PS4 default settings values--overrides any values in the shared category if names match")]
		protected FSAPlatformSettingsValues PS4DefaultSettingsValues;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("PS5 default settings values--overrides any values in the shared category if names match")]
		protected FSAPlatformSettingsValues PS5DefaultSettingsValues;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Xbox One default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues XboxOneDefaultSettingsValues;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Xbox Series X default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues XboxSeriesXDefaultSettingsValues;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Switch default settings values--overrides any values in the shared category if names match")]
		[SerializeField]
		protected FSAPlatformSettingsValues SwitchDefaultSettingsValues;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Development build default settings values--overrides any values in the platform if names match")]
		[Header("Test")]
		[SerializeField]
		protected FSAPlatformSettingsValues DevelopmentDefaultSettingsValues;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Tooltip("Editor default settings values--overrides any values in the development category if names match")]
		protected FSAPlatformSettingsValues EditorDefaultSettingsValues;

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xBDA2A0", Offset = "0xBDA2A0", VA = "0xBDA2A0")]
		public SADefaultSettingsAsset()
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xBDA3B4", Offset = "0xBDA3B4", VA = "0xBDA3B4")]
		protected void UpdatePlatformSettingsValues(FSAPlatformSettingsValues PlatformSettingsValuesToUpdate, FSAPlatformSettingsValues PlatformSettingsValuesThatWillOverride)
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xBDA8C8", Offset = "0xBDA8C8", VA = "0xBDA8C8")]
		public FSAPlatformSettingsValues GetSharedDefaultSettingsValues()
		{
			return null;
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xBDA8D0", Offset = "0xBDA8D0", VA = "0xBDA8D0")]
		protected FSAPlatformSettingsValues GetSpecificPlatformDefaultSettingsValues(ESAPlatforms InPlatform)
		{
			return null;
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xBDA97C", Offset = "0xBDA97C", VA = "0xBDA97C")]
		public FSAPlatformSettingsValues GetPlatformDefaultSettingsValues(ESAPlatforms InPlatform)
		{
			return null;
		}
	}
	[Token(Token = "0x20003B8")]
	public class SAGameUserSettings : SAStringDictionaries
	{
		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SAGameUserSettings Instance;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Dictionary<string, Action<string>> SettingToFunctionDict;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FOnSettingsChanged OnSettingsChangedDel;

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xBDAA34", Offset = "0xBDAA34", VA = "0xBDAA34", Slot = "4")]
		public virtual bool InitializeInstance(bool bForceInitialize = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xBDB3FC", Offset = "0xBDB3FC", VA = "0xBDB3FC", Slot = "5")]
		public virtual void InitializeSettingToFunctionDict()
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xBDB64C", Offset = "0xBDB64C", VA = "0xBDB64C", Slot = "6")]
		public virtual void InitializeDebugSettingToFunctionDict()
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xBDAE18", Offset = "0xBDAE18", VA = "0xBDAE18")]
		public void InitializeDefaultSettingValues()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xBDB650", Offset = "0xBDB650", VA = "0xBDB650", Slot = "7")]
		public virtual void LoadSavedSettingsDictionaries(SerializableDictionary<string, bool> InSettingsBoolDict, SerializableDictionary<string, int> InSettingsIntegerDict, SerializableDictionary<string, float> InSettingsFloatDict, SerializableDictionary<string, string> InSettingsStringDict)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xBDC014", Offset = "0xBDC014", VA = "0xBDC014", Slot = "8")]
		public virtual void UpdateBoolSetting(string InName, bool bNewBoolValue)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xBDC16C", Offset = "0xBDC16C", VA = "0xBDC16C", Slot = "9")]
		public virtual void UpdateIntegerSetting(string InName, int NewIntegerValue)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xBDC2C4", Offset = "0xBDC2C4", VA = "0xBDC2C4", Slot = "10")]
		public virtual void UpdateFloatSetting(string InName, float NewFloatValue)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xBDC41C", Offset = "0xBDC41C", VA = "0xBDC41C", Slot = "11")]
		public virtual void UpdateStringSetting(string InName, string NewStringValue)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xBDC574", Offset = "0xBDC574", VA = "0xBDC574")]
		public void UpdateLanguageSetting(string NewLanguageValue)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xBDC5D4", Offset = "0xBDC5D4", VA = "0xBDC5D4")]
		protected void ApplyLanguageSetting(string InSettingName)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xBDAB3C", Offset = "0xBDAB3C", VA = "0xBDAB3C")]
		protected void ApplyLanguage(LocaleIdentifier InLocaleIdentifier)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xBDC6D8", Offset = "0xBDC6D8", VA = "0xBDC6D8")]
		protected void ApplyMasterVolumeSetting(string InSettingName)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xBDC7A0", Offset = "0xBDC7A0", VA = "0xBDC7A0")]
		protected void ApplySFXVolumeSetting(string InSettingName)
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xBDC868", Offset = "0xBDC868", VA = "0xBDC868")]
		protected void ApplyMusicVolumeSetting(string InSettingName)
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xBDC930", Offset = "0xBDC930", VA = "0xBDC930")]
		protected void ApplyFixedFoveatedRenderingSetting(string InSettingName)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xBDC9AC", Offset = "0xBDC9AC", VA = "0xBDC9AC")]
		public static SAGameUserSettings GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xBDC614", Offset = "0xBDC614", VA = "0xBDC614")]
		protected bool IsUnsupportedLocaleIdentifier(LocaleIdentifier InLocaleIdentifier)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xBDC9F4", Offset = "0xBDC9F4", VA = "0xBDC9F4")]
		public string GetLanguageSetting()
		{
			return null;
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xBDCA40", Offset = "0xBDCA40", VA = "0xBDCA40")]
		public SAGameUserSettings()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class SASettingsManager : MonoBehaviour
	{
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The owning character")]
		[SerializeField]
		protected SACharacter OwningCharacter;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected SAModManagerComponent OwningModManagerComponent;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SAGameMode GameModeRef;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xBDCABC", Offset = "0xBDCABC", VA = "0xBDCABC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xBDCC1C", Offset = "0xBDCC1C", VA = "0xBDCC1C", Slot = "5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xBDCC58", Offset = "0xBDCC58", VA = "0xBDCC58", Slot = "6")]
		protected virtual void SetupAndBindSettings()
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xBDCC5C", Offset = "0xBDCC5C", VA = "0xBDCC5C", Slot = "7")]
		protected virtual void UnbindSettings()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xBDCC60", Offset = "0xBDCC60", VA = "0xBDCC60", Slot = "8")]
		protected virtual void SetupAndBindDebugSettings()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xBDCC64", Offset = "0xBDCC64", VA = "0xBDCC64", Slot = "9")]
		protected virtual void UnbindDebugSettings()
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xBDCC68", Offset = "0xBDCC68", VA = "0xBDCC68")]
		protected void HandleSettingChanged(SAModAsset CorrespondingModAsset, bool bNewValue)
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xBDCD24", Offset = "0xBDCD24", VA = "0xBDCD24")]
		public SASettingsManager()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public class SABarWidget : MonoBehaviour
	{
		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The main bar image, ideally on this component")]
		protected Image MainBarImage;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The background bar image, should be on a child component")]
		[SerializeField]
		protected Image BackgroundBarImage;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The time lerp curve for the bar. This should end at 1.0 to be used correctly. The length of this is also the time it takes to reach the new value.")]
		[SerializeField]
		protected AnimationCurve TimeLerpCurve;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If this bar widget allows overlaps. If true, when the max value is surpassed, the bar goes back to the lowest point and one of the bar nodes gets filled.")]
		[SerializeField]
		protected bool bAllowOverlaps;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The list of bar nodes (sprite swap images) that turn on and off when bar overlaps is on.")]
		[SerializeField]
		protected List<SASpriteSwapImage> BarNodes;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float MaxValue;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float FunctionalValue;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float VisualValue;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float OriginalVisualValue;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool bUpdatingVisuals;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected float BarChangeTime;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected float CurrentBarChangeTime;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected float BarChangeAmount;

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xBDCD2C", Offset = "0xBDCD2C", VA = "0xBDCD2C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xBDCE74", Offset = "0xBDCE74", VA = "0xBDCE74", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xBDCFBC", Offset = "0xBDCFBC", VA = "0xBDCFBC")]
		public void UpdateMaxValue(float InMaxValue, bool bFillToMax = false)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xBDD078", Offset = "0xBDD078", VA = "0xBDD078")]
		public void SetBarValue(float InValue)
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xBDD0D0", Offset = "0xBDD0D0", VA = "0xBDD0D0")]
		protected void SetFunctionalValue(float InValue)
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xBDCEE4", Offset = "0xBDCEE4", VA = "0xBDCEE4")]
		protected void SetVisualValue(float InValue)
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xBDD1AC", Offset = "0xBDD1AC", VA = "0xBDD1AC")]
		protected void UpdateBarNodes(int NumActiveImages)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xBDD38C", Offset = "0xBDD38C", VA = "0xBDD38C")]
		public SABarWidget()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public class SAButtonWidget : SASelectableWidgetBase
	{
		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xBDD3A8", Offset = "0xBDD3A8", VA = "0xBDD3A8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xBDD3B0", Offset = "0xBDD3B0", VA = "0xBDD3B0")]
		public SAButtonWidget()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	public class SACarouselSelectionWidget : MonoBehaviour
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Image CarouselSelectionImage;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Color of the carousel selection when it is selected")]
		protected Color SelectedColor;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Color of the carousel selection when it is unselected")]
		[SerializeField]
		protected Color UnselectedColor;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool bSelected;

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xBDD3C0", Offset = "0xBDD3C0", VA = "0xBDD3C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xBDD410", Offset = "0xBDD410", VA = "0xBDD410")]
		public void SetSelected(bool bNewSelected)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xBDD4D4", Offset = "0xBDD4D4", VA = "0xBDD4D4")]
		public bool IsSelected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xBDD4DC", Offset = "0xBDD4DC", VA = "0xBDD4DC")]
		public SACarouselSelectionWidget()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class SACarouselWidget : SASelectableWidgetBase
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Carousel")]
		[Tooltip("The transform for the carousel selections")]
		[SerializeField]
		protected Transform CarouselSelections;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The button for cycling left")]
		[SerializeField]
		protected Button CycleLeftButton;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The button for cycling right")]
		[SerializeField]
		protected Button CycleRightButton;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The prefab for the carousel selections")]
		[SerializeField]
		protected GameObject PF_CarouselSelection;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The SFX that plays when cycling the carousel")]
		[SerializeField]
		protected Event CycleSFX;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FOnCarouselIndexChanged OnCarouselIndexChangedDel;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected int CurrentCarouselIndex;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected List<SACarouselSelectionWidget> CarouselSelectionWidgets;

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xBDD4F4", Offset = "0xBDD4F4", VA = "0xBDD4F4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xBDD774", Offset = "0xBDD774", VA = "0xBDD774")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xBDD8D0", Offset = "0xBDD8D0", VA = "0xBDD8D0")]
		public void CycleRight()
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xBDD8EC", Offset = "0xBDD8EC", VA = "0xBDD8EC")]
		public void CycleLeft()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xBDD908", Offset = "0xBDD908", VA = "0xBDD908")]
		public void SetIndexAutomatically(int NewIndex)
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xBDD91C", Offset = "0xBDD91C", VA = "0xBDD91C", Slot = "17")]
		protected virtual void CycleIndex(int NewIndex, bool bAutomaticSet = false)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xBDDA7C", Offset = "0xBDDA7C", VA = "0xBDDA7C", Slot = "18")]
		public virtual int GetNumCarouselItems()
		{
			return default(int);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xBDDA84", Offset = "0xBDDA84", VA = "0xBDDA84")]
		public SACarouselWidget()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class SAConditionProgressWidget : MonoBehaviour
	{
		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The condition description text")]
		protected SAText ConditionDescriptionText;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The condition progress text")]
		protected SAText ConditionProgressText;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The condition progress bar")]
		[SerializeField]
		protected SABarWidget ConditionProgressBar;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The string we use for displaying the condition's progress--should have {0} and {1} in it used for current and required values")]
		[SerializeField]
		protected LocalizedString ConditionProgressCounterTextString;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected SAConditionAsset CurrentConditionAsset;

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xBDDB00", Offset = "0xBDDB00", VA = "0xBDDB00")]
		public void UpdateCondition(SAConditionAsset InConditionAsset)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xBDDDC4", Offset = "0xBDDDC4", VA = "0xBDDDC4")]
		public void ClearCondition()
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xBDE010", Offset = "0xBDE010", VA = "0xBDE010")]
		public SAConditionProgressWidget()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class SALayeredScreen : MonoBehaviour
	{
		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The initial selectable to highlight on this screen")]
		[SerializeField]
		protected SASelectableWidgetBase InitialSelectable;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("If we should save what the last selectable was when we close this screen. NOTE: This will not work if bDestroyOnClose is true.")]
		private bool bSaveLastSelectableOnClose;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If we should destroy this object or not when we close the screen")]
		[SerializeField]
		private bool bDestroyOnClose;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SASelectableWidgetBase CurrentSelectable;

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xBDE018", Offset = "0xBDE018", VA = "0xBDE018", Slot = "4")]
		public virtual void OpenScreen()
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xBDE0A8", Offset = "0xBDE0A8", VA = "0xBDE0A8")]
		public void HideScreen()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xBDE0CC", Offset = "0xBDE0CC", VA = "0xBDE0CC", Slot = "5")]
		public virtual void CloseScreen()
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xBDE178", Offset = "0xBDE178", VA = "0xBDE178")]
		public void UpdateInitialSelectable(SASelectableWidgetBase InSelectable)
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xBDE180", Offset = "0xBDE180", VA = "0xBDE180")]
		public void UpdateCurrentSelectable(SASelectableWidgetBase InSelectable)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xBDE188", Offset = "0xBDE188", VA = "0xBDE188")]
		public SASelectableWidgetBase GetCurrentSelectable()
		{
			return null;
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xBDE190", Offset = "0xBDE190", VA = "0xBDE190")]
		public SALayeredScreen()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class SAPageChangerButtonWidget : SASelectableWidgetBase
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[Tooltip("The page layered screen for this page changer button widget")]
		protected SAPageLayeredScreen PageLayeredScreen;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[Tooltip("The SFX that plays when changing pages")]
		protected Event PageChangedSFX;

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xBDE198", Offset = "0xBDE198", VA = "0xBDE198", Slot = "13")]
		public override bool HasPressRightLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xBDE1A0", Offset = "0xBDE1A0", VA = "0xBDE1A0", Slot = "14")]
		public override void DoPressRightLogic()
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xBDE254", Offset = "0xBDE254", VA = "0xBDE254", Slot = "15")]
		public override bool HasPressLeftLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xBDE25C", Offset = "0xBDE25C", VA = "0xBDE25C", Slot = "16")]
		public override void DoPressLeftLogic()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xBDE310", Offset = "0xBDE310", VA = "0xBDE310")]
		public SAPageChangerButtonWidget()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public class SAPageLayeredScreen : SALayeredScreen
	{
		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("The objects we use as pages")]
		protected List<GameObject> Pages;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("The page counter text")]
		protected SAText PageCounterText;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int CurrentPage;

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xBDE318", Offset = "0xBDE318", VA = "0xBDE318")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xBDE4E8", Offset = "0xBDE4E8", VA = "0xBDE4E8", Slot = "4")]
		public override void OpenScreen()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xBDE4EC", Offset = "0xBDE4EC", VA = "0xBDE4EC", Slot = "5")]
		public override void CloseScreen()
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xBDE24C", Offset = "0xBDE24C", VA = "0xBDE24C")]
		public void TurnRight()
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xBDE308", Offset = "0xBDE308", VA = "0xBDE308")]
		public void TurnLeft()
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xBDE320", Offset = "0xBDE320", VA = "0xBDE320")]
		protected void TurnPage(int InPagesTurned)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xBDE4F0", Offset = "0xBDE4F0", VA = "0xBDE4F0")]
		protected void LeftButtonClicked()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xBDE4F8", Offset = "0xBDE4F8", VA = "0xBDE4F8")]
		protected void RightButtonClicked()
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xBDE500", Offset = "0xBDE500", VA = "0xBDE500")]
		public SAPageLayeredScreen()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class SASelectableWidgetBase : MonoBehaviour
	{
		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Selectable AssociatedSelectable;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FOnSelectableWidgetConfirmed OnSelectableWidgetConfirmedDel;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FOnSelectableWidgetHighlighted OnSelectableWidgetHighlightedDel;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FOnSelectableWidgetUnhighlighted OnSelectableWidgetUnhighlightedDel;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("The game modes that this widget will NOT show up in. If no game mode is found, this widget WILL be displayed.")]
		[Header("Validity")]
		protected List<SubclassOf<SAGameMode>> DisabledGameModes;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("The platforms that this widget will NOT show up in.")]
		protected List<ESAPlatforms> DisabledPlatforms;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If this widget only shows up in development mode")]
		[SerializeField]
		protected bool bDevelopmentOnly;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The SFX to play when confirming this widget")]
		[SerializeField]
		[Header("SFX")]
		protected Event ConfirmSFX;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Tooltip("The SFX to play when highlighting this widget")]
		protected Event HighlightSFX;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Tooltip("The SFX to play when unhighlighting this widget")]
		protected Event UnhighlightSFX;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The widget to navigate to when pressing up")]
		[SerializeField]
		[Header("Navigation")]
		protected SASelectableWidgetBase UpNavigationWidget;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The widget to navigate to when pressing down")]
		[SerializeField]
		protected SASelectableWidgetBase DownNavigationWidget;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The widget to navigate to when pressing right")]
		[SerializeField]
		protected SASelectableWidgetBase RightNavigationWidget;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Tooltip("The widget to navigate to when pressing left")]
		protected SASelectableWidgetBase LeftNavigationWidget;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SAGameMode GameModeRef;

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xBDE508", Offset = "0xBDE508", VA = "0xBDE508", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xBDD3AC", Offset = "0xBDD3AC", VA = "0xBDD3AC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xBDE6B0", Offset = "0xBDE6B0", VA = "0xBDE6B0", Slot = "6")]
		public virtual void Confirm()
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xBDE870", Offset = "0xBDE870", VA = "0xBDE870", Slot = "7")]
		public virtual void Highlight()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xBDE93C", Offset = "0xBDE93C", VA = "0xBDE93C", Slot = "8")]
		public virtual void Unhighlight()
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xBDE9EC", Offset = "0xBDE9EC", VA = "0xBDE9EC")]
		public bool HasPressLogic(ESADirections InDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xBDEA50", Offset = "0xBDEA50", VA = "0xBDEA50")]
		public void DoPressLogic(ESADirections InDirection)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xBDEAB0", Offset = "0xBDEAB0", VA = "0xBDEAB0", Slot = "9")]
		public virtual bool HasPressUpLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xBDEAB8", Offset = "0xBDEAB8", VA = "0xBDEAB8", Slot = "10")]
		public virtual void DoPressUpLogic()
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xBDEABC", Offset = "0xBDEABC", VA = "0xBDEABC", Slot = "11")]
		public virtual bool HasPressDownLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xBDEAC4", Offset = "0xBDEAC4", VA = "0xBDEAC4", Slot = "12")]
		public virtual void DoPressDownLogic()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xBDEAC8", Offset = "0xBDEAC8", VA = "0xBDEAC8", Slot = "13")]
		public virtual bool HasPressRightLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xBDE248", Offset = "0xBDE248", VA = "0xBDE248", Slot = "14")]
		public virtual void DoPressRightLogic()
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xBDEAD0", Offset = "0xBDEAD0", VA = "0xBDEAD0", Slot = "15")]
		public virtual bool HasPressLeftLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xBDE304", Offset = "0xBDE304", VA = "0xBDE304", Slot = "16")]
		public virtual void DoPressLeftLogic()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xBDEAD8", Offset = "0xBDEAD8", VA = "0xBDEAD8")]
		public void UpdateNavigationWidget(ESADirections InDirection, SASelectableWidgetBase InSelectableWidgetBase)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xBDEB1C", Offset = "0xBDEB1C", VA = "0xBDEB1C")]
		public void UpdateUpNavigationWidget(SASelectableWidgetBase InSelectableWidgetBase)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xBDEB24", Offset = "0xBDEB24", VA = "0xBDEB24")]
		public void UpdateDownNavigationWidget(SASelectableWidgetBase InSelectableWidgetBase)
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xBDEB2C", Offset = "0xBDEB2C", VA = "0xBDEB2C")]
		public void UpdateRightNavigationWidget(SASelectableWidgetBase InSelectableWidgetBase)
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xBDEB34", Offset = "0xBDEB34", VA = "0xBDEB34")]
		public void UpdateLeftNavigationWidget(SASelectableWidgetBase InSelectableWidgetBase)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xBDEB3C", Offset = "0xBDEB3C", VA = "0xBDEB3C")]
		public Selectable GetAssociatedSelectable()
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xBDEB44", Offset = "0xBDEB44", VA = "0xBDEB44")]
		public SASelectableWidgetBase GetNavigationWidget(ESADirections InDirection)
		{
			return null;
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xBDEB90", Offset = "0xBDEB90", VA = "0xBDEB90")]
		public SASelectableWidgetBase GetNextActiveNavigationWidget(ESADirections InDirection)
		{
			return null;
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xBDED40", Offset = "0xBDED40", VA = "0xBDED40")]
		public SASelectableWidgetBase GetUpNavigationWidget()
		{
			return null;
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xBDED48", Offset = "0xBDED48", VA = "0xBDED48")]
		public SASelectableWidgetBase GetDownNavigationWidget()
		{
			return null;
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xBDED50", Offset = "0xBDED50", VA = "0xBDED50")]
		public SASelectableWidgetBase GetRightNavigationWidget()
		{
			return null;
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xBDED58", Offset = "0xBDED58", VA = "0xBDED58")]
		public SASelectableWidgetBase GetLeftNavigationWidget()
		{
			return null;
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xBDD3B8", Offset = "0xBDD3B8", VA = "0xBDD3B8")]
		public SASelectableWidgetBase()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class SASettingCarouselWidget : SACarouselWidget
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Settings")]
		[Tooltip("The text field for display the setting's current option")]
		[SerializeField]
		protected SAText SettingOptionText;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[Tooltip("The setting key name to automatically update the settings when this carousel is updated")]
		protected string SettingName;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The variable type for this widget's options. (If enum, use Integer and match the enum number with its index in the enum set.")]
		[SerializeField]
		protected ESAVariableTypes VariableType;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Individual bool options that are used when variable type is Bool")]
		[SerializeField]
		protected List<FSACarouselOptionBool> BoolOptions;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Individual integer options that are used when variable type is Integer")]
		[SerializeField]
		protected List<FSACarouselOptionInteger> IntegerOptions;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[Tooltip("Individual float options that are used when variable type is Float")]
		protected List<FSACarouselOptionFloat> FloatOptions;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Individual string options that are used when variable type is String")]
		[SerializeField]
		protected List<FSACarouselOptionString> StringOptions;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("If we need to set the initial value via a function for a special case, do so here. This WILL be overridden if there is a value saved.")]
		[SerializeField]
		protected bool bSetInitialValueViaFunction;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[Tooltip("The function name to handle the initial value for this function. Must have the above boolean set to true to be used. This WILL be overridden if there is a value saved.")]
		protected string SetInitialValueFunctionName;

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xBDED60", Offset = "0xBDED60", VA = "0xBDED60", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xBDF2F0", Offset = "0xBDF2F0", VA = "0xBDF2F0", Slot = "17")]
		protected override void CycleIndex(int NewIndex, bool bAutomaticSet = false)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xBDFEE8", Offset = "0xBDFEE8", VA = "0xBDFEE8", Slot = "13")]
		public override bool HasPressRightLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xBDFEF0", Offset = "0xBDFEF0", VA = "0xBDFEF0", Slot = "14")]
		public override void DoPressRightLogic()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xBDFF0C", Offset = "0xBDFF0C", VA = "0xBDFF0C", Slot = "15")]
		public override bool HasPressLeftLogic()
		{
			return default(bool);
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xBDFF14", Offset = "0xBDFF14", VA = "0xBDFF14", Slot = "16")]
		public override void DoPressLeftLogic()
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xBDED78", Offset = "0xBDED78", VA = "0xBDED78")]
		public void TrySetIndexToMatchingSettingValue()
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xBDFF30", Offset = "0xBDFF30", VA = "0xBDFF30")]
		private void AddBoolOption(FSACarouselOptionBool NewBoolOption)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xBDFFD4", Offset = "0xBDFFD4", VA = "0xBDFFD4")]
		private void AddIntegerOption(FSACarouselOptionInteger NewIntegerOption)
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xBE0078", Offset = "0xBE0078", VA = "0xBE0078")]
		private void AddFloatOption(FSACarouselOptionFloat NewFloatOption)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xBE011C", Offset = "0xBE011C", VA = "0xBE011C")]
		private void AddStringOption(FSACarouselOptionString NewStringOption)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xBE01C0", Offset = "0xBE01C0", VA = "0xBE01C0", Slot = "18")]
		public override int GetNumCarouselItems()
		{
			return default(int);
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xBDFC60", Offset = "0xBDFC60", VA = "0xBDFC60")]
		public bool GetBoolValueAtIndex(int InIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xBDFD04", Offset = "0xBDFD04", VA = "0xBDFD04")]
		public int GetIntegerValueAtIndex(int InIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xBDFDA0", Offset = "0xBDFDA0", VA = "0xBDFDA0")]
		public float GetFloatValueAtIndex(int InIndex)
		{
			return default(float);
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xBDFE38", Offset = "0xBDFE38", VA = "0xBDFE38")]
		public string GetStringValueAtIndex(int InIndex)
		{
			return null;
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xBDF500", Offset = "0xBDF500", VA = "0xBDF500")]
		public int GetTrueTextIndex(int InIndex)
		{
			return default(int);
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xBDFAA4", Offset = "0xBDFAA4", VA = "0xBDFAA4")]
		public LocalizedString GetLocalizedTextAtTrueIndex(int InTrueIndex)
		{
			return null;
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xBDF900", Offset = "0xBDF900", VA = "0xBDF900")]
		public string GetUnlocalizedTextAtTrueIndex(int InTrueIndex)
		{
			return null;
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xBDF768", Offset = "0xBDF768", VA = "0xBDF768")]
		public bool DoesUseUnlocalizedTextAtTrueIndex(int InTrueIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xBE0694", Offset = "0xBE0694", VA = "0xBE0694")]
		public string GetCurrentLocaleIdentifierString()
		{
			return null;
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xBE074C", Offset = "0xBE074C", VA = "0xBE074C")]
		public SASettingCarouselWidget()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public class SASpriteSwapImage : MonoBehaviour
	{
		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The main image")]
		protected Image MainImage;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The sprite for when it's active")]
		protected Sprite ActiveSprite;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The sprite for when it's not active")]
		[SerializeField]
		protected Sprite InactiveSprite;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Hides the image when inactive")]
		protected bool bHideWhenInactive;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool bActiveImage;

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xBE0758", Offset = "0xBE0758", VA = "0xBE0758")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xBDD2A4", Offset = "0xBDD2A4", VA = "0xBDD2A4")]
		public void SetActiveImage(bool bInActiveImage)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xBE0834", Offset = "0xBE0834", VA = "0xBE0834")]
		public SASpriteSwapImage()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public class SAStatDataWidget : MonoBehaviour
	{
		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The text value for stats")]
		protected SAText StatsValueText;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The key we use for finding the stat data")]
		protected string StatKey;

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xBE083C", Offset = "0xBE083C", VA = "0xBE083C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xBE08DC", Offset = "0xBE08DC", VA = "0xBE08DC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xBE08E8", Offset = "0xBE08E8", VA = "0xBE08E8", Slot = "6")]
		public virtual void ReevaluateStat()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xBE0938", Offset = "0xBE0938", VA = "0xBE0938", Slot = "7")]
		protected virtual int GetCurrentIntegerStatValue()
		{
			return default(int);
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xBE09DC", Offset = "0xBE09DC", VA = "0xBE09DC")]
		public SAStatDataWidget()
		{
		}
	}
}
namespace FlyingWormConsole3
{
	[Token(Token = "0x20003C6")]
	public class ConsoleProRemoteServer : MonoBehaviour
	{
		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useNATPunch;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int port;

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xBE09E4", Offset = "0xBE09E4", VA = "0xBE09E4")]
		public void Awake()
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xBE0A4C", Offset = "0xBE0A4C", VA = "0xBE0A4C")]
		public ConsoleProRemoteServer()
		{
		}
	}
}
